<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="908"
  DTS:VersionGUID="{64EA46C3-A930-4260-ACF6-438DF3BEC381}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=SG-D-SQL01.farrms.us,2033;User ID=farrms_admin;Initial Catalog=TRMTracker_Gas_Demo_POC;Provider=SQLNCLI11.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TEST"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">6B516344_94EC_492B_8C43_2037F0B85B89</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">sangam</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Policy;
using System.Windows.Forms;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_585ba2e92bdd42deb81f7c0ce8402faa.ExtensionMethods;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>


        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //for test
                //PS_process_id = "A4F24EAF_35C3_44FD_A858_CF50E0223F7C";
                //PS_user_name = "snepal";
                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void CreateProcessTableIfNotExists()
        {
            try
            {
                string query = @"EXEC spa_flow_optimization @flag = 'b', @process_id='" + PS_process_id + "'";
                OleDbCommand cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Supply>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contract =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .FirstOrDefault();
                    }
                }


                index = 0;
                foreach (Supply receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contract = new Contract() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract;
                            if (contract == null)
                                path.Contract = new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path };
                            //foreach (Contract contract in path.Contracts)
                            //{
                            var mdqCollection = _solverData.MDQDatas.Where(z => z.FromLocationId == receipt.Id & z.ToLocationId == delivery.Id & z.ContractId == contract.Id & z.PathId == path.Id)
                                .Select(z =>
                                        new MDQ()
                                        {
                                            Id = index,
                                            Delivery = delivery,
                                            Supply = receipt,
                                            Position = z.MDQ,
                                            Contract = new Contract() { Id = z.ContractId, Description = z.ContractName, Rank = z.ContractRank },
                                            Decision = new Decision(Domain.RealNonnegative, "D" + index),
                                            Path = new Path() { Id = z.PathId, Description = z.PathName, ReceiptId = receipt.Id },
                                            LossFactor = z.LossFactor,
                                            SupplyAdjustFactor = z.SupplyAdjustFactor,
                                            DeliveryAdjustFactor = z.DeliveryAdjustFactor,
                                            DemandAdjustFactor = z.DemandAdjustFactor,
                                            TermStart = z.TermStart,
                                            Hour = z.Hour,
                                            Granularity = z.Granularity,
                                            SupplyPosition = z.SupplyPosition,
                                            DemandPosition = z.DemandPosition
                                        })
                                .ToList();

                            _solverData.MDQs.AddRange(mdqCollection);
                            /*
                            _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }
                                */
                            index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Supply[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Supply receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Supply.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Supply.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();

                        paths = mdqs.Where(x => x.Supply.Id == receipt.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.Path.Id,
                                        Description = x.Path.Description,
                                        Priority = x.Path.Priority,
                                        ReceiptId = x.Path.ReceiptId,
                                        Delivery = x.Delivery,
                                        Contract = new Contract() { Id = x.Contract.Id, Description = x.Contract.Description, Rank = x.Contract.Rank }
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToArray();


                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract; // path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                                                               //foreach (Contract contract in contracts)
                                                               //{
                                                               //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            context.ClearModel();
                            Model model = context.CreateModel();

                            //  Contract according to their rankings
                            //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Supply.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                            if (mdqtoadjust.Count() == 0) continue;
                            //  MDQ Constraint
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Decision = new Decision(Domain.RealNonnegative, "D" + Guid.NewGuid().ToString().Replace("-", "_").ToUpper());
                                model.AddDecision(mdq.Decision);
                                model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position
                                                        & mdq.Decision <= mdq.Supply.Position
                                                        & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor
                                                        & mdq.Decision <= receipt.Position
                                                        & mdq.Decision <= mdq.Supply.max_withdrawal
                                                        & mdq.Decision >= mdq.Supply.min_withdrawal
                                                        & mdq.Decision <= mdq.Delivery.max_injection
                                                        & mdq.Decision >= mdq.Delivery.min_injection
                                                        & mdq.Decision <= mdq.Delivery.ratchet_limit
                                                        & mdq.Decision <= mdq.Supply.ratchet_limit
                                                        & mdq.Decision <= mdq.SupplyPosition
                                                        & mdq.Decision <= mdq.DemandPosition);
                            }
                            //  Row constraint
                            Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                            //Column Constraint
                              model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position);
                            //  Sum of Hourly supply constraint / Demand Constraint
                            //model.AddConstraint("SUPPLY" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.SupplyPositionHourly));
                            //model.AddConstraint("DEMAND" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.DemandPositionHourly));

                            //  Decisions to solve
                            //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                            model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                            _solverData.Model = model;
                            var simplex = new SimplexDirective();
                            Solution solution = context.Solve(simplex);
                            Goal goal = model.Goals.FirstOrDefault();
                            if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                            //receipt.Position -= goal.ToInt();

                            int[] deliverids = mdqtoadjust.Select(x => x.Delivery.Id).Distinct().ToArray();
                            foreach (int deliverid in deliverids)
                            {
                                Delivery delivery = deliveries.Where(x => x.Id == deliverid).FirstOrDefault();
                                double total = mdqtoadjust.Where(x => x.Delivery.Id == deliverid).Sum(x => x.SolverDecision);
                                //delivery.Position -= total;     //  This line was commented for calculation delivery side position according to loss factor
                                //  Decrease delivery side position according to solver decesion & its loss factor
                                /*foreach (MDQ mdq in mdqtoadjust)
                                {
                                    delivery.Position -= Convert.ToInt32(mdq.SolverDecision * (1 + mdq.LossFactor));
                                }*/
                            }
                            //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.ReceiptDecision = mdq.SolverDecision;
                                //if (mdq.Receipt.Position == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                if (mdq.SupplyPosition == mdq.SolverDecision && mdq.SolverDecision != 0)
                                {
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    mdq.Supply.Position -= mdq.SolverDecision;
                                    mdq.Delivery.Position -= mdq.DeliveryDecision;
                                }

                                if (mdq.SolverDecision < mdq.SupplyPosition && mdq.SolverDecision != 0)
                                {
                                    //  sd - 5000 , p 8038
                                    double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                    double availablePosition = mdq.SupplyPosition - sdLossFactor;

                                    if (availablePosition >= 0)
                                    {
                                        mdq.ReceiptDecision = sdLossFactor;
                                        mdq.DeliveryDecision = mdq.SolverDecision;
                                        mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                    }
                                    else
                                    {
                                        mdq.ReceiptDecision = sdLossFactor - (mdq.Supply.Position - mdq.SolverDecision);
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.ReceiptDecision = mdq.Supply.Position;
                                        }
                                        mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                        }
                                        mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }


                                }
                            }
                            //} //for contract 
                        }

                    }

                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    #region Class Declarations

    internal class Supply
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_withdrawal { get; set; }
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }

    internal class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }

        public virtual List<Path> Paths { get; set; }
    }

    internal class MDQ
    {
        public int Id { get; set; }
        public Supply Supply { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }

        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecisionExact = value; }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();

                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }
    }

    internal class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
    }

    internal class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual Contract Contract { get; set; }
    }

    internal class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }

    internal class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Supply[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank,[term_start],[hour],[granularity], supply_position, demand_position) " +
                                                                                                    "Values (" + q.Supply.Id + ",'" + q.Supply.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Supply.FixedPosition.ToString() + "," + q.Supply.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ",'" + q.TermStart.ToString() + "'," + q.Hour + "," + q.Granularity + "," + q.SupplyPosition + "," + q.DemandPosition + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            if (!string.IsNullOrEmpty(query))
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }

    #endregion

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{03EF4576-714D-44EE-80B6-ADEB18E884F0}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="92a8d8a6032f4223a38021efa4d4b8ab">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>124</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="87eea4960a7a48deb50bf258ddeaa672">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>126</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="be408d9866bf47ac9f4e74f0fbcaffef">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>127</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
qwwKBQEAkQwKBQEA0QoHBQEAMgwNBQEAEwwNBQEA2A4NBQEANA4QBQEASgkHBQEANQ8YBQEATQ8c
BQEAkQwKBQEASA0KBQEAuwogBQEAvg4kBQEAewsoBQEACgoHBQEAtgsHBQEAlQsKBQEA0wsKBQEA
iA0KBQEAZA0KBQEArA0KBQEAGg8sBQEA0g0HBQEAZw8HBQEACw0KBQEAygwKBQEAdgkHBQEA9QtF
AAEAlgkHBQEARApFAAEASA0KBQEAXgkHBQEAKgpFAAEAhA8HBQEAtAkHBQEAfgpFAAEA5woHBQEA
HAkKBQEAiA0KBQEAZA0KBQEArA0KBQEAGg8sBQEA0g0HBQEAZw8HBQEACw0KBQEAygwKBQEASgkH
BQEAKw1FAAEAhA8HBQEA0AkHBQEATQ8cBQEAvg4kBQEASgkHBQEAKw1FAAEA0QoHBQEAuwogBQEA
6AgHBQEAMQkHBQEABQsHBQEASw4xBQEAZg4HBQEA6A02BQEA/g0+BQEApA5DBQEAGA5IBQEANA5N
BQEAiQ5SBQEAcgxXBQEAZAtcBQEAUQxgBQEAnApFAAEA6wlFAAEAAQlFAAEAZApFAAEA9w5FAAEA
6gxFABEA5hZkBREA6hFpBREA9w9uBQYGZAcHBVaAch5yBVaAyhFyBQYA+SAHBQYAfyEcBQYAKxUg
BQYADAJ2BQYAkSAYBQYADQN6BQYAggV+BQYAyAV+BQYAfyEcBQYA0wOHBQYA3AaLBQYAKxUgBQYA
YB8kBQYAngSVBTYAogaZBRYAiAKdBRYAZQOmBRYAugC2BRYAkAG/BRYATATIBRYA7wTIBRYAWAXI
BRYARQbRBRYAsgbbBRYALADkBRYADAHtBRYAHAKdBRYArgTtBRYALAWdBRYAnAWmBRYAWAD3BRYA
OAHIBRYACwQBBhYAuwL3BQYAkSAYBQYAHQN+BQYA4wMKBgYA0CEHBQYADAITBgYAfyEcBQYADQMX
BgYAKxUgBQYAYB8kBQYA0wMXBgYA1ggHBTYAogYbBhYAhAAKBlAgAAAAAIYA+BYBAAEA/CAAAAAA
gQAHGR8GAQCIIQAAAACBABwfAQACAPwiAAAAAIEA/h4BAAIAiCMAAAAAgQCzBwEAAgDEKQAAAACB
AHoeAQACAOQ0AAAAAIYYJhsBAAIA9zQAAAAAhggZCHgAAgD/NAAAAACGCCAIBQACAAg1AAAAAIYI
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
uxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQA
AAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEA
uxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQA
AAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEA
uxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQA
AAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEA
uxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQA
AAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQAAAEAuxQQEAEAmBcAAAEAXyEAAAEAuxQAAAEAuxQAAAEA
SSAAAAIAORoAAAEADRoAAAIAUhEAAAMArRQAAAQA+SAAAAEAxCAAAAIAQRoAAAEAxCAAAAIAQRoA
AAEAuxQAAAEA3xsAAAEAuxQAIAAAAAAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA
/SAAAAEACiIAAAEACiIAAAEA/SAAAAEAFxUAAAEA/SAAAAEA/SAAAAEA/SAAAAEACCIAAAEA/SAA
AAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEAFxUAAAEA/SAAAAEA
/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAAAAEA/SAA
AAEA/SAAAAEA/SAJACYbAQARACYbBQAZACYbAQAhACYbCgAxACYbEAA5ACYbEABBACYbEABJACYb
EABRACYbEABZACYbEABhACYbEABpACYbEABxACYbAQD5ACYbAQBRASYbAQBxASYbFQCBASYbEACJ
ASYbAQCRASYbBQB5AJMeIQCZAVMeJwChAcgWLQCZARIgBQCZAdkeNACBAAcQOgCBANkPOgC5AT8f
PgC5AeEhRQCxAfgaSACpAZkfWACZAXwdXADBAcgWYgDJAY0UWAABAQYVOgC5AT8faQDRASYbcQDZ
AU8heAC5AT8fswDRAXEauQAMACYbAQDhASQhygDhAYsg2AApAUkSAQAUACYbAQAcACYbAQAkACYb
AQAsACYbCwHhAbgREQE0ACYbCwHhAakfMwHhAbAfVAHhAb0gawE8ACYbCwHhAQYhhAFEACYbCwFM
AA4bzgFUAD0g3gFcACYbCwHhAfUf8wFUAM8gBQJJAU8SAQBkACYbCwFMAMQIEQJsACYbCwEkABMQ
LAK5AOYgiQJ0ACYbCwHhAQ4hlgJ8ACYbCwHhAf8gvgKEACYbCwGMACYbCwGUACYbCwGcACYbCwGk
ACYbCwGsACYbCwG5AG0WAQC5AGEWNAPxAcEUOQPhAOAIPwO5AdEPRAO5AaUaOgC5AT8fSgPJACYb
UAPBAB4XWAPJAM0QOgDpALkfXgPpAO4VZAPpAJ4PZAPpANgVZAPBAFEgbQO0ACYbCwEBAgYVOgDB
AN0WiwPBAKwVkwPRACYbAQC5AOYUngPBAKcdqAO8ACYbCwHEACYbCwHhAd0WxwN5ACYbAQABASYb
AQDJAHkQ3gPMACYbCwHhAXsS8gO5AdkhEgTZAZURFwTRAWMeHgQxApcUJARBAgYVOgARAQYVOgAB
AbARNARJAv4hOgRRAqQUQQTUACYbAQBJAsUecgRZAugPeQQpARwQgAQxATYfhgRpAg4bjAQ5AT0g
WABBARYhkgQpAcgWlwQ5Ac8gBQLUAMQIEQIpAb8IBQLcACYbAQDUAA4bzgHkAD0g3gFJApUQrAR5
AqURtQTcAMQIEQLkAM8gBQJ5AmgCwQS5AYghxgRJAiwhzARZASYb0gR5ASYbAQDhAckg8wECAGUB
/wQIAHwB9QQIAIAB+gQuAAsA+gQuABMAawguABsAdAguACMAkwguACsAnAguADMAxQguADsAxQgu
AEMAywguAEsAnAguAFMA2gguAFsAxQguAGMA+ghDAGsA+gSBAHMA+gShAHMA+gTBAHMA+gThAHMA
+gQAAXMA+gQBAXMA+gQgAXMA+gQhAXMA+gRAAXMA+gRBAXMA+gRgAXMA+gRjAQsA+gSAAXMA+gSB
AXMA+gSDAQsA+gSgAXMA+gShAXMA+gSjAXsA+gTAAXMA+gTBAXMA+gTgAXMA+gThAXMA+gTjAXMA
+gTjAYsASwnjAZMA+gQAAnMA+gQBAnMA+gQgAnMA+gQhAnMA+gQjAnMA+gRAAnMA+gRBAnMA+gRD
AnMA+gRgAnMA+gRhAnMA+gRjAnMA+gSAAnMA+gSBAnMA+gSDAnMA+gSgAnMA+gShAnMA+gSjAnMA
+gTBAnMA+gTDAnMA+gThAnMA+gTjAnMA+gQBA3MA+gQDA3MA+gQgA3MA+gQhA3MA+gQjA3MA+gRA
A3MA+gRBA3MA+gRDA3MA+gRgA3MA+gRhA3MA+gRjA3MA+gSAA3MA+gSBA3MA+gSDA3MA+gSgA3MA
+gShA3MA+gSjA3MA+gTAA3MA+gTBA3MA+gTgA3MA+gThA3MA+gQABHMA+gQBBHMA+gQgBHMA+gQh
BHMA+gRABHMA+gRBBHMA+gRgBHMA+gRhBHMA+gSABHMA+gSBBHMA+gSgBHMA+gShBHMA+gTABHMA
+gTBBHMA+gTgBHMA+gThBHMA+gQABXMA+gQBBXMA+gQgBXMA+gQhBXMA+gRABXMA+gRBBXMA+gRh
BXMA+gSABXMA+gSBBXMA+gSgBXMA+gShBXMA+gTABXMA+gTBBXMA+gTgBXMA+gThBXMA+gQABnMA
+gQBBnMA+gQgBnMA+gQhBnMA+gRABnMA+gRBBnMA+gRgBnMA+gRhBnMA+gSABnMA+gSBBnMA+gSg
BnMA+gShBnMA+gTABnMA+gTBBnMA+gTgBnMA+gThBnMA+gQAB3MA+gQBB3MA+gQgB3MA+gQhB3MA
+gRAB3MA+gRBB3MA+gRgB3MA+gRhB3MA+gSAB3MA+gSBB3MA+gSgB3MA+gShB3MA+gTAB3MA+gTB
B3MA+gTgB3MA+gThB3MA+gQACHMA+gQBCHMA+gQgCHMA+gQhCHMA+gRACHMA+gRBCHMA+gRgCHMA
+gRhCHMA+gSACHMA+gSBCHMA+gSgCHMA+gShCHMA+gTACHMA+gTBCHMA+gTgCHMA+gThCHMA+gQA
CXMA+gQBCXMA+gQgCXMA+gQhCXMA+gRACXMA+gRBCXMA+gRgCXMA+gRhCXMA+gSACXMA+gSBCXMA
+gSgCXMA+gShCXMA+gTACXMA+gTBCXMA+gTgCXMA+gThCXMA+gQACnMA+gQBCnMA+gQgCnMA+gQh
CnMA+gRACnMA+gRBCnMA+gRgCnMA+gRhCnMA+gSBCnMA+gShCnMA+gTBCnMA+gThCnMA+gQBC3MA
+gQgC3MA+gQhC3MA+gRAC3MA+gRBC3MA+gRJC4MAkwhgC3MA+gRpC4MAkwiAC3MA+gSgC3MA+gSh
C3MA+gTAC3MA+gTgC3MA+gQADHMA+gQgDHMA+gRADHMA+gRgDHMA+gSADHMA+gSgDHMA+gTADHMA
+gTgDHMA+gQADXMA+gQgDXMA+gRADXMA+gRgDXMA+gSADXMA+gSgDXMA+gTADXMA+gTgDXMA+gQA
DnMA+gQgDnMA+gRADnMA+gRgDnMA+gSADnMA+gSgDnMA+gTADnMA+gTgDnMA+gQAD3MA+gQgD3MA
+gRAD3MA+gRgD3MA+gSAD3MA+gSgD3MA+gTAD3MA+gTgD3MA+gQAEHMA+gRAEHMA+gRgEHMA+gSA
EHMA+gSgEHMA+gTAEHMA+gTgEHMA+gQAEXMA+gQgEXMA+gRAEXMA+gRgEXMA+gSAEXMA+gSgEXMA
+gTgEXMA+gQAEnMA+gQgEnMA+gRAEnMA+gRgEnMA+gSAEnMA+gSgEnMA+gTAEnMA+gQAE3MA+gQg
E3MA+gRAE3MA+gRgE3MA+gSAE3MA+gSgE3MA+gTAE3MA+gTgE3MA+gQAFHMA+gQgFHMA+gRAFHMA
+gRgFHMA+gSAFHMA+gSgFHMA+gTAFHMA+gTgFHMA+gQAFXMA+gQgFXMA+gRAFXMA+gRgFXMA+gSA
FXMA+gSgFXMA+gTAFXMA+gTgFXMA+gQAFnMA+gQgFnMA+gRAFnMA+gRgFnMA+gSAFnMA+gSgFnMA
+gTAFnMA+gTgFnMA+gQAF3MA+gQgF3MA+gRAF3MA+gRgF3MA+gQAGHMA+gQgGHMA+gRAGHMA+gRg
GHMA+gSgGHMA+gQAGQsA+gQgGQsA+gRAGQsA+gRgGQsA+gSAGpsAQgnVAAEFHABRAHwANwLaA+QD
LARJBL0EAwABAAQACQAFABIABgAoAAcAPAAIAEIACQBGAA0AWgAOAFwAAAC8COUHAADlGekHAABF
Ge0HAABfFeUHAAA+FvEHAAAYFvEHAADbH/EHAAC+Ge0HAAC8COUHAADlGekHAABFGe0HAAC+Ge0H
AABfFeUHAABwGPEHAABMGPEHAADbH/EHAAChHfUHAAC8COUHAABIIf4HAAB2IQMIAAC+Ge0HAAA/
G+0HAAAmFQgIAABXHw0IAADFFxIIAAC+EOUHAACMF+UHAABoF+0HAAC9F+0HAACTG+0HAABlG+0H
AADDG+0HAACrIBcIAADwG+UHAACqIeUHAAC4Ge0HAABqGe0HAACFH+0HAABBF+0HAABUCOUHAADj
F+kHAAB4COUHAAAHEekHAAA/G+0HAAA2COUHAADnEOkHAADHIeUHAACYCOUHAABFEekHAABXFeUH
AAAnB+0HAACTG+0HAABlG+0HAADDG+0HAACrIBcIAADwG+UHAACqIeUHAAC4Ge0HAABqGe0HAAC8
COUHAADlGekHAADHIeUHAAC1COUHAAB2IQMIAABXHw0IAAC8COUHAADlGekHAABfFeUHAAAmFQgI
AACAAuUHAAA7B+UHAADKFeUHAAATHh0IAAD1HeUHAAACHCMIAAAYHCwIAAD1HjIIAABCHTgIAACh
HT4IAACtHkQIAAD5GEoIAACaFlAIAADTGFUIAABtEukHAABLEOkHAAARB+kHAAAnEekHAAB5IOkH
AACRGekHAACDGloIAADyEWAIAAD8H2YIAgAIAAMAAQAJAAMAAgAKAAUAAQALAAUAAgAMAAcAAQAN
AAcAAgAOAAkAAQAPAAkAAgAQAAsAAQARAAsAAgASAA0AAQATAA0AAgAUAA8AAQAVAA8AAgAWABEA
AQAXABEAAgAZABMAAQAaABMAAgAbABUAAQAcABUAAgAdABcAAQAeABcAAgAfABkAAQAgABkAAgAh
ABsAAQAiABsAAgAjAB0AAQAkAB0AAgAlAB8AAQAmAB8AAgAnACEAAQAoACEAAgApACMAAQAqACMA
AgAsACUAAQAtACUAAgAuACcAAQAvACcAAgAwACkAAQAxACkAAgAyACsAAQAzACsAAgA0AC0AAQA1
AC0AAgA2AC8AAQA3AC8AAgA4ADEAAQA5ADEAAgA6ADMAAQA7ADMAAgA8ADUAAQA9ADUAAgA+ADcA
AQA/ADcAAgBAADkAAQBBADkAAgBCADsAAQBDADsAAgBEAD0AAQBFAD0AAgBGAD8AAQBHAD8AAgBI
AEEAAQBJAEEAAgBKAEMAAQBLAEMAAgBMAEUAAQBNAEUAAgBOAEcAAQBPAEcAAgBQAEkAAQBRAEkA
AgBSAEsAAQBTAEsAAgBUAE0AAQBVAE0AAgBWAE8AAQBXAE8AAgBZAFEAAQBaAFEAAgBbAFMAAQBc
AFMAAgBdAFUAAQBeAFUAAgBfAFcAAQBgAFcAAgBhAFkAAQBiAFkAAgBjAFsAAQBkAFsAAgBlAF0A
AQBmAF0AAgBnAF8AAQBoAF8AAgBpAGEAAQBqAGEAAgBrAGMAAQBsAGMAAgBtAGUAAQBuAGUAAgBv
AGcAAQBwAGcAAgBxAGkAAQByAGkAAgBzAGsAAQB0AGsAAgB1AG0AAQB2AG0AAgB3AG8AAQB4AG8A
AgB5AHEAAQB6AHEAAgB7AHMAAQB8AHMAAgB9AHUAAQB+AHUAAgB/AHcAAQCAAHcAAgCCAHkAAQCD
AHkAAgCEAHsAAQCFAHsAAgCGAH0AAQCHAH0AAgCIAH8AAQCJAH8AAgCKAIEAAQCLAIEAAgCMAIMA
AQCNAIMAAgCPAIUAAQCQAIUAAgCRAIcAAQCSAIcAAgCTAIkAAQCUAIkAAgCVAIsAAQCWAIsAAgCY
AI0AAQCZAI0AAgCaAI8AAQCbAI8AAgCcAJEAAQCdAJEAAgCeAJMAAQCfAJMAAgCgAJUAAQChAJUA
AgCiAJcAAQCjAJcAAgCkAJkAAQClAJkAAgCmAJsAAQCnAJsAAgCoAJ0AAQCpAJ0AAgCqAJ8AAQCr
AJ8AAgCsAKEAAQCtAKEAAgCuAKMAAQCvAKMAAgCwAKUAAQCxAKUAAgCyAKcAAQCzAKcAAgC0AKkA
AQC1AKkAAgC2AKsAAQC3AKsAAgC4AK0AAQC5AK0AAgC6AK8AAQC7AK8AAgDAALEAAQDBALEAAgDC
ALMAAQDDALMAAgDNALUAAgDOALcAAQDPALcAAgDQALkAvgDkAPAA/AADASoBfAGrAccB1wHjAQkC
FwKOArYC3gLmAvgCCAMWAyQDdgO3A78D6ANsBJwEowSpBASAAAABAAAA8BwjdgAAAAAAACEGAAAE
AAAAAAAAAAAAAADaBPEHAAAAAAQAAAAAAAAAAAAAANoEvhEAAAAADQAAAAAAAAAAAAAA4wRkFQAA
AAANAAAAAAAAAAAAAADjBEMHAAAAAAQAAAAAAAAAAAAAANoEpwcAAAAAAwAAAAIAiSoAAAAA7ATw
FwAAAAAEAAAAAAAAAAAAAADaBNEWAAAAAAAAAAABAAAA3RwAABAAAgARAAIAEgACABMAAgAUAAIA
FQACABYAAgAXAAIAGAACABkAAgAaAAIAGwACABwAAgAdAAkAAAAAAJEBYgcAAAAAkwFiB5IBxQBT
AMUAVQDFAJIB6wBTAOsAVQDrAJAB9wBTAPcAYQD3AGUATQFnAGYBaQBmAW0ApQFlALoBZQDsAXcA
AAJhAGYBVQBmAWUAIAJpACcCiQCwAo0A2AJnAMUAYQAnAokA7gKNAO4CZQDuAmcA9AJTAPQCZQAB
A2cA6wCJABADjQAeA2UALQOJAKUBUwBmAWcAJwJTACcCVQAnAmUAfwNTAIYDdwCyA2EA6wB3AOsA
ywAnAtUADAQZAWYBAAAASURUU0Nvbm5lY3Rpb25NYW5hZ2VyRGF0YWJhc2VQYXJhbWV0ZXJzMTAw
ADw+OV9fOF8xMAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhfMTAAPD45X184XzIwADxT
b2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF8yMAA8PjlfXzcyXzAAPFNhdmVEZWNpc2lvbnM+
Yl9fNzJfMAA8PmNfX0Rpc3BsYXlDbGFzczdfMAA8PjlfXzhfMAA8U29sdmVyQ2FsY3VsYXRpb25Q
cm9jZXNzPmJfXzhfMAA8PmNfX0Rpc3BsYXlDbGFzczhfMAA8RHVtcE0yTXFEYXRhPmJfXzAAPD45
X184XzExADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF8xMQA8PjlfXzhfMjEAPFNvbHZl
ckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzIxADxTYXZlRGVjaXNpb25zPmJfXzcyXzEAPD5jX19E
aXNwbGF5Q2xhc3M3XzEAPD45X184XzEAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzEA
PD5jX19EaXNwbGF5Q2xhc3M4XzEAPER1bXBNMk1xRGF0YT5iX18xAElFbnVtZXJhYmxlYDEASU9y
ZGVyZWRFbnVtZXJhYmxlYDEATGlzdGAxAENTJDw+OF9fbG9jYWxzMQA8PjlfXzhfMTIAPFNvbHZl
ckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzEyADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9f
MjIAVG9JbnQzMgBnZXRfVG90YWxNMgBzZXRfVG90YWxNMgA8PjlfXzdfMgA8RHVtcE0yTXFEYXRh
PmJfXzdfMgA8PmNfX0Rpc3BsYXlDbGFzczdfMgA8PjlfXzhfMgA8U29sdmVyQ2FsY3VsYXRpb25Q
cm9jZXNzPmJfXzhfMgA8PmNfX0Rpc3BsYXlDbGFzczhfMgBGdW5jYDIASUdyb3VwaW5nYDIAQ1Mk
PD44X19sb2NhbHMyADw+OV9fMTMAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xMwA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzIzADw+OV9fN18zADxEdW1wTTJNcURhdGE+Yl9fN18z
ADw+Y19fRGlzcGxheUNsYXNzN18zADw+Y19fRGlzcGxheUNsYXNzOF8zADxTb2x2ZXJDYWxjdWxh
dGlvblByb2Nlc3M+Yl9fMwBGdW5jYDMAQ1MkPD44X19sb2NhbHMzADw+OV9fMTQAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX18xNAA8PjlfXzhfMjQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vz
cz5iX184XzI0ADw+Y19fRGlzcGxheUNsYXNzN180ADw+OV9fOF80ADxTb2x2ZXJDYWxjdWxhdGlv
blByb2Nlc3M+Yl9fOF80ADw+Y19fRGlzcGxheUNsYXNzOF80ADxEdW1wTTJNcURhdGE+Yl9fNABD
UyQ8PjhfX2xvY2FsczQAPD45X184XzE1ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF8x
NQA8PmNfX0Rpc3BsYXlDbGFzczdfNQA8PjlfXzhfNQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNz
PmJfXzhfNQA8RHVtcE0yTXFEYXRhPmJfXzUAPD45X184XzE2ADxTb2x2ZXJDYWxjdWxhdGlvblBy
b2Nlc3M+Yl9fOF8xNgA8PjlfXzhfNgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhfNgA8
PjlfXzYAPER1bXBNMk1xRGF0YT5iX182ADw+OV9fOF8xNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9j
ZXNzPmJfXzhfMTcAPD45X183ADxEdW1wTTJNcURhdGE+Yl9fNwA8U29sdmVyQ2FsY3VsYXRpb25Q
cm9jZXNzPmJfXzcAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xOABTVF9mMzkyMzNmYWMx
NmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OAA8PjlfXzhfOAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNz
PmJfXzhfOAA8RHVtcE0yTXFEYXRhPmJfXzgAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18x
OQA8PjkAX1Z0YmxHYXAxXzkAPD45X184XzkAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184
XzkAPD45X185ADxEdW1wTTJNcURhdGE+Yl9fOQA8TW9kdWxlPgBnZXRfUHJvY2Vzc0lEAHNldF9Q
cm9jZXNzSUQAZ2V0X01EUQBzZXRfTURRAGdldF9Ub3RhbE1RAHNldF9Ub3RhbE1RAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBUAHZhbHVlX18AU1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3
YzBjZTg0MDJmYWEAR2V0Q29ubmVjdGlvbkZvclNjaGVtYQBTeXN0ZW0uRGF0YQBEdW1wTTJNcURh
dGEATWRxRGF0YQBTb2x2ZXJEYXRhAF9zb2x2ZXJEYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29y
bGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRfSWQAc2V0X0lkAGdldF9QYXRo
SWQAc2V0X1BhdGhJZABnZXRfRnJvbUxvY2F0aW9uSWQAc2V0X0Zyb21Mb2NhdGlvbklkAGdldF9U
b0xvY2F0aW9uSWQAc2V0X1RvTG9jYXRpb25JZABnZXRfQ29udHJhY3RJZABzZXRfQ29udHJhY3RJ
ZABnZXRfUmVjZWlwdElkAHNldF9SZWNlaXB0SWQAUmVhZABBZGQAUFNfcHJvY2Vzc19pZABkZWxp
dmVyaWQATmV3R3VpZAA8VG90YWxNMj5rX19CYWNraW5nRmllbGQAPFByb2Nlc3NJRD5rX19CYWNr
aW5nRmllbGQAPE1EUT5rX19CYWNraW5nRmllbGQAPFRvdGFsTVE+a19fQmFja2luZ0ZpZWxkADxJ
ZD5rX19CYWNraW5nRmllbGQAPFBhdGhJZD5rX19CYWNraW5nRmllbGQAPEZyb21Mb2NhdGlvbklk
PmtfX0JhY2tpbmdGaWVsZAA8VG9Mb2NhdGlvbklkPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3RJ
ZD5rX19CYWNraW5nRmllbGQAPFJlY2VpcHRJZD5rX19CYWNraW5nRmllbGQAPERlY2lzaW9uVGFi
bGU+a19fQmFja2luZ0ZpZWxkADxGcmVlVG9TY2hlZHVsZT5rX19CYWNraW5nRmllbGQAPFBhdGhO
YW1lPmtfX0JhY2tpbmdGaWVsZAA8VG9Mb2NhdGlvbk5hbWU+a19fQmFja2luZ0ZpZWxkADxVc2Vy
TmFtZT5rX19CYWNraW5nRmllbGQAPENvbnRyYWN0TmFtZT5rX19CYWNraW5nRmllbGQAPFRhYmxl
VG9VcGRhdGU+a19fQmFja2luZ0ZpZWxkADxQYXRoPmtfX0JhY2tpbmdGaWVsZAA8UmFuaz5rX19C
YWNraW5nRmllbGQAPENvbnRyYWN0UmFuaz5rX19CYWNraW5nRmllbGQAPE9iamVjdGl2ZUdvYWw+
a19fQmFja2luZ0ZpZWxkADxtaW5fd2l0aGRyYXdhbD5rX19CYWNraW5nRmllbGQAPG1heF93aXRo
ZHJhd2FsPmtfX0JhY2tpbmdGaWVsZAA8TW9kZWw+a19fQmFja2luZ0ZpZWxkADxEZWNpc2lvbj5r
X19CYWNraW5nRmllbGQAPFJlY2VpcHREZWNpc2lvbj5rX19CYWNraW5nRmllbGQAPE5ld0RlY2lz
aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcnlEZWNpc2lvbj5rX19CYWNraW5nRmllbGQAPEZy
b21Mb2NhdGlvbj5rX19CYWNraW5nRmllbGQAPG1pbl9pbmplY3Rpb24+a19fQmFja2luZ0ZpZWxk
ADxtYXhfaW5qZWN0aW9uPmtfX0JhY2tpbmdGaWVsZAA8T2xlRGJDb25uZWN0aW9uPmtfX0JhY2tp
bmdGaWVsZAA8U3FsQ29ubmVjdGlvbj5rX19CYWNraW5nRmllbGQAPFBvc2l0aW9uPmtfX0JhY2tp
bmdGaWVsZAA8Rml4ZWRQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPERlbWFuZFBvc2l0aW9uPmtf
X0JhY2tpbmdGaWVsZAA8U3RvcmFnZVBvc2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8U3VwcGx5UG9z
aXRpb24+a19fQmFja2luZ0ZpZWxkADxEZXNjcmlwdGlvbj5rX19CYWNraW5nRmllbGQAPExvc3NG
YWN0b3I+a19fQmFja2luZ0ZpZWxkADxEZW1hbmRBZGp1c3RGYWN0b3I+a19fQmFja2luZ0ZpZWxk
ADxTdXBwbHlBZGp1c3RGYWN0b3I+a19fQmFja2luZ0ZpZWxkADxEZWxpdmVyeUFkanVzdEZhY3Rv
cj5rX19CYWNraW5nRmllbGQAPEhvdXI+a19fQmFja2luZ0ZpZWxkADxNRFFzPmtfX0JhY2tpbmdG
aWVsZAA8TURRRGF0YXM+a19fQmFja2luZ0ZpZWxkADxEZWxpdmVyaWVzPmtfX0JhY2tpbmdGaWVs
ZAA8UGF0aHM+a19fQmFja2luZ0ZpZWxkADxEZWNpc2lvbnM+a19fQmFja2luZ0ZpZWxkADxOdW1i
ZXJPZkRlY2lzaW9ucz5rX19CYWNraW5nRmllbGQAPENvbnRyYWN0cz5rX19CYWNraW5nRmllbGQA
PFJlY2VpcHRzPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3Q+a19fQmFja2luZ0ZpZWxkADxyYXRj
aGV0X2xpbWl0PmtfX0JhY2tpbmdGaWVsZAA8U3RvcmFnZUNvbnN0cmFpbnQ+a19fQmFja2luZ0Zp
ZWxkADxUZXJtU3RhcnQ+a19fQmFja2luZ0ZpZWxkADxTdXBwbHk+a19fQmFja2luZ0ZpZWxkADxE
ZWxpdmVyeT5rX19CYWNraW5nRmllbGQAPEdyYW51bGFyaXR5PmtfX0JhY2tpbmdGaWVsZAA8UHJp
b3JpdHk+a19fQmFja2luZ0ZpZWxkAG9wX0JpdHdpc2VBbmQAT2xlRGJDb21tYW5kAEV4ZWN1dGVD
b21tYW5kAEdvYWxLaW5kAFJlcGxhY2UAZ2V0X1N0YWNrVHJhY2UAQ3JlYXRlSW5zdGFuY2UAZGVm
YXVsdEluc3RhbmNlAGdldF9NZXNzYWdlAEFkZFJhbmdlAEdldFNjaGVtYVRhYmxlAERhdGFUYWJs
ZQBnZXRfRGVjaXNpb25UYWJsZQBzZXRfRGVjaXNpb25UYWJsZQBWYXJpYWJsZQBFbnVtZXJhYmxl
AElEaXNwb3NhYmxlAEdldERvdWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRs
ZQBnZXRfRnJlZVRvU2NoZWR1bGUAc2V0X0ZyZWVUb1NjaGVkdWxlAGdldF9OYW1lAGdldF9QYXRo
TmFtZQBzZXRfUGF0aE5hbWUAZ2V0X1RvTG9jYXRpb25OYW1lAHNldF9Ub0xvY2F0aW9uTmFtZQBn
ZXRfVXNlck5hbWUAc2V0X1VzZXJOYW1lAGdldF9Db250cmFjdE5hbWUAc2V0X0NvbnRyYWN0TmFt
ZQBwcm9wZXJ0eU5hbWUAUFNfdXNlcl9uYW1lAERhdGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlJ1bnRpbWUAc2V0X0NvbW1hbmRUeXBlAENoYW5nZVR5cGUAR2V0VHlwZQBXaGVyZQBTeXN0
ZW0uQ29yZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBW
U1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBnZXRfVGFibGVUb1VwZGF0ZQBzZXRf
VGFibGVUb1VwZGF0ZQBBZ2dyZWdhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUARW5jbG9zZVdpdGhR
dW90ZQBEaXNwSWRBdHRyaWJ1dGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUAR3VpZEF0dHJp
YnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFk
ZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEV4dGVuc2lvbkF0dHJpYnV0
ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJp
YnV0ZQBUeXBlSWRlbnRpZmllckF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBT
U0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQBBZGRXaXRoVmFsdWUAU2V0
VmFsdWUAcHJvcGVydHlWYWx1ZQB2YWx1ZQBnZXRfUmVhbE5vbm5lZ2F0aXZlAFNpbXBsZXhEaXJl
Y3RpdmUAU29sdmUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBjb25zdHJpbmcA
Z2V0X1BhdGgAc2V0X1BhdGgAcGF0aABnZXRfUmFuawBzZXRfUmFuawBnZXRfQ29udHJhY3RSYW5r
AHNldF9Db250cmFjdFJhbmsATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAQWRkR29hbABnZXRfT2JqZWN0aXZlR29h
bABzZXRfT2JqZWN0aXZlR29hbABvcF9HcmVhdGVyVGhhbk9yRXF1YWwAb3BfTGVzc1RoYW5PckVx
dWFsAGdldF9taW5fd2l0aGRyYXdhbABzZXRfbWluX3dpdGhkcmF3YWwAZ2V0X21heF93aXRoZHJh
d2FsAHNldF9tYXhfd2l0aGRyYXdhbABnZXRfTW9kZWwAc2V0X01vZGVsAENyZWF0ZU1vZGVsAENs
ZWFyTW9kZWwAU2NyaXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2YzOTIz
M2ZhYzE2ZTQyNmQ5OTFkOTMyZjllZjdkODU4LmRsbABnZXRfSXRlbQBTeXN0ZW0AVGVybQBTdW0A
RW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERvbWFpbgBnZXRfRGVjaXNpb24Ac2V0X0RlY2lz
aW9uAEFkZERlY2lzaW9uAGdldF9Tb2x2ZXJEZWNpc2lvbgBzZXRfU29sdmVyRGVjaXNpb24AZ2V0
X1JlY2VpcHREZWNpc2lvbgBzZXRfUmVjZWlwdERlY2lzaW9uAGdldF9OZXdEZWNpc2lvbgBzZXRf
TmV3RGVjaXNpb24AbmV3RGVjaXNpb24AZ2V0X0RlbGl2ZXJ5RGVjaXNpb24Ac2V0X0RlbGl2ZXJ5
RGVjaXNpb24AZ2V0X0Zyb21Mb2NhdGlvbgBzZXRfRnJvbUxvY2F0aW9uAE1pY3Jvc29mdC5Tb2x2
ZXIuRm91bmRhdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBn
ZXRfbWluX2luamVjdGlvbgBzZXRfbWluX2luamVjdGlvbgBnZXRfbWF4X2luamVjdGlvbgBzZXRf
bWF4X2luamVjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBPbGVEYlBhcmFtZXRlckNvbGxlY3Rpb24A
RGF0YVJvd0NvbGxlY3Rpb24AZ2V0X09sZURiQ29ubmVjdGlvbgBzZXRfT2xlRGJDb25uZWN0aW9u
AGdldF9TcWxDb25uZWN0aW9uAHNldF9TcWxDb25uZWN0aW9uAGdldGNvbm5lY3Rpb24AZ2V0X1Bv
c2l0aW9uAHNldF9Qb3NpdGlvbgBnZXRfRml4ZWRQb3NpdGlvbgBzZXRfRml4ZWRQb3NpdGlvbgBn
ZXRfRGVtYW5kUG9zaXRpb24Ac2V0X0RlbWFuZFBvc2l0aW9uAGdldF9TdG9yYWdlUG9zaXRpb24A
c2V0X1N0b3JhZ2VQb3NpdGlvbgBnZXRfU3VwcGx5UG9zaXRpb24Ac2V0X1N1cHBseVBvc2l0aW9u
AEV4Y2VwdGlvbgBnZXRfRGVzY3JpcHRpb24Ac2V0X0Rlc2NyaXB0aW9uAFNvbHV0aW9uAFN5c3Rl
bS5EYXRhLkNvbW1vbgBvYmplY3RUbwBDdWx0dXJlSW5mbwBQcm9wZXJ0eUluZm8AU3lzdGVtLkxp
bnEAbXlWYXIAZHIAT2xlRGJEYXRhUmVhZGVyAEZyb21EYXRhUmVhZGVyAEZyb21PbGVSZWFkZXIA
RXhlY3V0ZVJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFRvVXBw
ZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAEV2ZW50c09iamVjdFdy
YXBwZXIAT2xlRGJQYXJhbWV0ZXIARmlyZUVycm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IA
QWN0aXZhdG9yAC5jdG9yAGdldF9Mb3NzRmFjdG9yAHNldF9Mb3NzRmFjdG9yAGdldF9EZW1hbmRB
ZGp1c3RGYWN0b3IAc2V0X0RlbWFuZEFkanVzdEZhY3RvcgBnZXRfU3VwcGx5QWRqdXN0RmFjdG9y
AHNldF9TdXBwbHlBZGp1c3RGYWN0b3IAZ2V0X0RlbGl2ZXJ5QWRqdXN0RmFjdG9yAHNldF9EZWxp
dmVyeUFkanVzdEZhY3RvcgAuY2N0b3IAc3RyAGdldF9Ib3VyAHNldF9Ib3VyAGdldF9NRFFzAHNl
dF9NRFFzAGdldF9NRFFEYXRhcwBzZXRfTURRRGF0YXMAU3lzdGVtLkRpYWdub3N0aWNzAFNUXzU4
NWJhMmU5MmJkZDQyZGViODFmN2MwY2U4NDAyZmFhLkV4dGVuc2lvbk1ldGhvZHMATWljcm9zb2Z0
LlNvbHZlckZvdW5kYXRpb24uU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2Vz
AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9mMzky
MzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJj
ZXMARGVidWdnaW5nTW9kZXMAZ2V0X0RlbGl2ZXJpZXMAc2V0X0RlbGl2ZXJpZXMAU1RfZjM5MjMz
ZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4NTguUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNldHRp
bmdzAGdldF9QYXRocwBzZXRfUGF0aHMAZ2V0X0dvYWxzAGdldF9EZWNpc2lvbnMAc2V0X0RlY2lz
aW9ucwBTYXZlRGVjaXNpb25zAGdldF9OdW1iZXJPZkRlY2lzaW9ucwBzZXRfTnVtYmVyT2ZEZWNp
c2lvbnMAVXBkYXRlU29sdmVyRGVjaXNpb25zAElFTnVtZXJhYmxlRXh0ZW5zaW9ucwBNeUV4dGVu
c2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBnZXRfUGFyYW1ldGVycwBT
dWNjZXNzAFNvbHZlckNhbGN1bGF0aW9uUHJvY2VzcwBnZXRfRHRzAGdldF9Db250cmFjdHMAc2V0
X0NvbnRyYWN0cwBTY3JpcHRSZXN1bHRzAEdldEdlbmVyaWNBcmd1bWVudHMAZ2V0X0V2ZW50cwBn
ZXRfUmVjZWlwdHMAc2V0X1JlY2VpcHRzAENyZWF0ZVByb2Nlc3NUYWJsZUlmTm90RXhpc3RzAFBv
cHVsYXRlRFRTVmFyaWFibGVJbnB1dHMAZ2V0X1Jvd3MAQ29uY2F0AGdldF9Db250cmFjdABzZXRf
Q29udHJhY3QAY29udHJhY3QAZ2V0X1NvbHZlckRlY2lzaW9uRXhhY3QAc2V0X1NvbHZlckRlY2lz
aW9uRXhhY3QAZ2V0X0lubmVyT2JqZWN0AFNlbGVjdABEaXN0aW5jdABvcF9JbXBsaWNpdABnZXRf
cmF0Y2hldF9saW1pdABzZXRfcmF0Y2hldF9saW1pdABnZXRfRGVmYXVsdABGaXJzdE9yRGVmYXVs
dABEVFNFeGVjUmVzdWx0AHNldF9UYXNrUmVzdWx0AFRvSW50AFN5c3RlbS5EYXRhLlNxbENsaWVu
dABnZXRfQ3VycmVudABjdXJyZW50AEFkZENvbnN0cmFpbnQAZ2V0X1N0b3JhZ2VDb25zdHJhaW50
AHNldF9TdG9yYWdlQ29uc3RyYWludABDb3VudAByZWNlaXB0AGdldF9UZXJtU3RhcnQAc2V0X1Rl
cm1TdGFydABDb252ZXJ0AFRvTGlzdABsaXN0AEZpcnN0AE1vdmVOZXh0AFNvbHZlckNvbnRleHQA
R2V0Q29udGV4dABEYXRhUm93AGluZGV4AFRoZW5CeQBHcm91cEJ5AE9yZGVyQnkAZ2V0X0l0ZW1B
cnJheQBUb0FycmF5AGdldF9Bc3NlbWJseQBnZXRfU3VwcGx5AHNldF9TdXBwbHkARXhlY3V0ZU5v
blF1ZXJ5AHF1ZXJ5AGdldF9EZWxpdmVyeQBzZXRfRGVsaXZlcnkAZGVsaXZlcnkAb3BfSW5lcXVh
bGl0eQBnZXRfR3JhbnVsYXJpdHkAc2V0X0dyYW51bGFyaXR5AGdldF9Qcmlvcml0eQBzZXRfUHJp
b3JpdHkAcHJpb3JpdHkASXNOdWxsT3JFbXB0eQBGaWxsT2JqZWN0V2l0aFByb3BlcnR5AEdldFBy
b3BlcnR5AHoAAB9PAEwARQBfAEMATwBOAE4AXwBNAGEAaQBuAEQAQgAAF1MAYwByAGkAcAB0AF8A
VABhAHMAawAAAw0AABlQAFMAXwBQAHIAbwBjAGUAcwBzAEkARAAAGVAAUwBfAHUAcwBlAHIAXwBu
AGEAbQBlAABHYQBkAGkAaABhAF8AcAByAG8AYwBlAHMAcwAuAGQAYgBvAC4AcwBvAGwAdgBlAHIA
XwBkAGUAYwBpAHMAaQBvAG4AcwBfAAADXwAAYWEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBk
AGIAbwAuAGMAbwBuAHQAcgBhAGMAdAB3AGkAcwBlAF8AZABlAHQAYQBpAGwAXwBtAGQAcQBfAGcA
cgBvAHUAcABfAABLYQBkAGkAaABhAF8AcAByAG8AYwBlAHMAcwAuAGQAYgBvAC4AcwB0AG8AcgBh
AGcAZQBfAGMAbwBuAHMAdAByAGEAaQBuAHQAXwAAR2EAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMA
LgBkAGIAbwAuAHMAdABvAHIAYQBnAGUAXwBwAG8AcwBpAHQAaQBvAG4AXwAAa0UAWABFAEMAIABz
AHAAYQBfAGYAbABvAHcAXwBvAHAAdABpAG0AaQB6AGEAdABpAG8AbgAgAEAAZgBsAGEAZwAgAD0A
IAAnAGIAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABAycAAXlFAFgARQBDACAAcwBw
AGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUA
IABAAGYAbABhAGcAPQAnAHIAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABJycALAAg
AEAAdQBzAGUAcgBfAGwAbwBnAGkAbgBfAGkAZAA9ACcAAQUnACAAAXlFAFgARQBDACAAcwBwAGEA
XwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABA
AGYAbABhAGcAPQAnAGQAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABeUUAWABFAEMA
IABzAHAAYQBfAHIAdQBuAF8AcwBpAG0AcABsAGUAeABfAHMAbwBsAHYAZQByAF8AcABhAGMAawBh
AGcAZQAgAEAAZgBsAGEAZwA9ACcAbQAnACwAIABAAHAAcgBvAGMAZQBzAHMAXwBpAGQAPQAnAAEP
TgBvACAAUABhAHQAaAAAF04AbwAgAEMAbwBuAHQAcgBhAGMAdAAAA0QAAAMtAAEDQwAAB1IATwBX
AAAHQwBPAEwAAAlnAG8AYQBsAAABAHlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAA
bABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAHUAJwAs
ACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABY1QAUgBVAE4AQwBBAFQARQAgAFQAQQBCAEwA
RQAgAGEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAbwBsAHYAZQByAF8AZABl
AGMAaQBzAGkAbwBuAHMAAAdAAHAAMQAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAACCcyAAKABz
AG8AdQByAGMAZQBfAGkAZAAsACAAWwBzAG8AdQByAGMAZQBdACwAIABkAGUAcwB0AGkAbgBhAHQA
aQBvAG4AXwBpAGQALAAgAFsAZABlAHMAdABpAG4AYQB0AGkAbwBuAF0ALAAgAG0AZABxACwAIABy
AGUAYwBlAGkAdgBlAGQALAAgAGcAbwBhAGwAXwBvAGIAagBlAGMAdABpAHYAZQAsACAAbABvAHMA
cwBfAGYAYQBjAHQAbwByACwAIABwAGEAdABoAF8AaQBkACwAYwBvAG4AdAByAGEAYwB0AF8AaQBk
ACwAIABkAGUAbABpAHYAZQByAHkALAAgAHIAZQBjAGUAaQB2AGUAZABfAG0AZABxACwAcABhAHQA
aABfAHAAcgBpAG8AcgBpAHQAeQAsAGMAbwBuAHQAcgBhAGMAdABfAHIAYQBuAGsALABzAG8AdQBy
AGMAZQBfAHAAbwBzAGkAdABpAG8AbgAsAHMAbwB1AHIAYwBlAF8AcgBhAG4AawAsAGQAZQBzAHQA
aQBuAGEAdABpAG8AbgBfAHAAbwBzAGkAdABpAG8AbgAsAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBf
AHIAYQBuAGsALABbAHQAZQByAG0AXwBzAHQAYQByAHQAXQAsAFsAaABvAHUAcgBdACwAWwBnAHIA
YQBuAHUAbABhAHIAaQB0AHkAXQAsACAAcwB1AHAAcABsAHkAXwBwAG8AcwBpAHQAaQBvAG4ALAAg
AGQAZQBtAGEAbgBkAF8AcABvAHMAaQB0AGkAbwBuACkAIABWAGEAbAB1AGUAcwAgACgAAAUsACcA
AQUnACwAAQMsAAAHJwAsACcAAQUpACAAAAlOAFUATABMAABxUwBUAF8AZgAzADkAMgAzADMAZgBh
AGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AC4AUAByAG8A
cABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAALpceeMkulRBgkYMnjZy6r0AAyAA
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
kQEeABUSgJEBHgASgJUTEAECFRKAkQEeABUSgJEBHgASTQQAAQgcBAABDg4FAAASgK0FAAASgLEG
AAEBEoCxBAAAEjgDAAABBSABAhIYBiABEhwSGAYgARIgEhgFIAECEhwGIAESFBIYBSABCBIcDCAB
EhwVEoCFAggSHAUgAQgSDAUgAQ4SDAUgAQgSFAYgARIQEhQFIAEIEhAFIAEOEhAGIAESHBIUBiAB
EmUSFAUgAQ0SFAUgAQISFAUgAQISEAMoAAgDKAAOAygADQMoAAoIKAAVElEBEhwEKAASDAQoABIQ
BCgAEhwEKAASIAQoABJlBSgAEYCJBSgAHRJlCCgAFRJRARIUBSgAHRIYBSgAHRIMBSgAHRIQBSgA
HRIcBSgAHRIgBSgAEoCNBCgAEmEEKAASSQUIABKArQUIABKAsQQIABI4CAEACAAAAAAAHgEAAQBU
AhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9mMzkyMzNmYWMxNmU0MjZk
OTkxZDkzMmY5ZWY3ZDg1OAAABQEAAAAADgEACU1pY3Jvc29mdAAAHwEAGkNvcHlyaWdodCBAIE1p
Y3Jvc29mdCAyMDE0AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQIAQAaAAAAAAApAQAkNjExNjNFRjAtNDRFOS00
MTNGLUE4MjEtQ0M4MTUzOUE3MkEyAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJj
ZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1
dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1
bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAlKgAAAAAAAAAAAAArqgAAAAg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCoAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5k
bGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYwAAAPgQAAAAAAAAAAAAAPgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABACN28BwAAAEAI3bwHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBJ4DAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHoDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIA
aQBwAHQAaQBvAG4AAAAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBjADEANgBlADQAMgA2AGQAOQA5
ADEAZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8A
bgAAAAAAMQAuADAALgA3ADQAMAA4AC4AMwAwADIANAAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBh
AGwATgBhAG0AZQAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBjADEANgBlADQAMgA2AGQAOQA5ADEA
ZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMAbwBw
AHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBmAHQA
IAAyADAAMQA0AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAA
AHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBmADMAOQAyADMA
MwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgALgBk
AGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AZgAzADkAMgAzADMA
ZgBhAGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AAAAQgAP
AAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADQAMAA4AC4AMwAwADIA
NAAzAAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3
ADQAMAA4AC4AMwAwADIANAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAADAAAAMA4AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="124"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="127"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="126"
            Column="17" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>