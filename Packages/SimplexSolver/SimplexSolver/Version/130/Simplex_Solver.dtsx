<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.157"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="983"
  DTS:VersionGUID="{228E7438-48B8-40BB-AAE8-5A81E1652CB4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=EU-D-SQL01.farrms.us,2033;User ID=trm_enercity_db_user;Initial Catalog=TRMTracker_Enercity;Provider=SQLNCLI11.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TEST"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">E3724A0A_8ACC_4670_942F_7902F2638FA1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">sligal</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{03EF4576-714D-44EE-80B6-ADEB18E884F0}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="MdqData.cs"/>
		<msb:File Include="MDQ.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Supply.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Delivery.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Path.cs"/>
		<msb:File Include="Contract.cs"/>
		<msb:File Include="SolverData.cs"/>
		<msb:Breakpoint Include="92a8d8a6032f4223a38021efa4d4b8ab">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>121</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="915ce05a34f34d0a9be18010173e90e9">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>363</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="be408d9866bf47ac9f4e74f0fbcaffef">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>124</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="87eea4960a7a48deb50bf258ddeaa672">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>123</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="57ec78f6abd2460eb3a3b2725b6b7f09">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>384</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="2b584bd0a9e846f5bc1619a5059c8e69">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>324</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="cff86f8bac0346e284c9096d8aced38c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>278</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="8393c570eef0486684d65473fd90d6c0">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>485</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0856fe96d7cf407a841d8465e3abb099">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>403</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="f75dd88fb02641b3b52218a0cb921d2c">
			<msb:FileName>SolverData.cs</msb:FileName>
			<msb:LineNumber>55</msb:LineNumber>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Contract.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="MdqData.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public string StorageType { get; set; }
        public int IsDST { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Linq;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_f39233fac16e426d991d932f9ef7d858;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>


        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Supply>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contract =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id).OrderBy(X=> X.ContractRank)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .FirstOrDefault();
                    }
                }


                index = 0;
                foreach (Supply receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contract = new Contract() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract;
                            if (contract == null)
                                path.Contract = new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path };
                            //foreach (Contract contract in path.Contracts)
                            //{
                            var mdqCollection = _solverData.MDQDatas.Where(z => z.FromLocationId == receipt.Id & z.ToLocationId == delivery.Id & z.ContractId == contract.Id & z.PathId == path.Id)
                                .Select(z =>
                                        new MDQ()
                                        {
                                            Id = index,
                                            Delivery = delivery,
                                            Supply = receipt,
                                            Position = z.MDQ,
                                            Contract = new Contract() { Id = z.ContractId, Description = z.ContractName, Rank = z.ContractRank },
                                            Decision = new Decision(Domain.RealNonnegative, "D" + index),
                                            Path = new Path() { Id = z.PathId, Description = z.PathName, ReceiptId = receipt.Id },
                                            LossFactor = z.LossFactor,
                                            SupplyAdjustFactor = z.SupplyAdjustFactor,
                                            DeliveryAdjustFactor = z.DeliveryAdjustFactor,
                                            DemandAdjustFactor = z.DemandAdjustFactor,
                                            TermStart = z.TermStart,
                                            Hour = z.Hour,
                                            Granularity = z.Granularity,
                                            StorageType = z.StorageType,
                                            SupplyPosition = z.SupplyPosition,
                                            DemandPosition = z.DemandPosition,
                                            IsDST = z.IsDST
                                        })
                                .ToList();

                            _solverData.MDQs.AddRange(mdqCollection);
                            /*
                            _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }
                                */
                            index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Supply[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Supply receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Supply.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Supply.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();

                        paths = mdqs.Where(x => x.Supply.Id == receipt.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.Path.Id,
                                        Description = x.Path.Description,
                                        Priority = x.Path.Priority,
                                        ReceiptId = x.Path.ReceiptId,
                                        Delivery = x.Delivery,
                                        Contract = new Contract() { Id = x.Contract.Id, Description = x.Contract.Description, Rank = x.Contract.Rank }
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToArray();


                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract; // path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                                                               //foreach (Contract contract in contracts)
                                                               //{
                                                               //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            context.ClearModel();
                            Model model = context.CreateModel();

                            //  Contract according to their rankings
                            //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Supply.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                            if (mdqtoadjust.Count() == 0) continue;
                            //  MDQ Constraint
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Decision = new Decision(Domain.RealNonnegative, "D" + Guid.NewGuid().ToString().Replace("-", "_").ToUpper());
                                model.AddDecision(mdq.Decision);
                                model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position
                                                        & mdq.Decision <= mdq.Supply.Position
                                                        & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor
                                                        & mdq.Decision <= receipt.Position
                                                        & mdq.Decision <= mdq.Supply.max_withdrawal
                                                        & mdq.Decision >= mdq.Supply.min_withdrawal
                                                        & mdq.Decision <= mdq.Delivery.max_injection
                                                        & mdq.Decision >= mdq.Delivery.min_injection
                                                        & mdq.Decision <= mdq.Delivery.ratchet_limit
                                                        & mdq.Decision <= mdq.Supply.ratchet_limit
                                                        & mdq.Decision <= mdq.SupplyPosition
                                                        & mdq.Decision <= mdq.DemandPosition);
                            }
                            //  Row constraint
                            Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                            //Column Constraint
                              model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position);
                            //  Sum of Hourly supply constraint / Demand Constraint
                            //model.AddConstraint("SUPPLY" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.SupplyPositionHourly));
                            //model.AddConstraint("DEMAND" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.DemandPositionHourly));

                            //  Decisions to solve
                            //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                            model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                            _solverData.Model = model;
                            var simplex = new SimplexDirective();
                            Solution solution = context.Solve(simplex);
                            Goal goal = model.Goals.FirstOrDefault();
                            if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                            //receipt.Position -= goal.ToInt();

                            //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Solved = true;
                                mdq.ReceiptDecision = mdq.SolverDecision;
                                if (mdq.SupplyPosition == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                {
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position -= mdq.SolverDecision;
                                    //***********************
                                    mdqtoadjust.AdjustPosition(mdq);
                                    //**********************
                                    mdq.Delivery.Position -= mdq.DeliveryDecision;
                                }
                                else if (mdq.SolverDecision < mdq.SupplyPosition && mdq.SolverDecision != 0)
                                {
                                    //  sd - 5000 , p 8038
                                    double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                    double availablePosition = mdq.SupplyPosition - sdLossFactor;

                                    if (availablePosition >= 0)
                                    {
                                        mdq.ReceiptDecision = sdLossFactor;
                                        mdq.DeliveryDecision = mdq.SolverDecision;
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                    }
                                    else
                                    {
                                        mdq.ReceiptDecision = sdLossFactor - (mdq.SupplyPosition - mdq.SolverDecision);
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.ReceiptDecision = mdq.SupplyPosition;
                                            mdq.DeliveryDecision = mdq.ReceiptDecision * (1 - mdq.LossFactor);
                                        }
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }
                                }
                                else if (mdq.SolverDecision > mdq.SupplyPosition)
                                {
                                    mdq.ReceiptDecision = mdq.SupplyPosition;
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position = 0;
                                    mdqtoadjust.AdjustPosition(mdq);
                                    mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                }
                            }
                            //  Unsolved items from same supply side
                            List<MDQ> unSolvedMdqs = _solverData.MDQs.Where(x => !x.Solved && x.Supply.Id == receipt.Id).ToList();
                            MDQ m = mdqtoadjust.FirstOrDefault(); ;
                            if (m != null && m.StorageType.ToUpper() == "WITHDRAWAL")
                            {
                                //  solved received decision sum
                                double receivedSum = mdqtoadjust.Where(x=> x.Supply.Id == m.Supply.Id).Sum(x => x.ReceiptDecision);
                                foreach (MDQ item in unSolvedMdqs)
                                    item.SupplyPosition -= receivedSum;
                            }
                            else
                            {
                                foreach (MDQ item in unSolvedMdqs)
                                {
                                    //  Solved items for same supply side including hour
                                    double solvedSum = _solverData.MDQs.Where(x => x.Solved && x.Supply.Id == receipt.Id && x.Hour == item.Hour).Sum(x => x.ReceiptDecision);
                                    //  Lesser the supply position value of unsolved mdq
                                    item.SupplyPosition -= solvedSum;
                                }
                            }

                            //  Work in progress Delivery point 
                            int deliveryPoint = mdqtoadjust.FirstOrDefault().Delivery.Id;
                            List<MDQ> pendingMdqsToBeSolved = _solverData.MDQs.Where(x => x.Supply.Id != receipt.Id && x.Delivery.Id == deliveryPoint && x.Solved == false).ToList();
                            foreach (var item in pendingMdqsToBeSolved)
                            {
                                List<MDQ> currentlySolved = _solverData.MDQs.Where(x => x.Delivery.Id == deliveryPoint && x.Supply.Id == receipt.Id && x.Hour == item.Hour && x.Solved == true).ToList();
                                double solvedSum = currentlySolved.Sum(x => x.DeliveryDecision);
                                item.DemandPosition -= solvedSum;
                            }
                        }
                    }
                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static void AdjustPosition(this MDQ[] mdqToAdjust, MDQ curentlySolvedMdq)
        {
            if (curentlySolvedMdq.StorageType.ToUpper() == "WITHDRAWAL")
            {
                //  Add logic to manipulate supply position of mdq collection where hour greater than currently solved mdq
                int hour = curentlySolvedMdq.Hour;
                List<MDQ> unAdjustedMdq = mdqToAdjust.Where(x => x.Hour >= hour).ToList();
                foreach (var item in unAdjustedMdq)
                {
                    item.SupplyPosition -= curentlySolvedMdq.ReceiptDecision;
                }
            }

            mdqToAdjust.Where(x => x.Id == curentlySolvedMdq.Id && x.Hour == curentlySolvedMdq.Hour).FirstOrDefault().Supply.Position -= curentlySolvedMdq.ReceiptDecision;
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Delivery.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }

        public virtual List<Path> Paths { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Contract.cs" />
    <Compile Include="Delivery.cs" />
    <Compile Include="MDQ.cs" />
    <Compile Include="MdqData.cs" />
    <Compile Include="Path.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SolverData.cs" />
    <Compile Include="Supply.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Supply.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Supply
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_withdrawal { get; set; }
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="MDQ.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MDQ
    {
        public int Id { get; set; }
        public Supply Supply { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public virtual bool Solved { get; set; }

        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set
            {
                SolverDecisionExact = value;
                Solved = true;
            }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();

                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }

        private string _storageType;

        public string StorageType
        {
            get { return _storageType; }
            set
            {
                _storageType = value;
                //  Logic to overide supply position based on storage type
                switch (_storageType.ToUpper())
                {
                    case "WITHDRAWAL":
                        this.SupplyPosition = this.Supply.Position;
                        break;
                    default:
                        this.SupplyPosition = this.SupplyPosition;
                        break;
                }
            }
        }

        public int IsDST { get; internal set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Path.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual Contract Contract { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="SolverData.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Supply[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */            
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank,[term_start],[hour],[granularity], supply_position, demand_position,is_dst) " +
                                                                                                    "Values (" + q.Supply.Id + ",'" + q.Supply.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Supply.FixedPosition.ToString() + "," + q.Supply.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ",'" + q.TermStart.ToString("yyyy-MM-dd HH:mm:ss") + "'," + q.Hour + "," + q.Granularity + "," + q.SupplyPosition + "," + q.DemandPosition + "," + q.IsDST + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            if (!string.IsNullOrEmpty(query))
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
BwEABnNHAAAKJRMMfYwAAAQRDCgZAAArfoIAAAQlLRcmfnQAAAT+BvwAAAZzTAAACiWAggAABCgj
AAArKAsAACsoDAAAK36DAAAEJS0XJn50AAAE/gb9AAAGczQAAAolgIMAAAQoDQAAK36EAAAEJS0X
Jn50AAAE/gb+AAAGczYAAAolgIQAAAQoDgAAKyglAAArEw0WEwk4rwgAAHMNAQAGEw4RDhEGfZYA
AAQRDhENEQmafZIAAAQRDhEOe5IAAARvlAAABn2TAAAEBm9NAAAKBm9OAAAKEw8RBxEO/gYOAQAG
c0cAAAooGQAAKygmAAArKCcAACsTEBEQKCgAACs5QAgAABEQExUWExY4GAIAABEVERaaExcRFyhP
AAAKcncDAHAoUAAAChMYEhj+FhwAAAFvIgAACnJ7AwBwcrkAAHBvUQAACm9SAAAKKFMAAApzVAAA
Cm85AAAGEQ8RF284AAAGb1UAAAoRD3J/AwBwERdvOAAABm9WAAAKKFMAAAoRF284AAAGERdvMAAA
BihXAAAKKFgAAAoRF284AAAGERdvLAAABm/TAAAGKFcAAAooWAAACihZAAAKERdvOAAABhEXby4A
AAZvHQAABhEXb0QAAAZaKFcAAAooWAAACihZAAAKERdvOAAABhEOe5YAAAR7jwAABHuKAAAEb9MA
AAYoVwAACihYAAAKKFkAAAoRF284AAAGERdvLAAABm/NAAAGbChXAAAKKFgAAAooWQAAChEXbzgA
AAYRF28sAAAGb88AAAZsKFcAAAooWgAACihZAAAKERdvOAAABhEXby4AAAZvIQAABmwoVwAACihY
AAAKKFkAAAoRF284AAAGERdvLgAABm8jAAAGbChXAAAKKFoAAAooWQAAChEXbzgAAAYRF28uAAAG
byUAAAZsKFcAAAooWAAACihZAAAKERdvOAAABhEXbywAAAZv0QAABmwoVwAACihYAAAKKFkAAAoR
F284AAAGERdvTgAABihXAAAKKFgAAAooWQAAChEXbzgAAAYRF29QAAAGKFcAAAooWAAACihZAAAK
b1sAAAomERYXWBMWERYRFY5pP939//8REH6FAAAEJS0XJn50AAAE/gb/AAAGc1wAAAolgIUAAAQo
KQAAKygqAAArExERD3KDAwBwEQ57lgAABHuPAAAEe4oAAARvxQAABhMWEhYoXQAAChEOe5IAAARv
igAABhMWEhYoXQAACigbAAAKERETGREZKF4AAAoRDnuWAAAEe48AAAR7igAABG/TAAAGKFcAAAoo
WAAACm9bAAAKJhEPcosDAHARDnuWAAAEe48AAAR7igAABG/FAAAGExYSFihdAAAKEQ57kgAABG+K
AAAGExYSFihdAAAKKBsAAAoRERMZERkoXgAAChEOe5IAAARvkgAABm8dAAAGKFcAAAooWAAACm9b
AAAKJhEPcpMDAHAWERETGREZKF4AAApvXwAACiYCewEAAAQRD2+wAAAGc2AAAAoTEgYXjUEAAAEl
FhESom9hAAAKJhEPb2IAAAooKwAAKxMTERMsGQJ7AQAABCVvmwAABhETKAsAAAZYb5wAAAYREBMV
FhMWOAwCAAARFREWmhMaERoXb1MAAAYRGhEab1YAAAZvPwAABhEab04AAAYRGm9WAAAGM1oRGm9W
AAAGIwAAAAAAAAAALkgRGhEabz4AAAYjAAAAAAAA8D8RGm8yAAAGWVpvQQAABhEQERooDAAABhEa
by4AAAYlbx0AAAYRGm9AAAAGWW8eAAAGOH8BAAARGm9WAAAGERpvTgAABkEDAQAAERpvVgAABiMA
AAAAAAAAADvuAAAAERpvVgAABiMAAAAAAADwPxEabzIAAAZZWxMbERpvTgAABhEbWSMAAAAAAAAA
ADdHERoRG28/AAAGERoRGm9WAAAGb0EAAAYREBEaKAwAAAYRGm8uAAAGJW8dAAAGERpvQAAABhEa
b0YAAAZaWW8eAAAGOOAAAAARGhEbERpvTgAABhEab1YAAAZZWW8/AAAGERpvTgAABhEbNC4RGhEa
b04AAAZvPwAABhEaERpvPgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAA
BiVvHQAABhEab0AAAAZZbx4AAAYraREab1YAAAYRGm9OAAAGNlkRGhEab04AAAZvPwAABhEaERpv
PgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAABiVvHQAABhEab0AAAAYR
Gm9GAAAGWllvHgAABhEWF1gTFhEWERWOaT/p/f//AnsBAAAEb6EAAAYRDnuWAAAEe48AAAR7jQAA
BCUtLiYRDnuWAAAEe48AAAQRDnuWAAAEe48AAAT+BggBAAZzRwAACiUTDH2NAAAEEQwoGQAAKygV
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
SgAABgJ7nAAABP4EFv4BKi5zGgEABoCdAAAEKj4DbzQAAAZvigAABhb+AypCU0pCAQABAAAAAAAM
AAAAdjQuMC4zMDMxOQAAAAAFAGwAAADALgAAI34AACwvAAAIJAAAI1N0cmluZ3MAAAAANFMAAAAI
AAAjVVMANFsAABAAAAAjR1VJRAAAAERbAADECQAAI0Jsb2IAAAAAAAAAAgAAAVc9ogkJDwAAAPoB
MwAWAAABAAAAUAAAACAAAACeAAAAGwEAAJwAAACQAAAAAwAAADsBAAABAAAACgAAAAkAAABhAAAA
wAAAAB4AAAABAAAABwAAAAEAAAARAAAAAgAAAC8AAAAAAGYYAQAAAAAACgA/FZ0eBgCmFZ0eBgA1
Fp0eBgDHFBIeEwARHwAABgD0FEkaBgBxFUkaBgBSFUkaBgAcFkkaBgDGFUkaBgDfFUkaBgALFUka
BgAmFbIWDgD6FUkXDgDAE0kXBgChG5wYEgDXIQ4TFgCeGiAJFgAwHCAJBgBxAj8JUwD9HAAABgBm
A5wYGgDFIloeGgBgGFoeGgCQGVoeGgCbFloeGgCZF1oeBgAwCpwYGgCjGFoeBgCsGJwYBgCBFJ0e
BgB1IZwYCgBtAxscBgBOAj8JFgAzHNQbFgDEEegIBgDuHDEgFgDeIugIBgAGEpwYBgAFE5wYFgDE
GvohBgCqFBIeBgBvHL0eBgDwG+wZHgBLFFAYHgDbFFAYHgD3E9cZBgCcFH4eBgCOFX4eBgBxFH4e
DgA+GEkXEgBIIA4TEgB/HA4TDgDBHEkXBgDOFpwYEgBxHw4TEgDyEQ4TFgBFESAJCgD7ERscCgBc
AhscGgDIGFoeGgBTIloeBgDWApwYGgBhEVoeGgCiFloeGgDLG1oeBgB5E5wYBgD8G0kaBgAIHZwY
FgB0GugIFgDcE+gIBgAcEpwYBgCWIpwYBgA4BJwYFgBIEdQbFgAyE+gIFgBbGiAJFgDVHCAJBgAV
EpwYBgAdI0kaAAAAACMIAAAAAAEAAQABABAAvRitCD0AAQABAAEAEABQGq0IgQAEAAcAgQEQAA4g
rQiBAAQACQCBARAAJCAlHoEABAANAAEAEAAqIU4HgQAEAA4AAQAQAGMjTgeBAAgAFwABABAAVAhO
B4EAEQAqAAEAEAABCU4HgQAoAF0AAQAQAOwWTgeBAD4AigABABAACQlOB4EARACXAAEAEAA1I04H
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
AAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAAB
AIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEW
AAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAAB
AIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEW
AAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAAB
AIEWAAABAIEWAAABAIEWAAABAIEWEBABAGMZAAABAEwjAAABAIEWAAABAIEWAAABABwiAAACACUc
AAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWAAABAIEWACAA
AAAAAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAAMkAAABAAMkAAABAOoi
AAABAN0WAAABAKMIAAABAOoiAAABAOoiAAABAOoiAAABAAEkAAABAOoiAAABAOoiAAABAOoiAAAB
AOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAN0WAAABAOoiAAABAOoiAAABAOoiAAABAOoi
AAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAAB
AOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiAAABAOoiCQASHQEAEQASHQUAGQASHQEAIQASHQoA
MQASHRAAOQASHRAAQQASHRAASQASHRAAUQASHRAAWQASHRAAYQASHRAAaQASHRAAcQASHQEA+QAS
HQEAUQESHQEAcQESHRUAgQESHRAAiQESHQEAkQESHQUAeQCEICEAmQFEICcAoQGOGC0AmQHlIQUA
mQHKIDQAgQCgEToAgQByEToAuQESIT4AuQHaI0UAsQHkHEgAqQFsIVgAmQFtH1wAwQGOGGIAyQFT
FlgAAQHMFjoAuQESIWkAuQESIagA0QESHa4A0QFdHLUADAASHQEA2QERI8YA2QFsItQAGQEPFAEA
FAASHQEAHAASHQEAJAASHQEALAASHQcB2QF+Ew0BNAASHQcB2QF8IS8B2QGDIVAB2QGeImcBPAAS
HQcB2QHzIoABRAASHQcBTAD6HMoBVAAQItoBXAASHQcB2QH7IucBZAASHQcB2QHIIRcCVAC8IikC
OQEVFAEAbAASHQcBTAAFCjUCdAASHQcBJACsEVACuQDTIrkCfAASHQcBhAASHQcB2QHsItQCjAAS
HQcBlAASHQcBnAASHQcBpAASHQcBrAASHQcBtAASHQcBuQAzGAEAuQAnGEoD6QGHFk8D4QAtClUD
uQFqEVoDuQGRHDoAuQESIWADyQASHWYDwQDpGG4DyQBmEjoA6QCMIXQD6QC0F3oD6QA3EXoD6QCe
F3oDwQAkIoMDvAASHQcB+QHMFjoAwQCoGKEDwQByF6kD0QASHQEAuQCsFrQDwQCYH74DuQF1I80D
xAASHQcB2QGoGNsDJAD6HMoBzAAQItoBzAC8IikCeQASHQEAAQF2E/UDGQL3I/sDIQJqFgIEAQES
HQEA1AASHQEAGQK2IDMEKQKBEToEGQG1EUEEIQEJIUcEOQL6HE0EKQEQIlgAMQEDI1MEGQGOGFgE
KQG8IikC1AAFCjUCGQEACikC3AASHQEA1AD6HMoB5AAQItoBGQIuEm0ESQJrE3YE3AAFCjUC5AC8
IikCSQLUAoIEuQGBI80DyQASEpgE9AASHQcB2QFBFKwEuQHSI8wEWQIuE9EE0QFUINgEaQJdFt4E
WQI8I+YEeQLMFjoAQQHMFvIEGQIZI/cEWQESHf0EeQESHQEA2QGqIhcCAgCJASoFCACQASAFCACU
ASUFLgALACUFLgATALgILgAbAMEILgAjAOAILgArAOkILgAzABIJLgA7ABIJLgBDABgJLgBLAOkI
LgBTACcJLgBbABIJLgBjAEcJQwBrACUFgQBzACUFgwALACUFoQBzACUFowALACUFwQBzACUF4QBz
ACUFAQFzACUFIAELACUFIQFzACUFQAELACUFQQFzACUFYAELACUFYQFzACUFgAELACUFgQFzACUF
oAELACUFoQFzACUFowF7ACUFwAFzACUFwQFzACUF4AFzACUF4QFzACUF4wFzACUF4wGLAJgJ4wGT
ACUFAAJzACUFAQJzACUFIAJzACUFIQJzACUFIwJzACUFQAJzACUFQQJzACUFQwJzACUFYAJzACUF
YQJzACUFYwJzACUFgAJzACUFgQJzACUFgwJzACUFoAJzACUFoQJzACUFowJzACUFwQJzACUFwwJz
ACUF4AJzACUF4QJzACUF4wJzACUFAANzACUFAQNzACUFAwNzACUFIANzACUFIQNzACUFIwNzACUF
QANzACUFQQNzACUFQwNzACUFYANzACUFYQNzACUFYwNzACUFgANzACUFgQNzACUFgwNzACUFoANz
ACUFoQNzACUFowNzACUFwANzACUFwQNzACUFwwNzACUF4ANzACUF4QNzACUF4wNzACUFAARzACUF
AQRzACUFAwRzACUFIARzACUFIQRzACUFQARzACUFQQRzACUFYARzACUFYQRzACUFgARzACUFgQRz
ACUFoARzACUFoQRzACUFwARzACUF4ARzACUF4QRzACUFAAVzACUFAQVzACUFIQVzACUFQAVzACUF
QQVzACUFYAVzACUFYQVzACUFgAVzACUFgQVzACUFoAVzACUFoQVzACUFwAVzACUFwQVzACUF4AVz
ACUF4QVzACUFAAZzACUFAQZzACUFIAZzACUFIQZzACUFQAZzACUFQQZzACUFYAZzACUFYQZzACUF
gAZzACUFgQZzACUFoAZzACUFoQZzACUFwAZzACUFwQZzACUF4AZzACUF4QZzACUFAAdzACUFAQdz
ACUFIAdzACUFIQdzACUFQAdzACUFQQdzACUFYAdzACUFYQdzACUFgAdzACUFgQdzACUFoAdzACUF
oQdzACUFwAdzACUFwQdzACUF4AdzACUF4QdzACUFAAhzACUFAQhzACUFIAhzACUFIQhzACUFQAhz
ACUFQQhzACUFYAhzACUFYQhzACUFgAhzACUFgQhzACUFoAhzACUFoQhzACUFwAhzACUFwQhzACUF
4AhzACUF4QhzACUFAAlzACUFAQlzACUFIAlzACUFIQlzACUFQAlzACUFQQlzACUFYAlzACUFYQlz
ACUFgAlzACUFgQlzACUFoAlzACUFoQlzACUFwAlzACUFwQlzACUF4AlzACUF4QlzACUFAApzACUF
AQpzACUFIApzACUFIQpzACUFQApzACUFQQpzACUFYApzACUFYQpzACUFgQpzACUFoQpzACUFwQpz
ACUF4QpzACUFAQtzACUFIQtzACUFQAtzACUFQQtzACUFYAtzACUFYQtzACUFgQtzACUFoAtzACUF
oQtzACUFwAtzACUFwQtzACUF4AtzACUF6QuDAOAIAAxzACUFCQyDAOAIIAxzACUFQAxzACUFQQxz
ACUFYAxzACUFgAxzACUFoAxzACUFwAxzACUF4AxzACUFAA1zACUFIA1zACUFQA1zACUFYA1zACUF
gA1zACUFoA1zACUFwA1zACUF4A1zACUFAA5zACUFIA5zACUFQA5zACUFYA5zACUFgA5zACUFoA5z
ACUFwA5zACUF4A5zACUFAA9zACUFIA9zACUFQA9zACUFYA9zACUFgA9zACUFoA9zACUFwA9zACUF
4A9zACUFABBzACUFIBBzACUFQBBzACUFYBBzACUFgBBzACUFoBBzACUFwBBzACUF4BBzACUFABFz
ACUFQBFzACUFYBFzACUFgBFzACUFoBFzACUFwBFzACUF4BFzACUFABJzACUFIBJzACUFQBJzACUF
YBJzACUFgBJzACUFoBJzACUF4BJzACUFABNzACUFIBNzACUFQBNzACUFYBNzACUFgBNzACUFoBNz
ACUFwBNzACUF4BNzACUFABRzACUFIBRzACUFQBRzACUFYBRzACUFgBRzACUFoBRzACUFwBRzACUF
4BRzACUFABVzACUFIBVzACUFQBVzACUFYBVzACUFgBVzACUFoBVzACUFwBVzACUF4BVzACUFABZz
ACUFIBZzACUFQBZzACUFYBZzACUFgBZzACUFoBZzACUFwBZzACUF4BZzACUFABdzACUFIBdzACUF
QBdzACUF4BdzACUFABhzACUFIBhzACUFQBhzACUFgBhzACUFoBhzACUFwBhzACUF4BhzACUFABlz
ACUFIBlzACUFQBlzACUFYBlzACUFgBlzACUFoBlzACUFwBlzACUF4BlzACUFABpzACUFIBpzACUF
QBpzACUFwBubAI8J4wAsBRwAUQBxAFsCCgR+BIcElASeBOoEBgABAAcABQAIAA4ACQAnAAoAPQAL
AEMADABXAA0AXwAOAGEAAAD9CS4IAAC/GzIIAAAlFy4IAADsFjYIAAD9CS4IAAC/GzIIAAAQGzsI
AACYGzsIAAAlFy4IAAA7Gj8IAAAXGj8IAACuIT8IAACSH0MIAAD9CS4IAAA1I0wIAABjI1EIAACY
GzsIAAArHTsIAADsFjYIAAAqIVYIAACQGVsIAABXEi4IAABXGS4IAAAzGTsIAACIGTsIAAB/HTsI
AABRHTsIAACvHTsIAACMImAIAADcHS4IAACjIy4IAACSGzsIAAA1GzsIAAAYCmYIAABYITsIAAAM
GTsIAABSEzIIAACdCC4IAACVCS4IAACuGTIIAAC5CS4IAACgEjIIAAArHTsIAAB3CS4IAACAEjII
AADAIy4IAADZCS4IAADeEjIIAAAdFy4IAABUCDsIAAB/HTsIAABRHTsIAACvHTsIAACMImAIAADc
HS4IAACjIy4IAACSGzsIAAA1GzsIAABSEzIIAACdCC4IAAD9CS4IAAC/GzIIAADAIy4IAAD2CS4I
AABjI1EIAAAqIVYIAADsAi4IAABoCC4IAACQFy4IAAAEIGoIAADmHy4IAADzHXAIAAAJHnkIAADm
IH8IAAAzH4UIAACSH4sIAACeIJEIAADEGpcIAABgGJ0IAACeGqIIAAAzFDIIAADkETIIAAA+CDII
AADAEjIIAABMIjIIAABcGzIIAAD9CS4IAAC/GzIIAAAQGzsIAAAlFy4IAAAEGD8IAADeFz8IAACu
IT8IAACYGzsIAABvHKcIAAC4E60IAADPIbMIAgAOAAMAAQAPAAMAAgAQAAUAAQARAAUAAgASAAcA
AQATAAcAAgAUAAkAAQAVAAkAAgAXAAsAAQAYAAsAAgAZAA0AAQAaAA0AAgAbAA8AAQAcAA8AAgAd
ABEAAQAeABEAAgAfABMAAQAgABMAAgAhABUAAQAiABUAAgAjABcAAQAkABcAAgAlABkAAQAmABkA
AgAnABsAAQAoABsAAgAqAB0AAQArAB0AAgAsAB8AAQAtAB8AAgAuACEAAQAvACEAAgAwACMAAQAx
ACMAAgAyACUAAQAzACUAAgA0ACcAAQA1ACcAAgA2ACkAAQA3ACkAAgA4ACsAAQA5ACsAAgA6AC0A
AQA7AC0AAgA8AC8AAQA9AC8AAgA+ADEAAQA/ADEAAgBAADMAAQBBADMAAgBCADUAAQBDADUAAgBE
ADcAAQBFADcAAgBGADkAAQBHADkAAgBIADsAAQBJADsAAgBKAD0AAQBLAD0AAgBMAD8AAQBNAD8A
AgBOAEEAAQBPAEEAAgBQAEMAAQBRAEMAAgBSAEUAAQBTAEUAAgBUAEcAAQBVAEcAAgBWAEkAAQBX
AEkAAgBYAEsAAQBZAEsAAgBaAE0AAQBbAE0AAgBdAE8AAQBeAE8AAgBfAFEAAQBgAFEAAgBhAFMA
AQBiAFMAAgBjAFUAAQBkAFUAAgBlAFcAAQBmAFcAAgBnAFkAAQBoAFkAAgBpAFsAAQBqAFsAAgBr
AF0AAQBsAF0AAgBtAF8AAQBuAF8AAgBvAGEAAQBwAGEAAgBxAGMAAQByAGMAAgBzAGUAAQB0AGUA
AgB1AGcAAQB2AGcAAgB3AGkAAQB4AGkAAgB5AGsAAQB6AGsAAgB7AG0AAQB8AG0AAgB9AG8AAQB+
AG8AAgB/AHEAAQCAAHEAAgCBAHMAAQCCAHMAAgCDAHUAAQCEAHUAAgCFAHcAAQCGAHcAAgCHAHkA
AQCIAHkAAgCKAHsAAQCLAHsAAgCMAH0AAQCNAH0AAgCOAH8AAQCPAH8AAgCQAIEAAQCRAIEAAgCS
AIMAAQCTAIMAAgCUAIUAAQCVAIUAAgCXAIcAAQCYAIcAAgCZAIkAAQCaAIkAAgCbAIsAAQCcAIsA
AgCdAI0AAQCeAI0AAgCfAI8AAQCgAI8AAgChAJEAAQCiAJEAAgCjAJMAAQCkAJMAAgClAJUAAQCm
AJUAAgCnAJcAAQCoAJcAAgCpAJkAAQCqAJkAAgCrAJsAAQCsAJsAAgCtAJ0AAQCuAJ0AAgCvAJ8A
AQCwAJ8AAgCxAKEAAQCyAKEAAgCzAKMAAQC0AKMAAgC1AKUAAQC2AKUAAgC3AKcAAQC4AKcAAgC5
AKkAAQC6AKkAAgC/AKsAAQDAAKsAAgDBAK0AAQDCAK0AAgDFAK8AAQDGAK8AAgDHALEAAQDIALEA
AgDJALMAAQDKALMAAgDLALUAAQDMALUAAgDNALcAAQDOALcAAgDPALkAAQDQALkAAgDRALsAAQDS
ALsAAgDTAL0AAQDUAL0AAgDXAL8AAgDYAMEAAQDZAMEAAgDaAMMAugDgAOwA+AD/ACYBeAGnAcMB
0wHfAQcCLQI7Ar4CzAL0AvwCDgMeAywDOgOMA9MD7gMtBF0EZARqBKIEBIAAAAEAAABkHsFoAAAA
AAAATgcAAAQAAAAAAAAAAAAAAAUFMgkAAAAABAAAAAAAAAAAAAAABQWEEwAAAAANAAAAAAAAAAAA
AAAOBSoXAAAAAA0AAAAAAAAAAAAAAA4FcAgAAAAABAAAAAAAAAAAAAAABQXoCAAAAAADAAAAAgCJ
KgAAAAAXBbsZAAAAAAQAAAAAAAAAAAAAAAUFnBgAAAAAAAAAAAEAAADOHgAAEAACABEAAgASAAIA
EwACABQAAgAVAAIAFgACABcAAgAYAAIAGQACABoAAgAbAAIAHAACAB0AAgAeAAQAHwAEACAACwAA
AAAAEwChCAAAAAAVAKEIFADBAFEAwQBTAMEAFADnAFEA5wBTAOcAEgDzAFEA8wBfAPMAYwBJAWUA
YgFnAGIBawChAWMAtgF1AAECYwAQAnkAJAJfAGIBUwBiAWMARAJnAEsCdQDGAo0A7gJlAMEAXwBL
AnUABAONAAQDYwAEA2UACgNRAAoDYwAXA2UA5wB1ACYDjQA0A2MAQwN1AKEBUQBiAWUASwJRAEsC
UwBLAmMAlQNRAJwDeQDIA3kASwLLAEsCCwHGBCEBYgEAAAAAAElEVFNDb25uZWN0aW9uTWFuYWdl
ckRhdGFiYXNlUGFyYW1ldGVyczEwMAA8PjlfXzdfMTAAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vz
cz5iX183XzEwADw+OV9fMTAAPER1bXBNMk1xRGF0YT5iX18xMAA8PjlfXzdfMjAAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX183XzIwADw+OV9fNzJfMAA8U2F2ZURlY2lzaW9ucz5iX183Ml8w
ADw+Y19fRGlzcGxheUNsYXNzM18wADw+Y19fRGlzcGxheUNsYXNzNl8wADw+OV9fN18wADxTb2x2
ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18wADw+Y19fRGlzcGxheUNsYXNzN18wADxEdW1wTTJN
cURhdGE+Yl9fMAA8QWRqdXN0UG9zaXRpb24+Yl9fMAA8PjlfXzdfMTEAPFNvbHZlckNhbGN1bGF0
aW9uUHJvY2Vzcz5iX183XzExADw+OV9fMjEAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18y
MQA8U2F2ZURlY2lzaW9ucz5iX183Ml8xADw+Y19fRGlzcGxheUNsYXNzM18xADw+Y19fRGlzcGxh
eUNsYXNzNl8xADw+OV9fN18xADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xADw+Y19f
RGlzcGxheUNsYXNzN18xADxEdW1wTTJNcURhdGE+Yl9fMQA8QWRqdXN0UG9zaXRpb24+Yl9fMQBJ
RW51bWVyYWJsZWAxAElPcmRlcmVkRW51bWVyYWJsZWAxAExpc3RgMQBDUyQ8PjhfX2xvY2FsczEA
PD45X183XzEyADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xMgA8U29sdmVyQ2FsY3Vs
YXRpb25Qcm9jZXNzPmJfXzIyAFRvSW50MzIAZ2V0X1RvdGFsTTIAc2V0X1RvdGFsTTIAPD45X182
XzIAPER1bXBNMk1xRGF0YT5iX182XzIAPD5jX19EaXNwbGF5Q2xhc3M2XzIAPD45X183XzIAPFNv
bHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzIAPD5jX19EaXNwbGF5Q2xhc3M3XzIARnVuY2Ay
AElHcm91cGluZ2AyAENTJDw+OF9fbG9jYWxzMgA8PjlfXzEzADxTb2x2ZXJDYWxjdWxhdGlvblBy
b2Nlc3M+Yl9fMTMAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18yMwA8PjlfXzZfMwA8RHVt
cE0yTXFEYXRhPmJfXzZfMwA8PmNfX0Rpc3BsYXlDbGFzczZfMwA8PmNfX0Rpc3BsYXlDbGFzczdf
MwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzMARnVuY2AzAENTJDw+OF9fbG9jYWxzMwA8
PjlfXzE0ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMTQAPD45X183XzI0ADxTb2x2ZXJD
YWxjdWxhdGlvblByb2Nlc3M+Yl9fN18yNAA8PmNfX0Rpc3BsYXlDbGFzczZfNAA8PjlfXzdfNAA8
U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfNAA8PmNfX0Rpc3BsYXlDbGFzczdfNAA8RHVt
cE0yTXFEYXRhPmJfXzQAQ1MkPD44X19sb2NhbHM0ADw+OV9fN18xNQA8U29sdmVyQ2FsY3VsYXRp
b25Qcm9jZXNzPmJfXzdfMTUAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18yNQA8PjlfXzZf
NQA8RHVtcE0yTXFEYXRhPmJfXzZfNQA8PmNfX0Rpc3BsYXlDbGFzczZfNQA8PjlfXzdfNQA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfNQA8PmNfX0Rpc3BsYXlDbGFzczdfNQBDUyQ8Pjhf
X2xvY2FsczUAPD45X183XzE2ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xNgA8Pjlf
XzdfMjYAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzI2ADw+OV9fN182ADxTb2x2ZXJD
YWxjdWxhdGlvblByb2Nlc3M+Yl9fN182ADxEdW1wTTJNcURhdGE+Yl9fNgA8PjlfXzdfMTcAPFNv
bHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzE3ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+
Yl9fMjcAPD45X183ADxEdW1wTTJNcURhdGE+Yl9fNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNz
PmJfXzcAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xOAA8PjlfXzdfMjgAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX183XzI4AFNUX2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMyZjllZjdk
ODU4ADw+OV9fN184ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN184ADw+OV9fOAA8RHVt
cE0yTXFEYXRhPmJfXzgAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xOQA8PjkAX1Z0YmxH
YXAxXzkAPD45X183XzkAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzkAPER1bXBNMk1x
RGF0YT5iX185ADxNb2R1bGU+AGdldF9Qcm9jZXNzSUQAc2V0X1Byb2Nlc3NJRABnZXRfTURRAHNl
dF9NRFEAZ2V0X1RvdGFsTVEAc2V0X1RvdGFsTVEATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2Vk
RFRTAGdldF9Jc0RTVABzZXRfSXNEU1QAWAB2YWx1ZV9fAFNUXzU4NWJhMmU5MmJkZDQyZGViODFm
N2MwY2U4NDAyZmFhAEdldENvbm5lY3Rpb25Gb3JTY2hlbWEAU3lzdGVtLkRhdGEARHVtcE0yTXFE
YXRhAE1kcURhdGEAU29sdmVyRGF0YQBfc29sdmVyRGF0YQBTeXN0ZW0uRGF0YS5PbGVEYgBtc2Nv
cmxpYgA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAZ2V0X0lkAHNldF9JZABnZXRfUGF0
aElkAHNldF9QYXRoSWQAZ2V0X0Zyb21Mb2NhdGlvbklkAHNldF9Gcm9tTG9jYXRpb25JZABnZXRf
VG9Mb2NhdGlvbklkAHNldF9Ub0xvY2F0aW9uSWQAZ2V0X0NvbnRyYWN0SWQAc2V0X0NvbnRyYWN0
SWQAZ2V0X1JlY2VpcHRJZABzZXRfUmVjZWlwdElkAFJlYWQAQWRkAGdldF9Tb2x2ZWQAc2V0X1Nv
bHZlZABQU19wcm9jZXNzX2lkAE5ld0d1aWQAPFRvdGFsTTI+a19fQmFja2luZ0ZpZWxkADxQcm9j
ZXNzSUQ+a19fQmFja2luZ0ZpZWxkADxNRFE+a19fQmFja2luZ0ZpZWxkADxUb3RhbE1RPmtfX0Jh
Y2tpbmdGaWVsZAA8SXNEU1Q+a19fQmFja2luZ0ZpZWxkADxJZD5rX19CYWNraW5nRmllbGQAPFBh
dGhJZD5rX19CYWNraW5nRmllbGQAPEZyb21Mb2NhdGlvbklkPmtfX0JhY2tpbmdGaWVsZAA8VG9M
b2NhdGlvbklkPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3RJZD5rX19CYWNraW5nRmllbGQAPFJl
Y2VpcHRJZD5rX19CYWNraW5nRmllbGQAPFNvbHZlZD5rX19CYWNraW5nRmllbGQAPERlY2lzaW9u
VGFibGU+a19fQmFja2luZ0ZpZWxkADxGcmVlVG9TY2hlZHVsZT5rX19CYWNraW5nRmllbGQAPFBh
dGhOYW1lPmtfX0JhY2tpbmdGaWVsZAA8VG9Mb2NhdGlvbk5hbWU+a19fQmFja2luZ0ZpZWxkADxV
c2VyTmFtZT5rX19CYWNraW5nRmllbGQAPENvbnRyYWN0TmFtZT5rX19CYWNraW5nRmllbGQAPFN0
b3JhZ2VUeXBlPmtfX0JhY2tpbmdGaWVsZAA8VGFibGVUb1VwZGF0ZT5rX19CYWNraW5nRmllbGQA
PFBhdGg+a19fQmFja2luZ0ZpZWxkADxSYW5rPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3RSYW5r
PmtfX0JhY2tpbmdGaWVsZAA8T2JqZWN0aXZlR29hbD5rX19CYWNraW5nRmllbGQAPG1pbl93aXRo
ZHJhd2FsPmtfX0JhY2tpbmdGaWVsZAA8bWF4X3dpdGhkcmF3YWw+a19fQmFja2luZ0ZpZWxkADxN
b2RlbD5rX19CYWNraW5nRmllbGQAPERlY2lzaW9uPmtfX0JhY2tpbmdGaWVsZAA8UmVjZWlwdERl
Y2lzaW9uPmtfX0JhY2tpbmdGaWVsZAA8TmV3RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxEZWxp
dmVyeURlY2lzaW9uPmtfX0JhY2tpbmdGaWVsZAA8RnJvbUxvY2F0aW9uPmtfX0JhY2tpbmdGaWVs
ZAA8bWluX2luamVjdGlvbj5rX19CYWNraW5nRmllbGQAPG1heF9pbmplY3Rpb24+a19fQmFja2lu
Z0ZpZWxkADxPbGVEYkNvbm5lY3Rpb24+a19fQmFja2luZ0ZpZWxkADxTcWxDb25uZWN0aW9uPmtf
X0JhY2tpbmdGaWVsZAA8UG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxGaXhlZFBvc2l0aW9uPmtf
X0JhY2tpbmdGaWVsZAA8RGVtYW5kUG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxTdG9yYWdlUG9z
aXRpb24+a19fQmFja2luZ0ZpZWxkADxTdXBwbHlQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPERl
c2NyaXB0aW9uPmtfX0JhY2tpbmdGaWVsZAA8TG9zc0ZhY3Rvcj5rX19CYWNraW5nRmllbGQAPERl
bWFuZEFkanVzdEZhY3Rvcj5rX19CYWNraW5nRmllbGQAPFN1cHBseUFkanVzdEZhY3Rvcj5rX19C
YWNraW5nRmllbGQAPERlbGl2ZXJ5QWRqdXN0RmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8SG91cj5r
X19CYWNraW5nRmllbGQAPE1EUXM+a19fQmFja2luZ0ZpZWxkADxNRFFEYXRhcz5rX19CYWNraW5n
RmllbGQAPERlbGl2ZXJpZXM+a19fQmFja2luZ0ZpZWxkADxQYXRocz5rX19CYWNraW5nRmllbGQA
PERlY2lzaW9ucz5rX19CYWNraW5nRmllbGQAPE51bWJlck9mRGVjaXNpb25zPmtfX0JhY2tpbmdG
aWVsZAA8Q29udHJhY3RzPmtfX0JhY2tpbmdGaWVsZAA8UmVjZWlwdHM+a19fQmFja2luZ0ZpZWxk
ADxDb250cmFjdD5rX19CYWNraW5nRmllbGQAPHJhdGNoZXRfbGltaXQ+a19fQmFja2luZ0ZpZWxk
ADxTdG9yYWdlQ29uc3RyYWludD5rX19CYWNraW5nRmllbGQAPFRlcm1TdGFydD5rX19CYWNraW5n
RmllbGQAPFN1cHBseT5rX19CYWNraW5nRmllbGQAPERlbGl2ZXJ5PmtfX0JhY2tpbmdGaWVsZAA8
R3JhbnVsYXJpdHk+a19fQmFja2luZ0ZpZWxkADxQcmlvcml0eT5rX19CYWNraW5nRmllbGQAb3Bf
Qml0d2lzZUFuZABPbGVEYkNvbW1hbmQARXhlY3V0ZUNvbW1hbmQAR29hbEtpbmQAUmVwbGFjZQBn
ZXRfU3RhY2tUcmFjZQBDcmVhdGVJbnN0YW5jZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UA
QWRkUmFuZ2UAR2V0U2NoZW1hVGFibGUARGF0YVRhYmxlAGdldF9EZWNpc2lvblRhYmxlAHNldF9E
ZWNpc2lvblRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAR2V0RG91YmxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9GcmVlVG9TY2hlZHVsZQBzZXRf
RnJlZVRvU2NoZWR1bGUAZ2V0X05hbWUAZ2V0X1BhdGhOYW1lAHNldF9QYXRoTmFtZQBnZXRfVG9M
b2NhdGlvbk5hbWUAc2V0X1RvTG9jYXRpb25OYW1lAGdldF9Vc2VyTmFtZQBzZXRfVXNlck5hbWUA
Z2V0X0NvbnRyYWN0TmFtZQBzZXRfQ29udHJhY3ROYW1lAHByb3BlcnR5TmFtZQBQU191c2VyX25h
bWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBzZXRfQ29tbWFuZFR5
cGUAZ2V0X1N0b3JhZ2VUeXBlAHNldF9TdG9yYWdlVHlwZQBfc3RvcmFnZVR5cGUAQ2hhbmdlVHlw
ZQBHZXRUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1
cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5hbERh
dGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3NlAGdl
dF9UYWJsZVRvVXBkYXRlAHNldF9UYWJsZVRvVXBkYXRlAEFnZ3JlZ2F0ZQBFZGl0b3JCcm93c2Fi
bGVTdGF0ZQBFbmNsb3NlV2l0aFF1b3RlAERpc3BJZEF0dHJpYnV0ZQBDb21waWxlckdlbmVyYXRl
ZEF0dHJpYnV0ZQBHdWlkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUARXh0ZW5zaW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3Nl
bWJseURlc2NyaXB0aW9uQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbXBpbGF0
aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5
Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3Nl
bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0X1Zh
bHVlAEFkZFdpdGhWYWx1ZQBTZXRWYWx1ZQBwcm9wZXJ0eVZhbHVlAHZhbHVlAGdldF9SZWFsTm9u
bmVnYXRpdmUAU2ltcGxleERpcmVjdGl2ZQBTb2x2ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5n
AFRvU3RyaW5nAGNvbnN0cmluZwBnZXRfUGF0aABzZXRfUGF0aABwYXRoAGdldF9SYW5rAHNldF9S
YW5rAGdldF9Db250cmFjdFJhbmsAc2V0X0NvbnRyYWN0UmFuawBNaWNyb3NvZnQuU3FsU2VydmVy
LlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBBZGRH
b2FsAGdldF9PYmplY3RpdmVHb2FsAHNldF9PYmplY3RpdmVHb2FsAG9wX0dyZWF0ZXJUaGFuT3JF
cXVhbABvcF9MZXNzVGhhbk9yRXF1YWwAZ2V0X21pbl93aXRoZHJhd2FsAHNldF9taW5fd2l0aGRy
YXdhbABnZXRfbWF4X3dpdGhkcmF3YWwAc2V0X21heF93aXRoZHJhd2FsAGdldF9Nb2RlbABzZXRf
TW9kZWwAQ3JlYXRlTW9kZWwAQ2xlYXJNb2RlbABTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29t
cG9uZW50TW9kZWwAU1RfZjM5MjMzZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4NTguZGxsAGdldF9J
dGVtAGl0ZW0AU3lzdGVtAFRlcm0AU3VtAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBEb21h
aW4AZ2V0X0RlY2lzaW9uAHNldF9EZWNpc2lvbgBBZGREZWNpc2lvbgBnZXRfU29sdmVyRGVjaXNp
b24Ac2V0X1NvbHZlckRlY2lzaW9uAGdldF9SZWNlaXB0RGVjaXNpb24Ac2V0X1JlY2VpcHREZWNp
c2lvbgBnZXRfTmV3RGVjaXNpb24Ac2V0X05ld0RlY2lzaW9uAG5ld0RlY2lzaW9uAGdldF9EZWxp
dmVyeURlY2lzaW9uAHNldF9EZWxpdmVyeURlY2lzaW9uAGdldF9Gcm9tTG9jYXRpb24Ac2V0X0Zy
b21Mb2NhdGlvbgBNaWNyb3NvZnQuU29sdmVyLkZvdW5kYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AU3lzdGVtLkdsb2JhbGl6YXRpb24AZ2V0X21pbl9pbmplY3Rpb24Ac2V0X21pbl9pbmplY3Rp
b24AZ2V0X21heF9pbmplY3Rpb24Ac2V0X21heF9pbmplY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24A
T2xlRGJQYXJhbWV0ZXJDb2xsZWN0aW9uAERhdGFSb3dDb2xsZWN0aW9uAGdldF9PbGVEYkNvbm5l
Y3Rpb24Ac2V0X09sZURiQ29ubmVjdGlvbgBnZXRfU3FsQ29ubmVjdGlvbgBzZXRfU3FsQ29ubmVj
dGlvbgBnZXRjb25uZWN0aW9uAGdldF9Qb3NpdGlvbgBzZXRfUG9zaXRpb24AZ2V0X0ZpeGVkUG9z
aXRpb24Ac2V0X0ZpeGVkUG9zaXRpb24AZ2V0X0RlbWFuZFBvc2l0aW9uAHNldF9EZW1hbmRQb3Np
dGlvbgBnZXRfU3RvcmFnZVBvc2l0aW9uAHNldF9TdG9yYWdlUG9zaXRpb24AQWRqdXN0UG9zaXRp
b24AZ2V0X1N1cHBseVBvc2l0aW9uAHNldF9TdXBwbHlQb3NpdGlvbgBFeGNlcHRpb24AZ2V0X0Rl
c2NyaXB0aW9uAHNldF9EZXNjcmlwdGlvbgBTb2x1dGlvbgBTeXN0ZW0uRGF0YS5Db21tb24Ab2Jq
ZWN0VG8AQ3VsdHVyZUluZm8AUHJvcGVydHlJbmZvAGN1cmVudGx5U29sdmVkTWRxAFN5c3RlbS5M
aW5xAG15VmFyAGRyAE9sZURiRGF0YVJlYWRlcgBGcm9tRGF0YVJlYWRlcgBGcm9tT2xlUmVhZGVy
AEV4ZWN1dGVSZWFkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBUb1Vw
cGVyAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBFdmVudHNPYmplY3RX
cmFwcGVyAE9sZURiUGFyYW1ldGVyAEZpcmVFcnJvcgBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9y
AEFjdGl2YXRvcgAuY3RvcgBnZXRfTG9zc0ZhY3RvcgBzZXRfTG9zc0ZhY3RvcgBnZXRfRGVtYW5k
QWRqdXN0RmFjdG9yAHNldF9EZW1hbmRBZGp1c3RGYWN0b3IAZ2V0X1N1cHBseUFkanVzdEZhY3Rv
cgBzZXRfU3VwcGx5QWRqdXN0RmFjdG9yAGdldF9EZWxpdmVyeUFkanVzdEZhY3RvcgBzZXRfRGVs
aXZlcnlBZGp1c3RGYWN0b3IALmNjdG9yAHN0cgBnZXRfSG91cgBzZXRfSG91cgBob3VyAGdldF9N
RFFzAHNldF9NRFFzAGdldF9NRFFEYXRhcwBzZXRfTURRRGF0YXMAU3lzdGVtLkRpYWdub3N0aWNz
AFNUXzU4NWJhMmU5MmJkZDQyZGViODFmN2MwY2U4NDAyZmFhLkV4dGVuc2lvbk1ldGhvZHMATWlj
cm9zb2Z0LlNvbHZlckZvdW5kYXRpb24uU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNl
cnZpY2VzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBT
VF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5y
ZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAZ2V0X0RlbGl2ZXJpZXMAc2V0X0RlbGl2ZXJpZXMAU1Rf
ZjM5MjMzZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4NTguUHJvcGVydGllcwBnZXRfVmFyaWFibGVz
AFNldHRpbmdzAGdldF9QYXRocwBzZXRfUGF0aHMAZ2V0X0dvYWxzAGdldF9EZWNpc2lvbnMAc2V0
X0RlY2lzaW9ucwBTYXZlRGVjaXNpb25zAGdldF9OdW1iZXJPZkRlY2lzaW9ucwBzZXRfTnVtYmVy
T2ZEZWNpc2lvbnMAVXBkYXRlU29sdmVyRGVjaXNpb25zAElFTnVtZXJhYmxlRXh0ZW5zaW9ucwBN
eUV4dGVuc2lvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwBnZXRfUGFyYW1l
dGVycwBTdWNjZXNzAFNvbHZlckNhbGN1bGF0aW9uUHJvY2VzcwBnZXRfRHRzAGdldF9Db250cmFj
dHMAc2V0X0NvbnRyYWN0cwBTY3JpcHRSZXN1bHRzAEdldEdlbmVyaWNBcmd1bWVudHMAZ2V0X0V2
ZW50cwBnZXRfUmVjZWlwdHMAc2V0X1JlY2VpcHRzAFBvcHVsYXRlRFRTVmFyaWFibGVJbnB1dHMA
Z2V0X1Jvd3MAQ29uY2F0AGdldF9Db250cmFjdABzZXRfQ29udHJhY3QAY29udHJhY3QAZ2V0X1Nv
bHZlckRlY2lzaW9uRXhhY3QAc2V0X1NvbHZlckRlY2lzaW9uRXhhY3QAZ2V0X0lubmVyT2JqZWN0
AFNlbGVjdABEaXN0aW5jdABvcF9JbXBsaWNpdABnZXRfcmF0Y2hldF9saW1pdABzZXRfcmF0Y2hl
dF9saW1pdABnZXRfRGVmYXVsdABGaXJzdE9yRGVmYXVsdABEVFNFeGVjUmVzdWx0AHNldF9UYXNr
UmVzdWx0AFRvSW50AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfQ3VycmVudABjdXJyZW50AEFk
ZENvbnN0cmFpbnQAZ2V0X1N0b3JhZ2VDb25zdHJhaW50AHNldF9TdG9yYWdlQ29uc3RyYWludABk
ZWxpdmVyeVBvaW50AENvdW50AHJlY2VpcHQAZ2V0X1Rlcm1TdGFydABzZXRfVGVybVN0YXJ0AENv
bnZlcnQAVG9MaXN0AGxpc3QARmlyc3QAbWRxVG9BZGp1c3QATW92ZU5leHQAU29sdmVyQ29udGV4
dABHZXRDb250ZXh0AERhdGFSb3cAaW5kZXgAVGhlbkJ5AEdyb3VwQnkAT3JkZXJCeQBnZXRfSXRl
bUFycmF5AFRvQXJyYXkAZ2V0X0Fzc2VtYmx5AGdldF9TdXBwbHkAc2V0X1N1cHBseQBFeGVjdXRl
Tm9uUXVlcnkAcXVlcnkAZ2V0X0RlbGl2ZXJ5AHNldF9EZWxpdmVyeQBkZWxpdmVyeQBvcF9FcXVh
bGl0eQBvcF9JbmVxdWFsaXR5AGdldF9HcmFudWxhcml0eQBzZXRfR3JhbnVsYXJpdHkAZ2V0X1By
aW9yaXR5AHNldF9Qcmlvcml0eQBwcmlvcml0eQBJc051bGxPckVtcHR5AEZpbGxPYmplY3RXaXRo
UHJvcGVydHkAR2V0UHJvcGVydHkAegAAAAAAH08ATABFAF8AQwBPAE4ATgBfAE0AYQBpAG4ARABC
AAAXUwBjAHIAaQBwAHQAXwBUAGEAcwBrAAADDQAAGVAAUwBfAFAAcgBvAGMAZQBzAHMASQBEAAAZ
UABTAF8AdQBzAGUAcgBfAG4AYQBtAGUAAEdhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABi
AG8ALgBzAG8AbAB2AGUAcgBfAGQAZQBjAGkAcwBpAG8AbgBzAF8AAANfAABhYQBkAGkAaABhAF8A
cAByAG8AYwBlAHMAcwAuAGQAYgBvAC4AYwBvAG4AdAByAGEAYwB0AHcAaQBzAGUAXwBkAGUAdABh
AGkAbABfAG0AZABxAF8AZwByAG8AdQBwAF8AAEthAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4A
ZABiAG8ALgBzAHQAbwByAGEAZwBlAF8AYwBvAG4AcwB0AHIAYQBpAG4AdABfAABHYQBkAGkAaABh
AF8AcAByAG8AYwBlAHMAcwAuAGQAYgBvAC4AcwB0AG8AcgBhAGcAZQBfAHAAbwBzAGkAdABpAG8A
bgBfAAB5RQBYAEUAQwAgAHMAcABhAF8AcgB1AG4AXwBzAGkAbQBwAGwAZQB4AF8AcwBvAGwAdgBl
AHIAXwBwAGEAYwBrAGEAZwBlACAAQABmAGwAYQBnAD0AJwByACcALAAgAEAAcAByAG8AYwBlAHMA
cwBfAGkAZAA9ACcAAScnACwAIABAAHUAcwBlAHIAXwBsAG8AZwBpAG4AXwBpAGQAPQAnAAEFJwAg
AAF5RQBYAEUAQwAgAHMAcABhAF8AcgB1AG4AXwBzAGkAbQBwAGwAZQB4AF8AcwBvAGwAdgBlAHIA
XwBwAGEAYwBrAGEAZwBlACAAQABmAGwAYQBnAD0AJwBkACcALAAgAEAAcAByAG8AYwBlAHMAcwBf
AGkAZAA9ACcAAXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8A
bAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAG0AJwAsACAAQABwAHIAbwBj
AGUAcwBzAF8AaQBkAD0AJwABD04AbwAgAFAAYQB0AGgAABdOAG8AIABDAG8AbgB0AHIAYQBjAHQA
AANEAAADLQABA0MAAAdSAE8AVwAAB0MATwBMAAAJZwBvAGEAbAAAFVcASQBUAEgARABSAEEAVwBB
AEwAAAlOAFUATABMAAADJwABAQB5RQBYAEUAQwAgAHMAcABhAF8AcgB1AG4AXwBzAGkAbQBwAGwA
ZQB4AF8AcwBvAGwAdgBlAHIAXwBwAGEAYwBrAGEAZwBlACAAQABmAGwAYQBnAD0AJwB1ACcALAAg
AEAAcAByAG8AYwBlAHMAcwBfAGkAZAA9ACcAAWNUAFIAVQBOAEMAQQBUAEUAIABUAEEAQgBMAEUA
IABhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBzAG8AbAB2AGUAcgBfAGQAZQBj
AGkAcwBpAG8AbgBzAAAHQABwADEAABlJAE4AUwBFAFIAVAAgAEkATgBUAE8AIAAAgoEgACgAcwBv
AHUAcgBjAGUAXwBpAGQALAAgAFsAcwBvAHUAcgBjAGUAXQAsACAAZABlAHMAdABpAG4AYQB0AGkA
bwBuAF8AaQBkACwAIABbAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBdACwAIABtAGQAcQAsACAAcgBl
AGMAZQBpAHYAZQBkACwAIABnAG8AYQBsAF8AbwBiAGoAZQBjAHQAaQB2AGUALAAgAGwAbwBzAHMA
XwBmAGEAYwB0AG8AcgAsACAAcABhAHQAaABfAGkAZAAsAGMAbwBuAHQAcgBhAGMAdABfAGkAZAAs
ACAAZABlAGwAaQB2AGUAcgB5ACwAIAByAGUAYwBlAGkAdgBlAGQAXwBtAGQAcQAsAHAAYQB0AGgA
XwBwAHIAaQBvAHIAaQB0AHkALABjAG8AbgB0AHIAYQBjAHQAXwByAGEAbgBrACwAcwBvAHUAcgBj
AGUAXwBwAG8AcwBpAHQAaQBvAG4ALABzAG8AdQByAGMAZQBfAHIAYQBuAGsALABkAGUAcwB0AGkA
bgBhAHQAaQBvAG4AXwBwAG8AcwBpAHQAaQBvAG4ALABkAGUAcwB0AGkAbgBhAHQAaQBvAG4AXwBy
AGEAbgBrACwAWwB0AGUAcgBtAF8AcwB0AGEAcgB0AF0ALABbAGgAbwB1AHIAXQAsAFsAZwByAGEA
bgB1AGwAYQByAGkAdAB5AF0ALAAgAHMAdQBwAHAAbAB5AF8AcABvAHMAaQB0AGkAbwBuACwAIABk
AGUAbQBhAG4AZABfAHAAbwBzAGkAdABpAG8AbgAsAGkAcwBfAGQAcwB0ACkAIABWAGEAbAB1AGUA
cwAgACgAAAUsACcAAQUnACwAAQMsAAAHJwAsACcAASd5AHkAeQB5AC0ATQBNAC0AZABkACAASABI
ADoAbQBtADoAcwBzAAEFKQAgAABxUwBUAF8AZgAzADkAMgAzADMAZgBhAGMAMQA2AGUANAAyADYA
ZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAu
AFIAZQBzAG8AdQByAGMAZQBzAAAAANezQR2Wm8ZOp4pyMW73WNAAAyAAAQQgAQEIBSABAREVBCAB
AQ4GIAEBEYC1BAcBEkEFIAASgM0FIAASgNEGIAESgNUcBSAAEoDZAyAADgYAAw4ODg4CBg4IIAUC
CA4ODggGBwISSRJBAyAAHAUgABKA4QYgARKA5RwHAAQODg4ODjYHERJEEk0dEhwIEkgVEVUBEigS
TB0SMBJQCBJUFRJZAhIoAhJYFRJRARIgFRJZAhIkEiAIEkEFAAEOHQ4GIAIBDhJJBCAAEk0GFRJR
ARIwBAoBEjANEAEBHR4AFRKAiQEeAAsQAQEIFRKAiQEeAAYVElEBEhwECgESHAYVElEBEiQECgES
JAYVElEBEiAHFRJZAhIkAgUgAgEcGBgQAQIVEoCJAR4AFRKAiQEeABUSWQIeAAIIFRJZAhIkEigZ
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
MAQoABIcBCgAEhgEKAASZQUoABGAoQMoAAIFKAAdEmUIKAAVElEBEiAFKAAdEiQFKAAdEjAFKAAd
EhwFKAAdEigFKAAdEhgFKAASgKUEKAASYQQoABJJBQgAEoCtBQgAEoCxBAgAEjgIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2YzOTIzM2ZhYzE2
ZTQyNmQ5OTFkOTMyZjllZjdkODU4AAAFAQAAAAAOAQAJTWljcm9zb2Z0AAAfAQAaQ29weXJpZ2h0
IEAgTWljcm9zb2Z0IDIwMTQAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAgBABoAAAAAACkBACQ2MTE2M0VGMC00
NEU5LTQxM0YtQTgyMS1DQzgxNTM5QTcyQTIAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVz
b3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNl
cy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAGSyAAAAAAAAAAAAAH6y
AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwsgAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29y
ZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWMAA
AD4EAAAAAAAAAAAAAD4ENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQDBaGQeAAABAMFoZB4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sASeAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAB6AwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAANAAKAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0
AGkAbwBuAAAAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQA
OQAzADIAZgA5AGUAZgA3AGQAOAA1ADgAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAA
ADEALgAwAC4ANwA3ADgAMAAuADIANgA4ADEANwAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4A
YQBtAGUAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAz
ADIAZgA5AGUAZgA3AGQAOAA1ADgALgBkAGwAbAAAAFoAGwABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAE0AaQBjAHIAbwBzAG8AZgB0ACAAMgAw
ADEANAAAAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgA
AQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AZgAzADkAMgAzADMAZgBh
AGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AC4AZABsAGwA
AABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBj
ADEANgBlADQAMgA2AGQAOQA5ADEAZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAAAEIADwABAFAA
cgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA3ADgAMAAuADIANgA4ADEANwAA
AAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA3ADgA
MAAuADIANgA4ADEANwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAwAAACQMgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="363"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="121"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="123"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="124"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="324"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="384"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="485"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="278"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="403"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="SolverData.cs"
            Line="55"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>