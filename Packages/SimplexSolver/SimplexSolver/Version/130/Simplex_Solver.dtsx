<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="975"
  DTS:VersionGUID="{6923FACA-067A-4BEA-8CC3-2410EC1E465C}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=EU-T-SQL01.farrms.us,2033;User ID=dev_admin;Initial Catalog=TRMTracker_Enercity;Provider=SQLNCLI11.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TEST"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">08276173_6483_49E3_BF18_9FE2DC4F8876</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">adangol</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{03EF4576-714D-44EE-80B6-ADEB18E884F0}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="MdqData.cs"/>
		<msb:File Include="MDQ.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Supply.cs"/>
		<msb:File Include="Delivery.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Path.cs"/>
		<msb:File Include="Contract.cs"/>
		<msb:File Include="SolverData.cs"/>
		<msb:Breakpoint Include="915ce05a34f34d0a9be18010173e90e9">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>362</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="92a8d8a6032f4223a38021efa4d4b8ab">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>121</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="87eea4960a7a48deb50bf258ddeaa672">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>123</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="be408d9866bf47ac9f4e74f0fbcaffef">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>124</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="2b584bd0a9e846f5bc1619a5059c8e69">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>323</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="57ec78f6abd2460eb3a3b2725b6b7f09">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>383</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="8393c570eef0486684d65473fd90d6c0">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>484</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="cff86f8bac0346e284c9096d8aced38c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>277</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0856fe96d7cf407a841d8465e3abb099">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>402</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Contract.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="MdqData.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public string StorageType { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Linq;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_f39233fac16e426d991d932f9ef7d858;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>


        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Supply>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contract =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id).OrderBy(X=> X.ContractRank)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .FirstOrDefault();
                    }
                }


                index = 0;
                foreach (Supply receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contract = new Contract() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract;
                            if (contract == null)
                                path.Contract = new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path };
                            //foreach (Contract contract in path.Contracts)
                            //{
                            var mdqCollection = _solverData.MDQDatas.Where(z => z.FromLocationId == receipt.Id & z.ToLocationId == delivery.Id & z.ContractId == contract.Id & z.PathId == path.Id)
                                .Select(z =>
                                        new MDQ()
                                        {
                                            Id = index,
                                            Delivery = delivery,
                                            Supply = receipt,
                                            Position = z.MDQ,
                                            Contract = new Contract() { Id = z.ContractId, Description = z.ContractName, Rank = z.ContractRank },
                                            Decision = new Decision(Domain.RealNonnegative, "D" + index),
                                            Path = new Path() { Id = z.PathId, Description = z.PathName, ReceiptId = receipt.Id },
                                            LossFactor = z.LossFactor,
                                            SupplyAdjustFactor = z.SupplyAdjustFactor,
                                            DeliveryAdjustFactor = z.DeliveryAdjustFactor,
                                            DemandAdjustFactor = z.DemandAdjustFactor,
                                            TermStart = z.TermStart,
                                            Hour = z.Hour,
                                            Granularity = z.Granularity,
                                            StorageType = z.StorageType,
                                            SupplyPosition = z.SupplyPosition,
                                            DemandPosition = z.DemandPosition
                                        })
                                .ToList();

                            _solverData.MDQs.AddRange(mdqCollection);
                            /*
                            _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }
                                */
                            index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Supply[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Supply receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Supply.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Supply.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();

                        paths = mdqs.Where(x => x.Supply.Id == receipt.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.Path.Id,
                                        Description = x.Path.Description,
                                        Priority = x.Path.Priority,
                                        ReceiptId = x.Path.ReceiptId,
                                        Delivery = x.Delivery,
                                        Contract = new Contract() { Id = x.Contract.Id, Description = x.Contract.Description, Rank = x.Contract.Rank }
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToArray();


                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract; // path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                                                               //foreach (Contract contract in contracts)
                                                               //{
                                                               //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            context.ClearModel();
                            Model model = context.CreateModel();

                            //  Contract according to their rankings
                            //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Supply.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                            if (mdqtoadjust.Count() == 0) continue;
                            //  MDQ Constraint
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Decision = new Decision(Domain.RealNonnegative, "D" + Guid.NewGuid().ToString().Replace("-", "_").ToUpper());
                                model.AddDecision(mdq.Decision);
                                model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position
                                                        & mdq.Decision <= mdq.Supply.Position
                                                        & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor
                                                        & mdq.Decision <= receipt.Position
                                                        & mdq.Decision <= mdq.Supply.max_withdrawal
                                                        & mdq.Decision >= mdq.Supply.min_withdrawal
                                                        & mdq.Decision <= mdq.Delivery.max_injection
                                                        & mdq.Decision >= mdq.Delivery.min_injection
                                                        & mdq.Decision <= mdq.Delivery.ratchet_limit
                                                        & mdq.Decision <= mdq.Supply.ratchet_limit
                                                        & mdq.Decision <= mdq.SupplyPosition
                                                        & mdq.Decision <= mdq.DemandPosition);
                            }
                            //  Row constraint
                            Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                            //Column Constraint
                              model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position);
                            //  Sum of Hourly supply constraint / Demand Constraint
                            //model.AddConstraint("SUPPLY" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.SupplyPositionHourly));
                            //model.AddConstraint("DEMAND" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.DemandPositionHourly));

                            //  Decisions to solve
                            //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                            model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                            _solverData.Model = model;
                            var simplex = new SimplexDirective();
                            Solution solution = context.Solve(simplex);
                            Goal goal = model.Goals.FirstOrDefault();
                            if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                            //receipt.Position -= goal.ToInt();

                            //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Solved = true;
                                mdq.ReceiptDecision = mdq.SolverDecision;
                                if (mdq.SupplyPosition == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                {
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position -= mdq.SolverDecision;
                                    //***********************
                                    mdqtoadjust.AdjustPosition(mdq);
                                    //**********************
                                    mdq.Delivery.Position -= mdq.DeliveryDecision;
                                }
                                else if (mdq.SolverDecision < mdq.SupplyPosition && mdq.SolverDecision != 0)
                                {
                                    //  sd - 5000 , p 8038
                                    double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                    double availablePosition = mdq.SupplyPosition - sdLossFactor;

                                    if (availablePosition >= 0)
                                    {
                                        mdq.ReceiptDecision = sdLossFactor;
                                        mdq.DeliveryDecision = mdq.SolverDecision;
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                    }
                                    else
                                    {
                                        mdq.ReceiptDecision = sdLossFactor - (mdq.SupplyPosition - mdq.SolverDecision);
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.ReceiptDecision = mdq.SupplyPosition;
                                            mdq.DeliveryDecision = mdq.ReceiptDecision * (1 - mdq.LossFactor);
                                        }
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }
                                }
                                else if (mdq.SolverDecision > mdq.SupplyPosition)
                                {
                                    mdq.ReceiptDecision = mdq.SupplyPosition;
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position = 0;
                                    mdqtoadjust.AdjustPosition(mdq);
                                    mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                }
                            }
                            //  Unsolved items from same supply side
                            List<MDQ> unSolvedMdqs = _solverData.MDQs.Where(x => !x.Solved && x.Supply.Id == receipt.Id).ToList();
                            MDQ m = mdqtoadjust.FirstOrDefault(); ;
                            if (m != null && m.StorageType.ToUpper() == "WITHDRAWAL")
                            {
                                //  solved received decision sum
                                double receivedSum = mdqtoadjust.Where(x=> x.Supply.Id == m.Supply.Id).Sum(x => x.ReceiptDecision);
                                foreach (MDQ item in unSolvedMdqs)
                                    item.SupplyPosition -= receivedSum;
                            }
                            else
                            {
                                foreach (MDQ item in unSolvedMdqs)
                                {
                                    //  Solved items for same supply side including hour
                                    double solvedSum = _solverData.MDQs.Where(x => x.Solved && x.Supply.Id == receipt.Id && x.Hour == item.Hour).Sum(x => x.ReceiptDecision);
                                    //  Lesser the supply position value of unsolved mdq
                                    item.SupplyPosition -= solvedSum;
                                }
                            }

                            //  Work in progress Delivery point 
                            int deliveryPoint = mdqtoadjust.FirstOrDefault().Delivery.Id;
                            List<MDQ> pendingMdqsToBeSolved = _solverData.MDQs.Where(x => x.Supply.Id != receipt.Id && x.Delivery.Id == deliveryPoint && x.Solved == false).ToList();
                            foreach (var item in pendingMdqsToBeSolved)
                            {
                                List<MDQ> currentlySolved = _solverData.MDQs.Where(x => x.Delivery.Id == deliveryPoint && x.Supply.Id == receipt.Id && x.Hour == item.Hour && x.Solved == true).ToList();
                                double solvedSum = currentlySolved.Sum(x => x.DeliveryDecision);
                                item.DemandPosition -= solvedSum;
                            }
                        }
                    }
                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static void AdjustPosition(this MDQ[] mdqToAdjust, MDQ curentlySolvedMdq)
        {
            if (curentlySolvedMdq.StorageType.ToUpper() == "WITHDRAWAL")
            {
                //  Add logic to manipulate supply position of mdq collection where hour greater than currently solved mdq
                int hour = curentlySolvedMdq.Hour;
                List<MDQ> unAdjustedMdq = mdqToAdjust.Where(x => x.Hour >= hour).ToList();
                foreach (var item in unAdjustedMdq)
                {
                    item.SupplyPosition -= curentlySolvedMdq.ReceiptDecision;
                }
            }

            mdqToAdjust.Where(x => x.Id == curentlySolvedMdq.Id && x.Hour == curentlySolvedMdq.Hour).FirstOrDefault().Supply.Position -= curentlySolvedMdq.ReceiptDecision;
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Delivery.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }

        public virtual List<Path> Paths { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Contract.cs" />
    <Compile Include="Delivery.cs" />
    <Compile Include="MDQ.cs" />
    <Compile Include="MdqData.cs" />
    <Compile Include="Path.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SolverData.cs" />
    <Compile Include="Supply.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Supply.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Supply
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_withdrawal { get; set; }
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="MDQ.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MDQ
    {
        public int Id { get; set; }
        public Supply Supply { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public virtual bool Solved { get; set; }

        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set
            {
                SolverDecisionExact = value;
                Solved = true;
            }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();

                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }

        private string _storageType;

        public string StorageType
        {
            get { return _storageType; }
            set
            {
                _storageType = value;
                //  Logic to overide supply position based on storage type
                switch (_storageType.ToUpper())
                {
                    case "WITHDRAWAL":
                        this.SupplyPosition = this.Supply.Position;
                        break;
                    default:
                        this.SupplyPosition = this.SupplyPosition;
                        break;
                }
            }
        }


    }
}]]></ProjectItem>
          <ProjectItem
            Name="Path.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual Contract Contract { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="SolverData.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Supply[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank,[term_start],[hour],[granularity], supply_position, demand_position) " +
                                                                                                    "Values (" + q.Supply.Id + ",'" + q.Supply.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Supply.FixedPosition.ToString() + "," + q.Supply.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ",'" + q.TermStart.ToString() + "'," + q.Hour + "," + q.Granularity + "," + q.SupplyPosition + "," + q.DemandPosition + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            if (!string.IsNullOrEmpty(query))
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
AwEABnNHAAAKJRMMfYoAAAQRDCgZAAArfoAAAAQlLRcmfnIAAAT+BvgAAAZzTAAACiWAgAAABCgj
AAArKAsAACsoDAAAK36BAAAEJS0XJn5yAAAE/gb5AAAGczQAAAolgIEAAAQoDQAAK36CAAAEJS0X
Jn5yAAAE/gb6AAAGczYAAAolgIIAAAQoDgAAKyglAAArEw0WEwk4rwgAAHMJAQAGEw4RDhEGfZQA
AAQRDhENEQmafZAAAAQRDhEOe5AAAARvkAAABn2RAAAEBm9NAAAKBm9OAAAKEw8RBxEO/gYKAQAG
c0cAAAooGQAAKygmAAArKCcAACsTEBEQKCgAACs5QAgAABEQExUWExY4GAIAABEVERaaExcRFyhP
AAAKcncDAHAoUAAAChMYEhj+FhwAAAFvIgAACnJ7AwBwcrkAAHBvUQAACm9SAAAKKFMAAApzVAAA
Cm85AAAGEQ8RF284AAAGb1UAAAoRD3J/AwBwERdvOAAABm9WAAAKKFMAAAoRF284AAAGERdvMAAA
BihXAAAKKFgAAAoRF284AAAGERdvLAAABm/PAAAGKFcAAAooWAAACihZAAAKERdvOAAABhEXby4A
AAZvHQAABhEXb0QAAAZaKFcAAAooWAAACihZAAAKERdvOAAABhEOe5QAAAR7jQAABHuIAAAEb88A
AAYoVwAACihYAAAKKFkAAAoRF284AAAGERdvLAAABm/JAAAGbChXAAAKKFgAAAooWQAAChEXbzgA
AAYRF28sAAAGb8sAAAZsKFcAAAooWgAACihZAAAKERdvOAAABhEXby4AAAZvIQAABmwoVwAACihY
AAAKKFkAAAoRF284AAAGERdvLgAABm8jAAAGbChXAAAKKFoAAAooWQAAChEXbzgAAAYRF28uAAAG
byUAAAZsKFcAAAooWAAACihZAAAKERdvOAAABhEXbywAAAZvzQAABmwoVwAACihYAAAKKFkAAAoR
F284AAAGERdvTgAABihXAAAKKFgAAAooWQAAChEXbzgAAAYRF29QAAAGKFcAAAooWAAACihZAAAK
b1sAAAomERYXWBMWERYRFY5pP939//8REH6DAAAEJS0XJn5yAAAE/gb7AAAGc1wAAAolgIMAAAQo
KQAAKygqAAArExERD3KDAwBwEQ57lAAABHuNAAAEe4gAAARvwQAABhMWEhYoXQAAChEOe5AAAARv
hgAABhMWEhYoXQAACigbAAAKERETGREZKF4AAAoRDnuUAAAEe40AAAR7iAAABG/PAAAGKFcAAAoo
WAAACm9bAAAKJhEPcosDAHARDnuUAAAEe40AAAR7iAAABG/BAAAGExYSFihdAAAKEQ57kAAABG+G
AAAGExYSFihdAAAKKBsAAAoRERMZERkoXgAAChEOe5AAAARvjgAABm8dAAAGKFcAAAooWAAACm9b
AAAKJhEPcpMDAHAWERETGREZKF4AAApvXwAACiYCewEAAAQRD2+sAAAGc2AAAAoTEgYXjUEAAAEl
FhESom9hAAAKJhEPb2IAAAooKwAAKxMTERMsGQJ7AQAABCVvlwAABhETKAsAAAZYb5gAAAYREBMV
FhMWOAwCAAARFREWmhMaERoXb1MAAAYRGhEab1YAAAZvPwAABhEab04AAAYRGm9WAAAGM1oRGm9W
AAAGIwAAAAAAAAAALkgRGhEabz4AAAYjAAAAAAAA8D8RGm8yAAAGWVpvQQAABhEQERooDAAABhEa
by4AAAYlbx0AAAYRGm9AAAAGWW8eAAAGOH8BAAARGm9WAAAGERpvTgAABkEDAQAAERpvVgAABiMA
AAAAAAAAADvuAAAAERpvVgAABiMAAAAAAADwPxEabzIAAAZZWxMbERpvTgAABhEbWSMAAAAAAAAA
ADdHERoRG28/AAAGERoRGm9WAAAGb0EAAAYREBEaKAwAAAYRGm8uAAAGJW8dAAAGERpvQAAABhEa
b0YAAAZaWW8eAAAGOOAAAAARGhEbERpvTgAABhEab1YAAAZZWW8/AAAGERpvTgAABhEbNC4RGhEa
b04AAAZvPwAABhEaERpvPgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAA
BiVvHQAABhEab0AAAAZZbx4AAAYraREab1YAAAYRGm9OAAAGNlkRGhEab04AAAZvPwAABhEaERpv
PgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAABiVvHQAABhEab0AAAAYR
Gm9GAAAGWllvHgAABhEWF1gTFhEWERWOaT/p/f//AnsBAAAEb50AAAYRDnuUAAAEe40AAAR7iwAA
BCUtLiYRDnuUAAAEe40AAAQRDnuUAAAEe40AAAT+BgQBAAZzRwAACiUTDH2LAAAEEQwoGQAAKygV
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
djQuMC4zMDMxOQAAAAAFAGwAAAAoLgAAI34AAJQuAADcIwAAI1N0cmluZ3MAAAAAcFIAAMgHAAAj
VVMAOFoAABAAAAAjR1VJRAAAAEhaAADACQAAI0Jsb2IAAAAAAAAAAgAAAVc9ogkJDwAAAPoBMwAW
AAABAAAAUAAAACAAAACcAAAAFwEAAJoAAACQAAAAAwAAADUBAAABAAAACgAAAAkAAABfAAAAvAAA
AB4AAAABAAAABwAAAAEAAAARAAAAAgAAAC8AAAAAAD0YAQAAAAAACgAWFXQeBgB9FXQeBgAMFnQe
BgCeFOkdEwDoHgAABgDLFCAaBgBIFSAaBgApFSAaBgDzFSAaBgCdFSAaBgC2FSAaBgDiFCAaBgD9
FIkWDgDRFSAXDgCXEyAXBgB4G3MYEgCuIeUSFgB1Gg4JFgAHHA4JBgBxAi0JUwDUHAAABgBmA3MY
GgCcIjEeGgA3GDEeGgBnGTEeGgByFjEeGgBwFzEeBgAeCnMYGgB6GDEeBgCDGHMYBgBYFHQeBgBM
IXMYCgBtA/IbBgBOAi0JFgAKHKsbFgCbEdYIBgDFHAggFgC1ItYIBgDdEXMYBgDcEnMYFgCbGtEh
BgCBFOkdBgBGHJQeBgDHG8MZHgAiFCcYHgCyFCcYHgDOE64ZBgBzFFUeBgBlFVUeBgBIFFUeDgAV
GCAXEgAfIOUSEgBWHOUSDgCYHCAXBgClFnMYEgBIH+USEgDJEeUSFgAcEQ4JCgDSEfIbCgBcAvIb
GgCfGDEeGgAqIjEeBgDWAnMYGgA4ETEeGgB5FjEeGgCiGzEeBgBQE3MYBgDTGyAaBgDfHHMYFgBL
GtYIFgCzE9YIBgDzEXMYBgBtInMYBgA4BHMYFgAfEasbFgAJE9YIFgAyGg4JFgCsHA4JBgDsEXMY
BgD0IiAaAAAAACMIAAAAAAEAAQABABAAlBibCD0AAQABAAEAEAAnGpsIgQAEAAcAgQEQAOUfmwiB
AAQACQCBARAA+x/8HYEABAANAAEAEAABIU4HgQAEAA4AAQAQADojTgeBAAgAFwABABAAVAhOB4EA
EQAqAAEAEADvCE4HgQAnAFsAAQAQAMMWTgeBADwAhgABABAA9whOB4EAQgCTAAEAEAAMI04HgQBW
AMEAAAAQAJseFR+BAF4A0gAAARAAUh8VH70AYADWAKEQAAABAHAcAABhANkAAwEAAH8gAAB5AGEA
2wADARAA1gAAAIEAZADbAAMBEADSAQAAgQBlANwAAwEQABIDAACBAGYA3wADARAA7wMAAIEAaADi
AAMBEACjBAAAgQBsAOUAAwEQAIQFAACBAG8A5wADIRAAKQkAAIEAcgDpAAMBEAAVAQAAgQCIAAAB
AwEQABECAACBAIwABQEDARAAUQMAAIEAjgAHAQMBEAAEBAAAgQCQAAkBAwEQAOIEAACBAJUADQED
ARAAwwUAAIEAlwAPAQMBEADBAAAAgQCZABEBAwEQAL0BAACBAJoAEwEDIRAAKQkAAIEAmwAVASEA
AgkpBQEADQpFAAEAzxJFAAEAhQotBQEAmw5FAAEAQQwtBQEAKwwwBQEAhQotBQEAmw5FAAEAGw40
BQEAAQ40BQEAQQwtBQEAog03BQEAgw03BQEASBA3BQEApA86BQEAhQotBQEApRBCBQEAvRBGBQEA
AQ40BQEAuA40BQEAKwwwBQEALhBKBQEA6wxOBQEAXQstBQEAJg0tBQEABQ00BQEAQw00BQEA+A40
BQEA1A40BQEAHA80BQEAihBSBQEAQg8tBQEA1xAtBQEAew40BQEAOg40BQEAJgtXBQEANRNFAAEA
sQotBQEAZQ1FAAEA0QotBQEAlwtFAAEAuA40BQEAmQotBQEAfQtFAAEA9BAtBQEA7wotBQEA0QtF
AAEAVwwtBQEAVwo0BQEA+A40BQEA1A40BQEAHA80BQEAihBSBQEAQg8tBQEA1xAtBQEAew40BQEA
Og40BQEA7wtFAAEAhQotBQEAmw5FAAEA9BAtBQEACwstBQEAvRBGBQEALhBKBQEAIwotBQEAbAot
BQEAdQwtBQEAuw9aBQEA1g8tBQEAWA9fBQEAbg9nBQEAFBBsBQEAiA9xBQEApA92BQEA+Q97BQEA
4g2ABQEA1AyFBQEAwQ2JBQEADAxFAAEAPgtFAAEAPApFAAEAtwtFAAEAZxBFAAEAWg5FAAEAhQot
BQEAmw5FAAEAGw40BQEAQQwtBQEAtAw3BQEAlAw3BQEASBA3BQEA/hs0BREAiBiNBREAhxOSBREA
ZxGXBQYGkwgtBVaAOiCbBVaAZxObBQYAvSItBQYAQyNGBQYAyBYwBQYAeAKfBQYASSJCBQYAeQOj
BQYAyQanBQYAnAenBQYAQyNGBQYAPwSwBQYAWAC0BQYAyBYwBQYACiFKBQYACgW+BTYA1gfCBRYA
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
/AeAAH1IAAAAAIMA7wcDCIEAhUgAAAAAgwA2AAkIggCNSAAAAACDAFwBDwiDAJVIAAAAAIMAkgLR
B4QAoEgAAAAAgwAkBQ8IhQAzSAAAAACDAPIF0QeGADtIAAAAAIMAhwbXB4cAQEkAAAAAgwB+ABYI
iABISQAAAACDAIEEHQiJAEhJAAAAAIMAHgYdCIoAUEkAAAAAgwAsBx0IiwBASQAAAACDADADFgiM
AM82AAAAAIYY6RwBAI0AWEkAAAAAgwAZBCMIjQBySQAAAACDAJEDxAeOAFhJAAAAAIMAVwQjCI8A
h0kAAAAAgwCGASMIkADPNgAAAACGGOkcAQCRAKtJAAAAAIMA4wYjCJEAzzYAAAAAhhjpHAEAkgDA
SQAAAACDAAIHIwiSAM82AAAAAIYY6RwBAJMAJEoAAAAAgwC2ByMIkwC6SgAAAACDALEDIwiUANxK
AAAAAIMAtAIjCJUAzzYAAAAAhhjpHAEAlgAsSwAAAACDAEYFIwiWAM82AAAAAIYY6RwBAJcAgEsA
AAAAgwCpBiMIlwDPNgAAAACGGOkcAQCYAOdLAAAAAIMAOQIjCJgAzzYAAAAAhhjpHAEAmQARTAAA
AACDAD0BIwiZACRMAAAAAJEYmx2sB5oAzzYAAAAAhhjpHAEAmgAwTAAAAACDAKoAIwiaAAAAAQCs
FgAAAQC+GwAAAgDCEgAAAwBKFgAABAC9IgAAAQB8IgAAAgAEHAAAAQB8IgAAAgAEHAAAAQBYFgAA
AQCHIgAAAgDgGwAAAQCiHQAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBY
FgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAA
AQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBY
FgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAA
AQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBY
FgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAA
AQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBY
FgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAA
AQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFhAQAQA6
GQAAAQAjIwAAAQBYFgAAAQBYFgAAAQDzIQAAAgD8GwAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAA
AQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAAAQBYFgAgAAAAAAAAAQDBIgAAAQDBIgAAAQDBIgAAAQDB
IgAAAQDBIgAAAQDBIgAAAQDaIwAAAQDaIwAAAQDBIgAAAQC0FgAAAQCRCAAAAQDBIgAAAQDBIgAA
AQDBIgAAAQDYIwAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDB
IgAAAQC0FgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAA
AQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDBIgAAAQDB
IgAAAQDBIgkA6RwBABEA6RwFABkA6RwBACEA6RwKADEA6RwQADkA6RwQAEEA6RwQAEkA6RwQAFEA
6RwQAFkA6RwQAGEA6RwQAGkA6RwQAHEA6RwBAPkA6RwBAFEB6RwBAHEB6RwVAIEB6RwQAIkB6RwB
AJEB6RwFAHkAWyAhAJkBGyAnAKEBZRgtAJkBvCEFAJkBoSA0AIEAdxE6AIEASRE6ALkB6SA+ALkB
sSNFALEBuxxIAKkBQyFYAJkBRB9cAMEBZRhiAMkBKhZYAAEBoxY6ALkB6SBpALkB6SCoANEB6Ryu
ANEBNBy1AAwA6RwBANkB6CLGANkBQyLUABkB5hMBABQA6RwBABwA6RwBACQA6RwBACwA6RwHAdkB
VRMNATQA6RwHAdkBUyEvAdkBWiFQAdkBdSJnATwA6RwHAdkByiKAAUQA6RwHAUwA0RzKAVQA5yHa
AVwA6RwHAdkB0iLnAWQA6RwHAdkBnyEXAlQAkyIpAjkB7BMBAGwA6RwHAUwA8wk1AnQA6RwHASQA
gxFQArkAqiK5AnwA6RwHAYQA6RwHAdkBwyLUAowA6RwHAZQA6RwHAZwA6RwHAaQA6RwHAawA6RwH
AbQA6RwHAbkAChgBALkA/hdKA+kBXhZPA+EAGwpVA7kBQRFaA7kBaBw6ALkB6SBgA8kA6RxmA8EA
wBhuA8kAPRI6AOkAYyF0A+kAixd6A+kADhF6A+kAdRd6A8EA+yGDA7wA6RwHAfkBoxY6AMEAfxih
A8EASRepA9EA6RwBALkAgxa0A8EAbx++A7kBTCPNA8QA6RwHAdkBfxjbAyQA0RzKAcwA5yHaAcwA
kyIpAnkA6RwBAAEBTRP1AxkCziP7AyECQRYCBAEB6RwBANQA6RwBABkCjSAzBCkCWBE6BBkBjBFB
BCEB4CBHBDkC0RxNBCkB5yFYADEB2iJTBBkBZRhYBCkBkyIpAtQA8wk1AhkB7gkpAtwA6RwBANQA
0RzKAeQA5yHaARkCBRJtBEkCQhN2BNwA8wk1AuQAkyIpAkkC1AKCBLkBWCPNA8kA6RGYBPQA6RwH
AdkBGBSsBLkBqSPMBFkCBRPRBNEBKyDYBGkCNBbeBFkCEyPmBHkCoxY6AEEBoxY6ABkC8CLyBFkB
6Rz4BHkB6RwBANkBgSIXAgIAgQElBQgAiAEbBQgAjAEgBS4ACwAgBS4AEwCzCC4AGwC8CC4AIwDb
CC4AKwDkCC4AMwANCS4AOwANCS4AQwATCS4ASwDkCC4AUwAiCS4AWwANCS4AYwBCCUMAawAgBYEA
cwAgBYMACwAgBaEAcwAgBaMACwAgBcEAcwAgBeEAcwAgBQEBcwAgBSABCwAgBSEBcwAgBUABCwAg
BUEBcwAgBWABCwAgBWEBcwAgBYABCwAgBYEBcwAgBaABCwAgBaEBcwAgBaMBewAgBcABcwAgBcEB
cwAgBeABcwAgBeEBcwAgBeMBcwAgBeMBiwCTCeMBkwAgBQACcwAgBQECcwAgBSACcwAgBSECcwAg
BSMCcwAgBUACcwAgBUECcwAgBUMCcwAgBWACcwAgBWECcwAgBWMCcwAgBYACcwAgBYECcwAgBYMC
cwAgBaACcwAgBaECcwAgBaMCcwAgBcECcwAgBcMCcwAgBeACcwAgBeECcwAgBeMCcwAgBQADcwAg
BQEDcwAgBQMDcwAgBSADcwAgBSEDcwAgBSMDcwAgBUADcwAgBUEDcwAgBUMDcwAgBWADcwAgBWED
cwAgBWMDcwAgBYADcwAgBYEDcwAgBYMDcwAgBaADcwAgBaEDcwAgBaMDcwAgBcADcwAgBcEDcwAg
BcMDcwAgBeADcwAgBeEDcwAgBeMDcwAgBQAEcwAgBQEEcwAgBQMEcwAgBSAEcwAgBSEEcwAgBUAE
cwAgBUEEcwAgBWAEcwAgBWEEcwAgBYAEcwAgBYEEcwAgBaAEcwAgBaEEcwAgBcAEcwAgBeAEcwAg
BeEEcwAgBQAFcwAgBQEFcwAgBSEFcwAgBUAFcwAgBUEFcwAgBWAFcwAgBWEFcwAgBYAFcwAgBYEF
cwAgBaAFcwAgBaEFcwAgBcAFcwAgBcEFcwAgBeAFcwAgBeEFcwAgBQAGcwAgBQEGcwAgBSAGcwAg
BSEGcwAgBUAGcwAgBUEGcwAgBWAGcwAgBWEGcwAgBYAGcwAgBYEGcwAgBaAGcwAgBaEGcwAgBcAG
cwAgBcEGcwAgBeAGcwAgBeEGcwAgBQAHcwAgBQEHcwAgBSAHcwAgBSEHcwAgBUAHcwAgBUEHcwAg
BWAHcwAgBWEHcwAgBYAHcwAgBYEHcwAgBaAHcwAgBaEHcwAgBcAHcwAgBcEHcwAgBeAHcwAgBeEH
cwAgBQAIcwAgBQEIcwAgBSAIcwAgBSEIcwAgBUAIcwAgBUEIcwAgBWAIcwAgBWEIcwAgBYAIcwAg
BYEIcwAgBaAIcwAgBaEIcwAgBcAIcwAgBcEIcwAgBeAIcwAgBeEIcwAgBQAJcwAgBQEJcwAgBSAJ
cwAgBSEJcwAgBUAJcwAgBUEJcwAgBWAJcwAgBWEJcwAgBYAJcwAgBYEJcwAgBaAJcwAgBaEJcwAg
BcAJcwAgBcEJcwAgBeAJcwAgBeEJcwAgBQAKcwAgBQEKcwAgBSAKcwAgBSEKcwAgBUAKcwAgBUEK
cwAgBWAKcwAgBWEKcwAgBYEKcwAgBaEKcwAgBcEKcwAgBeEKcwAgBQELcwAgBSELcwAgBUELcwAg
BWALcwAgBWELcwAgBYALcwAgBYELcwAgBaALcwAgBakLgwDbCMALcwAgBckLgwDbCOALcwAgBQAM
cwAgBQEMcwAgBSAMcwAgBUAMcwAgBWAMcwAgBYAMcwAgBaAMcwAgBcAMcwAgBeAMcwAgBQANcwAg
BSANcwAgBUANcwAgBWANcwAgBYANcwAgBaANcwAgBcANcwAgBeANcwAgBQAOcwAgBSAOcwAgBUAO
cwAgBWAOcwAgBYAOcwAgBaAOcwAgBcAOcwAgBeAOcwAgBQAPcwAgBSAPcwAgBUAPcwAgBWAPcwAg
BYAPcwAgBaAPcwAgBcAPcwAgBeAPcwAgBQAQcwAgBSAQcwAgBUAQcwAgBWAQcwAgBYAQcwAgBcAQ
cwAgBeAQcwAgBQARcwAgBSARcwAgBUARcwAgBWARcwAgBYARcwAgBaARcwAgBcARcwAgBeARcwAg
BQAScwAgBSAScwAgBWAScwAgBYAScwAgBaAScwAgBcAScwAgBeAScwAgBQATcwAgBSATcwAgBUAT
cwAgBWATcwAgBYATcwAgBaATcwAgBcATcwAgBeATcwAgBQAUcwAgBSAUcwAgBUAUcwAgBWAUcwAg
BYAUcwAgBaAUcwAgBcAUcwAgBeAUcwAgBQAVcwAgBSAVcwAgBUAVcwAgBWAVcwAgBYAVcwAgBaAV
cwAgBcAVcwAgBeAVcwAgBQAWcwAgBSAWcwAgBUAWcwAgBWAWcwAgBYAWcwAgBaAWcwAgBcAWcwAg
BWAXcwAgBYAXcwAgBaAXcwAgBcAXcwAgBQAYcwAgBSAYcwAgBUAYcwAgBWAYcwAgBYAYcwAgBaAY
cwAgBcAYcwAgBeAYcwAgBQAZcwAgBSAZcwAgBUAZcwAgBWAZcwAgBYAZcwAgBaAZcwAgBcAZcwAg
BUAbmwCKCd8AJwUcAFEAcQBbAgoEfgSHBJQEngTqBAYAAQAHAAUACAAOAAkAJgAKADsACwBBAAwA
VQANAF0ADgBfAAAA6wkpCAAAlhstCAAA/BYpCAAAwxYxCAAA6wkpCAAAlhstCAAA5xo2CAAAbxs2
CAAA/BYpCAAAEho6CAAA7hk6CAAAhSE6CAAAaR8+CAAA6wkpCAAADCNHCAAAOiNMCAAAbxs2CAAA
Ah02CAAAwxYxCAAAASFRCAAAZxlWCAAALhIpCAAALhkpCAAAChk2CAAAXxk2CAAAVh02CAAAKB02
CAAAhh02CAAAYyJbCAAAsx0pCAAAeiMpCAAAaRs2CAAADBs2CAAABgphCAAALyE2CAAA4xg2CAAA
KRMtCAAAgwkpCAAAhRktCAAApwkpCAAAdxItCAAAAh02CAAAZQkpCAAAVxItCAAAlyMpCAAAxwkp
CAAAtRItCAAA9BYpCAAAVAg2CAAAVh02CAAAKB02CAAAhh02CAAAYyJbCAAAsx0pCAAAeiMpCAAA
aRs2CAAADBs2CAAAKRMtCAAA6wkpCAAAlhstCAAAlyMpCAAA5AkpCAAAOiNMCAAAASFRCAAA7AIp
CAAAaAgpCAAAZxcpCAAA2x9lCAAAvR8pCAAAyh1rCAAA4B10CAAAvSB6CAAACh+ACAAAaR+GCAAA
dSCMCAAAmxqSCAAANxiYCAAAdRqdCAAAChQtCAAAuxEtCAAAPggtCAAAlxItCAAAIyItCAAAMxst
CAAA6wkpCAAAlhstCAAA5xo2CAAA/BYpCAAA2xc6CAAAtRc6CAAAhSE6CAAAbxs2CAAARhyiCAAA
jxOoCAAApiGuCAIADgADAAEADwADAAIAEAAFAAEAEQAFAAIAEgAHAAEAEwAHAAIAFAAJAAEAFQAJ
AAIAFwALAAEAGAALAAIAGQANAAEAGgANAAIAGwAPAAEAHAAPAAIAHQARAAEAHgARAAIAHwATAAEA
IAATAAIAIQAVAAEAIgAVAAIAIwAXAAEAJAAXAAIAJQAZAAEAJgAZAAIAJwAbAAEAKAAbAAIAKgAd
AAEAKwAdAAIALAAfAAEALQAfAAIALgAhAAEALwAhAAIAMAAjAAEAMQAjAAIAMgAlAAEAMwAlAAIA
NAAnAAEANQAnAAIANgApAAEANwApAAIAOAArAAEAOQArAAIAOgAtAAEAOwAtAAIAPAAvAAEAPQAv
AAIAPgAxAAEAPwAxAAIAQAAzAAEAQQAzAAIAQgA1AAEAQwA1AAIARAA3AAEARQA3AAIARgA5AAEA
RwA5AAIASAA7AAEASQA7AAIASgA9AAEASwA9AAIATAA/AAEATQA/AAIATgBBAAEATwBBAAIAUABD
AAEAUQBDAAIAUgBFAAEAUwBFAAIAVABHAAEAVQBHAAIAVgBJAAEAVwBJAAIAWABLAAEAWQBLAAIA
WwBNAAEAXABNAAIAXQBPAAEAXgBPAAIAXwBRAAEAYABRAAIAYQBTAAEAYgBTAAIAYwBVAAEAZABV
AAIAZQBXAAEAZgBXAAIAZwBZAAEAaABZAAIAaQBbAAEAagBbAAIAawBdAAEAbABdAAIAbQBfAAEA
bgBfAAIAbwBhAAEAcABhAAIAcQBjAAEAcgBjAAIAcwBlAAEAdABlAAIAdQBnAAEAdgBnAAIAdwBp
AAEAeABpAAIAeQBrAAEAegBrAAIAewBtAAEAfABtAAIAfQBvAAEAfgBvAAIAfwBxAAEAgABxAAIA
gQBzAAEAggBzAAIAgwB1AAEAhAB1AAIAhgB3AAEAhwB3AAIAiAB5AAEAiQB5AAIAigB7AAEAiwB7
AAIAjAB9AAEAjQB9AAIAjgB/AAEAjwB/AAIAkACBAAEAkQCBAAIAkwCDAAEAlACDAAIAlQCFAAEA
lgCFAAIAlwCHAAEAmACHAAIAmQCJAAEAmgCJAAIAmwCLAAEAnACLAAIAnQCNAAEAngCNAAIAnwCP
AAEAoACPAAIAoQCRAAEAogCRAAIAowCTAAEApACTAAIApQCVAAEApgCVAAIApwCXAAEAqACXAAIA
qQCZAAEAqgCZAAIAqwCbAAEArACbAAIArQCdAAEArgCdAAIArwCfAAEAsACfAAIAsQChAAEAsgCh
AAIAswCjAAEAtACjAAIAtQClAAEAtgClAAIAuwCnAAEAvACnAAIAvQCpAAEAvgCpAAIAwQCrAAEA
wgCrAAIAwwCtAAEAxACtAAIAxQCvAAEAxgCvAAIAxwCxAAEAyACxAAIAyQCzAAEAygCzAAIAywC1
AAEAzAC1AAIAzQC3AAEAzgC3AAIAzwC5AAEA0AC5AAIA0wC7AAIA1AC9AAEA1QC9AAIA1gC/ALoA
4ADsAPgA/wAmAXgBpwHDAdMB3wEHAi0COwK+AswC9AL8Ag4DHgMsAzoDjAPTA+4DLQRdBGQEagSi
BASAAAABAAAAfx0ebAAAAAAAAE4HAAAEAAAAAAAAAAAAAAAABSAJAAAAAAQAAAAAAAAAAAAAAAAF
WxMAAAAADQAAAAAAAAAAAAAACQUBFwAAAAANAAAAAAAAAAAAAAAJBXAIAAAAAAQAAAAAAAAAAAAA
AAAF1ggAAAAAAwAAAAIAiSoAAAAAEgWSGQAAAAAEAAAAAAAAAAAAAAAABXMYAAAAAAAAAAABAAAA
pR4AABAAAgARAAIAEgACABMAAgAUAAIAFQACABYAAgAXAAIAGAACABkAAgAaAAIAGwACABwAAgAd
AAIAHgAEAB8ABAAgAAsAAAAAABMAjwgAAAAAFQCPCBQAwQBRAMEAUwDBABQA5wBRAOcAUwDnABIA
8wBRAPMAXwDzAGMASQFlAGIBZwBiAWsAoQFjALYBdQABAmMAEAJ5ACQCXwBiAVMAYgFjAEQCZwBL
AnUAxgKNAO4CZQDBAF8ASwJ1AAQDjQAEA2MABANlAAoDUQAKA2MAFwNlAOcAdQAmA40ANANjAEMD
dQChAVEAYgFlAEsCUQBLAlMASwJjAJUDUQCcA3kAyAN5AEsCywBLAgsBxgQhAWIBAAAAAABJRFRT
Q29ubmVjdGlvbk1hbmFnZXJEYXRhYmFzZVBhcmFtZXRlcnMxMDAAPD45X183XzEwADxTb2x2ZXJD
YWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xMAA8PjlfXzEwADxEdW1wTTJNcURhdGE+Yl9fMTAAPD45
X183XzIwADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18yMAA8PjlfXzcyXzAAPFNhdmVE
ZWNpc2lvbnM+Yl9fNzJfMAA8PmNfX0Rpc3BsYXlDbGFzczNfMAA8PmNfX0Rpc3BsYXlDbGFzczZf
MAA8PjlfXzdfMAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMAA8PmNfX0Rpc3BsYXlD
bGFzczdfMAA8RHVtcE0yTXFEYXRhPmJfXzAAPEFkanVzdFBvc2l0aW9uPmJfXzAAPD45X183XzEx
ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xMQA8PjlfXzIxADxTb2x2ZXJDYWxjdWxh
dGlvblByb2Nlc3M+Yl9fMjEAPFNhdmVEZWNpc2lvbnM+Yl9fNzJfMQA8PmNfX0Rpc3BsYXlDbGFz
czNfMQA8PmNfX0Rpc3BsYXlDbGFzczZfMQA8PjlfXzdfMQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9j
ZXNzPmJfXzdfMQA8PmNfX0Rpc3BsYXlDbGFzczdfMQA8RHVtcE0yTXFEYXRhPmJfXzEAPEFkanVz
dFBvc2l0aW9uPmJfXzEASUVudW1lcmFibGVgMQBJT3JkZXJlZEVudW1lcmFibGVgMQBMaXN0YDEA
Q1MkPD44X19sb2NhbHMxADw+OV9fN18xMgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdf
MTIAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18yMgBUb0ludDMyAGdldF9Ub3RhbE0yAHNl
dF9Ub3RhbE0yADw+OV9fNl8yADxEdW1wTTJNcURhdGE+Yl9fNl8yADw+Y19fRGlzcGxheUNsYXNz
Nl8yADw+OV9fN18yADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18yADw+Y19fRGlzcGxh
eUNsYXNzN18yAEZ1bmNgMgBJR3JvdXBpbmdgMgBDUyQ8PjhfX2xvY2FsczIAPD45X18xMwA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzEzADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9f
MjMAPD45X182XzMAPER1bXBNMk1xRGF0YT5iX182XzMAPD5jX19EaXNwbGF5Q2xhc3M2XzMAPD5j
X19EaXNwbGF5Q2xhc3M3XzMAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18zAEZ1bmNgMwBD
UyQ8PjhfX2xvY2FsczMAPD45X18xNAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzE0ADw+
OV9fN18yNAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMjQAPD5jX19EaXNwbGF5Q2xh
c3M2XzQAPD45X183XzQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzQAPD5jX19EaXNw
bGF5Q2xhc3M3XzQAPER1bXBNMk1xRGF0YT5iX180AENTJDw+OF9fbG9jYWxzNAA8PjlfXzdfMTUA
PFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzE1ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nl
c3M+Yl9fMjUAPD45X182XzUAPER1bXBNMk1xRGF0YT5iX182XzUAPD5jX19EaXNwbGF5Q2xhc3M2
XzUAPD45X183XzUAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzUAPD5jX19EaXNwbGF5
Q2xhc3M3XzUAQ1MkPD44X19sb2NhbHM1ADw+OV9fN18xNgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9j
ZXNzPmJfXzdfMTYAPD45X183XzI2ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18yNgA8
PjlfXzdfNgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfNgA8RHVtcE0yTXFEYXRhPmJf
XzYAPD45X183XzE3ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xNwA8U29sdmVyQ2Fs
Y3VsYXRpb25Qcm9jZXNzPmJfXzI3ADw+OV9fNwA8RHVtcE0yTXFEYXRhPmJfXzcAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX183ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMTgAPD45
X183XzI4ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18yOABTVF9mMzkyMzNmYWMxNmU0
MjZkOTkxZDkzMmY5ZWY3ZDg1OAA8PjlfXzdfOAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJf
XzdfOAA8PjlfXzgAPER1bXBNMk1xRGF0YT5iX184ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+
Yl9fMTkAPD45AF9WdGJsR2FwMV85ADw+OV9fN185ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+
Yl9fN185ADxEdW1wTTJNcURhdGE+Yl9fOQA8TW9kdWxlPgBnZXRfUHJvY2Vzc0lEAHNldF9Qcm9j
ZXNzSUQAZ2V0X01EUQBzZXRfTURRAGdldF9Ub3RhbE1RAHNldF9Ub3RhbE1RAE1pY3Jvc29mdC5T
cWxTZXJ2ZXIuTWFuYWdlZERUUwBUAFgAdmFsdWVfXwBTVF81ODViYTJlOTJiZGQ0MmRlYjgxZjdj
MGNlODQwMmZhYQBHZXRDb25uZWN0aW9uRm9yU2NoZW1hAFN5c3RlbS5EYXRhAER1bXBNMk1xRGF0
YQBNZHFEYXRhAFNvbHZlckRhdGEAX3NvbHZlckRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3Js
aWIAPD5jAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAGdldF9JZABzZXRfSWQAZ2V0X1BhdGhJ
ZABzZXRfUGF0aElkAGdldF9Gcm9tTG9jYXRpb25JZABzZXRfRnJvbUxvY2F0aW9uSWQAZ2V0X1Rv
TG9jYXRpb25JZABzZXRfVG9Mb2NhdGlvbklkAGdldF9Db250cmFjdElkAHNldF9Db250cmFjdElk
AGdldF9SZWNlaXB0SWQAc2V0X1JlY2VpcHRJZABSZWFkAEFkZABnZXRfU29sdmVkAHNldF9Tb2x2
ZWQAUFNfcHJvY2Vzc19pZABOZXdHdWlkADxUb3RhbE0yPmtfX0JhY2tpbmdGaWVsZAA8UHJvY2Vz
c0lEPmtfX0JhY2tpbmdGaWVsZAA8TURRPmtfX0JhY2tpbmdGaWVsZAA8VG90YWxNUT5rX19CYWNr
aW5nRmllbGQAPElkPmtfX0JhY2tpbmdGaWVsZAA8UGF0aElkPmtfX0JhY2tpbmdGaWVsZAA8RnJv
bUxvY2F0aW9uSWQ+a19fQmFja2luZ0ZpZWxkADxUb0xvY2F0aW9uSWQ+a19fQmFja2luZ0ZpZWxk
ADxDb250cmFjdElkPmtfX0JhY2tpbmdGaWVsZAA8UmVjZWlwdElkPmtfX0JhY2tpbmdGaWVsZAA8
U29sdmVkPmtfX0JhY2tpbmdGaWVsZAA8RGVjaXNpb25UYWJsZT5rX19CYWNraW5nRmllbGQAPEZy
ZWVUb1NjaGVkdWxlPmtfX0JhY2tpbmdGaWVsZAA8UGF0aE5hbWU+a19fQmFja2luZ0ZpZWxkADxU
b0xvY2F0aW9uTmFtZT5rX19CYWNraW5nRmllbGQAPFVzZXJOYW1lPmtfX0JhY2tpbmdGaWVsZAA8
Q29udHJhY3ROYW1lPmtfX0JhY2tpbmdGaWVsZAA8U3RvcmFnZVR5cGU+a19fQmFja2luZ0ZpZWxk
ADxUYWJsZVRvVXBkYXRlPmtfX0JhY2tpbmdGaWVsZAA8UGF0aD5rX19CYWNraW5nRmllbGQAPFJh
bms+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdFJhbms+a19fQmFja2luZ0ZpZWxkADxPYmplY3Rp
dmVHb2FsPmtfX0JhY2tpbmdGaWVsZAA8bWluX3dpdGhkcmF3YWw+a19fQmFja2luZ0ZpZWxkADxt
YXhfd2l0aGRyYXdhbD5rX19CYWNraW5nRmllbGQAPE1vZGVsPmtfX0JhY2tpbmdGaWVsZAA8RGVj
aXNpb24+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxO
ZXdEZWNpc2lvbj5rX19CYWNraW5nRmllbGQAPERlbGl2ZXJ5RGVjaXNpb24+a19fQmFja2luZ0Zp
ZWxkADxGcm9tTG9jYXRpb24+a19fQmFja2luZ0ZpZWxkADxtaW5faW5qZWN0aW9uPmtfX0JhY2tp
bmdGaWVsZAA8bWF4X2luamVjdGlvbj5rX19CYWNraW5nRmllbGQAPE9sZURiQ29ubmVjdGlvbj5r
X19CYWNraW5nRmllbGQAPFNxbENvbm5lY3Rpb24+a19fQmFja2luZ0ZpZWxkADxQb3NpdGlvbj5r
X19CYWNraW5nRmllbGQAPEZpeGVkUG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxEZW1hbmRQb3Np
dGlvbj5rX19CYWNraW5nRmllbGQAPFN0b3JhZ2VQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPFN1
cHBseVBvc2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVzY3JpcHRpb24+a19fQmFja2luZ0ZpZWxk
ADxMb3NzRmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8RGVtYW5kQWRqdXN0RmFjdG9yPmtfX0JhY2tp
bmdGaWVsZAA8U3VwcGx5QWRqdXN0RmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcnlBZGp1
c3RGYWN0b3I+a19fQmFja2luZ0ZpZWxkADxIb3VyPmtfX0JhY2tpbmdGaWVsZAA8TURRcz5rX19C
YWNraW5nRmllbGQAPE1EUURhdGFzPmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcmllcz5rX19CYWNr
aW5nRmllbGQAPFBhdGhzPmtfX0JhY2tpbmdGaWVsZAA8RGVjaXNpb25zPmtfX0JhY2tpbmdGaWVs
ZAA8TnVtYmVyT2ZEZWNpc2lvbnM+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdHM+a19fQmFja2lu
Z0ZpZWxkADxSZWNlaXB0cz5rX19CYWNraW5nRmllbGQAPENvbnRyYWN0PmtfX0JhY2tpbmdGaWVs
ZAA8cmF0Y2hldF9saW1pdD5rX19CYWNraW5nRmllbGQAPFN0b3JhZ2VDb25zdHJhaW50PmtfX0Jh
Y2tpbmdGaWVsZAA8VGVybVN0YXJ0PmtfX0JhY2tpbmdGaWVsZAA8U3VwcGx5PmtfX0JhY2tpbmdG
aWVsZAA8RGVsaXZlcnk+a19fQmFja2luZ0ZpZWxkADxHcmFudWxhcml0eT5rX19CYWNraW5nRmll
bGQAPFByaW9yaXR5PmtfX0JhY2tpbmdGaWVsZABvcF9CaXR3aXNlQW5kAE9sZURiQ29tbWFuZABF
eGVjdXRlQ29tbWFuZABHb2FsS2luZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAENyZWF0ZUluc3Rh
bmNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBBZGRSYW5nZQBHZXRTY2hlbWFUYWJsZQBE
YXRhVGFibGUAZ2V0X0RlY2lzaW9uVGFibGUAc2V0X0RlY2lzaW9uVGFibGUAVmFyaWFibGUARW51
bWVyYWJsZQBJRGlzcG9zYWJsZQBHZXREb3VibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZy
b21IYW5kbGUAZ2V0X0ZyZWVUb1NjaGVkdWxlAHNldF9GcmVlVG9TY2hlZHVsZQBnZXRfTmFtZQBn
ZXRfUGF0aE5hbWUAc2V0X1BhdGhOYW1lAGdldF9Ub0xvY2F0aW9uTmFtZQBzZXRfVG9Mb2NhdGlv
bk5hbWUAZ2V0X1VzZXJOYW1lAHNldF9Vc2VyTmFtZQBnZXRfQ29udHJhY3ROYW1lAHNldF9Db250
cmFjdE5hbWUAcHJvcGVydHlOYW1lAFBTX3VzZXJfbmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5SdW50aW1lAHNldF9Db21tYW5kVHlwZQBnZXRfU3RvcmFnZVR5cGUAc2V0X1N0
b3JhZ2VUeXBlAF9zdG9yYWdlVHlwZQBDaGFuZ2VUeXBlAEdldFR5cGUAV2hlcmUAU3lzdGVtLkNv
cmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJU
U2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0
aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UAZ2V0X1RhYmxlVG9VcGRhdGUAc2V0X1RhYmxl
VG9VcGRhdGUAQWdncmVnYXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAEVuY2xvc2VXaXRoUXVvdGUA
RGlzcElkQXR0cmlidXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUAQXNz
ZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
VHlwZUlkZW50aWZpZXJBdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBB
c3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1Nj
cmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50
aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAFNldFZhbHVl
AHByb3BlcnR5VmFsdWUAdmFsdWUAZ2V0X1JlYWxOb25uZWdhdGl2ZQBTaW1wbGV4RGlyZWN0aXZl
AFNvbHZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAY29uc3RyaW5nAGdldF9Q
YXRoAHNldF9QYXRoAHBhdGgAZ2V0X1JhbmsAc2V0X1JhbmsAZ2V0X0NvbnRyYWN0UmFuawBzZXRf
Q29udHJhY3RSYW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAEFkZEdvYWwAZ2V0X09iamVjdGl2ZUdvYWwAc2V0
X09iamVjdGl2ZUdvYWwAb3BfR3JlYXRlclRoYW5PckVxdWFsAG9wX0xlc3NUaGFuT3JFcXVhbABn
ZXRfbWluX3dpdGhkcmF3YWwAc2V0X21pbl93aXRoZHJhd2FsAGdldF9tYXhfd2l0aGRyYXdhbABz
ZXRfbWF4X3dpdGhkcmF3YWwAZ2V0X01vZGVsAHNldF9Nb2RlbABDcmVhdGVNb2RlbABDbGVhck1v
ZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9mMzkyMzNmYWMx
NmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5kbGwAZ2V0X0l0ZW0AaXRlbQBTeXN0ZW0AVGVybQBTdW0A
RW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERvbWFpbgBnZXRfRGVjaXNpb24Ac2V0X0RlY2lz
aW9uAEFkZERlY2lzaW9uAGdldF9Tb2x2ZXJEZWNpc2lvbgBzZXRfU29sdmVyRGVjaXNpb24AZ2V0
X1JlY2VpcHREZWNpc2lvbgBzZXRfUmVjZWlwdERlY2lzaW9uAGdldF9OZXdEZWNpc2lvbgBzZXRf
TmV3RGVjaXNpb24AbmV3RGVjaXNpb24AZ2V0X0RlbGl2ZXJ5RGVjaXNpb24Ac2V0X0RlbGl2ZXJ5
RGVjaXNpb24AZ2V0X0Zyb21Mb2NhdGlvbgBzZXRfRnJvbUxvY2F0aW9uAE1pY3Jvc29mdC5Tb2x2
ZXIuRm91bmRhdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBn
ZXRfbWluX2luamVjdGlvbgBzZXRfbWluX2luamVjdGlvbgBnZXRfbWF4X2luamVjdGlvbgBzZXRf
bWF4X2luamVjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBPbGVEYlBhcmFtZXRlckNvbGxlY3Rpb24A
RGF0YVJvd0NvbGxlY3Rpb24AZ2V0X09sZURiQ29ubmVjdGlvbgBzZXRfT2xlRGJDb25uZWN0aW9u
AGdldF9TcWxDb25uZWN0aW9uAHNldF9TcWxDb25uZWN0aW9uAGdldGNvbm5lY3Rpb24AZ2V0X1Bv
c2l0aW9uAHNldF9Qb3NpdGlvbgBnZXRfRml4ZWRQb3NpdGlvbgBzZXRfRml4ZWRQb3NpdGlvbgBn
ZXRfRGVtYW5kUG9zaXRpb24Ac2V0X0RlbWFuZFBvc2l0aW9uAGdldF9TdG9yYWdlUG9zaXRpb24A
c2V0X1N0b3JhZ2VQb3NpdGlvbgBBZGp1c3RQb3NpdGlvbgBnZXRfU3VwcGx5UG9zaXRpb24Ac2V0
X1N1cHBseVBvc2l0aW9uAEV4Y2VwdGlvbgBnZXRfRGVzY3JpcHRpb24Ac2V0X0Rlc2NyaXB0aW9u
AFNvbHV0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBvYmplY3RUbwBDdWx0dXJlSW5mbwBQcm9wZXJ0
eUluZm8AY3VyZW50bHlTb2x2ZWRNZHEAU3lzdGVtLkxpbnEAbXlWYXIAZHIAT2xlRGJEYXRhUmVh
ZGVyAEZyb21EYXRhUmVhZGVyAEZyb21PbGVSZWFkZXIARXhlY3V0ZVJlYWRlcgBnZXRfUmVzb3Vy
Y2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFRvVXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUnVudGltZS5XcmFwcGVyAEV2ZW50c09iamVjdFdyYXBwZXIAT2xlRGJQYXJhbWV0ZXIARmly
ZUVycm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAQWN0aXZhdG9yAC5jdG9yAGdldF9Mb3Nz
RmFjdG9yAHNldF9Mb3NzRmFjdG9yAGdldF9EZW1hbmRBZGp1c3RGYWN0b3IAc2V0X0RlbWFuZEFk
anVzdEZhY3RvcgBnZXRfU3VwcGx5QWRqdXN0RmFjdG9yAHNldF9TdXBwbHlBZGp1c3RGYWN0b3IA
Z2V0X0RlbGl2ZXJ5QWRqdXN0RmFjdG9yAHNldF9EZWxpdmVyeUFkanVzdEZhY3RvcgAuY2N0b3IA
c3RyAGdldF9Ib3VyAHNldF9Ib3VyAGhvdXIAZ2V0X01EUXMAc2V0X01EUXMAZ2V0X01EUURhdGFz
AHNldF9NRFFEYXRhcwBTeXN0ZW0uRGlhZ25vc3RpY3MAU1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3
YzBjZTg0MDJmYWEuRXh0ZW5zaW9uTWV0aG9kcwBNaWNyb3NvZnQuU29sdmVyRm91bmRhdGlvbi5T
ZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29t
cGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMy
ZjllZjdkODU4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBn
ZXRfRGVsaXZlcmllcwBzZXRfRGVsaXZlcmllcwBTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5
ZWY3ZDg1OC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAZ2V0X1BhdGhzAHNldF9Q
YXRocwBnZXRfR29hbHMAZ2V0X0RlY2lzaW9ucwBzZXRfRGVjaXNpb25zAFNhdmVEZWNpc2lvbnMA
Z2V0X051bWJlck9mRGVjaXNpb25zAHNldF9OdW1iZXJPZkRlY2lzaW9ucwBVcGRhdGVTb2x2ZXJE
ZWNpc2lvbnMASUVOdW1lcmFibGVFeHRlbnNpb25zAE15RXh0ZW5zaW9ucwBTeXN0ZW0uQ29sbGVj
dGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAU29sdmVyQ2FsY3Vs
YXRpb25Qcm9jZXNzAGdldF9EdHMAZ2V0X0NvbnRyYWN0cwBzZXRfQ29udHJhY3RzAFNjcmlwdFJl
c3VsdHMAR2V0R2VuZXJpY0FyZ3VtZW50cwBnZXRfRXZlbnRzAGdldF9SZWNlaXB0cwBzZXRfUmVj
ZWlwdHMAUG9wdWxhdGVEVFNWYXJpYWJsZUlucHV0cwBnZXRfUm93cwBDb25jYXQAZ2V0X0NvbnRy
YWN0AHNldF9Db250cmFjdABjb250cmFjdABnZXRfU29sdmVyRGVjaXNpb25FeGFjdABzZXRfU29s
dmVyRGVjaXNpb25FeGFjdABnZXRfSW5uZXJPYmplY3QAU2VsZWN0AERpc3RpbmN0AG9wX0ltcGxp
Y2l0AGdldF9yYXRjaGV0X2xpbWl0AHNldF9yYXRjaGV0X2xpbWl0AGdldF9EZWZhdWx0AEZpcnN0
T3JEZWZhdWx0AERUU0V4ZWNSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAVG9JbnQAU3lzdGVtLkRhdGEu
U3FsQ2xpZW50AGdldF9DdXJyZW50AGN1cnJlbnQAQWRkQ29uc3RyYWludABnZXRfU3RvcmFnZUNv
bnN0cmFpbnQAc2V0X1N0b3JhZ2VDb25zdHJhaW50AGRlbGl2ZXJ5UG9pbnQAQ291bnQAcmVjZWlw
dABnZXRfVGVybVN0YXJ0AHNldF9UZXJtU3RhcnQAQ29udmVydABUb0xpc3QAbGlzdABGaXJzdABt
ZHFUb0FkanVzdABNb3ZlTmV4dABTb2x2ZXJDb250ZXh0AEdldENvbnRleHQARGF0YVJvdwBpbmRl
eABUaGVuQnkAR3JvdXBCeQBPcmRlckJ5AGdldF9JdGVtQXJyYXkAVG9BcnJheQBnZXRfQXNzZW1i
bHkAZ2V0X1N1cHBseQBzZXRfU3VwcGx5AEV4ZWN1dGVOb25RdWVyeQBxdWVyeQBnZXRfRGVsaXZl
cnkAc2V0X0RlbGl2ZXJ5AGRlbGl2ZXJ5AG9wX0VxdWFsaXR5AG9wX0luZXF1YWxpdHkAZ2V0X0dy
YW51bGFyaXR5AHNldF9HcmFudWxhcml0eQBnZXRfUHJpb3JpdHkAc2V0X1ByaW9yaXR5AHByaW9y
aXR5AElzTnVsbE9yRW1wdHkARmlsbE9iamVjdFdpdGhQcm9wZXJ0eQBHZXRQcm9wZXJ0eQB6AAAf
TwBMAEUAXwBDAE8ATgBOAF8ATQBhAGkAbgBEAEIAABdTAGMAcgBpAHAAdABfAFQAYQBzAGsAAAMN
AAAZUABTAF8AUAByAG8AYwBlAHMAcwBJAEQAABlQAFMAXwB1AHMAZQByAF8AbgBhAG0AZQAAR2EA
ZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAbwBsAHYAZQByAF8AZABlAGMAaQBz
AGkAbwBuAHMAXwAAA18AAGFhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBjAG8A
bgB0AHIAYQBjAHQAdwBpAHMAZQBfAGQAZQB0AGEAaQBsAF8AbQBkAHEAXwBnAHIAbwB1AHAAXwAA
S2EAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAdABvAHIAYQBnAGUAXwBjAG8A
bgBzAHQAcgBhAGkAbgB0AF8AAEdhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBz
AHQAbwByAGEAZwBlAF8AcABvAHMAaQB0AGkAbwBuAF8AAHlFAFgARQBDACAAcwBwAGEAXwByAHUA
bgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABh
AGcAPQAnAHIAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABJycALAAgAEAAdQBzAGUA
cgBfAGwAbwBnAGkAbgBfAGkAZAA9ACcAAQUnACAAAXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBf
AHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcA
PQAnAGQAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABeUUAWABFAEMAIABzAHAAYQBf
AHIAdQBuAF8AcwBpAG0AcABsAGUAeABfAHMAbwBsAHYAZQByAF8AcABhAGMAawBhAGcAZQAgAEAA
ZgBsAGEAZwA9ACcAbQAnACwAIABAAHAAcgBvAGMAZQBzAHMAXwBpAGQAPQAnAAEPTgBvACAAUABh
AHQAaAAAF04AbwAgAEMAbwBuAHQAcgBhAGMAdAAAA0QAAAMtAAEDQwAAB1IATwBXAAAHQwBPAEwA
AAlnAG8AYQBsAAAVVwBJAFQASABEAFIAQQBXAEEATAAACU4AVQBMAEwAAAMnAAEBAHlFAFgARQBD
ACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsA
YQBnAGUAIABAAGYAbABhAGcAPQAnAHUAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwAB
Y1QAUgBVAE4AQwBBAFQARQAgAFQAQQBCAEwARQAgAGEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMA
LgBkAGIAbwAuAHMAbwBsAHYAZQByAF8AZABlAGMAaQBzAGkAbwBuAHMAAAdAAHAAMQAAGUkATgBT
AEUAUgBUACAASQBOAFQATwAgAACCcyAAKABzAG8AdQByAGMAZQBfAGkAZAAsACAAWwBzAG8AdQBy
AGMAZQBdACwAIABkAGUAcwB0AGkAbgBhAHQAaQBvAG4AXwBpAGQALAAgAFsAZABlAHMAdABpAG4A
YQB0AGkAbwBuAF0ALAAgAG0AZABxACwAIAByAGUAYwBlAGkAdgBlAGQALAAgAGcAbwBhAGwAXwBv
AGIAagBlAGMAdABpAHYAZQAsACAAbABvAHMAcwBfAGYAYQBjAHQAbwByACwAIABwAGEAdABoAF8A
aQBkACwAYwBvAG4AdAByAGEAYwB0AF8AaQBkACwAIABkAGUAbABpAHYAZQByAHkALAAgAHIAZQBj
AGUAaQB2AGUAZABfAG0AZABxACwAcABhAHQAaABfAHAAcgBpAG8AcgBpAHQAeQAsAGMAbwBuAHQA
cgBhAGMAdABfAHIAYQBuAGsALABzAG8AdQByAGMAZQBfAHAAbwBzAGkAdABpAG8AbgAsAHMAbwB1
AHIAYwBlAF8AcgBhAG4AawAsAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAHAAbwBzAGkAdABpAG8A
bgAsAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAHIAYQBuAGsALABbAHQAZQByAG0AXwBzAHQAYQBy
AHQAXQAsAFsAaABvAHUAcgBdACwAWwBnAHIAYQBuAHUAbABhAHIAaQB0AHkAXQAsACAAcwB1AHAA
cABsAHkAXwBwAG8AcwBpAHQAaQBvAG4ALAAgAGQAZQBtAGEAbgBkAF8AcABvAHMAaQB0AGkAbwBu
ACkAIABWAGEAbAB1AGUAcwAgACgAAAUsACcAAQUnACwAAQMsAAAHJwAsACcAAQUpACAAAHFTAFQA
XwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3
AGQAOAA1ADgALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAMfbgs4j
6o1Dh/dFIIfkFToAAyAAAQQgAQEIBSABAREVBCABAQ4GIAEBEYC1BAcBEkEFIAASgM0FIAASgNEG
IAESgNUcBSAAEoDZAyAADgYAAw4ODg4CBg4IIAUCCA4ODggGBwISSRJBAyAAHAUgABKA4QYgARKA
5RwHAAQODg4ODjYHERJEEk0dEhwIEkgVEVUBEigSTB0SMBJQCBJUFRJZAhIoAhJYFRJRARIgFRJZ
AhIkEiAIEkEFAAEOHQ4GIAIBDhJJBCAAEk0GFRJRARIwBAoBEjANEAEBHR4AFRKAiQEeAAsQAQEI
FRKAiQEeAAYVElEBEhwECgESHAYVElEBEiQECgESJAYVElEBEiAHFRJZAhIkAgUgAgEcGBgQAQIV
EoCJAR4AFRKAiQEeABUSWQIeAAIIFRJZAhIkEigZEAICFRKAiQEeARUSgIkBHgAVElkCHgAeAQYK
AhIkEigREAEBFRKAiQEeABUSgIkBHgAECgESKBAQAQEVElEBHgAVEoCJAR4ABxUSWQISKAggEAIC
FRKAiQEVEoCFAh4BHgAVEoCJAR4AFRJZAh4AHgEFCgISKAgOFRJZAhUSgIUCCBIoEigMCgIVEoCF
AggSKBIoBhUSUQESKAggABURVQETAAYVEVUBEigEIAATAAcVElkCEiQIGRACAhUSgPEBHgAVEoCJ
AR4AFRJZAh4AHgEFCgISJAgIFRJZAhIkEhgGCgISJBIYDBABAR4AFRKAiQEeAAQKARIYAyAAAgcV
ElkCEigCBSABARMACBUSWQISJBIgBgoCEiQSIAQKARIgCiABARUSgIkBEwBdByMSXR0SMAgSYB0I
CBJkFRJRARIgHRIcCBJoFRJZAhIoAhUSWQISIAIdEigSbBJhHRIgHRJlEmkSbRUSUQESIB0SIAgS
IBFxHRJ1EiANDRURVQESIBJwDRJ0DRJBBAAAEl0HFRJZAhIwCAUKAhIwCAcVElkCEjAOGRACAhUS
gPEBHgAVEoDxAR4AFRJZAh4AHgEFCgISMA4HFRJZAhIgAgcVElkCEiAIBQoCEiAIAwoBCAgVElkC
EiASHAYKAhIgEhwHFRJZAhIcCAUKAhIcCAcVElkCEhwOBQoCEhwOCBUSWQISIBIoBgoCEiASKAQg
ABJhBQAAEoD1BAAAEXEFIAIODg4FAAIODg4HIAIBEoD1DgUgAQESZQUAARJ1DQgAAhJ1EnUSdQgg
AhKA+Q4SdQgVElkCEiASZQYKAhIgEmUECgESZQcAARJ1HRJ1CiADEm0OEYEBEnUJIAESgQkdEoEF
CSAAFRKAiQESbQQKARJtBQACAg4OBxUSWQISIA0SEAECDRUSgIkBHgAVElkCHgANBhURVQESIAUg
ABKBDQYgARKBEQ4HIAMBHBwdHCIHChIMFRJRARwVElEBHgAcEoCREoCVEoCZEoCdFRFVARwcBRUS
UQEcBiAAHRKBDQYAARwSgQ0FIAASgJEFIAASgRkFIAASgJUEIAAdHAQgARwOBhUSUQEeAAUVEVUB
HAIeAAgAARKBDRGBIQcAAhwcEoENAwcBCAQAAQgODAcDEngSfBURVQESIAMHAQ0FIAENHRwDBwEO
CRUSgSkDDhIgDhkQAgMeARUSgIkBHgAeARUSgSkDHgEeAB4BBQoCEiAOBAABAg4GIAEBEYExBSAA
EoE1ByACEoE5DhwDIAAIBwcDCA0RgKEFIAASgUEHIAIBDhKBQQi3elxWGTTgiQiJhF3NgIDMkQgx
vzhWrTZONQQAAAAABAEAAAABAQEZAwYSLAIGCAMGEigCBg0CBgoHBhUSUQESKAMGEjADBhIcAwYS
GAMGEmUEBhGAoQIGAgQGHRJlBwYVElEBEiAEBh0SJAQGHRIwBAYdEhwEBh0SKAQGHRIYBAYSgKUD
BhJhAwYSSQQGEoCtBAYSgLEDBhI4AwYRQAMGEkgDBhJECAYVElkCEigCAwYSUAkGFRJZAhIkEiAD
BhJUAwYSXAgGFRJZAhIoCA8GFRJZAhUSgIUCCBIoEigIBhUSWQISJAgIBhUSWQISMAgIBhUSWQIS
MA4IBhUSWQISIAgJBhUSWQISIBIcCAYVElkCEhwICAYVElkCEhwOCQYVElkCEiASKAkGFRJZAhIg
EmUIBhUSWQISIA0IBhUSWQISIAIDBhJgAwYSZAMGEiADBhJsBAYSgIAFIAESSQ4JIAQBEBwOHB0c
FBABAhUSgIkBHgAVEoCJAR4AEoCNExABAhUSgIkBHgAVEoCJAR4AEk0EAAEIHAgAAgEdEiASIAQA
AQ4OBCAAEigFIAEBEigDIAANBCABAQ0DIAAKBCABAQoIIAAVElEBEigJIAEBFRJRARIoBCAAEjAF
IAEBEjAEIAASHAUgAQESHAQgABIYBSABARIYBCAAEmUFIAARgKEGIAEBEYChBCABAQIFIAAdEmUG
IAEBHRJlCCAAFRJRARIgCSABARUSUQESIAUgAB0SJAYgAQEdEiQFIAAdEjAGIAEBHRIwBSAAHRIc
BiABAR0SHAUgAB0SKAYgAQEdEigFIAAdEhgGIAEBHRIYBSAAEoClBiABARKApQUgAQESYQQgABJJ
BSABARJJBiACDg4SIAUAABKArQUAABKAsQYAAQESgLEEAAASOAMAAAEFIAECEiQGIAESKBIkBiAB
EhgSJAUgAQISKAYgARIgEiQFIAEIEigMIAESKBUSgIUCCBIoBSABCBIkBSABCBIwBSABDhIwBSAB
CBIgBiABEhwSIAUgAQgSHAUgAQ4SHAYgARIoEiAGIAESZRIgBSABDRIgBSABAhIgAygACAMoAA4E
KAASKAMoAA0DKAAKCCgAFRJRARIoBCgAEjAEKAASHAQoABIYBCgAEmUFKAARgKEDKAACBSgAHRJl
CCgAFRJRARIgBSgAHRIkBSgAHRIwBSgAHRIcBSgAHRIoBSgAHRIYBSgAEoClBCgAEmEEKAASSQUI
ABKArQUIABKAsQQIABI4CAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgB
AAIAAAAAACgBACNTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OAAABQEAAAAADgEA
CU1pY3Jvc29mdAAAHwEAGkNvcHlyaWdodCBAIE1pY3Jvc29mdCAyMDE0AABHAQAaLk5FVEZyYW1l
d29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3Jr
IDQIAQAaAAAAAAApAQAkNjExNjNFRjAtNDRFOS00MTNGLUE4MjEtQ0M4MTUzOUE3MkEyAAAAAAC0
AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGli
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVj
NTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAA
AFBBRFBBRFC0AAAAKLEAAAAAAAAAAAAAQrEAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAADSxAAAA
AAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFjA
AAA+BAAAAAAAAAAAAAA+BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAHmx/HQAAAQAebH8dPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEngMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAegMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAADQACgABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAATQBpAGMAcgBvAHMAbwBmAHQAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AZgAzADkAMgAzADMAZgBhAGMAMQA2AGUANAAyADYAZAA5ADkAMQBk
ADkAMwAyAGYAOQBlAGYANwBkADgANQA4AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADcANQA1ADEALgAyADcANgA3ADgAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AZgAzADkAMgAzADMAZgBhAGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkA
MwAyAGYAOQBlAGYANwBkADgANQA4AC4AZABsAGwAAABaABsAAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABNAGkAYwByAG8AcwBvAGYAdAAgADIA
MAAxADQAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGYAMwA5ADIAMwAzAGYA
YQBjADEANgBlADQAMgA2AGQAOQA5ADEAZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBmADMAOQAyADMAMwBmAGEA
YwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANQA1ADEALgAyADcANgA3ADgA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANQA1
ADEALgAyADcANgA3ADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAMAAAAVDEAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="121"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="362"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="124"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="123"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="383"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="323"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="277"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="484"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="402"
            Column="29" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>