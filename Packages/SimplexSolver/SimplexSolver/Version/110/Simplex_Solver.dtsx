<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="14.0.3008.28"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="863"
  DTS:VersionGUID="{47453AE2-6623-4CF2-9272-863AFE230C74}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=SG-S-STG01.farrms.us,2033;User ID=farrms_admin;Initial Catalog=TRMTracker_Test;Provider=SQLNCLI11.1;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TRMTracker_PNM"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">6B516344_94EC_492B_8C43_2037F0B85B89</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">sangam</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Policy;
using System.Windows.Forms;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_585ba2e92bdd42deb81f7c0ce8402faa.ExtensionMethods;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>
        
        
        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //for test
                //PS_process_id = "C2D15F1F_344F_4C40_BCD8_39461B1E9E24";
                //PS_user_name = "farrms_admin";
                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void CreateProcessTableIfNotExists()
        {
            try
            {
                string query = @"EXEC spa_flow_optimization @flag = 'b', @process_id='" + PS_process_id + "'";
                OleDbCommand cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }            
        }


        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
             //   query = @"SELECT DISTINCT CAST(d.from_loc_id AS INT ) [Id]
	            //    , d.from_loc [Description]
	            //    , CAST( d.from_rank AS INT ) [Rank]
	            //    , ABS(CAST(ISNULL(sp.position,  vol.position ) AS FLOAT )) [FixedPosition]
	            //    , ABS(CAST(ISNULL(sp.position,  vol.position ) AS FLOAT )) [Position]                    
             //       , ISNULL(s.from_max_withdrawal, 999999999) [max_withdrawal]                   
             //       , ISNULL(s.from_min_withdrawal, 0) [min_withdrawal]
             //       , ISNULL(s.from_ratchet_limit, 999999999) [ratchet_limit]
             //       ";
             //   query += " FROM " + _solverData.TableToUpdate + " d";
             //   query += " INNER JOIN  " + _solverData.StorageConstraint + " s ";
             //   query += "  ON d.box_id = s.box_id ";
             //   query += " LEFT JOIN " + _solverData.StoragePosition + " sp";
             //   query += "  ON sp.location_id = d.from_loc_id  AND sp.type= 'w' ";
             //   query += @" CROSS APPLY (
	            //SELECT ISNULL(SUM(v.position),0) position
	            //FROM adiha_process.dbo.opt_deal_detail_pos_" + PS_user_name + "_" + PS_process_id + " v";
             //   query += @" inner join source_deal_header sdh on sdh.source_deal_header_id = v.source_deal_header_id
             //    inner join source_deal_type sdt on sdt.source_deal_type_id = sdh.source_deal_type_id ";
             //   query += @"    WHERE  v.location_id = d.from_loc_id and sdt.source_deal_type_name not like 'Capacity%' )vol 


             //   where d.box_type = 'no_proxy' and d.path_id <> 0 and d.path_ormdq > 0
             //   ORDER BY d.from_rank, d.from_loc";

                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Receipt>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                //   query = @"SELECT DISTINCT CAST(d.to_loc_id AS INT ) [Id]
                //    , d.to_loc [Description]
                //    , CAST( d.to_rank AS INT ) [Rank]
                //    , ABS(CAST(CASE WHEN sp.type = 'i' THEN 999999999 ELSE vol.position END AS FLOAT )) [FixedPosition]
                //    , ABS(CAST(CASE WHEN sp.type = 'i' THEN 999999999 ELSE vol.position END  AS FLOAT )) [Position]  
                //       , ISNULL(s.to_max_injection, 999999999)  [max_injection]                   
                //       , ISNULL(s.to_min_injection, 0) [min_injection]
                //       , ISNULL(s.to_ratchet_limit, 999999999) [ratchet_limit]

                //       ";
                //   query += " FROM " + _solverData.TableToUpdate + " d";
                //   query += " INNER JOIN  " + _solverData.StorageConstraint + " s ";
                //   query += "  ON d.box_id = s.box_id ";
                //   query += " LEFT JOIN " + _solverData.StoragePosition + " sp";
                //   query += "  ON sp.location_id = d.to_loc_id  AND sp.type= 'i' ";
                //   query += @" CROSS APPLY (
                //SELECT ISNULL(SUM(v.position),0) position
                //FROM adiha_process.dbo.opt_deal_detail_pos_" + PS_user_name + "_" + PS_process_id + " v";
                //   query += @" inner join source_deal_header sdh on sdh.source_deal_header_id = v.source_deal_header_id
                //    inner join source_deal_type sdt on sdt.source_deal_type_id = sdh.source_deal_type_id ";
                //   query += @"    WHERE  v.location_id = d.to_loc_id and sdt.source_deal_type_name not like 'Capacity%')vol

                //   where d.box_type = 'no_proxy' and d.path_id <> 0 and d.path_id is not null and d.path_ormdq > 0
                //   ORDER BY d.to_rank, d.to_loc";

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                //query = "SELECT CAST(d.from_loc_id AS INT ) [FromLocationId] , d.from_loc [FromLocation], CAST(d.to_loc_id AS INT ) [ToLocationId]," +
                //        " d.to_loc [ToLocationName], ISNULL(d.loss_factor,0) AS  [LossFactor], CAST(d.path_id AS INT ) [PathId]," +
                //        " d.path_name [PathName], CAST(ISNULL(sdvp.[description] , 9999999) AS INT) [Priority]," +
                //        " CAST(ISNULL(d.contract_id,0) AS INT ) [ContractId], d.contract_name [ContractName]," +
                //        " CAST(ISNULL(sdvc.[code] , 9999999) AS INT) [ContractRank], CAST(d.path_ormdq AS FLOAT) [MDQ]";
                //query += " ,CAST(supply_adjust_factor AS FLOAT) [SupplyAdjustFactor], CAST(demand_adjust_factor AS FLOAT) [DemandAdjustFactor], CAST(delivery_adjust_factor AS FLOAT) [DeliveryAdjustFactor] FROM " + _solverData.TableToUpdate + " d";
                //query += " LEFT JOIN counterparty_contract_rate_schedule ccrs ON  ccrs.path_id = d.path_id and ccrs.contract_id = d.contract_id " +
                //    " LEFT JOIN contract_group cg ON  d.contract_id = cg.contract_id  " +
                //    " LEFT OUTER JOIN static_data_value sdvc ON  sdvc.value_id = ccrs.[RANK] AND sdvc.[type_id] = 32100 " +
                //    " LEFT OUTER JOIN static_data_value sdvp ON  sdvp.value_id = d.priority_id AND sdvp.[type_id] = 31400 " +
                //    " WHERE d.path_id <> 0 and d.path_id is not null AND d.contract_id IS NOT NULL and d.box_type = 'no_proxy' and d.path_ormdq > 0";

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contracts =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .ToList();
                    }
                }


                index = 0;
                foreach (Receipt receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contracts = new List<Contract>() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contracts.OrderBy(x => x.Rank).FirstOrDefault();
                            if (contract == null)
                                path.Contracts.Add(new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path });
                            //foreach (Contract contract in path.Contracts)
                            //{
                                _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }

                                index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Receipt[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Receipt receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Receipt.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Receipt.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();
                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                            //foreach (Contract contract in contracts)
                            //{
                                //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                                context.ClearModel();
                                Model model = context.CreateModel();

                                //  Contract according to their rankings
                                //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                                MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id  && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                                if (mdqtoadjust.Count() == 0) continue;
                                //  MDQ Constraint
                                foreach (MDQ mdq in mdqtoadjust)
                                {
                                    mdq.Decision = new Decision(Domain.RealNonnegative, "D" + mdq.Id);
                                    model.AddDecision(mdq.Decision);
                                    model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position 
                                                            & mdq.Decision <= mdq.Receipt.Position 
                                                            & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor 
                                                            & mdq.Decision <= receipt.Position 
                                                            & mdq.Decision <= mdq.Receipt.max_withdrawal 
                                                            & mdq.Decision >= mdq.Receipt.min_withdrawal
                                                            & mdq.Decision <= mdq.Delivery.max_injection 
                                                            & mdq.Decision >= mdq.Delivery.min_injection
                                                            & mdq.Decision <= mdq.Delivery.ratchet_limit 
                                                            & mdq.Decision <= mdq.Receipt.ratchet_limit);
                                }
                                //  Row constraint
                                Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            // model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                                //  Column Constraint
                           //  model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position );
                                //  Decisions to solve
                                //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                                model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                                _solverData.Model = model;
                                var simplex = new SimplexDirective();
                                Solution solution = context.Solve(simplex);
                                Goal goal = model.Goals.FirstOrDefault();
                                if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                                //receipt.Position -= goal.ToInt();

                                int[] deliverids = mdqtoadjust.Select(x => x.Delivery.Id).Distinct().ToArray();
                                foreach (int deliverid in deliverids)
                                {
                                    Delivery delivery = deliveries.Where(x => x.Id == deliverid).FirstOrDefault();
                                    double total = mdqtoadjust.Where(x => x.Delivery.Id == deliverid).Sum(x => x.SolverDecision);
                                    //delivery.Position -= total;     //  This line was commented for calculation delivery side position according to loss factor
                                    //  Decrease delivery side position according to solver decesion & its loss factor
                                    /*foreach (MDQ mdq in mdqtoadjust)
                                    {
                                        delivery.Position -= Convert.ToInt32(mdq.SolverDecision * (1 + mdq.LossFactor));
                                    }*/
                                }
                                //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                                foreach (MDQ mdq in mdqtoadjust)
                                {
                                    mdq.ReceiptDecision = mdq.SolverDecision;
                                    if (mdq.Receipt.Position == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                    {
                                        mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                        mdq.Receipt.Position -= mdq.SolverDecision;
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }

                                    if (mdq.SolverDecision < mdq.Receipt.Position && mdq.SolverDecision != 0)
                                    {
                                        //  sd - 5000 , p 8038
                                        double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                        double availablePosition = mdq.Receipt.Position - sdLossFactor;

                                        if (availablePosition >= 0)
                                        {
                                            mdq.ReceiptDecision = sdLossFactor;
                                            mdq.DeliveryDecision = mdq.SolverDecision;
                                            mdq.Receipt.Position -= mdq.ReceiptDecision;
                                            mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                        }
                                        else
                                        {
                                            mdq.ReceiptDecision = sdLossFactor - (mdq.Receipt.Position - mdq.SolverDecision);
                                            if (mdq.Receipt.Position < sdLossFactor) 
                                            {
                                                mdq.ReceiptDecision = mdq.Receipt.Position;
                                            }
                                            mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                            if (mdq.Receipt.Position < sdLossFactor)
                                            {
                                                mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                            }
                                            mdq.Receipt.Position -= mdq.ReceiptDecision;
                                            mdq.Delivery.Position -= mdq.DeliveryDecision;
                                        }


                                    }
                                }
                            //} //for contract 
                        }

                    }

                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            
        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    #region Class Declarations

    internal class Receipt
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }        
        public Int64 max_withdrawal { get; set; }        
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }

    internal class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }        
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }
        
        public virtual List<Path> Paths { get; set; }
    }

    internal class MDQ
    {
        public int Id { get; set; }
        public Receipt Receipt { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecisionExact = value; }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();
                    
                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }
    }

    internal class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }

    }

    internal class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual List<Contract> Contracts { get; set; }
    }

    internal class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }

    internal class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Receipt[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank) " +
                                                                                                    "Values (" + q.Receipt.Id + ",'" + q.Receipt.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Receipt.FixedPosition.ToString() + "," + q.Receipt.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            try
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }

    #endregion

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <HintPath>C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Tasks\Microsoft.SqlServer.ScriptTask.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{47A0E610-2328-4521-90C6-6403B41C35AF}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="922e5f24b2f649399edacfdac9842fbf">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>122</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
AAArfm0AAAQlLRcmfmMAAAT+BtkAAAZzUQAACiWAbQAABCghAAArfm4AAAQlLRcmfmMAAAT+BtoA
AAZzUgAACiWAbgAABCgiAAArKAUAACsTB3MuAAAKEwgRBxMJFhMKK0tz6AAABhMLEQsRBn18AAAE
EQsRCREKmn17AAAEEQgCewEAAARvjgAABhEL/gbpAAAGc04AAAooGQAAKygjAAArb1MAAAoRChdY
EwoRChEJjmkyrREIfm8AAAQlLRcmfmMAAAT+BtsAAAZzVAAACiWAbwAABCgkAAArKAsAACt+cAAA
BCUtFyZ+YwAABP4G3AAABnM1AAAKJYBwAAAEKCUAACsRBnt6AAAEe3gAAAQlLSQmEQZ7egAABBEG
e3oAAAT+BuUAAAZzPQAACiUTDH14AAAEEQwoEQAAKygmAAArEw0WEwo4GAYAAHPsAAAGEw4RDhEG
fYAAAAQRDhENEQqafX8AAARz6gAABhMPEQ8RDn1+AAAEEQ8RD3t+AAAEe38AAARveAAABn5xAAAE
JS0XJn5jAAAE/gbdAAAGc0AAAAolgHEAAAQoEwAAK35yAAAEJS0XJn5jAAAE/gbeAAAGc1UAAAol
gHIAAAQoJwAAKygoAAArKBQAACt9fQAABAZvVgAACgZvVwAAChMQEQgRD/4G6wAABnNOAAAKKBkA
ACsoKQAAKygqAAArExERESgrAAArOUIFAAARERMVFhMWOMcBAAARFREWmhMXERcoRAAACnLnAwBw
ERdvLAAABow8AAABKEUAAApzRgAACm87AAAGERARF286AAAGb1gAAAoREHLrAwBwERdvOgAABm9Z
AAAKKFoAAAoRF286AAAGERdvMgAABihbAAAKKFwAAAoRF286AAAGERdvLgAABm8WAAAGKFsAAAoo
XAAACihdAAAKERdvOgAABhEXbzAAAAZvHwAABhEXb0YAAAZaKFsAAAooXAAACihdAAAKERdvOgAA
BhEPe34AAAR7gAAABHt6AAAEe3cAAARvFgAABihbAAAKKFwAAAooXQAAChEXbzoAAAYRF28uAAAG
bxAAAAZsKFsAAAooXAAACihdAAAKERdvOgAABhEXby4AAAZvEgAABmwoWwAACiheAAAKKF0AAAoR
F286AAAGERdvMAAABm8jAAAGbChbAAAKKFwAAAooXQAAChEXbzoAAAYRF28wAAAGbyUAAAZsKFsA
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
ZRsGAI4TZRsGACAS2hoTANkbAAAGAE0SnRcGAMoSnRcGAKsSnRcGAHUTnRcGAB8TnRcGADgTnRcG
AGQSnRcGAH8SCxQOAFMTohQOABkRohQGAJoY8BUSANIelBAWAPIXpAcWABcZpAcGAO0BwwdTANwZ
AAAGAOMC8BUaAK8fIhsaALkVIhsaAOQWIhsaAPQTIhsaAPIUIhsGAAAW8BUGANoRZRsGAHAe8BUK
AOoCAhkWABgYAh8GAMoBwwcWABoZzRgWAFMPbAcGAM0ZDh0WAMgfbAcGAJUP8BUGAAMS2hoGAFYZ
hRsGAOkYQBceAKQRqRUeADQSqRUeAFARKxcGAPURRhsGAOcSRhsGAMoRRhsOAJcVohQSACUdlBAS
AGYZlBAOAKAZohQGACcU8BUSADkclBASAIEPlBAWANwOpAcWAN8OzRgKAIoPAhkKANgBAhkaABwW
IhsGAF4C8BUaAPcVIhsaAFsfIhsaAPgOIhsaAPsTIhsaAMQYIhsGAKAD8BUWALgQbAcWAK8XpAcW
ALQZpAciANsfahwiAOAeahwGAKQP8BUGANIQ8BUGAPUYnRcGAOcZ8BUWAMgXbAcWADURbAcGAKsP
8BUGAIwf8BUGABcgnRcAAAAAuwYAAAAAAQABAAEAEAARFjEHPQABAAEAAAAQAHwfMQd5AAQACAAA
ABAARyAxB3kADAAZAAAAEADsBjEHeQAVACwAAAAQAIUHMQd5ACQATwAAABAARRQxB3kAMwBuAAAA
EAAlHjEHeQA5AHsAAAAQAI0HMQd5AD0AhAABABAApBcxB3kAUQCyAIEBEADrHDEHeQBRALQAgQEQ
AAEd7Rp5AFEAtwAAABAAjBsGHHkAUQC4AAABEABDHAYcsQBTALwAoRAAAAEAeBkAAFQAvwADAQAA
hR0AAHEAVADBAAMBEACNAAAAeQBXAMEAAwEQAGMBAAB5AFgAxAADARAAmgIAAHkAWgDHAAMBEABM
AwAAeQBdAMoAAwEQAOMDAAB5AF8AywADARAAhgQAAHkAYQDNAAMhEAC/BwAAeQBjAM4AAwEQAMwA
AAB5AHcA4wADARAAogEAAHkAeQDmAAMBEACvAgAAeQB7AOgAAwEQAIsDAAB5AH0A6gADARAAIgQA
AHkAfwDsAAMBEADFBAAAeQCBAO0AAyEQAL8HAAB5AIIA8AAhAJgHHwUBAI0IRQABAIcQRQABAAcJ
IwUBAKgMRQABAGgMJgUBAI4KIwUBAAELKQUBAOEKKQUBAD8OKQUBAA4ZJgUBAAcJIwUBAKgMRQAB
AGgMJgUBAE4MJgUBAI4KIwUBAO8LKQUBANALKQUBAD8OKQUBAJsNLAUBAAcJIwUBAIEONAUBAJoO
OAUBAE4MJgUBAMUMJgUBAHgKPAUBACUOQAUBADgLRAUBAMcJIwUBAHMLIwUBAFILJgUBAJALJgUB
AAUNJgUBAOEMJgUBACkNJgUBADMJIwUBALILRQABAFMJIwUBAAEKRQABAMUMJgUBABsJIwUBAOcJ
RQABALQOIwUBAHEJIwUBADsKRQABAKQKIwUBANkIJgUBAAUNJgUBAOEMJgUBACkNJgUBAAcJIwUB
AKgMRQABALQOIwUBAI0JIwUBAJoOOAUBAPANSAUBAAcJIwUBAKgMRQABAI4KIwUBAHgKPAUBAKUI
IwUBAO4IIwUBAMIKIwUBALINUAUBAM0NIwUBAE8NVQUBAGUNXQUBAAsOYgUBAH8NZwUBAJsNbAUB
APANcQUBAC8MdgUBACELewUBAA4MfwUBAFkKRQABAKgJRQABAL4IRQABACEKRQABAF4ORQABAIcM
RQARAAUWgwURAAkRiAURAB8PjQUGBikHIwVWgEAdkQVWgOkQkQUGAFAgOAUGAEoUPAUGAPQBlQUG
AIQfNAUGAA0FmQUGAJwFmQUGAFAgOAUGAPYCogUGAC4eQAUGAEoEpgUGAEoUPAUGAKcDqgU2AG4G
rgUWAHwCsgUWAC4DuwUWAAYGygUWAKIA0wUWAHgB3AUWAGED5QUWAPgD5QUWAJsE5QUWAHIF7gUW
ACQG+AUWAH4GAQYWAPQACgYWAAQCsgUWALcDygUWAFoEFAYWAEYFHQYWALYF5QUWACABJwYWADAC
HQYGAIQfNAUGAAYDmQUGAIEgIwUGAPQBMAYGAFAgOAUGAPYCNAYGAC4eQAUGAEoEOAYGAEoUPAUG
AKcDNAYGAJsIIwU2AG4GPAYWAGwAQAZQIAAAAACGABcWAQABAPwgAAAAAIEAJhhJBgEAiCEAAAAA
gQDqHQEAAgD8IgAAAACBAMwdAQACAIgjAAAAAIEAeAcBAAIAwCoAAAAAgQBIHQEAAgB0NAAAAACG
GPEZAQACAIc0AAAAAIYI3gd4AAIAjzQAAAAAhgjlBwUAAgCYNAAAAACGCKQYOgADAKA0AAAAAIYI
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
KjUAAAAAhhjxGQEAaAAiQgAAAACDAIUCtgdoACpCAAAAAIMANwO8B2kAMkIAAAAAgwAPBsgHagA6
QgAAAACDAKsAzgdrAEJCAAAAAIMAgQHUB2wASkIAAAAAgwBqA9oHbQBXQgAAAACDAAEE2gduAEpC
AAAAAIMApATaB28AZEIAAAAAgwB7BeAHcABsQgAAAACDAC0G5wdxAHRCAAAAAIMAhwbtB3IAfEIA
AAAAgwD+APMHcwCEQgAAAACDAA4Ctgd0ADJCAAAAAIMAwQPIB3UAjEIAAAAAgwBkBPoHdgCUQgAA
AACDAFAFAAh3AJxCAAAAAIMAwAXaB3gAqUIAAAAAgwAqAQcIeQCUQgAAAACDADoCAAh6ACo1AAAA
AIYY8RkBAHsAsUIAAAAAgwDEAg0IewDLQgAAAACDAA4DsAd8ACo1AAAAAIYY8RkBAH0A4EIAAAAA
gwAnBQ0IfQAqNQAAAACGGPEZAQB+APhCAAAAAIMALAANCH4AKjUAAAAAhhjxGQEAfwBcQwAAAACD
AO0EDQh/ACo1AAAAAIYY8RkBAIAAKjUAAAAAhhjxGQEAgAABRAAAAACDAE4GEwiAABFEAAAAAIMA
TAANCIEAJkQAAAAAkRijGpgHggAqNQAAAACGGPEZAQCCADJEAAAAAIMAdgANCIIAAAABAC4UAAAB
ANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoT
AAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAAB
ANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoT
AAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAAB
ANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoT
AAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAAB
ANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoT
AAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAABANoTAAAB
ANoTEBABALcWAAABADAgAAABANoTAAABANoTAAABACQfAAACAAwZAAABAOAYAAACAHoQAAADAMwT
AAAEANUfAAABAJsfAAACABQZAAABAJsfAAACABQZAAABANoTAAABAKoaAAABANoTACAAAAAAAAAB
AOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABADYUAAABAOQf
AAABAOQfAAABAOQfAAABAOQfAAABALEgAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAAB
AOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQf
AAABAOQfAAABAOQfAAABAOQfAAABAOQfAAABAOQfCQDxGQEAEQDxGQUAGQDxGQEAIQDxGQoAMQDx
GRAAOQDxGRAAQQDxGRAASQDxGRAAUQDxGRAAWQDxGRAAYQDxGRAAaQDxGRAAcQDxGQEA6QDxGQEA
OQHxGQEAWQHxGRUAaQHxGRAAcQHxGQEAeQHxGQUAeQBhHSEAgQEhHScAiQHnFS0AgQHtHgUAgQGn
HTQAgQAvDzoAgQABDzoAoQENHj4AoQGKIEUAmQHDGUgAkQFnHlgAgQE1HFwAqQHnFWIAsQGsE1gA
8QAlFDoAoQENHmkAuQHxGXEAwQEgIHgAoQENHqcAuQFEGa0ADADxGQEAyQELIL4AyQFmH8wAEQFo
EQEAFADxGQEAHADxGQEAJADxGQEALADxGf8AyQHXEAUBNADxGf8AyQF3HicByQF+HkgByQGUH18B
PADxGf8AyQHtH3gBRADxGf8ATADZGb8BVAAYH88BXADxGf8AVACmH+kBMQFuEQEAZADxGf8AbADx
GQEATACJCPwBdADxGf8AyQH1HwoCyQHDHioCbACJCPwB2QHgEzcCoQENHj0CyQDxGUMCJACJCPwB
yQHDHksCJADnFV8CuQC9H60CfADxGf8AhADxGf8AyQHmH8gCjADxGf8AlADxGf8AnADxGf8ApADx
Gf8ArADxGf8AJAA7DzMDtADxGf8AvADxGf8AuQCMFQEAuQCAFVwDwQA9FmEDyQD1DzoAoQENHmcD
6QGHHm0D6QENFXQD6QHODnQD6QH3FHQDwQAsH4ADxADxGf8AwQD8FZ8DwQDLFKkD0QDxGQEAuQAF
FLUDwQBgHL8DzADxGf8A1ADxGf8AyQH8Fd4DeQDxGQEA8QDxGQEAyQChD/UD3ADxGf8AyQGaEQkE
wQG0ECkEuQExHTAEIQK2EzYEMQLQHz4E4QElFDoAQQIlFDoAoQENHkoE8QDPEFAESQKnIFYEUQLD
E10E5ADxGQEASQKTHY4EWQIQD5UEEQFED5wEGQEEHqIEaQLZGagEIQEYH1gAKQH9H64EEQHnFbME
IQGmH+kB5ACJCPwBEQGECOkB7ADxGQEA5ADZGb8B9AAYH88BSQK9D8gEeQLEENEE7ACJCPwB9ACm
H+kBeQJcAt0EoQFZIOIESQITIOgEQQHxGe4EYQHxGQEAyQGgHyoCAgA9ARsFCABUAREFCABYARYF
LgALABYFLgATAKIILgAbAKsILgAjAMoILgArANMILgAzAPwILgA7APwILgBDAAIJLgBLANMILgBT
ABEJLgBbAPwILgBjADEJQwBrABYFgQBzABYFoQBzABYFwQBzABYF4QBzABYFAAFzABYFAQFzABYF
IAFzABYFIQFzABYFQAFzABYFQQFzABYFYAFzABYFYwELABYFgAFzABYFgQFzABYFgwELABYFoAFz
ABYFoQFzABYFowF7ABYFwAFzABYFwQFzABYF4AFzABYF4QFzABYF4wFzABYF4wGLAIIJ4wGTABYF
AAJzABYFAQJzABYFIAJzABYFIQJzABYFIwJzABYFQAJzABYFQQJzABYFQwJzABYFYAJzABYFYQJz
ABYFYwJzABYFgAJzABYFgQJzABYFgwJzABYFoAJzABYFoQJzABYFowJzABYFwQJzABYFwwJzABYF
4QJzABYF4wJzABYFAQNzABYFAwNzABYFIANzABYFIQNzABYFIwNzABYFQANzABYFQQNzABYFQwNz
ABYFYANzABYFYQNzABYFYwNzABYFgANzABYFgQNzABYFgwNzABYFoANzABYFoQNzABYFowNzABYF
wANzABYFwQNzABYFwwNzABYF4ANzABYF4QNzABYFAARzABYFAQRzABYFIARzABYFIQRzABYFQARz
ABYFQQRzABYFYARzABYFYQRzABYFgARzABYFgQRzABYFoARzABYFoQRzABYFwARzABYFwQRzABYF
4ARzABYF4QRzABYFAAVzABYFAQVzABYFIAVzABYFIQVzABYFQAVzABYFQQVzABYFYQVzABYFgAVz
ABYFgQVzABYFoAVzABYFoQVzABYFwAVzABYFwQVzABYF4AVzABYF4QVzABYFAAZzABYFAQZzABYF
IAZzABYFIQZzABYFQAZzABYFQQZzABYFYAZzABYFYQZzABYFgAZzABYFgQZzABYFoAZzABYFoQZz
ABYFwAZzABYFwQZzABYF4AZzABYF4QZzABYFAAdzABYFAQdzABYFIAdzABYFIQdzABYFQAdzABYF
QQdzABYFYAdzABYFYQdzABYFgAdzABYFgQdzABYFoAdzABYFoQdzABYFwAdzABYFwQdzABYF4Adz
ABYF4QdzABYFAAhzABYFAQhzABYFIAhzABYFIQhzABYFQAhzABYFQQhzABYFYAhzABYFYQhzABYF
gAhzABYFgQhzABYFoAhzABYFoQhzABYFwAhzABYFwQhzABYF4AhzABYF4QhzABYFAAlzABYFAQlz
ABYFIAlzABYFIQlzABYFQQlzABYFYQlzABYFgQlzABYFoQlzABYFwQlzABYF4AlzABYF4QlzABYF
AApzABYFAQpzABYFCQqDAMoIIApzABYFKQqDAMoIQApzABYFYApzABYFYQpzABYFgApzABYFoApz
ABYFwApzABYF4ApzABYFAAtzABYFIAtzABYFQAtzABYFYAtzABYFgAtzABYFoAtzABYFwAtzABYF
4AtzABYFAAxzABYFIAxzABYFQAxzABYFYAxzABYFgAxzABYFoAxzABYFwAxzABYF4AxzABYFAA1z
ABYFIA1zABYFQA1zABYFYA1zABYFgA1zABYFwA1zABYF4A1zABYFAA5zABYFIA5zABYFQA5zABYF
YA5zABYFgA5zABYFoA5zABYFwA5zABYF4A5zABYFAA9zABYFIA9zABYFYA9zABYFgA9zABYFoA9z
ABYFwA9zABYF4A9zABYFABBzABYFIBBzABYFQBBzABYFgBBzABYFoBBzABYFwBBzABYF4BBzABYF
ABFzABYFIBFzABYFQBFzABYFYBFzABYFgBFzABYFoBFzABYFwBFzABYF4BFzABYFABJzABYFIBJz
ABYFQBJzABYFYBJzABYFgBJzABYFoBJzABYFwBJzABYF4BJzABYFABNzABYFIBNzABYFQBNzABYF
YBNzABYFgBNzABYFoBNzABYFwBNzABYF4BNzABYFABRzABYFIBRzABYFQBRzABYFYBRzABYFgBRz
ABYFoBRzABYFwBRzABYF4BRzABYFgBVzABYFoBVzABYFwBVzABYF4BVzABYFIBZzABYFgBYLABYF
oBYLABYFwBYLABYF4BYLABYFABibAHkJwQAdBRwAUQB8AGUC8QP7A0UEZQTZBAMAAQAEAAkABQAS
AAYAIwAHADIACAA4AAkAPAANAFAADgBSAAAAgQgZCAAAuBgdCAAAZBghCAAAfhQZCAAAXRUlCAAA
NxUlCAAAqR4lCAAAkRghCAAAgQgZCAAAuBgdCAAAZBghCAAAkRghCAAAfhQZCAAAjxclCAAAaxcl
CAAAqR4lCAAAWhwpCAAAgQgZCAAAfB8yCAAARyA3CAAAkRghCAAAChohCAAARRQ8CAAAJR5BCAAA
5BZGCAAA5g8ZCAAAqxYZCAAAhxYhCAAA3BYhCAAAXhohCAAAMBohCAAAjhohCAAAUx4hCAAAYBYh
CAAAGQgZCAAAAhcdCAAAPQgZCAAALxAdCAAAChohCAAA+wcZCAAADxAdCAAAeCAZCAAAXQgZCAAA
bRAdCAAAdhQZCAAA7AYhCAAAXhohCAAAMBohCAAAjhohCAAAgQgZCAAAuBgdCAAAeCAZCAAAeggZ
CAAARyA3CAAAex1LCAAAgQgZCAAAuBgdCAAAfhQZCAAARRQ8CAAAdAIZCAAAAAcZCAAA6RQZCAAA
4RxUCAAAwxwZCAAAuxpaCAAA0RpjCAAAwx1pCAAA+xtvCAAAWhx1CAAAex17CAAAGBiBCAAAuRWH
CAAA8heMCAAAjBEdCAAAcw8dCAAA1gYdCAAATxAdCAAAVB8dCAAAihgdCAAAVhmRCAAAERGXCAAA
yh6dCAIACAADAAEACQADAAIACgAFAAEACwAFAAIADAAHAAEADQAHAAIADgAJAAEADwAJAAIAEAAL
AAEAEQALAAIAEgANAAEAEwANAAIAFAAPAAEAFQAPAAIAFgARAAEAFwARAAIAGQATAAEAGgATAAIA
GwAVAAEAHAAVAAIAHQAXAAEAHgAXAAIAHwAZAAEAIAAZAAIAIQAbAAEAIgAbAAIAIwAdAAEAJAAd
AAIAJQAfAAEAJgAfAAIAJwAhAAEAKAAhAAIAKQAjAAEAKgAjAAIALAAlAAEALQAlAAIALgAnAAEA
LwAnAAIAMAApAAEAMQApAAIAMgArAAEAMwArAAIANAAtAAEANQAtAAIANgAvAAEANwAvAAIAOAAx
AAEAOQAxAAIAOgAzAAEAOwAzAAIAPAA1AAEAPQA1AAIAPgA3AAEAPwA3AAIAQAA5AAEAQQA5AAIA
QgA7AAEAQwA7AAIARAA9AAEARQA9AAIARgA/AAEARwA/AAIASABBAAEASQBBAAIASgBDAAEASwBD
AAIATABFAAEATQBFAAIATwBHAAEAUABHAAIAUQBJAAEAUgBJAAIAUwBLAAEAVABLAAIAVQBNAAEA
VgBNAAIAVwBPAAEAWABPAAIAWQBRAAEAWgBRAAIAWwBTAAEAXABTAAIAXQBVAAEAXgBVAAIAXwBX
AAEAYABXAAIAYQBZAAEAYgBZAAIAYwBbAAEAZABbAAIAZQBdAAEAZgBdAAIAZwBfAAEAaABfAAIA
aQBhAAEAagBhAAIAawBjAAEAbABjAAIAbgBlAAEAbwBlAAIAcABnAAEAcQBnAAIAcgBpAAEAcwBp
AAIAdABrAAEAdQBrAAIAdgBtAAEAdwBtAAIAeABvAAEAeQBvAAIAewBxAAEAfABxAAIAfQBzAAEA
fgBzAAIAfwB1AAEAgAB1AAIAgQB3AAEAggB3AAIAhAB5AAEAhQB5AAIAhgB7AAEAhwB7AAIAiAB9
AAEAiQB9AAIAigB/AAEAiwB/AAIAjACBAAEAjQCBAAIAjgCDAAEAjwCDAAIAkACFAAEAkQCFAAIA
kgCHAAEAkwCHAAIAlACJAAEAlQCJAAIAlgCLAAEAlwCLAAIAmACNAAEAmQCNAAIAmgCPAAEAmwCP
AAIAnACRAAEAnQCRAAIAngCTAAEAnwCTAAIAoACVAAEAoQCVAAIAogCXAAEAowCXAAIApACZAAEA
pQCZAAIApgCbAAEApwCbAAIArACdAAEArQCdAAIArgCfAAEArwCfAAIAuQChAAIAugCjAAEAuwCj
AAIAvAClALIA2ADkAPAA9wAeAXABngG4AcgB1AHtAfUBAgKyAsAC6AL1AgcDFwMlAz4DTgOKA84D
1gP/A4gEuAS/BMUEBIAAAAEAAAC8GzJTAAAAAAAA4gUAAAQAAAAAAAAAAAAAAPYEtgcAAAAABAAA
AAAAAAAAAAAA9gTdEAAAAAALAAAAAAAAAAAAAAD/BIMUAAAAAAsAAAAAAAAAAAAAAP8ECAcAAAAA
BAAAAAAAAAAAAAAA9gRsBwAAAAADAAAAAgCJKgAAAAAIBQ8XAAAAAAQAAAAAAAAAAAAAAPYE8BUA
AAAABAAAAAAAAAAAAAAA9gRqHAAAAAAAAAAAAQAAAJYbAAAQAAIAEQACABIAAgATAAIAFAACABUA
AgAWAAIAFwACABgAAgAZAAIAGgACABsAAgAcAAIAHQACAB4ACQAAAAAAaQEnBwAAAABrAScHagG5
AFMAuQBVALkAagHfAFMA3wBVAN8AaAHrAFMA6wBhAOsAZQBBAWcAWgFpAFoBbQCYAWUArAFlAN0B
aQDkAWEAWgFVAFoBgwAkAoUA5AGRAOsAgwC6ApsA4gJnALkAYQDwAoMA/QKbAP0CZQD9AmcAAwNT
AAMDZQAQA2cA3wCDAB8DmwAtA2kA8AJlAEcDgwCYAVMAWgGbAFYDZwDkAWcA8AJTAPACVQDwAmUA
kwNTAJoDhQDJA2EA3wCFAN8A0QDwAtsAIwQhAVoBAAAAAABJRFRTQ29ubmVjdGlvbk1hbmFnZXJE
YXRhYmFzZVBhcmFtZXRlcnMxMDAAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xMAA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzIwADw+OV9fNzJfMAA8U2F2ZURlY2lzaW9ucz5iX183
Ml8wADw+Y19fRGlzcGxheUNsYXNzN18wADw+OV9fOF8wADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nl
c3M+Yl9fOF8wADw+Y19fRGlzcGxheUNsYXNzOF8wADxEdW1wTTJNcURhdGE+Yl9fMAA8PjlfXzhf
MTEAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzExADw+OV9fOF8yMQA8U29sdmVyQ2Fs
Y3VsYXRpb25Qcm9jZXNzPmJfXzhfMjEAPFNhdmVEZWNpc2lvbnM+Yl9fNzJfMQA8PmNfX0Rpc3Bs
YXlDbGFzczdfMQA8PjlfXzhfMQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhfMQA8PmNf
X0Rpc3BsYXlDbGFzczhfMQA8RHVtcE0yTXFEYXRhPmJfXzEASUVudW1lcmFibGVgMQBJT3JkZXJl
ZEVudW1lcmFibGVgMQBMaXN0YDEAQ1MkPD44X19sb2NhbHMxADw+OV9fOF8xMgA8U29sdmVyQ2Fs
Y3VsYXRpb25Qcm9jZXNzPmJfXzhfMTIAPD45X184XzIyADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nl
c3M+Yl9fOF8yMgBUb0ludDMyAGdldF9Ub3RhbE0yAHNldF9Ub3RhbE0yADw+OV9fN18yADxEdW1w
TTJNcURhdGE+Yl9fN18yADw+Y19fRGlzcGxheUNsYXNzN18yADw+Y19fRGlzcGxheUNsYXNzOF8y
ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMgBGdW5jYDIASUdyb3VwaW5nYDIAQ1MkPD44
X19sb2NhbHMyADw+OV9fMTMAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xMwA8PjlfXzdf
MwA8RHVtcE0yTXFEYXRhPmJfXzdfMwA8PmNfX0Rpc3BsYXlDbGFzczdfMwA8PjlfXzhfMwA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhfMwA8PmNfX0Rpc3BsYXlDbGFzczhfMwBGdW5jYDMA
Q1MkPD44X19sb2NhbHMzADw+OV9fOF8xNAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhf
MTQAPD5jX19EaXNwbGF5Q2xhc3M3XzQAPD45X184XzQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vz
cz5iX184XzQAPD5jX19EaXNwbGF5Q2xhc3M4XzQAPER1bXBNMk1xRGF0YT5iX180AENTJDw+OF9f
bG9jYWxzNAA8PjlfXzhfMTUAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzE1ADw+Y19f
RGlzcGxheUNsYXNzN181ADw+OV9fOF81ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF81
ADw+Y19fRGlzcGxheUNsYXNzOF81ADxEdW1wTTJNcURhdGE+Yl9fNQA8U29sdmVyQ2FsY3VsYXRp
b25Qcm9jZXNzPmJfXzE2ADw+OV9fNgA8RHVtcE0yTXFEYXRhPmJfXzYAPFNvbHZlckNhbGN1bGF0
aW9uUHJvY2Vzcz5iX182ADw+OV9fOF8xNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzhf
MTcAPD45X184XzcAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzcAPD45X183ADxEdW1w
TTJNcURhdGE+Yl9fNwA8PjlfXzhfMTgAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX184XzE4
AFNUX2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMyZjllZjdkODU4ADw+OV9fN184ADxEdW1wTTJNcURh
dGE+Yl9fN184ADw+OV9fOF84ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF84ADxTb2x2
ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMTkAPD45AF9WdGJsR2FwMV85ADw+OV9fOF85ADxTb2x2
ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fOF85ADxEdW1wTTJNcURhdGE+Yl9fOQA8TW9kdWxlPgBn
ZXRfUHJvY2Vzc0lEAHNldF9Qcm9jZXNzSUQAZ2V0X01EUQBzZXRfTURRAGdldF9Ub3RhbE1RAHNl
dF9Ub3RhbE1RAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwBUAHZhbHVlX18AU1RfNTg1
YmEyZTkyYmRkNDJkZWI4MWY3YzBjZTg0MDJmYWEAR2V0Q29ubmVjdGlvbkZvclNjaGVtYQBTeXN0
ZW0uRGF0YQBEdW1wTTJNcURhdGEATWRxRGF0YQBTb2x2ZXJEYXRhAF9zb2x2ZXJEYXRhAFN5c3Rl
bS5EYXRhLk9sZURiAG1zY29ybGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRf
SWQAc2V0X0lkAGdldF9QYXRoSWQAc2V0X1BhdGhJZABnZXRfRnJvbUxvY2F0aW9uSWQAc2V0X0Zy
b21Mb2NhdGlvbklkAGdldF9Ub0xvY2F0aW9uSWQAc2V0X1RvTG9jYXRpb25JZABnZXRfQ29udHJh
Y3RJZABzZXRfQ29udHJhY3RJZABnZXRfUmVjZWlwdElkAHNldF9SZWNlaXB0SWQAUmVhZABBZGQA
UFNfcHJvY2Vzc19pZABkZWxpdmVyaWQAPFRvdGFsTTI+a19fQmFja2luZ0ZpZWxkADxQcm9jZXNz
SUQ+a19fQmFja2luZ0ZpZWxkADxNRFE+a19fQmFja2luZ0ZpZWxkADxUb3RhbE1RPmtfX0JhY2tp
bmdGaWVsZAA8SWQ+a19fQmFja2luZ0ZpZWxkADxQYXRoSWQ+a19fQmFja2luZ0ZpZWxkADxGcm9t
TG9jYXRpb25JZD5rX19CYWNraW5nRmllbGQAPFRvTG9jYXRpb25JZD5rX19CYWNraW5nRmllbGQA
PENvbnRyYWN0SWQ+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0SWQ+a19fQmFja2luZ0ZpZWxkADxE
ZWNpc2lvblRhYmxlPmtfX0JhY2tpbmdGaWVsZAA8RnJlZVRvU2NoZWR1bGU+a19fQmFja2luZ0Zp
ZWxkADxQYXRoTmFtZT5rX19CYWNraW5nRmllbGQAPFRvTG9jYXRpb25OYW1lPmtfX0JhY2tpbmdG
aWVsZAA8VXNlck5hbWU+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdE5hbWU+a19fQmFja2luZ0Zp
ZWxkADxUYWJsZVRvVXBkYXRlPmtfX0JhY2tpbmdGaWVsZAA8UGF0aD5rX19CYWNraW5nRmllbGQA
PFJhbms+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdFJhbms+a19fQmFja2luZ0ZpZWxkADxPYmpl
Y3RpdmVHb2FsPmtfX0JhY2tpbmdGaWVsZAA8bWluX3dpdGhkcmF3YWw+a19fQmFja2luZ0ZpZWxk
ADxtYXhfd2l0aGRyYXdhbD5rX19CYWNraW5nRmllbGQAPE1vZGVsPmtfX0JhY2tpbmdGaWVsZAA8
RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0RGVjaXNpb24+a19fQmFja2luZ0ZpZWxk
ADxOZXdEZWNpc2lvbj5rX19CYWNraW5nRmllbGQAPERlbGl2ZXJ5RGVjaXNpb24+a19fQmFja2lu
Z0ZpZWxkADxGcm9tTG9jYXRpb24+a19fQmFja2luZ0ZpZWxkADxtaW5faW5qZWN0aW9uPmtfX0Jh
Y2tpbmdGaWVsZAA8bWF4X2luamVjdGlvbj5rX19CYWNraW5nRmllbGQAPE9sZURiQ29ubmVjdGlv
bj5rX19CYWNraW5nRmllbGQAPFNxbENvbm5lY3Rpb24+a19fQmFja2luZ0ZpZWxkADxQb3NpdGlv
bj5rX19CYWNraW5nRmllbGQAPEZpeGVkUG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxTdG9yYWdl
UG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxEZXNjcmlwdGlvbj5rX19CYWNraW5nRmllbGQAPExv
c3NGYWN0b3I+a19fQmFja2luZ0ZpZWxkADxEZW1hbmRBZGp1c3RGYWN0b3I+a19fQmFja2luZ0Zp
ZWxkADxTdXBwbHlBZGp1c3RGYWN0b3I+a19fQmFja2luZ0ZpZWxkADxEZWxpdmVyeUFkanVzdEZh
Y3Rvcj5rX19CYWNraW5nRmllbGQAPE1EUXM+a19fQmFja2luZ0ZpZWxkADxNRFFEYXRhcz5rX19C
YWNraW5nRmllbGQAPERlbGl2ZXJpZXM+a19fQmFja2luZ0ZpZWxkADxQYXRocz5rX19CYWNraW5n
RmllbGQAPERlY2lzaW9ucz5rX19CYWNraW5nRmllbGQAPE51bWJlck9mRGVjaXNpb25zPmtfX0Jh
Y2tpbmdGaWVsZAA8Q29udHJhY3RzPmtfX0JhY2tpbmdGaWVsZAA8UmVjZWlwdHM+a19fQmFja2lu
Z0ZpZWxkADxDb250cmFjdD5rX19CYWNraW5nRmllbGQAPHJhdGNoZXRfbGltaXQ+a19fQmFja2lu
Z0ZpZWxkADxTdG9yYWdlQ29uc3RyYWludD5rX19CYWNraW5nRmllbGQAPFJlY2VpcHQ+a19fQmFj
a2luZ0ZpZWxkADxEZWxpdmVyeT5rX19CYWNraW5nRmllbGQAPFByaW9yaXR5PmtfX0JhY2tpbmdG
aWVsZABvcF9CaXR3aXNlQW5kAE9sZURiQ29tbWFuZABFeGVjdXRlQ29tbWFuZABHb2FsS2luZABn
ZXRfU3RhY2tUcmFjZQBDcmVhdGVJbnN0YW5jZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X01lc3NhZ2UA
QWRkUmFuZ2UAR2V0U2NoZW1hVGFibGUARGF0YVRhYmxlAGdldF9EZWNpc2lvblRhYmxlAHNldF9E
ZWNpc2lvblRhYmxlAFZhcmlhYmxlAEVudW1lcmFibGUASURpc3Bvc2FibGUAR2V0RG91YmxlAFJ1
bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9GcmVlVG9TY2hlZHVsZQBzZXRf
RnJlZVRvU2NoZWR1bGUAZ2V0X05hbWUAZ2V0X1BhdGhOYW1lAHNldF9QYXRoTmFtZQBnZXRfVG9M
b2NhdGlvbk5hbWUAc2V0X1RvTG9jYXRpb25OYW1lAGdldF9Vc2VyTmFtZQBzZXRfVXNlck5hbWUA
Z2V0X0NvbnRyYWN0TmFtZQBzZXRfQ29udHJhY3ROYW1lAHByb3BlcnR5TmFtZQBQU191c2VyX25h
bWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBzZXRfQ29tbWFuZFR5cGUAQ2hhbmdl
VHlwZQBHZXRUeXBlAFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1
bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBJbnRlcm5h
bERhdGFDb2xsZWN0aW9uQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBDbG9zZQBEaXNwb3Nl
AGdldF9UYWJsZVRvVXBkYXRlAHNldF9UYWJsZVRvVXBkYXRlAEFnZ3JlZ2F0ZQBFZGl0b3JCcm93
c2FibGVTdGF0ZQBFbmNsb3NlV2l0aFF1b3RlAERpc3BJZEF0dHJpYnV0ZQBDb21waWxlckdlbmVy
YXRlZEF0dHJpYnV0ZQBHdWlkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUA
RGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRy
aWJ1dGUARXh0ZW5zaW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBB
c3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbXBp
bGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2Vt
Ymx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBB
c3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAZ2V0
X1ZhbHVlAEFkZFdpdGhWYWx1ZQBTZXRWYWx1ZQBwcm9wZXJ0eVZhbHVlAHZhbHVlAGdldF9SZWFs
Tm9ubmVnYXRpdmUAU2ltcGxleERpcmVjdGl2ZQBTb2x2ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9u
aW5nAFRvU3RyaW5nAGNvbnN0cmluZwBnZXRfUGF0aABzZXRfUGF0aABwYXRoAGdldF9SYW5rAHNl
dF9SYW5rAGdldF9Db250cmFjdFJhbmsAc2V0X0NvbnRyYWN0UmFuawBNaWNyb3NvZnQuU3FsU2Vy
dmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBB
ZGRHb2FsAGdldF9PYmplY3RpdmVHb2FsAHNldF9PYmplY3RpdmVHb2FsAG9wX0dyZWF0ZXJUaGFu
T3JFcXVhbABvcF9MZXNzVGhhbk9yRXF1YWwAZ2V0X21pbl93aXRoZHJhd2FsAHNldF9taW5fd2l0
aGRyYXdhbABnZXRfbWF4X3dpdGhkcmF3YWwAc2V0X21heF93aXRoZHJhd2FsAGdldF9Nb2RlbABz
ZXRfTW9kZWwAQ3JlYXRlTW9kZWwAQ2xlYXJNb2RlbABTY3JpcHRPYmplY3RNb2RlbABTeXN0ZW0u
Q29tcG9uZW50TW9kZWwAU1RfZjM5MjMzZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4NTguZGxsAGdl
dF9JdGVtAFN5c3RlbQBUZXJtAFN1bQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4ARG9tYWlu
AGdldF9EZWNpc2lvbgBzZXRfRGVjaXNpb24AQWRkRGVjaXNpb24AZ2V0X1NvbHZlckRlY2lzaW9u
AHNldF9Tb2x2ZXJEZWNpc2lvbgBnZXRfUmVjZWlwdERlY2lzaW9uAHNldF9SZWNlaXB0RGVjaXNp
b24AZ2V0X05ld0RlY2lzaW9uAHNldF9OZXdEZWNpc2lvbgBuZXdEZWNpc2lvbgBnZXRfRGVsaXZl
cnlEZWNpc2lvbgBzZXRfRGVsaXZlcnlEZWNpc2lvbgBnZXRfRnJvbUxvY2F0aW9uAHNldF9Gcm9t
TG9jYXRpb24ATWljcm9zb2Z0LlNvbHZlci5Gb3VuZGF0aW9uAFN5c3RlbS5Db25maWd1cmF0aW9u
AFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9taW5faW5qZWN0aW9uAHNldF9taW5faW5qZWN0aW9u
AGdldF9tYXhfaW5qZWN0aW9uAHNldF9tYXhfaW5qZWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAE9s
ZURiUGFyYW1ldGVyQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBnZXRfT2xlRGJDb25uZWN0
aW9uAHNldF9PbGVEYkNvbm5lY3Rpb24AZ2V0X1NxbENvbm5lY3Rpb24Ac2V0X1NxbENvbm5lY3Rp
b24AZ2V0Y29ubmVjdGlvbgBnZXRfUG9zaXRpb24Ac2V0X1Bvc2l0aW9uAGdldF9GaXhlZFBvc2l0
aW9uAHNldF9GaXhlZFBvc2l0aW9uAGdldF9TdG9yYWdlUG9zaXRpb24Ac2V0X1N0b3JhZ2VQb3Np
dGlvbgBFeGNlcHRpb24AZ2V0X0Rlc2NyaXB0aW9uAHNldF9EZXNjcmlwdGlvbgBTb2x1dGlvbgBT
eXN0ZW0uRGF0YS5Db21tb24Ab2JqZWN0VG8AQ3VsdHVyZUluZm8AUHJvcGVydHlJbmZvAFN5c3Rl
bS5MaW5xAG15VmFyAGRyAE9sZURiRGF0YVJlYWRlcgBGcm9tRGF0YVJlYWRlcgBGcm9tT2xlUmVh
ZGVyAEV4ZWN1dGVSZWFkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBN
aWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIARXZlbnRzT2JqZWN0V3JhcHBl
cgBPbGVEYlBhcmFtZXRlcgBGaXJlRXJyb3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBBY3Rp
dmF0b3IALmN0b3IAZ2V0X0xvc3NGYWN0b3IAc2V0X0xvc3NGYWN0b3IAZ2V0X0RlbWFuZEFkanVz
dEZhY3RvcgBzZXRfRGVtYW5kQWRqdXN0RmFjdG9yAGdldF9TdXBwbHlBZGp1c3RGYWN0b3IAc2V0
X1N1cHBseUFkanVzdEZhY3RvcgBnZXRfRGVsaXZlcnlBZGp1c3RGYWN0b3IAc2V0X0RlbGl2ZXJ5
QWRqdXN0RmFjdG9yAC5jY3RvcgBzdHIAZ2V0X01EUXMAc2V0X01EUXMAZ2V0X01EUURhdGFzAHNl
dF9NRFFEYXRhcwBTeXN0ZW0uRGlhZ25vc3RpY3MAU1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3YzBj
ZTg0MDJmYWEuRXh0ZW5zaW9uTWV0aG9kcwBNaWNyb3NvZnQuU29sdmVyRm91bmRhdGlvbi5TZXJ2
aWNlcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGls
ZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMyZjll
ZjdkODU4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRf
RGVsaXZlcmllcwBzZXRfRGVsaXZlcmllcwBTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3
ZDg1OC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAZ2V0X1BhdGhzAHNldF9QYXRo
cwBnZXRfR29hbHMAU3lzdGVtLldpbmRvd3MuRm9ybXMAZ2V0X0RlY2lzaW9ucwBzZXRfRGVjaXNp
b25zAFNhdmVEZWNpc2lvbnMAZ2V0X051bWJlck9mRGVjaXNpb25zAHNldF9OdW1iZXJPZkRlY2lz
aW9ucwBVcGRhdGVTb2x2ZXJEZWNpc2lvbnMASUVOdW1lcmFibGVFeHRlbnNpb25zAE15RXh0ZW5z
aW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0ZXJzAFN1
Y2Nlc3MAU29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzAGdldF9EdHMAZ2V0X0NvbnRyYWN0cwBzZXRf
Q29udHJhY3RzAFNjcmlwdFJlc3VsdHMAR2V0R2VuZXJpY0FyZ3VtZW50cwBnZXRfRXZlbnRzAGdl
dF9SZWNlaXB0cwBzZXRfUmVjZWlwdHMAQ3JlYXRlUHJvY2Vzc1RhYmxlSWZOb3RFeGlzdHMAUG9w
dWxhdGVEVFNWYXJpYWJsZUlucHV0cwBnZXRfUm93cwBDb25jYXQAZ2V0X0NvbnRyYWN0AHNldF9D
b250cmFjdABjb250cmFjdABnZXRfU29sdmVyRGVjaXNpb25FeGFjdABzZXRfU29sdmVyRGVjaXNp
b25FeGFjdABnZXRfSW5uZXJPYmplY3QAU2VsZWN0AERpc3RpbmN0AG9wX0ltcGxpY2l0AGdldF9y
YXRjaGV0X2xpbWl0AHNldF9yYXRjaGV0X2xpbWl0AGdldF9EZWZhdWx0AEZpcnN0T3JEZWZhdWx0
AERUU0V4ZWNSZXN1bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0AFRvSW50AFN5c3RlbS5E
YXRhLlNxbENsaWVudABnZXRfQ3VycmVudABjdXJyZW50AEFkZENvbnN0cmFpbnQAZ2V0X1N0b3Jh
Z2VDb25zdHJhaW50AHNldF9TdG9yYWdlQ29uc3RyYWludABDb3VudABnZXRfUmVjZWlwdABzZXRf
UmVjZWlwdAByZWNlaXB0AENvbnZlcnQAVG9MaXN0AGxpc3QARmlyc3QATW92ZU5leHQAU29sdmVy
Q29udGV4dABHZXRDb250ZXh0AERhdGFSb3cAU2hvdwBpbmRleABNZXNzYWdlQm94AFRoZW5CeQBH
cm91cEJ5AE9yZGVyQnkAZ2V0X0l0ZW1BcnJheQBUb0FycmF5AGdldF9Bc3NlbWJseQBFeGVjdXRl
Tm9uUXVlcnkAcXVlcnkAZ2V0X0RlbGl2ZXJ5AHNldF9EZWxpdmVyeQBkZWxpdmVyeQBvcF9JbmVx
dWFsaXR5AGdldF9Qcmlvcml0eQBzZXRfUHJpb3JpdHkAcHJpb3JpdHkARW1wdHkARmlsbE9iamVj
dFdpdGhQcm9wZXJ0eQBHZXRQcm9wZXJ0eQAAAB9PAEwARQBfAEMATwBOAE4AXwBNAGEAaQBuAEQA
QgAAF1MAYwByAGkAcAB0AF8AVABhAHMAawAAAw0AABlQAFMAXwBQAHIAbwBjAGUAcwBzAEkARAAA
GVAAUwBfAHUAcwBlAHIAXwBuAGEAbQBlAABHYQBkAGkAaABhAF8AcAByAG8AYwBlAHMAcwAuAGQA
YgBvAC4AcwBvAGwAdgBlAHIAXwBkAGUAYwBpAHMAaQBvAG4AcwBfAAADXwAAYWEAZABpAGgAYQBf
AHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAGMAbwBuAHQAcgBhAGMAdAB3AGkAcwBlAF8AZABlAHQA
YQBpAGwAXwBtAGQAcQBfAGcAcgBvAHUAcABfAABLYQBkAGkAaABhAF8AcAByAG8AYwBlAHMAcwAu
AGQAYgBvAC4AcwB0AG8AcgBhAGcAZQBfAGMAbwBuAHMAdAByAGEAaQBuAHQAXwAAR2EAZABpAGgA
YQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAdABvAHIAYQBnAGUAXwBwAG8AcwBpAHQAaQBv
AG4AXwAAa0UAWABFAEMAIABzAHAAYQBfAGYAbABvAHcAXwBvAHAAdABpAG0AaQB6AGEAdABpAG8A
bgAgAEAAZgBsAGEAZwAgAD0AIAAnAGIAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwAB
AycAAXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUA
cgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAHIAJwAsACAAQABwAHIAbwBjAGUAcwBz
AF8AaQBkAD0AJwABJycALAAgAEAAdQBzAGUAcgBfAGwAbwBnAGkAbgBfAGkAZAA9ACcAAQUnACAA
AXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBf
AHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAGQAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8A
aQBkAD0AJwABeUUAWABFAEMAIABzAHAAYQBfAHIAdQBuAF8AcwBpAG0AcABsAGUAeABfAHMAbwBs
AHYAZQByAF8AcABhAGMAawBhAGcAZQAgAEAAZgBsAGEAZwA9ACcAbQAnACwAIABAAHAAcgBvAGMA
ZQBzAHMAXwBpAGQAPQAnAAEPTgBvACAAUABhAHQAaAAAF04AbwAgAEMAbwBuAHQAcgBhAGMAdAAA
A0QAAANDAAAJZwBvAGEAbAAAAQB5RQBYAEUAQwAgAHMAcABhAF8AcgB1AG4AXwBzAGkAbQBwAGwA
ZQB4AF8AcwBvAGwAdgBlAHIAXwBwAGEAYwBrAGEAZwBlACAAQABmAGwAYQBnAD0AJwB1ACcALAAg
AEAAcAByAG8AYwBlAHMAcwBfAGkAZAA9ACcAAWNUAFIAVQBOAEMAQQBUAEUAIABUAEEAQgBMAEUA
IABhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBzAG8AbAB2AGUAcgBfAGQAZQBj
AGkAcwBpAG8AbgBzAAAHQABwADEAABlJAE4AUwBFAFIAVAAgAEkATgBUAE8AIAAAgesgACgAcwBv
AHUAcgBjAGUAXwBpAGQALAAgAFsAcwBvAHUAcgBjAGUAXQAsACAAZABlAHMAdABpAG4AYQB0AGkA
bwBuAF8AaQBkACwAIABbAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBdACwAIABtAGQAcQAsACAAcgBl
AGMAZQBpAHYAZQBkACwAIABnAG8AYQBsAF8AbwBiAGoAZQBjAHQAaQB2AGUALAAgAGwAbwBzAHMA
XwBmAGEAYwB0AG8AcgAsACAAcABhAHQAaABfAGkAZAAsAGMAbwBuAHQAcgBhAGMAdABfAGkAZAAs
ACAAZABlAGwAaQB2AGUAcgB5ACwAIAByAGUAYwBlAGkAdgBlAGQAXwBtAGQAcQAsAHAAYQB0AGgA
XwBwAHIAaQBvAHIAaQB0AHkALABjAG8AbgB0AHIAYQBjAHQAXwByAGEAbgBrACwAcwBvAHUAcgBj
AGUAXwBwAG8AcwBpAHQAaQBvAG4ALABzAG8AdQByAGMAZQBfAHIAYQBuAGsALABkAGUAcwB0AGkA
bgBhAHQAaQBvAG4AXwBwAG8AcwBpAHQAaQBvAG4ALABkAGUAcwB0AGkAbgBhAHQAaQBvAG4AXwBy
AGEAbgBrACkAIABWAGEAbAB1AGUAcwAgACgAAAUsACcAAQUnACwAAQMsAAAHJwAsACcAAQUpACAA
AAlOAFUATABMAABxUwBUAF8AZgAzADkAMgAzADMAZgBhAGMAMQA2AGUANAAyADYAZAA5ADkAMQBk
ADkAMwAyAGYAOQBlAGYANwBkADgANQA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8A
dQByAGMAZQBzAAAAAKYqmxsA5dFEjWdLLqXDk9cAAyAAAQQgAQEIBSABAREVBCABAQ4GIAEBEYCp
BAcBEkEFIAASgMEFIAASgMUGIAESgMkcBSAAEoDNAyAADgYAAw4ODg4CBg4IIAUCCA4ODggGBwIS
SRJBAyAAHAUgABKA1QYgARKA2RwHAAQODg4ODgYgAgEOEkkDIAAIKgcQEk0IHRIQCBJEFRFVARIc
EkgdEgwSTAgSUBUSWQISHAISWBJUEhgSQQUAAQ4dDgQgABJNBhUSUQESDAQKARIMDRABAR0eABUS
gIUBHgALEAEBCBUSgIUBHgAGFRJRARIQBAoBEhAGFRJRARIYBAoBEhgGFRJRARIUBxUSWQISGAIF
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
DgMoAA0DKAAKCCgAFRJRARIcBCgAEgwEKAASEAQoABIcBCgAEiAEKAASZQgoABUSUQESIAUoAB0S
ZQgoABUSUQESFAUoAB0SGAUoAB0SDAUoAB0SEAUoAB0SHAUoAB0SIAUoABKAgQQoABJhBCgAEkkF
CAASgKEFCAASgKUECAASOAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEI
AQACAAAAAAAoAQAjU1RfZjM5MjMzZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4NTgAAAUBAAAAAA4B
AAlNaWNyb3NvZnQAAB8BABpDb3B5cmlnaHQgQCBNaWNyb3NvZnQgMjAxNAAARwEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29y
ayA0CAEAGgAAAAAAKQEAJDNBMTk5OTYxLTg5NUItNDFEMi1BMzA0LTNFMEI3MTFFMjU4RgAAtAAA
AM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2
MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQ
QURQQURQtAAAAKygAAAAAAAAAAAAAMagAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC4oAAAAAAA
AAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWMAAAD4EAAAAAAAAAAAAAD4ENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQAyU7wbAAABADJTvBs/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsASeAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAB6AwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAANAAKAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAAAHAAJAABAEYAaQBsAGUARABlAHMA
YwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBk
ADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMA
aQBvAG4AAAAAADEALgAwAC4ANwAxADAAMAAuADIAMQAyADkAOAAAAAAAcAAoAAEASQBuAHQAZQBy
AG4AYQBsAE4AYQBtAGUAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkA
OQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgALgBkAGwAbAAAAFoAGwABAEwAZQBnAGEAbABD
AG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAE0AaQBjAHIAbwBzAG8A
ZgB0ACAAMgAwADEANAAAAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAA
AAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AZgAzADkA
MgAzADMAZgBhAGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4
AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGYAMwA5ADIA
MwAzAGYAYQBjADEANgBlADQAMgA2AGQAOQA5ADEAZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAA
AEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwAxADAAMAAuADIA
MQAyADkAOAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4ANwAxADAAMAAuADIAMQAyADkAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAwAAADYMAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="122"
            Column="17" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>