<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.157"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="985"
  DTS:VersionGUID="{44F2BB80-2D26-468F-9D67-6B76BC99D070}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=EU-D-SQL01.farrms.us,2033;User ID=trm_enercity_db_user;Initial Catalog=TRMTracker_Enercity;Provider=SQLNCLI11.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TEST"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">245CC58F_F6A8_4246_8130_D5F23D48585E</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">adangol</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{03EF4576-714D-44EE-80B6-ADEB18E884F0}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="MdqData.cs"/>
		<msb:File Include="MDQ.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Supply.cs"/>
		<msb:File Include="Delivery.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Path.cs"/>
		<msb:File Include="Contract.cs"/>
		<msb:File Include="SolverData.cs"/>
		<msb:Breakpoint Include="915ce05a34f34d0a9be18010173e90e9">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>363</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="92a8d8a6032f4223a38021efa4d4b8ab">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>121</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="87eea4960a7a48deb50bf258ddeaa672">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>123</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="be408d9866bf47ac9f4e74f0fbcaffef">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>124</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="2b584bd0a9e846f5bc1619a5059c8e69">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>324</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="57ec78f6abd2460eb3a3b2725b6b7f09">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>384</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="8393c570eef0486684d65473fd90d6c0">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>485</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="cff86f8bac0346e284c9096d8aced38c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>278</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0856fe96d7cf407a841d8465e3abb099">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>403</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="f75dd88fb02641b3b52218a0cb921d2c">
			<msb:FileName>SolverData.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>55</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Contract.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="MdqData.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public string StorageType { get; set; }
        public int IsDST { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Linq;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_f39233fac16e426d991d932f9ef7d858;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>


        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Supply>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contract =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id).OrderBy(X=> X.ContractRank)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .FirstOrDefault();
                    }
                }


                index = 0;
                foreach (Supply receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contract = new Contract() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract;
                            if (contract == null)
                                path.Contract = new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path };
                            //foreach (Contract contract in path.Contracts)
                            //{
                            var mdqCollection = _solverData.MDQDatas.Where(z => z.FromLocationId == receipt.Id & z.ToLocationId == delivery.Id & z.ContractId == contract.Id & z.PathId == path.Id)
                                .Select(z =>
                                        new MDQ()
                                        {
                                            Id = index,
                                            Delivery = delivery,
                                            Supply = receipt,
                                            Position = z.MDQ,
                                            Contract = new Contract() { Id = z.ContractId, Description = z.ContractName, Rank = z.ContractRank },
                                            Decision = new Decision(Domain.RealNonnegative, "D" + index),
                                            Path = new Path() { Id = z.PathId, Description = z.PathName, ReceiptId = receipt.Id },
                                            LossFactor = z.LossFactor,
                                            SupplyAdjustFactor = z.SupplyAdjustFactor,
                                            DeliveryAdjustFactor = z.DeliveryAdjustFactor,
                                            DemandAdjustFactor = z.DemandAdjustFactor,
                                            TermStart = z.TermStart,
                                            Hour = z.Hour,
                                            Granularity = z.Granularity,
                                            StorageType = z.StorageType,
                                            SupplyPosition = z.SupplyPosition,
                                            DemandPosition = z.DemandPosition,
                                            IsDST = z.IsDST
                                        })
                                .ToList();

                            _solverData.MDQs.AddRange(mdqCollection);
                            /*
                            _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }
                                */
                            index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Supply[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Supply receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Supply.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Supply.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();

                        paths = mdqs.Where(x => x.Supply.Id == receipt.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.Path.Id,
                                        Description = x.Path.Description,
                                        Priority = x.Path.Priority,
                                        ReceiptId = x.Path.ReceiptId,
                                        Delivery = x.Delivery,
                                        Contract = new Contract() { Id = x.Contract.Id, Description = x.Contract.Description, Rank = x.Contract.Rank }
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToArray();


                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract; // path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                                                               //foreach (Contract contract in contracts)
                                                               //{
                                                               //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            context.ClearModel();
                            Model model = context.CreateModel();

                            //  Contract according to their rankings
                            //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Supply.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                            if (mdqtoadjust.Count() == 0) continue;
                            //  MDQ Constraint
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Decision = new Decision(Domain.RealNonnegative, "D" + Guid.NewGuid().ToString().Replace("-", "_").ToUpper());
                                model.AddDecision(mdq.Decision);
                                model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position
                                                        & mdq.Decision <= mdq.Supply.Position
                                                        & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor
                                                        & mdq.Decision <= receipt.Position
                                                        & mdq.Decision <= mdq.Supply.max_withdrawal
                                                        & mdq.Decision >= mdq.Supply.min_withdrawal
                                                        & mdq.Decision <= mdq.Delivery.max_injection
                                                        & mdq.Decision >= mdq.Delivery.min_injection
                                                        & mdq.Decision <= mdq.Delivery.ratchet_limit
                                                        & mdq.Decision <= mdq.Supply.ratchet_limit
                                                        & mdq.Decision <= mdq.SupplyPosition
                                                        & mdq.Decision <= mdq.DemandPosition);
                            }
                            //  Row constraint
                            Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                            //Column Constraint
                              model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position);
                            //  Sum of Hourly supply constraint / Demand Constraint
                            //model.AddConstraint("SUPPLY" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.SupplyPositionHourly));
                            //model.AddConstraint("DEMAND" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.DemandPositionHourly));

                            //  Decisions to solve
                            //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                            model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                            _solverData.Model = model;
                            var simplex = new SimplexDirective();
                            Solution solution = context.Solve(simplex);
                            Goal goal = model.Goals.FirstOrDefault();
                            if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                            //receipt.Position -= goal.ToInt();

                            //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Solved = true;
                                mdq.ReceiptDecision = mdq.SolverDecision;
                                if (mdq.SupplyPosition == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                {
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position -= mdq.SolverDecision;
                                    //***********************
                                    mdqtoadjust.AdjustPosition(mdq);
                                    //**********************
                                    mdq.Delivery.Position -= mdq.DeliveryDecision;
                                }
                                else if (mdq.SolverDecision < mdq.SupplyPosition && mdq.SolverDecision != 0)
                                {
                                    //  sd - 5000 , p 8038
                                    double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                    double availablePosition = mdq.SupplyPosition - sdLossFactor;

                                    if (availablePosition >= 0)
                                    {
                                        mdq.ReceiptDecision = sdLossFactor;
                                        mdq.DeliveryDecision = mdq.SolverDecision;
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                    }
                                    else
                                    {
                                        mdq.ReceiptDecision = sdLossFactor - (mdq.SupplyPosition - mdq.SolverDecision);
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.ReceiptDecision = mdq.SupplyPosition;
                                            mdq.DeliveryDecision = mdq.ReceiptDecision * (1 - mdq.LossFactor);
                                        }
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }
                                }
                                else if (mdq.SolverDecision > mdq.SupplyPosition)
                                {
                                    mdq.ReceiptDecision = mdq.SupplyPosition;
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position = 0;
                                    mdqtoadjust.AdjustPosition(mdq);
                                    mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                }
                            }
                            //  Unsolved items from same supply side
                            List<MDQ> unSolvedMdqs = _solverData.MDQs.Where(x => !x.Solved && x.Supply.Id == receipt.Id).ToList();
                            MDQ m = mdqtoadjust.FirstOrDefault(); ;
                            if (m != null && m.StorageType.ToUpper() == "WITHDRAWAL")
                            {
                                //  solved received decision sum
                                double receivedSum = mdqtoadjust.Where(x=> x.Supply.Id == m.Supply.Id).Sum(x => x.ReceiptDecision);
                                foreach (MDQ item in unSolvedMdqs)
                                    item.SupplyPosition -= receivedSum;
                            }
                            else
                            {
                                foreach (MDQ item in unSolvedMdqs)
                                {
                                    //  Solved items for same supply side including hour
                                    double solvedSum = _solverData.MDQs.Where(x => x.Solved && x.Supply.Id == receipt.Id && x.Hour == item.Hour && x.IsDST == item.IsDST).Sum(x => x.ReceiptDecision);
                                    //  Lesser the supply position value of unsolved mdq
                                    item.SupplyPosition -= solvedSum;
                                }
                            }

                            //  Work in progress Delivery point 
                            int deliveryPoint = mdqtoadjust.FirstOrDefault().Delivery.Id;
                            List<MDQ> pendingMdqsToBeSolved = _solverData.MDQs.Where(x => x.Supply.Id != receipt.Id && x.Delivery.Id == deliveryPoint && x.Solved == false).ToList();
                            foreach (var item in pendingMdqsToBeSolved)
                            {
                                List<MDQ> currentlySolved = _solverData.MDQs.Where(x => x.Delivery.Id == deliveryPoint && x.Supply.Id == receipt.Id && x.Hour == item.Hour && x.Solved == true && x.IsDST == item.IsDST).ToList();
                                double solvedSum = currentlySolved.Sum(x => x.DeliveryDecision);
                                item.DemandPosition -= solvedSum;
                            }
                        }
                    }
                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static void AdjustPosition(this MDQ[] mdqToAdjust, MDQ curentlySolvedMdq)
        {
            if (curentlySolvedMdq.StorageType.ToUpper() == "WITHDRAWAL")
            {
                //  Add logic to manipulate supply position of mdq collection where hour greater than currently solved mdq
                int hour = curentlySolvedMdq.Hour;
                List<MDQ> unAdjustedMdq = mdqToAdjust.Where(x => x.Hour >= hour).ToList();
                foreach (var item in unAdjustedMdq)
                {
                    item.SupplyPosition -= curentlySolvedMdq.ReceiptDecision;
                }
            }

            mdqToAdjust.Where(x => x.Id == curentlySolvedMdq.Id && x.Hour == curentlySolvedMdq.Hour && x.IsDST == curentlySolvedMdq.IsDST).FirstOrDefault().Supply.Position -= curentlySolvedMdq.ReceiptDecision;
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Delivery.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }

        public virtual List<Path> Paths { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Contract.cs" />
    <Compile Include="Delivery.cs" />
    <Compile Include="MDQ.cs" />
    <Compile Include="MdqData.cs" />
    <Compile Include="Path.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SolverData.cs" />
    <Compile Include="Supply.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Supply.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Supply
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_withdrawal { get; set; }
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="MDQ.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MDQ
    {
        public int Id { get; set; }
        public Supply Supply { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public virtual bool Solved { get; set; }

        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set
            {
                SolverDecisionExact = value;
                Solved = true;
            }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();

                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }

        private string _storageType;

        public string StorageType
        {
            get { return _storageType; }
            set
            {
                _storageType = value;
                //  Logic to overide supply position based on storage type
                switch (_storageType.ToUpper())
                {
                    case "WITHDRAWAL":
                        this.SupplyPosition = this.Supply.Position;
                        break;
                    default:
                        this.SupplyPosition = this.SupplyPosition;
                        break;
                }
            }
        }

        public int IsDST { get; internal set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Path.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual Contract Contract { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="SolverData.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Supply[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */            
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank,[term_start],[hour],[granularity], supply_position, demand_position,is_dst) " +
                                                                                                    "Values (" + q.Supply.Id + ",'" + q.Supply.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Supply.FixedPosition.ToString() + "," + q.Supply.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ",'" + q.TermStart.ToString("yyyy-MM-dd HH:mm:ss") + "'," + q.Hour + "," + q.Granularity + "," + q.SupplyPosition + "," + q.DemandPosition + "," + q.IsDST + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            if (!string.IsNullOrEmpty(query))
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
BwEABnNHAAAKJRMMfYwAAAQRDCgZAAArfoIAAAQlLRcmfnQAAAT+BvwAAAZzTAAACiWAggAABCgj
AAArKAsAACsoDAAAK36DAAAEJS0XJn50AAAE/gb9AAAGczQAAAolgIMAAAQoDQAAK36EAAAEJS0X
Jn50AAAE/gb+AAAGczYAAAolgIQAAAQoDgAAKyglAAArEw0WEwk4rwgAAHMNAQAGEw4RDhEGfZYA
AAQRDhENEQmafZIAAAQRDhEOe5IAAARvlAAABn2TAAAEBm9NAAAKBm9OAAAKEw8RBxEO/gYOAQAG
c0cAAAooGQAAKygmAAArKCcAACsTEBEQKCgAACs5QAgAABEQExUWExY4GAIAABEVERaaExcRFyhP
AAAKcncDAHAoUAAAChMYEhj+FhwAAAFvIgAACnJ7AwBwcrkAAHBvUQAACm9SAAAKKFMAAApzVAAA
Cm85AAAGEQ8RF284AAAGb1UAAAoRD3J/AwBwERdvOAAABm9WAAAKKFMAAAoRF284AAAGERdvMAAA
BihXAAAKKFgAAAoRF284AAAGERdvLAAABm/TAAAGKFcAAAooWAAACihZAAAKERdvOAAABhEXby4A
AAZvHQAABhEXb0QAAAZaKFcAAAooWAAACihZAAAKERdvOAAABhEOe5YAAAR7jwAABHuKAAAEb9MA
AAYoVwAACihYAAAKKFkAAAoRF284AAAGERdvLAAABm/NAAAGbChXAAAKKFgAAAooWQAAChEXbzgA
AAYRF28sAAAGb88AAAZsKFcAAAooWgAACihZAAAKERdvOAAABhEXby4AAAZvIQAABmwoVwAACihY
AAAKKFkAAAoRF284AAAGERdvLgAABm8jAAAGbChXAAAKKFoAAAooWQAAChEXbzgAAAYRF28uAAAG
byUAAAZsKFcAAAooWAAACihZAAAKERdvOAAABhEXbywAAAZv0QAABmwoVwAACihYAAAKKFkAAAoR
F284AAAGERdvTgAABihXAAAKKFgAAAooWQAAChEXbzgAAAYRF29QAAAGKFcAAAooWAAACihZAAAK
b1sAAAomERYXWBMWERYRFY5pP939//8REH6FAAAEJS0XJn50AAAE/gb/AAAGc1wAAAolgIUAAAQo
KQAAKygqAAArExERD3KDAwBwEQ57lgAABHuPAAAEe4oAAARvxQAABhMWEhYoXQAAChEOe5IAAARv
igAABhMWEhYoXQAACigbAAAKERETGREZKF4AAAoRDnuWAAAEe48AAAR7igAABG/TAAAGKFcAAAoo
WAAACm9bAAAKJhEPcosDAHARDnuWAAAEe48AAAR7igAABG/FAAAGExYSFihdAAAKEQ57kgAABG+K
AAAGExYSFihdAAAKKBsAAAoRERMZERkoXgAAChEOe5IAAARvkgAABm8dAAAGKFcAAAooWAAACm9b
AAAKJhEPcpMDAHAWERETGREZKF4AAApvXwAACiYCewEAAAQRD2+wAAAGc2AAAAoTEgYXjUEAAAEl
FhESom9hAAAKJhEPb2IAAAooKwAAKxMTERMsGQJ7AQAABCVvmwAABhETKAsAAAZYb5wAAAYREBMV
FhMWOAwCAAARFREWmhMaERoXb1MAAAYRGhEab1YAAAZvPwAABhEab04AAAYRGm9WAAAGM1oRGm9W
AAAGIwAAAAAAAAAALkgRGhEabz4AAAYjAAAAAAAA8D8RGm8yAAAGWVpvQQAABhEQERooDAAABhEa
by4AAAYlbx0AAAYRGm9AAAAGWW8eAAAGOH8BAAARGm9WAAAGERpvTgAABkEDAQAAERpvVgAABiMA
AAAAAAAAADvuAAAAERpvVgAABiMAAAAAAADwPxEabzIAAAZZWxMbERpvTgAABhEbWSMAAAAAAAAA
ADdHERoRG28/AAAGERoRGm9WAAAGb0EAAAYREBEaKAwAAAYRGm8uAAAGJW8dAAAGERpvQAAABhEa
b0YAAAZaWW8eAAAGOOAAAAARGhEbERpvTgAABhEab1YAAAZZWW8/AAAGERpvTgAABhEbNC4RGhEa
b04AAAZvPwAABhEaERpvPgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAA
BiVvHQAABhEab0AAAAZZbx4AAAYraREab1YAAAYRGm9OAAAGNlkRGhEab04AAAZvPwAABhEaERpv
PgAABiMAAAAAAADwPxEabzIAAAZZWm9BAAAGERARGigMAAAGERpvLgAABiVvHQAABhEab0AAAAYR
Gm9GAAAGWllvHgAABhEWF1gTFhEWERWOaT/p/f//AnsBAAAEb6EAAAYRDnuWAAAEe48AAAR7jQAA
BCUtLiYRDnuWAAAEe48AAAQRDnuWAAAEe48AAAT+BggBAAZzRwAACiUTDH2NAAAEEQwoGQAAKygV
AAArExQRDhEQKCwAACt9lAAABBEOe5QAAAQ5kwAAABEOe5QAAARvWAAABm9SAAAKcp0DAHAoYwAA
Cix2ERARDv4GDwEABnNHAAAKKBkAACt+hgAABCUtFyZ+dAAABP4GAAEABnNkAAAKJYCGAAAEKC0A
ACsTHBEUb2YAAAoTHSsVEh0oZwAACiVvTgAABhEcWW9PAAAGEh0oaAAACi3i3agAAAASHf4WGQAA
G28+AAAK3BEUb2YAAAoTHSt2cxEBAAYTHhEeEQ59mAAABBEeEh0oZwAACn2XAAAEAnsBAAAEb6EA
AAYRHv4GEgEABnNHAAAKKBkAACt+hwAABCUtFyZ+dAAABP4GAQEABnNkAAAKJYCHAAAEKC0AACsT
HxEee5cAAAQlb04AAAYRH1lvTwAABhIdKGgAAAotgd4OEh3+FhkAABtvPgAACtwRDhEQKCwAACtv
LgAABm8XAAAGfZUAAAQCewEAAARvoQAABhEO/gYQAQAGc0cAAAooGQAAKygVAAArb2YAAAoTHSt7
cxMBAAYTIBEgEQ59mgAABBEgEh0oZwAACn2ZAAAEAnsBAAAEb6EAAAYRIP4GFAEABnNHAAAKKBkA
ACsoFQAAK36IAAAEJS0XJn50AAAE/gYCAQAGc2QAAAolgIgAAAQoLQAAKxMhESB7mQAABCVvUAAA
BhEhWW9RAAAGEh0oaAAACjp5////3g4SHf4WGQAAG28+AAAK3BEJF1gTCREJEQ2OaT9G9///EQUX
WBMFEQURBI5pP9r0//8IF1gMCAeOaT8i9P//AnsBAAAEb6EAAAZ+iQAABCUtFyZ+dAAABP4GAwEA
BnNcAAAKJYCJAAAEKCkAACsoKgAAKyYCewEAAAQXb7sAAAbeRRMiAigUAAAKbxgAAAoWciEAAHAR
Im8ZAAAKcjkAAHARIm8aAAAKKBsAAAp+HAAAChZvHQAACiYCKBQAAAoXbxcAAAreACoAAEFkAAAC
AAAAcwoAACUAAACYCgAADgAAAAAAAAACAAAArwoAAIMAAAAyCwAADgAAAAAAAAACAAAAgQsAAIsA
AAAMDAAADgAAAAAAAAAAAAAAAAAAAIwMAACMDAAARQAAABAAAAFKAnPDAAAGfQEAAAQCKGkAAAoq
XgNQb2oAAAoEb2sAAAoDUAUUb2wAAAoqHgIobQAACioAGzAGAPsAAAAFAAARcwgAAAYKc24AAAoL
OI8AAAACb2oAAApvbwAAChaaKHAAAAoNA29xAAAKEwQRBCxpEQRvcgAACm9zAAAKEwUrOREFb3QA
AAp0JgAAARMGBhIDEQZvdQAAChaabyIAAAoDEQZvdQAAChaabyIAAApvdgAAChRvBwAABhEFb3cA
AAotvt4VEQV1JwAAARMHEQcsBxEHbz4AAArcBwlveAAACgNveQAACjpm////c3oAAAoMB297AAAK
EwgrJRIIKHwAAAoTCQgRCdAdAAAbKH0AAAoofgAACqUdAAAbb38AAAoSCCiAAAAKLdLeDhII/hYc
AAAbbz4AAArcCCoAARwAAAIAPgBGhAAVAAAAAAIAuQAy6wAOAAAAABswBgD7AAAABQAAEXMIAAAG
CnNuAAAKCziPAAAAAm9qAAAKb28AAAoWmihwAAAKDQNvcQAAChMEEQQsaREEb3IAAApvcwAAChMF
KzkRBW90AAAKdCYAAAETBgYSAxEGb3UAAAoWmm8iAAAKAxEGb3UAAAoWmm8iAAAKb3YAAAoUbwcA
AAYRBW93AAAKLb7eFREFdScAAAETBxEHLAcRB28+AAAK3AcJb3gAAAoDb3kAAAo6Zv///3N6AAAK
DAdvewAAChMIKyUSCCh8AAAKEwkIEQnQHQAAGyh9AAAKKH4AAAqlHQAAG29/AAAKEggogAAACi3S
3g4SCP4WHAAAG28+AAAK3AgqAAEcAAACAD4ARoQAFQAAAAACALkAMusADgAAAAAbMAEAFQAAAAYA
ABECbyIAAAoogQAACgreBSYWCt4ABioAAAABEAAAAAAAAA4OAAUQAAABGzADAMoAAAAHAAARcxUB
AAYKBgN9mwAABAZ7mwAABG9YAAAGb1IAAApynQMAcChjAAAKLG1zFwEABgsHBnubAAAEb0oAAAZ9
nAAABAIH/gYYAQAGc0cAAAooGQAAKygVAAArb2YAAAoMKx4SAihnAAAKJW9OAAAGBnubAAAEbz4A
AAZZb08AAAYSAihoAAAKLdneDhIC/hYZAAAbbz4AAArcAgb+BhYBAAZzRwAACigZAAArKCwAACtv
LAAABiVv0wAABgZ7mwAABG8+AAAGWW/UAAAGKgAAARAAAAIAXQAriAAOAAAAAJICcrMDAHAoggAA
CiwRcr0DAHACcr0DAHAoGwAACipyswMAcCoeAnsEAAAEKiICA30EAAAEKh4CewUAAAQqIgIDfQUA
AAQqHgJ7BgAABCoiAgN9BgAABCoeAnsHAAAEKiICA30HAAAEKh4CewgAAAQqIgIDfQgAAAQqHgJ7
CQAABCoiAgN9CQAABCoeAnsKAAAEKiICA30KAAAEKh4CewsAAAQqIgIDfQsAAAQqHgJ7DAAABCoi
AgN9DAAABCoeAnsNAAAEKiICA30NAAAEKh4Cew4AAAQqIgIDfQ4AAAQqHgJ7DwAABCoiAgN9DwAA
BCoeAnsQAAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9EgAABCoeAnsT
AAAEKiICA30TAAAEKh4CexQAAAQqIgIDfRQAAAQqHgJ7FQAABCoiAgN9FQAABCoeAnsWAAAEKiIC
A30WAAAEKh4CexcAAAQqIgIDfRcAAAQqHgJ7GAAABCoiAgN9GAAABCoeAnsZAAAEKiICA30ZAAAE
Kh4CexoAAAQqIgIDfRoAAAQqHgJ7GwAABCoiAgN9GwAABCoeAnscAAAEKiICA30cAAAEKh4Cex0A
AAQqIgIDfR0AAAQqHgJ7HgAABCoiAgN9HgAABCoeAnsfAAAEKiICA30fAAAEKh4CeyAAAAQqIgID
fSAAAAQqHgJ7IQAABCoiAgN9IQAABCoeAnsiAAAEKiICA30iAAAEKh4CeyMAAAQqIgIDfSMAAAQq
HgJ7JAAABCoiAgN9JAAABCoeAnslAAAEKiICA30lAAAEKgAbMAIAIwAAAAgAABECKDgAAAYWjSAA
AAFvgwAACgreDSYjAAAAAAAAAAAK3gAGKgABEAAAAAAAABQUAA0QAAABPgIDKFUAAAYCF29TAAAG
KhswAgAjAAAACAAAEQIoOAAABhaNIAAAAW+DAAAKCt4NJiMAAAAAAAAAAAreAAYqAAEQAAAAAAAA
FBQADRAAAAEiAgMoVwAABioeAnsmAAAEKvYCA30mAAAEAnsmAAAEb1IAAApynQMAcChjAAAKLBIC
AigsAAAGb9MAAAYoTwAABioCAihOAAAGKE8AAAYqHgJ7JwAABCoiAgN9JwAABCoeAnsoAAAEKiIC
A30oAAAEKh4CeykAAAQqIgIDfSkAAAQqHgJ7KgAABCoiAgN9KgAABCoeAnsrAAAEKiICA30rAAAE
Kh4CeywAAAQqIgIDfSwAAAQqHgJ7LQAABCoiAgN9LQAABCoeAnsuAAAEKiICA30uAAAEKh4Cey8A
AAQqIgIDfS8AAAQqHgJ7MAAABCoiAgN9MAAABCoeAnsxAAAEKiICA30xAAAEKh4CezIAAAQqIgID
fTIAAAQqHgJ7MwAABCoiAgN9MwAABCoeAns0AAAEKiICA300AAAEKh4CezUAAAQqIgIDfTUAAAQq
HgJ7NgAABCoiAgN9NgAABCoeAns3AAAEKiICA303AAAEKh4CezgAAAQqIgIDfTgAAAQqHgJ7OQAA
BCoiAgN9OQAABCoeAns6AAAEKiICA306AAAEKh4CezsAAAQqIgIDfTsAAAQqHgJ7PAAABCoiAgN9
PAAABCoeAns9AAAEKiICA309AAAEKh4Cez4AAAQqIgIDfT4AAAQqHgJ7PwAABCoiAgN9PwAABCoe
AntAAAAEKiICA31AAAAEKh4Ce0EAAAQqIgIDfUEAAAQqHgJ7QgAABCoiAgN9QgAABCoeAntDAAAE
KiICA31DAAAEKh4Ce0QAAAQqIgIDfUQAAAQqHgJ7RQAABCoiAgN9RQAABCoeAntGAAAEKiICA31G
AAAEKh4Ce0cAAAQqIgIDfUcAAAQqHgJ7SAAABCoiAgN9SAAABCoeAntJAAAEKiICA31JAAAEKh4C
e0oAAAQqIgIDfUoAAAQqHgJ7SwAABCoiAgN9SwAABCoeAntMAAAEKiICA31MAAAEKh4Ce00AAAQq
IgIDfU0AAAQqHgJ7TgAABCoiAgN9TgAABCoeAntPAAAEKiICA31PAAAEKh4Ce1AAAAQqIgIDfVAA
AAQqHgJ7UQAABCoiAgN9UQAABCoeAntSAAAEKiICA31SAAAEKh4Ce1MAAAQqIgIDfVMAAAQqHgJ7
VAAABCoiAgN9VAAABCoeAntVAAAEKiICA31VAAAEKgAAEzAEAE8AAAAJAAARAiihAAAGfp4AAAQl
LRcmfp0AAAT+BhsBAAZzRwAACiWAngAABCgZAAArcsEDAHAC/gbEAAAGc4QAAAooLgAAKwoCBii+
AAAGAii8AAAGKgATMAQAPgAAAAkAABEbjTcAAAElFnLDAwBwoiUXAii3AAAGoiUYci0CAHCiJRkC
KLkAAAaiJRpyVQIAcKIoJAAACgoCBii+AAAGKjICcj0EAHAovgAABirSAyiGAAAKLSsDAiixAAAG
cyUAAAolF2+HAAAKJW+IAAAKcqEEAHADb4kAAAomb4oAAAomKh4Ce1YAAAQqIgIDfVYAAAQqHgJ7
VwAABCoiAgN9VwAABCoAABMwBwD2AgAACgAAER80jTcAAAElFgOiJRdyqQQAcKIlGAIotQAABqIl
GXLDBABwoiUaBG8sAAAGb8UAAAYKEgAoXQAACqIlG3JGBwBwoiUcBG8sAAAGb8cAAAaiJR1yTAcA
cKIlHgRvLgAABm8XAAAGChIAKF0AAAqiJR8JckYHAHCiJR8KBG8uAAAGbxkAAAaiJR8LckwHAHCi
JR8MBG8wAAAGCxIBKIsAAAqiJR8NclIHAHCiJR8OBG8+AAAGCxIBKIsAAAqiJR8PclIHAHCiJR8Q
AiibAAAGChIAKF0AAAqiJR8RclIHAHCiJR8SBG8yAAAGCxIBKIsAAAqiJR8TclIHAHCiJR8UBG80
AAAGb4oAAAYKEgAoXQAACqIlHxVyUgcAcKIlHxYEbzYAAAZvDgAABgoSAChdAAAKoiUfF3JSBwBw
oiUfGARvQAAABgsSASiLAAAKoiUfGXJSBwBwoiUfGgRvMAAABgRvVgAABiMAAAAAAADwPwRvMgAA
BllaWQsSASiLAAAKoiUfG3JGBwBwoiUfHARvNAAABm+OAAAGChIAKF0AAAqiJR8dclYHAHCiJR8e
BG82AAAGbxIAAAYKEgAoXQAACqIlHx9yTAcAcKIlHyAEbywAAAZvyQAABgsSASiLAAAKoiUfIXJS
BwBwoiUfIgRvLAAABm/LAAAGChIAKF0AAAqiJR8jclIHAHCiJR8kBG8uAAAGbxsAAAYLEgEoiwAA
CqIlHyVyUgcAcKIlHyYEby4AAAZvHwAABgoSAChdAAAKoiUfJ3JGBwBwoiUfKARvSAAABgwSAnJe
BwBwKIwAAAqiJR8pckwHAHCiJR8qBG9KAAAGChIAKF0AAAqiJR8rclIHAHCiJR8sBG9MAAAGChIA
KF0AAAqiJR8tclIHAHCiJR8uBG9OAAAGCxIBKIsAAAqiJR8vclIHAHCiJR8wBG9QAAAGCxIBKIsA
AAqiJR8xclIHAHCiJR8yBG9aAAAGChIAKF0AAAqiJR8zcoYHAHCiKCQAAAoqHgJ7WAAABCoiAgN9
WAAABCoeAntZAAAEKiICA31ZAAAEKh4Ce1oAAAQqIgIDfVoAAAQqHgJ7WwAABCoiAgN9WwAABCoe
AntcAAAEKiICA31cAAAEKh4Ce10AAAQqIgIDfV0AAAQqHgJ7XgAABCoiAgN9XgAABCqKAntfAAAE
IwAAAAAAAAAANAojAAAAAAAAAAAqAntfAAAEKiICA31fAAAEKq5+YAAABC0ecowHAHDQDQAAAih9
AAAKb40AAApzjgAACoBgAAAEfmAAAAQqGn5hAAAEKh4CgGEAAAQqGn5iAAAEKh4CKI8AAAoqLnPb
AAAGgGIAAAQqUgNvYQAABgJ7ZwAABG8XAAAG/gEqEzADAEIAAAAAAAAAc5YAAAYlA29nAAAGb4sA
AAYlA29pAAAGb40AAAYlA29rAAAGb48AAAYlAntnAAAEb5MAAAYlA29dAAAGb5EAAAYqugNvYQAA
BgJ7aQAABHtnAAAEbxcAAAYzFANvZwAABgJ7aAAABG+KAAAG/gEqFiracxYAAAYlA29tAAAGbw8A
AAYlA29vAAAGbxEAAAYlA29xAAAGbxMAAAYlAntoAAAEbxUAAAYqUgNvkAAABgJ7agAABG/FAAAG
/gEqAAAAEzAFAGABAAAAAAAAc1wAAAYlAntvAAAEe2sAAAR7ZgAABG8rAAAGJQJ7bgAABG8vAAAG
JQJ7bwAABHtqAAAEby0AAAYlA29zAAAGbzEAAAYlcxYAAAYlA29tAAAGbw8AAAYlA29vAAAGbxEA
AAYlA29xAAAGbxMAAAZvNwAABiUoTwAACnJ3AwBwAntvAAAEe2sAAAR8ZgAABChdAAAKKFMAAApz
VAAACm85AAAGJXOWAAAGJQNvZwAABm+LAAAGJQNvaQAABm+NAAAGJQJ7bwAABHtqAAAEb8UAAAZv
kQAABm81AAAGJQNvZQAABm8zAAAGJQNvdQAABm9DAAAGJQNveQAABm9HAAAGJQNvdwAABm9FAAAG
JQNvewAABm9JAAAGJQNvfQAABm9LAAAGJQNvfwAABm9NAAAGJQNvhQAABm9ZAAAGJQNvgQAABm9P
AAAGJQNvgwAABm9RAAAGJQNvhwAABm9bAAAGKhMwAwBfAAAAAAAAAANvXQAABgJ7cwAABHtvAAAE
e2oAAARvxQAABv4BA29hAAAGAntzAAAEe24AAARvFwAABv4BXwNvbQAABgJ7cgAABG8OAAAG/gFf
A29nAAAGAntxAAAEb4oAAAb+AV8qLnPuAAAGgHQAAAQqHgNvigAABioeAygvAAArKh4Db3EAAAYq
HgNvywAABioeA2/HAAAGKjIDbzQAAAZvjgAABioyA28uAAAGbx8AAAYqHgNvLgAABioeA28fAAAG
Kh4DbxkAAAYqHgNvNAAABioeA2+OAAAGKgAAABMwBQCUAAAAAAAAAHOWAAAGJQNvNAAABm+KAAAG
b4sAAAYlA280AAAGb4wAAAZvjQAABiUDbzQAAAZvjgAABm+PAAAGJQNvNAAABm+QAAAGb5EAAAYl
A28uAAAGb5MAAAYlcxYAAAYlA282AAAGbw4AAAZvDwAABiUDbzYAAAZvEAAABm8RAAAGJQNvNgAA
Bm8SAAAGbxMAAAZvlQAABioeA284AAAGKh4Dbz4AAAYqHgNvQAAABipmA28sAAAGb8UAAAYCe4oA
AARvxQAABv4BKlIDb5AAAAYCe4oAAARvxQAABv4BKo4Db1IAAAYtGQNvLAAABm/FAAAGAnuKAAAE
b8UAAAb+ASoWKlIDbzQAAAZvjgAABgJ7jgAABP4BKhMwAgBVAAAAAAAAAANvLgAABm8XAAAGAnuQ
AAAEbxcAAAYzOwNvNAAABm+OAAAGAnuRAAAEe44AAAQzIwNvLAAABm/FAAAGAnuRAAAEe48AAAR7
igAABG/FAAAG/gEqFioAAAATMAIAigAAAAAAAAADbzYAAAZvDgAABgJ7kwAABG8OAAAGM3ADbzQA
AAZvigAABgJ7kgAABG+KAAAGM1gDbywAAAZvxQAABgJ7lgAABHuPAAAEe4oAAARvxQAABjM2A28u
AAAGbxcAAAYCe5IAAARvkgAABm8XAAAGMxkDbzYAAAZvEgAABgJ7kwAABG8SAAAG/gEqFip6A28s
AAAGb8UAAAYCe5QAAARvLAAABm/FAAAG/gEqAAAAEzACAEEAAAAAAAAAA28sAAAGb8UAAAYCe5YA
AAR7jwAABHuKAAAEb8UAAAYuHQNvLgAABm8XAAAGAnuVAAAEMwoDb1IAAAYW/gEqFioAAAATMAIA
WAAAAAAAAAADb1IAAAYsTgNvLAAABm/FAAAGAnuYAAAEe5YAAAR7jwAABHuKAAAEb8UAAAYzJwNv
SgAABgJ7lwAABG9KAAAGMxQDb1oAAAYCe5cAAARvWgAABv4BKhYqEzACAHAAAAAAAAAAA28uAAAG
bxcAAAYCe5oAAAR7lQAABDNWA28sAAAGb8UAAAYCe5oAAAR7lgAABHuPAAAEe4oAAARvxQAABjMv
A29KAAAGAnuZAAAEb0oAAAYzHANvUgAABiwUA29aAAAGAnuZAAAEb1oAAAb+ASoWKvIDbyoAAAYC
e5sAAARvKgAABjMnA29KAAAGAnubAAAEb0oAAAYzFANvWgAABgJ7mwAABG9aAAAG/gEqFipKA29K
AAAGAnucAAAE/gQW/gEqLnMaAQAGgJ0AAAQqPgNvNAAABm+KAAAGFv4DKkJTSkIBAAEAAAAAAAwA
AAB2NC4wLjMwMzE5AAAAAAUAbAAAAMAuAAAjfgAALC8AAAgkAAAjU3RyaW5ncwAAAAA0UwAAAAgA
ACNVUwA0WwAAEAAAACNHVUlEAAAARFsAAMQJAAAjQmxvYgAAAAAAAAACAAABVz2iCQkPAAAA+gEz
ABYAAAEAAABQAAAAIAAAAJ4AAAAbAQAAnAAAAJAAAAADAAAAOwEAAAEAAAAKAAAACQAAAGEAAADA
AAAAHgAAAAEAAAAHAAAAAQAAABEAAAACAAAALwAAAAAAZhgBAAAAAAAKAD8VnR4GAKYVnR4GADUW
nR4GAMcUEh4TABEfAAAGAPQUSRoGAHEVSRoGAFIVSRoGABwWSRoGAMYVSRoGAN8VSRoGAAsVSRoG
ACYVshYOAPoVSRcOAMATSRcGAKEbnBgSANchDhMWAJ4aIAkWADAcIAkGAHECPwlTAP0cAAAGAGYD
nBgaAMUiWh4aAGAYWh4aAJAZWh4aAJsWWh4aAJkXWh4GADAKnBgaAKMYWh4GAKwYnBgGAIEUnR4G
AHUhnBgKAG0DGxwGAE4CPwkWADMc1BsWAMQR6AgGAO4cMSAWAN4i6AgGAAYSnBgGAAUTnBgWAMQa
+iEGAKoUEh4GAG8cvR4GAPAb7BkeAEsUUBgeANsUUBgeAPcT1xkGAJwUfh4GAI4Vfh4GAHEUfh4O
AD4YSRcSAEggDhMSAH8cDhMOAMEcSRcGAM4WnBgSAHEfDhMSAPIRDhMWAEURIAkKAPsRGxwKAFwC
GxwaAMgYWh4aAFMiWh4GANYCnBgaAGERWh4aAKIWWh4aAMsbWh4GAHkTnBgGAPwbSRoGAAgdnBgW
AHQa6AgWANwT6AgGABwSnBgGAJYinBgGADgEnBgWAEgR1BsWADIT6AgWAFsaIAkWANUcIAkGABUS
nBgGAB0jSRoAAAAAIwgAAAAAAQABAAEAEAC9GK0IPQABAAEAAQAQAFAarQiBAAQABwCBARAADiCt
CIEABAAJAIEBEAAkICUegQAEAA0AAQAQACohTgeBAAQADgABABAAYyNOB4EACAAXAAEAEABUCE4H
gQARACoAAQAQAAEJTgeBACgAXQABABAA7BZOB4EAPgCKAAEAEAAJCU4HgQBEAJcAAQAQADUjTgeB
AFgAxQAAABAAxB4+H4EAYADWAAABEAB7Hz4fvQBiANoAoRAAAAEAmRwAAGMA3QADAQAAqCAAAHkA
YwDfAAMBEADWAAAAgQBmAN8AAwEQANIBAACBAGcA4AADARAAEgMAAIEAaADjAAMBEADvAwAAgQBq
AOYAAwEQAKMEAACBAG4A6QADARAAhAUAAIEAcQDrAAMhEAA7CQAAgQB0AO0AAwEQABUBAACBAIoA
BAEDARAAEQIAAIEAjgAJAQMBEABRAwAAgQCQAAsBAwEQAAQEAACBAJIADQEDARAA4gQAAIEAlwAR
AQMBEADDBQAAgQCZABMBAwEQAMEAAACBAJsAFQEDARAAvQEAAIEAnAAXAQMhEAA7CQAAgQCdABkB
IQAUCS4FAQAfCkUAAQD4EkUAAQCuCjIFAQDEDkUAAQBqDDIFAQBUDDUFAQCuCjIFAQDEDkUAAQBE
DjkFAQAqDjkFAQBqDDIFAQDLDTwFAQCsDTwFAQBxEDwFAQDNDz8FAQCuCjIFAQDOEEcFAQDmEEsF
AQAqDjkFAQDhDjkFAQBUDDUFAQBXEE8FAQAUDVMFAQCGCzIFAQBPDTIFAQAuDTkFAQBsDTkFAQAh
DzkFAQD9DjkFAQBFDzkFAQCzEFcFAQBrDzIFAQAAETIFAQCkDjkFAQBjDjkFAQBPC1wFAQBeE0UA
AQCXCjIFAQDaCjIFAQCODUUAAQD6CjIFAQDAC0UAAQDhDjkFAQDCCjIFAQCmC0UAAQAdETIFAQAY
CzIFAQD6C0UAAQCADDIFAQBpCjkFAQAhDzkFAQD9DjkFAQBFDzkFAQCzEFcFAQBrDzIFAQAAETIF
AQCkDjkFAQBjDjkFAQAYDEUAAQCXCjIFAQCuCjIFAQDEDkUAAQAdETIFAQA0CzIFAQDmEEsFAQBX
EE8FAQA1CjIFAQB+CjIFAQCeDDIFAQDkD18FAQD/DzIFAQCBD2QFAQCXD2wFAQA9EHEFAQCxD3YF
AQDND3sFAQAiEIAFAQALDoUFAQD9DIoFAQDqDY4FAQA1DEUAAQBnC0UAAQBOCkUAAQDgC0UAAQCQ
EEUAAQCDDkUAAQCuCjIFAQDEDkUAAQBEDjkFAQBqDDIFAQDdDDwFAQC9DDwFAQBxEDwFAQAnHDkF
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
gRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYA
AAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEA
gRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYA
AAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEA
gRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYA
AAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEA
gRYAAAEAgRYAAAEAgRYAAAEAgRYQEAEAYxkAAAEATCMAAAEAgRYAAAEAgRYAAAEAHCIAAAIAJRwA
AAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAAAEAgRYAIAAA
AAAAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEAAyQAAAEAAyQAAAEA6iIA
AAEA3RYAAAEAowgAAAEA6iIAAAEA6iIAAAEA6iIAAAEAASQAAAEA6iIAAAEA6iIAAAEA6iIAAAEA
6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA3RYAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIA
AAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA
6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIAAAEA6iIJABIdAQARABIdBQAZABIdAQAhABIdCgAx
ABIdEAA5ABIdEABBABIdEABJABIdEABRABIdEABZABIdEABhABIdEABpABIdEABxABIdAQD5ABId
AQBRARIdAQBxARIdFQCBARIdEACJARIdAQCRARIdBQB5AIQgIQCZAUQgJwChAY4YLQCZAeUhBQCZ
AcogNACBAKAROgCBAHIROgC5ARIhPgC5AdojRQCxAeQcSACpAWwhWACZAW0fXADBAY4YYgDJAVMW
WAABAcwWOgC5ARIhaQC5ARIhqADRARIdrgDRAV0ctQAMABIdAQDZAREjxgDZAWwi1AAZAQ8UAQAU
ABIdAQAcABIdAQAkABIdAQAsABIdBwHZAX4TDQE0ABIdBwHZAXwhLwHZAYMhUAHZAZ4iZwE8ABId
BwHZAfMigAFEABIdBwFMAPocygFUABAi2gFcABIdBwHZAfsi5wFkABIdBwHZAcghFwJUALwiKQI5
ARUUAQBsABIdBwFMAAUKNQJ0ABIdBwEkAKwRUAK5ANMiuQJ8ABIdBwGEABIdBwHZAewi1AKMABId
BwGUABIdBwGcABIdBwGkABIdBwGsABIdBwG0ABIdBwG5ADMYAQC5ACcYSgPpAYcWTwPhAC0KVQO5
AWoRWgO5AZEcOgC5ARIhYAPJABIdZgPBAOkYbgPJAGYSOgDpAIwhdAPpALQXegPpADcRegPpAJ4X
egPBACQigwO8ABIdBwH5AcwWOgDBAKgYoQPBAHIXqQPRABIdAQC5AKwWtAPBAJgfvgO5AXUjzQPE
ABIdBwHZAagY2wMkAPocygHMABAi2gHMALwiKQJ5ABIdAQABAXYT9QMZAvcj+wMhAmoWAgQBARId
AQDUABIdAQAZArYgMwQpAoEROgQZAbURQQQhAQkhRwQ5AvocTQQpARAiWAAxAQMjUwQZAY4YWAQp
AbwiKQLUAAUKNQIZAQAKKQLcABIdAQDUAPocygHkABAi2gEZAi4SbQRJAmsTdgTcAAUKNQLkALwi
KQJJAtQCggS5AYEjzQPJABISmAT0ABIdBwHZAUEUrAS5AdIjzARZAi4T0QTRAVQg2ARpAl0W3gRZ
Ajwj5gR5AswWOgBBAcwW8gQZAhkj9wRZARId/QR5ARIdAQDZAaoiFwICAIkBKgUIAJABIAUIAJQB
JQUuAAsAJQUuABMAuAguABsAwQguACMA4AguACsA6QguADMAEgkuADsAEgkuAEMAGAkuAEsA6Qgu
AFMAJwkuAFsAEgkuAGMARwlDAGsAJQWBAHMAJQWDAAsAJQWhAHMAJQWjAAsAJQXBAHMAJQXhAHMA
JQUBAXMAJQUgAQsAJQUhAXMAJQVAAQsAJQVBAXMAJQVgAQsAJQVhAXMAJQWAAQsAJQWBAXMAJQWg
AQsAJQWhAXMAJQWjAXsAJQXAAXMAJQXBAXMAJQXgAXMAJQXhAXMAJQXjAXMAJQXjAYsAmAnjAZMA
JQUAAnMAJQUBAnMAJQUgAnMAJQUhAnMAJQUjAnMAJQVAAnMAJQVBAnMAJQVDAnMAJQVgAnMAJQVh
AnMAJQVjAnMAJQWAAnMAJQWBAnMAJQWDAnMAJQWgAnMAJQWhAnMAJQWjAnMAJQXBAnMAJQXDAnMA
JQXgAnMAJQXhAnMAJQXjAnMAJQUAA3MAJQUBA3MAJQUDA3MAJQUgA3MAJQUhA3MAJQUjA3MAJQVA
A3MAJQVBA3MAJQVDA3MAJQVgA3MAJQVhA3MAJQVjA3MAJQWAA3MAJQWBA3MAJQWDA3MAJQWgA3MA
JQWhA3MAJQWjA3MAJQXAA3MAJQXBA3MAJQXDA3MAJQXgA3MAJQXhA3MAJQXjA3MAJQUABHMAJQUB
BHMAJQUDBHMAJQUgBHMAJQUhBHMAJQVABHMAJQVBBHMAJQVgBHMAJQVhBHMAJQWABHMAJQWBBHMA
JQWgBHMAJQWhBHMAJQXABHMAJQXgBHMAJQXhBHMAJQUABXMAJQUBBXMAJQUhBXMAJQVABXMAJQVB
BXMAJQVgBXMAJQVhBXMAJQWABXMAJQWBBXMAJQWgBXMAJQWhBXMAJQXABXMAJQXBBXMAJQXgBXMA
JQXhBXMAJQUABnMAJQUBBnMAJQUgBnMAJQUhBnMAJQVABnMAJQVBBnMAJQVgBnMAJQVhBnMAJQWA
BnMAJQWBBnMAJQWgBnMAJQWhBnMAJQXABnMAJQXBBnMAJQXgBnMAJQXhBnMAJQUAB3MAJQUBB3MA
JQUgB3MAJQUhB3MAJQVAB3MAJQVBB3MAJQVgB3MAJQVhB3MAJQWAB3MAJQWBB3MAJQWgB3MAJQWh
B3MAJQXAB3MAJQXBB3MAJQXgB3MAJQXhB3MAJQUACHMAJQUBCHMAJQUgCHMAJQUhCHMAJQVACHMA
JQVBCHMAJQVgCHMAJQVhCHMAJQWACHMAJQWBCHMAJQWgCHMAJQWhCHMAJQXACHMAJQXBCHMAJQXg
CHMAJQXhCHMAJQUACXMAJQUBCXMAJQUgCXMAJQUhCXMAJQVACXMAJQVBCXMAJQVgCXMAJQVhCXMA
JQWACXMAJQWBCXMAJQWgCXMAJQWhCXMAJQXACXMAJQXBCXMAJQXgCXMAJQXhCXMAJQUACnMAJQUB
CnMAJQUgCnMAJQUhCnMAJQVACnMAJQVBCnMAJQVgCnMAJQVhCnMAJQWBCnMAJQWhCnMAJQXBCnMA
JQXhCnMAJQUBC3MAJQUhC3MAJQVAC3MAJQVBC3MAJQVgC3MAJQVhC3MAJQWBC3MAJQWgC3MAJQWh
C3MAJQXAC3MAJQXBC3MAJQXgC3MAJQXpC4MA4AgADHMAJQUJDIMA4AggDHMAJQVADHMAJQVBDHMA
JQVgDHMAJQWADHMAJQWgDHMAJQXADHMAJQXgDHMAJQUADXMAJQUgDXMAJQVADXMAJQVgDXMAJQWA
DXMAJQWgDXMAJQXADXMAJQXgDXMAJQUADnMAJQUgDnMAJQVADnMAJQVgDnMAJQWADnMAJQWgDnMA
JQXADnMAJQXgDnMAJQUAD3MAJQUgD3MAJQVAD3MAJQVgD3MAJQWAD3MAJQWgD3MAJQXAD3MAJQXg
D3MAJQUAEHMAJQUgEHMAJQVAEHMAJQVgEHMAJQWAEHMAJQWgEHMAJQXAEHMAJQXgEHMAJQUAEXMA
JQVAEXMAJQVgEXMAJQWAEXMAJQWgEXMAJQXAEXMAJQXgEXMAJQUAEnMAJQUgEnMAJQVAEnMAJQVg
EnMAJQWAEnMAJQWgEnMAJQXgEnMAJQUAE3MAJQUgE3MAJQVAE3MAJQVgE3MAJQWAE3MAJQWgE3MA
JQXAE3MAJQXgE3MAJQUAFHMAJQUgFHMAJQVAFHMAJQVgFHMAJQWAFHMAJQWgFHMAJQXAFHMAJQXg
FHMAJQUAFXMAJQUgFXMAJQVAFXMAJQVgFXMAJQWAFXMAJQWgFXMAJQXAFXMAJQXgFXMAJQUAFnMA
JQUgFnMAJQVAFnMAJQVgFnMAJQWAFnMAJQWgFnMAJQXAFnMAJQXgFnMAJQUAF3MAJQUgF3MAJQVA
F3MAJQXgF3MAJQUAGHMAJQUgGHMAJQVAGHMAJQWAGHMAJQWgGHMAJQXAGHMAJQXgGHMAJQUAGXMA
JQUgGXMAJQVAGXMAJQVgGXMAJQWAGXMAJQWgGXMAJQXAGXMAJQXgGXMAJQUAGnMAJQUgGnMAJQVA
GnMAJQXAG5sAjwnjACwFHABRAHEAWwIKBH4EhwSUBJ4E6gQGAAEABwAFAAgADgAJACcACgA9AAsA
QwAMAFcADQBfAA4AYQAAAP0JLggAAL8bMggAACUXLggAAOwWNggAAP0JLggAAL8bMggAABAbOwgA
AJgbOwgAACUXLggAADsaPwgAABcaPwgAAK4hPwgAAJIfQwgAAP0JLggAADUjTAgAAGMjUQgAAJgb
OwgAACsdOwgAAOwWNggAACohVggAAJAZWwgAAFcSLggAAFcZLggAADMZOwgAAIgZOwgAAH8dOwgA
AFEdOwgAAK8dOwgAAIwiYAgAANwdLggAAKMjLggAAJIbOwgAADUbOwgAABgKZggAAFghOwgAAAwZ
OwgAAFITMggAAJ0ILggAAJUJLggAAK4ZMggAALkJLggAAKASMggAACsdOwgAAHcJLggAAIASMggA
AMAjLggAANkJLggAAN4SMggAAB0XLggAAFQIOwgAAH8dOwgAAFEdOwgAAK8dOwgAAIwiYAgAANwd
LggAAKMjLggAAJIbOwgAADUbOwgAAFITMggAAJ0ILggAAP0JLggAAL8bMggAAMAjLggAAPYJLggA
AGMjUQgAACohVggAAOwCLggAAGgILggAAJAXLggAAAQgaggAAOYfLggAAPMdcAgAAAkeeQgAAOYg
fwgAADMfhQgAAJIfiwgAAJ4gkQgAAMQalwgAAGAYnQgAAJ4aoggAADMUMggAAOQRMggAAD4IMggA
AMASMggAAEwiMggAAFwbMggAAP0JLggAAL8bMggAABAbOwgAACUXLggAAAQYPwgAAN4XPwgAAK4h
PwgAAJgbOwgAAG8cpwgAALgTrQgAAM8hswgCAA4AAwABAA8AAwACABAABQABABEABQACABIABwAB
ABMABwACABQACQABABUACQACABcACwABABgACwACABkADQABABoADQACABsADwABABwADwACAB0A
EQABAB4AEQACAB8AEwABACAAEwACACEAFQABACIAFQACACMAFwABACQAFwACACUAGQABACYAGQAC
ACcAGwABACgAGwACACoAHQABACsAHQACACwAHwABAC0AHwACAC4AIQABAC8AIQACADAAIwABADEA
IwACADIAJQABADMAJQACADQAJwABADUAJwACADYAKQABADcAKQACADgAKwABADkAKwACADoALQAB
ADsALQACADwALwABAD0ALwACAD4AMQABAD8AMQACAEAAMwABAEEAMwACAEIANQABAEMANQACAEQA
NwABAEUANwACAEYAOQABAEcAOQACAEgAOwABAEkAOwACAEoAPQABAEsAPQACAEwAPwABAE0APwAC
AE4AQQABAE8AQQACAFAAQwABAFEAQwACAFIARQABAFMARQACAFQARwABAFUARwACAFYASQABAFcA
SQACAFgASwABAFkASwACAFoATQABAFsATQACAF0ATwABAF4ATwACAF8AUQABAGAAUQACAGEAUwAB
AGIAUwACAGMAVQABAGQAVQACAGUAVwABAGYAVwACAGcAWQABAGgAWQACAGkAWwABAGoAWwACAGsA
XQABAGwAXQACAG0AXwABAG4AXwACAG8AYQABAHAAYQACAHEAYwABAHIAYwACAHMAZQABAHQAZQAC
AHUAZwABAHYAZwACAHcAaQABAHgAaQACAHkAawABAHoAawACAHsAbQABAHwAbQACAH0AbwABAH4A
bwACAH8AcQABAIAAcQACAIEAcwABAIIAcwACAIMAdQABAIQAdQACAIUAdwABAIYAdwACAIcAeQAB
AIgAeQACAIoAewABAIsAewACAIwAfQABAI0AfQACAI4AfwABAI8AfwACAJAAgQABAJEAgQACAJIA
gwABAJMAgwACAJQAhQABAJUAhQACAJcAhwABAJgAhwACAJkAiQABAJoAiQACAJsAiwABAJwAiwAC
AJ0AjQABAJ4AjQACAJ8AjwABAKAAjwACAKEAkQABAKIAkQACAKMAkwABAKQAkwACAKUAlQABAKYA
lQACAKcAlwABAKgAlwACAKkAmQABAKoAmQACAKsAmwABAKwAmwACAK0AnQABAK4AnQACAK8AnwAB
ALAAnwACALEAoQABALIAoQACALMAowABALQAowACALUApQABALYApQACALcApwABALgApwACALkA
qQABALoAqQACAL8AqwABAMAAqwACAMEArQABAMIArQACAMUArwABAMYArwACAMcAsQABAMgAsQAC
AMkAswABAMoAswACAMsAtQABAMwAtQACAM0AtwABAM4AtwACAM8AuQABANAAuQACANEAuwABANIA
uwACANMAvQABANQAvQACANcAvwACANgAwQABANkAwQACANoAwwC6AOAA7AD4AP8AJgF4AacBwwHT
Ad8BBwItAjsCvgLMAvQC/AIOAx4DLAM6A4wD0wPuAy0EXQRkBGoEogQEgAAAAQAAAGUeaFkAAAAA
AABOBwAABAAAAAAAAAAAAAAABQUyCQAAAAAEAAAAAAAAAAAAAAAFBYQTAAAAAA0AAAAAAAAAAAAA
AA4FKhcAAAAADQAAAAAAAAAAAAAADgVwCAAAAAAEAAAAAAAAAAAAAAAFBegIAAAAAAMAAAACAIkq
AAAAABcFuxkAAAAABAAAAAAAAAAAAAAABQWcGAAAAAAAAAAAAQAAAM4eAAAQAAIAEQACABIAAgAT
AAIAFAACABUAAgAWAAIAFwACABgAAgAZAAIAGgACABsAAgAcAAIAHQACAB4ABAAfAAQAIAALAAAA
AAATAKEIAAAAABUAoQgUAMEAUQDBAFMAwQAUAOcAUQDnAFMA5wASAPMAUQDzAF8A8wBjAEkBZQBi
AWcAYgFrAKEBYwC2AXUAAQJjABACeQAkAl8AYgFTAGIBYwBEAmcASwJ1AMYCjQDuAmUAwQBfAEsC
dQAEA40ABANjAAQDZQAKA1EACgNjABcDZQDnAHUAJgONADQDYwBDA3UAoQFRAGIBZQBLAlEASwJT
AEsCYwCVA1EAnAN5AMgDeQBLAssASwILAcYEIQFiAQAAAAAASURUU0Nvbm5lY3Rpb25NYW5hZ2Vy
RGF0YWJhc2VQYXJhbWV0ZXJzMTAwADw+OV9fN18xMAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNz
PmJfXzdfMTAAPD45X18xMAA8RHVtcE0yTXFEYXRhPmJfXzEwADw+OV9fN18yMAA8U29sdmVyQ2Fs
Y3VsYXRpb25Qcm9jZXNzPmJfXzdfMjAAPD45X183Ml8wADxTYXZlRGVjaXNpb25zPmJfXzcyXzAA
PD5jX19EaXNwbGF5Q2xhc3MzXzAAPD5jX19EaXNwbGF5Q2xhc3M2XzAAPD45X183XzAAPFNvbHZl
ckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzAAPD5jX19EaXNwbGF5Q2xhc3M3XzAAPER1bXBNMk1x
RGF0YT5iX18wADxBZGp1c3RQb3NpdGlvbj5iX18wADw+OV9fN18xMQA8U29sdmVyQ2FsY3VsYXRp
b25Qcm9jZXNzPmJfXzdfMTEAPD45X18yMQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzIx
ADxTYXZlRGVjaXNpb25zPmJfXzcyXzEAPD5jX19EaXNwbGF5Q2xhc3MzXzEAPD5jX19EaXNwbGF5
Q2xhc3M2XzEAPD45X183XzEAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzEAPD5jX19E
aXNwbGF5Q2xhc3M3XzEAPER1bXBNMk1xRGF0YT5iX18xADxBZGp1c3RQb3NpdGlvbj5iX18xAElF
bnVtZXJhYmxlYDEASU9yZGVyZWRFbnVtZXJhYmxlYDEATGlzdGAxAENTJDw+OF9fbG9jYWxzMQA8
PjlfXzdfMTIAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzEyADxTb2x2ZXJDYWxjdWxh
dGlvblByb2Nlc3M+Yl9fMjIAVG9JbnQzMgBnZXRfVG90YWxNMgBzZXRfVG90YWxNMgA8PjlfXzZf
MgA8RHVtcE0yTXFEYXRhPmJfXzZfMgA8PmNfX0Rpc3BsYXlDbGFzczZfMgA8PjlfXzdfMgA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMgA8PmNfX0Rpc3BsYXlDbGFzczdfMgBGdW5jYDIA
SUdyb3VwaW5nYDIAQ1MkPD44X19sb2NhbHMyADw+OV9fMTMAPFNvbHZlckNhbGN1bGF0aW9uUHJv
Y2Vzcz5iX18xMwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzIzADw+OV9fNl8zADxEdW1w
TTJNcURhdGE+Yl9fNl8zADw+Y19fRGlzcGxheUNsYXNzNl8zADw+Y19fRGlzcGxheUNsYXNzN18z
ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMwBGdW5jYDMAQ1MkPD44X19sb2NhbHMzADw+
OV9fMTQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xNAA8PjlfXzdfMjQAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX183XzI0ADw+Y19fRGlzcGxheUNsYXNzNl80ADw+OV9fN180ADxT
b2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN180ADw+Y19fRGlzcGxheUNsYXNzN180ADxEdW1w
TTJNcURhdGE+Yl9fNABDUyQ8PjhfX2xvY2FsczQAPD45X183XzE1ADxTb2x2ZXJDYWxjdWxhdGlv
blByb2Nlc3M+Yl9fN18xNQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzI1ADw+OV9fNl81
ADxEdW1wTTJNcURhdGE+Yl9fNl81ADw+Y19fRGlzcGxheUNsYXNzNl81ADw+OV9fN181ADxTb2x2
ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN181ADw+Y19fRGlzcGxheUNsYXNzN181AENTJDw+OF9f
bG9jYWxzNQA8PjlfXzdfMTYAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzE2ADw+OV9f
N18yNgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMjYAPD45X183XzYAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX183XzYAPER1bXBNMk1xRGF0YT5iX182ADw+OV9fN18xNwA8U29s
dmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMTcAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5i
X18yNwA8PjlfXzcAPER1bXBNMk1xRGF0YT5iX183ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+
Yl9fNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzE4ADw+OV9fN18yOAA8U29sdmVyQ2Fs
Y3VsYXRpb25Qcm9jZXNzPmJfXzdfMjgAU1RfZjM5MjMzZmFjMTZlNDI2ZDk5MWQ5MzJmOWVmN2Q4
NTgAPD45X183XzgAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzgAPD45X184ADxEdW1w
TTJNcURhdGE+Yl9fOAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzE5ADw+OQBfVnRibEdh
cDFfOQA8PjlfXzdfOQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfOQA8RHVtcE0yTXFE
YXRhPmJfXzkAPE1vZHVsZT4AZ2V0X1Byb2Nlc3NJRABzZXRfUHJvY2Vzc0lEAGdldF9NRFEAc2V0
X01EUQBnZXRfVG90YWxNUQBzZXRfVG90YWxNUQBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWRE
VFMAZ2V0X0lzRFNUAHNldF9Jc0RTVABYAHZhbHVlX18AU1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3
YzBjZTg0MDJmYWEAR2V0Q29ubmVjdGlvbkZvclNjaGVtYQBTeXN0ZW0uRGF0YQBEdW1wTTJNcURh
dGEATWRxRGF0YQBTb2x2ZXJEYXRhAF9zb2x2ZXJEYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29y
bGliADw+YwBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBnZXRfSWQAc2V0X0lkAGdldF9QYXRo
SWQAc2V0X1BhdGhJZABnZXRfRnJvbUxvY2F0aW9uSWQAc2V0X0Zyb21Mb2NhdGlvbklkAGdldF9U
b0xvY2F0aW9uSWQAc2V0X1RvTG9jYXRpb25JZABnZXRfQ29udHJhY3RJZABzZXRfQ29udHJhY3RJ
ZABnZXRfUmVjZWlwdElkAHNldF9SZWNlaXB0SWQAUmVhZABBZGQAZ2V0X1NvbHZlZABzZXRfU29s
dmVkAFBTX3Byb2Nlc3NfaWQATmV3R3VpZAA8VG90YWxNMj5rX19CYWNraW5nRmllbGQAPFByb2Nl
c3NJRD5rX19CYWNraW5nRmllbGQAPE1EUT5rX19CYWNraW5nRmllbGQAPFRvdGFsTVE+a19fQmFj
a2luZ0ZpZWxkADxJc0RTVD5rX19CYWNraW5nRmllbGQAPElkPmtfX0JhY2tpbmdGaWVsZAA8UGF0
aElkPmtfX0JhY2tpbmdGaWVsZAA8RnJvbUxvY2F0aW9uSWQ+a19fQmFja2luZ0ZpZWxkADxUb0xv
Y2F0aW9uSWQ+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdElkPmtfX0JhY2tpbmdGaWVsZAA8UmVj
ZWlwdElkPmtfX0JhY2tpbmdGaWVsZAA8U29sdmVkPmtfX0JhY2tpbmdGaWVsZAA8RGVjaXNpb25U
YWJsZT5rX19CYWNraW5nRmllbGQAPEZyZWVUb1NjaGVkdWxlPmtfX0JhY2tpbmdGaWVsZAA8UGF0
aE5hbWU+a19fQmFja2luZ0ZpZWxkADxUb0xvY2F0aW9uTmFtZT5rX19CYWNraW5nRmllbGQAPFVz
ZXJOYW1lPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3ROYW1lPmtfX0JhY2tpbmdGaWVsZAA8U3Rv
cmFnZVR5cGU+a19fQmFja2luZ0ZpZWxkADxUYWJsZVRvVXBkYXRlPmtfX0JhY2tpbmdGaWVsZAA8
UGF0aD5rX19CYWNraW5nRmllbGQAPFJhbms+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdFJhbms+
a19fQmFja2luZ0ZpZWxkADxPYmplY3RpdmVHb2FsPmtfX0JhY2tpbmdGaWVsZAA8bWluX3dpdGhk
cmF3YWw+a19fQmFja2luZ0ZpZWxkADxtYXhfd2l0aGRyYXdhbD5rX19CYWNraW5nRmllbGQAPE1v
ZGVsPmtfX0JhY2tpbmdGaWVsZAA8RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0RGVj
aXNpb24+a19fQmFja2luZ0ZpZWxkADxOZXdEZWNpc2lvbj5rX19CYWNraW5nRmllbGQAPERlbGl2
ZXJ5RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxGcm9tTG9jYXRpb24+a19fQmFja2luZ0ZpZWxk
ADxtaW5faW5qZWN0aW9uPmtfX0JhY2tpbmdGaWVsZAA8bWF4X2luamVjdGlvbj5rX19CYWNraW5n
RmllbGQAPE9sZURiQ29ubmVjdGlvbj5rX19CYWNraW5nRmllbGQAPFNxbENvbm5lY3Rpb24+a19f
QmFja2luZ0ZpZWxkADxQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPEZpeGVkUG9zaXRpb24+a19f
QmFja2luZ0ZpZWxkADxEZW1hbmRQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPFN0b3JhZ2VQb3Np
dGlvbj5rX19CYWNraW5nRmllbGQAPFN1cHBseVBvc2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVz
Y3JpcHRpb24+a19fQmFja2luZ0ZpZWxkADxMb3NzRmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8RGVt
YW5kQWRqdXN0RmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8U3VwcGx5QWRqdXN0RmFjdG9yPmtfX0Jh
Y2tpbmdGaWVsZAA8RGVsaXZlcnlBZGp1c3RGYWN0b3I+a19fQmFja2luZ0ZpZWxkADxIb3VyPmtf
X0JhY2tpbmdGaWVsZAA8TURRcz5rX19CYWNraW5nRmllbGQAPE1EUURhdGFzPmtfX0JhY2tpbmdG
aWVsZAA8RGVsaXZlcmllcz5rX19CYWNraW5nRmllbGQAPFBhdGhzPmtfX0JhY2tpbmdGaWVsZAA8
RGVjaXNpb25zPmtfX0JhY2tpbmdGaWVsZAA8TnVtYmVyT2ZEZWNpc2lvbnM+a19fQmFja2luZ0Zp
ZWxkADxDb250cmFjdHM+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0cz5rX19CYWNraW5nRmllbGQA
PENvbnRyYWN0PmtfX0JhY2tpbmdGaWVsZAA8cmF0Y2hldF9saW1pdD5rX19CYWNraW5nRmllbGQA
PFN0b3JhZ2VDb25zdHJhaW50PmtfX0JhY2tpbmdGaWVsZAA8VGVybVN0YXJ0PmtfX0JhY2tpbmdG
aWVsZAA8U3VwcGx5PmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcnk+a19fQmFja2luZ0ZpZWxkADxH
cmFudWxhcml0eT5rX19CYWNraW5nRmllbGQAPFByaW9yaXR5PmtfX0JhY2tpbmdGaWVsZABvcF9C
aXR3aXNlQW5kAE9sZURiQ29tbWFuZABFeGVjdXRlQ29tbWFuZABHb2FsS2luZABSZXBsYWNlAGdl
dF9TdGFja1RyYWNlAENyZWF0ZUluc3RhbmNlAGRlZmF1bHRJbnN0YW5jZQBnZXRfTWVzc2FnZQBB
ZGRSYW5nZQBHZXRTY2hlbWFUYWJsZQBEYXRhVGFibGUAZ2V0X0RlY2lzaW9uVGFibGUAc2V0X0Rl
Y2lzaW9uVGFibGUAVmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJsZQBHZXREb3VibGUAUnVu
dGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X0ZyZWVUb1NjaGVkdWxlAHNldF9G
cmVlVG9TY2hlZHVsZQBnZXRfTmFtZQBnZXRfUGF0aE5hbWUAc2V0X1BhdGhOYW1lAGdldF9Ub0xv
Y2F0aW9uTmFtZQBzZXRfVG9Mb2NhdGlvbk5hbWUAZ2V0X1VzZXJOYW1lAHNldF9Vc2VyTmFtZQBn
ZXRfQ29udHJhY3ROYW1lAHNldF9Db250cmFjdE5hbWUAcHJvcGVydHlOYW1lAFBTX3VzZXJfbmFt
ZQBEYXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAHNldF9Db21tYW5kVHlw
ZQBnZXRfU3RvcmFnZVR5cGUAc2V0X1N0b3JhZ2VUeXBlAF9zdG9yYWdlVHlwZQBDaGFuZ2VUeXBl
AEdldFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVy
ZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0
YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bvc2UAZ2V0
X1RhYmxlVG9VcGRhdGUAc2V0X1RhYmxlVG9VcGRhdGUAQWdncmVnYXRlAEVkaXRvckJyb3dzYWJs
ZVN0YXRlAEVuY2xvc2VXaXRoUXVvdGUARGlzcElkQXR0cmlidXRlAENvbXBpbGVyR2VuZXJhdGVk
QXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1
Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0
ZQBFeHRlbnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2Vt
Ymx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAVHlwZUlkZW50aWZpZXJBdHRyaWJ1dGUAQ29tcGlsYXRp
b25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlD
b3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2Vt
Ymx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFs
dWUAQWRkV2l0aFZhbHVlAFNldFZhbHVlAHByb3BlcnR5VmFsdWUAdmFsdWUAZ2V0X1JlYWxOb25u
ZWdhdGl2ZQBTaW1wbGV4RGlyZWN0aXZlAFNvbHZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcA
VG9TdHJpbmcAY29uc3RyaW5nAGdldF9QYXRoAHNldF9QYXRoAHBhdGgAZ2V0X1JhbmsAc2V0X1Jh
bmsAZ2V0X0NvbnRyYWN0UmFuawBzZXRfQ29udHJhY3RSYW5rAE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
U2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAEFkZEdv
YWwAZ2V0X09iamVjdGl2ZUdvYWwAc2V0X09iamVjdGl2ZUdvYWwAb3BfR3JlYXRlclRoYW5PckVx
dWFsAG9wX0xlc3NUaGFuT3JFcXVhbABnZXRfbWluX3dpdGhkcmF3YWwAc2V0X21pbl93aXRoZHJh
d2FsAGdldF9tYXhfd2l0aGRyYXdhbABzZXRfbWF4X3dpdGhkcmF3YWwAZ2V0X01vZGVsAHNldF9N
b2RlbABDcmVhdGVNb2RlbABDbGVhck1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21w
b25lbnRNb2RlbABTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5kbGwAZ2V0X0l0
ZW0AaXRlbQBTeXN0ZW0AVGVybQBTdW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAERvbWFp
bgBnZXRfRGVjaXNpb24Ac2V0X0RlY2lzaW9uAEFkZERlY2lzaW9uAGdldF9Tb2x2ZXJEZWNpc2lv
bgBzZXRfU29sdmVyRGVjaXNpb24AZ2V0X1JlY2VpcHREZWNpc2lvbgBzZXRfUmVjZWlwdERlY2lz
aW9uAGdldF9OZXdEZWNpc2lvbgBzZXRfTmV3RGVjaXNpb24AbmV3RGVjaXNpb24AZ2V0X0RlbGl2
ZXJ5RGVjaXNpb24Ac2V0X0RlbGl2ZXJ5RGVjaXNpb24AZ2V0X0Zyb21Mb2NhdGlvbgBzZXRfRnJv
bUxvY2F0aW9uAE1pY3Jvc29mdC5Tb2x2ZXIuRm91bmRhdGlvbgBTeXN0ZW0uQ29uZmlndXJhdGlv
bgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfbWluX2luamVjdGlvbgBzZXRfbWluX2luamVjdGlv
bgBnZXRfbWF4X2luamVjdGlvbgBzZXRfbWF4X2luamVjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBP
bGVEYlBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24AZ2V0X09sZURiQ29ubmVj
dGlvbgBzZXRfT2xlRGJDb25uZWN0aW9uAGdldF9TcWxDb25uZWN0aW9uAHNldF9TcWxDb25uZWN0
aW9uAGdldGNvbm5lY3Rpb24AZ2V0X1Bvc2l0aW9uAHNldF9Qb3NpdGlvbgBnZXRfRml4ZWRQb3Np
dGlvbgBzZXRfRml4ZWRQb3NpdGlvbgBnZXRfRGVtYW5kUG9zaXRpb24Ac2V0X0RlbWFuZFBvc2l0
aW9uAGdldF9TdG9yYWdlUG9zaXRpb24Ac2V0X1N0b3JhZ2VQb3NpdGlvbgBBZGp1c3RQb3NpdGlv
bgBnZXRfU3VwcGx5UG9zaXRpb24Ac2V0X1N1cHBseVBvc2l0aW9uAEV4Y2VwdGlvbgBnZXRfRGVz
Y3JpcHRpb24Ac2V0X0Rlc2NyaXB0aW9uAFNvbHV0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBvYmpl
Y3RUbwBDdWx0dXJlSW5mbwBQcm9wZXJ0eUluZm8AY3VyZW50bHlTb2x2ZWRNZHEAU3lzdGVtLkxp
bnEAbXlWYXIAZHIAT2xlRGJEYXRhUmVhZGVyAEZyb21EYXRhUmVhZGVyAEZyb21PbGVSZWFkZXIA
RXhlY3V0ZVJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFRvVXBw
ZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAEV2ZW50c09iamVjdFdy
YXBwZXIAT2xlRGJQYXJhbWV0ZXIARmlyZUVycm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IA
QWN0aXZhdG9yAC5jdG9yAGdldF9Mb3NzRmFjdG9yAHNldF9Mb3NzRmFjdG9yAGdldF9EZW1hbmRB
ZGp1c3RGYWN0b3IAc2V0X0RlbWFuZEFkanVzdEZhY3RvcgBnZXRfU3VwcGx5QWRqdXN0RmFjdG9y
AHNldF9TdXBwbHlBZGp1c3RGYWN0b3IAZ2V0X0RlbGl2ZXJ5QWRqdXN0RmFjdG9yAHNldF9EZWxp
dmVyeUFkanVzdEZhY3RvcgAuY2N0b3IAc3RyAGdldF9Ib3VyAHNldF9Ib3VyAGhvdXIAZ2V0X01E
UXMAc2V0X01EUXMAZ2V0X01EUURhdGFzAHNldF9NRFFEYXRhcwBTeXN0ZW0uRGlhZ25vc3RpY3MA
U1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3YzBjZTg0MDJmYWEuRXh0ZW5zaW9uTWV0aG9kcwBNaWNy
b3NvZnQuU29sdmVyRm91bmRhdGlvbi5TZXJ2aWNlcwBTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2Vy
dmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNU
X2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMyZjllZjdkODU4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJl
c291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRfRGVsaXZlcmllcwBzZXRfRGVsaXZlcmllcwBTVF9m
MzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5Qcm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMA
U2V0dGluZ3MAZ2V0X1BhdGhzAHNldF9QYXRocwBnZXRfR29hbHMAZ2V0X0RlY2lzaW9ucwBzZXRf
RGVjaXNpb25zAFNhdmVEZWNpc2lvbnMAZ2V0X051bWJlck9mRGVjaXNpb25zAHNldF9OdW1iZXJP
ZkRlY2lzaW9ucwBVcGRhdGVTb2x2ZXJEZWNpc2lvbnMASUVOdW1lcmFibGVFeHRlbnNpb25zAE15
RXh0ZW5zaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAGdldF9QYXJhbWV0
ZXJzAFN1Y2Nlc3MAU29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzAGdldF9EdHMAZ2V0X0NvbnRyYWN0
cwBzZXRfQ29udHJhY3RzAFNjcmlwdFJlc3VsdHMAR2V0R2VuZXJpY0FyZ3VtZW50cwBnZXRfRXZl
bnRzAGdldF9SZWNlaXB0cwBzZXRfUmVjZWlwdHMAUG9wdWxhdGVEVFNWYXJpYWJsZUlucHV0cwBn
ZXRfUm93cwBDb25jYXQAZ2V0X0NvbnRyYWN0AHNldF9Db250cmFjdABjb250cmFjdABnZXRfU29s
dmVyRGVjaXNpb25FeGFjdABzZXRfU29sdmVyRGVjaXNpb25FeGFjdABnZXRfSW5uZXJPYmplY3QA
U2VsZWN0AERpc3RpbmN0AG9wX0ltcGxpY2l0AGdldF9yYXRjaGV0X2xpbWl0AHNldF9yYXRjaGV0
X2xpbWl0AGdldF9EZWZhdWx0AEZpcnN0T3JEZWZhdWx0AERUU0V4ZWNSZXN1bHQAc2V0X1Rhc2tS
ZXN1bHQAVG9JbnQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJyZW50AGN1cnJlbnQAQWRk
Q29uc3RyYWludABnZXRfU3RvcmFnZUNvbnN0cmFpbnQAc2V0X1N0b3JhZ2VDb25zdHJhaW50AGRl
bGl2ZXJ5UG9pbnQAQ291bnQAcmVjZWlwdABnZXRfVGVybVN0YXJ0AHNldF9UZXJtU3RhcnQAQ29u
dmVydABUb0xpc3QAbGlzdABGaXJzdABtZHFUb0FkanVzdABNb3ZlTmV4dABTb2x2ZXJDb250ZXh0
AEdldENvbnRleHQARGF0YVJvdwBpbmRleABUaGVuQnkAR3JvdXBCeQBPcmRlckJ5AGdldF9JdGVt
QXJyYXkAVG9BcnJheQBnZXRfQXNzZW1ibHkAZ2V0X1N1cHBseQBzZXRfU3VwcGx5AEV4ZWN1dGVO
b25RdWVyeQBxdWVyeQBnZXRfRGVsaXZlcnkAc2V0X0RlbGl2ZXJ5AGRlbGl2ZXJ5AG9wX0VxdWFs
aXR5AG9wX0luZXF1YWxpdHkAZ2V0X0dyYW51bGFyaXR5AHNldF9HcmFudWxhcml0eQBnZXRfUHJp
b3JpdHkAc2V0X1ByaW9yaXR5AHByaW9yaXR5AElzTnVsbE9yRW1wdHkARmlsbE9iamVjdFdpdGhQ
cm9wZXJ0eQBHZXRQcm9wZXJ0eQB6AAAAAAAfTwBMAEUAXwBDAE8ATgBOAF8ATQBhAGkAbgBEAEIA
ABdTAGMAcgBpAHAAdABfAFQAYQBzAGsAAAMNAAAZUABTAF8AUAByAG8AYwBlAHMAcwBJAEQAABlQ
AFMAXwB1AHMAZQByAF8AbgBhAG0AZQAAR2EAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIA
bwAuAHMAbwBsAHYAZQByAF8AZABlAGMAaQBzAGkAbwBuAHMAXwAAA18AAGFhAGQAaQBoAGEAXwBw
AHIAbwBjAGUAcwBzAC4AZABiAG8ALgBjAG8AbgB0AHIAYQBjAHQAdwBpAHMAZQBfAGQAZQB0AGEA
aQBsAF8AbQBkAHEAXwBnAHIAbwB1AHAAXwAAS2EAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBk
AGIAbwAuAHMAdABvAHIAYQBnAGUAXwBjAG8AbgBzAHQAcgBhAGkAbgB0AF8AAEdhAGQAaQBoAGEA
XwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBzAHQAbwByAGEAZwBlAF8AcABvAHMAaQB0AGkAbwBu
AF8AAHlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUA
cgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAHIAJwAsACAAQABwAHIAbwBjAGUAcwBz
AF8AaQBkAD0AJwABJycALAAgAEAAdQBzAGUAcgBfAGwAbwBnAGkAbgBfAGkAZAA9ACcAAQUnACAA
AXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBf
AHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAGQAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8A
aQBkAD0AJwABeUUAWABFAEMAIABzAHAAYQBfAHIAdQBuAF8AcwBpAG0AcABsAGUAeABfAHMAbwBs
AHYAZQByAF8AcABhAGMAawBhAGcAZQAgAEAAZgBsAGEAZwA9ACcAbQAnACwAIABAAHAAcgBvAGMA
ZQBzAHMAXwBpAGQAPQAnAAEPTgBvACAAUABhAHQAaAAAF04AbwAgAEMAbwBuAHQAcgBhAGMAdAAA
A0QAAAMtAAEDQwAAB1IATwBXAAAHQwBPAEwAAAlnAG8AYQBsAAAVVwBJAFQASABEAFIAQQBXAEEA
TAAACU4AVQBMAEwAAAMnAAEBAHlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABl
AHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAHUAJwAsACAA
QABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABY1QAUgBVAE4AQwBBAFQARQAgAFQAQQBCAEwARQAg
AGEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAbwBsAHYAZQByAF8AZABlAGMA
aQBzAGkAbwBuAHMAAAdAAHAAMQAAGUkATgBTAEUAUgBUACAASQBOAFQATwAgAACCgSAAKABzAG8A
dQByAGMAZQBfAGkAZAAsACAAWwBzAG8AdQByAGMAZQBdACwAIABkAGUAcwB0AGkAbgBhAHQAaQBv
AG4AXwBpAGQALAAgAFsAZABlAHMAdABpAG4AYQB0AGkAbwBuAF0ALAAgAG0AZABxACwAIAByAGUA
YwBlAGkAdgBlAGQALAAgAGcAbwBhAGwAXwBvAGIAagBlAGMAdABpAHYAZQAsACAAbABvAHMAcwBf
AGYAYQBjAHQAbwByACwAIABwAGEAdABoAF8AaQBkACwAYwBvAG4AdAByAGEAYwB0AF8AaQBkACwA
IABkAGUAbABpAHYAZQByAHkALAAgAHIAZQBjAGUAaQB2AGUAZABfAG0AZABxACwAcABhAHQAaABf
AHAAcgBpAG8AcgBpAHQAeQAsAGMAbwBuAHQAcgBhAGMAdABfAHIAYQBuAGsALABzAG8AdQByAGMA
ZQBfAHAAbwBzAGkAdABpAG8AbgAsAHMAbwB1AHIAYwBlAF8AcgBhAG4AawAsAGQAZQBzAHQAaQBu
AGEAdABpAG8AbgBfAHAAbwBzAGkAdABpAG8AbgAsAGQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAHIA
YQBuAGsALABbAHQAZQByAG0AXwBzAHQAYQByAHQAXQAsAFsAaABvAHUAcgBdACwAWwBnAHIAYQBu
AHUAbABhAHIAaQB0AHkAXQAsACAAcwB1AHAAcABsAHkAXwBwAG8AcwBpAHQAaQBvAG4ALAAgAGQA
ZQBtAGEAbgBkAF8AcABvAHMAaQB0AGkAbwBuACwAaQBzAF8AZABzAHQAKQAgAFYAYQBsAHUAZQBz
ACAAKAAABSwAJwABBScALAABAywAAAcnACwAJwABJ3kAeQB5AHkALQBNAE0ALQBkAGQAIABIAEgA
OgBtAG0AOgBzAHMAAQUpACAAAHFTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBk
ADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4A
UgBlAHMAbwB1AHIAYwBlAHMAAAAAbWqExxTIKkyiBqOm6bLC1AADIAABBCABAQgFIAEBERUEIAEB
DgYgAQERgLUEBwESQQUgABKAzQUgABKA0QYgARKA1RwFIAASgNkDIAAOBgADDg4ODgIGDgggBQII
Dg4OCAYHAhJJEkEDIAAcBSAAEoDhBiABEoDlHAcABA4ODg4ONgcREkQSTR0SHAgSSBURVQESKBJM
HRIwElAIElQVElkCEigCElgVElEBEiAVElkCEiQSIAgSQQUAAQ4dDgYgAgEOEkkEIAASTQYVElEB
EjAECgESMA0QAQEdHgAVEoCJAR4ACxABAQgVEoCJAR4ABhUSUQESHAQKARIcBhUSUQESJAQKARIk
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
KBIgBiABEmUSIAUgAQ0SIAUgAQISIAMoAAgDKAAOBCgAEigDKAANAygACggoABUSUQESKAQoABIw
BCgAEhwEKAASGAQoABJlBSgAEYChAygAAgUoAB0SZQgoABUSUQESIAUoAB0SJAUoAB0SMAUoAB0S
HAUoAB0SKAUoAB0SGAUoABKApQQoABJhBCgAEkkFCAASgK0FCAASgLEECAASOAgBAAgAAAAAAB4B
AAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfZjM5MjMzZmFjMTZl
NDI2ZDk5MWQ5MzJmOWVmN2Q4NTgAAAUBAAAAAA4BAAlNaWNyb3NvZnQAAB8BABpDb3B5cmlnaHQg
QCBNaWNyb3NvZnQgMjAxNAAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFt
ZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0CAEAGgAAAAAAKQEAJDYxMTYzRUYwLTQ0
RTktNDEzRi1BODIxLUNDODE1MzlBNzJBMgAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNv
dXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9
bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2Vz
LlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAnLIAAAAAAAAAAAAAtrIA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKiyAAAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3Jl
ZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAA
AAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWMAA
AD4EAAAAAAAAAAAAAD4ENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+
AAABAAAAAQBoWWUeAAABAGhZZR4/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBh
AHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAA
sASeAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAAB6AwAAAQAwADAAMAAwADAANABi
ADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAANAAKAAEAQwBvAG0AcABhAG4AeQBOAGEA
bQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0
AGkAbwBuAAAAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQA
OQAzADIAZgA5AGUAZgA3AGQAOAA1ADgAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAA
ADEALgAwAC4ANwA3ADgAMQAuADIAMgA4ADgAOAAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4A
YQBtAGUAAABTAFQAXwBmADMAOQAyADMAMwBmAGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAz
ADIAZgA5AGUAZgA3AGQAOAA1ADgALgBkAGwAbAAAAFoAGwABAEwAZQBnAGEAbABDAG8AcAB5AHIA
aQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAE0AaQBjAHIAbwBzAG8AZgB0ACAAMgAw
ADEANAAAAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgA
AQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAAUwBUAF8AZgAzADkAMgAzADMAZgBh
AGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AC4AZABsAGwA
AABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBj
ADEANgBlADQAMgA2AGQAOQA5ADEAZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAAAEIADwABAFAA
cgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA3ADgAMQAuADIAMgA4ADgAOAAA
AAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANwA3ADgA
MQAuADIAMgA4ADgAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAAAAwAAADIMgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="121"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="363"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="124"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="123"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="384"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="324"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="278"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="485"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="403"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="SolverData.cs"
            Line="55"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>