<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/27/2014 4:45:21 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSC201"
  DTS:CreatorName="DPCS\spneupane"
  DTS:DelayValidation="True"
  DTS:DTSID="{01A1F947-D34C-4878-9F21-5B5FB7DB0DC5}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.71"
  DTS:LocaleID="1033"
  DTS:ObjectName="Simplex_Solver"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="972"
  DTS:VersionGUID="{F9346D40-91DF-4A43-87D6-680DF4106207}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DelayValidation="True"
      DTS:DTSID="{FA974616-3C2B-483C-A7BC-E57270C724D2}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=EU-T-SQL01.farrms.us,2033;User ID=dev_admin;Initial Catalog=TRMTracker_Release_Enercity;Provider=SQLNCLI11.1;Persist Security Info=True;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TEST"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{09573659-78E2-4348-AEE5-DCAAF0DD8E93}"
      DTS:ObjectName="SML CONFIG SOLVER" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Simplex_Solver&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{78488952-2400-43C8-8754-886EA871F451}"
      DTS:ObjectName="Configuration 1" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30A8D2F3-5522-4A63-A095-413BB9463747}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E930343F-DD84-4EF2-A1D5-FC76AAE68CD3}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessID">
      <DTS:VariableValue
        DTS:DataType="8">ACF85B1B_0530_41D6_BA75_ED8F9D3763E3</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A8DBA9F2-0419-4B48-81DF-C9156EBF7B56}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_user_name">
      <DTS:VariableValue
        DTS:DataType="8">adangol</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{8D33C3B6-1E1C-44BC-8DE3-793E06C59467}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{044B1564-E644-454E-BA78-2B9552A1E915}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f39233fac16e426d991d932f9ef7d858"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::PS_ProcessID,User::PS_user_name">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
	<Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Settings.get_Default():ST_f39233fac16e426d991d932f9ef7d858.Properties.Sett" +
	"ings")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
		
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
		private static Settings defaultInstance = new Settings();
		
		public static Settings Default {
			get {
				return defaultInstance;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_f39233fac16e426d991d932f9ef7d858</msb:CodeName>
		<msb:DisplayName>ST_f39233fac16e426d991d932f9ef7d858</msb:DisplayName>
		<msb:ProjectId>{03EF4576-714D-44EE-80B6-ADEB18E884F0}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f39233fac16e426d991d932f9ef7d858.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="MdqData.cs"/>
		<msb:File Include="MDQ.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Supply.cs"/>
		<msb:File Include="Delivery.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Path.cs"/>
		<msb:File Include="Contract.cs"/>
		<msb:File Include="SolverData.cs"/>
		<msb:Breakpoint Include="915ce05a34f34d0a9be18010173e90e9">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>362</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="92a8d8a6032f4223a38021efa4d4b8ab">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>121</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="87eea4960a7a48deb50bf258ddeaa672">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>123</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="be408d9866bf47ac9f4e74f0fbcaffef">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>124</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="2b584bd0a9e846f5bc1619a5059c8e69">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>323</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="57ec78f6abd2460eb3a3b2725b6b7f09">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>383</msb:LineNumber>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="8393c570eef0486684d65473fd90d6c0">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>473</msb:LineNumber>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="cff86f8bac0346e284c9096d8aced38c">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>277</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0856fe96d7cf407a841d8465e3abb099">
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>29</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>402</msb:LineNumber>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:HitCountTarget>1</msb:HitCountTarget>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Contract.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Contract
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Rank { get; set; }
        public virtual Path Path { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_f39233fac16e426d991d932f9ef7d858")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="MdqData.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MdqData
    {
        public int FromLocationId { get; set; }
        public string FromLocation { get; set; }
        public int ToLocationId { get; set; }
        public string ToLocationName { get; set; }
        public double LossFactor { get; set; }
        public int PathId { get; set; }
        public string PathName { get; set; }
        public int Priority { get; set; }
        public int ContractId { get; set; }
        public string ContractName { get; set; }
        public int ContractRank { get; set; }
        public double MDQ { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public string StorageType { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
	"rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
	"fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
	"):Void")]

namespace ST_f39233fac16e426d991d932f9ef7d858.Properties {
	
	
	/// <summary>
	///   A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
	internal class Resources {
		
		private static global::System.Resources.ResourceManager resourceMan;
		
		private static global::System.Globalization.CultureInfo resourceCulture;
		
		[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal Resources() {
		}
		
		/// <summary>
		///   Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Resources.ResourceManager ResourceManager {
			get {
				if ((resourceMan == null)) {
					global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f39233fac16e426d991d932f9ef7d858.Properties.Resources", typeof(Resources).Assembly);
					resourceMan = temp;
				}
				return resourceMan;
			}
		}
		
		/// <summary>
		///   Overrides the current thread's CurrentUICulture property for all
		///   resource lookups using this strongly typed resource class.
		/// </summary>
		[global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
		internal static global::System.Globalization.CultureInfo Culture {
			get {
				return resourceCulture;
			}
			set {
				resourceCulture = value;
			}
		}
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task

/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */

#endregion

#region Namespaces

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Linq;
using Microsoft.SolverFoundation.Services;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Tasks.ScriptTask;
using ST_f39233fac16e426d991d932f9ef7d858;
using DTSExecResult = Microsoft.SqlServer.Dts.Runtime.DTSExecResult;

#endregion

namespace ST_585ba2e92bdd42deb81f7c0ce8402faa
{
    /// <summary>
    ///     ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    ///     or parent of this class.
    /// </summary>
    [SSISScriptTaskEntryPoint]
    public class ScriptMain : VSTARTScriptObjectModelBase
    {
        #region Help:  Using Integration Services variables and parameters in a script

        /* To use a variable in this script, first ensure that the variable has been added to 
		 * either the list contained in the ReadOnlyVariables property or the list contained in 
		 * the ReadWriteVariables property of this script task, according to whether or not your
		 * code needs to write to the variable.  To add the variable, save this script, close this instance of
		 * Visual Studio, and update the ReadOnlyVariables and 
		 * ReadWriteVariables properties in the Script Transformation Editor window.
		 * To use a parameter in this script, follow the same steps. Parameters are always read-only.
		 * 
		 * Example of reading from a variable:
		 *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
		 * 
		 * Example of writing to a variable:
		 *  Dts.Variables["User::myStringVariable"].Value = "new value";
		 * 
		 * Example of reading from a package parameter:
		 *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
		 *  
		 * Example of reading from a project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
		 * 
		 * Example of reading from a sensitive project parameter:
		 *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
		 * */

        #endregion

        #region Help:  Firing Integration Services events from a script

        /* This script task can fire events for logging purposes.
		 * 
		 * Example of firing an error event:
		 *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
		 * 
		 * Example of firing an information event:
		 *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
		 * 
		 * Example of firing a warning event:
		 *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
		 * */

        #endregion

        #region Help:  Using Integration Services connection managers in a script

        /* Some types of connection managers can be used in this script task.  See the topic 
		 * "Working with Connection Managers Programatically" for details.
		 * 
		 * Example of using an ADO.Net connection manager:
		 *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
		 *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
		 *
		 * Example of using a File connection manager
		 *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
		 *  string filePath = (string)rawConnection;
		 *  //Use the connection in some code here, then release the connection
		 *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
		 * */

        #endregion

        /// <summary>
        ///     This method is called when this script task executes in the control flow.
        ///     Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        ///     To open Help, press F1.
        /// </summary>


        private readonly SolverData _solverData = new SolverData();

        private string PS_process_id;
        private string PS_user_name;
        public void Main()
        {

            try
            {
                ConnectionManager cm = Dts.Connections[@"OLE_CONN_MainDB"];

                _solverData.OleDbConnection = getconnection("OLE_CONN_MainDB");
                // TODO: Add your code here
                PopulateDTSVariableInputs();
                //CreateProcessTableIfNotExists();
                DumpM2MqData();
                SolverCalculationProcess();
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private OleDbConnection getconnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }

        private void PopulateDTSVariableInputs()
        {
            try
            {
                PS_process_id = Dts.Variables["PS_ProcessID"].Value.ToString();
                PS_user_name = Dts.Variables["PS_user_name"].Value.ToString();

                //  Dynamic tables that stores flow optimization data
                _solverData.DecisionTable = "adiha_process.dbo.solver_decisions_" + PS_user_name + "_" + PS_process_id;
                _solverData.TableToUpdate = "adiha_process.dbo.contractwise_detail_mdq_group_" + PS_user_name + "_" + PS_process_id;
                _solverData.StorageConstraint = "adiha_process.dbo.storage_constraint_" + PS_user_name + "_" + PS_process_id;
                _solverData.StoragePosition = "adiha_process.dbo.storage_position_" + PS_user_name + "_" + PS_process_id;
                _solverData.ProcessID = PS_process_id;
                _solverData.UserName = PS_user_name;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }

        private void DumpM2MqData()
        {
            try
            {
                String query = "";//"TRUNCATE TABLE adiha_process.dbo.solver_data_feed";
                OleDbCommand cmd;
                query = @"EXEC spa_run_simplex_solver_package @flag='r', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                _solverData.Receipts = new List<Supply>().FromOleReader(reader).ToArray();
                _solverData.TotalM2 = _solverData.Receipts.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='d', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";
                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();
                _solverData.Deliveries = new List<Delivery>().FromOleReader(reader).ToArray();
                _solverData.TotalMQ = _solverData.Deliveries.Count();
                reader.Close();

                query = @"EXEC spa_run_simplex_solver_package @flag='m', @process_id='" + PS_process_id + "', @user_login_id='" + PS_user_name + "' ";

                cmd = new OleDbCommand(query, _solverData.OleDbConnection);
                reader = cmd.ExecuteReader();

                int index = 0;
                _solverData.MDQDatas = new List<MdqData>().FromDataReader(reader).ToArray();
                _solverData.MDQs = new List<MDQ>();
                foreach (Delivery delivery in _solverData.Deliveries)
                {
                    delivery.Paths = _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.PathId,
                                        Description = x.PathName,
                                        Priority = x.Priority,
                                        Delivery = delivery,
                                        ReceiptId = x.FromLocationId
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToList();

                    foreach (Path path in delivery.Paths)
                    {
                        path.Contract =
                            _solverData.MDQDatas.Where(x => x.ToLocationId == delivery.Id && x.PathId == path.Id).OrderBy(X=> X.ContractRank)
                                .Select(
                                    x =>
                                        new Contract()
                                        {
                                            Id = x.ContractId,
                                            Description = x.ContractName,
                                            Rank = x.ContractRank,
                                            Path = path
                                        })
                                .FirstOrDefault();
                    }
                }


                index = 0;
                foreach (Supply receipt in _solverData.Receipts)
                {
                    foreach (Delivery delivery in _solverData.Deliveries)
                    {
                        List<Path> paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();
                        //  if no path defined in delivery poing define default path 
                        if (paths.Count() == 0)
                            delivery.Paths.Add(new Path() { Id = 0, Description = "No Path", Priority = 9999999, Delivery = delivery, ReceiptId = receipt.Id, Contract = new Contract() });
                        paths = delivery.Paths.Where(x => x.ReceiptId == receipt.Id).ToList();

                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract;
                            if (contract == null)
                                path.Contract = new Contract() { Id = 0, Description = "No Contract", Rank = 9999999, Path = path };
                            //foreach (Contract contract in path.Contracts)
                            //{
                            var mdqCollection = _solverData.MDQDatas.Where(z => z.FromLocationId == receipt.Id & z.ToLocationId == delivery.Id & z.ContractId == contract.Id & z.PathId == path.Id)
                                .Select(z =>
                                        new MDQ()
                                        {
                                            Id = index,
                                            Delivery = delivery,
                                            Supply = receipt,
                                            Position = z.MDQ,
                                            Contract = new Contract() { Id = z.ContractId, Description = z.ContractName, Rank = z.ContractRank },
                                            Decision = new Decision(Domain.RealNonnegative, "D" + index),
                                            Path = new Path() { Id = z.PathId, Description = z.PathName, ReceiptId = receipt.Id },
                                            LossFactor = z.LossFactor,
                                            SupplyAdjustFactor = z.SupplyAdjustFactor,
                                            DeliveryAdjustFactor = z.DeliveryAdjustFactor,
                                            DemandAdjustFactor = z.DemandAdjustFactor,
                                            TermStart = z.TermStart,
                                            Hour = z.Hour,
                                            Granularity = z.Granularity,
                                            StorageType = z.StorageType,
                                            SupplyPosition = z.SupplyPosition,
                                            DemandPosition = z.DemandPosition
                                        })
                                .ToList();

                            _solverData.MDQs.AddRange(mdqCollection);
                            /*
                            _solverData.MDQs.Add(new MDQ()
                                {
                                    Delivery = delivery,
                                    Receipt = receipt,
                                    Position = 0,
                                    Id = index,
                                    LossFactor = 0,
                                    Path = path,
                                    Contract = contract,
                                    Decision = new Decision(Domain.RealNonnegative, "D" + index)
                                });
                                MdqData mdqData =
                                    _solverData.MDQDatas.FirstOrDefault(
                                        x => x.FromLocationId == receipt.Id & x.ToLocationId == delivery.Id & x.ContractId == contract.Id & x.PathId == path.Id);
                                if (mdqData != null)
                                {
                                    _solverData.MDQs[index].Position = mdqData.MDQ;
                                    _solverData.MDQs[index].LossFactor = mdqData.LossFactor;
                                    _solverData.MDQs[index].SupplyAdjustFactor = mdqData.SupplyAdjustFactor;
                                    _solverData.MDQs[index].DeliveryAdjustFactor = mdqData.DeliveryAdjustFactor;
                                    _solverData.MDQs[index].DemandAdjustFactor = mdqData.DemandAdjustFactor;
                                }
                                */
                            index++;
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }


        private void SolverCalculationProcess()
        {
            try
            {
                SolverContext context = SolverContext.GetContext();
                Supply[] receipts = _solverData.Receipts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().ToArray();

                foreach (Supply receipt in receipts)
                {
                    int[] pathPriority = _solverData.MDQs.Where(x => x.Supply.Id == receipt.Id).OrderBy(x => x.Path.Priority).ThenBy(y => y.Delivery.Rank).Select(x => x.Path.Priority).Distinct().ToArray();
                    foreach (int priority in pathPriority)
                    {
                        Delivery[] deliveries = _solverData.MDQs.Where(x => x.Path.Priority == priority).Select(x => x.Delivery).Distinct().OrderBy(x => x.Rank).ThenBy(x => x.Description).ToArray();
                        List<MDQ> mdqs = new List<MDQ>();
                        foreach (Delivery delivery in deliveries)
                        {
                            mdqs.AddRange(_solverData.MDQs.Where(x => x.Delivery.Id == delivery.Id && x.Path.Priority == priority && x.Supply.Id == receipt.Id).ToList());
                        }
                        Path[] paths = mdqs.Select(x => x.Path).Distinct().OrderBy(x => x.Priority).Where(x => x.ReceiptId == receipt.Id).ToArray();

                        paths = mdqs.Where(x => x.Supply.Id == receipt.Id)
                            .Select(
                                x =>
                                    new Path()
                                    {
                                        Id = x.Path.Id,
                                        Description = x.Path.Description,
                                        Priority = x.Path.Priority,
                                        ReceiptId = x.Path.ReceiptId,
                                        Delivery = x.Delivery,
                                        Contract = new Contract() { Id = x.Contract.Id, Description = x.Contract.Description, Rank = x.Contract.Rank }
                                    }).Distinct()
                            .ToList().GroupBy(x => x.Id).Select(g => g.First()).ToArray();


                        foreach (Path path in paths)
                        {
                            Contract contract = path.Contract; // path.Contracts.OrderBy(x => x.Rank).ThenBy(x => x.Description).Distinct().FirstOrDefault();
                                                               //foreach (Contract contract in contracts)
                                                               //{
                                                               //MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            context.ClearModel();
                            Model model = context.CreateModel();

                            //  Contract according to their rankings
                            //MDQ[] mdqtoadjust = _solverData.MDQs.Where(x => x.Path.Id == path.Id && x.Contract.Rank == rank && x.Receipt.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id).ToArray();
                            MDQ[] mdqtoadjust = mdqs.Where(x => x.Contract.Id == contract.Id && x.Path.Id == path.Id && x.Supply.Id == receipt.Id && x.Delivery.Id == path.Delivery.Id && x.Contract.Rank == contract.Rank).Distinct().ToArray();
                            if (mdqtoadjust.Count() == 0) continue;
                            //  MDQ Constraint
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Decision = new Decision(Domain.RealNonnegative, "D" + Guid.NewGuid().ToString().Replace("-", "_").ToUpper());
                                model.AddDecision(mdq.Decision);
                                model.AddConstraint("C" + mdq.Decision.Name, mdq.Decision <= mdq.Position
                                                        & mdq.Decision <= mdq.Supply.Position
                                                        & mdq.Decision <= mdq.Delivery.Position * mdq.DemandAdjustFactor
                                                        & mdq.Decision <= receipt.Position
                                                        & mdq.Decision <= mdq.Supply.max_withdrawal
                                                        & mdq.Decision >= mdq.Supply.min_withdrawal
                                                        & mdq.Decision <= mdq.Delivery.max_injection
                                                        & mdq.Decision >= mdq.Delivery.min_injection
                                                        & mdq.Decision <= mdq.Delivery.ratchet_limit
                                                        & mdq.Decision <= mdq.Supply.ratchet_limit
                                                        & mdq.Decision <= mdq.SupplyPosition
                                                        & mdq.Decision <= mdq.DemandPosition);
                            }
                            //  Row constraint
                            Decision[] decisions = mdqtoadjust.Select(x => x.Decision).ToArray();
                            model.AddConstraint("ROW" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= receipt.Position);
                            //Column Constraint
                              model.AddConstraint("COL" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= path.Delivery.Position);
                            //  Sum of Hourly supply constraint / Demand Constraint
                            //model.AddConstraint("SUPPLY" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.SupplyPositionHourly));
                            //model.AddConstraint("DEMAND" + receipt.Id.ToString() + path.Id.ToString(), Model.Sum(decisions) <= mdqtoadjust.Sum(x => x.DemandPositionHourly));

                            //  Decisions to solve
                            //Decision[] decisionToSolve = mdqtoadjust.Where(x => x.Delivery.Rank == mq & x.Receipt.Rank == m2).Select(x => x.Decision).ToArray();
                            model.AddGoal("goal", GoalKind.Maximize, Model.Sum(decisions));
                            _solverData.Model = model;
                            var simplex = new SimplexDirective();
                            Solution solution = context.Solve(simplex);
                            Goal goal = model.Goals.FirstOrDefault();
                            if (goal != null) _solverData.ObjectiveGoal += goal.ToInt();
                            //receipt.Position -= goal.ToInt();

                            //  This adjustment was added to manipulate receipt position according to lossfactor on solver decision
                            foreach (MDQ mdq in mdqtoadjust)
                            {
                                mdq.Solved = true;
                                mdq.ReceiptDecision = mdq.SolverDecision;
                                if (mdq.SupplyPosition == mdq.SolverDecision && mdq.SolverDecision != 0) //  Position of solver decision & mdq is equal then , decrease delivery position to fullfill receipt position in solver decision
                                {
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position -= mdq.SolverDecision;
                                    //***********************
                                    mdqtoadjust.AdjustPosition(mdq);
                                    //**********************
                                    mdq.Delivery.Position -= mdq.DeliveryDecision;
                                }
                                else if (mdq.SolverDecision < mdq.SupplyPosition && mdq.SolverDecision != 0)
                                {
                                    //  sd - 5000 , p 8038
                                    double sdLossFactor = (mdq.SolverDecision / (1 - mdq.LossFactor));
                                    double availablePosition = mdq.SupplyPosition - sdLossFactor;

                                    if (availablePosition >= 0)
                                    {
                                        mdq.ReceiptDecision = sdLossFactor;
                                        mdq.DeliveryDecision = mdq.SolverDecision;
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                    }
                                    else
                                    {
                                        mdq.ReceiptDecision = sdLossFactor - (mdq.SupplyPosition - mdq.SolverDecision);
                                        if (mdq.SupplyPosition < sdLossFactor)
                                        {
                                            mdq.ReceiptDecision = mdq.SupplyPosition;
                                            mdq.DeliveryDecision = mdq.ReceiptDecision * (1 - mdq.LossFactor);
                                        }
                                        //mdq.Supply.Position -= mdq.ReceiptDecision;
                                        mdqtoadjust.AdjustPosition(mdq);
                                        mdq.Delivery.Position -= mdq.DeliveryDecision;
                                    }
                                }
                                else if (mdq.SolverDecision > mdq.SupplyPosition)
                                {
                                    mdq.ReceiptDecision = mdq.SupplyPosition;
                                    mdq.DeliveryDecision = (mdq.ReceiptDecision * (1 - mdq.LossFactor));
                                    //mdq.Supply.Position = 0;
                                    mdqtoadjust.AdjustPosition(mdq);
                                    mdq.Delivery.Position -= mdq.DeliveryDecision * mdq.DeliveryAdjustFactor;
                                }
                            }
                            //  Unsolved items from same supply side
                            List<MDQ> unSolvedMdqs = _solverData.MDQs.Where(x => !x.Solved && x.Supply.Id == receipt.Id).ToList(); ;
                            foreach (MDQ item in unSolvedMdqs)
                            {
                                //  Solved items for same supply side including hour
                                double solvedSum = _solverData.MDQs.Where(x => x.Solved && x.Supply.Id == receipt.Id && x.Hour == item.Hour).Sum(x => x.ReceiptDecision);
                                //  Lesser the supply position value of unsolved mdq
                                item.SupplyPosition -= solvedSum;
                            }

                            //  Work in progress Delivery point 
                            int deliveryPoint = mdqtoadjust.FirstOrDefault().Delivery.Id;
                            List<MDQ> pendingMdqsToBeSolved = _solverData.MDQs.Where(x => x.Supply.Id != receipt.Id && x.Delivery.Id == deliveryPoint && x.Solved == false).ToList();
                            foreach (var item in pendingMdqsToBeSolved)
                            {
                                List<MDQ> currentlySolved = _solverData.MDQs.Where(x => x.Delivery.Id == deliveryPoint && x.Supply.Id == receipt.Id && x.Hour == item.Hour && x.Solved == true).ToList();
                                double solvedSum = currentlySolved.Sum(x => x.DeliveryDecision);
                                item.DemandPosition -= solvedSum;
                            }
                        }
                    }
                }
                Decision[] decisions1 = _solverData.MDQs.Select(x => x.Decision).ToArray();
                _solverData.SaveDecisions();
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }

        #region ScriptResults declaration

        /// <summary>
        ///     This enum provides a convenient shorthand within the scope of this class for setting the
        ///     result of the script.
        ///     This code was generated automatically.
        /// </summary>
        private enum ScriptResults
        {
            Success = DTSExecResult.Success,
            Failure = DTSExecResult.Failure
        };

        #endregion
    }

    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    namespace ExtensionMethods
    {
        public static class MyExtensions
        {
            public static string EncloseWithQuote(this String str)
            {
                if (str != "NULL")
                {
                    return "'" + str + "'";
                }
                return "NULL";
            }
        }
    }
    public static class IENumerableExtensions
    {
        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static void AdjustPosition(this MDQ[] mdqToAdjust, MDQ curentlySolvedMdq)
        {
            if (curentlySolvedMdq.StorageType.ToUpper() == "WITHDRAWAL")
            {
                //  Add logic to manipulate supply position of mdq collection where hour greater than currently solved mdq
                int hour = curentlySolvedMdq.Hour;
                List<MDQ> unAdjustedMdq = mdqToAdjust.Where(x => x.Hour >= hour).ToList();
                foreach (var item in unAdjustedMdq)
                {
                    item.SupplyPosition -= curentlySolvedMdq.ReceiptDecision;
                }
            }

            mdqToAdjust.Where(x => x.Id == curentlySolvedMdq.Id && x.Hour == curentlySolvedMdq.Hour).FirstOrDefault().Supply.Position -= curentlySolvedMdq.ReceiptDecision;
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Delivery.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Delivery
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        public double Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_injection { get; set; }
        public Int64 min_injection { get; set; }
        public Int64 ratchet_limit { get; set; }

        public virtual List<Path> Paths { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{4A34DBDE-A706-4FAA-B9D8-A1BBD4347CA7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f39233fac16e426d991d932f9ef7d858</RootNamespace>
    <AssemblyName>ST_f39233fac16e426d991d932f9ef7d858</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Solver.Foundation, Version=3.0.2.10889, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Contract.cs" />
    <Compile Include="Delivery.cs" />
    <Compile Include="MDQ.cs" />
    <Compile Include="MdqData.cs" />
    <Compile Include="Path.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="SolverData.cs" />
    <Compile Include="Supply.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <WCFMetadata Include="Service References\" />
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug6e337a98-83e4-42ef-9268-94d822f34cfe/962e70ec-0f26-473a-91c3-1a7fae8e91fb&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Supply.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Supply
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public double FixedPosition { get; set; }
        //public int Position { get; set; }
        public int Rank { get; set; }
        public Int64 max_withdrawal { get; set; }
        public Int64 min_withdrawal { get; set; }
        public Int64 ratchet_limit { get; set; }
        private double myVar;

        public double Position
        {
            get
            {
                if (myVar < 0)
                {
                    return 0;
                }
                return myVar;
            }
            set { myVar = value; }
        }

    }
}]]></ProjectItem>
          <ProjectItem
            Name="MDQ.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class MDQ
    {
        public int Id { get; set; }
        public Supply Supply { get; set; }
        public Delivery Delivery { get; set; }
        public double Position { get; set; }
        public double LossFactor { get; set; }
        public Path Path { get; set; }
        public Contract Contract { get; set; }
        public Decision Decision { get; set; }
        public int FreeToSchedule { get; set; }
        public int NewDecision { get; set; }
        public double ReceiptDecision { get; set; }
        public double DeliveryDecision { get; set; }
        public double SupplyAdjustFactor { get; set; }
        public double DemandAdjustFactor { get; set; }
        public double DeliveryAdjustFactor { get; set; }
        public DateTime TermStart { get; set; }
        public int Hour { get; set; }
        public int Granularity { get; set; }
        public double SupplyPosition { get; set; }
        public double DemandPosition { get; set; }
        public virtual bool Solved { get; set; }

        public double SolverDecisionExact
        {
            get
            {
                try
                {
                    return Decision.GetDouble();
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set
            {
                SolverDecisionExact = value;
                Solved = true;
            }
        }
        public double SolverDecision
        {
            get
            {
                try
                {
                    //return Convert.ToInt32(Decision.ToString());
                    return Decision.GetDouble();

                    //  Solver decision is manipulated according to loss factor
                    //return Convert.ToInt32(Convert.ToInt32(Decision.ToString()) / (1 - LossFactor));
                }
                catch (Exception)
                {
                    return 0;
                }
            }
            //  Comment below line if needed read only , This will cause an error when initializing mdq data
            set { SolverDecision = value; }
        }

        private string _storageType;

        public string StorageType
        {
            get { return _storageType; }
            set
            {
                _storageType = value;
                //  Logic to overide supply position based on storage type
                switch (_storageType.ToUpper())
                {
                    case "WITHDRAWAL":
                        this.SupplyPosition = this.Supply.Position;
                        break;
                    default:
                        this.SupplyPosition = this.SupplyPosition;
                        break;
                }
            }
        }


    }
}]]></ProjectItem>
          <ProjectItem
            Name="Path.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Path
    {
        public int Id { get; set; }
        public string Description { get; set; }
        public int Priority { get; set; }
        public int ReceiptId { get; set; }
        public virtual Delivery Delivery { get; set; }
        public virtual Contract Contract { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="SolverData.cs"
            Encoding="UTF8"><![CDATA[using Microsoft.SolverFoundation.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class SolverData
    {
        public int TotalM2 { get; set; }
        public int TotalMQ { get; set; }
        public int ObjectiveGoal { get; set; }
        public Decision[] Decisions { get; set; }
        public int NumberOfDecisions { get; set; }
        //public MDQ[] MDQs { get; set; }
        public List<MDQ> MDQs { get; set; }
        public MdqData[] MDQDatas { get; set; }
        public Supply[] Receipts { get; set; }
        public Delivery[] Deliveries { get; set; }
        public Path[] Paths { get; set; }
        public Contract[] Contracts { get; set; }
        public SqlConnection SqlConnection { get; set; }
        public Model Model { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string TableToUpdate { get; set; }
        public string DecisionTable { get; set; }
        public string ProcessID { get; set; }
        public string UserName { get; set; }

        public void SaveDecisions(bool newDecision = true)
        {
            //  Fill with new decision , truncates existing decisions 
            /*if (newDecision)
                NewDecision();
            */
            string query = MDQs.Where(x => x.Path.Id != 0).Aggregate("", (current, q) => current + ("INSERT INTO " + DecisionTable + " (source_id, " +
                                                                                                    "[source], destination_id, [destination], mdq, " +
                                                                                                    "received, goal_objective, loss_factor, path_id," +
                                                                                                    "contract_id, delivery, received_mdq," +
                                                                                                    "path_priority,contract_rank,source_position," +
                                                                                                    "source_rank,destination_position,destination_rank,[term_start],[hour],[granularity], supply_position, demand_position) " +
                                                                                                    "Values (" + q.Supply.Id + ",'" + q.Supply.Description + "'," + q.Delivery.Id +
                                                                                                    ",'" + q.Delivery.Description + "'," +
                                                                                                    q.Position + "," + q.ReceiptDecision + "," + ObjectiveGoal + "," +
                                                                                                    q.LossFactor + "," + q.Path.Id + "," + q.Contract.Id + "," +
                                                                                                    q.DeliveryDecision + "," +
                                                                                                    (q.Position - (q.SolverDecision * (1 - q.LossFactor))) + ",'" +
                                                                                                    q.Path.Priority.ToString() + "','" + q.Contract.Rank.ToString() + "'," +
                                                                                                    q.Supply.FixedPosition.ToString() + "," + q.Supply.Rank.ToString() + "," + q.Delivery.FixedPosition.ToString() + "," + q.Delivery.Rank.ToString() + ",'" + q.TermStart.ToString() + "'," + q.Hour + "," + q.Granularity + "," + q.SupplyPosition + "," + q.DemandPosition + ") "));
            ExecuteCommand(query);
            UpdateSolverDecisions();
        }

        private void UpdateSolverDecisions()
        {
            //string query = @"UPDATE d
            //                SET d.received = di.received,
            //                 d.delivered = di.delivery, 
            //                 d.path_rmdq = d.path_rmdq - di.delivery ";
            //query += " FROM " + DecisionTable + " di";
            //query += " INNER JOIN " + TableToUpdate;
            //query += @" d ON di.source_id = d.from_loc_id
            //                AND di.destination_id = d.to_loc_id
            //                AND di.path_id = d.path_id
            //                AND di.contract_id = d.contract_id";
            string query = @"EXEC spa_run_simplex_solver_package @flag='u', @process_id='" + ProcessID + "', @user_login_id='" + UserName + "' ";
            ExecuteCommand(query);
        }
        private void NewDecision()
        {
            ExecuteCommand("TRUNCATE TABLE adiha_process.dbo.solver_decisions");
        }

        public void ExecuteCommand(string query)
        {
            if (!string.IsNullOrEmpty(query))
            {
                var cmd = new OleDbCommand(query, OleDbConnection);
                cmd.CommandType = CommandType.Text;
                OleDbParameter parameter = cmd.Parameters.AddWithValue("@p1", query);
                cmd.ExecuteNonQuery();
            }
        }

        public string StorageConstraint { get; set; }
        public string StoragePosition { get; set; }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f39233fac16e426d991d932f9ef7d858.dll">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
AgEABnNHAAAKJRMMfYkAAAQRDCgZAAArfoAAAAQlLRcmfnIAAAT+BvgAAAZzTAAACiWAgAAABCgj
AAArKAsAACsoDAAAK36BAAAEJS0XJn5yAAAE/gb5AAAGczQAAAolgIEAAAQoDQAAK36CAAAEJS0X
Jn5yAAAE/gb6AAAGczYAAAolgIIAAAQoDgAAKyglAAArEw0WEwk4/gcAAHMIAQAGEw4RDhEGfZIA
AAQRDhENEQmafY8AAAQRDhEOe48AAARvkAAABn2QAAAEBm9NAAAKBm9OAAAKEw8RBxEO/gYJAQAG
c0cAAAooGQAAKygmAAArKCcAACsTEBEQKCgAACs5jwcAABEQExQWExU4GAIAABEUERWaExYRFihP
AAAKcncDAHAoUAAAChMXEhf+FhwAAAFvIgAACnJ7AwBwcrkAAHBvUQAACm9SAAAKKFMAAApzVAAA
Cm85AAAGEQ8RFm84AAAGb1UAAAoRD3J/AwBwERZvOAAABm9WAAAKKFMAAAoRFm84AAAGERZvMAAA
BihXAAAKKFgAAAoRFm84AAAGERZvLAAABm/PAAAGKFcAAAooWAAACihZAAAKERZvOAAABhEWby4A
AAZvHQAABhEWb0QAAAZaKFcAAAooWAAACihZAAAKERZvOAAABhEOe5IAAAR7jAAABHuHAAAEb88A
AAYoVwAACihYAAAKKFkAAAoRFm84AAAGERZvLAAABm/JAAAGbChXAAAKKFgAAAooWQAAChEWbzgA
AAYRFm8sAAAGb8sAAAZsKFcAAAooWgAACihZAAAKERZvOAAABhEWby4AAAZvIQAABmwoVwAACihY
AAAKKFkAAAoRFm84AAAGERZvLgAABm8jAAAGbChXAAAKKFoAAAooWQAAChEWbzgAAAYRFm8uAAAG
byUAAAZsKFcAAAooWAAACihZAAAKERZvOAAABhEWbywAAAZvzQAABmwoVwAACihYAAAKKFkAAAoR
Fm84AAAGERZvTgAABihXAAAKKFgAAAooWQAAChEWbzgAAAYRFm9QAAAGKFcAAAooWAAACihZAAAK
b1sAAAomERUXWBMVERURFI5pP939//8REH6DAAAEJS0XJn5yAAAE/gb7AAAGc1wAAAolgIMAAAQo
KQAAKygqAAArExERD3KDAwBwEQ57kgAABHuMAAAEe4cAAARvwQAABhMVEhUoXQAAChEOe48AAARv
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
nR0TAJweAAAGAH8U1BkGAPwU1BkGAN0U1BkGAKcV1BkGAFEV1BkGAGoV1BkGAJYU1BkGALEUPRYO
AIUV1BYOAEsT1BYGACwbJxgSAGIhmRIWACkawggWALsbwggGAHEC4QhTAIgcAAAGAGYDJxgaAFAi
5R0aAOsX5R0aABsZ5R0aACYW5R0aACQX5R0GANIJJxgaAC4Y5R0GADcYJxgGAAwUKB4GAAAhJxgK
AG0DphsGAE4C4QgWAL4bXxsWAE8RiggGAHkcvB8WAGkiiggGAJERJxgGAJASJxgWAE8ahSEGADUU
nR0GAPobSB4GAHsbdxkeANYT2xceAGYU2xceAIITYhkGACcUCR4GABkVCR4GAPwTCR4OAMkX1BYS
ANMfmRISAAocmRIOAEwc1BYGAFkWJxgSAPwemRISAH0RmRIWANAQwggKAIYRphsKAFwCphsaAFMY
5R0aAN4h5R0GANYCJxgaAOwQ5R0aAC0W5R0aAFYb5R0GAAQTJxgGAIcb1BkGAJMcJxgWAP8ZiggW
AGcTiggGAKcRJxgGACEiJxgGADgEJxgWANMQXxsWAL0SiggWAOYZwggWAGAcwggGAKARJxgGAKgi
1BkAAAAA1wcAAAAAAQABAAEAEABIGE8IPQABAAEAAQAQANsZTwiBAAQABwCBARAAmR9PCIEABAAJ
AIEBEACvH7AdgQAEAA0AAQAQALUgAgeBAAQADgABABAA7iICB4EACAAXAAEAEAAICAIHgQARACoA
AQAQAKMIAgeBACcAWwABABAAdxYCB4EAPACGAAEAEACrCAIHgQBCAJMAAQAQAMAiAgeBAFYAwQAA
ABAATx7JHoEAXgDSAAABEAAGH8kevQBgANYAoRAAAAEAJBwAAGEA2QADAQAAMyAAAHkAYQDbAAMB
EADWAAAAgQBkANsAAwEQANIBAACBAGUA3AADARAAEgMAAIEAZgDfAAMBEADvAwAAgQBoAOIAAwEQ
AKMEAACBAGwA5QADARAAhAUAAIEAbwDnAAMhEADdCAAAgQByAOkAAwEQABUBAACBAIcA/wADARAA
EQIAAIEAiwAEAQMBEABRAwAAgQCNAAYBAwEQAAQEAACBAI8ACAEDARAA4gQAAIEAkwALAQMBEADD
BQAAgQCVAA0BAwEQAMEAAACBAJcADwEDARAAvQEAAIEAmAARAQMhEADdCAAAgQCZABMBIQC2CCIF
AQDBCUUAAQCDEkUAAQA5CiYFAQBPDkUAAQD1CyYFAQDfCykFAQA5CiYFAQBPDkUAAQDPDS0FAQC1
DS0FAQD1CyYFAQBWDTAFAQA3DTAFAQD8DzAFAQBYDzMFAQA5CiYFAQBZEDsFAQBxED8FAQC1DS0F
AQBsDi0FAQDfCykFAQDiD0MFAQCfDEcFAQARCyYFAQDaDCYFAQC5DC0FAQD3DC0FAQCsDi0FAQCI
Di0FAQDQDi0FAQA+EEsFAQD2DiYFAQCLECYFAQAvDi0FAQDuDS0FAQDaClAFAQDpEkUAAQBlCiYF
AQAZDUUAAQCFCiYFAQBLC0UAAQBsDi0FAQBNCiYFAQAxC0UAAQCoECYFAQCjCiYFAQCFC0UAAQAL
DCYFAQALCi0FAQCsDi0FAQCIDi0FAQDQDi0FAQA+EEsFAQD2DiYFAQCLECYFAQAvDi0FAQDuDS0F
AQCjC0UAAQA5CiYFAQBPDkUAAQCoECYFAQC/CiYFAQBxED8FAQDiD0MFAQDXCSYFAQAgCiYFAQAp
DCYFAQBvD1MFAQCKDyYFAQAMD1gFAQAiD2AFAQDID2UFAQA8D2oFAQBYD28FAQCtD3QFAQCWDXkF
AQCIDH4FAQB1DYIFAQDAC0UAAQDyCkUAAQDwCUUAAQBrC0UAAQAbEEUAAQAODkUAAQA5CiYFAQBP
DkUAAQDPDS0FAQD1CyYFAQBoDDAFAQBIDDAFAQD8DzAFAQCyGy0FEQA8GIYFEQA7E4sFEQAbEZAF
BgZHCCYFVoDuH5QFVoAbE5QFBgBxIiYFBgD3Ij8FBgB8FikFBgB4ApgFBgD9ITsFBgB5A5wFBgCp
BqAFBgBQB6AFBgD3Ij8FBgA/BKkFBgBYAK0FBgB8FikFBgC+IEMFBgAKBbcFNgCKB7sFFgD0Ar8F
FgDRA8gFFgBmBdgFFgDrAOEFFgDnAeoFFgC4BPMFFgCZBfMFFgBABvMFFgAmB/wFFgCaBwYGFgAs
AA8GFgBSARgGFgCIAr8FFgAaBRgGFgDoBb8FFgB9BsgFFgB0ACIGFgB3BCwGFgAUBiwGFgAnAyIG
BgD9ITsFBgCJA6AFBgBPBDUGBgB+ATUGBgBUIyYFBgB4Aj4GBgD3Ij8FBgB5A0IGBgB8FikFBgC+
IEMFBgDpISYFBgA/BEIGBgAiGEYGBgAKBUoGBgAiGEYGBgDYBUoGBgCUG0YGBgBsHSYFNgCKB04G
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
AAAAAIMAwwYcCJAABzYAAAAAhhidHAEAkQD4SAAAAACDAOIGHAiRAAc2AAAAAIYYnRwBAJIAXEkA
AAAAgwBqBxwIkgD0SQAAAACDALQCHAiTAAc2AAAAAIYYnRwBAJQAREoAAAAAgwCxAxwIlAAHNgAA
AACGGJ0cAQCVAJhKAAAAAIMARgUcCJUABzYAAAAAhhidHAEAlgD/SgAAAACDADkCHAiWAAc2AAAA
AIYYnRwBAJcAKUsAAAAAgwA9ARwIlwA8SwAAAACRGE8dpQeYAAc2AAAAAIYYnRwBAJgASEsAAAAA
gwCqABwImAAAAAEAYBYAAAEAchsAAAIAdhIAAAMA/hUAAAQAcSIAAAEAMCIAAAIAuBsAAAEAMCIA
AAIAuBsAAAEADBYAAAEAOyIAAAIAlBsAAAEAVh0AAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEA
DBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYA
AAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEA
DBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYA
AAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEA
DBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYA
AAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEA
DBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYA
AAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEA
DBYAAAEADBYQEAEA7hgAAAEA1yIAAAEADBYAAAEADBYAAAEApyEAAAIAsBsAAAEADBYAAAEADBYA
AAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAAAEADBYAIAAAAAAAAAEAdSIAAAEA
dSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAjiMAAAEAjiMAAAEAdSIAAAEAaBYAAAEARQgA
AAEAdSIAAAEAdSIAAAEAdSIAAAEAjCMAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEA
dSIAAAEAdSIAAAEAdSIAAAEAaBYAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIA
AAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEAdSIAAAEA
dSIAAAEAdSIJAJ0cAQARAJ0cBQAZAJ0cAQAhAJ0cCgAxAJ0cEAA5AJ0cEABBAJ0cEABJAJ0cEABR
AJ0cEABZAJ0cEABhAJ0cEABpAJ0cEABxAJ0cAQD5AJ0cAQBRAZ0cAQBxAZ0cFQCBAZ0cEACJAZ0c
AQCRAZ0cBQB5AA8gIQCZAc8fJwChARkYLQCZAXAhBQCZAVUgNACBACsROgCBAP0QOgC5AZ0gPgC5
AWUjRQCxAW8cSACpAfcgWACZAfgeXADBARkYYgDJAd4VWAABAVcWOgC5AZ0gaQC5AZ0gqADRAZ0c
rgDRAegbtQAMAJ0cAQDZAZwixgDZAfch1AAZAZoTAQAUAJ0cAQAcAJ0cAQAkAJ0cAQAsAJ0cBwHZ
AQkTDQE0AJ0cBwHZAQchLwHZAQ4hUAHZASkiZwE8AJ0cBwHZAX4igAFEAJ0cBwFMAIUcygFUAJsh
2gFcAJ0cBwHZAYYi5wFkAJ0cBwHZAVMhFwJUAEciKQI5AaATAQBsAJ0cBwFMAKcJNQJ0AJ0cBwEk
ADcRUAK5AF4isgJ8AJ0cBwGEAJ0cBwHZAXcizQKMAJ0cBwGUAJ0cBwGcAJ0cBwGkAJ0cBwGsAJ0c
BwG0AJ0cBwG5AL4XAQC5ALIXQwPpARIWSAPhAM8JTgO5AfUQUwO5ARwcOgC5AZ0gWQPJAJ0cXwPB
AHQYZwPJAPEROgDpABchbQPpAD8XcwPpAMIQcwPpACkXcwPBAK8hfAO8AJ0cBwH5AVcWOgDBADMY
mgPBAP0WogPRAJ0cAQC5ADcWrQPBACMftwMkAIUcygHEAJsh2gHMAJ0cBwHZATMY1QPEAEciKQJ5
AJ0cAQABAQET6AMZAoIj7gMhAvUV9QMBAZ0cAQDUAJ0cAQAZAkEgJgQpAgwRLQQZAUARNAQhAZQg
OgQ5AoUcQAQpAZshWAAxAY4iRgQZARkYSwQpAUciKQLUAKcJNQIZAaIJKQLcAJ0cAQDUAIUcygHk
AJsh2gEZArkRYARJAvYSaQTcAKcJNQLkAEciKQJJAtQCdQS5AQAjhwS5AQwjhwTJAJ0RkQT0AJ0c
BwHZAcwTpQS5AV0jxQRZArkSygTRAd8f0QRpAugV1wRZAsci3wR5AlcWOgBBAVcWOgAZAqQi6wRZ
AZ0c8QR5AZ0cAQDZATUiFwICAIEBHgUIAIgBFAUIAIwBGQUuAAsAGQUuABMArAguABsAtQguACMA
1AguACsA3QguADMABgkuADsABgkuAEMADAkuAEsA3QguAFMAGwkuAFsABgkuAGMAOwlDAGsAGQWB
AHMAGQWDAAsAGQWhAHMAGQWjAAsAGQXBAHMAGQXhAHMAGQUBAXMAGQUgAQsAGQUhAXMAGQVAAQsA
GQVBAXMAGQVgAQsAGQVhAXMAGQWAAQsAGQWBAXMAGQWgAQsAGQWhAXMAGQWjAXsAGQXAAXMAGQXB
AXMAGQXgAXMAGQXhAXMAGQXjAXMAGQXjAYsAjAnjAZMAGQUAAnMAGQUBAnMAGQUgAnMAGQUhAnMA
GQUjAnMAGQVAAnMAGQVBAnMAGQVDAnMAGQVgAnMAGQVhAnMAGQVjAnMAGQWAAnMAGQWBAnMAGQWD
AnMAGQWgAnMAGQWhAnMAGQWjAnMAGQXBAnMAGQXDAnMAGQXgAnMAGQXhAnMAGQXjAnMAGQUAA3MA
GQUBA3MAGQUDA3MAGQUgA3MAGQUhA3MAGQUjA3MAGQVAA3MAGQVBA3MAGQVDA3MAGQVgA3MAGQVh
A3MAGQVjA3MAGQWAA3MAGQWBA3MAGQWDA3MAGQWgA3MAGQWhA3MAGQWjA3MAGQXAA3MAGQXBA3MA
GQXDA3MAGQXgA3MAGQXhA3MAGQXjA3MAGQUABHMAGQUBBHMAGQUDBHMAGQUgBHMAGQUhBHMAGQVA
BHMAGQVBBHMAGQVgBHMAGQVhBHMAGQWABHMAGQWBBHMAGQWgBHMAGQWhBHMAGQXABHMAGQXgBHMA
GQXhBHMAGQUABXMAGQUBBXMAGQUhBXMAGQVABXMAGQVBBXMAGQVgBXMAGQVhBXMAGQWABXMAGQWB
BXMAGQWgBXMAGQWhBXMAGQXABXMAGQXBBXMAGQXgBXMAGQXhBXMAGQUABnMAGQUBBnMAGQUgBnMA
GQUhBnMAGQVABnMAGQVBBnMAGQVgBnMAGQVhBnMAGQWABnMAGQWBBnMAGQWgBnMAGQWhBnMAGQXA
BnMAGQXBBnMAGQXgBnMAGQXhBnMAGQUAB3MAGQUBB3MAGQUgB3MAGQUhB3MAGQVAB3MAGQVBB3MA
GQVgB3MAGQVhB3MAGQWAB3MAGQWBB3MAGQWgB3MAGQWhB3MAGQXAB3MAGQXBB3MAGQXgB3MAGQXh
B3MAGQUACHMAGQUBCHMAGQUgCHMAGQUhCHMAGQVACHMAGQVBCHMAGQVgCHMAGQVhCHMAGQWACHMA
GQWBCHMAGQWgCHMAGQWhCHMAGQXACHMAGQXBCHMAGQXgCHMAGQXhCHMAGQUACXMAGQUBCXMAGQUg
CXMAGQUhCXMAGQVACXMAGQVBCXMAGQVgCXMAGQVhCXMAGQWACXMAGQWBCXMAGQWgCXMAGQWhCXMA
GQXACXMAGQXBCXMAGQXgCXMAGQXhCXMAGQUACnMAGQUBCnMAGQUgCnMAGQUhCnMAGQVACnMAGQVB
CnMAGQVgCnMAGQVhCnMAGQWBCnMAGQWhCnMAGQXBCnMAGQXhCnMAGQUBC3MAGQUhC3MAGQVBC3MA
GQVgC3MAGQVhC3MAGQWAC3MAGQWBC3MAGQWgC3MAGQWpC4MA1AjAC3MAGQXJC4MA1AjgC3MAGQUA
DHMAGQUBDHMAGQUgDHMAGQVADHMAGQVgDHMAGQWADHMAGQWgDHMAGQXADHMAGQXgDHMAGQUADXMA
GQUgDXMAGQVADXMAGQVgDXMAGQWADXMAGQWgDXMAGQXADXMAGQXgDXMAGQUADnMAGQUgDnMAGQVA
DnMAGQVgDnMAGQWADnMAGQWgDnMAGQXADnMAGQXgDnMAGQUAD3MAGQUgD3MAGQVAD3MAGQVgD3MA
GQWAD3MAGQWgD3MAGQXAD3MAGQXgD3MAGQUAEHMAGQUgEHMAGQVAEHMAGQVgEHMAGQWAEHMAGQXA
EHMAGQXgEHMAGQUAEXMAGQUgEXMAGQVAEXMAGQVgEXMAGQWAEXMAGQWgEXMAGQXAEXMAGQXgEXMA
GQUAEnMAGQUgEnMAGQVgEnMAGQWAEnMAGQWgEnMAGQXAEnMAGQXgEnMAGQUAE3MAGQUgE3MAGQVA
E3MAGQVgE3MAGQWAE3MAGQWgE3MAGQXAE3MAGQXgE3MAGQUAFHMAGQUgFHMAGQVAFHMAGQVgFHMA
GQWAFHMAGQWgFHMAGQXAFHMAGQXgFHMAGQUAFXMAGQUgFXMAGQVAFXMAGQVgFXMAGQWAFXMAGQWg
FXMAGQXAFXMAGQXgFXMAGQUAFnMAGQUgFnMAGQVAFnMAGQVgFnMAGQWAFnMAGQWgFnMAGQXAFnMA
GQVgF3MAGQWAF3MAGQWgF3MAGQXAF3MAGQUAGHMAGQUgGHMAGQVAGHMAGQVgGHMAGQWAGHMAGQWg
GHMAGQXAGHMAGQXgGHMAGQUAGXMAGQUgGXMAGQVAGXMAGQVgGXMAGQWAGXMAGQWgGXMAGQXAGXMA
GQVAG5sAgwnfACAFHABRAHEAWwL9A3EEegSNBJcE4wQGAAEABwAFAAgADgAJACYACgA7AAsAQQAM
AFUADQBdAA4AXwAAAJ8JIggAAEobJggAALAWIggAAHcWKggAAJ8JIggAAEobJggAAJsaLwgAACMb
LwgAALAWIggAAMYZMwgAAKIZMwgAADkhMwgAAB0fNwgAAJ8JIggAAMAiQAgAAO4iRQgAACMbLwgA
ALYcLwgAAHcWKggAALUgSggAABsZTwgAAOIRIggAAOIYIggAAL4YLwgAABMZLwgAAAodLwgAANwc
LwgAADodLwgAABciVAgAAGcdIggAAC4jIggAAB0bLwgAAMAaLwgAALoJWggAAOMgLwgAAJcYLwgA
AN0SJggAADcJIggAADkZJggAAFsJIggAACsSJggAALYcLwgAABkJIggAAAsSJggAAEsjIggAAHsJ
IggAAGkSJggAAKgWIggAAAgILwgAAAodLwgAANwcLwgAADodLwgAABciVAgAAGcdIggAAC4jIggA
AB0bLwgAAMAaLwgAAN0SJggAAJ8JIggAAEobJggAAEsjIggAAJgJIggAAO4iRQgAALUgSggAAOwC
IggAABwIIggAABsXIggAAI8fXggAAHEfIggAAH4dZAgAAJQdbQgAAHEgcwgAAL4eeQgAAB0ffwgA
ACkghQgAAE8aiwgAAOsXkQgAACkalggAAL4TJggAAG8RJggAAPIHJggAAEsSJggAANchJggAAOca
JggAAJ8JIggAAEobJggAAJsaLwgAALAWIggAAI8XMwgAAGkXMwgAADkhMwgAACMbLwgAAPobmwgA
AEMToQgAAFohpwgCAA4AAwABAA8AAwACABAABQABABEABQACABIABwABABMABwACABQACQABABUA
CQACABcACwABABgACwACABkADQABABoADQACABsADwABABwADwACAB0AEQABAB4AEQACAB8AEwAB
ACAAEwACACEAFQABACIAFQACACMAFwABACQAFwACACUAGQABACYAGQACACcAGwABACgAGwACACoA
HQABACsAHQACACwAHwABAC0AHwACAC4AIQABAC8AIQACADAAIwABADEAIwACADIAJQABADMAJQAC
ADQAJwABADUAJwACADYAKQABADcAKQACADgAKwABADkAKwACADoALQABADsALQACADwALwABAD0A
LwACAD4AMQABAD8AMQACAEAAMwABAEEAMwACAEIANQABAEMANQACAEQANwABAEUANwACAEYAOQAB
AEcAOQACAEgAOwABAEkAOwACAEoAPQABAEsAPQACAEwAPwABAE0APwACAE4AQQABAE8AQQACAFAA
QwABAFEAQwACAFIARQABAFMARQACAFQARwABAFUARwACAFYASQABAFcASQACAFgASwABAFkASwAC
AFsATQABAFwATQACAF0ATwABAF4ATwACAF8AUQABAGAAUQACAGEAUwABAGIAUwACAGMAVQABAGQA
VQACAGUAVwABAGYAVwACAGcAWQABAGgAWQACAGkAWwABAGoAWwACAGsAXQABAGwAXQACAG0AXwAB
AG4AXwACAG8AYQABAHAAYQACAHEAYwABAHIAYwACAHMAZQABAHQAZQACAHUAZwABAHYAZwACAHcA
aQABAHgAaQACAHkAawABAHoAawACAHsAbQABAHwAbQACAH0AbwABAH4AbwACAH8AcQABAIAAcQAC
AIEAcwABAIIAcwACAIMAdQABAIQAdQACAIYAdwABAIcAdwACAIgAeQABAIkAeQACAIoAewABAIsA
ewACAIwAfQABAI0AfQACAI4AfwABAI8AfwACAJAAgQABAJEAgQACAJMAgwABAJQAgwACAJUAhQAB
AJYAhQACAJcAhwABAJgAhwACAJkAiQABAJoAiQACAJsAiwABAJwAiwACAJ0AjQABAJ4AjQACAJ8A
jwABAKAAjwACAKEAkQABAKIAkQACAKMAkwABAKQAkwACAKUAlQABAKYAlQACAKcAlwABAKgAlwAC
AKkAmQABAKoAmQACAKsAmwABAKwAmwACAK0AnQABAK4AnQACAK8AnwABALAAnwACALEAoQABALIA
oQACALMAowABALQAowACALUApQABALYApQACALsApwABALwApwACAL0AqQABAL4AqQACAMEAqwAB
AMIAqwACAMMArQABAMQArQACAMUArwABAMYArwACAMcAsQABAMgAsQACAMkAswABAMoAswACAMsA
tQABAMwAtQACAM0AtwABAM4AtwACAM8AuQABANAAuQACANMAuwACANQAvQABANUAvQACANYAvwC6
AOAA7AD4AP8AJgF4AacBwwHTAd8BBwItAjsCtwLFAu0C9QIHAxcDJQMzA4UDxgPNAyAEUARXBF0E
mwQEgAAAAQAAAHkd2UsAAAAAAAACBwAABAAAAAAAAAAAAAAA+QTUCAAAAAAEAAAAAAAAAAAAAAD5
BA8TAAAAAA0AAAAAAAAAAAAAAAIFtRYAAAAADQAAAAAAAAAAAAAAAgUkCAAAAAAEAAAAAAAAAAAA
AAD5BIoIAAAAAAMAAAACAIkqAAAAAAsFRhkAAAAABAAAAAAAAAAAAAAA+QQnGAAAAAAAAAAAAQAA
AFkeAAAQAAIAEQACABIAAgATAAIAFAACABUAAgAWAAIAFwACABgAAgAZAAIAGgACABsAAgAcAAIA
HQACAB4ABAAfAAQAIAALAAAAAAATAEMIAAAAABUAQwgUAMEAUQDBAFMAwQAUAOcAUQDnAFMA5wAS
APMAUQDzAF8A8wBjAEkBZQBiAWcAYgFrAKEBYwC2AXUAAQJjABACeQAkAl8AYgFTAGIBYwBEAmcA
SwJ1AL8CjQDnAmUAwQBfAEsCdQD9Ao0A/QJjAP0CZQADA1EAAwNjABADZQDnAHUAHwONAC0DYwA8
A3UAoQFRAGIBZQBLAlEASwJTAEsCYwCOA1EAlQN5AMEDzQBLAnkASwILAb8EIQFiAQAAAAAASURU
U0Nvbm5lY3Rpb25NYW5hZ2VyRGF0YWJhc2VQYXJhbWV0ZXJzMTAwADw+OV9fN18xMAA8U29sdmVy
Q2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMTAAPD45X18xMAA8RHVtcE0yTXFEYXRhPmJfXzEwADw+
OV9fN18yMAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMjAAPD45X183Ml8wADxTYXZl
RGVjaXNpb25zPmJfXzcyXzAAPD5jX19EaXNwbGF5Q2xhc3MzXzAAPD5jX19EaXNwbGF5Q2xhc3M2
XzAAPD45X183XzAAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzAAPD5jX19EaXNwbGF5
Q2xhc3M3XzAAPER1bXBNMk1xRGF0YT5iX18wADxBZGp1c3RQb3NpdGlvbj5iX18wADw+OV9fN18x
MQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMTEAPD45X18yMQA8U29sdmVyQ2FsY3Vs
YXRpb25Qcm9jZXNzPmJfXzIxADxTYXZlRGVjaXNpb25zPmJfXzcyXzEAPD5jX19EaXNwbGF5Q2xh
c3MzXzEAPD5jX19EaXNwbGF5Q2xhc3M2XzEAPD45X183XzEAPFNvbHZlckNhbGN1bGF0aW9uUHJv
Y2Vzcz5iX183XzEAPD5jX19EaXNwbGF5Q2xhc3M3XzEAPER1bXBNMk1xRGF0YT5iX18xADxBZGp1
c3RQb3NpdGlvbj5iX18xAElFbnVtZXJhYmxlYDEASU9yZGVyZWRFbnVtZXJhYmxlYDEATGlzdGAx
AENTJDw+OF9fbG9jYWxzMQA8PjlfXzdfMTIAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183
XzEyADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMjIAVG9JbnQzMgBnZXRfVG90YWxNMgBz
ZXRfVG90YWxNMgA8PjlfXzZfMgA8RHVtcE0yTXFEYXRhPmJfXzZfMgA8PmNfX0Rpc3BsYXlDbGFz
czZfMgA8PjlfXzdfMgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMgA8PmNfX0Rpc3Bs
YXlDbGFzczdfMgBGdW5jYDIASUdyb3VwaW5nYDIAQ1MkPD44X19sb2NhbHMyADw+OV9fMTMAPFNv
bHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xMwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJf
XzIzADw+OV9fNl8zADxEdW1wTTJNcURhdGE+Yl9fNl8zADw+Y19fRGlzcGxheUNsYXNzNl8zADw+
Y19fRGlzcGxheUNsYXNzN18zADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMwBGdW5jYDMA
Q1MkPD44X19sb2NhbHMzADw+OV9fMTQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX18xNAA8
PjlfXzdfMjQAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzI0ADw+Y19fRGlzcGxheUNs
YXNzNl80ADw+OV9fN180ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN180ADw+Y19fRGlz
cGxheUNsYXNzN180ADxEdW1wTTJNcURhdGE+Yl9fNABDUyQ8PjhfX2xvY2FsczQAPD45X183XzE1
ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN18xNQA8U29sdmVyQ2FsY3VsYXRpb25Qcm9j
ZXNzPmJfXzI1ADw+OV9fNl81ADxEdW1wTTJNcURhdGE+Yl9fNl81ADw+Y19fRGlzcGxheUNsYXNz
Nl81ADw+OV9fN181ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN181ADw+Y19fRGlzcGxh
eUNsYXNzN181AENTJDw+OF9fbG9jYWxzNQA8PjlfXzdfMTYAPFNvbHZlckNhbGN1bGF0aW9uUHJv
Y2Vzcz5iX183XzE2ADw+OV9fN18yNgA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMjYA
PD45X183XzYAPFNvbHZlckNhbGN1bGF0aW9uUHJvY2Vzcz5iX183XzYAPER1bXBNMk1xRGF0YT5i
X182ADw+OV9fN18xNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfMTcAPD45X183ADxE
dW1wTTJNcURhdGE+Yl9fNwA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzcAPFNvbHZlckNh
bGN1bGF0aW9uUHJvY2Vzcz5iX18xOABTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1
OAA8PjlfXzdfOAA8U29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzPmJfXzdfOAA8PjlfXzgAPER1bXBN
Mk1xRGF0YT5iX184ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fMTkAPD45AF9WdGJsR2Fw
MV85ADw+OV9fN185ADxTb2x2ZXJDYWxjdWxhdGlvblByb2Nlc3M+Yl9fN185ADxEdW1wTTJNcURh
dGE+Yl9fOQA8TW9kdWxlPgBnZXRfUHJvY2Vzc0lEAHNldF9Qcm9jZXNzSUQAZ2V0X01EUQBzZXRf
TURRAGdldF9Ub3RhbE1RAHNldF9Ub3RhbE1RAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERU
UwBUAFgAdmFsdWVfXwBTVF81ODViYTJlOTJiZGQ0MmRlYjgxZjdjMGNlODQwMmZhYQBHZXRDb25u
ZWN0aW9uRm9yU2NoZW1hAFN5c3RlbS5EYXRhAER1bXBNMk1xRGF0YQBNZHFEYXRhAFNvbHZlckRh
dGEAX3NvbHZlckRhdGEAU3lzdGVtLkRhdGEuT2xlRGIAbXNjb3JsaWIAPD5jAFN5c3RlbS5Db2xs
ZWN0aW9ucy5HZW5lcmljAGdldF9JZABzZXRfSWQAZ2V0X1BhdGhJZABzZXRfUGF0aElkAGdldF9G
cm9tTG9jYXRpb25JZABzZXRfRnJvbUxvY2F0aW9uSWQAZ2V0X1RvTG9jYXRpb25JZABzZXRfVG9M
b2NhdGlvbklkAGdldF9Db250cmFjdElkAHNldF9Db250cmFjdElkAGdldF9SZWNlaXB0SWQAc2V0
X1JlY2VpcHRJZABSZWFkAEFkZABnZXRfU29sdmVkAHNldF9Tb2x2ZWQAUFNfcHJvY2Vzc19pZABO
ZXdHdWlkADxUb3RhbE0yPmtfX0JhY2tpbmdGaWVsZAA8UHJvY2Vzc0lEPmtfX0JhY2tpbmdGaWVs
ZAA8TURRPmtfX0JhY2tpbmdGaWVsZAA8VG90YWxNUT5rX19CYWNraW5nRmllbGQAPElkPmtfX0Jh
Y2tpbmdGaWVsZAA8UGF0aElkPmtfX0JhY2tpbmdGaWVsZAA8RnJvbUxvY2F0aW9uSWQ+a19fQmFj
a2luZ0ZpZWxkADxUb0xvY2F0aW9uSWQ+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdElkPmtfX0Jh
Y2tpbmdGaWVsZAA8UmVjZWlwdElkPmtfX0JhY2tpbmdGaWVsZAA8U29sdmVkPmtfX0JhY2tpbmdG
aWVsZAA8RGVjaXNpb25UYWJsZT5rX19CYWNraW5nRmllbGQAPEZyZWVUb1NjaGVkdWxlPmtfX0Jh
Y2tpbmdGaWVsZAA8UGF0aE5hbWU+a19fQmFja2luZ0ZpZWxkADxUb0xvY2F0aW9uTmFtZT5rX19C
YWNraW5nRmllbGQAPFVzZXJOYW1lPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3ROYW1lPmtfX0Jh
Y2tpbmdGaWVsZAA8U3RvcmFnZVR5cGU+a19fQmFja2luZ0ZpZWxkADxUYWJsZVRvVXBkYXRlPmtf
X0JhY2tpbmdGaWVsZAA8UGF0aD5rX19CYWNraW5nRmllbGQAPFJhbms+a19fQmFja2luZ0ZpZWxk
ADxDb250cmFjdFJhbms+a19fQmFja2luZ0ZpZWxkADxPYmplY3RpdmVHb2FsPmtfX0JhY2tpbmdG
aWVsZAA8bWluX3dpdGhkcmF3YWw+a19fQmFja2luZ0ZpZWxkADxtYXhfd2l0aGRyYXdhbD5rX19C
YWNraW5nRmllbGQAPE1vZGVsPmtfX0JhY2tpbmdGaWVsZAA8RGVjaXNpb24+a19fQmFja2luZ0Zp
ZWxkADxSZWNlaXB0RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxOZXdEZWNpc2lvbj5rX19CYWNr
aW5nRmllbGQAPERlbGl2ZXJ5RGVjaXNpb24+a19fQmFja2luZ0ZpZWxkADxGcm9tTG9jYXRpb24+
a19fQmFja2luZ0ZpZWxkADxtaW5faW5qZWN0aW9uPmtfX0JhY2tpbmdGaWVsZAA8bWF4X2luamVj
dGlvbj5rX19CYWNraW5nRmllbGQAPE9sZURiQ29ubmVjdGlvbj5rX19CYWNraW5nRmllbGQAPFNx
bENvbm5lY3Rpb24+a19fQmFja2luZ0ZpZWxkADxQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPEZp
eGVkUG9zaXRpb24+a19fQmFja2luZ0ZpZWxkADxEZW1hbmRQb3NpdGlvbj5rX19CYWNraW5nRmll
bGQAPFN0b3JhZ2VQb3NpdGlvbj5rX19CYWNraW5nRmllbGQAPFN1cHBseVBvc2l0aW9uPmtfX0Jh
Y2tpbmdGaWVsZAA8RGVzY3JpcHRpb24+a19fQmFja2luZ0ZpZWxkADxMb3NzRmFjdG9yPmtfX0Jh
Y2tpbmdGaWVsZAA8RGVtYW5kQWRqdXN0RmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8U3VwcGx5QWRq
dXN0RmFjdG9yPmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcnlBZGp1c3RGYWN0b3I+a19fQmFja2lu
Z0ZpZWxkADxIb3VyPmtfX0JhY2tpbmdGaWVsZAA8TURRcz5rX19CYWNraW5nRmllbGQAPE1EUURh
dGFzPmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcmllcz5rX19CYWNraW5nRmllbGQAPFBhdGhzPmtf
X0JhY2tpbmdGaWVsZAA8RGVjaXNpb25zPmtfX0JhY2tpbmdGaWVsZAA8TnVtYmVyT2ZEZWNpc2lv
bnM+a19fQmFja2luZ0ZpZWxkADxDb250cmFjdHM+a19fQmFja2luZ0ZpZWxkADxSZWNlaXB0cz5r
X19CYWNraW5nRmllbGQAPENvbnRyYWN0PmtfX0JhY2tpbmdGaWVsZAA8cmF0Y2hldF9saW1pdD5r
X19CYWNraW5nRmllbGQAPFN0b3JhZ2VDb25zdHJhaW50PmtfX0JhY2tpbmdGaWVsZAA8VGVybVN0
YXJ0PmtfX0JhY2tpbmdGaWVsZAA8U3VwcGx5PmtfX0JhY2tpbmdGaWVsZAA8RGVsaXZlcnk+a19f
QmFja2luZ0ZpZWxkADxHcmFudWxhcml0eT5rX19CYWNraW5nRmllbGQAPFByaW9yaXR5PmtfX0Jh
Y2tpbmdGaWVsZABvcF9CaXR3aXNlQW5kAE9sZURiQ29tbWFuZABFeGVjdXRlQ29tbWFuZABHb2Fs
S2luZABSZXBsYWNlAGdldF9TdGFja1RyYWNlAENyZWF0ZUluc3RhbmNlAGRlZmF1bHRJbnN0YW5j
ZQBnZXRfTWVzc2FnZQBBZGRSYW5nZQBHZXRTY2hlbWFUYWJsZQBEYXRhVGFibGUAZ2V0X0RlY2lz
aW9uVGFibGUAc2V0X0RlY2lzaW9uVGFibGUAVmFyaWFibGUARW51bWVyYWJsZQBJRGlzcG9zYWJs
ZQBHZXREb3VibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAZ2V0X0ZyZWVU
b1NjaGVkdWxlAHNldF9GcmVlVG9TY2hlZHVsZQBnZXRfTmFtZQBnZXRfUGF0aE5hbWUAc2V0X1Bh
dGhOYW1lAGdldF9Ub0xvY2F0aW9uTmFtZQBzZXRfVG9Mb2NhdGlvbk5hbWUAZ2V0X1VzZXJOYW1l
AHNldF9Vc2VyTmFtZQBnZXRfQ29udHJhY3ROYW1lAHNldF9Db250cmFjdE5hbWUAcHJvcGVydHlO
YW1lAFBTX3VzZXJfbmFtZQBEYXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1l
AHNldF9Db21tYW5kVHlwZQBnZXRfU3RvcmFnZVR5cGUAc2V0X1N0b3JhZ2VUeXBlAF9zdG9yYWdl
VHlwZQBDaGFuZ2VUeXBlAEdldFR5cGUAV2hlcmUAU3lzdGVtLkNvcmUARmFpbHVyZQBnZXRfQ3Vs
dHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxC
YXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENs
b3NlAERpc3Bvc2UAZ2V0X1RhYmxlVG9VcGRhdGUAc2V0X1RhYmxlVG9VcGRhdGUAQWdncmVnYXRl
AEVkaXRvckJyb3dzYWJsZVN0YXRlAEVuY2xvc2VXaXRoUXVvdGUARGlzcElkQXR0cmlidXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBB
c3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZy
YW1ld29ya0F0dHJpYnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9u
QXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAVHlwZUlkZW50aWZpZXJBdHRy
aWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAFNldFZhbHVlAHByb3BlcnR5VmFsdWUAdmFs
dWUAZ2V0X1JlYWxOb25uZWdhdGl2ZQBTaW1wbGV4RGlyZWN0aXZlAFNvbHZlAFN5c3RlbS5SdW50
aW1lLlZlcnNpb25pbmcAVG9TdHJpbmcAY29uc3RyaW5nAGdldF9QYXRoAHNldF9QYXRoAHBhdGgA
Z2V0X1JhbmsAc2V0X1JhbmsAZ2V0X0NvbnRyYWN0UmFuawBzZXRfQ29udHJhY3RSYW5rAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5T
Y3JpcHRUYXNrAEFkZEdvYWwAZ2V0X09iamVjdGl2ZUdvYWwAc2V0X09iamVjdGl2ZUdvYWwAb3Bf
R3JlYXRlclRoYW5PckVxdWFsAG9wX0xlc3NUaGFuT3JFcXVhbABnZXRfbWluX3dpdGhkcmF3YWwA
c2V0X21pbl93aXRoZHJhd2FsAGdldF9tYXhfd2l0aGRyYXdhbABzZXRfbWF4X3dpdGhkcmF3YWwA
Z2V0X01vZGVsAHNldF9Nb2RlbABDcmVhdGVNb2RlbABDbGVhck1vZGVsAFNjcmlwdE9iamVjdE1v
ZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3
ZDg1OC5kbGwAZ2V0X0l0ZW0AaXRlbQBTeXN0ZW0AVGVybQBTdW0ARW51bQByZXNvdXJjZU1hbgBT
Y3JpcHRNYWluAERvbWFpbgBnZXRfRGVjaXNpb24Ac2V0X0RlY2lzaW9uAEFkZERlY2lzaW9uAGdl
dF9Tb2x2ZXJEZWNpc2lvbgBzZXRfU29sdmVyRGVjaXNpb24AZ2V0X1JlY2VpcHREZWNpc2lvbgBz
ZXRfUmVjZWlwdERlY2lzaW9uAGdldF9OZXdEZWNpc2lvbgBzZXRfTmV3RGVjaXNpb24AbmV3RGVj
aXNpb24AZ2V0X0RlbGl2ZXJ5RGVjaXNpb24Ac2V0X0RlbGl2ZXJ5RGVjaXNpb24AZ2V0X0Zyb21M
b2NhdGlvbgBzZXRfRnJvbUxvY2F0aW9uAE1pY3Jvc29mdC5Tb2x2ZXIuRm91bmRhdGlvbgBTeXN0
ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBnZXRfbWluX2luamVjdGlvbgBz
ZXRfbWluX2luamVjdGlvbgBnZXRfbWF4X2luamVjdGlvbgBzZXRfbWF4X2luamVjdGlvbgBTeXN0
ZW0uUmVmbGVjdGlvbgBPbGVEYlBhcmFtZXRlckNvbGxlY3Rpb24ARGF0YVJvd0NvbGxlY3Rpb24A
Z2V0X09sZURiQ29ubmVjdGlvbgBzZXRfT2xlRGJDb25uZWN0aW9uAGdldF9TcWxDb25uZWN0aW9u
AHNldF9TcWxDb25uZWN0aW9uAGdldGNvbm5lY3Rpb24AZ2V0X1Bvc2l0aW9uAHNldF9Qb3NpdGlv
bgBnZXRfRml4ZWRQb3NpdGlvbgBzZXRfRml4ZWRQb3NpdGlvbgBnZXRfRGVtYW5kUG9zaXRpb24A
c2V0X0RlbWFuZFBvc2l0aW9uAGdldF9TdG9yYWdlUG9zaXRpb24Ac2V0X1N0b3JhZ2VQb3NpdGlv
bgBBZGp1c3RQb3NpdGlvbgBnZXRfU3VwcGx5UG9zaXRpb24Ac2V0X1N1cHBseVBvc2l0aW9uAEV4
Y2VwdGlvbgBnZXRfRGVzY3JpcHRpb24Ac2V0X0Rlc2NyaXB0aW9uAFNvbHV0aW9uAFN5c3RlbS5E
YXRhLkNvbW1vbgBvYmplY3RUbwBDdWx0dXJlSW5mbwBQcm9wZXJ0eUluZm8AY3VyZW50bHlTb2x2
ZWRNZHEAU3lzdGVtLkxpbnEAbXlWYXIAZHIAT2xlRGJEYXRhUmVhZGVyAEZyb21EYXRhUmVhZGVy
AEZyb21PbGVSZWFkZXIARXhlY3V0ZVJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rp
b25NYW5hZ2VyAFRvVXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVy
AEV2ZW50c09iamVjdFdyYXBwZXIAT2xlRGJQYXJhbWV0ZXIARmlyZUVycm9yAElFbnVtZXJhdG9y
AEdldEVudW1lcmF0b3IAQWN0aXZhdG9yAC5jdG9yAGdldF9Mb3NzRmFjdG9yAHNldF9Mb3NzRmFj
dG9yAGdldF9EZW1hbmRBZGp1c3RGYWN0b3IAc2V0X0RlbWFuZEFkanVzdEZhY3RvcgBnZXRfU3Vw
cGx5QWRqdXN0RmFjdG9yAHNldF9TdXBwbHlBZGp1c3RGYWN0b3IAZ2V0X0RlbGl2ZXJ5QWRqdXN0
RmFjdG9yAHNldF9EZWxpdmVyeUFkanVzdEZhY3RvcgAuY2N0b3IAc3RyAGdldF9Ib3VyAHNldF9I
b3VyAGhvdXIAZ2V0X01EUXMAc2V0X01EUXMAZ2V0X01EUURhdGFzAHNldF9NRFFEYXRhcwBTeXN0
ZW0uRGlhZ25vc3RpY3MAU1RfNTg1YmEyZTkyYmRkNDJkZWI4MWY3YzBjZTg0MDJmYWEuRXh0ZW5z
aW9uTWV0aG9kcwBNaWNyb3NvZnQuU29sdmVyRm91bmRhdGlvbi5TZXJ2aWNlcwBTeXN0ZW0uUnVu
dGltZS5JbnRlcm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0
ZW0uUmVzb3VyY2VzAFNUX2YzOTIzM2ZhYzE2ZTQyNmQ5OTFkOTMyZjllZjdkODU4LlByb3BlcnRp
ZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRfRGVsaXZlcmllcwBzZXRf
RGVsaXZlcmllcwBTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OC5Qcm9wZXJ0aWVz
AGdldF9WYXJpYWJsZXMAU2V0dGluZ3MAZ2V0X1BhdGhzAHNldF9QYXRocwBnZXRfR29hbHMAZ2V0
X0RlY2lzaW9ucwBzZXRfRGVjaXNpb25zAFNhdmVEZWNpc2lvbnMAZ2V0X051bWJlck9mRGVjaXNp
b25zAHNldF9OdW1iZXJPZkRlY2lzaW9ucwBVcGRhdGVTb2x2ZXJEZWNpc2lvbnMASUVOdW1lcmFi
bGVFeHRlbnNpb25zAE15RXh0ZW5zaW9ucwBTeXN0ZW0uQ29sbGVjdGlvbnMAZ2V0X0Nvbm5lY3Rp
b25zAGdldF9QYXJhbWV0ZXJzAFN1Y2Nlc3MAU29sdmVyQ2FsY3VsYXRpb25Qcm9jZXNzAGdldF9E
dHMAZ2V0X0NvbnRyYWN0cwBzZXRfQ29udHJhY3RzAFNjcmlwdFJlc3VsdHMAR2V0R2VuZXJpY0Fy
Z3VtZW50cwBnZXRfRXZlbnRzAGdldF9SZWNlaXB0cwBzZXRfUmVjZWlwdHMAUG9wdWxhdGVEVFNW
YXJpYWJsZUlucHV0cwBnZXRfUm93cwBDb25jYXQAZ2V0X0NvbnRyYWN0AHNldF9Db250cmFjdABj
b250cmFjdABnZXRfU29sdmVyRGVjaXNpb25FeGFjdABzZXRfU29sdmVyRGVjaXNpb25FeGFjdABn
ZXRfSW5uZXJPYmplY3QAU2VsZWN0AERpc3RpbmN0AG9wX0ltcGxpY2l0AGdldF9yYXRjaGV0X2xp
bWl0AHNldF9yYXRjaGV0X2xpbWl0AGdldF9EZWZhdWx0AEZpcnN0T3JEZWZhdWx0AERUU0V4ZWNS
ZXN1bHQAc2V0X1Rhc2tSZXN1bHQAVG9JbnQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9DdXJy
ZW50AGN1cnJlbnQAQWRkQ29uc3RyYWludABnZXRfU3RvcmFnZUNvbnN0cmFpbnQAc2V0X1N0b3Jh
Z2VDb25zdHJhaW50AGRlbGl2ZXJ5UG9pbnQAQ291bnQAcmVjZWlwdABnZXRfVGVybVN0YXJ0AHNl
dF9UZXJtU3RhcnQAQ29udmVydABUb0xpc3QAbGlzdABGaXJzdABtZHFUb0FkanVzdABNb3ZlTmV4
dABTb2x2ZXJDb250ZXh0AEdldENvbnRleHQARGF0YVJvdwBpbmRleABUaGVuQnkAR3JvdXBCeQBP
cmRlckJ5AGdldF9JdGVtQXJyYXkAVG9BcnJheQBnZXRfQXNzZW1ibHkAZ2V0X1N1cHBseQBzZXRf
U3VwcGx5AEV4ZWN1dGVOb25RdWVyeQBxdWVyeQBnZXRfRGVsaXZlcnkAc2V0X0RlbGl2ZXJ5AGRl
bGl2ZXJ5AG9wX0VxdWFsaXR5AG9wX0luZXF1YWxpdHkAZ2V0X0dyYW51bGFyaXR5AHNldF9HcmFu
dWxhcml0eQBnZXRfUHJpb3JpdHkAc2V0X1ByaW9yaXR5AHByaW9yaXR5AElzTnVsbE9yRW1wdHkA
RmlsbE9iamVjdFdpdGhQcm9wZXJ0eQBHZXRQcm9wZXJ0eQB6AAAfTwBMAEUAXwBDAE8ATgBOAF8A
TQBhAGkAbgBEAEIAABdTAGMAcgBpAHAAdABfAFQAYQBzAGsAAAMNAAAZUABTAF8AUAByAG8AYwBl
AHMAcwBJAEQAABlQAFMAXwB1AHMAZQByAF8AbgBhAG0AZQAAR2EAZABpAGgAYQBfAHAAcgBvAGMA
ZQBzAHMALgBkAGIAbwAuAHMAbwBsAHYAZQByAF8AZABlAGMAaQBzAGkAbwBuAHMAXwAAA18AAGFh
AGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBjAG8AbgB0AHIAYQBjAHQAdwBpAHMA
ZQBfAGQAZQB0AGEAaQBsAF8AbQBkAHEAXwBnAHIAbwB1AHAAXwAAS2EAZABpAGgAYQBfAHAAcgBv
AGMAZQBzAHMALgBkAGIAbwAuAHMAdABvAHIAYQBnAGUAXwBjAG8AbgBzAHQAcgBhAGkAbgB0AF8A
AEdhAGQAaQBoAGEAXwBwAHIAbwBjAGUAcwBzAC4AZABiAG8ALgBzAHQAbwByAGEAZwBlAF8AcABv
AHMAaQB0AGkAbwBuAF8AAHlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgA
XwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAHIAJwAsACAAQABw
AHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABJycALAAgAEAAdQBzAGUAcgBfAGwAbwBnAGkAbgBfAGkA
ZAA9ACcAAQUnACAAAXlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBfAHMAaQBtAHAAbABlAHgAXwBz
AG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcAPQAnAGQAJwAsACAAQABwAHIA
bwBjAGUAcwBzAF8AaQBkAD0AJwABeUUAWABFAEMAIABzAHAAYQBfAHIAdQBuAF8AcwBpAG0AcABs
AGUAeABfAHMAbwBsAHYAZQByAF8AcABhAGMAawBhAGcAZQAgAEAAZgBsAGEAZwA9ACcAbQAnACwA
IABAAHAAcgBvAGMAZQBzAHMAXwBpAGQAPQAnAAEPTgBvACAAUABhAHQAaAAAF04AbwAgAEMAbwBu
AHQAcgBhAGMAdAAAA0QAAAMtAAEDQwAAB1IATwBXAAAHQwBPAEwAAAlnAG8AYQBsAAAVVwBJAFQA
SABEAFIAQQBXAEEATAAACU4AVQBMAEwAAAMnAAEBAHlFAFgARQBDACAAcwBwAGEAXwByAHUAbgBf
AHMAaQBtAHAAbABlAHgAXwBzAG8AbAB2AGUAcgBfAHAAYQBjAGsAYQBnAGUAIABAAGYAbABhAGcA
PQAnAHUAJwAsACAAQABwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABY1QAUgBVAE4AQwBBAFQARQAg
AFQAQQBCAEwARQAgAGEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAHMAbwBsAHYA
ZQByAF8AZABlAGMAaQBzAGkAbwBuAHMAAAdAAHAAMQAAGUkATgBTAEUAUgBUACAASQBOAFQATwAg
AACCcyAAKABzAG8AdQByAGMAZQBfAGkAZAAsACAAWwBzAG8AdQByAGMAZQBdACwAIABkAGUAcwB0
AGkAbgBhAHQAaQBvAG4AXwBpAGQALAAgAFsAZABlAHMAdABpAG4AYQB0AGkAbwBuAF0ALAAgAG0A
ZABxACwAIAByAGUAYwBlAGkAdgBlAGQALAAgAGcAbwBhAGwAXwBvAGIAagBlAGMAdABpAHYAZQAs
ACAAbABvAHMAcwBfAGYAYQBjAHQAbwByACwAIABwAGEAdABoAF8AaQBkACwAYwBvAG4AdAByAGEA
YwB0AF8AaQBkACwAIABkAGUAbABpAHYAZQByAHkALAAgAHIAZQBjAGUAaQB2AGUAZABfAG0AZABx
ACwAcABhAHQAaABfAHAAcgBpAG8AcgBpAHQAeQAsAGMAbwBuAHQAcgBhAGMAdABfAHIAYQBuAGsA
LABzAG8AdQByAGMAZQBfAHAAbwBzAGkAdABpAG8AbgAsAHMAbwB1AHIAYwBlAF8AcgBhAG4AawAs
AGQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAHAAbwBzAGkAdABpAG8AbgAsAGQAZQBzAHQAaQBuAGEA
dABpAG8AbgBfAHIAYQBuAGsALABbAHQAZQByAG0AXwBzAHQAYQByAHQAXQAsAFsAaABvAHUAcgBd
ACwAWwBnAHIAYQBuAHUAbABhAHIAaQB0AHkAXQAsACAAcwB1AHAAcABsAHkAXwBwAG8AcwBpAHQA
aQBvAG4ALAAgAGQAZQBtAGEAbgBkAF8AcABvAHMAaQB0AGkAbwBuACkAIABWAGEAbAB1AGUAcwAg
ACgAAAUsACcAAQUnACwAAQMsAAAHJwAsACcAAQUpACAAAHFTAFQAXwBmADMAOQAyADMAMwBmAGEA
YwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAOtd+hC3rTlLktBXrKh+BSQAAyAAAQQg
AQEIBSABAREVBCABAQ4GIAEBEYC1BAcBEkEFIAASgM0FIAASgNEGIAESgNUcBSAAEoDZAyAADgYA
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
GAYgAQEdEhgFIAASgKUGIAEBEoClBSABARJhBCAAEkkFIAEBEkkGIAIODhIgBQAAEoCtBQAAEoCx
BgABARKAsQQAABI4AwAAAQUgAQISJAYgARIoEiQGIAESGBIkBSABAhIoBiABEiASJAUgAQgSKAwg
ARIoFRKAhQIIEigFIAEIEiQFIAEIEjAFIAEOEjAFIAEIEiAGIAESHBIgBSABCBIcBSABDhIcBiAB
EigSIAYgARJlEiAFIAENEiAFIAECEiADKAAIAygADgQoABIoAygADQMoAAoIKAAVElEBEigEKAAS
MAQoABIcBCgAEhgEKAASZQUoABGAoQMoAAIFKAAdEmUIKAAVElEBEiAFKAAdEiQFKAAdEjAFKAAd
EhwFKAAdEigFKAAdEhgFKAASgKUEKAASYQQoABJJBQgAEoCtBQgAEoCxBAgAEjgIAQAIAAAAAAAe
AQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2YzOTIzM2ZhYzE2
ZTQyNmQ5OTFkOTMyZjllZjdkODU4AAAFAQAAAAAOAQAJTWljcm9zb2Z0AAAfAQAaQ29weXJpZ2h0
IEAgTWljcm9zb2Z0IDIwMTQAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEAVA4URnJh
bWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAgBABoAAAAAACkBACQ2MTE2M0VGMC00
NEU5LTQxM0YtQTgyMS1DQzgxNTM5QTcyQTIAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVz
b3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNl
cy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAALivAAAAAAAAAAAAANKv
AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADErwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29y
ZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
wAAAPgQAAAAAAAAAAAAAPgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABANlLeR0AAAEA2Ut5HT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBJ4DAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAHoDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAA0AAoAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAE0AaQBjAHIAbwBzAG8AZgB0AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBw
AHQAaQBvAG4AAAAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBjADEANgBlADQAMgA2AGQAOQA5ADEA
ZAA5ADMAMgBmADkAZQBmADcAZAA4ADUAOAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAA
AAAAMQAuADAALgA3ADUANAA1AC4AMQA5ADQAMQA3AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwA
TgBhAG0AZQAAAFMAVABfAGYAMwA5ADIAMwAzAGYAYQBjADEANgBlADQAMgA2AGQAOQA5ADEAZAA5
ADMAMgBmADkAZQBmADcAZAA4ADUAOAAuAGQAbABsAAAAWgAbAAEATABlAGcAYQBsAEMAbwBwAHkA
cgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAATQBpAGMAcgBvAHMAbwBmAHQAIAAy
ADAAMQA0AAAAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgA
KAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwBmADMAOQAyADMAMwBm
AGEAYwAxADYAZQA0ADIANgBkADkAOQAxAGQAOQAzADIAZgA5AGUAZgA3AGQAOAA1ADgALgBkAGwA
bAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AZgAzADkAMgAzADMAZgBh
AGMAMQA2AGUANAAyADYAZAA5ADkAMQBkADkAMwAyAGYAOQBlAGYANwBkADgANQA4AAAAQgAPAAEA
UAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADUANAA1AC4AMQA5ADQAMQA3
AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA3ADUA
NAA1AC4AMQA5ADQAMQA3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAADAAAAOQ/AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="121"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="362"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="124"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="123"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="383"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="323"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="277"
            Column="29" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="473"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="402"
            Column="29" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="134,42"
          Id="Package\Script Task"
          TopLeft="168,74" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>