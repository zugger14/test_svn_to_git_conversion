<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/3/2016 10:20:17 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="PSLDEV10"
  DTS:CreatorName="PSLDEV10\Administrator"
  DTS:DTSID="{ED0161BA-809E-483B-9154-A0F389B11535}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="1033"
  DTS:ObjectName="ExcelSnapshot"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="597"
  DTS:VersionGUID="{9A5278F1-72DB-46C2-A6FE-172B937F57B4}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{2DAAFDCE-D134-423E-9B2C-455603BC9AE4}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=US-D-DEMO01.farrms.us,2033;User ID=farrms_admin;Initial Catalog=TRMTracker_Master_Demo4;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TRMTracker_DEV"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{3E3C2DC3-936E-453C-9D21-4328F7391056}"
      DTS:ObjectName="XML_CFG_EXCEL_SNAPSHOT" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Excel_Snapshot&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{E9E7BB68-663E-44DE-B364-936BAAAB91D8}"
      DTS:ObjectName="SQL_CFG_OLEDB_CONNECTION" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{2D18D90B-EA89-409F-98FF-1D09C4002DC5}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7DB09DDD-0BAB-4B8B-B287-C3160BD53C8B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ExcelSheetId">
      <DTS:VariableValue
        DTS:DataType="8">1146</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{92ECF050-132F-449D-ACA4-0B640B3BE9A2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ExportFormat">
      <DTS:VariableValue
        DTS:DataType="8">PNG</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FDEB1745-FC6F-439A-A44B-1E4A857388F2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ImageSnapshot">
      <DTS:VariableValue
        DTS:DataType="8">y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DC66927B-0A08-43AE-B05D-53D5DCB6D676}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8">\ExcelSnapshot\Package</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30D5E1BD-4CA9-401E-8CB9-9966B9DAB326}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessId">
      <DTS:VariableValue
        DTS:DataType="8">3E042DC6_E9F1_434E_BADE_458B4A23B649</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D3BC407-FCB8-4A07-BB84-99943A1660AD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_SettlementCalc">
      <DTS:VariableValue
        DTS:DataType="8">n</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A2819A94-DF0B-453A-A0EC-1F42A1191943}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_Synchronize">
      <DTS:VariableValue
        DTS:DataType="8">y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0AE1BCAB-B286-4254-B624-C15FECE79D75}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_UserName">
      <DTS:VariableValue
        DTS:DataType="8">farrms_admin</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">2,7,OnError,12,OnTaskFailed</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{2D18D90B-EA89-409F-98FF-1D09C4002DC5}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SCR_EXCEL_SNAPSHOT"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{F0B78735-95E4-48EB-832C-D660046379D8}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="SCR_EXCEL_SNAPSHOT"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_dd15b1baccfb44448c0156790b3eaa20"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::PS_ExcelSheetId,User::PS_ExportFormat,User::PS_ImageSnapshot,User::PS_PackageSubDir,User::PS_ProcessId,User::PS_SettlementCalc,User::PS_Synchronize,User::PS_UserName">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_dd15b1baccfb44448c0156790b3eaa20")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_dd15b1baccfb44448c0156790b3eaa20")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Settlement.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml.Linq;
using ADODB;
using Microsoft.Office.Interop.Excel;
using ST_f39233fac16e426d991d932f9ef7d858;
using System.Data.OleDb;

namespace ST_dd15b1baccfb44448c0156790b3eaa20
{
    public class Settlement
    {
        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        private const int Meter = 107300;
        private const int Deal = 107301;
        private const int Price = 107302;
        private const int UdSql = 107303;

        public Workbook Workbook { get; set; }
        private string DocumentPath { get; set; }
        private Summary SettlementParameter { get; set; }
        private SqlConnection SqlConnection { get; set; }
        private OleDbConnection OleDbConnection { get; set; }
        public string ProcessId { get; set; }
        string _userName;
        public uint IProcessId;
        
        private string excelCalcFile;
        /// <summary>
        /// Intialize settlement process
        /// </summary>
        /// <param name="processId">SSIS Execution Process Id filters are dumped under this process id process table
        /// </param>
        public Settlement(string processId, SqlConnection sqlConnection, OleDbConnection oleDbConnection, string userName)
        {
            _userName = userName;
            this.ProcessId = processId;
            this.OleDbConnection = oleDbConnection;
            //  If connection is closed while initializing open it.
            if (sqlConnection.State == ConnectionState.Closed)
                sqlConnection.Open();

            this.SqlConnection = sqlConnection;
            this.ParseSettlementParameter();
            SqlCommand cmd = new SqlCommand("spa_excel_snapshots 'c'", this.SqlConnection);
            using (SqlDataReader rd = cmd.ExecuteReader())
            {
                if (rd.HasRows)
                    rd.Read();

                DocumentPath = rd[1].ToString();
            }
            this.excelCalcFile = DocumentPath + "\\excel_calculations\\" + this.SettlementParameter.ProcessId + ".xlsx";
            if (!string.IsNullOrEmpty(this.SettlementParameter.CreateTemplate) &&
                this.SettlementParameter.CreateTemplate.ToLower() == "y")
            {
                this.DownloadContractExcelTemplate();
            }
            else
            {
                Application xlApp = new Application();
                GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out IProcessId);
                xlApp.Visible = false;
                xlApp.DisplayAlerts = false;
                
                this.Workbook = xlApp.Workbooks.Open(this.excelCalcFile);
            }
            
            
        }

        public bool IsCalcProcess()
        {
            try
            {
                if (!string.IsNullOrEmpty(this.SettlementParameter.CreateTemplate) &&
                this.SettlementParameter.CreateTemplate.ToLower() == "n")
                    return true;
                else
                    return false;
            }
            catch (Exception)
            {
                return false;
            }
        }
        /// <summary>
        /// Reterives excel file uplodated to contract manage document template
        /// </summary>
        private void GetContractExcelFile()
        {
            
        }

        /// <summary>
        /// Download excel file template with distinct data component(Line Items) worksheet.
        /// Later this file will be uploaded to contract manage document.
        /// </summary>
        private void DownloadContractExcelTemplate()
        {
            //  Create a new workbook
            Application xlApp = new Application();
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out IProcessId);
            xlApp.Visible = false;
            xlApp.DisplayAlerts = false;
            string sampleFile = DocumentPath + "\\temp_Note\\" + this.SettlementParameter.ProcessId + ".xlsx";
            object misValue = System.Reflection.Missing.Value;
            this.Workbook = xlApp.Workbooks.Add(System.Reflection.Missing.Value);

            //  Add worksheet based on charge types (data component available)

            string sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract +
                              ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "', @unique_process_id='" + SettlementParameter.ProcessId + "'";
            List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
            List<string> dataComponentList;
            if (chargeTypes.Count > 0)
            {
                dataComponentList = chargeTypes.Select(x => x.DataComponent).Distinct().ToList();

                foreach (string dataComponent in dataComponentList)
                {
                    Worksheet ws = TRMAddin.AddWorkSheet(this.Workbook, dataComponent);
                    ChargeType ct = chargeTypes.FirstOrDefault(x => x.DataComponent == dataComponent);
                    if (ct != null)
                    {
                        if (ct.Type != Deal)
                            BindReport(ct.DataComponent, ct.DataSource, true);   
                        else if (ct.Type == Deal)
                        {
                            string[] dummyColumns =
                                "Deal ID,Ref Id,Term Start,Term End,Settlement Date,Leg,Physical Financial,Deal Type,Buy Sell,Curve,Deal Volume,Allocation Volume,Settlement Volume,UOM,Settlement Price,Settlement Amount"
                                    .Split(',');
                            int colIndex = 1;
                            foreach (string col in dummyColumns)
                            {
                                var cell = (Range)ws.Cells[1, colIndex];
                                cell.Value = col;
                                cell.Font.Bold = true;
                                
                                colIndex++;
                            }
                        }
                    }
                }
                this.CreateSummarySheet();
            }

            this.Workbook.SaveAs(sampleFile);
            this.Workbook.Close(true, misValue, misValue);
            xlApp.Quit();
            IProcessId.KillExcel();
        }


        
        public List<ChargeType> ChargeTypes { get; set; }

        /// <summary>
        /// Execute Sql Command
        /// </summary>
        /// <param name="sqlCommand">Sql Command Text</param>
        /// <returns>SqlCommand</returns>
        private SqlCommand ExecuteCommand(string sqlCommand)
        {
            using (SqlCommand cmd = new SqlCommand(sqlCommand, this.SqlConnection))
            {
                return cmd;
            }
        }

        private void ParseSettlementParameter()
        {
            this.SettlementParameter = new Summary();
            try
            {
                using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                {
                    cn.Open();
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM adiha_process.dbo.excel_add_in_view_report_filter_" + this.ProcessId, cn))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                            {
                                for (int i = 0; i < rd.FieldCount; i++)
                                {
                                    string fieldName = rd.GetName(i);
                                    if (fieldName.ToLower() == "CounterpartyId".ToLower()) SettlementParameter.Counterparty = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ContractId".ToLower()) SettlementParameter.Contract = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProdDate".ToLower()) SettlementParameter.ProdDate = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProdDateTo".ToLower()) SettlementParameter.ProdDateTo = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "AsOfDate".ToLower()) SettlementParameter.AsOfDate = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProcessId".ToLower()) SettlementParameter.ProcessId = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "CreateTemplate".ToLower()) SettlementParameter.CreateTemplate = rd[fieldName].ToString();
                                }
                            }
                        }
                    }
                    cn.Close();
                }
            }
            catch (Exception)
            {
                this.SettlementParameter = null;
            }
        }

        public uint Prepare()
        {
            try
            {
                string sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract +
                              ", @counterparty_id = " + SettlementParameter.Counterparty + ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "', @unique_process_id='" + SettlementParameter.ProcessId + "'";
                List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
                List<string> dataComponentList;
                if (chargeTypes.Count > 0)
                {
                    dataComponentList = chargeTypes.Select(x => x.DataComponent).Distinct().ToList();
                    this.ClearDataComponenetWorksheetData(dataComponentList);
                }


                foreach (ChargeType ct in chargeTypes)
                {
                    BindReport(ct.DataComponent, ct.DataSource, false);
                }
                this.CreateSummarySheet();
                //this.Workbook.Save();
                Workbook.RefreshAll();
                Worksheet wsImportSetting = TRMAddin.CheckIfSheetExists("Import Settings", this.Workbook);
                if (wsImportSetting != null)
                {
                    //  Available import worksheet
                    Worksheet wsImport = TRMAddin.CheckIfSheetExists(wsImportSetting.Cells[2, 5].Value, this.Workbook);
                    if (wsImport != null)
                    {
                        ImportExport ixp = new ImportExport(wsImport, this.Workbook, this._userName) { SqlConnection = this.SqlConnection };
                        if (ixp.DataImport != null)
                        {
                            DocumentDesigner docIxp = new DocumentDesigner(wsImport, this.Workbook);
                            docIxp.PreparImportData(ixp.DataImport);
                            ixp.Run();
                        }
                    }

                }
                Workbook.Close(SaveChanges: true, Filename: this.excelCalcFile);
                return this.IProcessId;
            }
            catch (Exception)
            {

                return this.IProcessId;
            }
        }
        /// <summary>
        /// Clear all the worksheet data rows based on datacomponent name
        /// </summary>
        /// <param name="worksheetList"></param>
        private void ClearDataComponenetWorksheetData(List<string> worksheetList, bool deleteSummarySheet = false)
        {
            if (deleteSummarySheet)
                worksheetList.Add("Summary");
            ;
            foreach (string dataComponent in worksheetList)
            {
                Worksheet ws = TRMAddin.CheckIfSheetExists(dataComponent, this.Workbook);
                if (ws != null)
                {
                    TRMAddin.DeleteEntireContents(ws, this.Workbook);
                }
            }

        }

        /// <summary>
        /// Bind Data Component 
        /// </summary>
        /// <param name="dataComponent"></param>
        /// <param name="isTemplate">Generate Sample Data Only. By Default 10 Rows</param>
        private void BindReport(string dataComponent, string sqlQuery, bool isTemplate)
        {
            
            try
            {
                Worksheet dataComponentWorksheet = TRMAddin.CheckIfSheetExists(dataComponent, this.Workbook);

                dataComponentWorksheet = dataComponentWorksheet ?? TRMAddin.AddWorkSheet(this.Workbook, dataComponent);

                Connection cn = new Connection();
                Recordset rs = new Recordset();
                Command cmd = new Command();

                //cn.ConnectionString =@"Data Source=SG-D-SQL02.farrms.us,2033;Initial Catalog=TRMTracker_Dev;Persist Security Info=True;User ID=spneupane;password=Admin2929";
                cn.ConnectionString = this.OleDbConnection.ConnectionString;
                cn.ConnectionString += ";DataTypeCompatibility=80;MARS Connection=True";
                cn.Open();
                rs.Open(sqlQuery, cn, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockOptimistic, 1);

                //dataComponent.Worksheet.Cells.ClearContents();
                //dataComponent.Worksheet.Cells.ClearFormats();
                //dataComponent.Worksheet.Activate();
                //  Header
                for (int i = 0; i < rs.Fields.Count; i++)
                {
                    var cell = (Range)dataComponentWorksheet.Cells[1, i + 1];
                    cell.Value2 = rs.Fields[i].Name;
                    cell.Font.Bold = true;
                }
                Range range = dataComponentWorksheet.Cells[dataComponentWorksheet.UsedRange.Rows.Count + 1, 1];

                if (!isTemplate)
                    range.CopyFromRecordset(rs);
                else
                    range.CopyFromRecordset(rs, 10);
            }
            catch (Exception)
            {
                
            }
            

        }

        private void CreateSummarySheet()
        {
            Microsoft.Office.Interop.Excel.Worksheet wsSummary = TRMAddin.CheckIfSheetExists("Summary", this.Workbook);
            if (wsSummary == null)
                wsSummary = TRMAddin.AddWorkSheet(this.Workbook, "Summary");
            wsSummary.Cells[1, 1].Value = "Counterparty";
            wsSummary.Cells[1, 2].Value = "Contract";
            wsSummary.Cells[1, 3].Value = "Prod Date";
            wsSummary.Cells[1, 4].Value = "Prod Date To";
            wsSummary.Cells[1, 5].Value = "As of Date";
            wsSummary.Cells[1, 6].Value = "Line Item";
            Range r = wsSummary.Rows[1];
            r.Font.Bold = true;
            r.AutoFit();

            string sqlQuery = "spa_excel_addin_settlement_process @flag ='s' , @contract_id = " + SettlementParameter.Contract +
                              ", @counterparty_id = " + SettlementParameter.Counterparty + ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "'";
            if (!this.IsCalcProcess())
                sqlQuery = "spa_excel_addin_settlement_process @flag ='s' , @contract_id = " + SettlementParameter.Contract;

            Summary summary = new List<Summary>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList().FirstOrDefault();
            if (summary != null)
            {
                wsSummary.Cells[2, 1].Value = summary.Counterparty;
                wsSummary.Cells[2, 2].Value = summary.Contract;
                wsSummary.Cells[2, 3].Value = summary.ProdDate;
                wsSummary.Cells[2, 4].Value = summary.ProdDateTo;
                wsSummary.Cells[2, 5].Value = summary.AsOfDate;
                r = wsSummary.Rows[2];
                r.AutoFit();
            }

            //  Add list of line items that are used for this contrac t calc

            sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract;
            List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
            if (chargeTypes != null)
            {
                List<string> lineItems = chargeTypes.Select(x => x.ChargeTypeName).Distinct().ToList();
                int rowIndex = 2;
                foreach (string lineItem in lineItems)
                {
                    wsSummary.Cells[rowIndex, 6].Value = lineItem;
                    rowIndex++;
                }
            }
            

        }
    }

    public class Summary
    {
        public string Counterparty { get; set; }
        public string Contract { get; set; }
        public string ProdDate { get; set; }
        public string ProdDateTo { get; set; }
        public string AsOfDate { get; set; }
        public string ProcessId { get; set; }
        public string CreateTemplate { get; set;}
    }

    public class ChargeType
    {
        public int ContractId { get; set; }
        public int ChargeTypeId { get; set; }
        public string ChargeTypeName { get; set; }
        public int Granularity { get; set; }
        public string DataComponent { get; set; }
        public string DataSource { get; set; }
        public int Type { get; set; }
        public string ParamsetHash { get; set; }
        public int FormulaId { get; set; }
        public string Value { get; set; }
        public int ParamsetId { get; set; }
        public int TablixId { get; set; }
       
    }

}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="DocumentDesigner.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Office.Interop.Excel;
using Application = Microsoft.Office.Interop.Excel.Application;
using DataTable = System.Data.DataTable;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class DocumentDesigner
    {
        public Workbook Workbook { get; set; }
        public Worksheet InvoiceWorksheet { get; set; }
        public Worksheet TemplateWorksheet { get; set; }
        public List<Tablix> Tablixes { get; set; }
        public List<ReportConfiguration> ReportDataset { get; set; }

        public DocumentDesigner(Worksheet worksheet)
        {
            this.InvoiceWorksheet = worksheet;
        }

        public DocumentDesigner(Worksheet worksheet, Workbook workbook)
        {
            this.Workbook = workbook;
            this.InvoiceWorksheet = worksheet;
            this.TemplateWorksheet = TRMAddin.GetInvoiceTemplateWorkSheet(worksheet.Name, this.Workbook);
            this.Tablixes = GetListOfDataSetsUsedByInvoiceSheet();
            this.ReportDataset = TRMAddin.ListAllConfigurations(this.Workbook);
            if (ReportDataset != null)
            {
                foreach (ReportConfiguration rc in this.ReportDataset)
                {
                    Tablix tablix = new Tablix() { ReportSheetDataset = rc.ReportSheet, Columns = new List<Column>() };
                    tablix.Columns = TRMAddin.GetReportDatasetColumns(rc.ReportSheet, this.Workbook);
                }   
            }
        }


        public List<Tablix> GetListOfDataSetsUsedByInvoiceSheet()
        {
            List<Tablix> listDataSets = new List<Tablix>();

            //  Load xml configuration for this invoice sheet
            string invoiceStructureXml = this.GetInvoiceXMLByInvoiceSheet();
            if (invoiceStructureXml == null)
                return null;


            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(invoiceStructureXml);
            XmlNodeList xmlInvoiceItems = xmlDoc.GetElementsByTagName("InvoiceItems");

            foreach (XmlNode childrenNode in xmlInvoiceItems)
            {
                Tablix data = new Tablix()
                {
                    Columns = new List<Column>(),
                    Rows = new List<Row>(),
                    AggregationList = new List<Column>(),
                    EndAggregationList = new List<Row>()
                };

                foreach (XmlElement xmlElementTablix in childrenNode.ChildNodes)
                {
                    var name = xmlElementTablix.GetAttributeNode("Name");
                    data.ReportSheetDataset = name.Value;
                    data.Position = new Position()
                    {
                        R1 = xmlElementTablix.GetAttributeNode("R1").Value.ToInt(),
                        R2 = xmlElementTablix.GetAttributeNode("R2").Value.ToInt(),
                        C1 = xmlElementTablix.GetAttributeNode("C1").Value.ToInt(),
                        C2 = xmlElementTablix.GetAttributeNode("C2").Value.ToInt(),
                        EndRange = xmlElementTablix.GetAttributeNode("EndRange").Value.ToInt()
                    };

                    //  Column List
                    foreach (XmlElement xmlColumn in xmlElementTablix.ChildNodes)
                    {
                        if (xmlColumn.HasAttributes)
                            data.Columns.Add(new Column() { Label = xmlColumn.GetAttributeNode("Header").Value, Field = xmlColumn.GetAttributeNode("Field").Value });

                    }
                    listDataSets.Add(data);
                }
                //  Rows
                XmlNodeList rowNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix/Rows/Row");
                foreach (XmlElement rowNode in rowNodeList)
                {
                    var rowIndexNode = rowNode.GetAttributeNode("Index");
                    var rowName = rowNode.GetAttributeNode("Name");
                    data.Rows.Add(new Row() { Index = rowIndexNode.Value.ToInt(), Name = rowName.Value });
                }

                //  Grouping and Aggregation Used

                XmlNodeList groupNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix/Groups/Group");
                foreach (XmlElement groupNode in groupNodeList)
                {
                    var groupIndex = groupNode.GetAttributeNode("Index");
                    var groupName = groupNode.GetAttributeNode("Name");
                    var type = groupNode.GetAttributeNode("Type");
                    if (type.Value.ToInt() == 0)
                    {
                        //  Aggregation fields in column
                        Column col = data.Columns.FirstOrDefault(x => x.Field == groupName.Value);
                        if (col != null)
                        {
                            col.GroupingIndex = groupIndex.Value.ToInt();
                            col.AggregationRows = new List<Row>();
                            data.AggregationList.Add(col);
                            //  Aggregations
                            foreach (XmlElement aggElement in groupNode.ChildNodes)
                            {
                                var aggIndex = aggElement.GetAttributeNode("TemplateIndex");
                                var aggName = aggElement.GetAttributeNode("Name");
                                var row = data.Rows.FirstOrDefault(x => x.Name == aggName.Value);
                                if (row != null)
                                    col.AggregationRows.Add(row);
                            }
                        }
                    }
                    else
                    {
                        foreach (XmlElement aggElement in groupNode.ChildNodes)
                        {
                            var aggIndex = aggElement.GetAttributeNode("TemplateIndex");
                            var aggName = aggElement.GetAttributeNode("Name");
                            var row = data.Rows.FirstOrDefault(x => x.Name == aggName.Value);
                            if (row != null)
                                data.EndAggregationList.Add(row);
                        }
                    }

                }
            }
            return listDataSets;
        }

        public string GetInvoiceXMLByInvoiceSheet()
        {
            if (TRMAddin.CheckIfSheetExists(this.InvoiceWorksheet.Name, this.Workbook) != null && TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook) != null)
            {
                Worksheet invoiceConfig = TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook);
                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (this.InvoiceWorksheet.Name.ToLower() ==
                        IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        //  XML configuration for that sheet
                        return IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 2].Value);
                    }
                }

            }
            return null;
        }

        private Range GetDataRowFromInvoiceTemplate(Tablix tablix, int rowIndex)
        {
            try
            {
                Range start = this.TemplateWorksheet.Cells[rowIndex, tablix.Position.C1];
                Range end = this.TemplateWorksheet.Cells[rowIndex, tablix.Position.C2];
                Range dataRow = this.TemplateWorksheet.get_Range(start, end);
                return dataRow;
            }
            catch (Exception)
            {
                return null;
            }
            return null;
        }

        public void PreparImportData(DataImport dataImport)
        {
            //  Skipp runtime databinding if no dataset is bind
            if (dataImport.Tablix == null) return;

            //  Dataset sheet for import
            Worksheet wsDataset = TRMAddin.CheckIfSheetExists(dataImport.Tablix.ReportSheetDataset, this.Workbook);
            Worksheet wsImportSheet = TRMAddin.CheckIfSheetExists(dataImport.ImportSheet, this.Workbook);
            string selectedColumns = dataImport.Tablix.Columns.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
            if (wsDataset != null && wsImportSheet != null)
            {
                int totalImportSheetColumns = wsImportSheet.UsedRange.Columns.Count;
                //  Clear Import Sheet Data
                TRMAddin.DeleteEntireContents(wsImportSheet, this.Workbook);


                System.Data.DataTable dt = new System.Data.DataTable("Table");
                dataImport.Tablix.DataTable = dt;
                //  where data column caption stores index of column corresponding to report dataset worksheet
                foreach (string dataColumn in selectedColumns.Split(','))
                {
                    dt.Columns.Add(new DataColumn(dataColumn) { Caption = wsDataset.GetColumnIndex(dataColumn).ToString() });
                }


                //  Data Plot to datatable
                int totalRow = wsDataset.UsedRange.Rows.Count;
                int totalColumn = wsDataset.UsedRange.Columns.Count;

                for (int i = 2; i <= totalRow; i++)
                {
                    List<string> values = new List<string>();
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        values.Add(IENumerableExtensions.ToString2(wsDataset.Cells[i, dt.Columns[j].Caption.ToInt()].Value));
                    }
                    dataImport.Tablix.DataTable.Rows.Add(values.ToArray());
                }

                //  Columns to be selected to create table from existing dataset datatable


                //DataView view = new DataView(dataImport.Tablix.DataTable);
                //DataTable selected = view.ToTable("Selected", false, selectedCols.Split(','));
                int rowIndex = 2;

                //if (TRMAddin.ImportSheetHasFormula(wsImportSheet)) rowIndex = 3;

                for (int i = 0; i < dataImport.Tablix.DataTable.Rows.Count; i++)
                {
                    for (int j = 1; j <= totalImportSheetColumns; j++)
                    {
                        //  If cell has formula skipp plotting values
                        if (wsImportSheet.CellHasFormula(rowIndex, j)) continue;
                        string fieldName = IENumerableExtensions.ToString2(wsImportSheet.Cells[1, j].Value);
                        string field = dataImport.Tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                        if (string.IsNullOrEmpty(field))
                        {
                            //  table column is unmapped to worksheet table
                            continue;

                        }
                        else
                            this.InvoiceWorksheet.Cells[rowIndex, j].Value = dataImport.Tablix.DataTable.Rows[i][field].ToString2();
                    }
                    rowIndex++;
                }

                //  If worksheet has 2nd row formula delete after this will be treated as template for every run
                if (TRMAddin.ImportSheetHasFormula(wsImportSheet))
                {
                    //  After completion of data population check if any column default row 2 has formula autofill formula to all rows
                    //  TODO: This may throw error , if error exists add workbook parameter like check if sheet exists
                    TRMAddin.AutoFill(wsImportSheet, this.Workbook);
                    //Range secondRow = wsImportSheet.Rows[2];
                    //secondRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                }

            }
        }

        private Range GetDataRowFromInvoiceTemplate(Tablix tablix, int rowIndex, int columnStartRange, int columnEndRange)
        {
            try
            {
                Range start = this.TemplateWorksheet.Cells[rowIndex, columnStartRange];
                Range end = this.TemplateWorksheet.Cells[rowIndex, columnEndRange];
                Range dataRow = this.TemplateWorksheet.get_Range(start, end);
                return dataRow;
            }
            catch (Exception)
            {
                return null;
            }
            return null;
        }

        public void PrepareInvoice()
        {
            if (Tablixes == null)
                return;

            #region Build Data Tables
            int index = 1;
            Tablixes[0].RowIndex = Tablixes[0].Position.R1 + 1;
            //foreach (Tablix tablix in Tablixes)

            for (int t = 0; t < Tablixes.Count; t++)
            {
                Tablix tablix = Tablixes[t];

                //  Dataset worksheet to be used
                Worksheet ws = TRMAddin.CheckIfSheetExists(tablix.ReportSheetDataset, this.Workbook);

                //LOGIC TO BUILD DATA TABLE BASED ON COLUMNS SELECTIONS
                string selectedColumns = tablix.Columns.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
                if (ws != null)
                {
                    System.Data.DataTable dt1 = new System.Data.DataTable("Table" + index);
                    tablix.DataTable = dt1;
                    //  where data column caption stores index of column corresponding to report dataset worksheet
                    foreach (string dataColumn in selectedColumns.Split(','))
                    {
                        dt1.Columns.Add(new DataColumn(dataColumn) { Caption = ws.GetColumnIndex(dataColumn).ToString() });
                    }

                    for (int i = 2; i <= ws.UsedRange.Rows.Count; i++)
                    {
                        List<string> values = new List<string>();
                        for (int j = 0; j < dt1.Columns.Count; j++)
                        {
                            values.Add(IENumerableExtensions.ToString2(ws.Cells[i, dt1.Columns[j].Caption.ToInt()].Value));
                        }
                        tablix.DataTable.Rows.Add(values.ToArray());
                    }
                }



                #region Table Building in worksheet
                //  Group by Columns
                string aggregationColumns = tablix.AggregationList.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
                //string aggregationColumns = "";



                //  Calculate Offset between previous tablix & current table
                int rowOffset = 0;
                if (t != 0 && (Tablixes[t - 1] != null))
                {
                    //  current tablix header row index index - previous tablix table end position
                    rowOffset = tablix.Position.R1 - Tablixes[t - 1].Position.R2;
                    tablix.RowIndex += Tablixes[t - 1].RowIndex + rowOffset + 1;
                }

                //  Clear data rows drawn from template
                this.ClearDataRows(tablix);

                Range range = null;
                //  Copy Data Detail Row from template
                Range dataRow = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1);

                //  Make same height & width with template worksheet
                this.InvoiceWorksheet.MakeSameHeightWidth(this.TemplateWorksheet, this.Workbook);

                if (string.IsNullOrEmpty(aggregationColumns))
                {
                    for (int i = 0; i < tablix.DataTable.Rows.Count; i++)
                    {
                        range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                        range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                        dataRow.Copy();
                        Range destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                        //destination.Select();
                        this.InvoiceWorksheet.Paste(destination);

                        for (int j = tablix.Position.C1; j <= tablix.Position.C2; j++)
                        {
                            //  Excel sheet Table column header
                            //string fieldName = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[tablix.Position.R1, j].Value);
                            string fieldName = IENumerableExtensions.ToString2(this.TemplateWorksheet.Cells[tablix.Position.R1, j].Value);
                            string field = tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                            if (string.IsNullOrEmpty(field))
                            {
                                //  table column is unmapped to worksheet table
                                continue;

                            }
                            else
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, j].Value = tablix.DataTable.Rows[i][field].ToString2();
                        }
                        tablix.Position.EndRange = tablix.RowIndex;
                        tablix.RowIndex++;

                    }
                }
                else
                {
                    //  Used for merging  
                    //  If any sub total aggregation are present
                    int subTotalCount = 1;

                    //  Apply grouping
                    DataTable aggregateDt = GetGroupedDataTable(tablix.DataTable, aggregationColumns);


                    //  Browse through group result sets
                    int groupRowIndex = tablix.RowIndex;
                    Range destination = null;
                    foreach (DataRow groupedRow in aggregateDt.Rows)
                    {
                        Range groupedData = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1, tablix.Position.C1, tablix.Position.C1 + groupedRow.ItemArray.Count());

                        //  Copying of data row may vary exclude aggregation columns count
                        dataRow = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1, tablix.Position.C1 + groupedRow.ItemArray.Count(), tablix.Position.C2);
                        //  Grouped result sets, It will exclude aggregated columns from select list
                        DataTable groupeDt = GetDataTable(tablix.DataTable, groupedRow, aggregationColumns, selectedColumns);

                        tablix.RowIndex = groupRowIndex;
                        //  if offset is needed
                        //rowIndex = groupRowIndex + 1;
                        for (int i = 0; i < groupeDt.Rows.Count; i++)
                        {
                            //-----GROUPING HEADERS------------------------------------------------------
                            groupedData.Copy();
                            destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                            this.InvoiceWorksheet.Paste(destination);
                            for (int j = 0; j < groupedRow.ItemArray.Count(); j++)
                            {
                                string item = groupedRow.ItemArray[j].ToString();
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1 + j].Value = item;
                            }
                            //------------------------------------------------------------------------------
                            dataRow.Copy();
                            destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1 + groupedRow.ItemArray.Count()];
                            //destination.Select();
                            this.InvoiceWorksheet.Paste(destination);

                            for (int j = tablix.Position.C1; j <= tablix.Position.C2; j++)
                            {
                                //  Excel sheet Table column header
                                string fieldName = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[tablix.Position.R1, j].Value);
                                string field = tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                                if (string.IsNullOrEmpty(field))
                                {
                                    //  table column is unmapped to worksheet table
                                    continue;

                                }
                                else
                                    if (groupeDt.Columns[field] != null)
                                        this.InvoiceWorksheet.Cells[tablix.RowIndex, j].Value = groupeDt.Rows[i][field].ToString2();
                            }
                            tablix.RowIndex++;
                        }
                        //  Sub Totals Etc..
                        //  DYNAMIC GROUPING BASED ON SETTINGS
                        //List<Row> aggregationRows = tablix.AggregationList.Select(x => x.AggregationRows).FirstOrDefault().ToList();

                        List<Row> aggregationRows = new List<Row>();
                        foreach (Column column in tablix.AggregationList)
                        {
                            aggregationRows.AddRange(column.AggregationRows.OrderBy(x => x.Index));
                        }
                        subTotalCount = aggregationRows.Count;

                        foreach (Row row in aggregationRows.OrderBy(x => x.Index))
                        {
                            Range aggregateRange = GetDataRowFromInvoiceTemplate(tablix, row.Index);
                            range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                            //range.Select();
                            range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                            aggregateRange.Copy();
                            Range destinationtotal = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                            this.InvoiceWorksheet.Paste(destinationtotal);

                            foreach (Range range1 in aggregateRange.Cells)
                            {
                                if (!string.IsNullOrEmpty(IENumerableExtensions.ToString2(range1.Value2)))
                                {
                                    string value = range1.Value2.ToString();
                                    string formula =
                                        value.ConvertToFormula(new Position()
                                        {
                                            C1 = groupRowIndex,
                                            C2 = groupRowIndex + groupeDt.Rows.Count - 1
                                        });
                                    if (value.StartsWith("="))
                                    {
                                        this.InvoiceWorksheet.Cells[tablix.RowIndex, range1.Column].Value = formula;
                                        //range1.Formula = formula;
                                    }
                                }
                            }
                            tablix.RowIndex++;
                        }
                        groupRowIndex = tablix.RowIndex;
                    }

                    //  Merge Based on data

                    //  If any aggregation is present start merging from initital column
                    if (tablix.AggregationList.Count > 0)
                    {
                        int initMergeIndex = this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[0].Label, tablix.Position);
                        RecursiveMergeCells(tablix.Position.R1 + 1, tablix.RowIndex, initMergeIndex, tablix);
                    }

                    tablix.Position.EndRange = tablix.RowIndex;
                }


                #region End Of Table Aggregation
                //  End Of Table Aggregation
                foreach (Row row in tablix.EndAggregationList.OrderBy(x => x.Index))
                {
                    Range aggregateRange = GetDataRowFromInvoiceTemplate(tablix, row.Index);
                    range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                    //range.Select();
                    range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                    aggregateRange.Copy();
                    Range destinationtotal = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                    this.InvoiceWorksheet.Paste(destinationtotal);
                    //destinationtotal.Select();
                    //  To copy the format (Format Painter)
                    destinationtotal.PasteSpecial(XlPasteType.xlPasteAll, XlPasteSpecialOperation.xlPasteSpecialOperationNone, false, false);


                    foreach (Range range1 in aggregateRange.Cells)
                    {
                        if (!string.IsNullOrEmpty(IENumerableExtensions.ToString2(range1.Value2)))
                        {
                            string value = range1.Value2.ToString();
                            string formula =
                                value.ConvertToFormula(new Position()
                                {
                                    C1 = tablix.Position.R1 + 1,
                                    C2 = tablix.RowIndex - 1// tablix.Position.EndRange //+ groupeDt.Rows.Count - 1
                                });
                            if (value.StartsWith("="))
                            {
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, range1.Column].Value = formula;
                                //range1.Formula = formula;     
                            }
                        }
                    }
                    tablix.RowIndex++;
                    tablix.Position.EndRange += 1;
                }
                #endregion
                this.UpdateTablixEndRange(tablix);
                #endregion

                index++;
            }
            #endregion
        }


        private void RecursiveMergeCells(int start, int end, int columnToMerge, Tablix tablix)
        {


            if (columnToMerge != 0)
            {
                List<DataCell> dataCells = new List<DataCell>();
                for (int i = start; i <= end; i++)
                {
                    dataCells.Add(new DataCell() { Index = i, Value = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[i, columnToMerge].Value) });
                }

                List<string> values = new List<string>();
                values.AddRange(dataCells.Select(x => x.Value).Distinct().Where(x => x != "").ToList());
                //  Determine max merge area 
                for (int i = 0; i < values.Count; i++)
                {
                    int min = dataCells.Where(x => x.Value == values[i]).Select(x => x.Index).Min();
                    int max = dataCells.Where(x => x.Value == values[i]).Select(x => x.Index).Max();
                    this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[min, columnToMerge], this.InvoiceWorksheet.Cells[max, columnToMerge]].Merge();
                    Range mergedRange = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[min, columnToMerge], this.InvoiceWorksheet.Cells[max, columnToMerge]];

                    if (mergedRange.Count == 1) continue;
                    for (int j = 1; j < tablix.AggregationList.Count; j++)
                    {
                        //  if its the same column
                        if (columnToMerge == this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[j].Label, tablix.Position))
                        {
                            min += mergedRange.Count;
                            max = max + (end - max);
                        }
                        columnToMerge = this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[j].Label, tablix.Position);
                        RecursiveMergeCells(min, max, columnToMerge, tablix);
                    }
                    columnToMerge = tablix.Position.C1;
                }
            }
        }
        


        private void MergeCellsAndAlign(int firsRow, int firstColumn, int lastRow, int lastColumn, Tablix tablix)
        {
            //  No of columns to merge => Invoice Type,Counterparty
            try
            {
                if (tablix.AggregationList != null)
                {
                    for (int i = 0; i < tablix.AggregationList.Count; i++)
                    {
                        Range range = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[firsRow, firstColumn], this.InvoiceWorksheet.Cells[lastRow, lastColumn]].Merge();
                        firstColumn++;
                        lastColumn++;
                    }
                }

                //Range range = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[firsRow, firstColumn], this.InvoiceWorksheet.Cells[lastRow, lastColumn]].Merge();
                //range.Select();
                //range.HorizontalAlignment = XlHAlign.xlHAlignLeft;
                //range.VerticalAlignment = XlVAlign.xlVAlignTop;
            }
            catch (Exception)
            {

            }
        }

        private DataTable GetGroupedDataTable(DataTable dataTable, string aggregationColumns)
        {
            if (string.IsNullOrEmpty(aggregationColumns))
                return dataTable;

            string[] groups = aggregationColumns.Split(',');
            DataView view = new DataView(dataTable);
            view.Sort = aggregationColumns;
            return view.ToTable(true, groups);
        }

        private DataTable GetDataTable(DataTable dataTable, DataRow groupedDataRow, string aggregationColumns, string selectedColumns)
        {
            try
            {
                if (string.IsNullOrEmpty(aggregationColumns))
                    return dataTable;

                //  remove aggregated columns from selected columns list
                if (!string.IsNullOrEmpty(aggregationColumns))
                {
                    List<string> arrAgg = aggregationColumns.Split(',').ToList();
                    List<string> arrSel = selectedColumns.Split(',').ToList();
                    selectedColumns = arrSel.Where(s => string.IsNullOrEmpty(arrAgg.Find(x => x == s))).Aggregate("", (current, p) => current + (p + ",")).TrimEnd(',');
                }


                string[] groups = aggregationColumns.Split(',');
                string whereSql = "";
                //foreach (DataRow row in groupedDataRow)
                //{
                int index = 0;
                foreach (string group in groups)
                {
                    whereSql += "[" + group + "]='{" + index + "}' AND ";
                    index++;
                }
                whereSql = string.Format(whereSql.TrimEnd("AND ".ToCharArray()), groupedDataRow.ItemArray);
                //}
                // Create row filter based on group by columns
                DataRow[] results = dataTable.Select(whereSql);
                DataTable resultDt = new DataTable();
                //  Making an equivalent to output
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    resultDt.Columns.Add(dataTable.Columns[i].ColumnName);
                }

                foreach (DataRow dataRow in results)
                {
                    resultDt.ImportRow(dataRow);
                }

                DataView view = new DataView(resultDt);
                System.Data.DataTable selected = view.ToTable("Selected", false, selectedColumns.Split(','));
                return selected;
            }
            catch (Exception)
            {
                return null;
            }
        }

        //  Deletes data rows that has been already plotted
        private void DeleteUsedRange(Tablix psTablix)
        {
            //  Delete rows except data row sample always assume there is data row sample is present
            if (psTablix != null && (psTablix.Position.EndRange > psTablix.Position.R1))
            {

                Range start = this.InvoiceWorksheet.Cells[psTablix.Position.R1 + 2, psTablix.Position.C2];
                //Range end = this.InvoiceWorksheet.Cells[psTablix.Position.EndRange + psTablix.Position.R1 + 2, psTablix.Position.C2];
                Range end = this.InvoiceWorksheet.Cells[psTablix.Position.EndRange, psTablix.Position.C2];
                Range deleteRange = this.InvoiceWorksheet.get_Range(start, end);
                deleteRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);

            }

        }

        /// <summary>
        /// Delete Data Rows 
        /// </summary>
        /// <param name="psTablix"></param>
        private void ClearDataRows(Tablix psTablix)
        {
            //  Skip 1 sample data row
            if (psTablix != null && psTablix.Rows.Count > 1)
            {
                Range start = this.InvoiceWorksheet.Cells[psTablix.RowIndex, psTablix.Position.C2];
                Range end = this.InvoiceWorksheet.Cells[psTablix.RowIndex + psTablix.Rows.Count, psTablix.Position.C2];

                Range deleteRange = this.InvoiceWorksheet.get_Range(start, end);
                deleteRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
            }
        }

        //  Update invoice worksheet xml after data has been populated in table
        //  This configuration will be repused in every plot of invoice preparation
        private void UpdateTablixEndRange(Tablix psTablix)
        {
            string xml = this.GetInvoiceXMLByInvoiceSheet();
            if (xml != null)
            {
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xml);
                XmlNodeList tablixNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix");
                foreach (XmlNode tablixNode in tablixNodeList)
                {
                    if (tablixNode.Attributes != null)
                    {
                        Position pos = new Position()
                        {
                            EndRange = tablixNode.Attributes["EndRange"].Value.ToInt(),
                            R1 = tablixNode.Attributes["R1"].Value.ToInt(),
                            C1 = tablixNode.Attributes["C1"].Value.ToInt(),
                            C2 = tablixNode.Attributes["C2"].Value.ToInt()
                        };
                        //  Comparision based on data table that plotted 
                        if (psTablix.Position.R1 == pos.R1 && psTablix.Position.C1 == pos.C1 &&
                            psTablix.Position.C2 == pos.C2)
                        {
                            tablixNode.Attributes["EndRange"].Value = psTablix.Position.EndRange.ToString();
                        }
                    }
                }
                //  Update to invoice configurations
                UpdateInvoiceXmlConfiguration(xmlDoc.InnerXml);
            }

        }

        private void UpdateInvoiceXmlConfiguration(string invoiceXmlSettings)
        {
            if (TRMAddin.CheckIfSheetExists(this.InvoiceWorksheet.Name, this.Workbook) != null && TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook) != null)
            {
                Worksheet invoiceConfig = TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook);
                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (this.InvoiceWorksheet.Name.ToLower() == IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        //  XML configuration for that sheet
                        invoiceConfig.Cells[i, 2].Value = invoiceXmlSettings;
                    }
                }

            }
        }

    }

    public class Tablix
    {
        public string ReportSheetDataset { get; set; }
        public string Description { get; set; }
        public List<Column> Columns { get; set; }
        public List<Row> Rows { get; set; }

        public virtual DataTable DataTable { get; set; }
        public virtual Position Position { get; set; }
        public virtual List<Column> AggregationList { get; set; }

        //  For End of Grouping
        public virtual List<Row> EndAggregationList { get; set; }
        public virtual int RowIndex { get; set; }

    }

    public class Row
    {
        public int Index { get; set; }
        public string Name { get; set; }
    }

    public class Column
    {
        public string Label { get; set; }
        public string Field { get; set; }

        //  If any grouping aggregation field has been bound
        public virtual List<Row> AggregationRows { get; set; }
        public virtual int GroupingIndex { get; set; }
    }

    public struct DataCell
    {
        public int Index { get; set; }
        public string Value { get; set; }
    }

    public class Position
    {
        public int R1 { get; set; }
        public int R2 { get; set; }
        public int C1 { get; set; }
        public int C2 { get; set; }
        public int EndRange { get; set; }
    }

    public class ReportConfiguration
    {

        public string ReportName { get; set; }
        public string ReportSheet { get; set; }
        public string Description { get; set; }
        public string Parameter { get; set; }
        public string ParameterSheet { get; set; }
        public virtual string ParamsetHash { get; set; }
        public virtual string ConnectionIdentifier { get; set; }

        public virtual Report Report { get; set; }
        public virtual ReportData ReportData { get; set; }
        public virtual bool NewReport { get; set; }

        public virtual int ParamsetId { get; set; }
        public virtual int TablixId { get; set; }

    }

    public class Report
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string ParamsetHash { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using ST_f39233fac16e426d991d932f9ef7d858;
using Microsoft.Office.Interop.Excel;

#endregion

namespace ST_dd15b1baccfb44448c0156790b3eaa20
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// 
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        private string _psSynchronize;
        private string _psImageSnapshot;
        private string _psExcelSheetId;
        private string _psUserName;
        private string _psProcessId;
        private string _psExportFormat;
        private string _psSettlementCalc;

        [STAThread]
        public void Main()
        {
            uint iProcessId = 0;
            try
            {
                _psSynchronize = Dts.Variables["PS_Synchronize"].Value.ToString();
                _psImageSnapshot = Dts.Variables["PS_ImageSnapshot"].Value.ToString();
                _psExcelSheetId = Dts.Variables["PS_ExcelSheetId"].Value.ToString().Replace('|', ',').Replace("ALL", "");
                _psUserName = Dts.Variables["PS_UserName"].Value.ToString();
                _psProcessId = Dts.Variables["PS_ProcessId"].Value.ToString();
                _psExportFormat = Dts.Variables["PS_ExportFormat"].Value.ToString();

                _psSettlementCalc = Dts.Variables["PS_SettlementCalc"].Value.ToString();
                
                OleDbConnection oleDbConnection = GetConnection("OLE_CONN_MainDB");
                
                
                    if (_psSettlementCalc == "y")
                    {
                        using (
                            SqlConnection connection =
                                new SqlConnection(TRMAddin.GetSqlConnection(oleDbConnection.ConnectionString)))
                        {
                            connection.Open();
                            Settlement settlement = new Settlement(_psProcessId, connection, oleDbConnection, _psUserName);
                            try
                            {
                                    if (settlement.IsCalcProcess())
                                {
                                        settlement.Prepare();
                                        settlement.IProcessId.KillExcel();
                                }
                                return;
                            }
                            catch (Exception ex)
                            {
                                settlement.IProcessId.KillExcel();
                                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                                Dts.TaskResult = (int)ScriptResults.Failure;
                                return;

                            }
                        }
                        
                    }
                
                

                if (_psProcessId == "")
                    _psProcessId = Guid.NewGuid().ToString().Replace("-", "_").ToUpper();

                
                OleDbCommand cmd = new OleDbCommand("spa_excel_snapshots @flag='e',@sheet_id='" + _psExcelSheetId + "'", oleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                List<ExcelSheets> excelSheets = new List<ExcelSheets>().FromOleReader(reader).ToList();

                Snapshot snap = new Snapshot(oleDbConnection, _psExportFormat);
                snap.ExcelSheet = excelSheets.FirstOrDefault();
                snap.ProcessId = _psProcessId;
                snap.UserName = _psUserName;
                snap.ParseViewReportFilterXMl();


                if (_psSynchronize.Replace('y', '1') == "1")
                    snap.Synchronize = true;

                if (_psImageSnapshot.Replace('y', '1') == "1")
                    snap.ImageSnapshot = true;




                //  Synchronize excel sheets , Synchronization process creates snapshots its self
                string[] files = excelSheets.Where(x => x.Publish == true).Select(x => x.FileName).Distinct().ToArray();
                foreach (string f in files)
                {
                    snap.SynchronizeExcel(f, out iProcessId);
                }

                //  Publish Snapshots only
                if (!snap.Synchronize && snap.ImageSnapshot)
                //if (snap.ImageSnapshot)
                {
                    foreach (string s in files)
                    {
                        string[] arrSheets = excelSheets.Where(x => x.FileName == s && x.Publish == true).Select(x => x.SheetName).ToArray();
                        snap.PublishSnapshot(s, arrSheets, out iProcessId);
                    }
                }
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                iProcessId.KillExcel();
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }


        }



        private OleDbConnection GetConnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
	}
}]]></ProjectItem>
          <ProjectItem
            Name="Snapshot.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using ADODB;
using Microsoft.Office.Core;
using Microsoft.Office.Interop.Excel;
using System.Xml.Linq;
using ST_dd15b1baccfb44448c0156790b3eaa20;
using Application = Microsoft.Office.Interop.Excel.Application;
using Shape = Microsoft.Office.Interop.Excel.Shape;


namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Snapshot
    {
        //  Added to support settlement specific initlze
        public Snapshot(bool settlementCalc)
        {
            
        }
        public Snapshot(OleDbConnection _oleDbConnection, string exportFormat = "PNG")
        {
            this.ExportFormat = exportFormat;
            OleDbConnection = _oleDbConnection;
            OleDbCommand cmd = new OleDbCommand("spa_excel_snapshots 'c'", OleDbConnection);
            using (OleDbDataReader rd = cmd.ExecuteReader())
            {
                if (rd.HasRows)
                    rd.Read();

                ReportRepository = rd[0].ToString();    //  excel_reports
                DocumentPath = rd[1].ToString();    //  temp_note
            }
        }

        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        private string ReportRepository { get; set; }
        private string DocumentPath { get; set; }
        public string SchedulerFolder { get; set; }
        public bool Synchronize { get; set; }
        public bool ImageSnapshot { get; set; }
        //public string SheetNames { get; set; }
        public string UserName { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string ExcelReplica { get; set; }
        private List<ReportFilter> ViewReportFilters { get; set; }

        public string ProcessId { get; set; }
        public ExcelSheets ExcelSheet { get; set; }
        private string ExportFormat { get; set; }
        private string AppliedFiltersLabel { get; set; }

        //View Report Filter . Eg xml format
        /*
         * <Parameters>
	            <Parameter>
		            <Name>as_of_date_from</Name>
		            <Value>5</Value>
	            </Parameter>
	            <Parameter>
		            <Name>as_of_date_to</Name>
		            <Value>5</Value>
	            </Parameter>
           </Parameters>
         */



        private Application CreateReplica(string sourceFileName)
        {
            uint iProcessId;
            Application xlApp = new Application();
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);

            try
            {
                string replicaFile = DocumentPath + this.ProcessId + ".xlsx";
                try 
	            {
                    if (File.Exists(replicaFile))
                        File.Delete(replicaFile);
	            }
	            catch (Exception)
	            {
		
	            }
                

                File.Copy(sourceFileName, replicaFile);

                xlApp.Visible = false;
                xlApp.DisplayAlerts = false;
                Workbook wb = xlApp.Workbooks.Add(replicaFile);

                /*
                foreach (Worksheet ws in wb.Worksheets)
                {
                    ws.Unprotect();
                    foreach (PivotTable pt in ws.PivotTables())
                    {
                        string sourceData = pt.SourceData;
                        string fname = "[" + Path.GetFileName(sourceFileName) + "]";
                        sourceData = sourceData.Substring(sourceData.IndexOf(']') + 1);
                        sourceData = Path.GetDirectoryName(replicaFile) + @"\[" + Path.GetFileName(replicaFile) + "]" + sourceData.Replace(fname, "").Replace("'", "");
                        pt.SourceData = sourceData;
                    }
                }
                 */



                wb.Close(SaveChanges: true, Filename: replicaFile);
                ExcelReplica = replicaFile;
                return xlApp;
            }
            catch (Exception ex)
            {
                KillExcelProcess(xlApp);
                return null;
            }

        }

        public void DeleteReplica(bool deleteFile)
        {
            try
            {
                if (deleteFile)
                    File.Delete(ExcelReplica);
            }
            catch (Exception ex)
            {
                throw;
            }

        }


        public void ParseViewReportFilterXMl()
        {
            this.ViewReportFilters = new List<ReportFilter>();
            try
            {
                using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                {
                    cn.Open();
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM adiha_process.dbo.excel_add_in_view_report_filter_" + this.ProcessId, cn))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                            {
                                var rf = new ReportFilter();

                                for (int i = 0; i < rd.FieldCount; i++)
                                {
                                    string fieldName = rd.GetName(i);
                                    if (fieldName.ToLower() == "name") rf.Name = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "value") rf.Value = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "displaylabel") rf.DisplayLabel = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "displayvalue") rf.DisplayValue = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "overwritetype") rf.OverrideType = rd[fieldName].ToInt();
                                    if (fieldName.ToLower() == "adjustmentdays") rf.AdjustmentDays = rd[fieldName].ToInt();
                                    if (fieldName.ToLower() == "adjustmenttype") rf.AdjustmentType = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "businessday") rf.BusinessDay = rd[fieldName].ToString();
                                }

                                if (rf.Value.Trim() == "")
                                    rf.Value = "NULL";
                                this.ViewReportFilters.Add(rf);
                            }
                        }
                    }
                    
                    this.AppliedFiltersLabel = "";
                    foreach (ReportFilter rf in this.ViewReportFilters)
                    {
                        //  Resolve dynamic date
                        rf.ResolveDynamicDate(cn);
                        if (string.IsNullOrEmpty(rf.DisplayLabel) && !string.IsNullOrEmpty(rf.Name)) rf.DisplayLabel = rf.Name;
                        if (string.IsNullOrEmpty(rf.DisplayValue) && !string.IsNullOrEmpty(rf.Value)) rf.DisplayValue = rf.Value;

                        if (!string.IsNullOrEmpty(rf.DisplayLabel) && !string.IsNullOrEmpty(rf.DisplayValue))
                        {
                            this.AppliedFiltersLabel += rf.DisplayLabel + "=" + rf.DisplayValue + " | ";
                        }
                    }
                    this.AppliedFiltersLabel = this.AppliedFiltersLabel.Trim().TrimEnd('|').Replace("0001-01-01", "");
                    cn.Close();
                }
            }
            catch (Exception)
            {
                
            }
        }

        private static Worksheet CheckIfSheetExists(Workbook wb, string sheetName)
        {
            Worksheet ws = null;
            foreach (Worksheet worksheet in wb.Worksheets)
            {
                if (worksheet.Name.ToLower() == sheetName.ToLower())
                {
                    ws = worksheet;
                    break;
                }
                else
                {
                    ws = null;
                }
            }
            return ws;
        }
        public void SynchronizeExcel(string excelFileName, out uint iProcessId)
        {

            iProcessId = 0;
            if (!Synchronize)
                return;

            Application xlApp = this.CreateReplica(excelFileName);
            if (xlApp == null) return; //   if cannot copy to replica folder 

            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);
            xlApp.Visible = false;
            xlApp.DisplayAlerts = false;
            Workbook wb = xlApp.Workbooks.Open(this.ExcelReplica);

            Worksheet wsConfiguration = GetWorksheetFromWorkBook(wb, "Configurations");

            List<ReportSheet> reportSheets = new List<ReportSheet>();

            if (wsConfiguration != null)
            {
                //  retrive rfx query for selected report
                bool empty = true;
                int row = 2;
                while (empty)
                {
                    var cellSheetName = (Range)wsConfiguration.Cells[row, 2];
                    if (cellSheetName.Value2 != null)
                    {
                        //  Check if report configuration does exists , if not try to changes report configuration paramset / tablix id according to report name
                        ReportData rd = GetReportDefinition(((Range)wsConfiguration.Cells[row, 1]).Value2.ToString());
                        if (rd == null) //  report doesnt exists in system
                        {
                            row++;
                            continue;
                        }

                        //  Don't add report sheet which doesnt exist in file , user can delte trm report sheet from file but its not removed from confiuration , same to parameter sheet
                        if (GetWorksheetFromWorkBook(wb, wsConfiguration.Cells[row, 2].Value2.ToString()) == null || GetWorksheetFromWorkBook(wb, wsConfiguration.Cells[row, 4].Value2.ToString()) == null)
                        {
                            row++;
                            continue;
                        }
                        ReportSheet rs = new ReportSheet() { ReportName = ((Range)wsConfiguration.Cells[row, 1]).Value2.ToString(), SheetName = ((Range)wsConfiguration.Cells[row, 2]).Value2.ToString(), SpaRfxQuery = ((Range)wsConfiguration.Cells[row, 3]).Value2.ToString(), ParameterSheet = ((Range)wsConfiguration.Cells[row, 4]).Value2.ToString(), Description = "" };

                        reportSheets.Add(rs);

                        if (rd != null)
                        {
                            string[] arr = rs.SpaRfxQuery.Split(',');
                            if (arr.Count() > 0)
                            {
                                arr[0] = arr[0].Replace("spa_rfx_run_sql", "").Replace(" ", "");
                                //  Check if config has been changed
                                if (rd.ParamsetId != arr[0].ToInt() || rd.TablixId != arr[1].ToInt())
                                {
                                    string query = "spa_rfx_run_sql  " + rd.ParamsetId.ToString() + "," + rd.TablixId.ToString();
                                    for (int i = 2; i < arr.Count(); i++)
                                    {
                                        query += "," + arr[i];
                                    }
                                    var pCell = (Microsoft.Office.Interop.Excel.Range)wsConfiguration.Cells[row, 3];
                                    pCell.Value2 = query;
                                    rs.SpaRfxQuery = query;
                                }
                            }
                        }

                    }
                    else if (cellSheetName.Value2 == null)
                    {
                        empty = false;
                        break;
                    }

                    row++;
                }



                string spaRfxQuery = "";
                
                foreach (ReportSheet rs in reportSheets)
                {
                    OverRideSummary overRideSummary = this.OverRideViewFilter(rs.SpaRfxQuery);

                    Worksheet ws = wb.Worksheets[rs.SheetName];
                    BindRecordSetToWorkSheet(xlApp, wb, ws, this.ExcelReplica, OleDbConnection, overRideSummary);
                }


                SnapHistory history = new SnapHistory()
                {
                    AppliedFilter = this.AppliedFiltersLabel,
                    FileName = excelFileName,
                    RefreshdaDateTime = DateTime.Now
                };
                //foreach (Worksheet ws in wb.Worksheets)
                //{
                //    foreach (PivotTable pt in ws.PivotTables())
                //    {
                //        pt.RefreshTable();
                //    }
                //}
                wb.RefreshAll();
                Worksheet documentWorksheet = wb.Worksheets[ExcelSheet.SheetName];

                //  Excel sheet document type verification
                ExcelSheet.DocumentType = TRMAddin.GetSheetDocumentType(wb, ExcelSheet.SheetName);

                if (ExcelSheet.DocumentType == 106701)      //  Invoice
                {
                    DocumentDesigner doc = new DocumentDesigner(documentWorksheet, wb);
                    TRMAddin.DeleteEntireContents(documentWorksheet, wb);
                    TRMAddin.CopyEntireContents(TRMAddin.CheckIfSheetExists(documentWorksheet.Name + "_template", wb), documentWorksheet);

                    doc.PrepareInvoice();
                    SaveWorksheetSnapshot(history, xlApp, wb);
                }
                else if (ExcelSheet.DocumentType == 106700) //  Report
                {
                    SaveWorksheetSnapshot(history, xlApp, wb);
                }
                else if (ExcelSheet.DocumentType == 106702)     //  Calculation
                {
                    using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                    {
                        cn.Open();
                        ImportExport ixp = new ImportExport(documentWorksheet, wb, this.UserName) { SqlConnection = cn };
                        if (ixp.DataImport != null)
                        {
                            DocumentDesigner docIxp = new DocumentDesigner(documentWorksheet, wb);
                            docIxp.PreparImportData(ixp.DataImport);
                            ixp.Run();
                            SaveWorksheetSnapshot(history, xlApp, wb);
                        }
                        cn.Close();
                    }
                }

                wb.Close(SaveChanges: true, Filename: this.ExcelReplica);


                TerminateExcel(xlApp, wb);
                this.DeleteReplica(deleteFile: false);
            }
            else
            {
                //  Start logging configuration not found
            }


        }

        public void KillExcelProcess(Application xlApp)
        {
            uint iProcessId = 0;
            //Get the process ID of excel so we can kill it later.
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);

            try
            {
                Process pProcess = Process.GetProcessById((int)iProcessId);
                if (pProcess != null)
                    pProcess.Kill();
            }
            catch (System.Exception)
            {
                //just ignore any failure.
            }

        }

        public ReportData GetReportDefinition(string reportName)
        {
            string sql = @"SELECT rp.name,
                               rp.report_paramset_id [ParamsetId],
                               rpt.report_page_tablix_id [TablixId],
                               rp.name [ReportName],
                               rp.page_id PageID,
                               rp.report_status_id [ReportStatusId]
                        FROM   report_paramset rp
                               INNER JOIN report_page_tablix rpt
                                    ON  rpt.page_id = rp.page_id
                               INNER JOIN report_page rp2
                                    ON  rpt.page_id = rp2.report_page_id";
            sql += " WHERE  rp.NAME = '" + reportName + "'";
            //MessageBox.Show(sql);
            OleDbCommand cmd = new OleDbCommand(sql, OleDbConnection);
            cmd.CommandType = System.Data.CommandType.Text;
            OleDbDataReader r = cmd.ExecuteReader();
            if (!r.HasRows)
            {
                r.Close();
                return null;
            }
            r.Read();
            ReportData rData = new ReportData()
            {
                PageID = r["PageId"].ToInt(),
                ParamsetId = r["ParamsetId"].ToInt(),
                ReportName = r["ReportName"].ToString(),
                ReportStatusId = r["ReportStatusId"].ToInt(),
                TablixId = r["TablixId"].ToInt()
            };
            r.Close();
            return rData;
        }


        private OverRideSummary OverRideViewFilter(string spaRfxQuery)
        {
            OverRideSummary ors = new OverRideSummary();
            string[] allParameters = spaRfxQuery.Split(',');

            //  Browse parameters to match rfx parameters
            foreach (string s in allParameters)
            {
                //  detect parameter
                if (s.Contains("="))
                {
                    //  if parameter starts/ends with single quote then replace it
                    string pName = s.Split('=').First().TrimStart('\'').TrimEnd('\'');
                    if (ViewReportFilters != null)
                    {
                        ReportFilter reportFilter = ViewReportFilters.FirstOrDefault(x => x.Name == pName);
                        if (reportFilter != null)
                        {
                            if (s.StartsWith("'"))
                                ors.SpaRfxQuery += "'";
                            if (s.EndsWith("'"))
                                ors.SpaRfxQuery += reportFilter.Name + "=" + reportFilter.Value + "',";
                            else
                                ors.SpaRfxQuery += reportFilter.Name + "=" + reportFilter.Value + ",";
                        }
                        else
                        {
                            ors.SpaRfxQuery += s + ",";
                        }
                    }
                    else
                    {
                        ors.SpaRfxQuery += s + ",";
                    }
                }
                else
                {
                    ors.SpaRfxQuery += s + ",";
                }

            }
            ors.SpaRfxQuery = ors.SpaRfxQuery.TrimEnd(',');

            return ors;
        }

        private bool IsValidDate(string value)
        {
            try
            {
                var obj = Convert.ToDateTime(value.ToString());
                return true;
            }
            catch (Exception)
            {

                return false;
            }
        }


        private bool BindRecordSetToWorkSheet(Application xlApp, Workbook wb, Worksheet ws, string filename, OleDbConnection connection, OverRideSummary overRideSummary)
        {
            Connection cn = new Connection();
            Recordset rs = new Recordset();
            Command cmd = new Command();



            string parameterWorksheet = ws.Name + "_Param";

            try
            {
                //cn.ConnectionString = @"user id=" + d.UserName + ";password=" + d.Password + ";provider=SQLOLEDB;data source=" + d.ServerName + ";Database=" + d.Database;
                //if (d.AuthenticationType == 1)   //  windows authentication
                //    cn.ConnectionString = "provider=SQLOLEDB;Integrated Security=SSPI;Initial Catalog=" + d.Database + ";Data Source=" + d.ServerName;

                cn.ConnectionString = connection.ConnectionString;
                cn.ConnectionString += "DataTypeCompatibility=80;MARS Connection=True";
                cn.Open();
                rs.Open(overRideSummary.SpaRfxQuery, cn, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockOptimistic, 1);

                ws.Cells.ClearContents();
                ws.Cells.ClearFormats();
                ws.Activate();
                //  Header
                for (int i = 0; i < rs.Fields.Count; i++)
                {
                    var cell = (Range)ws.Cells[1, i + 1];
                    cell.Value2 = rs.Fields[i].Name;
                    cell.Font.Bold = true;
                }

                Range range = ws.get_Range("A2");

                range.CopyFromRecordset(rs);
                //range.AutoFormat(XlRangeAutoFormat.xlRangeAutoFormatClassicPivotTable);
                ws.UsedRange.Columns.AutoFit();
                rs.Close();
                cn.Close();
                ChangePivotSourceDataCache(wb);
                //wb.RefreshAll();
                //RefreshSheets(wb);
                //  Freeze Top Row
                //if (range.Value2 != null)
                //{
                //    range.Select();
                //    range.Application.ActiveWindow.FreezePanes = true;
                //}

                //  Rewrite over rided parameter values to _Param work sheet 
                Worksheet wsParam = CheckIfSheetExists(wb, parameterWorksheet);
                string[] arrParams = overRideSummary.SpaRfxQuery.Split(',').Where(x => x.Contains('=')).ToArray();
                foreach (string p in arrParams)
                {
                    int row = 3;
                    bool empty = false;
                    while (!empty)
                    {
                        var cell = (Range)wsParam.Cells[row, 2];
                        if (cell.Value2 != null)
                        {
                            //if (p.Contains(cell.Value2))
                            if (p.Split('=')[0] == cell.Value2)
                            {
                                //  text format
                                ((Range)wsParam.Cells[row, 3]).NumberFormat = "@";
                                string strValue = p.Split('=')[1].TrimStart('\'').TrimEnd('\'');
                                ((Range)wsParam.Cells[row, 3]).Value2 = strValue;
                            }
                        }
                        else
                        {
                            empty = true;
                            break;
                        }
                        row++;
                    }
                }
                //  Rewrite spa rfx query in configuration worksheeet too
                Worksheet wsConfiguration = CheckIfSheetExists(wb, "Configurations");
                if (wsConfiguration != null)
                {
                    int row = 2;
                    bool empty = false;
                    while (!empty)
                    {
                        //  Sheetname
                        var cell = (Range)wsConfiguration.Cells[row, 2];
                        if (cell.Value2 != null)
                        {
                            if (cell.Value2 == ws.Name)
                            {
                                ((Range)wsConfiguration.Cells[row, 3]).Value2 = overRideSummary.SpaRfxQuery;
                            }
                        }
                        else
                        {
                            empty = true;
                            break;
                        }
                        row++;
                    }
                }
                xlApp.DisplayAlerts = false;

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private void ChangePivotSourceDataCache(Workbook wb)
        {
            foreach (Worksheet ws in wb.Worksheets)
            {
                ws.Unprotect();
                foreach (PivotTable pt in ws.PivotTables())
                {
                    //'[9527CA3D_E48A_4808_9658_9120BFC91837.xlsx]PNL Attribution Report'!$A$1:$Q$13
                    string sourceData = pt.SourceData;
                    string[] pivotSource = sourceData.Split('!');
                    string pivotSourceSheet = pivotSource[0];

                    //  Check if it has file name created by older version enclosed by file
                    if (pivotSource[0] != null && pivotSource[0].Contains(']'))
                    {
                        pivotSourceSheet = "'" + pivotSourceSheet.Substring(pivotSourceSheet.IndexOf(']') + 1);

                    }

                    //  Check if pivot is generated from raw report , there might be custom pivots skip that
                    //var list = TRMAddin.ListAllConfigurations();
                    Worksheet wsReport = CheckIfSheetExists(wb, pivotSourceSheet.Replace("'", ""));

                    //var sheet = list.FirstOrDefault(x => x.ReportSheet == );
                    if (wsReport != null)
                    {
                        Range r = wsReport.UsedRange;
                        string row = r.Rows.Count.ToString();
                        if (r.Rows.Count <= 1)
                            row = "2";

                        string col = r.Columns.Count.ToString();
                        pt.SourceData = "'" + wsReport.Name + "'!R1C1:R" + row + "C" + col;
                    }
                }
            }
        }

        private void SaveWorksheetSnapshot(SnapHistory history, Application app, Workbook wb)
        {
            if (!ImageSnapshot)
                return;

            history.SnapshotSheetName = this.ExcelSheet.SheetName;
            Worksheet worksheet = wb.Worksheets[this.ExcelSheet.SheetName];

            FindAndReplaceSignatureImage(worksheet, wb);
            Thread newThread = new Thread(() => SaveDocument(history, wb, worksheet));

            newThread.SetApartmentState(ApartmentState.STA);
            newThread.Start();
            Thread.Sleep(2000);
        }

        /// <summary>
        /// Finds signature placeholder, replace with singnature image based on its referenced cell. Placeholder Eg. <Signature:Sheet1!A1>, If singnature image is not found it will clear the placeholder contents.
        /// </summary>
        private void FindAndReplaceSignatureImage(Worksheet worksheet, Workbook workbook)
        {
            try
            {
                //  Find signature contents
                bool exitFind = true;
                while (exitFind)
                {
                    Range x = worksheet.Cells.Find("<Signature:", Type.Missing, XlFindLookIn.xlValues, XlLookAt.xlPart, XlSearchOrder.xlByRows, XlSearchDirection.xlNext, false, Type.Missing, Type.Missing);
                    if (x != null)
                    {
                        try
                        {
                            string placeHolderFormula = x.Value2.ToString().Split(':')[1].Replace(">", "");
                            //  If signature is found get the value of referenced cell
                            //x.Value2 = "";
                            //var range = worksheet.get_Range("Sheet1!H2");
                            if (placeHolderFormula.Contains('!'))
                            {
                                Worksheet extWorksheet = TRMAddin.CheckIfSheetExists(placeHolderFormula.Split('!')[0], workbook);
                                var range = extWorksheet.get_Range(placeHolderFormula.Split('!')[1]);


                                //var refValue = worksheet.Range[placeHolderFormula];
                                //  Get image file for this reference cell (reffered to user)

                                string signatureFileName = GetUserSignature(range.Value2.ToString());
                                if (!string.IsNullOrEmpty(signatureFileName) && File.Exists(signatureFileName))
                                {
                                    worksheet.Activate();
                                    worksheet.Select();

                                    float Left = (float)((double)x.Left);
                                    float Top = (float)((double)x.Top);
                                    float imageWidth = 250;
                                    float imageHeight = 80;
                                    
                                    //  Get Image actual height and width
                                    try
                                    {
                                        using (System.IO.Stream stream = File.OpenRead(signatureFileName))
                                        {
                                            using (Image sourceImage = Image.FromStream(stream, false, false))
                                            {
                                                imageWidth = sourceImage.Width;
                                                imageHeight = sourceImage.Height;
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }

                                    worksheet.Shapes.AddPicture(signatureFileName, MsoTriState.msoFalse, MsoTriState.msoCTrue, Left, Top, imageWidth, imageHeight);

                                    //Range picCellRange = worksheet.Cells[x.Row, x.Column];
                                    //picCellRange.Select();
                                    //worksheet.Pictures().Insert(signatureFileName);
                                    x.Value2 = " ";
                                    x.Interior.Color = Color.White;
                                }
                            }
                            x.Value2 = " ";
                            x.Interior.Color = Color.White;
                        }
                        catch (Exception)
                        {
                            x.Value2 = "";
                        }
                    }
                    else
                    {
                        exitFind = false;
                    }
                }
            }
            catch (Exception)
            {

            }
        }

        /// <summary>
        /// Reterives an user signature filename based on referenced cell value (containing username)
        /// </summary>
        /// <param name="userName">username which signature is to be retrived</param>
        /// <returns></returns>
        private string GetUserSignature(string userName)
        {
            try
            {
                if (!string.IsNullOrEmpty(userName))
                {
                    using (var cmd = new OleDbCommand("spa_excel_snapshots @flag='y',@user_name='" + userName + "'", this.OleDbConnection))
                    {
                        using (OleDbDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                                return rd[0].ToString();


                        }
                    }
                }
                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public void PublishSnapshot(string excelFileName, string[] arrWorksheets, out uint iProcessId)
        {
            iProcessId = 0;

            if (!ImageSnapshot) return;
            if (arrWorksheets.Count() == 0) return;

            Application app = new Application();
            GetWindowThreadProcessId((IntPtr)app.Hwnd, out iProcessId);

            app.DisplayAlerts = false;
            Workbook wb = app.Workbooks.Add(excelFileName);

            foreach (string s in arrWorksheets)
            {
                SnapHistory history = new SnapHistory() { AppliedFilter = "snapshotonly", FileName = excelFileName, RefreshdaDateTime = DateTime.Now, SnapshotSheetName = s, SnapshotFileName = "" };
                Worksheet ws2 = wb.Worksheets[s];
                Range r = TRMAddin.GetWorkSpaceRange(ws2);
                r.CopyPicture(XlPictureAppearance.xlScreen, XlCopyPictureFormat.xlBitmap);
                //CopyImage(history);
                Thread newThread = new Thread(() => SaveDocument(history));

                newThread.SetApartmentState(ApartmentState.STA);
                newThread.Start();
                Thread.Sleep(2000);

            }



            //app.Quit();
            TerminateExcel(app, wb);
        }


        private void SaveDocument(SnapHistory history)
        {
            history.SnapshotFileName = DocumentPath + history.SnapshotSheetName + "_" + UserName + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmssff") + ".png";
            Bitmap image2 = new Bitmap(System.Windows.Forms.Clipboard.GetImage());
            image2.Save(history.SnapshotFileName, ImageFormat.Png);
            //  Update snapshot history
            UpdateSnapshotHistory(history);
            System.Threading.Thread.Sleep(5000);
        }

        private void SaveDocument(SnapHistory history, Workbook wb, Worksheet worksheet)
        {
            history.SnapshotFileName = DocumentPath + history.SnapshotSheetName + "_" + UserName + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmssff");
            if (this.ExportFormat.ToLower() == "pdf")
                history.SnapshotFileName += ".pdf";
            else if (this.ExportFormat.ToLower() == "png")
                history.SnapshotFileName += ".png";
            else if (this.ExportFormat.ToLower() == "excel")
                history.SnapshotFileName += ".xlsx";
            else if (this.ExportFormat.ToLower() == "word")
                history.SnapshotFileName += ".docx";

            if (worksheet != null)
            {
                //  Hide other sheets except sheets that will be published
                try
                {
                    foreach (Worksheet sheet in wb.Worksheets)
                    {
                        if (sheet.Name != worksheet.Name && !this.ExcelSheet.ShowDataTabs)
                            sheet.Visible = XlSheetVisibility.xlSheetVeryHidden;
                    }
                }
                catch (Exception)
                {
                    
                }

                this.CreateDocument(worksheet, history.SnapshotFileName, this.ExportFormat);
                //  Update snapshot history
                UpdateSnapshotHistory(history);
                System.Threading.Thread.Sleep(5000);
            }

        }

        public bool CreateDocument(Worksheet worksheet, string fileName, string exportFormat)
        {
            if (exportFormat.ToLower() == "pdf")
                return CreatePDFDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "png")
                return CreatePNGDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "excel")
                return CreateExcelDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "word")
                return CreateWordDocument(worksheet, fileName);

            return false;
        }
        private bool CreatePDFDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                worksheet.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, fileName);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool CreateExcelDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                Application app = new Application();
                app.Workbooks.Add(1);
                app.Workbooks[0].Worksheets.Copy(worksheet);
                app.Workbooks[0].SaveAs(fileName);
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool CreateWordDocument(Worksheet worksheet, string fileName)
        {
            //var app = new Microsoft.Office.Interop.Word.Application();
            try
            {
                //Microsoft.Office.Interop.Word.Document doc = app.Documents.Add();

                //Range start = worksheet.Cells[1, worksheet.UsedRange.Column];
                //Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];
                ////TODO :: Range For report below , for others above
                //Range usedRange = worksheet.get_Range(start, end);
                //usedRange.Copy();
                //doc.Content.Paste();
                //doc.SaveAs(fileName);
                //app.Quit(true);
                return true;
            }
            catch (Exception)
            {
                //app.Quit(false);
                return false;
            }
        }

        private bool CreatePNGDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                Range start = worksheet.Cells[1, 1];
                Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                Range usedRange = worksheet.get_Range(start, end);
                //  TODO : Add validation for sheet which is not type of invoice
                usedRange = TRMAddin.GetWorkSpaceRange(worksheet);

                usedRange.CopyPicture(XlPictureAppearance.xlScreen, XlCopyPictureFormat.xlBitmap);
                System.Drawing.Bitmap image2 = new Bitmap(System.Windows.Forms.Clipboard.GetImage());
                image2.Save(fileName, ImageFormat.Png);
                return true;
            }
            catch (Exception)
            {
                return false;
            }

        }

        private void UpdateSnapshotHistory(SnapHistory history)
        {
            string sheetFile = Path.GetFileName(history.SnapshotFileName);
            using (var cmd =
                new OleDbCommand("spa_excel_snapshots @flag='h',@sheet_id='" + this.ExcelSheet.Id +
                                 "' ,@snapshot_sheet_name='" + history.SnapshotSheetName + "', @snapshot_filename='" +
                                 sheetFile + "', @applied_filter='" + history.AppliedFilter + "', @refreshed_on='" +
                                 history.RefreshdaDateTime.ToString("yyyy MMMM dd HH:mm:ss") + "',@process_id='" +
                                 this.ProcessId + "'", OleDbConnection))
            {
                cmd.ExecuteNonQuery();
            }
        }

        private bool DeleteSnapshot(string fileName)
        {
            if (File.Exists(fileName))
            {
                try
                {
                    File.Delete(fileName);
                    return true;
                }
                catch (Exception)
                {
                    return false;
                }
            }
            return false;
        }


        private Worksheet GetWorksheetFromWorkBook(Workbook workbook, string sheetName)
        {
            foreach (Worksheet ws in workbook.Worksheets)
            {
                if (ws.Name != sheetName)
                    continue;
                return ws;
            }
            return null;
        }

        private struct ScheduleParam
        {
            public string ParameterName { get; set; }
            public int ScheduleType { get; set; }
            public int Day { get; set; }
            public string Value { get; set; }
        }

        private void TerminateExcel(Application xlApp, Workbook wb)
        {
            KillExcelProcess(xlApp);

            //xlApp.Workbooks.Close();

            //Marshal.FinalReleaseComObject(wb);
            //Marshal.FinalReleaseComObject(xlApp);
            //xlApp = null;
        }

    }


    public class ReportFilter
    {
        public string Name { get; set; }
        public string DisplayLabel { get; set; }
        public string Value { get; set; }
        public string DisplayValue { get; set; }
        public int OverrideType { get; set; }
        public int AdjustmentDays { get; set; }
        public string AdjustmentType { get; set; }
        public string BusinessDay { get; set; }

        public void ResolveDynamicDate(SqlConnection sqlConnection)
        {
            try
            {
                if (this.OverrideType != 0)
                {
                    //SELECT  dbo.FNAResolveDynamicDate('45601|10|106400|n')
                    string sql = "SELECT dbo.FNAResolveDynamicDate('{0}|{1}|{2}|{3}')";

                    if (sqlConnection.State == ConnectionState.Closed) sqlConnection.Open();
                    sql = string.Format(sql, OverrideType, this.AdjustmentDays, AdjustmentType, BusinessDay);
                    using (var cmd = new SqlCommand(sql, sqlConnection))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            rd.Read();
                            Value = Convert.ToDateTime(rd[0]).ToString("yyyy-MM-dd");
                            DisplayValue = Value;
                        }
                    }
                }
            }
            catch (Exception)
            {

            }
        }
    }

    internal class ExcelSheetParameter
    {
        public string Name { get; set; }
        public string Label { get; set; }
    }

    struct OverRideSummary
    {
        public string ExcelFileName { get; set; }
        public string AppliedFilter { get; set; }
        public string SpaRfxQuery { get; set; }
    }

    public class ExcelSheets
    {
        public int Id { get; set; }
        public string FileName { get; set; }
        public string SheetName { get; set; }
        public bool Publish { get; set; }
        public bool MaintainHistory { get; set; }
        public int DocumentType { get; set; }
        public bool ShowDataTabs { get; set; }

    }

    public class SnapHistory
    {
        public string FileName { get; set; }
        public string SnapshotSheetName { get; set; }
        public string AppliedFilter { get; set; }
        public DateTime RefreshdaDateTime { get; set; }
        public string SnapshotFileName { get; set; }
    }

    struct CellAddress
    {
        public string Column { get; set; }
        public int Index { get; set; }
    }

    public class ExcelFile
    {
        public string FileName { get; set; }
        public virtual List<ReportSheet> ReportSheets { get; set; }
    }

    public class ReportSheet
    {
        public string ReportName { get; set; }
        public string SheetName { get; set; }
        public string Description { get; set; }
        public string SpaRfxQuery { get; set; }
        public string ParameterSheet { get; set; }

        public virtual List<Parameter> Parameters { get; set; }

    }

    public class ReportData
    {
        public int ParamsetId { get; set; }
        public int TablixId { get; set; }
        public string ReportName { get; set; }
        public int PageID { get; set; }
        public int ReportStatusId { get; set; }
    }

    public class Parameter
    {
        public string Name { get; set; }
        public string Label { get; set; }
        public bool Optional { get; set; }
        public int DatatypeId { get; set; }
        public virtual string Values { get; set; }
    }

    public class DataSource
    {
        public string DisplayName { get; set; }
        public string ApplicationURL { get; set; }
        public string ServerName { get; set; }
        public string Database { get; set; }
        public int AuthenticationType { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public string PasswordTRM { get; set; }
        public string FileName { get; set; }
        public virtual ReportSheet ReportSheet { get; set; }
    }


    public static class TRMAddin
    {
        public static string GetSqlConnection(string oledbConnectionString)
        {
            string sql = "";
            string[] arr = oledbConnectionString.Split(';');
            foreach (string s in arr)
            {
                if (s.ToLower().Contains("provider") || s.ToLower().Contains("translate"))
                    continue;
                sql += s + ";";
            }
            sql = sql.TrimEnd(';');
            return sql;
        }

        public static string ProcessID()
        {
            Guid id = Guid.NewGuid();
            return id.ToString().Replace("-", "_");
        }

        public static void ExecuteQuery(string sql, SqlConnection sqlConnection)
        {
            using (SqlCommand cmd = new SqlCommand(sql, sqlConnection))
            {
                cmd.ExecuteNonQuery();
            }
        }

        

        public static List<ReportConfiguration> ListAllConfigurations(Workbook workbook)
        {
            //  Check in report configurations
            List<ReportConfiguration> configurations = new List<ReportConfiguration>();

            Worksheet configWorksheet = TRMAddin.CheckIfSheetExists("Configurations", workbook);
            if (configWorksheet == null)
                return null;
            //  which row to use
            bool empty = true;
            int row = 2;
            while (empty)
            {
                var cell = (Range)configWorksheet.Cells[row, 2];
                if (cell.Value2 != null)
                {
                    ReportConfiguration c = new ReportConfiguration();
                    cell = (Range)configWorksheet.Cells[row, 1];
                    c.ReportName = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 2];
                    c.ReportSheet = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 3];
                    c.Parameter = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 4];
                    c.ParameterSheet = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 5];
                    c.Description = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 6];
                    c.ConnectionIdentifier = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 7];
                    if (cell.Value2 != null)
                    {
                        c.ParamsetHash = cell.Value2;
                        //if (ReportList != null)
                        //    c.Report = ReportList.FirstOrDefault(x => x.ParamsetHash == c.ParamsetHash);
                    }


                    configurations.Add(c);
                }
                else if (cell.Value2 == null)
                {
                    empty = false;
                    break;
                }
                row++;
            }

            return configurations;
        }

        public static List<Column> GetReportDatasetColumns(string worksheetName, Workbook workbook)
        {
            List<Column> list = new List<Column>();
            Worksheet ws = TRMAddin.CheckIfSheetExists(worksheetName, workbook);
            if (ws != null)
            {
                int totalColumn = ws.UsedRange.Columns.Count;
                for (int i = 1; i < totalColumn; i++)
                {
                    list.Add(new Column() { Label = ws.Cells[1, i].Value.ToString(), Field = ws.Cells[1, i].Value.ToString() });
                }
            }
            return list;
        }

        public static string ConvertToFormula(this string formula, Position position)
        {
            try
            {
                //return formula.Replace("{R1}", position.R1.ToString(CultureInfo.InvariantCulture))
                //.Replace("{R2}", position.R2.ToString(CultureInfo.InvariantCulture))
                //.Replace("{C1}", position.C1.ToString(CultureInfo.InvariantCulture))
                //.Replace("{C2}", position.C2.ToString(CultureInfo.InvariantCulture));
                return formula.Replace("{R1}", position.C1.ToString(CultureInfo.InvariantCulture))
                .Replace("{R2}", position.C2.ToString(CultureInfo.InvariantCulture));
            }
            catch (Exception)
            {
                return formula;
            }

        }
        public static Worksheet GetInvoiceTemplateWorkSheet(string worksheet, Workbook workbook)
        {
            try
            {
                Worksheet invoiceConfig = CheckIfSheetExists("Invoice Configuration", workbook);
                //  Initially there will be no invoice configuration so template wont exists.
                if (invoiceConfig == null) return null;

                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (worksheet.ToLower() == IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        return CheckIfSheetExists(IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 3].Value).ToLower(), workbook);
                    }
                }
                return null;
            }
            catch (Exception)
            {

                return null;
            }
        }
        public static void AutoFill(Worksheet worksheet, Workbook workbook)
        {
            worksheet = workbook.Worksheets[worksheet.Name];
            int rows = worksheet.UsedRange.Rows.Count;
            for (int i = 0; i < worksheet.UsedRange.Columns.Count; i++)
            {
                Range r = worksheet.Cells[2, i + 1];
                if (r != null && r.HasFormula)
                {
                    //r.Select();
                    Range start = worksheet.Cells[2, i + 1];
                    Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, i + 1];
                    Range usedRange = worksheet.get_Range(start, end);
                    //usedRange.AutoFill(usedRange);
                    try
                    {
                        if (usedRange.Rows.Count > 1)
                            r.AutoFill(usedRange);
                    }
                    catch (Exception)
                    {
                    }

                }
            }
        }

        /// <summary>
        /// Adjust width / height of worksheet equivalent to specified worksheet
        /// </summary>
        /// <param name="documentWorksheet">Worksheet to adjust</param>
        /// <param name="templateWorksheet">Worksheet to compare</param>
        public static void MakeSameHeightWidth(this Worksheet documentWorksheet, Worksheet templateWorksheet, Workbook workbook)
        {
            try
            {
                if (TRMAddin.CheckIfSheetExists(templateWorksheet.Name, workbook) != null)
                {
                    int totalColumn = (templateWorksheet.UsedRange.Column - 1) + templateWorksheet.UsedRange.Columns.Count;
                    //  Adjust column width
                    for (int i = 1; i <= totalColumn; i++)
                    {
                        ((Range)documentWorksheet.Columns[i]).ColumnWidth = ((Range)templateWorksheet.Columns[i]).ColumnWidth;
                    }

                    for (int i = 1; i <= templateWorksheet.UsedRange.Rows.Count; i++)
                    {
                        ((Range)documentWorksheet.Rows[i]).RowHeight = ((Range)templateWorksheet.Rows[i]).RowHeight;
                    }

                }
            }
            catch (Exception)
            {
            }
        }
        /// <summary>
        /// Get index of column in worksheet
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="columnName">Valid Column Name</param>
        /// <returns></returns>
        public static int GetColumnIndex(this Worksheet worksheet, string columnName)
        {
            for (int i = 1; i <= worksheet.UsedRange.Columns.Count; i++)
            {
                if (columnName.ToLower() == IENumerableExtensions.ToString2(worksheet.Cells[1, i].Value).ToLower())
                    return i;
            }
            return 0;
        }
        /// <summary>
        /// Get Index of table column based on its position
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="columnName">Valid column name of tablix</param>
        /// <param name="tablixPosition">Position of tablix</param>
        /// <returns>Returns index of column</returns>
        public static int GetColumnIndex(this Worksheet worksheet, string columnName, Position tablixPosition)
        {
            for (int i = tablixPosition.C1; i <= tablixPosition.C2; i++)
            {
                if (columnName.ToLower() == IENumerableExtensions.ToString2(worksheet.Cells[tablixPosition.R1, i].Value).ToLower())
                    return i;
            }
            return 0;
        }
        /// <summary>
        /// Determines if specifed worksheet (Import sheet) has formula in second row 
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <returns>True, False</returns>
        public static bool ImportSheetHasFormula(Worksheet worksheet)
        {
            for (int i = 0; i < worksheet.UsedRange.Columns.Count; i++)
            {
                Range r = worksheet.Cells[2, i + 1];
                if (r != null && r.HasFormula)
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// Returns true or false if worksheet specified range has formula.
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="row">Row Index</param>
        /// <param name="column">Column Index</param>
        /// <returns>True / False</returns>
        public static bool CellHasFormula(this Worksheet worksheet, int row, int column)
        {
            try
            {
                Range cellRange = worksheet.Cells[row, column];
                if (cellRange.HasFormula)
                    return true;
            }
            catch (Exception)
            {
                return false;
            }

            return false;
        }
        /// <summary>
        /// Deletes all entire contents of specified workhsheet, For import specfic it checks for additional logic if 2nd row has some formula and preserves 2nd row
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        public static void DeleteEntireContents(Worksheet worksheet, Workbook workbook)
        {
            if (IsSheetBindToImportRule(worksheet, workbook))
            {
                int rowIndex = 2;
                if (ImportSheetHasFormula(worksheet)) rowIndex = 3;

                Range start = worksheet.Cells[rowIndex, worksheet.UsedRange.Columns.Count];
                Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                //  Added to fix if databinding returns single row even second row has formula
                if (worksheet.UsedRange.Rows.Count > rowIndex)
                {
                    Range usedRange = worksheet.get_Range(start, end);
                    usedRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                    //usedRange.Delete(XlDeleteShiftDirection.xlShiftUp);
                }
            }
            else
            {
                try
                {
                    //  This will delete all the shapes object (pictures)
                    foreach (Shape s in worksheet.Shapes)
                    {
                        s.Delete();
                    }
                    //  delete Charts
                    foreach (ChartObject ch in worksheet.ChartObjects())
                    {
                        ch.Delete();
                    }

                    Range start = worksheet.Cells[1, worksheet.UsedRange.Column];
                    Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                    Range usedRange = worksheet.get_Range(start, end);
                    usedRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                    //usedRange.Delete(XlDeleteShiftDirection.xlShiftUp);
                }
                catch (Exception)
                { }
            }

        }

        /// <summary>
        /// Copies entire contents from source worksheet to specified destination worksheet
        /// </summary>
        /// <param name="sourceWorksheet">Contents to be copied from</param>
        /// <param name="destinationWorksheet">Contents to be paste</param>
        public static void CopyEntireContents(Worksheet sourceWorksheet, Worksheet destinationWorksheet)
        {
            try
            {
                Range start = sourceWorksheet.Cells[1, sourceWorksheet.UsedRange.Column];
                //Range end = sourceWorksheet.Cells[200, sourceWorksheet.UsedRange.Columns.Count];
                Range end = sourceWorksheet.Cells.SpecialCells(XlCellType.xlCellTypeLastCell, Type.Missing);

                Range usedRange = sourceWorksheet.get_Range(start, end);

                //sourceWorksheet.UsedRange.Copy();
                usedRange.Copy();
                Range destination = destinationWorksheet.Cells[1, 1];
                destinationWorksheet.Paste(destination);
            }
            catch (Exception)
            {

            }
        }
        /// <summary>
        /// Determines if worksheet is bind to import rule , by checking import settings configuration worksheet.
        /// </summary>
        /// <param name="importSheet">Excel Worksheet</param>
        /// <returns>True , False</returns>
        public static bool IsSheetBindToImportRule(Worksheet importSheet, Workbook workbook)
        {
            Worksheet wsImportSetting = CheckIfSheetExists(@"Import Settings", workbook);
            if (wsImportSetting != null)
            {
                for (int i = 0; i < wsImportSetting.UsedRange.Rows.Count; i++)
                {
                    if (IENumerableExtensions.ToString2(wsImportSetting.Cells[i + 1, 5].Value).ToLower() ==
                        importSheet.Name.ToLower())
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static int GetSheetDocumentType(Workbook wb, string sheetName)
        {
            try
            {
                //  Add logic to determine excel sheet type, Eg. confirmation letter can report but user will marked as document generation to map in contract report template
                //  If document generation is mapped content is cleared before preparing.
                //  Check if excel sheet is report
                Worksheet wsConfig = TRMAddin.CheckIfSheetExists("Configurations", wb);
                if (wsConfig != null)
                {
                    for (int i = 1; i <= wsConfig.UsedRange.Rows.Count; i++)
                    {
                        if (IENumerableExtensions.ToString2(wsConfig.Cells[i, 2].Value) == sheetName)
                            return 106700;
                    }
                }

                //  Check if sheet is import
                wsConfig = TRMAddin.CheckIfSheetExists("Import Settings", wb);
                if (wsConfig != null)
                {
                    for (int i = 1; i <= wsConfig.UsedRange.Rows.Count; i++)
                    {
                        if (IENumerableExtensions.ToString2(wsConfig.Cells[i, 5].Value) == sheetName)
                            return 106702;
                    }
                }
                //  Check if invoice template
                wsConfig = TRMAddin.CheckIfSheetExists(sheetName + "_template", wb);
                if (wsConfig != null)
                    return 106701;
            }
            catch (Exception)
            {
                return 106700;
            }

            return 106700;
        }

        public static string TruncateString(this Object value, int length = 25)
        {
            try
            {
                string temp = value.ToString();
                if (temp.Length >= length)
                    temp = temp.Substring(0, length);
                return temp;
            }
            catch (Exception)
            {
                return "";
                throw;
            }
        }

        public static Microsoft.Office.Interop.Excel.Worksheet AddWorkSheet( Workbook workbook, string workSheetName, bool visible = true)
        {


            Microsoft.Office.Interop.Excel.Worksheet ws = CheckIfSheetExists(workSheetName, workbook);
            if (ws == null)
            {
                Microsoft.Office.Interop.Excel.Worksheet newWorksheet;
                newWorksheet = workbook.Worksheets.Add();
                newWorksheet.Name = workSheetName.TruncateString(25);
                if (!visible)
                    newWorksheet.Visible = Microsoft.Office.Interop.Excel.XlSheetVisibility.xlSheetHidden;
                newWorksheet.Activate();
                return newWorksheet;
            }
            ws.Activate();
            return ws;
        }

        public static Microsoft.Office.Interop.Excel.Worksheet CheckIfSheetExists(string sheetName, Workbook workbook)
        {
            Microsoft.Office.Interop.Excel.Worksheet ws = null;
            foreach (Microsoft.Office.Interop.Excel.Worksheet worksheet in workbook.Worksheets)
            {
                if (worksheet.Name.ToLower() == sheetName.ToLower())
                {
                    ws = worksheet;
                    break;
                }
                else
                {
                    ws = null;
                }
            }
            return ws;
        }

        public static Range GetWorkSpaceRange(Worksheet ws)
        {
            string usedRange = ws.UsedRange.get_AddressLocal();
            List<CellAddress> minList = new List<CellAddress>();
            List<CellAddress> maxList = new List<CellAddress>();

            string[] arrMin = usedRange.Split(':').FirstOrDefault().Split('$').Where(x => x.Trim() != "").ToArray();
            minList.Add(new CellAddress() { Column = arrMin[0], Index = Convert.ToInt32(arrMin[1]) });

            string[] arrMax = usedRange.Split(':').LastOrDefault().Split('$').Where(x => x.Trim() != "").ToArray();
            maxList.Add(new CellAddress() { Column = arrMax[0], Index = Convert.ToInt32(arrMax[1]) });

            ws.Protect(Contents: false);

            List<string> bottomRightsRanges = new List<string>();

            foreach (ChartObject co in ws.ChartObjects())
            {

                string address = co.TopLeftCell.get_AddressLocal();
                string[] arr = address.Split('$').Where(x => x.Trim() != "").ToArray();
                minList.Add(new CellAddress() { Column = arr[0], Index = Convert.ToInt32(arr[1]) });

                address = co.BottomRightCell.get_AddressLocal();
                arr = address.Split('$').Where(x => x.Trim() != "").ToArray();
                maxList.Add(new CellAddress() { Column = arr[0], Index = Convert.ToInt32(arr[1]) });
            }


            CellAddress minAddress = minList.OrderBy(x => x.Column).ThenBy(x => x.Index).FirstOrDefault();
            string maxCol = maxList.OrderBy(x => x.Column.Length).ThenBy(x => x.Column).LastOrDefault().Column;
            CellAddress maxAddress = maxList.OrderBy(x => x.Index).LastOrDefault();

            Range r = ws.get_Range(minAddress.Column + minAddress.Index, maxCol + maxAddress.Index);
            return r;
        }
    }


    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    public static class IENumerableExtensions
    {
        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static string ToString2(this Object value)
        {
            try
            {
                return Convert.ToString(value.ToString());
            }
            catch (Exception)
            {

                return "";
            }
        }

        public static void KillExcel(this uint iProcessId)
        {
            try
            {
                Process pProcess = Process.GetProcessById((int)iProcessId);
                if (pProcess != null)
                    pProcess.Kill();
            }
            catch (System.Exception)
            {
                //just ignore any failure.
            }

        }
        public static List<T> DeserializeXml<T>(this string xmlContent, string xmlRootAttribute)
        {
            try
            {
                using (StringReader stringReader = new StringReader(xmlContent))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<T>), new XmlRootAttribute(xmlRootAttribute));
                    List<T> list = (List<T>)serializer.Deserialize(stringReader);
                    return list;
                }
            }
            catch (Exception)
            {
                return null;
            }

        }
        public static DateTime ToDateTime(this Object value)
        {
            DateTime dt = new DateTime();
            try
            {
                return Convert.ToDateTime(value.ToString());
            }
            catch (Exception)
            {

                return dt;
            }
        }

        public static bool ToBool(this Object value)
        {
            try
            {
                return Convert.ToBoolean(value);
            }
            catch (Exception)
            {

                return false;
            }
        }

        public static bool ToBool(this XElement xElement)
        {
            try
            {
                if (xElement.Value.ToLower() == "true" || xElement.Value.ToLower() == "1")
                    return true;
                return false;
            }
            catch (Exception)
            {

                return false;
            }
        }


        public static string Encrypt(this Object value)
        {
            string result = Encrypt(value.ToString());
            //string result = value.ToString();
            return result;
        }

        public static string Decrypt(this Object value)
        {
            string result = Decrypt(value.ToString());
            //string result = value.ToString();
            return result;
        }

        private static string Encrypt(string toEncrypt, bool useHashing = true)
        {
            byte[] keyArray;
            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);

            string key = "farrms_admin";
            //System.Windows.Forms.MessageBox.Show(key);
            //If hashing use get hashcode regards to your key
            if (useHashing)
            {
                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                //Always release the resources and flush data
                // of the Cryptographic service provide. Best Practice

                hashmd5.Clear();
            }
            else
                keyArray = UTF8Encoding.UTF8.GetBytes(key);

            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes.
            //We choose ECB(Electronic code Book)
            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)

            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateEncryptor();
            //transform the specified region of bytes array to resultArray
            byte[] resultArray =
              cTransform.TransformFinalBlock(toEncryptArray, 0,
              toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor
            tdes.Clear();
            //Return the encrypted data into unreadable string format
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }

        private static string Decrypt(string cipherString, bool useHashing = true)
        {
            byte[] keyArray;
            //get the byte code of the string

            byte[] toEncryptArray = Convert.FromBase64String(cipherString);

            //Get your key from config file to open the lock!
            string key = "farrms_admin";

            if (useHashing)
            {
                //if hashing was used get the hash code with regards to your key
                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                //release any resource held by the MD5CryptoServiceProvider

                hashmd5.Clear();
            }
            else
            {
                //if hashing was not implemented get the byte code of the key
                keyArray = UTF8Encoding.UTF8.GetBytes(key);
            }

            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes. 
            //We choose ECB(Electronic code Book)

            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)
            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(
                                 toEncryptArray, 0, toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor                
            tdes.Clear();
            //return the Clear decrypted TEXT
            return UTF8Encoding.UTF8.GetString(resultArray);
        }

        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }
            dr.Close();
            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, SqlDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }
    }

}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>ST_dd15b1baccfb44448c0156790b3eaa20</msb:CodeName>
		<msb:DisplayName>ST_dd15b1baccfb44448c0156790b3eaa20</msb:DisplayName>
		<msb:ProjectId>{1154665E-6127-4BFF-9FEC-2F5FC5225FC1}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_dd15b1baccfb44448c0156790b3eaa20.csproj"/>
		<msb:File Include="DocumentDesigner.cs"/>
		<msb:File Include="ImportExport.cs"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Settlement.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Snapshot.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Breakpoint Include="332440c7203f41ceb1a201815ba47d34">
			<msb:FileName>Settlement.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:ColumnNumber>9</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>337</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="3385709aec5640388b1d1f7c329730e1">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>128</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0da132fc5a7c4b9c9abb57d7b9e3c042">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>Snapshot.cs</msb:FileName>
			<msb:ColumnNumber>21</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>99</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="4312954d26a74bac992666941e60f0ce">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>174</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="6e03703372c349439c27a23456cbc573">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>Snapshot.cs</msb:FileName>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:LineNumber>960</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Settings.get_Default():ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Sett" +
    "ings")]

namespace ST_dd15b1baccfb44448c0156790b3eaa20.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ImportExport.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.AccessControl;
using System.Text;
using System.Xml;
using Microsoft.Office.Interop.Excel;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class ImportExport
    {
        public Worksheet Worksheet { get; set; }
        public Workbook Workbook { get; set; }
        public DataImport DataImport;
        public SqlConnection SqlConnection { get; set; }
        public string ProcessTableName { get; set; }
        private string processId;
        private string _userName;
        public ImportExport()
        {
            this.processId = TRMAddin.ProcessID();
        }

        public ImportExport(Worksheet worksheet, Workbook workbook, string userName)
        {
            _userName = userName;
            this.processId = TRMAddin.ProcessID();
            this.Workbook = workbook;
            this.Worksheet = worksheet;
            this.DataImport = GetDataImportConfigurationOfWorksheet();
        }


        public DataImport GetDataImportConfigurationOfWorksheet()
        {
            try
            {
                //  if no any configuration is saved
                Worksheet wsImportSettings = TRMAddin.CheckIfSheetExists("Import Settings", this.Workbook);
                if (wsImportSettings != null)
                {
                    for (int i = 2; i <= wsImportSettings.UsedRange.Rows.Count; i++)
                    {
                        //  Check for matching worksheet
                        string importSheetName = IENumerableExtensions.ToString2(wsImportSettings.Cells[i, 5].Value);
                        if (!string.IsNullOrEmpty(importSheetName) && (importSheetName.ToLower() == this.Worksheet.Name.ToLower()))
                        {
                            var ruleId = (Range)wsImportSettings.Cells[i, 1];
                            var ruleName = (Range)wsImportSettings.Cells[i, 2];
                            var description = (Range)wsImportSettings.Cells[i, 3];
                            var sourceColumns = (Range)wsImportSettings.Cells[i, 4];
                            string xmlConfig = IENumerableExtensions.ToString2(wsImportSettings.Cells[i, 6].Value).Trim();
                            List<RuleColumn> ruleColumns = new List<RuleColumn>();
                            if (sourceColumns.Value2 != null)
                            {
                                foreach (string col in sourceColumns.Value2.ToString().Split(','))
                                {
                                    //cols.Add(col);
                                    ruleColumns.Add(new RuleColumn() { Column = col });
                                }
                            }

                            DataImport di = new DataImport()
                            {
                                Description = (description.Value2 != null) ? description.Value2.ToString() : "",
                                ImportSheet = importSheetName,
                                Rule = new Rule() { Id = IENumerableExtensions.ToInt(ruleId.Value2), Name = ruleName.Value2.ToString(), RuleColumnList = ruleColumns }
                            };

                            if (!string.IsNullOrEmpty(xmlConfig))
                            {
                                XmlDocument xmlDoc = new XmlDocument();
                                xmlDoc.LoadXml(xmlConfig);
                                XmlNodeList importXml = xmlDoc.GetElementsByTagName("Tablix");
                                XmlNode xNode = importXml[0];
                                string datasetSheetName = xNode.Attributes["Name"].Value;


                                di.Tablix = new Tablix()
                                {
                                    ReportSheetDataset = datasetSheetName,
                                    Columns = new List<Column>()
                                };

                                foreach (XmlElement xmlColumn in xNode.ChildNodes)
                                {
                                    if (xmlColumn.HasAttributes)
                                        di.Tablix.Columns.Add(new Column() { Label = xmlColumn.GetAttributeNode("Header").Value, Field = xmlColumn.GetAttributeNode("Field").Value });
                                }
                            }

                            return di;
                        }

                    }
                }
                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public bool CheckIfRuleIsChanged(Rule selectedRule)
        {
            DataImport di = GetDataImportConfigurationOfWorksheet();
            if (di != null)
            {
                if (di.Rule.Name.ToLower() != selectedRule.Name.ToLower())
                    return true;
            }
            return false;
        }


        public ImportStatus Run()
        {
            //string json = new PsJson(this.Worksheet).ConvertToJson();
            //  TODO : Run Import Rule WithOut API
            //return TRMAddin.PSAPIInterface.RunImport(json, this.DataImport.Rule.Id);

            var dt = this.CreateDataTable();
            if (dt != null)
            {
                this.BuildDataTable(dt);
                this.CreateProcessTable(dt);
                this.DumpDataTable(dt);
                this.ExecuteImport();
            }

            return null;
        }

        private void ExecuteImport()
        {
            //  Check if valid rule id selected in sheet, if excel file from different version is uploaded get rule id from its name
            //  Rule Name is unique always

            int ruleId = this.GetRuleId();
            if (ruleId != 0) this.DataImport.Rule.Id = ruleId;

            string sql = "EXEC sys.sp_set_session_context @key = N'DB_USER', @value = '" + this._userName + "';EXEC spa_ixp_rules @flag = 't',@process_id = '" + this.processId + "',@ixp_rules_id =" +
                         this.DataImport.Rule.Id + ",@run_table = '" + this.ProcessTableName +
                         "',@source = '21400',@run_with_custom_enable = 'n'";
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);
        }

        private int GetRuleId()
        {
            string sql = "SELECT ir.ixp_rules_id FROM ixp_rules AS ir WHERE ir.ixp_rules_name = '" + this.DataImport.Rule.Name + "'";
            using (var cmd = new SqlCommand(sql, this.SqlConnection))
            {
                using (SqlDataReader rd = cmd.ExecuteReader())
                {
                    while (rd.Read())
                    {
                        return rd[0].ToInt();
                    }
                }
            }
            return 0;
        }

        private System.Data.DataTable CreateDataTable()
        {
            try
            {
                var dt = new System.Data.DataTable();
                Range range = this.Worksheet.UsedRange;
                if (range != null)
                {
                    int totalColumn = range.Columns.Count;
                    for (int i = 0; i < totalColumn; i++)
                    {
                        string columnName = "[Column" + (i + 1) + "]";
                        var cell = (Range)this.Worksheet.Cells[1, i + 1];
                        if (cell.Value2 != null)
                            columnName = cell.Text;
                        DataColumn datacolumn = new DataColumn(columnName);
                        dt.Columns.Add(datacolumn);

                    }
                }
                return dt;
            }
            catch (Exception)
            {
                return null;
            }
        }

        private void BuildDataTable(System.Data.DataTable dt)
        {
            //  check if data rows are present or not excluding header
            Range usedRange = this.Worksheet.UsedRange;
            if (usedRange != null)
            {
                int totalRows = usedRange.Rows.Count;
                int totalColumns = usedRange.Columns.Count;
                if (totalRows > 1)
                {
                    //  Row
                    int rowIndex = 0;
                    for (int i = 2; i <= totalRows; i++)
                    {
                        var dr = dt.Rows.Add();
                        //  Column
                        for (int j = 1; j <= totalColumns; j++)
                        {
                            dt.Rows[rowIndex][j - 1] = ((Range)usedRange.Cells[i, j]).Text;
                        }
                        rowIndex++;
                    }
                }
            }
        }

        private void DumpDataTable(System.Data.DataTable dt)
        {
            using (var adapter = new SqlDataAdapter("SELECT * FROM " + this.ProcessTableName, this.SqlConnection))
            using (var builder = new SqlCommandBuilder(adapter))
            {
                adapter.InsertCommand = builder.GetInsertCommand();
                adapter.Update(dt);
            }
            DeleteEmptyRowsOfTable(this.ProcessTableName);
        }

        private void CreateProcessTable(System.Data.DataTable dt)
        {
            //  Create process table  Drop If exists
            this.ProcessTableName = "[adiha_process].dbo.[excel_addin_data_import_" + this.processId + "]";
            //  Drop process table if exists
            string sql = "IF OBJECT_ID('" + this.ProcessTableName + "') IS NOT NULL DROP TABLE " + this.ProcessTableName;
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);

            sql = "CREATE TABLE " + this.ProcessTableName + "(";

            foreach (System.Data.DataColumn dtColumn in dt.Columns)
            {
                sql += "[" + dtColumn.ColumnName + "] VARCHAR(1024),";
            }
            sql = sql.TrimEnd(',') + ")";
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);
        }

        private void DeleteEmptyRowsOfTable(string tableName)
        {
            try
            {
                //  Just load the structure
                using (SqlCommand cmd = new SqlCommand("SELECT * FROM " + tableName + " WHERE 1=2", this.SqlConnection))
                {
                    string sql = @"DELETE FROM " + tableName + " WHERE ";
                    using (SqlDataReader rd = cmd.ExecuteReader())
                    {

                        for (int i = 0; i < rd.FieldCount; i++)
                        {
                            sql += " ISNULL([" + rd.GetName(i) + "],'') = '' +";
                        }
                        rd.Close();
                    }
                    sql = sql.TrimEnd('+').Replace("+", "AND");
                    TRMAddin.ExecuteQuery(sql, this.SqlConnection);
                }
            }
            catch (Exception)
            {

            }
        }

    }

    public class ImportStatus
    {
        public string ErrorCode { get; set; }
        public string Module { get; set; }
        public string Area { get; set; }
        public string Status { get; set; }
        public string Message { get; set; }
        public string Recommendation { get; set; }
    }

    public class Rule
    {
        public int Id { get; set; }
        public string Category { get; set; }
        public string Name { get; set; }
        public string DataSource { get; set; }

        public virtual List<RuleColumn> RuleColumnList { get; set; }
    }

    public class RuleColumn
    {
        public string Column { get; set; }
    }

    public class DataImport
    {
        public Rule Rule { get; set; }
        public string Description { get; set; }
        public string ImportSheet { get; set; }
        public virtual Tablix Tablix { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_dd15b1baccfb44448c0156790b3eaa20.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0C3005C9-9BCC-4175-B32E-77B5C2007D49}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_dd15b1baccfb44448c0156790b3eaa20</RootNamespace>
    <AssemblyName>ST_dd15b1baccfb44448c0156790b3eaa20</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="adodb, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>False</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft.NET\Primary Interop Assemblies\adodb.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.Office.Interop.Excel, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio 11.0\Visual Studio Tools for Office\PIA\Office14\Microsoft.Office.Interop.Excel.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms">
      <Private>True</Private>
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="DocumentDesigner.cs" />
    <Compile Include="ImportExport.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Settlement.cs" />
    <Compile Include="Snapshot.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug32dd7fa2-0819-4108-97fb-711b4acd7a1b/c34a9309-fa8f-40db-ad1d-45aeee340652&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_dd15b1baccfb44448c0156790b3eaa20.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_dd15b1baccfb44448c0156790b3eaa20.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAGPlAV4AAAAAAAAAAOAAIiALATAAAOgBAAAIAAAAAAAARgcC
AAAgAAAAIAIAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAABgAgAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAPQGAgBPAAAAACACAJwEAAAAAAAAAAAAAAAAAAAA
AAAAAEACAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAATOcBAAAgAAAA6AEAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJwEAAAAIAIAAAYAAADqAQAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAEACAAACAAAA8AEAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAo
BwIAAAAAAEgAAAACAAUAtPEAAIgUAQABAAAAAAAAADwGAgC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CewUAAAQqIgIDfQUAAAQqHgJ7BgAABCoiAgN9BgAABCoe
AnsHAAAEKiICA30HAAAEKh4CewgAAAQqIgIDfQgAAAQqHgJ7CQAABCoiAgN9CQAABCoeAnsKAAAE
KiICA30KAAAEKgAAGzARAHIBAAABAAARAigbAAAKAg4EfQsAAAQCAygNAAAGAgUoCwAABgRvHAAA
Ci0GBG8dAAAKAgQoCQAABgIoFQAABnIBAABwAigIAAAGcx4AAApvHwAACgoGbyAAAAosBwZvIQAA
CiYCBhdvIgAACm8jAAAKKAUAAAbeCgYsBgZvJAAACtwCAigEAAAGcjEAAHACKAYAAAZvJAAABnJb
AABwKCUAAAp9DQAABAIoBgAABm8mAAAGKCYAAAotIwIoBgAABm8mAAAGbycAAApyZwAAcCgoAAAK
LAcCKBEAAAYqcmsAAHBzKQAACigqAAAKKCsAAAp0JwAAAgsHbzICAAYoLAAACgJ8DAAABCgBAAAG
JgcWbzACAAYHFm8rAgAGAgdvJgIABgJ7DQAABH4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAA
Cn4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAApvJAIABigDAAAGKgAAARAA
AAIATQAjcAAKAAAAABswAgA9AAAAAgAAEQIoBgAABm8mAAAGKCYAAAotIAIoBgAABm8mAAAGbycA
AApytQAAcCgoAAAKLAQXCt4JFgreBSYWCt4ABioAAAABEAAAAAAAADY2AAUUAAABBioAABswDQAj
AwAAAwAAEXJrAABwcykAAAooKgAACigrAAAKdCcAAAIKBm8yAgAGKCwAAAoCfAwAAAQoAQAABiYG
Fm8wAgAGBhZvKwIABgIoBAAABnK5AABwAigGAAAGbyQAAAZyWwAAcCglAAAKC34uAAAKDAIGbyYC
AAZ+LgAACm8gAgAGKAMAAAYfC41PAAABJRZy0QAAcKIlFwIoBgAABm8cAAAGoiUYclEBAHCiJRkC
KAYAAAZvHgAABqIlGnJzAQBwoiUbAigGAAAGbyAAAAaiJRxynQEAcKIlHQIoBgAABm8iAAAGoiUe
csMBAHCiJR8JAigGAAAGbyQAAAaiJR8KcvMBAHCiKC8AAAoNczAAAAoCCSgUAAAGbx8AAAooAQAA
KygCAAArEwQRBG8yAAAKFj6UAQAAEQR+DgEABCUtFyZ+DQEABP4GXwIABnMzAAAKJYAOAQAEKAMA
ACsoBAAAKygFAAArbzYAAAoTBTg2AQAAc1sCAAYTBhEGEgUoNwAACn0MAQAEAigCAAAGEQZ7DAEA
BBcorwEABhMHEQQRBv4GXAIABnM4AAAKKAYAACsTCBEIOe8AAAARCG81AAAGICWjAQAuGgIRCG8x
AAAGEQhvMwAABhcoGAAABjjHAAAAEQhvNQAABiAlowEAQLYAAABy9wEAcBeNVAAAASUWHyydKDoA
AAoXEwkTChYTCziJAAAAEQoRC5oTDH4LAQAELSUfENAuAAACKDsAAArQAgAAAig7AAAKKDwAAAoo
PQAACoALAQAEfgsBAAR7PgAACn4LAQAEEQdvRwIABheMWQAAAREJjFkAAAFv6wEABm8/AAAKJX4t
AAAKEQxvDAIABm/zAQAGF4xaAAABb8oBAAYRCRdYEwkRCxdYEwsRCxEKjmk/bP///xIFKEAAAAo6
vv7//94OEgX+FgQAABtvJAAACtwCKBkAAAYCKAIAAAYHfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAA
Chd+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKbzoCAAYCKAIAAAYXjFoAAAEICG80AgAGBm8tAgAG
AnsMAAAEKLYBAAYqAEEcAAACAAAAYgEAAEkBAACrAgAADgAAAAAAAAAeAnsOAAAEKiICA30OAAAE
KgAAABswAgAdAAAABAAAEQMCKAgAAAZzHgAACgoGC94KBiwGBm8kAAAK3AcqAAAAARAAAAIADQAE
EQAKAAAAABswAwD8AQAABQAAEQJzKAAABigHAAAGAigKAAAGb0EAAAoonQEABnNCAAAKCgZvHQAA
CnJsAwBwAigMAAAGKEMAAAoGcx4AAAoLB28fAAAKDDhwAQAAFg04XQEAAAgJb0QAAAoTBBEEbycA
AApy7wMAcCgnAAAKKCgAAAosGAIoBgAABggRBG9FAAAKbyMAAApvGwAABhEEbycAAApyDQQAcCgn
AAAKKCgAAAosGAIoBgAABggRBG9FAAAKbyMAAApvHQAABhEEbycAAApyIwQAcCgnAAAKKCgAAAos
GAIoBgAABggRBG9FAAAKbyMAAApvHwAABhEEbycAAApyNQQAcCgnAAAKKCgAAAosGAIoBgAABggR
BG9FAAAKbyMAAApvIQAABhEEbycAAApySwQAcCgnAAAKKCgAAAosGAIoBgAABggRBG9FAAAKbyMA
AApvIwAABhEEbycAAApyXQQAcCgnAAAKKCgAAAosGAIoBgAABggRBG9FAAAKbyMAAApvJQAABhEE
bycAAApycQQAcCgnAAAKKCgAAAosGAIoBgAABggRBG9FAAAKbyMAAApvJwAABgkXWA0JCG9GAAAK
P5f+//8IbyEAAAo6hf7//94KCCwGCG8kAAAK3N4KBywGB28kAAAK3AZvRwAACt4KBiwGBm8kAAAK
3N4KJgIUKAcAAAbeACpBZAAAAgAAAEUAAACCAQAAxwEAAAoAAAAAAAAAAgAAAD4AAACVAQAA0wEA
AAoAAAAAAAAAAgAAACEAAADEAQAA5QEAAAoAAAAAAAAAAAAAAAsAAADmAQAA8QEAAAoAAAAUAAAB
GzANAPgCAAAGAAARHw2NTwAAASUWctEAAHCiJRcCKAYAAAZvHAAABqIlGHKPBABwoiUZAigGAAAG
bxoAAAaiJRpyUQEAcKIlGwIoBgAABm8eAAAGoiUccnMBAHCiJR0CKAYAAAZvIAAABqIlHnKdAQBw
oiUfCQIoBgAABm8iAAAGoiUfCnLDAQBwoiUfCwIoBgAABm8kAAAGoiUfDHLzAQBwoigvAAAKCnMw
AAAKAgYoFAAABm8fAAAKKAEAACsoAgAAKwsHbzIAAAoWMTgHfg8BAAQlLRcmfg0BAAT+BmACAAZz
MwAACiWADwEABCgDAAArKAQAACsoBQAAKwwCCBYoFwAABgdvSAAAChMEKx4SBChJAAAKEwUCEQVv
MQAABhEFbzMAAAYWKBgAAAYSBChKAAAKLdneDhIE/hYIAAAbbyQAAArcAigZAAAGAigCAAAGbzYC
AAZyuwQAcAIoAgAABiiwAQAGDQk5YQEAAH4TAQAELSQW0DYAAAIoOwAACtACAAACKDsAAAooPAAA
CihLAAAKgBMBAAR+EwEABHtMAAAKfhMBAAR+EgEABC1FFnLbBABwFNACAAACKDsAAAoZjVsAAAEl
Fh8hFChNAAAKoiUXFhQoTQAACqIlGBcUKE0AAAqiKE4AAAooTwAACoASAQAEfhIBAAR7UAAACn4S
AQAE0CEAAAIoOwAACn4RAQAELS8WcgEFAHDQAgAAAig7AAAKF41bAAABJRYWFChNAAAKoihRAAAK
KFIAAAqAEQEABH4RAQAEe1MAAAp+EQEABAlvRwIABhiMWQAAARuMWQAAAW/rAQAGb1QAAAoCKAIA
AAZvVQAACm9WAAAKEwYRBixLEQYCKAIAAAYCewsAAARzvwAABiUCKAgAAAZvuwAABhMHEQd7WAAA
BCwhEQYCKAIAAAZzVwAABhEHe1gAAARvWwAABhEHb8IAAAYmAigCAAAGF4xaAAABAnsNAAAEfi0A
AApvNAIABgJ7DAAABBMI3gsmAnsMAAAEEwjeABEIKkE0AAACAAAAAgEAACsAAAAtAQAADgAAAAAA
AAAAAAAAAAAAAOoCAADqAgAACwAAABQAAAEbMAIAUwAAAAcAABEELAsDcg0FAHBvVwAACgNvNgAA
CgorIhIAKDcAAAoCKAIAAAYosAEABgsHLAwHAigCAAAGKKoBAAYSAChAAAAKLdXeDhIA/hYEAAAb
byQAAArcKgABEAAAAgAVAC9EAA4AAAAAGzAGALoBAAAIAAARAwIoAgAABiiwAQAGCgYlLQ4mAigC
AAAGAxcorwEABgpzWAAACgtzWQAACgxzWgAACiYHAigKAAAGb0EAAApvWwAACgclb1wAAApyHQUA
cChDAAAKb1sAAAoHcnsFAHByewUAcHJ7BQBwFW9dAAAKCAQHFhkXb14AAAoWEwQ4jQAAAH4UAQAE
LSUfENAuAAACKDsAAArQAgAAAig7AAAKKDwAAAooPQAACoAUAQAEfhQBAAR7PgAACn4UAQAEBm9H
AgAGF4xZAAABEQQXWIxZAAABb+sBAAZvPwAACiUIb18AAAoRBIxZAAABb2AAAApvYQAACm8OAgAG
b/MBAAYXjFoAAAFvygEABhEEF1gTBBEECG9fAAAKb2IAAAo/Yf///34VAQAELSQW0C4AAAIoOwAA
CtACAAACKDsAAAooPAAACig9AAAKgBUBAAR+FQEABHs+AAAKfhUBAAQGb0cCAAYGb1QCAAZvAwIA
Bm/pAQAGF1iMWQAAAReMWQAAAW/rAQAGbz8AAAoNBS0UCQh+LQAACn4tAAAKb+cBAAYmKxQJCB8K
jFkAAAF+LQAACm/nAQAGJt4DJt4AKgAAQRwAAAAAAAAAAAAAtgEAALYBAAADAAAAFAAAARswCACl
BwAACQAAEXINBQBwAigCAAAGKLABAAYKBi0SAigCAAAGcg0FAHAXKK8BAAYKfhYBAAQtORZyAQUA
cNACAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcZFChNAAAKoihjAAAKKGQAAAqAFgEABH4WAQAE
e2UAAAp+FgEABAZvRwIABheMWQAAAReMWQAAAW/rAQAGcn0FAHBvZgAACiZ+FwEABC05FnIBBQBw
0AIAAAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxkUKE0AAAqiKGMAAAooZAAACoAXAQAEfhcBAAR7
ZQAACn4XAQAEBm9HAgAGF4xZAAABGIxZAAABb+sBAAZylwUAcG9mAAAKJn4YAQAELTkWcgEFAHDQ
AgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXGRQoTQAACqIoYwAACihkAAAKgBgBAAR+GAEABHtl
AAAKfhgBAAQGb0cCAAYXjFkAAAEZjFkAAAFv6wEABnKpBQBwb2YAAAomfhkBAAQtORZyAQUAcNAC
AAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcZFChNAAAKoihjAAAKKGQAAAqAGQEABH4ZAQAEe2UA
AAp+GQEABAZvRwIABheMWQAAARqMWQAAAW/rAQAGcr0FAHBvZgAACiZ+GgEABC05FnIBBQBw0AIA
AAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxkUKE0AAAqiKGMAAAooZAAACoAaAQAEfhoBAAR7ZQAA
Cn4aAQAEBm9HAgAGF4xZAAABG4xZAAABb+sBAAZy1wUAcG9mAAAKJn4bAQAELTkWcgEFAHDQAgAA
Aig7AAAKGI1bAAABJRYWFChNAAAKoiUXGRQoTQAACqIoYwAACihkAAAKgBsBAAR+GwEABHtlAAAK
fhsBAAQGb0cCAAYXjFkAAAEcjFkAAAFv6wEABnLtBQBwb2YAAAomfhwBAAQtJBbQLgAAAig7AAAK
0AIAAAIoOwAACig8AAAKKD0AAAqAHAEABH4cAQAEez4AAAp+HAEABAZvUgIABheMWQAAAX4tAAAK
b+sBAAZvPwAACiVv8wEABheMWgAAAW/KAQAGb9kBAAYmHwuNTwAAASUWcgEGAHCiJRcCKAYAAAZv
HAAABqIlGHKPBABwoiUZAigGAAAGbxoAAAaiJRpyUQEAcKIlGwIoBgAABm8eAAAGoiUccnMBAHCi
JR0CKAYAAAZvIAAABqIlHnKdAQBwoiUfCQIoBgAABm8iAAAGoiUfCnLzAQBwoigvAAAKCwIoDwAA
Bi0WcgEGAHACKAYAAAZvHAAABihDAAAKC3NnAAAKAgcoFAAABm8fAAAKKAcAACsoCAAAKygJAAAr
DAg5lQIAAH4dAQAELTkWcgEFAHDQAgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIo
YwAACihkAAAKgB0BAAR+HQEABHtlAAAKfh0BAAQGb0cCAAYYjFkAAAEXjFkAAAFv6wEABghvGgAA
Bm9mAAAKJn4eAQAELTkWcgEFAHDQAgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIo
YwAACihkAAAKgB4BAAR+HgEABHtlAAAKfh4BAAQGb0cCAAYYjFkAAAEYjFkAAAFv6wEABghvHAAA
Bm9mAAAKJn4fAQAELTkWcgEFAHDQAgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIo
YwAACihkAAAKgB8BAAR+HwEABHtlAAAKfh8BAAQGb0cCAAYYjFkAAAEZjFkAAAFv6wEABghvHgAA
Bm9mAAAKJn4gAQAELTkWcgEFAHDQAgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIo
YwAACihkAAAKgCABAAR+IAEABHtlAAAKfiABAAQGb0cCAAYYjFkAAAEajFkAAAFv6wEABghvIAAA
Bm9mAAAKJn4hAQAELTkWcgEFAHDQAgAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIo
YwAACihkAAAKgCEBAAR+IQEABHtlAAAKfiEBAAQGb0cCAAYYjFkAAAEbjFkAAAFv6wEABghvIgAA
Bm9mAAAKJn4iAQAELSQW0C4AAAIoOwAACtACAAACKDsAAAooPAAACig9AAAKgCIBAAR+IgEABHs+
AAAKfiIBAAQGb1ICAAYYjFkAAAF+LQAACm/rAQAGbz8AAApv2QEABiZy0QAAcAIoBgAABm8cAAAG
KEMAAAoLczAAAAoCBygUAAAGbx8AAAooAQAAKygCAAArDQk51QAAAAl+EAEABCUtFyZ+DQEABP4G
YQIABnMzAAAKJYAQAQAEKAMAACsoBAAAKygFAAArGBMEbzYAAAoTBSt+EgUoNwAAChMGfiMBAAQt
ORZyAQUAcNACAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcXFChNAAAKoihjAAAKKGQAAAqAIwEA
BH4jAQAEe2UAAAp+IwEABAZvRwIABhEEjFkAAAEcjFkAAAFv6wEABhEGb2YAAAomEQQXWBMEEgUo
QAAACjp2////3g4SBf4WBAAAG28kAAAK3CoAAAABEAAAAgAIB46WBw4AAAAAHgJ7DwAABCoiAgN9
DwAABCoeAnsQAAAEKiICA30QAAAEKh4CexEAAAQqIgIDfREAAAQqHgJ7EgAABCoiAgN9EgAABCoe
AnsTAAAEKiICA30TAAAEKh4CexQAAAQqIgIDfRQAAAQqHgJ7FQAABCoiAgN9FQAABCoeAigbAAAK
Kh4CexYAAAQqIgIDfRYAAAQqHgJ7FwAABCoiAgN9FwAABCoeAnsYAAAEKiICA30YAAAEKh4CexkA
AAQqIgIDfRkAAAQqHgJ7GgAABCoiAgN9GgAABCoeAnsbAAAEKiICA30bAAAEKh4CexwAAAQqIgID
fRwAAAQqHgJ7HQAABCoiAgN9HQAABCoeAnseAAAEKiICA30eAAAEKh4Cex8AAAQqIgIDfR8AAAQq
HgJ7IAAABCoiAgN9IAAABCoeAnshAAAEKiICA30hAAAEKgAbMAYASgQAAAoAABEWCgICKGkAAApv
agAACnKBBgBwb2sAAApvbAAACm8jAAAKfSIAAAQCAihpAAAKb2oAAApynwYAcG9rAAAKb2wAAApv
IwAACn0jAAAEAgIoaQAACm9qAAAKcsEGAHBvawAACm9sAAAKbyMAAAoffB8sb20AAApy4QYAcHJ7
BQBwb24AAAp9JAAABAICKGkAAApvagAACnLpBgBwb2sAAApvbAAACm8jAAAKfSUAAAQCAihpAAAK
b2oAAApyAQcAcG9rAAAKb2wAAApvIwAACn0mAAAEAgIoaQAACm9qAAAKchsHAHBvawAACm9sAAAK
byMAAAp9JwAABAICKGkAAApvagAACnI7BwBwb2sAAApvbAAACm8jAAAKfSgAAAQCcl8HAHAoQwAA
BgsCeygAAARyZwAAcCgoAAAKObEAAAAHb0EAAAoonQEABnNCAAAKEwYRBm8dAAAKAnsmAAAEEQYH
AnslAAAEcw4AAAYTBxEHbw8AAAYsFBEHbxYAAAYmEQd7DAAABCi2AQAG3boCAAATCBEHewwAAAQo
tgEABgIoaQAACm9vAAAKFnJ/BwBwEQhvcAAACnKXBwBwEQhvcQAACihyAAAKfnMAAAoWb3QAAAom
AihpAAAKF291AAAK3WYCAAARBiwHEQZvJAAACtwCeyYAAARyewUAcCgoAAAKLC4CKHYAAAoTCRIJ
/hYkAAABbyMAAApymwcAcHKfBwBwb24AAApvdwAACn0mAAAEcqMHAHACeyQAAARy8wEAcChyAAAK
B3N4AAAKb3kAAAoMc3oAAAoIKAoAACsoCwAAKw0HAnsnAAAEc+8AAAYTBBEECSgMAAArbwYBAAYR
BAJ7JgAABG8EAQAGEQQCeyUAAARv/AAABhEEbw0BAAYCeyIAAAQfeR8xb20AAApy9wcAcCgoAAAK
LAgRBBdv+AAABgJ7IwAABB95HzFvbQAACnL3BwBwKCgAAAosCBEEF2/6AAAGCX4pAQAEJS0XJn4o
AQAE/gZmAgAGc3sAAAolgCkBAAQoDQAAK34qAQAEJS0XJn4oAQAE/gZnAgAGc30AAAolgCoBAAQo
DgAAKygEAAArKA8AACsTBREFEwoWEwsrGBEKEQuaEwwRBBEMEgBvDwEABhELF1gTCxELEQqOaTLg
EQRv9wAABjqDAAAAEQRv+QAABix6EQUTChYTCytpc2ICAAYTDRENEQoRC5p9JwEABAkRDf4GYwIA
BnN7AAAKKA0AACt+KwEABCUtFyZ+KAEABP4GaAIABnN9AAAKJYArAQAEKA4AACsoDwAAKxMOEQQR
DXsnAQAEEQ4SAG8ZAQAGEQsXWBMLEQsRCo5pMo8CKGkAAAoWb3UAAAreSxMPBii2AQAGAihpAAAK
b28AAAoWcn8HAHARD29wAAAKcpcHAHARD29xAAAKKHIAAAp+cwAAChZvdAAACiYCKGkAAAoXb3UA
AAreACoAAEFMAAAAAAAAbQEAACIAAACPAQAAVAAAABQAAAECAAAAUAEAAJMAAADjAQAADAAAAAAA
AAAAAAAAAgAAAPwDAAD+AwAASwAAABQAAAEbMAYAbgAAAAsAABECKGkAAApvfwAACgNvgAAACm+B
AAAKdUsAAAJvWgIABnURAAABCt5ECwIoaQAACm9vAAAKFnJ/BwBwB29wAAAKcpcHAHAHb3EAAAoo
cgAACn5zAAAKFm90AAAKJgIoaQAAChdvdQAACt4AFCoGKgAAARAAAAAAAAAoKABCFAAAAR4CKIIA
AAoqrn4pAAAELR5y+wcAcNAGAAACKDsAAApvgwAACnOEAAAKgCkAAAR+KQAABCoafioAAAQqHgKA
KgAABCoafisAAAQqHgIohQAACiouc0oAAAaAKwAABCoeAnssAAAEKiICA30sAAAEKh4Cey0AAAQq
IgIDfS0AAAQqHgJ7LgAABCoiAgN9LgAABCoeAnsvAAAEKiICA30vAAAEKh4CezAAAAQqIgIDfTAA
AAQqOgIoGwAACgIDKE8AAAYqAAAbMAMAsgAAAAwAABECKBsAAAoCBChNAAAGAgMoTwAABgIDbz4C
AAYCKEwAAAYoowEABihRAAAGAgIoWAAABihTAAAGAgIoTAAABiigAQAGKFUAAAYCKFQAAAYsYQIo
VAAABm+GAAAKCis6EgAohwAACgtzeAAABiUHb5gAAAZvZwAABiVziAAACm9rAAAGB2+YAAAGAihM
AAAGKKEBAAZvawAABhIAKIkAAAotvd4OEgD+FhYAABtvJAAACtwqAAABEAAAAgBcAEejAA4AAAAA
GzAFAKQEAAANAAARc4oAAAoKAihZAAAGCwctAhQqc4sAAAoMCAdvjAAACghybQgAcG+NAAAKb44A
AAoNOEwEAAAJb48AAAp0NAAAAXN4AAAGJXOIAAAKb2sAAAYlc5AAAApvbQAABiVziAAACm9zAAAG
JXOQAAAKb3UAAAYTBG+RAAAKb44AAAoTBThQAQAAEQVvjwAACnQvAAABEwYRBnKHCABwb5IAAAoT
BxEEEQdvkwAACm9nAAAGEQRzlQAABiURBnKRCABwb5IAAApvkwAACii0AQAGb4wAAAYlEQZylwgA
cG+SAAAKb5MAAAootAEABm+OAAAGJREGcp0IAHBvkgAACm+TAAAKKLQBAAZvkAAABiURBnKjCABw
b5IAAApvkwAACii0AQAGb5IAAAYlEQZyqQgAcG+SAAAKb5MAAAootAEABm+UAAAGb3EAAAYRBm+R
AAAKb44AAAoTCCtWEQhvjwAACnQvAAABEwkRCW+UAAAKLD8RBG9qAAAGc4YAAAYlEQlyuwgAcG+S
AAAKb5MAAApvfwAABiURCXLJCABwb5IAAApvkwAACm+BAAAGb5UAAAoRCG+WAAAKLaHeFREIdTEA
AAETChEKLAcRCm8kAAAK3AYRBG+XAAAKEQVvlgAACjqk/v//3hURBXUxAAABEwoRCiwHEQpvJAAA
CtwIctUIAHBvmAAACm+OAAAKEwUrVREFb48AAAp0LwAAASVyHwkAcG+SAAAKEwtyhwgAcG+SAAAK
EwwRBG9sAAAGc30AAAYlEQtvkwAACii0AQAGb3oAAAYlEQxvkwAACm98AAAGb5kAAAoRBW+WAAAK
LaLeFREFdTEAAAETChEKLAcRCm8kAAAK3AhyKwkAcG+YAAAKb44AAAoTBTjHAQAAEQVvjwAACnQv
AAABEw1zaQIABhMOEQ1yHwkAcG+SAAAKEw8RDhENcocIAHBvkgAACn0sAQAEEQ1yfQkAcG+SAAAK
b5MAAAootAEABjrkAAAAEQRvagAABhEO/gZqAgAGc5oAAAooEAAAKxMQERA5VAEAABEQEQ9vkwAA
Cii0AQAGb4UAAAYREHOQAAAKb4MAAAYRBG9yAAAGERBvlQAAChENb5EAAApvjgAAChMIK2IRCG+P
AAAKdC8AAAETEXNrAgAGExIREXKHCQBwb5IAAAomERIREXKHCABwb5IAAAp9LQEABBEEb2wAAAYR
Ev4GbAIABnObAAAKKBEAACsTExETLA4REG+CAAAGERNvmQAAChEIb5YAAAotld2nAAAAEQh1MQAA
ARMKEQosBxEKbyQAAArcEQ1vkQAACm+OAAAKEwgrYhEIb48AAAp0LwAAARMUc20CAAYTFREUcocJ
AHBvkgAACiYRFREUcocIAHBvkgAACn0uAQAEEQRvbAAABhEV/gZuAgAGc5sAAAooEQAAKxMWERYs
DhEEb3QAAAYRFm+ZAAAKEQhvlgAACi2V3hURCHUxAAABEwoRCiwHEQpvJAAACtwRBW+WAAAKOi3+
///eFREFdTEAAAETChEKLAcRCm8kAAAK3AlvlgAACjqp+///3hQJdTEAAAETChEKLAcRCm8kAAAK
3AYqQawAAAIAAABUAQAAYwAAALcBAAAVAAAAAAAAAAIAAAB/AAAAYwEAAOIBAAAVAAAAAAAAAAIA
AAAJAgAAYgAAAGsCAAAVAAAAAAAAAAIAAABFAwAAcgAAALcDAAAVAAAAAAAAAAIAAADaAwAAbwAA
AEkEAAAVAAAAAAAAAAIAAACSAgAA2gEAAGwEAAAVAAAAAAAAAAIAAAAwAAAAXgQAAI4EAAAUAAAA
AAAAABMwEgAgAwAADgAAEQIoTgAABm8+AgAGAihMAAAGKLABAAY5AwMAAHKjCQBwAihMAAAGKLAB
AAY57gIAAHKjCQBwAihMAAAGKLABAAYKBm9UAgAGCxgMOL4CAAB+MwEABC0sFh9T0AgAAAIoOwAA
CheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgDMBAAR+MwEABHueAAAKfjMBAAR+MgEABC02Fh8N
0AgAAAIoOwAAChiNWwAAASUWFxQoTQAACqIlFxYUKE0AAAqiKJ8AAAoooAAACoAyAQAEfjIBAAR7
oQAACn4yAQAEAihOAAAGbz4CAAZvJwAACn4xAQAELTAWcs8JAHAU0AgAAAIoOwAACheNWwAAASUW
FhQoTQAACqIoTgAACihSAAAKgDEBAAR+MQEABHtTAAAKfjEBAAR+MAEABC07FnLfCQBwFNAIAAAC
KDsAAAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgDABAAR+MAEABHujAAAK
fjABAATQIwAAAig7AAAKfi8BAAQtLxZyAQUAcNAIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKFEA
AAooUgAACoAvAQAEfi8BAAR7UwAACn4vAQAEBm9HAgAGCIxZAAABF4xZAAABb+sBAAZvVAAACm+k
AAAKb1QAAApvpQAACm+mAAAKOQEBAAB+NgEABC0kFtBPAAABKDsAAArQCAAAAig7AAAKKDwAAAoo
pwAACoA2AQAEfjYBAAR7qAAACn42AQAEfjUBAAQtOxZy3wkAcBTQCAAAAig7AAAKGI1bAAABJRYf
IRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoA1AQAEfjUBAAR7owAACn41AQAE0CMAAAIoOwAA
Cn40AQAELS8WcgEFAHDQCAAAAig7AAAKF41bAAABJRYWFChNAAAKoihRAAAKKFIAAAqANAEABH40
AQAEe1MAAAp+NAEABAZvRwIABgiMWQAAARiMWQAAAW/rAQAGb1QAAApvpAAACm+pAAAKKggXWAwI
B28DAgAGb+kBAAY+Mf3//xQqGzAFAOMAAAAPAAARfjcBAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAA
Cig8AAAKKD0AAAqANwEABH43AQAEez4AAAp+NwEABAIoUAAABm9HAgAGBIxZAAABA29wAAAGb48A
AAaMWQAAAW/rAQAGbz8AAAoKfjgBAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAACig8AAAKKD0AAAqA
OAEABH44AQAEez4AAAp+OAEABAIoUAAABm9HAgAGBIxZAAABA29wAAAGb5EAAAaMWQAAAW/rAQAG
bz8AAAoLAihQAAAGBgdvUAIABgzeBSYUDN4ACCoAARAAAAAAAADc3AAFFAAAARMwDgBRBQAAEAAA
EQNv6wAABi0BKgNv6wAABm9mAAAGAihMAAAGKLABAAYKA2/pAAAGAihMAAAGKLABAAYLA2/rAAAG
b2oAAAZ+QgEABCUtFyZ+QQEABP4GcwIABnOaAAAKJYBCAQAEKBIAACtyewUAcH5DAQAEJS0XJn5B
AQAE/gZ0AgAGc6oAAAolgEMBAAQoEwAAKxeNVAAAASUWHyydb6wAAAoMBjmvBAAABzmpBAAAB29U
AgAGb+IBAAZv6QEABg0HAihMAAAGKKoBAAZy8wkAcHOtAAAKEwQDb+sAAAYRBG9vAAAGCBeNVAAA
ASUWHyydbzoAAAoTBxYTCCs3EQcRCJoTCREEb64AAAoRCXOvAAAKJQYRCSimAQAGEwoSCiiwAAAK
b7EAAApvsgAAChEIF1gTCBEIEQeOaTLBBm9UAgAGbwMCAAZv6QEABhMFBm9UAgAGb+IBAAZv6QEA
BiYYEws4gwEAAHOzAAAKEwwWEw04OgEAAH47AQAELT4gAAEAAHL/CQBwFNAIAAACKDsAAAoYjVsA
AAElFhcUKE0AAAqiJRcWFChNAAAKoihOAAAKKLQAAAqAOwEABH47AQAEe7UAAAp+OwEABBEMfjoB
AAQtOxZy3wkAcBTQCAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAA
CoA6AQAEfjoBAAR7owAACn46AQAE0CMAAAIoOwAACn45AQAELS8WcgEFAHDQCAAAAig7AAAKF41b
AAABJRYWFChNAAAKoihRAAAKKFIAAAqAOQEABH45AQAEe1MAAAp+OQEABAZvRwIABhELjFkAAAER
BG+uAAAKEQ1vtgAACm+3AAAKKLQBAAaMWQAAAW/rAQAGb1QAAApvpAAACm+4AAAKEQ0XWBMNEQ0R
BG+uAAAKb7kAAAo/s/7//wNv6wAABm9uAAAGb7oAAAoRDG+7AAAKEw4RDm+8AAAKJhELF1gTCxEL
EQU+dP7//xgTBhYTDzgqAgAAFxMQOA4CAABzbwIABhMRBxEGERAoqQEABjryAQAAERF+PgEABC0k
FtBPAAABKDsAAArQCAAAAig7AAAKKDwAAAoopwAACoA+AQAEfj4BAAR7qAAACn4+AQAEfj0BAAQt
OxZy3wkAcBTQCAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoA9
AQAEfj0BAAR7owAACn49AQAE0CMAAAIoOwAACn48AQAELS8WcgEFAHDQCAAAAig7AAAKF41bAAAB
JRYWFChNAAAKoihRAAAKKFIAAAqAPAEABH48AQAEe1MAAAp+PAEABAdvRwIABheMWQAAAREQjFkA
AAFv6wEABm9UAAAKb6QAAApvqQAACn1AAQAEA2/rAAAGb2oAAAYREf4GcAIABnOaAAAKKBIAACt+
RAEABCUtFyZ+QQEABP4GdQIABnO9AAAKJYBEAQAEKBQAACsoFQAAKxMSERIoJgAACjqWAAAAfj8B
AAQtORZyAQUAcNAIAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcXFChNAAAKoihjAAAKKGQAAAqA
PwEABH4/AQAEe2UAAAp+PwEABAIoTgAABm9HAgAGEQaMWQAAAREQjFkAAAFv6wEABgNv6wAABm9u
AAAGb7oAAAoRD2++AAAKERJvvwAACii1AQAGb2YAAAomERAXWBMQERAJPur9//8RBhdYEwYRDxdY
Ew8RDwNv6wAABm9uAAAGb7oAAApvuQAACj+6/f//ByioAQAGLAwHAihMAAAGKKQBAAYqAAAAGzAF
ANAAAAAPAAARflMBAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAACig8AAAKKD0AAAqAUwEABH5TAQAE
ez4AAAp+UwEABAIoUAAABm9HAgAGBIxZAAABBYxZAAABb+sBAAZvPwAACgp+VAEABC0kFtAuAAAC
KDsAAArQCAAAAig7AAAKKDwAAAooPQAACoBUAQAEflQBAAR7PgAACn5UAQAEAihQAAAGb0cCAAYE
jFkAAAEOBIxZAAABb+sBAAZvPwAACgsCKFAAAAYGB29QAgAGDN4FJhQM3gAIKgEQAAAAAAAAyckA
BRQAAAEbMBAAbhYAABEAABECKFIAAAYtASoXCgIoUgAABhZvwAAACgIoUgAABhZvwAAACm9wAAAG
b4sAAAYXWG93AAAGFgs4IRYAAAIoUgAABgdvwAAACgwIb2YAAAYCKEwAAAYosAEABg0Ib2oAAAZ+
RQEABCUtFyZ+QQEABP4GdgIABnOaAAAKJYBFAQAEKBIAACtyewUAcH5GAQAEJS0XJn5BAQAE/gZ3
AgAGc6oAAAolgEYBAAQoEwAAKxeNVAAAASUWHyydb6wAAAoTBAk5FAIAAHLzCQBwBoxZAAABKMEA
AApzrQAAChMICBEIb28AAAYRBBeNVAAAASUWHyydbzoAAAoTCRYTCis3EQkRCpoTCxEIb64AAAoR
C3OvAAAKJQkRCyimAQAGEwwSDCiwAAAKb7EAAApvsgAAChEKF1gTChEKEQmOaTLBGBMNOH4BAABz
swAAChMOFhMPODoBAAB+VwEABC0+IAABAABy/wkAcBTQCAAAAig7AAAKGI1bAAABJRYXFChNAAAK
oiUXFhQoTQAACqIoTgAACii0AAAKgFcBAAR+VwEABHu1AAAKflcBAAQRDn5WAQAELTsWct8JAHAU
0AgAAAIoOwAAChiNWwAAASUWHyEUKE0AAAqiJRcWFChNAAAKoihOAAAKKKIAAAqAVgEABH5WAQAE
e6MAAAp+VgEABNAjAAACKDsAAAp+VQEABC0vFnIBBQBw0AgAAAIoOwAACheNWwAAASUWFhQoTQAA
CqIoUQAACihSAAAKgFUBAAR+VQEABHtTAAAKflUBAAQJb0cCAAYRDYxZAAABEQhvrgAAChEPb7YA
AApvtwAACii0AQAGjFkAAAFv6wEABm9UAAAKb6QAAApvuAAAChEPF1gTDxEPEQhvrgAACm+5AAAK
P7P+//8Ib24AAAZvugAAChEOb7sAAAoTEBEQb7wAAAomEQ0XWBMNEQ0Jb1QCAAZvAwIABm/pAQAG
Pmv+//8Ib3IAAAZ+RwEABCUtFyZ+QQEABP4GeAIABnOaAAAKJYBHAQAEKBIAACtyewUAcH5IAQAE
JS0XJn5BAQAE/gZ5AgAGc6oAAAolgEgBAAQoEwAAKxeNVAAAASUWHyydb6wAAAoTBRYTBgcsWwIo
UgAABgcXWW/AAAAKLEsIb3AAAAZviwAABgIoUgAABgcXWW/AAAAKb3AAAAZvjQAABlkTBgglb3YA
AAYCKFIAAAYHF1lvwAAACm92AAAGEQZYF1hYb3cAAAYCCChjAAAGAggIb3AAAAZviwAABhdYKFoA
AAYTBwIoTgAABgIoUAAABgIoTAAABiilAQAGEQUoJgAACjl7AwAAFhMROFcDAAB+WAEABC0kFtAu
AAACKDsAAArQCAAAAig7AAAKKDwAAAooPQAACoBYAQAEflgBAAR7PgAACn5YAQAEAihOAAAGb1IC
AAYIb3YAAAYXWIxZAAABfi0AAApv6wEABm8/AAAKIOfv//+MPgAAAhaMPQAAAm/3AQAGJhEHfi0A
AApv5gEABiZ+WQEABC0kFtAuAAACKDsAAArQCAAAAig7AAAKKDwAAAooPQAACoBZAQAEflkBAAR7
PgAACn5ZAQAEAihOAAAGb0cCAAYIb3YAAAaMWQAAAQhvcAAABm+PAAAGjFkAAAFv6wEABm8/AAAK
ExICKE4AAAYREn4tAAAKb0wCAAYIb3AAAAZvjwAABhMTOAgCAABzhAIABhMUERR+XAEABC0kFtBP
AAABKDsAAArQCAAAAig7AAAKKDwAAAoopwAACoBcAQAEflwBAAR7qAAACn5cAQAEflsBAAQtOxZy
3wkAcBTQCAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoBbAQAE
flsBAAR7owAACn5bAQAE0CMAAAIoOwAACn5aAQAELS8WcgEFAHDQCAAAAig7AAAKF41bAAABJRYW
FChNAAAKoihRAAAKKFIAAAqAWgEABH5aAQAEe1MAAAp+WgEABAIoUAAABm9HAgAGCG9wAAAGb4sA
AAaMWQAAARETjFkAAAFv6wEABm9UAAAKb6QAAApvqQAACn13AQAECG9qAAAGERT+BoUCAAZzmgAA
CigSAAArfkkBAAQlLRcmfkEBAAT+BnoCAAZzvQAACiWASQEABCgUAAArKBUAACsTFREVKCYAAAo6
lQAAAH5dAQAELTkWcgEFAHDQCAAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIoYwAA
CihkAAAKgF0BAAR+XQEABHtlAAAKfl0BAAQCKE4AAAZvRwIABghvdgAABoxZAAABEROMWQAAAW/r
AQAGCG9uAAAGb7oAAAoREW++AAAKERVvvwAACii1AQAGb2YAAAomERMXWBMTERMIb3AAAAZvkQAA
Bj7m/f//CG9wAAAGCG92AAAGb5QAAAYIJW92AAAGEwoRChdYb3cAAAYRERdYExEREQhvbgAABm+6
AAAKb7kAAAo/kvz//zhjCgAAAghvbgAABhEFKGAAAAYIb3YAAAYTFhQTF2+6AAAKb8IAAAoTGDi3
CQAAERhvjwAACnQyAAABExkCCAhvcAAABm+LAAAGF1gIb3AAAAZvjwAABghvcAAABm+PAAAGERlv
wwAACigWAAArWChcAAAGExoCCAhvcAAABm+LAAAGF1gIb3AAAAZvjwAABhEZb8MAAAooFgAAK1gI
b3AAAAZvkQAABihcAAAGEwcCCG9uAAAGERkRBREEKGEAAAYTGwgRFm93AAAGFhMdOC0EAAARGn4t
AAAKb+YBAAYmfl4BAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAACig8AAAKKD0AAAqAXgEABH5eAQAE
ez4AAAp+XgEABAIoTgAABm9HAgAGCG92AAAGjFkAAAEIb3AAAAZvjwAABoxZAAABb+sBAAZvPwAA
ChMXAihOAAAGERd+LQAACm9MAgAGFhMeOJwAAAARGW/DAAAKER6abyMAAAoTH35fAQAELTkWcgEF
AHDQCAAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXFxQoTQAACqIoYwAACihkAAAKgF8BAAR+XwEA
BHtlAAAKfl8BAAQCKE4AAAZvRwIABghvdgAABoxZAAABCG9wAAAGb48AAAYRHliMWQAAAW/rAQAG
ER9vZgAACiYRHhdYEx4RHhEZb8MAAAooFgAAKz9R////EQd+LQAACm/mAQAGJn5gAQAELSQW0C4A
AAIoOwAACtAIAAACKDsAAAooPAAACig9AAAKgGABAAR+YAEABHs+AAAKfmABAAQCKE4AAAZvRwIA
BghvdgAABoxZAAABCG9wAAAGb48AAAYRGW/DAAAKKBYAACtYjFkAAAFv6wEABm8/AAAKExcCKE4A
AAYRF34tAAAKb0wCAAYIb3AAAAZvjwAABhMgOBcCAABzhgIABhMhESF+YwEABC0kFtBPAAABKDsA
AArQCAAAAig7AAAKKDwAAAoopwAACoBjAQAEfmMBAAR7qAAACn5jAQAEfmIBAAQtOxZy3wkAcBTQ
CAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoBiAQAEfmIBAAR7
owAACn5iAQAE0CMAAAIoOwAACn5hAQAELS8WcgEFAHDQCAAAAig7AAAKF41bAAABJRYWFChNAAAK
oihRAAAKKFIAAAqAYQEABH5hAQAEe1MAAAp+YQEABAIoTgAABm9HAgAGCG9wAAAGb4sAAAaMWQAA
AREgjFkAAAFv6wEABm9UAAAKb6QAAApvqQAACn14AQAECG9qAAAGESH+BocCAAZzmgAACigSAAAr
fkoBAAQlLRcmfkEBAAT+BnsCAAZzvQAACiWASgEABCgUAAArKBUAACsTIhEiKCYAAAo6pAAAABEb
b64AAAoRIm/FAAAKOZEAAAB+ZAEABC05FnIBBQBw0AgAAAIoOwAAChiNWwAAASUWFhQoTQAACqIl
FxcUKE0AAAqiKGMAAAooZAAACoBkAQAEfmQBAAR7ZQAACn5kAQAEAihOAAAGb0cCAAYIb3YAAAaM
WQAAAREgjFkAAAFv6wEABhEbb7oAAAoRHW++AAAKESJvvwAACii1AQAGb2YAAAomESAXWBMgESAI
b3AAAAZvkQAABj7X/f//CCVvdgAABhMKEQoXWG93AAAGER0XWBMdER0RG2+6AAAKb7kAAAo/wPv/
/3OQAAAKExwIb3IAAAZvxgAAChMjKzsSIyjHAAAKEyQRHBEkb4IAAAZ+SwEABCUtFyZ+QQEABP4G
fAIABnPIAAAKJYBLAQAEKBcAACtvygAAChIjKMsAAAotvN4OEiP+FigAABtvJAAACtwRHG/MAAAK
JhEcfkwBAAQlLRcmfkEBAAT+Bn0CAAZzyAAACiWATAEABCgXAAArb80AAAoTJTgNBAAAESVvzgAA
ChMmAggRJm95AAAGKFoAAAZ+ZQEABC0kFtAuAAACKDsAAArQCAAAAig7AAAKKDwAAAooPQAACoBl
AQAEfmUBAAR7PgAACn5lAQAEAihOAAAGb1ICAAYIb3YAAAYXWIxZAAABfi0AAApv6wEABm8/AAAK
IOfv//+MPgAAAhaMPQAAAm/3AQAGJiV+LQAACm/mAQAGJn5mAQAELSQW0C4AAAIoOwAACtAIAAAC
KDsAAAooPAAACig9AAAKgGYBAAR+ZgEABHs+AAAKfmYBAAQCKE4AAAZvRwIABghvdgAABoxZAAAB
CG9wAAAGb48AAAaMWQAAAW/rAQAGbz8AAAoTJwIoTgAABhEnfi0AAApvTAIABm/bAQAGb/wBAAYT
KDivAgAAEShvjwAACnQuAAACEyl+agEABC0sFh9T0AgAAAIoOwAACheNWwAAASUWFhQoTQAACqIo
nAAACiidAAAKgGoBAAR+agEABHueAAAKfmoBAAR+aQEABC0sFh8i0AgAAAIoOwAACheNWwAAASUW
FhQoTQAACqIonAAACihSAAAKgGkBAAR+aQEABHtTAAAKfmkBAAR+aAEABC07FnIHCgBwFNAIAAAC
KDsAAAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgGgBAAR+aAEABHujAAAK
fmgBAATQTwAAASg7AAAKfmcBAAQtOxZy3wkAcBTQCAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIl
FxYUKE0AAAqiKE4AAAooogAACoBnAQAEfmcBAAR7owAACn5nAQAE0CMAAAIoOwAAChEpbw0CAAZv
pAAACm+kAAAKb1QAAApvpgAACjlHAQAAfmwBAAQtJBbQTwAAASg7AAAK0AgAAAIoOwAACig8AAAK
KKcAAAqAbAEABH5sAQAEe6gAAAp+bAEABH5rAQAELTAWciMKAHAU0AgAAAIoOwAACheNWwAAASUW
FhQoTQAACqIoTgAACihSAAAKgGsBAAR+awEABHtTAAAKfmsBAAQRKW8NAgAGb1QAAApvqQAACiVz
lQAABiURFm+QAAAGJREWERtvugAACm+5AAAKWBdZb5IAAAYoogEABhMqcjUKAHBvzwAACix+fm0B
AAQtORZyAQUAcNAIAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcXFChNAAAKoihjAAAKKGQAAAqA
bQEABH5tAQAEe2UAAAp+bQEABAIoTgAABm9HAgAGCG92AAAGjFkAAAERKW/gAQAGjFkAAAFv6wEA
BhEqb2YAAAomEShvlgAACjpF/f//3hURKHUxAAABEysRKywHEStvJAAACtwIJW92AAAGEwoRChdY
b3cAAAYRJW+WAAAKOuf7///eDBElLAcRJW8kAAAK3AhvdgAABhMWERhvlgAACjo99v//3hURGHUx
AAABEysRKywHEStvJAAACtwIb3IAAAZv0AAAChYxQAIoTgAABghvcgAABhZv0QAACm9+AAAGCG9w
AAAGKKcBAAYTLAIIb3AAAAZviwAABhdYCG92AAAGESwIKF4AAAYIb3AAAAYIb3YAAAZvlAAABghv
dAAABn5NAQAEJS0XJn5BAQAE/gZ+AgAGc8gAAAolgE0BAAQoFwAAK2/NAAAKEyU4QAQAABElb84A
AAoTLQIIES1veQAABihaAAAGfm4BAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAACig8AAAKKD0AAAqA
bgEABH5uAQAEez4AAAp+bgEABAIoTgAABm9SAgAGCG92AAAGF1iMWQAAAX4tAAAKb+sBAAZvPwAA
CiDn7///jD4AAAIWjD0AAAJv9wEABiYlfi0AAApv5gEABiZ+bwEABC0kFtAuAAACKDsAAArQCAAA
Aig7AAAKKDwAAAooPQAACoBvAQAEfm8BAAR7PgAACn5vAQAEAihOAAAGb0cCAAYIb3YAAAaMWQAA
AQhvcAAABm+PAAAGjFkAAAFv6wEABm8/AAAKEy4CKE4AAAYRLn4tAAAKb0wCAAYRLiD47///INLv
//8WjFoAAAEWjFoAAAFvEAIABiZv2wEABm/8AQAGExg4sQIAABEYb48AAAp0LgAAAhMvfnMBAAQt
LBYfU9AIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKJwAAAoonQAACoBzAQAEfnMBAAR7ngAACn5z
AQAEfnIBAAQtLBYfItAIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKJwAAAooUgAACoByAQAEfnIB
AAR7UwAACn5yAQAEfnEBAAQtOxZyBwoAcBTQCAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYU
KE0AAAqiKE4AAAooogAACoBxAQAEfnEBAAR7owAACn5xAQAE0E8AAAEoOwAACn5wAQAELTsWct8J
AHAU0AgAAAIoOwAAChiNWwAAASUWHyEUKE0AAAqiJRcWFChNAAAKoihOAAAKKKIAAAqAcAEABH5w
AQAEe6MAAAp+cAEABNAjAAACKDsAAAoRL28NAgAGb6QAAApvpAAACm9UAAAKb6YAAAo5SQEAAH51
AQAELSQW0E8AAAEoOwAACtAIAAACKDsAAAooPAAACiinAAAKgHUBAAR+dQEABHuoAAAKfnUBAAR+
dAEABC0wFnIjCgBwFNAIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoB0AQAEfnQB
AAR7UwAACn50AQAEES9vDQIABm9UAAAKb6kAAAolc5UAAAYlCG9wAAAGb4sAAAYXWG+QAAAGJQhv
dgAABhdZb5IAAAYoogEABhMwcjUKAHBvzwAACix+fnYBAAQtORZyAQUAcNAIAAACKDsAAAoYjVsA
AAElFhYUKE0AAAqiJRcXFChNAAAKoihjAAAKKGQAAAqAdgEABH52AQAEe2UAAAp+dgEABAIoTgAA
Bm9HAgAGCG92AAAGjFkAAAERL2/gAQAGjFkAAAFv6wEABhEwb2YAAAomERhvlgAACjpD/f//3hUR
GHUxAAABEysRKywHEStvJAAACtwIJW92AAAGEwoRChdYb3cAAAYIb3AAAAYlb5MAAAYXWG+UAAAG
ESVvlgAACjq0+///3gwRJSwHESVvJAAACtwCCChkAAAGBhdYCgcXWAsHAihSAAAGb9IAAAo/zun/
/yoAAEGUAAACAAAAfAwAAEgAAADEDAAADgAAAAAAAAACAAAAMA4AAMICAADyEAAAFQAAAAAAAAAC
AAAABw0AACAEAAAnEQAADAAAAAAAAAACAAAAfwcAAMoJAABJEQAAFQAAAAAAAAACAAAANRMAAMQC
AAD5FQAAFQAAAAAAAAACAAAA7hEAAFMEAABBFgAADAAAAAAAAAATMA8AfAUAABIAABEFOXUFAABz
iAIABgpz0wAACgsDDDgnAQAABxID/hUMAAACEgMIKIgAAAYSA357AQAELSQW0E8AAAEoOwAACtAI
AAACKDsAAAooPAAACiinAAAKgHsBAAR+ewEABHuoAAAKfnsBAAR+egEABC07FnLfCQBwFNAIAAAC
KDsAAAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgHoBAAR+egEABHujAAAK
fnoBAATQIwAAAig7AAAKfnkBAAQtLxZyAQUAcNAIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKFEA
AAooUgAACoB5AQAEfnkBAAR7UwAACn55AQAEAihOAAAGb0cCAAYIjFkAAAEFjFkAAAFv6wEABm9U
AAAKb6QAAApvqQAACiiKAAAGCW/UAAAKCBdYDAgEPtL+//8Gc7MAAAp9ggEABAZ7ggEABAd+TgEA
BCUtFyZ+QQEABP4GfwIABnPVAAAKJYBOAQAEKBgAACsoBAAAK35PAQAEJS0XJn5BAQAE/gaAAgAG
c9YAAAolgE8BAAQoGQAAKygFAAArb9cAAApziQIABhMEEQQGfYQBAAQRBBZ9gwEABDiSAwAABxEE
/gaKAgAGc9gAAAooGgAAK35QAQAEJS0XJn5BAQAE/gaBAgAGc9kAAAolgFABAAQoGwAAKyjaAAAK
EwUHEQT+BosCAAZz2AAACigaAAArflEBAAQlLRcmfkEBAAT+BoICAAZz2QAACiWAUQEABCgbAAAr
KNsAAAoTBn5+AQAELTQgAAEAAHI5CgBwFNAIAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAoo
3AAACoB+AQAEfn4BAAR73QAACn5+AQAEfn0BAAQtPhbQCAAAAig7AAAKGY1bAAABJRYWFChNAAAK
oiUXFhQoTQAACqIlGBYUKE0AAAqiKN4AAAoo3wAACoB9AQAEfn0BAAR74AAACn59AQAEfnwBAAQt
MB9AckUKAHDQCAAAAig7AAAKF41bAAABJRYXFChNAAAKoihRAAAKKOEAAAqAfAEABH58AQAEe+IA
AAp+fAEABAIoTgAABm/jAAAKAihOAAAGb0cCAAYRBYxZAAABBYxZAAABb+sBAAYCKE4AAAZvRwIA
BhEGjFkAAAEFjFkAAAFv6wEABm/kAAAKb+UAAAp+gQEABC0kFtAuAAACKDsAAArQCAAAAig7AAAK
KDwAAAooPQAACoCBAQAEfoEBAAR7PgAACn6BAQAEfoABAAQtPhbQCAAAAig7AAAKGY1bAAABJRYW
FChNAAAKoiUXFhQoTQAACqIlGBYUKE0AAAqiKN4AAAoo3wAACoCAAQAEfoABAAR74AAACn6AAQAE
fn8BAAQtMB9AckUKAHDQCAAAAig7AAAKF41bAAABJRYXFChNAAAKoihRAAAKKOEAAAqAfwEABH5/
AQAEe+IAAAp+fwEABAIoTgAABm/jAAAKAihOAAAGb0cCAAYRBYxZAAABBYxZAAABb+sBAAYCKE4A
AAZvRwIABhEGjFkAAAEFjFkAAAFv6wEABm/kAAAKbz8AAAoTBxEHb+kBAAYXO50AAAAXEwgrdwUC
KE4AAAYOBG9yAAAGEQhv0QAACm9+AAAGDgRvcAAABiinAQAGMxURBREHb+kBAAZYEwURBgQRBllY
EwYCKE4AAAYOBG9yAAAGEQhv0QAACm9+AAAGDgRvcAAABiinAQAGEAMCEQURBgUOBCheAAAGEQgX
WBMIEQgOBG9yAAAGb9AAAAo/dv///w4Eb3AAAAZvjwAABhADEQR7gwEABBMJEQQRCRdYfYMBAAQR
BHuDAQAEEQR7hAEABHuCAQAEb+YAAAo/Ufz//yobMA4AqAEAABMAABEOBW9yAAAGOZYBAAAWCjh9
AQAAfogBAAQtJBbQLgAAAig7AAAK0AgAAAIoOwAACig8AAAKKD0AAAqAiAEABH6IAQAEez4AAAp+
iAEABH6HAQAELTAWcjkKAHAU0AgAAAIoOwAACheNWwAAASUWFhQoTQAACqIoTgAACihSAAAKgIcB
AAR+hwEABHtTAAAKfocBAAR+hgEABC0+FtAIAAACKDsAAAoZjVsAAAElFhYUKE0AAAqiJRcWFChN
AAAKoiUYFhQoTQAACqIo3gAACijfAAAKgIYBAAR+hgEABHvgAAAKfoYBAAR+hQEABC0wH0ByRQoA
cNAIAAACKDsAAAoXjVsAAAElFhcUKE0AAAqiKFEAAAoo4QAACoCFAQAEfoUBAAR74gAACn6FAQAE
AihOAAAGb+MAAAoCKE4AAAZvRwIABgOMWQAAAQSMWQAAAW/rAQAGAihOAAAGb0cCAAYFjFkAAAEO
BIxZAAABb+sBAAZv5AAACm9UAAAKbz8AAAomBBdYEAIOBBdYEAQGF1gKBg4Fb3IAAAZv0AAACj9x
/v//3gMm3gAqQRwAAAAAAAAAAAAApAEAAKQBAAADAAAAFAAAARMwBQAxAAAAFAAAEQQoJgAACiwC
AyoEF41UAAABJRYfLJ1vOgAACgoDc+cAAAolBG/oAAAKFwZv6QAACioAAAAbMAgAyQEAABUAABEF
KCYAAAosCAMTBN22AQAABSgmAAAKOogAAABzjAIABhMFEQUFF41UAAABJRYfLJ1vOgAACigFAAAr
fYkBAAQOBBeNVAAAASUWHyydbzoAAAooBQAAKxEF/gaNAgAGc9YAAAooGQAAK3J7BQBwflIBAAQl
LRcmfkEBAAT+BoMCAAZz6gAACiWAUgEABCgcAAArF41UAAABJRYfLJ1vrAAAChAEBReNVAAAASUW
HyydbzoAAApyewUAcAoWCxMGFhMHK0cRBhEHmhMIHI0OAAABJRYGoiUXclEKAHCiJRgRCKIlGXJV
CgBwoiUaB4xZAAABoiUbcl8KAHCiKOsAAAoKBxdYCxEHF1gTBxEHEQaOaTKxBnJvCgBwKOwAAApv
rAAACgRvwwAACijtAAAKCgMGb+4AAAoMc+8AAAoNFhMJKyQJb64AAAoDb64AAAoRCW+2AAAKb/AA
AApv8QAACiYRCRdYEwkRCQNvrgAACm+5AAAKMs0IEwoWEwcrFREKEQeaEwsJEQtv8gAAChEHF1gT
BxEHEQqOaTLjCXPnAAAKcnkKAHAWDgQXjVQAAAElFh8snW86AAAKb/MAAAoTBN4GJhQTBN4AEQQq
AAAAQRwAAAAAAAAAAAAAwAEAAMABAAAGAAAAFAAAARMwBQAmAQAAFgAAEQM5HwEAAANvcAAABm+T
AAAGA29wAAAGb4sAAAY+BAEAAH6LAQAELSQW0C4AAAIoOwAACtAIAAACKDsAAAooPAAACig9AAAK
gIsBAAR+iwEABHs+AAAKfosBAAQCKE4AAAZvRwIABgNvcAAABm+LAAAGGFiMWQAAAQNvcAAABm+R
AAAGjFkAAAFv6wEABm8/AAAKCn6MAQAELSQW0C4AAAIoOwAACtAIAAACKDsAAAooPAAACig9AAAK
gIwBAAR+jAEABHs+AAAKfowBAAQCKE4AAAZvRwIABgNvcAAABm+TAAAGjFkAAAEDb3AAAAZvkQAA
BoxZAAABb+sBAAZvPwAACgsCKE4AAAYGB29QAgAGb+8BAAYgvu///4w6AAACb+0BAAYmKgAAEzAF
ABwBAAAWAAARAzkVAQAAA29sAAAGb8wAAAoXPgQBAAB+jQEABC0kFtAuAAACKDsAAArQCAAAAig7
AAAKKDwAAAooPQAACoCNAQAEfo0BAAR7PgAACn6NAQAEAihOAAAGb0cCAAYDb3YAAAaMWQAAAQNv
cAAABm+RAAAGjFkAAAFv6wEABm8/AAAKCn6OAQAELSQW0C4AAAIoOwAACtAIAAACKDsAAAooPAAA
Cig9AAAKgI4BAAR+jgEABHs+AAAKfo4BAAQCKE4AAAZvRwIABgNvdgAABgNvbAAABm/MAAAKWIxZ
AAABA29wAAAGb5EAAAaMWQAAAW/rAQAGbz8AAAoLAihOAAAGBgdvUAIABm/vAQAGIL7v//+MOgAA
Am/tAQAGJiobMAQAYQEAABcAABECKFkAAAYKBjlTAQAAc4sAAAoLBwZvjAAACgdyiwoAcG+YAAAK
b44AAAoMOAMBAAAIb48AAAp0NAAAAQ0Jb/QAAAo57AAAAHOVAAAGJQlv9AAACnKpCABwb/UAAApv
kwAACii0AQAGb5QAAAYlCW/0AAAKcpEIAHBv9QAACm+TAAAKKLQBAAZvjAAABiUJb/QAAApynQgA
cG/1AAAKb5MAAAootAEABm+QAAAGJQlv9AAACnKjCABwb/UAAApvkwAACii0AQAGb5IAAAYTBANv
cAAABm+LAAAGEQRviwAABjNRA29wAAAGb48AAAYRBG+PAAAGMz0Db3AAAAZvkQAABhEEb5EAAAYz
KQlv9AAACnKpCABwb/UAAAoDb3AAAAZvkwAABhMFEgUosAAACm/2AAAKCG+WAAAKOvL+///eFAh1
MQAAARMGEQYsBxEGbyQAAArcAgdv9wAACihlAAAGKgAAAEEcAAACAAAAKwAAABUBAABAAQAAFAAA
AAAAAAATMBIAiAIAAA4AABECKE4AAAZvPgIABgIoTAAABiiwAQAGOWwCAAByowkAcAIoTAAABiiw
AQAGOVcCAAByowkAcAIoTAAABiiwAQAGCgZvVAIABgsYDDgnAgAAfpMBAAQtLBYfU9AIAAACKDsA
AAoXjVsAAAElFhYUKE0AAAqiKJwAAAoonQAACoCTAQAEfpMBAAR7ngAACn6TAQAEfpIBAAQtNhYf
DdAIAAACKDsAAAoYjVsAAAElFhcUKE0AAAqiJRcWFChNAAAKoiifAAAKKKAAAAqAkgEABH6SAQAE
e6EAAAp+kgEABAIoTgAABm8+AgAGbycAAAp+kQEABC0wFnLPCQBwFNAIAAACKDsAAAoXjVsAAAEl
FhYUKE0AAAqiKE4AAAooUgAACoCRAQAEfpEBAAR7UwAACn6RAQAEfpABAAQtOxZy3wkAcBTQCAAA
Aig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoCQAQAEfpABAAR7owAA
Cn6QAQAE0CMAAAIoOwAACn6PAQAELS8WcgEFAHDQCAAAAig7AAAKF41bAAABJRYWFChNAAAKoihR
AAAKKFIAAAqAjwEABH6PAQAEe1MAAAp+jwEABAZvRwIABgiMWQAAAReMWQAAAW/rAQAGb1QAAApv
pAAACm9UAAAKb6UAAApvpgAACixtfpQBAAQtORZyAQUAcNAIAAACKDsAAAoYjVsAAAElFhYUKE0A
AAqiJRcXFChNAAAKoihjAAAKKGQAAAqAlAEABH6UAQAEe2UAAAp+lAEABAZvRwIABgiMWQAAARiM
WQAAAW/rAQAGA29mAAAKJggXWAwIB28DAgAGb+kBAAY+yP3//yoeAnsxAAAEKiICA30xAAAEKh4C
ezIAAAQqIgIDfTIAAAQqHgJ7MwAABCoiAgN9MwAABCoeAns0AAAEKiICA300AAAEKh4CezUAAAQq
IgIDfTUAAAQqHgJ7NgAABCoiAgN9NgAABCoeAns3AAAEKiICA303AAAEKh4CezgAAAQqIgIDfTgA
AAQqHgJ7OQAABCoiAgN9OQAABCoeAns6AAAEKiICA306AAAEKh4CezsAAAQqIgIDfTsAAAQqHgJ7
PAAABCoiAgN9PAAABCoeAns9AAAEKiICA309AAAEKh4Cez4AAAQqIgIDfT4AAAQqHgJ7PwAABCoi
AgN9PwAABCoeAntAAAAEKiICA31AAAAEKh4Ce0EAAAQqIgIDfUEAAAQqHgJ7QgAABCoiAgN9QgAA
BCoeAntDAAAEKiICA31DAAAEKh4Ce0QAAAQqIgIDfUQAAAQqHgJ7RQAABCoiAgN9RQAABCoeAntG
AAAEKiICA31GAAAEKh4Ce0cAAAQqIgIDfUcAAAQqHgJ7SAAABCoiAgN9SAAABCoeAntJAAAEKiIC
A31JAAAEKh4Ce0oAAAQqIgIDfUoAAAQqHgJ7SwAABCoiAgN9SwAABCoeAntMAAAEKiICA31MAAAE
Kh4Ce00AAAQqIgIDfU0AAAQqHgJ7TgAABCoiAgN9TgAABCoeAntPAAAEKiICA31PAAAEKh4Ce1AA
AAQqIgIDfVAAAAQqHgJ7UQAABCoiAgN9UQAABCoeAntSAAAEKiICA31SAAAEKh4Ce1MAAAQqIgID
fVMAAAQqHgJ7VAAABCoiAgN9VAAABCoeAntVAAAEKiICA31VAAAEKh4Ce1YAAAQqIgIDfVYAAAQq
HgJ7VwAABCoiAgN9VwAABCoeAntZAAAEKiICA31ZAAAEKh4Ce1oAAAQqIgIDfVoAAAQqSgIoGwAA
CgIongEABn1bAAAEKs4CKBsAAAoCBX1cAAAEAiieAQAGfVsAAAQCBCi5AAAGAgMotwAABgICKMAA
AAZ9WAAABCobMA8A2wkAABgAABFyuwQAcAIouAAABiiwAQAGCgY5tgkAABgLOJkJAAB+lwEABC0k
FtBPAAABKDsAAArQEAAAAig7AAAKKDwAAAoopwAACoCXAQAEfpcBAAR7qAAACn6XAQAEfpYBAAQt
OxZy3wkAcBTQEAAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAACoCW
AQAEfpYBAAR7owAACn6WAQAE0CMAAAIoOwAACn6VAQAELS8WcgEFAHDQEAAAAig7AAAKF41bAAAB
JRYWFChNAAAKoihRAAAKKFIAAAqAlQEABH6VAQAEe1MAAAp+lQEABAZvRwIABgeMWQAAARuMWQAA
AW/rAQAGb1QAAApvpAAACm+pAAAKDAgoJgAACjqJCAAACG8nAAAKAii2AAAGbz4CAAZvJwAACigo
AAAKOWkIAAB+mAEABC0lHxDQLgAAAig7AAAK0BAAAAIoOwAACig8AAAKKD0AAAqAmAEABH6YAQAE
ez4AAAp+mAEABAZvRwIABgeMWQAAAReMWQAAAW/rAQAGbz8AAAoNfpkBAAQtJR8Q0C4AAAIoOwAA
CtAQAAACKDsAAAooPAAACig9AAAKgJkBAAR+mQEABHs+AAAKfpkBAAQGb0cCAAYHjFkAAAEYjFkA
AAFv6wEABm8/AAAKEwR+mgEABC0lHxDQLgAAAig7AAAK0BAAAAIoOwAACig8AAAKKD0AAAqAmgEA
BH6aAQAEez4AAAp+mgEABAZvRwIABgeMWQAAARmMWQAAAW/rAQAGbz8AAAoTBX6bAQAELSUfENAu
AAACKDsAAArQEAAAAig7AAAKKDwAAAooPQAACoCbAQAEfpsBAAR7PgAACn6bAQAEBm9HAgAGB4xZ
AAABGoxZAAABb+sBAAZvPwAAChMGfp8BAAQtJBbQTwAAASg7AAAK0BAAAAIoOwAACig8AAAKKKcA
AAqAnwEABH6fAQAEe6gAAAp+nwEABH6eAQAELTAWcsMKAHAU0BAAAAIoOwAACheNWwAAASUWFhQo
TQAACqIoTgAACihSAAAKgJ4BAAR+ngEABHtTAAAKfp4BAAR+nQEABC07FnLfCQBwFNAQAAACKDsA
AAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgJ0BAAR+nQEABHujAAAKfp0B
AATQIwAAAig7AAAKfpwBAAQtLxZyAQUAcNAQAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKFEAAAoo
UgAACoCcAQAEfpwBAAR7UwAACn6cAQAEBm9HAgAGB4xZAAABHIxZAAABb+sBAAZvVAAACm+kAAAK
b1QAAApvqQAAChMHc/gAAAoTCH6hAQAELSwWH1PQEAAAAig7AAAKF41bAAABJRYWFChNAAAKoiic
AAAKKJ0AAAqAoQEABH6hAQAEe54AAAp+oQEABH6gAQAELTYWHyPQEAAAAig7AAAKGI1bAAABJRYW
FChNAAAKoiUXGBQoTQAACqIonwAACij5AAAKgKABAAR+oAEABHv6AAAKfqABAAQRBm8NAgAGFG/7
AAAKb6YAAAo5bgEAAH6kAQAELSQW0DsAAAEoOwAACtAQAAACKDsAAAooPAAACij8AAAKgKQBAAR+
pAEABHv9AAAKfqQBAAR+owEABC06FnLNCgBwFNAQAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcZ
FChNAAAKoihOAAAKKP4AAAqAowEABH6jAQAEe/8AAAp+owEABH6iAQAELTAWciMKAHAU0BAAAAIo
OwAACheNWwAAASUWFhQoTQAACqIoTgAACihSAAAKgKIBAAR+ogEABHtTAAAKfqIBAAQRBm8NAgAG
b1QAAAofLG8AAQAKbwEBAApvAgEAChMKK11+pQEABC0lHxDQTwAAASg7AAAK0BAAAAIoOwAACig8
AAAKKKcAAAqApQEABH6lAQAEe6gAAAp+pQEABBEKb48AAApvqQAAChMLEQhz5AAABiURC2/jAAAG
bwMBAAoRCm+WAAAKLZreFREKdTEAAAETDBEMLAcRDG8kAAAK3HPtAAAGEw0RDX6pAQAELSQW0E8A
AAEoOwAACtAQAAACKDsAAAooPAAACiinAAAKgKkBAAR+qQEABHuoAAAKfqkBAAR+pwEABC0sFh9T
0BAAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgKcBAAR+pwEABHueAAAKfqcBAAR+
pgEABC02Fh8j0BAAAAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxgUKE0AAAqiKJ8AAAoo+QAACoCm
AQAEfqYBAAR7+gAACn6mAQAEEQVvDQIABhRv+wAACm+mAAAKLQdyewUAcCtSfqgBAAQtMBZyIwoA
cBTQEAAAAig7AAAKF41bAAABJRYWFChNAAAKoihOAAAKKFIAAAqAqAEABH6oAQAEe1MAAAp+qAEA
BBEFbw0CAAZvVAAACm+pAAAKb+gAAAYRDQhv6gAABhENc+EAAAYTDhEOfqsBAAQtJBbQWQAAASg7
AAAK0BAAAAIoOwAACig8AAAKKAQBAAqAqwEABH6rAQAEewUBAAp+qwEABH6qAQAELTsWctkKAHAU
0BAAAAIoOwAAChiNWwAAASUWHyEUKE0AAAqiJRcWFChNAAAKoihOAAAKKKIAAAqAqgEABH6qAQAE
e6MAAAp+qgEABNAjAAACKDsAAAoJbw0CAAZvpAAACm8GAQAKb9gAAAYRDn6tAQAELSQW0E8AAAEo
OwAACtAQAAACKDsAAAooPAAACiinAAAKgK0BAAR+rQEABHuoAAAKfq0BAAR+rAEABC0wFnIjCgBw
FNAQAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoCsAQAEfqwBAAR7UwAACn6sAQAE
EQRvDQIABm9UAAAKb6kAAApv3AAABhEOEQhv4AAABhEOb+YAAAYRDRMJEQcoJgAACjrcAAAAc4sA
AAolEQdvjAAACnLlCgBwb40AAAoWbwcBAAolb/QAAApyhwgAcG/1AAAKb5MAAAoTDxEJc3gAAAYl
EQ9vZwAABiVziAAACm9rAAAGb+wAAAZvkQAACm+OAAAKEworWxEKb48AAAp0LwAAARMQERBvlAAA
CixEEQlv6wAABm9qAAAGc4YAAAYlERByuwgAcG+SAAAKb5MAAApvfwAABiUREHLJCABwb5IAAApv
kwAACm+BAAAGb5UAAAoRCm+WAAAKLZzeFREKdTEAAAETDBEMLAcRDG8kAAAK3BEJEw3eJQcXWAsH
Bm9UAgAGbwMCAAZv6QEABj5R9v//FBMN3gYmFBMN3gARDSoAQUwAAAIAAACVBQAAagAAAP8FAAAV
AAAAAAAAAAIAAAAwCQAAaAAAAJgJAAAVAAAAAAAAAAAAAAAAAAAA0gkAANIJAAAGAAAAFAAAARMw
AgAwAAAAGQAAEQIowAAABgoGLCQGb+UAAAZv2wAABm8nAAAKA2/bAAAGbycAAAooCAEACiwCFyoW
KhMwAgAnAAAAGgAAEQIoxQAABgoGLBsCBijGAAAGAgYoyAAABgIGKMcAAAYCKMMAAAYUKgATMAQA
jgAAABMAABECKMQAAAYKBiwRAntYAAAEb+UAAAYGb9gAAAYfCY0OAAABJRZy8woAcKIlFwJ7XAAA
BKIlGHJvCwBwoiUZAntbAAAEoiUactELAHCiJRsCe1gAAARv5QAABm/XAAAGjFkAAAGiJRxy9QsA
cKIlHQIovAAABqIlHnIVDABwoijrAAAKAii6AAAGKJ8BAAYqAAAbMAMAZQAAABsAABFyeQwAcAJ7
WAAABG/lAAAGb9sAAAZy8wEAcChyAAAKAii6AAAGcx4AAAoKBm8fAAAKCysPBxZvIgAACii0AQAG
DN4gB28hAAAKLeneFAcsBgdvJAAACtwGLAYGbyQAAArcFioIKgAAAAEcAAACADIAG00ACgAAAAAC
ACsALFcACgAAAAAbMAoAvQEAABwAABFz7wAACgoCKLYAAAZvVAIABgsHOZcBAAAHb+IBAAZv6QEA
BgwWDTh9AQAAcgoNAHAJF1iMWQAAAXIaDQBwKAkBAAoTBH6uAQAELSUfENAuAAACKDsAAArQEAAA
Aig7AAAKKDwAAAooPQAACoCuAQAEfq4BAAR7PgAACn6uAQAEAii2AAAGb0cCAAYXjFkAAAEJF1iM
WQAAAW/rAQAGbz8AAAoTBX6wAQAELSwWH1PQEAAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAK
KJ0AAAqAsAEABH6wAQAEe54AAAp+sAEABH6vAQAELTYWHyPQEAAAAig7AAAKGI1bAAABJRYWFChN
AAAKoiUXGBQoTQAACqIonwAACij5AAAKgK8BAAR+rwEABHv6AAAKfq8BAAQRBW8NAgAGFG/7AAAK
b6YAAAosSH6xAQAELSQW0E8AAAEoOwAACtAQAAACKDsAAAooPAAACiinAAAKgLEBAAR+sQEABHuo
AAAKfrEBAAQRBW8HAgAGb6kAAAoTBBEEc68AAAoTBgZvrgAAChEGb7IAAAoJF1gNCQg/fP7//wYT
B94GJhQTB94AEQcqAAAAQRwAAAAAAAAAAAAAtAEAALQBAAAGAAAAFAAAARMwBwDjAAAAHQAAEQIo
tgAABm9UAgAGCgY50AAAAAZvAwIABm/pAQAGCwZv4gEABm/pAQAGDAcXPrEAAAAWDRgTBDifAAAA
A2+6AAAKFo0OAAABb7wAAAomFxMFK3kDb7oAAAoJb74AAAoRBRdZfrIBAAQtJR8Q0C4AAAIoOwAA
CtAQAAACKDsAAAooPAAACig9AAAKgLIBAAR+sgEABHs+AAAKfrIBAAQGb9sBAAYRBIxZAAABEQWM
WQAAAW/rAQAGbz8AAApvBwIABm8KAQAKEQUXWBMFEQUIMYIJF1gNEQQXWBMEEQQHPln///8qABsw
AgBaAAAAHgAAEXIeDQBwAii8AAAGKEMAAAoCKLoAAAZzCwEACgoGcwwBAAoLBgdvDQEACm8OAQAK
BgNvDwEACibeFAcsBgdvJAAACtwGLAYGbyQAAArcAgIovAAABijJAAAGKgAAARwAAAIAIwAWOQAK
AAAAAAIAHAAnQwAKAAAAABswBQDOAAAAHwAAEQJyPA0AcAJ7WwAABHIaDQBwKHIAAAoovQAABnKY
DQBwAii8AAAGcrYNAHACKLwAAAYoJQAACgoGAii6AAAGKJ8BAAZy7A0AcAIovAAABnIIDgBwKHIA
AAoKA2+uAAAKb8IAAAoLKyMHb48AAAp0OAAAAQwGclEKAHAIb/AAAApyDA4AcCglAAAKCgdvlgAA
Ci3V3hEHdTEAAAENCSwGCW8kAAAK3AYXjVQAAAElFh8snW+sAAAKci4OAHAoQwAACgoGAii6AAAG
KJ8BAAYqAAABEAAAAgBlAC+UABEAAAAAGzAFAK4AAAAgAAARch4NAHADcjIOAHAocgAACgIougAA
BnMeAAAKCnJIDgBwA3JiDgBwKHIAAAoLBm8fAAAKDBYNKxwHcnIOAHAICW9EAAAKcoYOAHAoJQAA
CgsJF1gNCQhvRgAACjLbCG8QAQAK3goILAYIbyQAAArcBxeNVAAAASUWHyudb6wAAApyoA4AcHKk
DgBwb24AAAoLBwIougAABiifAQAG3goGLAYGbyQAAArc3gMm3gAqAAABKAAAAgA0ADFlAAoAAAAA
AgAcAIKeAAoAAAAAAAAAAKqqAAMUAAABHgJ7XQAABCoiAgN9XQAABCoeAnteAAAEKiICA31eAAAE
Kh4Ce18AAAQqIgIDfV8AAAQqHgJ7YAAABCoiAgN9YAAABCoeAnthAAAEKiICA31hAAAEKh4Ce2IA
AAQqIgIDfWIAAAQqHgJ7YwAABCoiAgN9YwAABCoeAntkAAAEKiICA31kAAAEKh4Ce2UAAAQqIgID
fWUAAAQqHgJ7ZgAABCoiAgN9ZgAABCoeAntnAAAEKiICA31nAAAEKh4Ce2gAAAQqIgIDfWgAAAQq
HgJ7aQAABCoiAgN9aQAABCoeAntqAAAEKiICA31qAAAEKh4Ce2sAAAQqIgIDfWsAAAQqHgJ7bAAA
BCoiAgN9bAAABCobMAMAagAAACEAABECKBsAAAoCBCgIAQAGAgMo/gAABnIBAABwAij9AAAGc3gA
AApveQAACgoGbyAAAAosBwZvIQAACiYCBhZvIgAACm8jAAAKKPIAAAYCBhdvIgAACm8jAAAKKPQA
AAbeCgYsBgZvJAAACtwqAAABEAAAAgAqADVfAAoAAAAAHgJ7bQAABCoiAgN9bQAABCoeAntuAAAE
KiICA31uAAAEKh4Ce28AAAQqIgIDfW8AAAQqHgJ7cAAABCoiAgN9cAAABCoeAntxAAAEKiICA31x
AAAEKh4Ce3IAAAQqIgIDfXIAAAQqHgJ7cwAABCoiAgN9cwAABCoeAnt0AAAEKiICA310AAAEKh4C
e3UAAAQqIgIDfXUAAAQqHgJ7dgAABCoiAgN9dgAABCoeAnt3AAAEKiICA313AAAEKh4Ce3gAAAQq
IgIDfXgAAAQqHgJ7eQAABCoiAgN9eQAABCoAAAAbMAQAogAAACIAABFyawAAcHMpAAAKKCoAAAoo
KwAACnQnAAACCwdvMgIABigsAAAKEgAo8AAABiYCKPMAAAYCKAMBAAZyWwAAcChyAAAKDAgoEQEA
CiwGCCgSAQAK3gMm3gADCCgTAQAKBxZvMAIABgcWbysCAAYHbyYCAAYIbyACAAYXjFoAAAEIfi0A
AApvNAIABgIIKAABAAYHDd4MJgIHKBABAAYUDd4ACSoAAAEcAAAAAEQAEFQAAxQAAAEAAC0AZ5QA
DBQAAAEbMAEAFAAAAAAAAAADLAsCKP8AAAYoEgEACt4DJv4aKgEQAAAAAAAAEBAAAxQAAAEbMAYA
NgMAACMAABECcxQBAAooAgEABgIo/QAABm9BAAAKKJ0BAAZzQgAACgoGbx0AAApybAMAcAIoAwEA
BihDAAAKBnMeAAAKCwdvHwAACgw4iQEAAHM2AQAGDRYTBDhAAQAACBEEb0QAAAoTBREFbycAAApy
rA4AcCgoAAAKLBMJCBEFb0UAAApvIwAACm8mAQAGEQVvJwAACnK2DgBwKCgAAAosEwkIEQVvRQAA
Cm8jAAAKbyoBAAYRBW8nAAAKcsIOAHAoKAAACiwTCQgRBW9FAAAKbyMAAApvKAEABhEFbycAAApy
3A4AcCgoAAAKLBMJCBEFb0UAAApvIwAACm8sAQAGEQVvJwAACnL2DgBwKCgAAAosEwkIEQVvRQAA
Cii0AQAGby4BAAYRBW8nAAAKchIPAHAoKAAACiwTCQgRBW9FAAAKKLQBAAZvMAEABhEFbycAAApy
MA8AcCgoAAAKLBMJCBEFb0UAAApvIwAACm8yAQAGEQVvJwAACnJODwBwKCgAAAosEwkIEQVvRQAA
Cm8jAAAKbzQBAAYRBBdYEwQRBAhvRgAACj+z/v//CW8pAQAGbxUBAApyewUAcCgoAAAKLAsJcmYP
AHBvKgEABgIoAQEABglvFgEACghvIQAACjps/v//3goILAYIbyQAAArc3goHLAYHbyQAAArcAnJ7
BQBwKAoBAAYCKAEBAAZvFwEAChMGOL8AAAASBigYAQAKEwcRBwZvNQEABhEHbycBAAYoJgAACiwc
EQdvJQEABigmAAAKLQ4RBxEHbyUBAAZvKAEABhEHbysBAAYoJgAACiwcEQdvKQEABigmAAAKLQ4R
BxEHbykBAAZvLAEABhEHbycBAAYoJgAACi1MEQdvKwEABigmAAAKLT4CG41PAAABJRYCKAkBAAai
JRcRB28nAQAGoiUYcjUKAHCiJRkRB28rAQAGoiUacnAPAHCiKC8AAAooCgEABhIGKBkBAAo6Nf//
/94OEgb+FkIAABtvJAAACtwCAigJAQAGbxUBAAoXjVQAAAElFh98nW+sAAAKcngPAHByewUAcG9u
AAAKKAoBAAYGb0cAAAreCgYsBgZvJAAACtzeAybeACoAAEF8AAACAAAARQAAAJsBAADgAQAACgAA
AAAAAAACAAAAPgAAAK4BAADsAQAACgAAAAAAAAACAAAADgIAANIAAADgAgAADgAAAAAAAAACAAAA
IQAAAAUDAAAmAwAACgAAAAAAAAAAAAAACwAAACcDAAAyAwAAAwAAABQAAAEbMAIAVwAAACQAABEU
CgJvOAIABm8cAgAGCysqB2+PAAAKdDYAAAIMCG8+AgAGbycAAAoDbycAAAooKAAACiwECAreHRQK
B2+WAAAKLc7eEQd1MQAAAQ0JLAYJbyQAAArcBioAARAAAAIADgA2RAARAAAAABswFQD3DgAAJQAA
EQQWVAIo9wAABi0BKgIDKAsBAAYKBi0BKgZvMgIABigsAAAKBCjwAAAGJgYWbzACAAYGFm8rAgAG
Bm8mAgAGAij/AAAGfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAK
fi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACm8kAgAGCwIHco4PAHAoIwEABgxzGgEACg0IOU0OAAAX
EwQYEwU4yQsAAH63AQAELSUfENAuAAACKDsAAArQFQAAAig7AAAKKDwAAAooPQAACoC3AQAEfrcB
AAR7PgAACn63AQAECG9HAgAGEQWMWQAAARiMWQAAAW/rAQAGbz8AAAoTCH65AQAELSwWH1PQFQAA
Aig7AAAKF41bAAABJRYWFChNAAAKoiicAAAKKJ0AAAqAuQEABH65AQAEe54AAAp+uQEABH64AQAE
LTYWHyPQFQAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXGBQoTQAACqIonwAACij5AAAKgLgBAAR+
uAEABHv6AAAKfrgBAAQRCG8NAgAGFG/7AAAKb6YAAAo5HQoAAH69AQAELSQW0B4AAAIoOwAACtAV
AAACKDsAAAooPAAACigbAQAKgL0BAAR+vQEABHscAQAKfr0BAAR+vAEABC06GHKsDwBwFNAVAAAC
KDsAAAoYjVsAAAElFhcUKE0AAAqiJRcWFChNAAAKoihOAAAKKB0BAAqAvAEABH68AQAEex4BAAp+
vAEABAJ+uwEABC0wFnIjCgBwFNAVAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoC7
AQAEfrsBAAR7UwAACn67AQAEfroBAAQtJR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAK
gLoBAAR+ugEABHs+AAAKfroBAAQIb0cCAAYRBYxZAAABF4xZAAABb+sBAAZvPwAACm8NAgAGb1QA
AApvHwEACm8gAQAKEwkRCS0LEQUXWBMFOHwJAAB+wQEABC02Fh8N0BUAAAIoOwAAChiNWwAAASUW
FhQoTQAACqIlFxgUKE0AAAqiKJ8AAAoo+QAACoDBAQAEfsEBAAR7+gAACn7BAQAEfsABAAQtRBhy
1A8AcBTQFQAAAig7AAAKGY1bAAABJRYXFChNAAAKoiUXFxQoTQAACqIlGBYUKE0AAAqiKE4AAAoo
IQEACoDAAQAEfsABAAR7IgEACn7AAQAEAgd+vwEABC0wFnIjCgBwFNAVAAACKDsAAAoXjVsAAAEl
FhYUKE0AAAqiKE4AAAooUgAACoC/AQAEfr8BAAR7UwAACn6/AQAEfr4BAAQtLxZyBhAAcNAVAAAC
KDsAAAoXjVsAAAElFhYUKE0AAAqiKFEAAAooUgAACoC+AQAEfr4BAAR7UwAACn6+AQAECG9HAgAG
EQWMWQAAARiMWQAAAW/rAQAGb1QAAApvVAAACm8jAQAKFG/7AAAKEwt+yAEABC0sFh9T0BUAAAIo
OwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgMgBAAR+yAEABHueAAAKfsgBAAQRC2+mAAAK
OvwBAAB+xwEABC0sFh9T0BUAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgMcBAAR+
xwEABHueAAAKfscBAAR+xgEABC02Hh8k0BUAAAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxYUKE0A
AAqiKJ8AAAoo+QAACoDGAQAEfsYBAAR7+gAACn7GAQAEEQt+xQEABC02Fh8N0BUAAAIoOwAAChiN
WwAAASUWFhQoTQAACqIlFxgUKE0AAAqiKJ8AAAoo+QAACoDFAQAEfsUBAAR7+gAACn7FAQAEfsQB
AAQtRBhy1A8AcBTQFQAAAig7AAAKGY1bAAABJRYXFChNAAAKoiUXFxQoTQAACqIlGBYUKE0AAAqi
KE4AAAooIQEACoDEAQAEfsQBAAR7IgEACn7EAQAEAgd+wwEABC0wFnIjCgBwFNAVAAACKDsAAAoX
jVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoDDAQAEfsMBAAR7UwAACn7DAQAEfsIBAAQtLxZyBhAA
cNAVAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKFEAAAooUgAACoDCAQAEfsIBAAR7UwAACn7CAQAE
CG9HAgAGEQWMWQAAARqMWQAAAW/rAQAGb1QAAApvVAAACm8jAQAKFG/7AAAKb/sAAApvpgAACiwL
EQUXWBMFOMUFAABzcQEABhMMEQx+ywEABC0kFtBPAAABKDsAAArQFQAAAig7AAAKKDwAAAoopwAA
CoDLAQAEfssBAAR7qAAACn7LAQAEfsoBAAQtMBZyIwoAcBTQFQAAAig7AAAKF41bAAABJRYWFChN
AAAKoihOAAAKKFIAAAqAygEABH7KAQAEe1MAAAp+ygEABH7JAQAELSUfENAuAAACKDsAAArQFQAA
Aig7AAAKKDwAAAooPQAACoDJAQAEfskBAAR7PgAACn7JAQAECG9HAgAGEQWMWQAAAReMWQAAAW/r
AQAGbz8AAApvDQIABm9UAAAKb6kAAApvZgEABhEMfs4BAAQtJBbQTwAAASg7AAAK0BUAAAIoOwAA
Cig8AAAKKKcAAAqAzgEABH7OAQAEe6gAAAp+zgEABH7NAQAELTAWciMKAHAU0BUAAAIoOwAACheN
WwAAASUWFhQoTQAACqIoTgAACihSAAAKgM0BAAR+zQEABHtTAAAKfs0BAAR+zAEABC0lHxDQLgAA
Aig7AAAK0BUAAAIoOwAACig8AAAKKD0AAAqAzAEABH7MAQAEez4AAAp+zAEABAhvRwIABhEFjFkA
AAEYjFkAAAFv6wEABm8/AAAKbw0CAAZvVAAACm+pAAAKb2gBAAYRDH7RAQAELSQW0E8AAAEoOwAA
CtAVAAACKDsAAAooPAAACiinAAAKgNEBAAR+0QEABHuoAAAKftEBAAR+0AEABC0wFnIjCgBwFNAV
AAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoDQAQAEftABAAR7UwAACn7QAQAEfs8B
AAQtJR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAKgM8BAAR+zwEABHs+AAAKfs8BAAQI
b0cCAAYRBYxZAAABGYxZAAABb+sBAAZvPwAACm8NAgAGb1QAAApvqQAACm9sAQAGEQx+1AEABC0k
FtBPAAABKDsAAArQFQAAAig7AAAKKDwAAAoopwAACoDUAQAEftQBAAR7qAAACn7UAQAEftMBAAQt
MBZyIwoAcBTQFQAAAig7AAAKF41bAAABJRYWFChNAAAKoihOAAAKKFIAAAqA0wEABH7TAQAEe1MA
AAp+0wEABH7SAQAELSUfENAuAAACKDsAAArQFQAAAig7AAAKKDwAAAooPQAACoDSAQAEftIBAAR7
PgAACn7SAQAECG9HAgAGEQWMWQAAARqMWQAAAW/rAQAGbz8AAApvDQIABm9UAAAKb6kAAApvbgEA
BhEMcnsFAHBvagEABhEMEwoJEQpvJAEAChEJOeEBAAARCm9rAQAGF41UAAABJRYfLJ1vOgAAChMN
EQ0oHQAAKxY+uwEAABENFhENFppyFBAAcHJ7BQBwb24AAApyNBAAcHJ7BQBwb24AAAqiEQlvcgEA
BhENFpootAEABjMVEQlvdAEABhENF5ootAEABjtuAQAAcjgQAHARCW9yAQAGEw8SDyiwAAAKclwQ
AHARCW90AQAGEw8SDyiwAAAKKCUAAAoTDhgTECsZEQ5yXBAAcBENERCaKHIAAAoTDhEQF1gTEBEQ
EQ0oHQAAKzLcftUBAAQtJR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAKgNUBAAR+1QEA
BHs+AAAKftUBAAQIb0cCAAYRBYxZAAABGYxZAAABb+sBAAZvPwAAChEObw4CAAYRChEOb2wBAAY4
pwAAAH7XAQAELSwWH1PQFQAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAKKJ0AAAqA1wEABH7X
AQAEe54AAAp+1wEABH7WAQAELTYWHw3QFQAAAig7AAAKGI1bAAABJRYWFChNAAAKoiUXGBQoTQAA
CqIonwAACij5AAAKgNYBAAR+1gEABHv6AAAKftYBAAQRCG8NAgAGFG/7AAAKb6YAAAosBRYTBCsN
EQUXWBMFEQQ6MPT//wlvJQEAChMROIQAAAASESgmAQAKExICERJvawEABigSAQAGExN+2AEABC0k
FtA2AAACKDsAAArQFQAAAig7AAAKKDwAAAooSwAACoDYAQAEftgBAAR7TAAACn7YAQAEB284AgAG
ERJvZwEABm8eAgAGb1YAAAoTFAIGBxEUAij/AAAGAij9AAAGERMoFAEABiYSESgnAQAKOnD////e
DhIR/hZKAAAbbyQAAArcc1sBAAYlAigJAQAGb1YBAAYlA29SAQAGJSgoAQAKb1gBAAYTBgdvNgIA
Bn7ZAQAELSQW0DYAAAIoOwAACtAVAAACKDsAAAooPAAACihLAAAKgNkBAAR+2QEABHtMAAAKftkB
AAQHbzgCAAYCKAUBAAZvRgEABm8eAgAGb1YAAAoTBwIoBQEABgcCKAUBAAZvRgEABiitAQAGb00B
AAYCKAUBAAZvTAEABiDNoAEAM0IRBwdzVwAABhEHByiqAQAGEQdvPgIABnJgEABwKEMAAAoHKLAB
AAYRByirAQAGb10AAAYCEQYGBygWAQAGOK0AAAACKAUBAAZvTAEABiDMoAEAMw8CEQYGBygWAQAG
OIwAAAACKAUBAAZvTAEABiDOoAEAM3oCKP0AAAZvQQAACiidAQAGc0IAAAoTFREVbx0AAAoRBwcC
KPsAAAZzvwAABiURFW+7AAAGExYRFntYAAAELCYRBwdzVwAABhEWe1gAAARvWwAABhEWb8IAAAYm
AhEGBgcoFgEABhEVb0cAAAreDBEVLAcRFW8kAAAK3AcXjFoAAAECKP8AAAZ+LQAACm80AgAGAgYH
KCQBAAYCFigMAQAGKgABHAAAAgCMDJcjDQ4AAAAAAgBtDlfEDgwAAAAAGzACACsAAAAmAAARFgoD
bzICAAYoLAAAChIAKPAAAAYmBigpAQAKCwcsBgdvKgEACt4DJt4AKgABEAAAAAAVABInAAMUAAAB
EzAEAL4AAAAhAAARcnQQAHByfRUAcANy8wEAcCglAAAKAij9AAAGc3gAAAolF28rAQAKb3kAAAoK
Bm8gAAAKLQgGbxABAAoUKgZvIQAACiZzfAEABiUGcqUVAHBvRQAACii0AQAGb3kBAAYlBnKzFQBw
b0UAAAootAEABm9zAQAGJQZyyRUAcG9FAAAKbyMAAApvdwEABiUGct8VAHBvRQAACii0AQAGb3sB
AAYlBnL9FQBwb0UAAAootAEABm91AQAGBm8QAQAKKgAAEzAGAN4BAAAnAAAREgD+FRgAAAIDF41U
AAABJRYfLJ1vOgAACgsWDDiUAQAABwiaDQlyNQoAcG8sAQAKOWQBAABzmAIABhMEEQQJF41UAAAB
JRYfPZ1vOgAACigeAAArF41UAAABJRYfJ51vLgEACheNVAAAASUWHyedb6wAAAp92gEABAIoAQEA
Bjn7AAAAAigBAQAGEQT+BpkCAAZzLwEACigfAAArEwURBTnAAAAACXLzAQBwb88AAAosFxIAJShA
AQAGcvMBAHAoQwAACihBAQAGCXLzAQBwbzABAAosSRIAEwYRBhuNTwAAASUWEQYoQAEABqIlFxEF
byUBAAaiJRhyNQoAcKIlGREFbykBAAaiJRpyDxYAcKIoLwAACihBAQAGOJIAAAASABMGEQYbjU8A
AAElFhEGKEABAAaiJRcRBW8lAQAGoiUYcjUKAHCiJRkRBW8pAQAGoiUaclwQAHCiKC8AAAooQQEA
BitMEgAlKEABAAYJclwQAHAocgAACihBAQAGKzISACUoQAEABglyXBAAcChyAAAKKEEBAAYrGBIA
JShAAQAGCXJcEABwKHIAAAooQQEABggXWAwIB45pP2P+//8SABIAKEABAAYXjVQAAAElFh8snW+s
AAAKKEEBAAYGKgAAGzABABcAAAACAAARA28jAAAKKDEBAAomFwreBSYWCt4ABioAARAAAAAAAAAQ
EAAFFAAAARswCgACBwAAKAAAEXNYAAAKCnNZAAAKC3NaAAAKJgVvPgIABnIVFgBwKEMAAAoMBg4F
b0EAAApvWwAACgYlb1wAAApyIxYAcChDAAAKb1sAAAoGcnsFAHByewUAcHJ7BQBwFW9dAAAKBw8G
KEABAAYGFhkXb14AAAoFb0cCAAZv3QEABiYFb0cCAAZv3gEABiYFbzwCAAYWEwU4jQAAAH7bAQAE
LSUfENAuAAACKDsAAArQFQAAAig7AAAKKDwAAAooPQAACoDbAQAEftsBAAR7PgAACn7bAQAEBW9H
AgAGF4xZAAABEQUXWIxZAAABb+sBAAZvPwAACiUHb18AAAoRBYxZAAABb2AAAApvYQAACm8OAgAG
b/MBAAYXjFoAAAFvygEABhEFF1gTBREFB29fAAAKb2IAAAo/Yf///wVyfxYAcH4tAAAKb1ACAAYH
fi0AAAp+LQAACm/nAQAGJgVvVAIABm/iAQAGb9kBAAYmB28yAQAKBm8zAQAKAgQoFQEABgQIKA4B
AAYNDwYoQAEABheNVAAAASUWHyydbzoAAAp+6gEABCUtFyZ+6QEABP4GnAIABnPWAAAKJYDqAQAE
KBkAACsoDwAAKxMGFhMHONoCAAARBhEHmhMIGRMJFhMKOLsCAAB+3AEABC0lHxDQLgAAAig7AAAK
0BUAAAIoOwAACig8AAAKKD0AAAqA3AEABH7cAQAEez4AAAp+3AEABAlvRwIABhEJjFkAAAEYjFkA
AAFv6wEABm8/AAAKEwt+3gEABC0sFh9T0BUAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiid
AAAKgN4BAAR+3gEABHueAAAKft4BAAR+3QEABC02Fh8j0BUAAAIoOwAAChiNWwAAASUWFhQoTQAA
CqIlFxgUKE0AAAqiKJ8AAAoo+QAACoDdAQAEft0BAAR7+gAACn7dAQAEEQtvDQIABhRv+wAACm+m
AAAKObEBAAB+4AEABC0sFh9T0BUAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgOAB
AAR+4AEABHueAAAKfuABAAR+3wEABC02Fh8N0BUAAAIoOwAAChiNWwAAASUWFxQoTQAACqIlFxYU
KE0AAAqiKJ8AAAoooAAACoDfAQAEft8BAAR7oQAACn7fAQAEEQgXjVQAAAElFh89nW86AAAKFpoR
C28NAgAGb6UAAApvpgAACjn+AAAAfuEBAAQtJR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9
AAAKgOEBAAR+4QEABHs+AAAKfuEBAAQJb0cCAAYRCYxZAAABGYxZAAABb+sBAAZvPwAACnKFFgBw
b/8BAAYRCBeNVAAAASUWHz2dbzoAAAoXmheNVAAAASUWHyedby4BAAoXjVQAAAElFh8nnW+sAAAK
Ewx+4gEABC0lHxDQLgAAAig7AAAK0BUAAAIoOwAACig8AAAKKD0AAAqA4gEABH7iAQAEez4AAAp+
4gEABAlvRwIABhEJjFkAAAEZjFkAAAFv6wEABm8/AAAKEQxvDgIABisFFxMKKw0RCRdYEwkRCjk+
/f//EQcXWBMHEQcRBo5pPxv9//8Eco4PAHAoDgEABhMEEQQ5KwIAABgTDRYTDjgZAgAAfuMBAAQt
JR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAKgOMBAAR+4wEABHs+AAAKfuMBAAQRBG9H
AgAGEQ2MWQAAARiMWQAAAW/rAQAGbz8AAAoTD37lAQAELSwWH1PQFQAAAig7AAAKF41bAAABJRYW
FChNAAAKoiicAAAKKJ0AAAqA5QEABH7lAQAEe54AAAp+5QEABH7kAQAELTYWHyPQFQAAAig7AAAK
GI1bAAABJRYWFChNAAAKoiUXGBQoTQAACqIonwAACij5AAAKgOQBAAR+5AEABHv6AAAKfuQBAAQR
D28NAgAGFG/7AAAKb6YAAAo5DgEAAH7nAQAELSwWH1PQFQAAAig7AAAKF41bAAABJRYWFChNAAAK
oiicAAAKKJ0AAAqA5wEABH7nAQAEe54AAAp+5wEABH7mAQAELTYWHw3QFQAAAig7AAAKGI1bAAAB
JRYWFChNAAAKoiUXFxQoTQAACqIonwAACihkAAAKgOYBAAR+5gEABHtlAAAKfuYBAAQRD28NAgAG
BW8+AgAGb2YAAApvpgAACixsfugBAAQtJR8Q0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAK
gOgBAAR+6AEABHs+AAAKfugBAAQRBG9HAgAGEQ2MWQAAARmMWQAAAW/rAQAGbz8AAAoPBihAAQAG
bw4CAAYrBRcTDisNEQ0XWBMNEQ454P3//wMWbysCAAYXExDeBiYWExDeABEQKgAAQRwAAAAAAAAj
AAAA1gYAAPkGAAAGAAAAFAAAARswBQA5AgAAKQAAEQNvOAIABm8cAgAGCjgGAgAABm+PAAAKdDYA
AAILB34tAAAKb0ICAAZ+7AEABC0kFtA7AAABKDsAAArQFQAAAig7AAAKKDwAAAoo/AAACoDsAQAE
fuwBAAR7/QAACn7sAQAEB34tAAAKb04CAAZvAQEACm8CAQAKDDh5AQAAfu0BAAQtJR8Q0C0AAAIo
OwAACtAVAAACKDsAAAooPAAACig0AQAKgO0BAAR+7QEABHs1AQAKfu0BAAQIb48AAApvNgEACg1+
6wEABC0kFtBPAAABKDsAAArQFQAAAig7AAAKKDwAAAoopwAACoDrAQAEfusBAAR7qAAACn7rAQAE
CW/SAQAGb6kAAAoXjVQAAAElFh8hnW86AAAKEwQRBBaaEwURBBaaLCsRBBaaH10oIAAAKywecvMB
AHARBREFH11vOAEAChdYbzkBAAooQwAAChMFAxEFcvMBAHByewUAcG9uAAAKKA4BAAYTBhEGOYQA
AAARBm9UAgAGJW8DAgAGb+kBAAYTCRIJKLAAAAoTByVvAwIABm/pAQAGFzAHcokWAHATB2/iAQAG
b+kBAAYTCRIJKLAAAAoTCAkcjU8AAAElFnLzAQBwoiUXEQZvPgIABqIlGHKNFgBwoiUZEQeiJRpy
nxYAcKIlGxEIoigvAAAKb9MBAAYIb5YAAAo6fP7//94UCHUxAAABEwoRCiwHEQpvJAAACtwGb5YA
AAo67/3//94UBnUxAAABEwoRCiwHEQpvJAAACtwqAAAAQTQAAAIAAAB4AAAAiwEAAAMCAAAUAAAA
AAAAAAIAAAAMAAAAGAIAACQCAAAUAAAAAAAAABMwBQDUAAAAKgAAEXOdAgAGCgYCfe8BAAQGA33w
AQAEBgV98QEABAIo+QAABi0BKgZ78AEABAIoBQEABm9GAQAGb1QBAAYGfu4BAAQtJBbQNgAAAig7
AAAK0BUAAAIoOwAACig8AAAKKEsAAAqA7gEABH7uAQAEe0wAAAp+7gEABAZ78QEABG84AgAGAigF
AQAGb0YBAAZvHgIABm9WAAAKffIBAAQCBnvyAQAEBnvxAQAEKBcBAAYG/gaeAgAGczoBAApzOwEA
CiUWbzwBAApvPQEACiDQBwAAKD4BAAoqGzARAKEEAAArAAARFwo4jgQAAANvRwIABnKjFgBwfi0A
AAogve///4w7AAACGIw/AAACF4xGAAACFxaMWgAAAX4tAAAKfi0AAApv8QEABgsHOUkEAAB+9wEA
BC0kFtBPAAABKDsAAArQFQAAAig7AAAKKDwAAAoopwAACoD3AQAEfvcBAAR7qAAACn73AQAEfvYB
AAQtRBZyuxYAcBTQFQAAAig7AAAKGY1bAAABJRYWFChNAAAKoiUXGRQoTQAACqIlGBkUKE0AAAqi
KE4AAAooPwEACoD2AQAEfvYBAAR7QAEACn72AQAEfvUBAAQtNBbQFQAAAig7AAAKGI1bAAABJRYW
FChNAAAKoiUXGRQoTQAACqIo3gAACihBAQAKgPUBAAR+9QEABHtCAQAKfvUBAAR+9AEABC06FnLN
CgBwFNAVAAACKDsAAAoYjVsAAAElFhYUKE0AAAqiJRcZFChNAAAKoihOAAAKKP4AAAqA9AEABH70
AQAEe/8AAAp+9AEABH7zAQAELTAWciMKAHAU0BUAAAIoOwAACheNWwAAASUWFhQoTQAACqIoTgAA
CihSAAAKgPMBAAR+8wEABHtTAAAKfvMBAAQHbw0CAAZvVAAACh86bwABAAoXb0MBAApyyxYAcHJ7
BQBwb0QBAApvqQAACgwIHyEoIAAAKzlrAgAACBeNVAAAASUWHyGdbzoAAAoWmgQosAEABggXjVQA
AAElFh8hnW86AAAKF5p+LQAACm9QAgAGDX76AQAELSQW0E8AAAEoOwAACtAVAAACKDsAAAooPAAA
CiinAAAKgPoBAAR++gEABHuoAAAKfvoBAAR++QEABC06GHLPFgBwFNAVAAACKDsAAAoYjVsAAAEl
FhcUKE0AAAqiJRcWFChNAAAKoihOAAAKKB0BAAqA+QEABH75AQAEex4BAAp++QEABAJ++AEABC0w
FnIjCgBwFNAVAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoD4AQAEfvgBAAR7UwAA
Cn74AQAECW8NAgAGb1QAAApvHwEACm+pAAAKEwQRBCgmAAAKOkABAAARBCgRAQAKOTQBAAADbzwC
AAYDfi0AAApvQQIABn77AQAELSUfENB9AAABKDsAAArQFQAAAig7AAAKKDwAAAooRQEACoD7AQAE
fvsBAAR7RgEACn77AQAEB2/6AQAGb0cBAApsaxMFfvwBAAQtJR8Q0H0AAAEoOwAACtAVAAACKDsA
AAooPAAACihFAQAKgPwBAAR+/AEABHtGAQAKfvwBAAQHbwkCAAZvRwEACmxrEwYiAAB6QxMHIgAA
oEITCBEEKEgBAAoTCREJFhYoSQEAChMKEQpvSgEACmsTBxEKb0sBAAprEwjeDBEKLAcRCm8kAAAK
3N4MEQksBxEJbyQAAArc3gMm3gADb0UCAAYRBBYXEQURBhEHEQhvFwIABiYHcjQQAHBvDgIABgdv
+AEABihMAQAKjH8AAAFvzQEABgdyNBAAcG8OAgAGB2/4AQAGKEwBAAqMfwAAAW/NAQAG3hAmB3J7
BQBwbw4CAAbeAhYKBjps+///3gMm3gAqAAAAQXwAAAIAAAD2AwAAFgAAAAwEAAAMAAAAAAAAAAIA
AADrAwAALwAAABoEAAAMAAAAAAAAAAAAAADiAwAARgAAACgEAAADAAAAFAAAAQAAAABKAAAAOwQA
AIUEAAAOAAAAFAAAAQAAAAAAAAAAnQQAAJ0EAAADAAAAFAAAARswAwBnAAAALAAAEQMoJgAACi1U
cvEWAHADcvMBAHAocgAACgIo/QAABnN4AAAKCgZveQAACgsrDwcWbyIAAApvIwAACgzeKQdvIQAA
Ci3p3goHLAYHbyQAAArc3goGLAYGbyQAAArcFAzeBSYUDN4ACCoAASgAAAIAKwAbRgAKAAAAAAIA
JAAuUgAKAAAAAAAAAABgYAAFFAAAARMwBQA/AQAALQAAEQUWVAIo+QAABi0BKgQoHQAAKy0BKnJr
AABwcykAAAooKgAACigrAAAKdCcAAAIKBm8yAgAGKCwAAAoFKPAAAAYmBhZvKwIABgZvJgIABgNv
IAIABgsEDBYNOM8AAAAICZoTBHOfAgAGJQJ9/wEABCVzWwEABiVyRxcAcG9WAQAGJQNvUgEABiUo
KAEACm9YAQAGJREEb1QBAAYlcnsFAHBvWgEABn3+AQAEfv0BAAQtJBbQNgAAAig7AAAK0BUAAAIo
OwAACig8AAAKKEsAAAqA/QEABH79AQAEe0wAAAp+/QEABAdvOAIABhEEbx4CAAZvVgAACiixAQAG
Fxhv6AEABib+BqACAAZzOgEACnM7AQAKJRZvPAEACm89AQAKINAHAAAoPgEACgkXWA0JCI5pPyj/
//8CBgcoJAEABioAEzAGAIUAAAAuAAARAx2NTwAAASUWAijzAAAGoiUXA29TAQAGoiUYcp8HAHCi
JRkCKPsAAAaiJRpynwcAcKIlGygoAQAKChIAcmEXAHAoTQEACqIlHHKFFwBwoigvAAAKb1oBAAYo
TgEACnNPAQAKA29ZAQAGKFABAApvUQEACgIDKCEBAAYgiBMAACg+AQAKKgAAABswBgCbAQAALwAA
EQMcjU8AAAElFgIo8wAABqIlFwNvUwEABqIlGHKfBwBwoiUZAij7AAAGoiUacp8HAHCiJRsoKAEA
CgoSAHJhFwBwKE0BAAqiKC8AAApvWgEABgIoBwEABm8nAAAKco8XAHAoKAAACiwbAyVvWQEABnKX
FwBwKEMAAApvWgEABjiLAAAAAigHAQAGbycAAApyoRcAcCgoAAAKLBgDJW9ZAQAGcoUXAHAoQwAA
Cm9aAQAGK1wCKAcBAAZvJwAACnKpFwBwKCgAAAosGAMlb1kBAAZyWwAAcChDAAAKb1oBAAYrLQIo
BwEABm8nAAAKcrUXAHAoKAAACiwWAyVvWQEABnK/FwBwKEMAAApvWgEABgU5hgAAAARvOAIABm8c
AgAGCyszB2+PAAAKdDYAAAIMCG8+AgAGBW8+AgAGKAgBAAosFAIoBQEABm9OAQAGLQcIGG9EAgAG
B2+WAAAKLcXeEQd1MQAAAQ0JLAYJbyQAAArc3gMm3gACBQNvWQEABgIoBwEABigcAQAGJgIDKCEB
AAYgiBMAACg+AQAKKgABHAAAAgAgAT9fAREAAAAAAAAUAV5yAQMUAAABEzADAG4AAAAAAAAABW8n
AAAKco8XAHAoKAAACiwJAgMEKB0BAAYqBW8nAAAKcqEXAHAoKAAACiwJAgMEKCABAAYqBW8nAAAK
cqkXAHAoKAAACiwJAgMEKB4BAAYqBW8nAAAKcrUXAHAoKAAACiwJAgMEKB8BAAYqFioAABswCgA2
AAAAAgAAEQMWBH4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKb1gCAAYXCt4FJhYK
3gAGKgAAARAAAAAAAAAvLwAFFAAAARswDQCgAAAAAgAAEXJrAABwcykAAAooKgAACigrAAAKdCcA
AAIlbyYCAAYXjFkAAAFvIAIABiYlbyYCAAYWjFkAAAFvIgIABm84AgAGA34tAAAKbxoCAAZvJgIA
BhaMWQAAAW8iAgAGBH4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAoXfi0AAAp+LQAACn4tAAAKfi0A
AAp+LQAACm86AgAGFwreBSYWCt4ABioBEAAAAAAAAJmZAAUUAAABGzABAAsAAAACAAARFwreBSYW
Ct4ABioAARAAAAAAAAAEBAAFFAAAARswBQADAQAAMAAAEX4AAgAELSQW0C4AAAIoOwAACtAVAAAC
KDsAAAooPAAACig9AAAKgAACAAR+AAIABHs+AAAKfgACAAQDb0cCAAYXjFkAAAEXjFkAAAFv6wEA
Bm8/AAAKCn4BAgAELSQW0C4AAAIoOwAACtAVAAACKDsAAAooPAAACig9AAAKgAECAAR+AQIABHs+
AAAKfgECAAQDb0cCAAYDb1QCAAZvAwIABm/pAQAGjFkAAAEDb1QCAAZv4gEABm/pAQAGjFkAAAFv
6wEABm8/AAAKCwMGB29QAgAGJgMosQEABhcYb+gBAAYmKE4BAApzTwEACgQoUAEACm9RAQAKFwze
BSYWDN4ACCoAARAAAAAAAAD8/AAFFAAAARswBQC8AAAAMQAAEQNvWQEABihSAQAKCh8NjQ4AAAEl
FnLLFwBwoiUXAigFAQAGb0IBAAaMWQAAAaIlGHIfGABwoiUZA29TAQAGoiUaclMYAHCiJRsGoiUc
coMYAHCiJR0Db1UBAAaiJR5yrRgAcKIlHwkDb1cBAAYMEgJy0xgAcChNAQAKoiUfCnL/GABwoiUf
CwIoAwEABqIlHwxy8wEAcKIo6wAACgIo/QAABnN4AAAKCwdvUwEACibeCgcsBgdvJAAACtwqARAA
AAIAqAAJsQAKAAAAABswAQAbAAAAAgAAEQMoEQEACiwPAygSAQAKFwreByYWCt4CFioGKgABEAAA
AAAIAAoSAAUUAAABGzACAEsAAAAyAAARA284AgAGbxwCAAYKKx4Gb48AAAp0NgAAAgsHbz4CAAYE
KAgBAAotBAcM3h0Gb5YAAAot2t4RBnUxAAABDQksBglvJAAACtwUKggqAAEQAAACAAwAKjYAEQAA
AAAiAgMoEAEABioeAnt6AAAEKiICA316AAAEKh4Ce3sAAAQqIgIDfXsAAAQqHgJ7fAAABCoiAgN9
fAAABCoeAnt9AAAEKiICA319AAAEKh4Ce34AAAQqIgIDfX4AAAQqHgJ7fwAABCoiAgN9fwAABCoe
AnuAAAAEKiICA32AAAAEKh4Ce4EAAAQqIgIDfYEAAAQqAAAAGzAFALUAAAAzAAARAigtAQAGOaQA
AAByHxkAcANvHAAACi0GA28dAAAKGo0OAAABJRYCKC0BAAaMWQAAAaIlFwIoLwEABoxZAAABoiUY
AigxAQAGoiUZAigzAQAGoijtAAAKA3MeAAAKCgZvHwAACgsHbyEAAAomAgcWbyIAAAooVAEACgwS
AnKHGQBwKE0BAAooKgEABgICKCkBAAYoLAEABt4KBywGB28kAAAK3N4KBiwGBm8kAAAK3N4DJt4A
KgAAAAEoAAACAGUANJkACgAAAAACAF4AR6UACgAAAAAAAAAAsbEAAxQAAAEeAnuCAAAEKiICA32C
AAAEKh4Ce4MAAAQqIgIDfYMAAAQqHgJ7hAAABCoiAgN9hAAABCoeAnuFAAAEKiICA32FAAAEKh4C
e4YAAAQqIgIDfYYAAAQqHgJ7hwAABCoiAgN9hwAABCoeAnuIAAAEKiICA32IAAAEKh4Ce4kAAAQq
IgIDfYkAAAQqHgJ7igAABCoiAgN9igAABCoeAnuLAAAEKiICA32LAAAEKh4Ce4wAAAQqIgIDfYwA
AAQqHgJ7jQAABCoiAgN9jQAABCoeAnuOAAAEKiICA32OAAAEKh4Ce48AAAQqIgIDfY8AAAQqHgJ7
kAAABCoiAgN9kAAABCoeAnuRAAAEKiICA32RAAAEKh4Ce5IAAAQqIgIDfZIAAAQqHgJ7kwAABCoi
AgN9kwAABCoeAnuUAAAEKiICA32UAAAEKh4Ce5UAAAQqIgIDfZUAAAQqHgJ7lgAABCoiAgN9lgAA
BCoeAnuXAAAEKiICA32XAAAEKh4Ce5gAAAQqIgIDfZgAAAQqHgJ7mQAABCoiAgN9mQAABCoeAnua
AAAEKiICA32aAAAEKh4Ce5sAAAQqIgIDfZsAAAQqHgJ7nAAABCoiAgN9nAAABCoeAnudAAAEKiIC
A32dAAAEKh4Ce54AAAQqIgIDfZ4AAAQqHgJ7nwAABCoiAgN9nwAABCoeAnugAAAEKiICA32gAAAE
Kh4Ce6EAAAQqIgIDfaEAAAQqHgJ7ogAABCoiAgN9ogAABCoeAnujAAAEKiICA32jAAAEKh4Ce6QA
AAQqIgIDfaQAAAQqHgJ7pQAABCoiAgN9pQAABCoeAnumAAAEKiICA32mAAAEKh4Ce6cAAAQqIgID
facAAAQqHgJ7qAAABCoiAgN9qAAABCoeAnupAAAEKiICA32pAAAEKh4Ce6oAAAQqIgIDfaoAAAQq
HgJ7qwAABCoiAgN9qwAABCoeAnusAAAEKiICA32sAAAEKh4Ce60AAAQqIgIDfa0AAAQqHgJ7rgAA
BCoiAgN9rgAABCoeAnuvAAAEKiICA32vAAAEKh4Ce7AAAAQqIgIDfbAAAAQqABMwBQBvAAAANAAA
EXJ7BQBwCgIXjVQAAAElFh87nW86AAAKCxYMKzkHCJoNCW8nAAAKcp0ZAHBvLAEACi0fCW8nAAAK
cq8ZAHBvLAEACi0NBglywxkAcChyAAAKCggXWAwIB45pMsEGF41UAAABJRYfO51vrAAACgoGKgAT
MAMAIwAAADUAABEodgAACgoSAP4WJAAAAW8jAAAKcpsHAHBynwcAcG9uAAAKKgAbMAIAHAAAADYA
ABECA3MeAAAKCgZvUwEACibeCgYsBgZvJAAACtwqARAAAAIACAAJEQAKAAAAABMwCgAQBwAANwAA
EXNVAQAKCnKODwBwAiiwAQAGCwctAhQqFwwYDTjoBgAAfgICAAQtJR8Q0C4AAAIoOwAACtAhAAAC
KDsAAAooPAAACig9AAAKgAICAAR+AgIABHs+AAAKfgICAAQHb0cCAAYJjFkAAAEYjFkAAAFv6wEA
Bm8/AAAKEwR+BAIABC0sFh9T0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAKgAQC
AAR+BAIABHueAAAKfgQCAAR+AwIABC02Fh8j0CEAAAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxgU
KE0AAAqiKJ8AAAoo+QAACoADAgAEfgMCAAR7+gAACn4DAgAEEQRvDQIABhRv+wAACm+mAAAKOUAF
AABzrgAABhMFfgUCAAQtJR8Q0C4AAAIoOwAACtAhAAACKDsAAAooPAAACig9AAAKgAUCAAR+BQIA
BHs+AAAKfgUCAAQHb0cCAAYJjFkAAAEXjFkAAAFv6wEABm8/AAAKEwQRBX4GAgAELSQW0E8AAAEo
OwAACtAhAAACKDsAAAooPAAACiinAAAKgAYCAAR+BgIABHuoAAAKfgYCAAQRBG8NAgAGb6kAAApv
lwAABn4HAgAELSUfENAuAAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoAHAgAEfgcCAAR7PgAA
Cn4HAgAEB29HAgAGCYxZAAABGIxZAAABb+sBAAZvPwAAChMEEQV+CAIABC0kFtBPAAABKDsAAArQ
IQAAAig7AAAKKDwAAAoopwAACoAIAgAEfggCAAR7qAAACn4IAgAEEQRvDQIABm+pAAAKb5kAAAZ+
CQIABC0lHxDQLgAAAig7AAAK0CEAAAIoOwAACig8AAAKKD0AAAqACQIABH4JAgAEez4AAAp+CQIA
BAdvRwIABgmMWQAAARmMWQAAAW/rAQAGbz8AAAoTBBEFfgoCAAQtJBbQTwAAASg7AAAK0CEAAAIo
OwAACig8AAAKKKcAAAqACgIABH4KAgAEe6gAAAp+CgIABBEEbw0CAAZvqQAACm+dAAAGfgsCAAQt
JR8Q0C4AAAIoOwAACtAhAAACKDsAAAooPAAACig9AAAKgAsCAAR+CwIABHs+AAAKfgsCAAQHb0cC
AAYJjFkAAAEajFkAAAFv6wEABm8/AAAKEwQRBX4MAgAELSQW0E8AAAEoOwAACtAhAAACKDsAAAoo
PAAACiinAAAKgAwCAAR+DAIABHuoAAAKfgwCAAQRBG8NAgAGb6kAAApvnwAABn4NAgAELSUfENAu
AAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoANAgAEfg0CAAR7PgAACn4NAgAEB29HAgAGCYxZ
AAABG4xZAAABb+sBAAZvPwAAChMEEQV+DgIABC0kFtBPAAABKDsAAArQIQAAAig7AAAKKDwAAAoo
pwAACoAOAgAEfg4CAAR7qAAACn4OAgAEEQRvDQIABm+pAAAKb5sAAAZ+DwIABC0lHxDQLgAAAig7
AAAK0CEAAAIoOwAACig8AAAKKD0AAAqADwIABH4PAgAEez4AAAp+DwIABAdvRwIABgmMWQAAARyM
WQAAAW/rAQAGbz8AAAoTBBEFfhACAAQtJBbQTwAAASg7AAAK0CEAAAIoOwAACig8AAAKKKcAAAqA
EAIABH4QAgAEe6gAAAp+EAIABBEEbw0CAAZvqQAACm+jAAAGfhECAAQtJR8Q0C4AAAIoOwAACtAh
AAACKDsAAAooPAAACig9AAAKgBECAAR+EQIABHs+AAAKfhECAAQHb0cCAAYJjFkAAAEdjFkAAAFv
6wEABm8/AAAKEwR+EwIABC0sFh9T0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAACiidAAAK
gBMCAAR+EwIABHueAAAKfhMCAAR+EgIABC02Fh8j0CEAAAIoOwAAChiNWwAAASUWFhQoTQAACqIl
FxgUKE0AAAqiKJ8AAAoo+QAACoASAgAEfhICAAR7+gAACn4SAgAEEQRvDQIABhRv+wAACm+mAAAK
LE0RBX4UAgAELSQW0E8AAAEoOwAACtAhAAACKDsAAAooPAAACiinAAAKgBQCAAR+FAIABHuoAAAK
fhQCAAQRBG8NAgAGb6kAAApvoQAABgYRBW9WAQAKOKYAAAB+FgIABC0sFh9T0CEAAAIoOwAACheN
WwAAASUWFhQoTQAACqIonAAACiidAAAKgBYCAAR+FgIABHueAAAKfhYCAAR+FQIABC02Fh8N0CEA
AAIoOwAAChiNWwAAASUWFhQoTQAACqIlFxgUKE0AAAqiKJ8AAAoo+QAACoAVAgAEfhUCAAR7+gAA
Cn4VAgAEEQRvDQIABhRv+wAACm+mAAAKLAQWDCsKCRdYDQg6Evn//wYqEzAOACwCAAA4AAARc4gA
AAoKAgMosAEABgsHORYCAAAHb1QCAAZv4gEABm/pAQAGDBcNOPcBAAAGc4YAAAYTBBEEfhkCAAQt
JBbQTwAAASg7AAAK0CEAAAIoOwAACig8AAAKKKcAAAqAGQIABH4ZAgAEe6gAAAp+GQIABH4YAgAE
LTAWciMKAHAU0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIoTgAACihSAAAKgBgCAAR+GAIABHtT
AAAKfhgCAAR+FwIABC0vFnIBBQBw0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIoUQAACihSAAAK
gBcCAAR+FwIABHtTAAAKfhcCAAQHb0cCAAYXjFkAAAEJjFkAAAFv6wEABm9UAAAKb1QAAApvqQAA
Cm9/AAAGEQR+HAIABC0kFtBPAAABKDsAAArQIQAAAig7AAAKKDwAAAoopwAACoAcAgAEfhwCAAR7
qAAACn4cAgAEfhsCAAQtMBZyIwoAcBTQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoihOAAAKKFIA
AAqAGwIABH4bAgAEe1MAAAp+GwIABH4aAgAELS8WcgEFAHDQIQAAAig7AAAKF41bAAABJRYWFChN
AAAKoihRAAAKKFIAAAqAGgIABH4aAgAEe1MAAAp+GgIABAdvRwIABheMWQAAAQmMWQAAAW/rAQAG
b1QAAApvVAAACm+pAAAKb4EAAAYRBG+VAAAKCRdYDQkIPwL+//8GKhswBABFAAAAOQAAEQJyxxkA
cANvjwAABgoSAChXAQAKKFgBAApvbgAACnLRGQBwA2+RAAAGChIAKFcBAAooWAEACm9uAAAKC94F
JgIL3gAHKgAAAAEQAAAAAAAAPj4ABRQAAAEbMBIArAMAADoAABFyowkAcAMosAEABgoGLQcUDN2U
AwAABm9UAgAGCxgNOGwDAAB+IQIABC0sFh9T0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIonAAA
CiidAAAKgCECAAR+IQIABHueAAAKfiECAAR+IAIABC02Fh8N0CEAAAIoOwAAChiNWwAAASUWFxQo
TQAACqIlFxYUKE0AAAqiKJ8AAAoooAAACoAgAgAEfiACAAR7oQAACn4gAgAEAm8nAAAKfh8CAAQt
MBZyzwkAcBTQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoihOAAAKKFIAAAqAHwIABH4fAgAEe1MA
AAp+HwIABH4eAgAELTsWct8JAHAU0CEAAAIoOwAAChiNWwAAASUWHyEUKE0AAAqiJRcWFChNAAAK
oihOAAAKKKIAAAqAHgIABH4eAgAEe6MAAAp+HgIABNAjAAACKDsAAAp+HQIABC0vFnIBBQBw0CEA
AAIoOwAACheNWwAAASUWFhQoTQAACqIoUQAACihSAAAKgB0CAAR+HQIABHtTAAAKfh0CAAQGb0cC
AAYJjFkAAAEXjFkAAAFv6wEABm9UAAAKb6QAAApvVAAACm+lAAAKb6YAAAo5uQEAAH4mAgAELSQW
0DYAAAIoOwAACtAhAAACKDsAAAooPAAACihLAAAKgCYCAAR+JgIABHtMAAAKfiYCAAR+JQIABC1F
FnLbBABwFNAhAAACKDsAAAoZjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIlGBcUKE0AAAqiKE4A
AAooTwAACoAlAgAEfiUCAAR7UAAACn4lAgAE0CEAAAIoOwAACn4kAgAELTAWcs8JAHAU0CEAAAIo
OwAACheNWwAAASUWFhQoTQAACqIoTgAACihSAAAKgCQCAAR+JAIABHtTAAAKfiQCAAR+IwIABC07
FnLfCQBwFNAhAAACKDsAAAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgCMC
AAR+IwIABHujAAAKfiMCAATQIwAAAig7AAAKfiICAAQtLxZyAQUAcNAhAAACKDsAAAoXjVsAAAEl
FhYUKE0AAAqiKFEAAAooUgAACoAiAgAEfiICAAR7UwAACn4iAgAEBm9HAgAGCYxZAAABGYxZAAAB
b+sBAAZvVAAACm+kAAAKb1QAAAoDb1UAAApvVgAACgzeHgkXWA0JB28DAgAGb+kBAAY+g/z//xQM
3gUmFAzeAAgqQRwAAAAAAAAAAAAApQMAAKUDAAAFAAAAFAAAARswCgB8AgAAOwAAEX4nAgAELSQW
0DYAAAIoOwAACtAhAAACKDsAAAooPAAACihLAAAKgCcCAAR+JwIABHtMAAAKficCAAQDbzgCAAYC
bz4CAAZvHgIABm9WAAAKEAACb1QCAAZvAwIABm/pAQAGJhYKOPsBAAB+KAIABC0kFtAuAAACKDsA
AArQIQAAAig7AAAKKDwAAAooPQAACoAoAgAEfigCAAR7PgAACn4oAgAEAm9HAgAGGIxZAAABBhdY
jFkAAAFv6wEABm8/AAAKC34qAgAELSwWH1PQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAK
KJ0AAAqAKgIABH4qAgAEe54AAAp+KgIABAcU/gMMCCxZfikCAAQtNR4Y0CEAAAIoOwAAChiNWwAA
ASUWFxQoTQAACqIlFxYUKE0AAAqiKJ8AAAooWQEACoApAgAEfikCAAR7WgEACn4pAgAECAdv9QEA
Bm9bAQAKKwYIjFoAAAFvpgAACjnrAAAAfisCAAQtJBbQLgAAAig7AAAK0CEAAAIoOwAACig8AAAK
KD0AAAqAKwIABH4rAgAEez4AAAp+KwIABAJvRwIABhiMWQAAAQYXWIxZAAABb+sBAAZvPwAACg1+
LAIABC0kFtAuAAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoAsAgAEfiwCAAR7PgAACn4sAgAE
Am9HAgAGAm9UAgAGbwMCAAZv6QEABoxZAAABBhdYjFkAAAFv6wEABm8/AAAKEwQCCREEb1ACAAYT
BREFbwMCAAZv6QEABhcxCgcRBRZv1wEABibeAybeAAYXWAoGAm9UAgAGb+IBAAZv6QEABj/v/f//
KgEQAAAAAEMCG14CAxQAAAEbMAYA1QEAADwAABEDbz4CAAYEKLABAAY5vgEAAANvVAIABm/gAQAG
F1kDb1QCAAZv4gEABm/pAQAGWAoXCzi6AAAAfi4CAAQtJR8Q0C4AAAIoOwAACtAhAAACKDsAAAoo
PAAACig9AAAKgC4CAAR+LgIABHs+AAAKfi4CAAQCb0oCAAYHjFkAAAF+LQAACm/rAQAGbz8AAAp+
LQIABC0lHxDQLgAAAig7AAAK0CEAAAIoOwAACig8AAAKKD0AAAqALQIABH4tAgAEez4AAAp+LQIA
BANvSgIABgeMWQAAAX4tAAAKb+sBAAZvPwAACm/jAQAGb+QBAAYHF1gLBwY+P////xcMOLoAAAB+
MAIABC0lHxDQLgAAAig7AAAK0CEAAAIoOwAACig8AAAKKD0AAAqAMAIABH4wAgAEez4AAAp+MAIA
BAJvUgIABgiMWQAAAX4tAAAKb+sBAAZvPwAACn4vAgAELSUfENAuAAACKDsAAArQIQAAAig7AAAK
KDwAAAooPQAACoAvAgAEfi8CAAR7PgAACn4vAgAEA29SAgAGCIxZAAABfi0AAApv6wEABm8/AAAK
bwECAAZvAgIABggXWAwIA29UAgAGbwMCAAZv6QEABj4w////3gMm3gAqAAAAQRwAAAAAAAAAAAAA
0QEAANEBAAADAAAAFAAAARMwEgDRAQAAEwAAERcKOLIBAAB+NQIABC0sFh9T0CEAAAIoOwAACheN
WwAAASUWFhQoTQAACqIonAAACiidAAAKgDUCAAR+NQIABHueAAAKfjUCAAR+NAIABC02Fh8N0CEA
AAIoOwAAChiNWwAAASUWFxQoTQAACqIlFxYUKE0AAAqiKJ8AAAoooAAACoA0AgAEfjQCAAR7oQAA
Cn40AgAEA28nAAAKfjMCAAQtMBZyzwkAcBTQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoihOAAAK
KFIAAAqAMwIABH4zAgAEe1MAAAp+MwIABH4yAgAELTsWct8JAHAU0CEAAAIoOwAAChiNWwAAASUW
HyEUKE0AAAqiJRcWFChNAAAKoihOAAAKKKIAAAqAMgIABH4yAgAEe6MAAAp+MgIABNAjAAACKDsA
AAp+MQIABC0vFnIBBQBw0CEAAAIoOwAACheNWwAAASUWFhQoTQAACqIoUQAACihSAAAKgDECAAR+
MQIABHtTAAAKfjECAAQCb0cCAAYXjFkAAAEGjFkAAAFv6wEABm9UAAAKb6QAAApvVAAACm+lAAAK
b6YAAAosAgYqBhdYCgYCb1QCAAZv4gEABm/pAQAGPjj+//8WKgAAABMwEgDRAQAAEwAAEQRvjwAA
Bgo4twEAAH46AgAELSwWH1PQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAKKJ0AAAqAOgIA
BH46AgAEe54AAAp+OgIABH45AgAELTYWHw3QIQAAAig7AAAKGI1bAAABJRYXFChNAAAKoiUXFhQo
TQAACqIonwAACiigAAAKgDkCAAR+OQIABHuhAAAKfjkCAAQDbycAAAp+OAIABC0wFnLPCQBwFNAh
AAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoA4AgAEfjgCAAR7UwAACn44AgAEfjcC
AAQtOxZy3wkAcBTQIQAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqiKE4AAAooogAA
CoA3AgAEfjcCAAR7owAACn43AgAE0CMAAAIoOwAACn42AgAELS8WcgEFAHDQIQAAAig7AAAKF41b
AAABJRYWFChNAAAKoihRAAAKKFIAAAqANgIABH42AgAEe1MAAAp+NgIABAJvRwIABgRviwAABoxZ
AAABBoxZAAABb+sBAAZvVAAACm+kAAAKb1QAAApvpQAACm+mAAAKLAIGKgYXWAoGBG+RAAAGPj3+
//8WKgAAABMwCgAuAQAAPQAAERYKOA8BAAB+OwIABC0kFtAuAAACKDsAAArQIQAAAig7AAAKKDwA
AAooPQAACoA7AgAEfjsCAAR7PgAACn47AgAEAm9HAgAGGIxZAAABBhdYjFkAAAFv6wEABm8/AAAK
C349AgAELSwWH1PQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAKKJ0AAAqAPQIABH49AgAE
e54AAAp+PQIABAcU/gMMCCxZfjwCAAQtNR4Y0CEAAAIoOwAAChiNWwAAASUWFxQoTQAACqIlFxYU
KE0AAAqiKJ8AAAooWQEACoA8AgAEfjwCAAR7WgEACn48AgAECAdv9QEABm9bAQAKKwYIjFoAAAFv
pgAACiwCFyoGF1gKBgJvVAIABm/iAQAGb+kBAAY/2/7//xYqAAAbMAgAtQAAAD4AABF+PgIABC0k
FtAuAAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoA+AgAEfj4CAAR7PgAACn4+AgAEAm9HAgAG
A4xZAAABBIxZAAABb+sBAAZvPwAACgp+PwIABC0sFh9T0CEAAAIoOwAACheNWwAAASUWFhQoTQAA
CqIonAAACiidAAAKgD8CAAR+PwIABHueAAAKfj8CAAQGb/UBAAZvpgAACiwEFwveCd4FJhYL3gIW
KgcqAAAAARAAAAAAAACsrAAFFAAAARswBQAjAwAAPwAAEQIDKKwBAAY5GwEAABgKAiioAQAGLAIZ
Cn5AAgAELSQW0C4AAAIoOwAACtAhAAACKDsAAAooPAAACig9AAAKgEACAAR+QAIABHs+AAAKfkAC
AAQCb0cCAAYGjFkAAAECb1QCAAZv4gEABm/pAQAGjFkAAAFv6wEABm8/AAAKC35BAgAELSQW0C4A
AAIoOwAACtAhAAACKDsAAAooPAAACig9AAAKgEECAAR+QQIABHs+AAAKfkECAAQCb0cCAAYCb1QC
AAZvAwIABm/pAQAGjFkAAAECb1QCAAZv4gEABm/pAQAGjFkAAAFv6wEABm8/AAAKDAJvVAIABm8D
AgAGb+kBAAYGPhkCAAACBwhvUAIABm/vAQAGIL7v//+MOgAAAm/tAQAGJioAAm9FAgAGbxUCAAYT
BSsREQVvjwAACnQvAAACbxICAAYRBW+WAAAKLebeFREFdTEAAAETBhEGLAcRBm8kAAAK3H5CAgAE
LSQW0DsAAAEoOwAACtAhAAACKDsAAAooPAAACij8AAAKgEICAAR+QgIABHv9AAAKfkICAAQCfi0A
AApvSAIABm8BAQAKbwIBAAoTBStNfkMCAAQtJR8Q0CgAAAIoOwAACtAhAAACKDsAAAooPAAACihc
AQAKgEMCAAR+QwIABHtdAQAKfkMCAAQRBW+PAAAKb14BAApvxQEABiYRBW+WAAAKLareFREFdTEA
AAETBhEGLAcRBm8kAAAK3H5EAgAELSQW0C4AAAIoOwAACtAhAAACKDsAAAooPAAACig9AAAKgEQC
AAR+RAIABHs+AAAKfkQCAAQCb0cCAAYXjFkAAAECb1QCAAZv4AEABoxZAAABb+sBAAZvPwAACg1+
RQIABC0kFtAuAAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoBFAgAEfkUCAAR7PgAACn5FAgAE
Am9HAgAGAm9UAgAGbwMCAAZv6QEABoxZAAABAm9UAgAGb+IBAAZv6QEABoxZAAABb+sBAAZvPwAA
ChMEAgkRBG9QAgAGb+8BAAYgvu///4w6AAACb+0BAAYm3gMm3gAqAEFMAAACAAAANQEAAB4AAABT
AQAAFQAAAAAAAAACAAAAuQEAAFoAAAATAgAAFQAAAAAAAAAAAAAAKAEAAPcBAAAfAwAAAwAAABQA
AAEbMAUA8AAAAA8AABF+RgIABC0kFtAuAAACKDsAAArQIQAAAig7AAAKKDwAAAooPQAACoBGAgAE
fkYCAAR7PgAACn5GAgAEAm9HAgAGF4xZAAABAm9UAgAGb+ABAAaMWQAAAW/rAQAGbz8AAAoKAm9H
AgAGHwt+LQAACm8FAgAGCwIGB29QAgAGfi0AAApv5gEABiZ+RwIABC0kFtAuAAACKDsAAArQIQAA
Aig7AAAKKDwAAAooPQAACoBHAgAEfkcCAAR7PgAACn5HAgAEA29HAgAGF4xZAAABF4xZAAABb+sB
AAZvPwAACgwDCH4tAAAKb0wCAAbeAybeACoBEAAAAAAAAOzsAAMUAAABEzARAOoBAABAAAARcrsE
AHADKLABAAYKBjnWAQAAFgs4uQEAAH5MAgAELSwWH1PQIQAAAig7AAAKF41bAAABJRYWFChNAAAK
oiicAAAKKJ0AAAqATAIABH5MAgAEe54AAAp+TAIABH5LAgAELTYWHw3QIQAAAig7AAAKGI1bAAAB
JRYWFChNAAAKoiUXFxQoTQAACqIonwAACihkAAAKgEsCAAR+SwIABHtlAAAKfksCAAR+SgIABC0w
FnLPCQBwFNAhAAACKDsAAAoXjVsAAAElFhYUKE0AAAqiKE4AAAooUgAACoBKAgAEfkoCAAR7UwAA
Cn5KAgAEfkkCAAQtOxZy3wkAcBTQIQAAAig7AAAKGI1bAAABJRYfIRQoTQAACqIlFxYUKE0AAAqi
KE4AAAooogAACoBJAgAEfkkCAAR7owAACn5JAgAE0CMAAAIoOwAACn5IAgAELS8WcgEFAHDQIQAA
Aig7AAAKF41bAAABJRYWFChNAAAKoihRAAAKKFIAAAqASAIABH5IAgAEe1MAAAp+SAIABAZvRwIA
BgcXWIxZAAABG4xZAAABb+sBAAZvVAAACm+kAAAKb1QAAAoCbz4CAAZvJwAACm9mAAAKb6YAAAos
AhcqBxdYCwcGb1QCAAZvAwIABm/pAQAGPzH+//8WKgAAGzAPAGEDAABBAAARco4PAHACKLABAAYK
BjmIAQAAFws4awEAAH5QAgAELSwWH1PQIQAAAig7AAAKF41bAAABJRYWFChNAAAKoiicAAAKKJ0A
AAqAUAIABH5QAgAEe54AAAp+UAIABH5PAgAELTYWHw3QIQAAAig7AAAKGI1bAAABJRYWFChNAAAK
oiUXFxQoTQAACqIonwAACihkAAAKgE8CAAR+TwIABHtlAAAKfk8CAAR+TgIABC07FnLfCQBwFNAh
AAACKDsAAAoYjVsAAAElFh8hFChNAAAKoiUXFhQoTQAACqIoTgAACiiiAAAKgE4CAAR+TgIABHuj
AAAKfk4CAATQIwAAAig7AAAKfk0CAAQtLxZyAQUAcNAhAAACKDsAAAoXjVsAAAElFhYUKE0AAAqi
KFEAAAooUgAACoBNAgAEfk0CAAR7UwAACn5NAgAEBm9HAgAGB4xZAAABGIxZAAABb+sBAAZvVAAA
Cm+kAAAKA29mAAAKb6YAAAosCyDMoAEADN3fAQAABxdYCwcGb1QCAAZvAwIABm/pAQAGPn/+//9y
uwQAcAIosAEABgoGOYUBAAAXDThoAQAAflQCAAQtLBYfU9AhAAACKDsAAAoXjVsAAAElFhYUKE0A
AAqiKJwAAAoonQAACoBUAgAEflQCAAR7ngAACn5UAgAEflMCAAQtNhYfDdAhAAACKDsAAAoYjVsA
AAElFhYUKE0AAAqiJRcXFChNAAAKoiifAAAKKGQAAAqAUwIABH5TAgAEe2UAAAp+UwIABH5SAgAE
LTsWct8JAHAU0CEAAAIoOwAAChiNWwAAASUWHyEUKE0AAAqiJRcWFChNAAAKoihOAAAKKKIAAAqA
UgIABH5SAgAEe6MAAAp+UgIABNAjAAACKDsAAAp+UQIABC0vFnIBBQBw0CEAAAIoOwAACheNWwAA
ASUWFhQoTQAACqIoUQAACihSAAAKgFECAAR+UQIABHtTAAAKflECAAQGb0cCAAYJjFkAAAEbjFkA
AAFv6wEABm9UAAAKb6QAAAoDb2YAAApvpgAACiwIIM6gAQAM3kgJF1gNCQZvVAIABm8DAgAGb+kB
AAY+gv7//wNyYBAAcChDAAAKAiiwAQAGCgYsCCDNoAEADN4R3gkmIMygAQAM3gYgzKABACoIKgAA
AEEcAAAAAAAAAAAAAFADAABQAwAACQAAABQAAAEbMAMAKAAAAEIAABECbyMAAAoKBm9fAQAKAzIJ
BhYDb2ABAAoKBgveCSZyewUAcAveAAcqARAAAAAAAAAdHQAJFAAAARMwBwCSAAAAQwAAEQMCKLAB
AAYKBi1/flUCAAQtJBbQNgAAAig7AAAK0CEAAAIoOwAACig8AAAKKEsAAAqAVQIABH5VAgAEe0wA
AAp+VQIABAJvOAIABn4tAAAKfi0AAAp+LQAACn4tAAAKbxkCAAZvVgAACgsHAx8ZKK4BAAZvPwIA
BgQtBwcWb0QCAAYHbzwCAAYHKgZvPAIABgYqAAAbMAIAVwAAACQAABEUCgNvOAIABm8cAgAGCysq
B2+PAAAKdDYAAAIMCG8+AgAGbycAAAoCbycAAAooKAAACiwECAreHRQKB2+WAAAKLc7eEQd1MQAA
AQ0JLAYJbyQAAArcBioAARAAAAIADgA2RAARAAAAABswEQBWBAAARAAAEQJvVAIABn4tAAAKfi0A
AAoXfi0AAAp+LQAACm/VAQAGCnNhAQAKC3NhAQAKDAYXjVQAAAElFh86nW86AAAKKBUAACsXjVQA
AAElFh8knW86AAAKflkCAAQlLRcmflgCAAT+BqMCAAZz1gAACiWAWQIABCgZAAArKA8AACsNBxII
/hUbAAACEggJFpooXQEABhIICReaKGIBAAooXwEABhEIb2MBAAoGF41UAAABJRYfOp1vOgAACigh
AAArF41UAAABJRYfJJ1vOgAACn5aAgAEJS0XJn5YAgAE/gakAgAGc9YAAAolgFoCAAQoGQAAKygP
AAArEwQIEgj+FRsAAAISCBEEFpooXQEABhIIEQQXmihiAQAKKF8BAAYRCG9jAQAKAn4tAAAKfi0A
AAoWjFoAAAF+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAACn4tAAAKfi0AAAp+LQAA
Cn4tAAAKfi0AAAp+LQAACm9WAgAGc7MAAAomflYCAAQtJBbQOwAAASg7AAAK0CEAAAIoOwAACig8
AAAKKPwAAAqAVgIABH5WAgAEe/0AAAp+VgIABAJ+LQAACm9IAgAGbwEBAApvAgEAChMJOFcBAAB+
VwIABC0lHxDQKAAAAig7AAAK0CEAAAIoOwAACig8AAAKKFwBAAqAVwIABH5XAgAEe10BAAp+VwIA
BBEJb48AAApvXgEAChMKEQpvxwEABn4tAAAKfi0AAAoXfi0AAAp+LQAACm/VAQAGF41UAAABJRYf
JJ1vOgAACn5bAgAEJS0XJn5YAgAE/galAgAGc9YAAAolgFsCAAQoGQAAKygPAAArEwsHEgj+FRsA
AAISCBELFpooXQEABhIIEQsXmihiAQAKKF8BAAYRCG9jAQAKEQpvwwEABn4tAAAKfi0AAAoXfi0A
AAp+LQAACm/VAQAGF41UAAABJRYfJJ1vOgAACn5cAgAEJS0XJn5YAgAE/gamAgAGc9YAAAolgFwC
AAQoGQAAKygPAAArEwsIEgj+FRsAAAISCBELFpooXQEABhIIEQsXmihiAQAKKF8BAAYRCG9jAQAK
EQlvlgAACjqd/v//3hURCXUxAAABEwwRDCwHEQxvJAAACtwHfl0CAAQlLRcmflgCAAT+BqcCAAZz
ZQEACiWAXQIABCgiAAArfl4CAAQlLRcmflgCAAT+BqgCAAZzZgEACiWAXgIABCgjAAArKCQAACsT
BQh+XwIABCUtFyZ+WAIABP4GqQIABnNmAQAKJYBfAgAEKCUAACt+YAIABCUtFyZ+WAIABP4GqgIA
BnNlAQAKJYBgAgAEKCYAACsoJwAAKxMIEggoXAEABhMGCH5hAgAEJS0XJn5YAgAE/garAgAGc2YB
AAolgGECAAQoJQAAKygnAAArEwcCEgUoXAEABhIFKF4BAAaMWQAAASjBAAAKEQYSByheAQAGjFkA
AAEowQAACm9QAgAGKgAAQRwAAAIAAADQAQAAagEAADoDAAAVAAAAAAAAAF4DUG9oAQAKBG9pAQAK
A1AFFG9qAQAKKhswAQAVAAAAEwAAEQJvIwAACihiAQAKCt4FJhYK3gAGKgAAAAEQAAAAAAAADg4A
BRQAAAEbMAEAGQAAAEUAABECbyMAAAooawEACgreCSZyewUAcAreAAYqAAAAARAAAAAAAAAODgAJ
FAAAARswAQAWAAAARgAAEQIoKQEACgoGLAYGbyoBAAreAybeACoAAAEQAAAAAAAAEhIAAxQAAAEb
MAIAOwAAAEcAABECc2wBAAoK0FsAABsoOwAACgNzbQEACnNuAQAKBm9vAQAKdFsAABsL3g8GLAYG
byQAAArcJhQL3gAHKgABHAAAAgAHACMqAAoAAAAAAAAAADQ0AAUUAAABGzABAB0AAABIAAAREgD+
FUAAAAECbyMAAAooMQEACgveBSYGC94AByoAAAABEAAAAAAIAA4WAAUUAAABGzABABAAAAACAAAR
AihwAQAKCt4FJhYK3gAGKgEQAAAAAAAACQkABRQAAAEbMAIAPQAAAAIAABECb3EBAApvJwAACnLb
GQBwKCgAAAotFwJvcQEACm8nAAAKcvcHAHAoKAAACiwEFwreCRYK3gUmFgreAAYqAAAAARAAAAAA
AAA2NgAFFAAAATYCbyMAAAoXKL0BAAYqNgJvIwAAChcovgEABioTMAUAegAAAEkAABEocgEACgJv
cwEACgty5RkAcAwDLB5zdAEACiUocgEACghvcwEACm91AQAKCm92AQAKKwwocgEACghvcwEACgpz
dwEACiUGb3gBAAolGG95AQAKJRhvegEACiVvewEACgcWB45pb3wBAAoNb30BAAoJFgmOaSh+AQAK
KgAAEzAFAHYAAABJAAARAih/AQAKC3LlGQBwDAMsHnN0AQAKJShyAQAKCG9zAQAKb3UBAAoKb3YB
AAorDChyAQAKCG9zAQAKCnN3AQAKJQZveAEACiUYb3kBAAolGG96AQAKJW+AAQAKBxYHjmlvfAEA
Cg1vfQEACihyAQAKCW+BAQAKKgAAGzAGAAEBAABKAAARc7MBAAYKc4IBAAoLOI8AAAACb2gBAApv
gwEAChaaKCsAAAoNA2+EAQAKEwQRBCxpEQRvugAACm/CAAAKEwUrOREFb48AAAp0MgAAARMGBhID
EQZvwwAAChaabyMAAAoDEQZvwwAAChaabyMAAApvRQAAChRvsgEABhEFb5YAAAotvt4VEQV1MQAA
ARMHEQcsBxEHbyQAAArcBwlvhQEACgNvIQAACjpm////c4YBAAoMB2+HAQAKEwgrJRIIKIgBAAoT
CQgRCdBeAAAbKDsAAAooiQEACqVeAAAbb4oBAAoSCCiLAQAKLdLeDhII/hZdAAAbbyQAAArcA28Q
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
sgzdAIQAPAEBABAAOkOyDDkAhwBCAQEAEAB6ULIMOQCOAFEBCAEQAH5CsgzdAJMAXAEBABAAqiOy
DDkAlQBgAQEAEACnR7IMOQCXAGUBAQAQAJoPsgw5AJ0AcgEBABAAmzuyDDkAogB9AQEAEAB1ILIM
OQCnAIgBgQEQAM80sgw5ALEAnQEBABAAgDayDDkAsQCyAYEBEAAPQbIMOQCxALQBAQEAAPwq0SiV
ALEAwgGhEAAAQ0R/MgAAtwDCAaEQAAB2S38yAAC3AMIBoRAAAEw1fzIAALcAwgGhEAAAnEZ/MgAA
twDCAaEQAAAqRH8yAAC3AMgBoRAAAFFLfzIAALcAyAGhEAAAikt/MgAAtwDIAaEQAABEPH8yAAC3
AMsBoRAAANMifzIAALcAzgGhEAAA3SF/MgAAtwDUAaEQAABKJ38yAAC3ABECoRAAAKI+fzIAALcA
EwKhEAAAYUN/MgAAtwAYAqEQAABgMX8yAAC3AB8CoRAAADREfzIAALcAHwKhEAAAYUt/MgAAtwAf
AqEQAAD7P38yAAC3AB8CoRAAANxIfzIAALcAJQIBAQAAACh/MpUAtwAlAgEBAAD1J38ylQDDACUC
AQEAANBFfzKVAM4AJQIBAQAAfDd/MpUA0QAlAgEBAABcNH8ylQDUACUCAQEAAEwofzKVANgAJQIB
AQAA2DR/MpUA2wAlAgEBAACTN38ylQDeACUCAQEAAJBFfzKVAOEAJQIBAQAAzTV/MpUA5AAlAgEB
AADfJ38ylQDqACUCAQEAAC8gfzKVAPcAJQIBAQAAFCR/MpUA+gAlAgEBAADaIH8ylQD9ACUCAQEA
AGo3fzKVAAEBJQIBAQAAazp/MpUABAElAgEBAADGUH8ylQAHASUCoRAAAEs1fzIAAAsBJQKhEAAA
UTF/MgAACwEzAqEQAAAWSH8yAAALATsCoRAAAAEA6joAAAsBWQKDARAABwoAADkACwFbAgMBEAD2
AQAAOQAMAVsCAyEQANQPAAA5AA0BXQKDARAASwYAADkAEQFiAoMBEAA9CQAAOQAUAWICgwEQABwK
AAA5ABYBYgIDAQAAhUMAAJUAJAFiAgMBEACWAgAAOQAnAWICAyEQANQPAAA5ACgBZAIDARAAGAEA
ADkALAFpAgMBEABSBAAAOQAtAWsCAwEQAKEGAAA5AC4BbQKDARAA4AcAADkALwFvAoMBEAAlCQAA
OQA3AW8CgwEQAPcJAAA5ADkBbwIDARAArwEAADkAQAFvAgMhEADUDwAAOQBBAXECgwEQAAMLAAA5
AFMBhAKDARAAvwsAADkAVQGEAgMBEABqAgAAOQB3AYQCAwEQALoEAAA5AHgBhgKDARAAogwAADkA
eQGIAgMBEADSAgAAOQCCAYgCAwEQABkFAAA5AIMBiQKDARAAVw0AADkAhQGMAgMBEAACAQAAOQCJ
AYwCAwEQADwEAAA5AIoBjgKDARAAMwYAADkAiwGQAoMBEADwBwAAOQCNAZACgwEQAAcKAAA5AI8B
kAKDARAAnQMAADkAlQGQAoMBEAADCwAAOQCuAZACgwEQAL8LAAA5ALIBkAILARAA3TMAAN0AswGQ
AoMBEABnDQAAOQC3AZgCAwEQAEkBAAA5ANoBmAKDARAARQkAADkA2wGaAgMhEADUDwAAOQDpAZoC
gwEQADEKAAA5AOsBnQKDARAAIAsAADkA7gGdAgMBEAAyAgAAOQDvAZ0CgwEQAOkLAAA5APMBnwKD
ARAAbw0AADkA/QGfAgMBEADoAgAAOQD+AZ8CgwEQACgLAAA5AAACoQKDARAAzQgAADkAAgKhAoMB
EADSCQAAOQAXAqECgwEQAJwLAAA5AB0CoQKDARAAdgwAADkAJwKhAoMBEAAzDQAAOQAtAqECgwEQ
AKkNAAA5ADECoQKDARAAXQAAADkANgKhAoMBEACNAwAAOQA7AqECgwEQAA4GAAA5AD4CoQKDARAA
0AcAADkAQAKhAoMBEAD5CAAAOQBGAqECgwEQAOcJAAA5AEgCoQKDARAA5QoAADkATQKhAoMBEACS
DAAAOQBVAqECgwEQAIcAAAA5AFYCoQIDIRAA1A8AADkAWAKhAlGAJjvFD1GA5DHFD1GAKSDFD1GA
vTPFDwEAaRjIDwEASxhoAwEAJBrNDwEAUBnRDwEALxnVDwEAjRNoAwEAnCVoAwYAiBDZDwEAhiNo
AwEAhhrcDwEAEh9oAwEA2BtoAwEAbhdoAwEAphloAwEAiBdoAwEAjRNoAwEAohdoAwEAyBPFDwEA
UxPFDwEAkRVoAwEA9R7FDwEACx1oAwEASxRoAwEAoBbFDwEAFBhoAwEAOBPFDwEAwhdoAwEA5BPF
DwEAABTFDwEAxy5oAwEAzEtoAwEAPBFoAwEAkCVoAwEA0xBoAwEANUZoAwEA8w9oAxEAaTTkDxEA
TCnpDxEAUiDuDwEAaRjIDwEAgxzyDwEApRzyDwEAuxr3DwEA7Bz/DwEAyBxoAwEAiRloAwEA1RoH
EAEAYxsPEAEAtRQXEAEAbxkcEAEAnB0HEAEAvR0PEAEAFx7FDwEA4R3FDwEA/hRoAwEAnRhoAwEA
GhRoAwEAeRsPEAEA+B3FDwEA4R3FDwEAwhdoAwEAQxLFDwEAaxLFDwEALxLFDwEAVxLFDwEAmxTF
DwEARBZoAwEALhxoAwEAiRloAwEACRpoAwEADhxoAwEAFBhoAwEA4xloAwEASR0gEAEACBMkEAEA
YR0oEAEA5BPFDwEAABTFDwEAJBNoAwEA/hRoAwEAFBhoAwEAaBzyDwEAaRjIDwYAnEwrEAEAUBnR
DwEAFBVoAwEA7hBoAwEAnCVoAwEAZxRoAwEA5hRoAwEA8hJoAwEASxtoAwEAghRoAwEADxloAwEA
JBPFDwEAmB5oAwEA/hRoAwEASxRoAwEAfB0vEAEA9xhoAwEA0BQ3EAEAiRloAwEASxxoAwEAMR47
EAEAsh5oAwEASxhoAwEAwhloAwEA9xcoEAEAKh0oEAEAsRVoAwEALxnVDwEA1BJoAwEAChs/EAEA
jRNoAwEA8htHEAEAuhtoAwEAtBhoAwEA/hRoAwEA2RhoAwEAwhdoAwEA2RdoAwEAthbFDwEAmhvF
DwEAFhdoAwEAXh5oAwEA/hRoAwEAnRhoAwEAUBVoAwEASRpoAwEAex5oAwEAJBPFDwEANhVoAwEA
BhZoAwEAMhgoEAEA1B4oEAEANhfFDwEAaBooEAEANhVoAwEAIRZoAwEASRpoAwEAfRZLEAEAbxVo
AwEA9xhoAwEA4R3FDwEANhVoAwEALRtQEAEARBZoAwEABhZoAwEAiRloAwEAex5oAwEADhxoAwEA
7hpYEAEA5BPFDwEAABTFDwEARBZoAwEAfxLFDwEAqBPFDwEA/hRoAwEAnRhoAwEAgxgoEAEAcRPF
DwEAoxpoAwEAYBZoAwEAlxJoAwEA6hVoAwEAVBdoAwEA8hbFDwEAsRVoAwEAMRRoAwEAtxJoAwEA
NhVoAwEALhxgEAYGgA7FD1aAai5kEFaA5ClkEFaAYS5kEFaAdCNkEFaAAhJkEAYGgA7FD1aAkU9p
EFaAUEVpEFaA/klpEFaAxUJpEFaAnz9pEFaAKT5pEFaAFz9pEFaAgUVpEFaAvUFpEFaApB9pEFaA
sh9pEAYGgA7FD1aAtj9uEFaAk0NuEFaA8jxuEFaAZjNuEFaAp0NuEFaAICNuEFaAlUFuEFaAdkFu
EFaAgzVuEFaAWDVuEAYGgA7FD1aA0DhzEFaAHilzEAYGgA7FD1aAb0l4EFaAxjh4EAYGgA7FD1aA
FT19EFaAykN9EFaAJD99EAYGgA7FD1aA9w2CEFaAVQ6CEAYGgA7FD1aAgy6HEFaA/E2HEAYGgA7F
D1aAXDiMEFaAg0mMEAYGgA7FD1aAJEyREFaAvyOREAYGgA7FD1aArxGWEFaAgCCWEFaAcU+WEFaA
LieWEFaAUkaWEAYGgA7FD1aA8DKbEFaAvCabEFaAoUKbEFaAyUGbEFaAkkKbEFaABT2bEFaAukOb
EFaACT+bEFaAiz+bEFaAcTWbEFaA4EKbEFaAAEObEAYGgA7FD1aA+TugEFaAnzSgEAYGgA7FD1aA
wgOlEFaAxwOlEAYGgA7FD1aAdy6qEFaA4yGqEFaA+RGqEAYGgA7FD1aAj02vEFaAhESvEAYGgA7F
D1aAA0G0EFaAR0W0EAYGgA7FD1aAMiO5EFaAfzS5EFaAjTS5EBYAhgO+EAYAJEtoAzYAdw3OEBYA
xQHTEBYALgHTEBYADALTEBYAhgPcEBYAlQXqEBYAdwf9EBYAhgO+EBYAlQW+EBYAhgMNERYAlQUN
ERYAdwcNERYA1AgNERYA2QkNERYA1woNERYAowu+EBYAfQwNERYAOg0NERYAsA0NERYAZQANERYA
lQMNERYAFga+EBYA2AcNEQYGgA7FD1aAV0IcEVaA+igcEQYAjkVoAzYAdw0hERYAgAImERYA0AQv
ERYAkAgvEQYAbCU4EQYASiU4EQYASiU4ERYAhgPcEBYAlQU9ERYAdwfcEBYA1AhNERYA2QlcERYA
1wrcEBYAows9ERYAfQxqERYAhgO+EBYAlQW+EBYAhgPcEBYAlQU9ERYAdwd4ERYA1AjcEBYA2Qk9
ERYA1wpqERYAowsNEQYANyRoAzYAdw2LERYAiwGQERYAdASZERYAPgijERYASAKQERYAmASZERYA
0AaQERYAbgiZERYAjgqjERYAVAyjERYAEQ2sERYAhw2sERYAOQCsERYAqwK1ERYA8gS+ERYApgjG
ERYAsArGERYAHATPERYAhgO+EBYAlQW+EBYAhgPcEBYAlQU9ERYAdwd4ERYA1Ai+EBYA2Qm+EBYA
1wrcEBYAows9ERYAfQxqERYAOg0NERYAsA2+EBYAZQANERYAlQO+EBYAFgbcEBYA2Ac9ERYAAQlq
ERYA7wkNERYA7Qq+EBYAtwu+EBYAmgw9ERYATw09ERYAjwDcEBYApQNcERYAKwbcEBYA6AdqERYA
LQkNERYA/wm+EBYACwu+EBYAxws9ERYAqgw9ERYAXw3cEBYAuwBcERYArQPcEBYAOwZqERYA+AcN
EQYANyRoAwYANyRoAxYAhgPcEBYAlQU9ERYAdwdqERYA1AjYERYA2QnoERYA1wr4ERYAowvYERYA
fQzoERYAOg2+EAYALT8GEgYADTHFDwYA8QUNEhYAhgPYERYAlQXoERYAdwfcEBYA1Ai+EAYA6S4G
EgYAjkVoAxYAhgO+EBYAlQW+EBYAhgO+EBYAlQW+EBYAhgPcEBYAlQU9ERYAdwfcEBYA1AhNERYA
2QlcERYA1woNERYAhgPcEBYAlQU9ERYAdwdqERYA1Ai+EBYA2Qm+EBYA1wq+EBYAowu+EBYAfQzc
EBYAOg09ERYAsA3cEBYAZQBqERYAlQMSEhYAFgZcERYA2AfcEBYAAQkhEhYA7wkwEhYA7QpqERYA
twsSEhYAmgxcERYATw3cEBYAjwBqERYApQM9ERYAKwZAEhYA6AfcEBYALQlqERYAhgO+EBYAlQUS
EhYAdwdcERYA1AhqERYAhgO+EAEAyxVoAwEA1BbFDwEASR7FDwEAwhdoAxYAhgO+EBYAlQUSEhYA
dwdcERYA1Ai+EBYA2QncEBYA1wpOEhYAowteEhYAfQzcEBYAOg3cEBYAsA1tEhYAZQASEhYAlQPc
EBYAFgbcEBYA2AdtEhYAAQkSEhYA7wkSEhYA7QpcERYAtwtcERYAmgy+EBYATw3cEBYAjwBqERYA
pQO+EBYAKwbcEBYA6AdqERYALQm+EBYA/wncEBYACwtqERYAxwu+EBYAqgzcEBYAXw1qERYAuwC+
EBYArQMSEhYAOwZcERYA+Af9EBYANQn9EAYAcCVoAxYAhgO+EBYAlQW+EBYAdwcSEhYA1AhcERYA
2QlNERYA1wpcERYAowu+EBYAfQy+EBYAOg2+EBYAsA0SEhYAZQBcERYAlQMNERYAFgZcERYA2Ae+
EDYAdw2AEhYAXwG+ERYAhgNqERYAlQUwEhYAdweFEhYAhgP9EAYArD+VEgYAnFCZEgYA0Q/IDwYA
5kjyDxYAhgPcEBYAlQUhEhYAdwedEhYA1AisEhYA2QlqERYA1wrcEBYAowtOEhYAfQxqERYAOg28
EhYAsA28EhYAhgP9EAYAnFCZEgYArD+VEhYAhgO+EBYAlQW+EBYAhgO+EBYAlQUSEhYAdwdcERYA
1Ai+EBYA2QlqERYA1wq+EBYAowtqERYAfQy+EBYAOg1qERYAsA2+EBYAZQBqERYAlQO+EBYAFgZq
ERYA2Ae+EBYAAQlqERYA7wm+EBYA7QoSEhYAtwtcERYAmgxqERYATw0SEhYAjwBcERYAhgPcEBYA
lQXcEBYAdwdqERYA1AjcEBYA2QncEBYA1wpqERYAhgPcEBYAlQU9ERYAdwfcEBYA1AhNERYA2Qlc
ERYA1wrcEBYAows9ERYAfQzcEBYAOg3qEBYAsA39EBYAhgP9EBYAlQW+EBYAdwfKEhYA1AhcERYA
2Qm+EBYA1wq+EBYAhgO+EBYAlQW+EBYAdwe+EBYA1Ai+EBYAhgPcEBYAlQU9ERYAdwfcEBYA1AhN
ERYA2QlcERYAhgPcEBYAlQU9ERYAdwfcEBYA1AhNERYA2QlcERYAhgO+EBYAlQXKEhYAdwdcERYA
hgO+EBYAlQVcERYAhgO+EBYAlQW+EBYAdwcwEhYA1AjZEhYA2Qm+EBYA1wq+EBYAhgO+EBYAlQW+
EBYAhgPcEBYAlQU9ERYAdwfcEBYA1AgNERYA2QlcERYAhgPcEBYAlQU9ERYAdwcNERYA1AhcERYA
2QncEBYA1wo9ERYAowsNERYAfQxcERYAhgP9EBYAhgMwEhYAlQXZEjYAdw3pEhYA3QC+ERYA6gO+
ERYA/gu+ERYA3wy+ERYAbwbuEhYAAAj3EhYATQn3EhYAOQruEhYAMAv3EgAAAACAAJEgrxAAEwEA
UCAAAAAAhghBMQcTAwBYIAAAAACGCE4xDRMDAGEgAAAAAIEIhzBYAAQAaSAAAAAAgQiYMBAABABy
IAAAAACBCFw7FBMFAHogAAAAAIEIdDsZEwUAgyAAAAAAgQgONx8TBgCLIAAAAACBCCA3JBMGAJQg
AAAAAIEI1TYqEwcAnCAAAAAAgQjpNi8TBwClIAAAAACGCJMQWAAIAK0gAAAAAIYIoRAQAAgAuCAA
AAAAhhiPPDUTCQBIIgAAAACGAF9CTwANAKQiAAAAAIEAnyMBAA0AqCIAAAAAgQC0KgEADQD0JQAA
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
AQAvAkHxAAAAAIMAagMBAC8CdzYAAAAAhhiPPAEALwJg8QAAAACDAFQDAQAvAnPxAAAAAJEYlTyF
Ey8CdzYAAAAAhhiPPAEALwJ/8QAAAACDAOcAwgYvAn/xAAAAAIMA9APCBjACf/EAAAAAgwAIDMIG
MQJ/8QAAAACDAOkMwgYyApHxAAAAAIMAeQb+FzMCmvEAAAAAgwAKCAQYNAKj8QAAAACDAFcJBBg1
ApHxAAAAAIMAQwr+FzYCmvEAAAAAgwA6CwQYNwIAAAEASh8CAAIA4BAAAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA7hAAAAIAQzcAAAMA/jYAAAQAnSUAAAEAWy4AAAEAdh8A
AAEAXE0QEAIA8kcAAAEAJEsAAAIAyU8AAAMA0ioAAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAAjAAAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEA5kgAAAEA5kgAAAIAaTEAAAEAtU4AAAIAh04AAAEAp0wAAAEAtU4A
AAIAh04AAAMA0iEAAAQAnCEAAAEAQUwAAAIAvB8AAAMA7iEAAAQAtU4AAAEA4k0AAAIAODUAAAMA
9E0AAAQALTUAAAUAtU4AAAEAlyIAAAIAzUAAAAEAlyIAAAIAxU0AAAMAzUAAAAQAe0AAAAEArE4A
AAEArE4AAAEArE4AAAEAeD8AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA5kgAAAIAaTEAAAMAnSUAAAEA
2SMAAAEAykYAAAEAykYAAAEAykYAAAEAayQAAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEABRAAAAEA/TYQEAIARUYAAAEASh8CAAIA4BAAAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAjyQAAAEAlCMAAAEA0Q8AAAIASiYAAAEAwiQCAAIAyBAAAAEA5zgAAAEAciYAAAEAAlAA
AAEAWy4AAAEA5zgAAAIA0Q8AAAMATUUAAAQAsyYAAAUAXzcAAAYArE8AAAEA0Q8AAAEAnFAAAAIA
7TgAAAMA0Q8AAAEA5kgAAAIAaTEAAAEAnSUAAAEAwiQAAAIAd0MCAAMAyBAAAAEAnFAAAAEAnFAA
AAIA0Q8AAAMA5kgAAAEA5kgAAAIABiUAAAMARUYAAAEA5kgAAAIABiUAAAEA5kgAAAIABiUAAAEA
5kgAAAIABiUAAAEA5kgAAAIABiUAAAEAnFAAAAEABiUAAAEAaTEAAAIASiYAAAEA5zgAAAIA0Q8A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAQzcAAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4A
AAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEA
Wy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAWy4AAAEAwi8A
AAEAwzMAAAIAQzcAAAEAaTEAAAEARiYAAAIAaTEAAAEAHQ8AAAIA5zcAAAEA5kgAAAIAaTEAAAEA
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
CQPtKQEAAQPtKQEAZAJfKnsBZALwSIcBbAIXIpYBmQJaQKQKeQLhLrYKeQL4L7cB0QOPPN4A2QOP
PMEK2QMYK8gK2QM7TAEA2QPZOM8KdAJfKnsBdALwSIcBfAJfKnsBfALwSIcBhAIXIu0CjAIXImYC
lAJfKnsBlALwSIcBnAIXIpYBsQOTETIL8QHSMzkL8QGpMNIA8QGSSdIA+QNDK0QLAQLYL2cLAQQj
IWwLCQSPPHILEQTwLnkL8QFyLn8LGQTQJKoLuQPST9IAyQMDJ8gLrACPPAEArADGEYkCQQFcKQoM
yQLYLxAMpAJfKnsBpALwSIcBrAIXIu0CtAJfKnsBtALwSIcBvAIXIpYBeQLnMNIAeQL4L6cMxAKP
PAEAyQNDBuMMxALGEYkCmQIMSgQDzAKPPN4A1AKPPN4AmQK8Tv4McQBeKCMN8QA/USgNKQQiLi8N
yQPYL6oLCQKPPBAAMQSPPBAAOQSPPFQNOQSbLl0NyQN1NG0NEQIOLlgASQTWDHwNSQTqPoINUQSP
PAEAWQQwMIgNWQQrOQEAYQSPPAEAaQQdT48NaQS6IJUNaQQJL5wNaQSsPKMNgQQPMakNaQQrOQEA
yQN6L7INyQNpL7oNaQScPKMNSQTuL8AN5AKPPAEA8QDVQ/ANIQIeIvYN5ALGEYkC3AKPPAEA5AJ3
PCAB7AIySy8ByQOnJwUO3ALGEYkC7AKGTU8AHADrM0YG/AKPPN4AHADAHxkOCAAEAEAOCAAIAEUO
CAAMAEoOCAAQAE8OAgBBAP4ODgA5AgAPCADIAlQOCADMAlkOCADQAl4OCADUAmMOCADYAmgOCADg
Al4OCADkAm0OCADoAlkOCADsAnIOCADwAncOCAD0AnwOCAD4AoEOCAD8AoYOCAAAA4sOCAAEA5AO
CAAIA5UOCAAQA4EOCAAUA3wOCAAYA5oOCAAcA58OCAAgA6QOCAAkA6kOCAAoA64OCAAsA7MOCAAw
A7gOCAA0A70OCAA8A3wOCABAA8IOCABIA8cOCABMA8wOCABUA5oOCABYA6QOCABcA9EOCABkA1kO
CABoA14OCABwA1kOCAB0A14OCAB8A9YOCACAA9sOCACIA3wOCACMA14OCACUA3wOCACYA20OCACc
A4EOCACgA+AOCACkA3IOCACsA+UOCACwA+oOCAC0A+8OCAC4A3cOCAC8A/QOCADAA5oOCADEA6QO
CADIA9EOCADMA4sOCADQA4YOCADUA58OCADYA6kOCADgA3wOCADkA14OCADsA14OCADwA/kOCAD4
A3IOCAD8A14OCAAABHwOCAAIBF4OCAAMBHwOCAAUBHwOCAAYBF4OCAAgBFQOCAAkBFkOCAAoBHwO
CACUBFkOCACYBF4OCACZBAcPAgClBAwPAgDxBAwPAgD5BAwPCABNBV4OCABhBVkOCACZBV4OCACd
BcIOCADdBV4OCABRBuUOCABVBuAOCAA9B14OLgALAF4OLgATACEZLgAbACoZLgAjAEkZLgArAFIZ
LgAzAHsZLgA7AHsZLgBDAIEZLgBLAFIZLgBTAJAZLgBbAHsZLgBjALAZQABrAF4OYABrAF4OgABr
AF4OoABrAF4OoQBrAF4OowBzAF4OwABrAF4OwQBrAF4OwwCDAF4O4ABrAF4O4QBrAF4OAAFrAF4O
AQFrAF4OIAFrAF4OIQFrAF4OQAFrAF4OQQFrAF4OYAFrAF4OgAFrAF4OoAFrAF4OwQFrAF4O4QFr
AF4OAQJrAF4OIQJrAF4OQAJrAF4OQQJrAF4OYAJrAF4OYQJrAF4OgQJrAF4OoQJrAF4OwQJrAF4O
4QJrAF4OAQNrAF4OIQNrAF4OQANrAF4OQQNrAF4OYANrAF4OYQNrAF4OaQOLAEkZgANrAF4OgQNr
AF4OiQOLAEkZoANrAF4OoQNrAF4OwANrAF4OwQNrAF4O4ANrAF4O4QNrAF4OAARrAF4OAQRrAF4O
IARrAF4OIQRrAF4OIwQLAF4OQARrAF4OYARrAF4OYwQLAF4OgARrAF4OgwRrAF4OgwSTAFMcoARr
AF4OowRrAF4OowSbAJ8cowSjAMkcowSrAF4OwARrAF4OwwRrAF4OwwSzANAcwwSTACcd4ARrAF4O
4wRrAF4O4wSbAIAd4wS7AKod4wSrAF4OAwVrAF4OAwWjAMkcAwWbAAoeAwWrAF4OIAVrAF4OIwVr
AF4OIwWbADQeIwWjAMkcIwWrAF4OQAVrAF4OQwVrAF4OQwWzAF4eQwWTALUeYAVrAF4OYQVrAF4O
YwVrAF4OYwWbAA4fYwWjAMkcYwWrAF4OgAVrAF4OgQVrAF4OgwVrAF4OgwWbADgfgwWjAMkcgwWr
AF4OoAVrAF4OoQVrAF4OowVrAF4OowWjAMkcowXLAGIfowWbAHAfowWrAF4OwAVrAF4OwQVrAF4O
wwVrAF4OwwWjAMkcwwXLAGIfwwWbAJofwwWrAF4O4AVrAF4O4QVrAF4O4wVrAF4O4wWjAMkc4wWb
AMQf4wWrAF4OAAZrAF4OAQZrAF4OAwZrAF4OAwajAMkcAwbLAGIfAwabAO4fAwarAF4OIAZrAF4O
IQZrAF4OIwZrAF4OIwabABggIwbLAGIfIwarAF4OQAZrAF4OQQZrAF4OQwZrAF4OQwabAEIgQwa7
AKodQwarAF4OYAZrAF4OYQZrAF4OYwZrAF4OYwabAGwgYwajAMkcYwarAF4OgAZrAF4OgQZrAF4O
gwZrAF4OgwazAJYggwaTAPcgoAZrAF4OoQZrAF4OowZrAF4OowabAFUhowbLAGIfowarAF4OwAZr
AF4OwQZrAF4OwwZrAF4Owwa7AKodwwabAH8hwwarAF4O4AZrAF4O4QZrAF4O4wZrAF4O4waTAKkh
AAdrAF4OAQdrAF4OAwdrAF4OAweTAAEiIAdrAF4OIQdrAF4OIwdrAF4OIweTAFUiQAdrAF4OQQdr
AF4OQwdrAF4OQweTALIiYAdrAF4OYQdrAF4OYwdrAF4OYweTABIjgAdrAF4OgQdrAF4OgwdrAF4O
gweTAGgjoAdrAF4OoQdrAF4OowdrAF4OoweTAMMjwAdrAF4OwQdrAF4OwwdrAF4OwweTACEk4Adr
AF4O4QdrAF4O4wdrAF4O4weTAIEkAAhrAF4OAQhrAF4OAwhrAF4OAwiTANMkIQhrAF4OIwhrAF4O
IwiTADQlQAh7AF4OQQhrAF4OQwhrAF4OQwiTAIklYQhrAF4OYwhrAF4OYwiTAOYlgQhrAF4Ogwhr
AF4OgwiTAEAmoQhrAF4OowhrAF4OowiTAJwmwQhrAF4OwwhrAF4OwwiTAPcm4QhrAF4O4whrAF4O
4wiTAE4nAQlrAF4OAwlrAF4OAwnLAGIfAwmbAIAdAwmrAF4OIQlrAF4OIwlrAF4OIwmbAEIgIwmr
AF4OQQlrAF4OQwlrAF4OQwmbAH8hQwmrAF4OYQlrAF4OYwlrAF4OYwmbAKknYwmrAF4OgAlrAF4O
gQlrAF4OgwlrAF4OoAlrAF4OoQlrAF4OowlrAF4OwAlrAF4OwQlrAF4OwwlrAF4O4AlrAF4O4Qlr
AF4O4wlrAF4OAAprAF4OAQprAF4OAwprAF4OIAprAF4OIQprAF4OIwprAF4OQAprAF4OQQprAF4O
YAprAF4OYQprAF4OYwprAF4OgAprAF4OgQprAF4OgwprAF4OoAprAF4OoQprAF4OowprAF4OwQpr
AF4OwwprAF4O4QprAF4O4wprAF4OAwtrAF4OIQtrAF4OIwtrAF4OQQtrAF4OQwtrAF4OYwtrAF4O
gwtrAF4OoQtrAF4OowtrAF4OwQtrAF4OwwtrAF4O4QtrAF4O4wtrAF4OAQxrAF4OAwxrAF4OIQxr
AF4OIwxrAF4OQQxrAF4OQwxrAF4OYQxrAF4OYwxrAF4OgQxrAF4OgwxrAF4OoQxrAF4OowxrAF4O
wAxrAF4OwQxrAF4OwwxrAF4O4AxrAF4O4QxrAF4O4wxrAF4OAA1rAF4OAQ1rAF4OAw1rAF4OIA1r
AF4OIQ1rAF4OIw1rAF4OQA1rAF4OQQ1rAF4OQw1rAF4OYA1rAF4OYQ1rAF4OYw1rAF4OgA1rAF4O
gQ1rAF4Ogw1rAF4OoA1rAF4OoQ1rAF4OwA1rAF4OwQ1rAF4Oww1rAF4O4A1rAF4O4Q1rAF4O4w1r
AF4OAA5rAF4OAQ5rAF4OAw5rAF4OIA5rAF4OIQ5rAF4OIw5rAF4OQA5rAF4OQQ5rAF4OQw5rAF4O
YA5rAF4OYQ5rAF4OYw5rAF4OgA5rAF4OgQ5rAF4Ogw5rAF4OoA5rAF4OoQ5rAF4Oow5rAF4OwA5r
AF4OwQ5rAF4Oww5rAF4O4A5rAF4O4Q5rAF4O4w5rAF4OAQ9rAF4OAw9rAF4OIA9rAF4OIQ9rAF4O
Iw9rAF4OQA9rAF4OQQ9rAF4OQw9rAF4OYA9rAF4OYQ9rAF4OYw9rAF4OgA9rAF4OgQ9rAF4Ogw9r
AF4OoQ9rAF4Oow9rAF4OwA9rAF4OwQ9rAF4Oww9rAF4O4A9rAF4O4Q9rAF4O4w9rAF4OABBrAF4O
ARBrAF4OAxBrAF4OIBBrAF4OIRBrAF4OIxBrAF4OQBBrAF4OQRBrAF4OQxBrAF4OYBBrAF4OYRBr
AF4OYxBrAF4OgBBrAF4OgRBrAF4OgxBrAF4OoBBrAF4OoRBrAF4OoxBrAF4OwRBrAF4OwxBrAF4O
4BBrAF4O4RBrAF4O4xBrAF4OABFrAF4OARFrAF4OAxFrAF4OIBFrAF4OIRFrAF4OQBFrAF4OQRFr
AF4OYBFrAF4OYRFrAF4OgBFrAF4OgRFrAF4OoBFrAF4OoRFrAF4OwBFrAF4OwRFrAF4O4BFrAF4O
4RFrAF4OABJrAF4OARJrAF4OIBJrAF4OIRJrAF4OQBJrAF4OQRJrAF4OYBJrAF4OYRJrAF4OgBJr
AF4OgRJrAF4OoRJrAF4OwBJrAF4OwRJrAF4O4BJrAF4O4RJrAF4OABNrAF4OARNrAF4OIBNrAF4O
IRNrAF4OQBNrAF4OQRNrAF4OYBNrAF4OYRNrAF4OgBNrAF4OgRNrAF4OoBNrAF4OoRNrAF4OwBNr
AF4OwRNrAF4O4BNrAF4O4RNrAF4OABRrAF4OARRrAF4OCRTDAPgZIBRrAF4OIRRrAF4OKRTDAAoa
QBRrAF4OQRRrAF4OSRTDABMaYBRrAF4OYRRrAF4OaRTDABwagBRrAF4OgRRrAF4OiRTDACUaoBRr
AF4OoRRrAF4OqRTDAC4awBRrAF4OwRRrAF4OyRTDADca4BRrAF4O4RRrAF4O6RTDAFIaABVrAF4O
ARVrAF4OCRXDAG0aIBVrAF4OIRVrAF4OKRXDAHYaQBVrAF4OQRVrAF4OSRXDAH8aYBVrAF4OYRVr
AF4OaRXDAKMagBVrAF4OgRVrAF4OiRXDACUaoBVrAF4OoRVrAF4OqRXDAKwawRVrAF4OyRXDAL4a
4BVrAF4O4RVrAF4O6RXDAMcaABZrAF4OARZrAF4OCRbDANkaIBZrAF4OKRbDAOIaQBZrAF4OSRbD
APQaYBZrAF4OaRbDAP0agBZrAF4OiRbDAAYbqRbDABgbwBZrAF4OyRbDACEb4BZrAF4O6RbDACob
ABdrAF4OCRfDADMbIBdrAF4OKRfDACUaQBdrAF4OSRfDACUaYBdrAF4OaRfDAHsbgBdrAF4OiRfD
ACUaoBdrAF4OqRfDAIQbyRfDAJYb6RfDAJ8bCRjDAMMbKRjDAOcbSRjDAJYbaRjDAAIciRjDAFIa
qRjDAHYayRjDACYc6RjDAAYbCRnDAC8cQBlrAF4OYBlrAF4OgBlrAF4OoBlrAF4OwBlrAF4O4Blr
AF4OABprAF4OIBprAF4OQBprAF4OYBprAF4OgBprAF4OoBprAF4O4BprAF4OABtrAF4OIBtrAF4O
QBtrAF4OYBtrAF4OgBtrAF4OoBtrAF4OwBtrAF4O4BtrAF4OABxrAF4OQBxrAF4OYBxrAF4OoBxr
AF4OwBxrAF4O4BxrAF4OAB1rAF4OIB1rAF4OQB1rAF4OYB1rAF4OgB1rAF4OIB5rAF4OQB5rAF4O
YB5rAF4OgB5rAF4OoB5rAF4OwB5rAF4O4B5rAF4OAB9rAF4OIB9rAF4OQB9rAF4OYB9rAF4OgB9r
AF4OoB9rAF4OwB9rAF4O4B9rAF4OACBrAF4OICBrAF4OQCBrAF4OYCBrAF4OgCBrAF4OoCBrAF4O
wCBrAF4O4CBrAF4OACFrAF4OICFrAF4OQCFrAF4OoCRrAF4OwCRrAF4O4CRrAF4OACVrAF4OICVr
AF4OQCVrAF4OYCVrAF4OgCVrAF4OoCVrAF4OwCVrAF4O4CVrAF4OACZrAF4OICZrAF4OQCZrAF4O
YCZrAF4OgCZrAF4O4CZrAF4OACdrAF4OICdrAF4OQCdrAF4OgCdrAF4OoCdrAF4OwCdrAF4O4Cdr
AF4OAChrAF4OIChrAF4OQChrAF4OYChrAF4OgChrAF4OoChrAF4OwChrAF4O4ChrAF4OAClrAF4O
IClrAF4OQClrAF4OYClrAF4OgClrAF4OoClrAF4OwClrAF4O4ClrAF4OICprAF4OQCprAF4OYCpr
AF4OgCprAF4OoCprAF4OwCprAF4O4CprAF4OACtrAF4OICtrAF4OQCtrAF4OgCtrAF4OoCtrAF4O
wCtrAF4O4CtrAF4OACxrAF4OICxrAF4OQCxrAF4OYCxrAF4OoCxrAF4OwCxrAF4O4CxrAF4OAC1r
AF4OIC1rAF4OQC1rAF4OYC1rAF4OgC1rAF4OoC1rAF4OwC1rAF4O4C1rAF4OAC5rAF4OQC5rAF4O
YC5rAF4OgC5rAF4OoC5rAF4OwC5rAF4O4C5rAF4OAC9rAF4OIC9rAF4OQC9rAF4OYC9rAF4OoC9r
AF4OwC9rAF4O4C9rAF4OADBrAF4OIDBrAF4OQDBrAF4OYDBrAF4OgDBrAF4OoDBrAF4OwDBrAF4O
ADFrAF4OIDFrAF4OQDFrAF4OYDFrAF4OgDFrAF4OoDFrAF4OwDFrAF4O4DFrAF4OADJrAF4OIDJr
AF4OQDJrAF4OYDJrAF4OgDJrAF4OoDJrAF4OwDJrAF4O4DJrAF4OADNrAF4OIDNrAF4OQDNrAF4O
YDNrAF4OQDQLAF4OoDQLAF4OwDQLAF4O4DQLAF4OIDULAF4OwDULAF4OYTZrAF4OgDYLAF4OgTZr
AF4OoDYLAF4OoTZrAF4OwDYLAF4OwTZrAF4O4DYLAF4OADcLAF4OIDcLAF4OQDcLAF4OYDcLAF4O
gDcLAF4O4DcLAF4OADgLAF4OIDgLAF4OYDjDAPgZoDjDAAEa4DjDAAoaIDnDABMaQDnDABMagDnD
ABwaoDnDABwa4DnDACUaADrDACUaQDrDAC4aYDrDAC4aoDrDADca4DrDAEAaIDvDAEkaYDvDAFIa
oDvDAFsawDvDAGQaADzDAG0aQDzDAHYaYDzDAH8agDzDAH8awDzDAIga4DzDAJEaAD3DAJoaID3D
AKMaYD3DACUagD3DACUaoD3DAAEa4D3DAKwaID7DALUaYD7DAL4aoD7DAMca4D7DANAaAD/DANka
QD/DAOIagD/DAOsawD/DAPQa4D/DAPQaIEDDAP0aQEDDAP0aYEDDAAYboEDDAA8b4EDDABgbIEHD
ACEbYEHDACobgEHDACoboEHDADMbwEHDADMbAELDADwbQELDAAEagELDACUaoELDAOsa4ELDAEUb
IEPDAE4bIEPTAFcbQEPDAIgaQEPTAEkZgEPDAOsawEPDACUaAETDAE4bAETTAGAbQETDACUagETT
AGkbgETDAHIbwETDAHsbAEXDACUaQEXTACUaQEXDAIQbYEXTACUaYEXDAIQboEXDAI0b4EXDAJYb
4EXTACUaAEbTACUaAEbDAJYbQEbDAJ8bgEbTAKgbgEbDALEbwEbDALobAEfDAMMbQEfTAMwbQEfD
ANUbgEfDAN4bgEfTACUawEfDAOcb4EfDAOcbIEjTAGAbIEjDAPAbQEjTAGAbQEjDAPkbYEjDAJYb
YEjTACUagEjTACUagEjDAJYboEjDAAIc4EjDAFIaAEnDAAscAEnTAGAbQEnDAHYagEnTAEkZgEnD
ABQcwEnDAB0cwEnTAGAbAErDACYcQErDAAYbgErDAC8cgErTACUawErDADgcAEvDAEEcQEvDAEoc
AFJrAF4OIFJrAF4OQFJrAF4OYFJrAF4OgFJrAF4OoFJrAF4OwFJrAF4O4FJrAF4OiwIOD40CEA+P
Ag4PkQIQD5MCEA+VAhAPlwIQD5kCEg+bAhIPnQIQD58CEA+hAhIPowIQD6UCEA+pAhAPqwIQD60C
EA+vAg4PswIQD7UCDg+3AhAPuQIQD7sCDg+9AhAPvwIQD8ECEA/DAhAPxQIUD8cCEA/JAhAPywIQ
D9ECEA/TAhAP1QIQD9cCEA/ZAhAP2wIQD90CEA/fAhAP4QIOD+MCDg/lAhAP5wIQD+kCEA/rAhAP
7QIQD/ECEA/zAhAP9QIQD/cCDg/5AhAP+wIQD/0CEA//AhAPAQMODwMDEA8FAxYPBwMQDwkDEA8L
AxAPDQMQDw8DDg8RAw4PFQMQDxcDEA8ZAxAPGwMQDx0DEA8fAxAPIQMQDyMDEA8lAxAPJwMQDy0D
EA8vAxAPMQMODzMDEA81AxYPNwMODzkDEg9HA8MPSQMQD0sDEA9NAxAPTwMQD1EDEA9TAxAPVQMW
D1cDww9ZAxAPWwMOD10DEA9fAw4PYQMQD2MDDg9lAxIPZwMQD2kDEA9rAxAPbQMQD28DEA9xAxAP
cwMQD3UDEA93AxAPeQMQD3sDEA99AxAPfwMQD4EDEA+DAw4PhQMSD4sDEA+NAxAPjwMQD5EDDg+T
AxAPlQMQD5cDEA+ZAxAPmwMQD50DEA+hAxAPowMQD6UDEA+nAxAPqQMQD6sDEg+tAxIPrwMQD7ED
EA+1Aw4PtwMOD7kDww+7AxAPvQMOD78DEA/BAxAPwwPDD8UDEA/HAw4PyQMQD8sDEA/NAw4PzwMO
D9EDEA/TAxAP1QMQD9cDEA/ZAxAP2wMQD90DEA/fAxAP4QMQD+MDEA/lAxAP5wMQD+kDEA/rAxAP
7QMQD+8DEA/zAxAP9QMQD/cDEA/5AxAP+wMQD/0DEA//AxAPAQQQDwMEFA81AIUAiQCfAaYBwQF+
Ao8CvwIRA9AD8gMSBJkEFwUjBdYFxwaGB4oHnwf1B/4HFwixCLYIvAjECOAI8QgTCSAJKQkvCUUJ
aAl3CRYKKwpQCm8KuwrUCkoLVAthC4cLlgugC68LvgvPC9cL3QviC/ULBQwXDCQMTQxTDFsMYgyS
DJkMogytDLYMNw07DUENZA1yDcYNDA4CAAEAAwAIAAQADwAGABsABwAdAAgAHgAJACMACgAsAAsA
LgAMADIADQA0AA4AOQAPAEUAEABIABEATAASAFIAEwBXABQAWAAVAFwAFgBpABcAcQAYAHMAGQB2
ABoAfQAbAIIAHACEAB0AhgAeAIwAHwCRACAAlgAoAKAAKwCiACwAowAtAKQALgCmADEAuQA1ALoA
SAC7AEkAwABKAMEAbQDJAAAAYDEKGAAAnDAQGAAAkTsUGAAANTcZGAAA7TYeGAAA5BAQGAAAvT4j
GAAAG1EQGAAAg0YQGAAANSoQGAAAezgQGAAATyoQGAAA5BAQGAAApSoQGAAAMREsGAAAXRAsGAAA
JiUQGAAA7FAsGAAAFksQGAAAdSAQGAAAvigsGAAAUTAQGAAANBAsGAAAVS4QGAAAXxEsGAAAexEs
GAAAfTowGAAAaSk2GAAAIUo8GAAAYDEKGAAAOkhBGAAAdUhBGAAART9HGAAAO0lQGAAAEkkQGAAA
JjgQGAAAB0FZGAAAS0ViGAAAjSJrGAAA3jdxGAAARU1ZGAAAQk1iGAAAfk4sGAAAik4sGAAApSYQ
GAAAeTIQGAAAKh8QGAAAI0ViGAAAR04sGAAAik4sGAAAVS4QGAAA5wMsGAAAbAYsGAAA2QMsGAAA
XgYsGAAAtyEsGAAAZyYQGAAAp0cQGAAAJjgQGAAAmzsQGAAAhEcQGAAAUTAQGAAAvDoQGAAAlUx2
GAAAmg97GAAAkkyAGAAAXxEsGAAAexEsGAAAkBEQGAAApSYQGAAAUTAQGAAA3EhBGAAAYDEKGAAA
NTcZGAAAWiQQGAAAsCAQGAAADSQQGAAA0w4QGAAAq0QQGAAASSEQGAAAsjUQGAAAkBEsGAAAH1AQ
GAAApSYQGAAAdSAQGAAA8EyEGAAAPTUQGAAA+SONGAAAJjgQGAAAx0cQGAAArk6SGAAAQVAQGAAA
nDAQGAAALToQGAAAyi6AGAAAz0uAGAAAkyUQGAAA7TYeGAAAuQ4QGAAAGUKXGAAA5BAQGAAAYkeg
GAAAOEYQGAAASTIQGAAApSYQGAAAcjIQGAAAVS4QGAAAQC4QGAAAmicsGAAAckUsGAAAfSgQGAAA
704QGAAApSYQGAAAeTIQGAAAtCQQGAAAyzsQGAAA9k8QGAAAkBEsGAAA/SQQGAAAPCYQGAAAfzCA
GAAAalCAGAAAtigsGAAANT2AGAAA/SQQGAAANCYQGAAAyzsQGAAA8SalGAAA9SQQGAAAPTUQGAAA
ik4sGAAA/SQQGAAAW0OrGAAAZyYQGAAAPCYQGAAAJjgQGAAA9k8QGAAAhEcQGAAA9EG0GAAAXxEs
GAAAexEsGAAAZyYQGAAA5g0sGAAADxEsGAAApSYQGAAAeTIQGAAABzKAGAAAfRAsGAAAJj8QGAAA
kSYQGAAAGA4QGAAA3SUQGAAA2ykQGAAAOSgsGAAAkyUQGAAA+h8QGAAAOw4QGAAA/SQQGAAAp0e9
GAAAVjPCGAAARjPCGAAAPR/IGAAAWzzIGAAA9UnMGAAAWw/IGAAA1zHQGAAAP0DCGAAAPTXbGAAA
B0HCGAAAxzDIGAAAokvbGAAA9UnfGAAA2E3CGAAAikvlGAAAEg/IGAAARDzrGAAAeEnIGAAABkbI
GAAAr0nIGAAAS0XCGAAApk3IGAAA4zjIGAAAVS7xGAAAnQfIGAAA9UnxGAAA9Un2GAAA+z/9GAAA
9UnMGAAAY0QDGQAAOSMDGQAAyR/bGAAAekMHGQAApSbMGAAAOSMNGQAAoj4TGQAAP0DCGAAAB0HC
GAAA3SEZGQAAS0XCGAAAeCHCGAAAvCUQGAAA0icsGAAA904sGAAAVS4QGAIAAgADAAEAAwADAAIA
BAAFAAEABQAFAAIABgAHAAEABwAHAAIACAAJAAEACQAJAAIACgALAAEACwALAAIADAANAAEADQAN
AAIAEgAPAAEAEwAPAAIAGgARAAEAGwARAAIAHAATAAEAHQATAAIAHgAVAAEAHwAVAAIAIAAXAAEA
IQAXAAIAIgAZAAEAIwAZAAIAJAAbAAEAJQAbAAIAJgAdAAEAJwAdAAIAKQAfAAEAKgAfAAIAKwAh
AAEALAAhAAIALQAjAAEALgAjAAIALwAlAAEAMAAlAAIAMQAnAAEAMgAnAAIAMwApAAEANAApAAIA
NQArAAEANgArAAIANwAtAAEAOAAtAAIAOQAvAAEAOgAvAAIAOwAxAAEAPAAxAAIAPQAzAAEAPgAz
AAIAPwA1AAEAQAA1AAIARgA3AAIARwA5AAEASAA5AAIASQA7AAIATAA9AAEATQA9AAIATgA/AAEA
TwA/AAIAUABBAAEAUQBBAAIAUgBDAAEAUwBDAAIAVABFAAEAVQBFAAIAZgBHAAEAZwBHAAIAaABJ
AAEAaQBJAAIAagBLAAEAawBLAAIAbABNAAEAbQBNAAIAbgBPAAEAbwBPAAIAcABRAAEAcQBRAAIA
cgBTAAEAcwBTAAIAdABVAAEAdQBVAAIAdgBXAAEAdwBXAAIAeQBZAAEAegBZAAIAewBbAAEAfABb
AAIAfgBdAAEAfwBdAAIAgABfAAEAgQBfAAIAggBhAAEAgwBhAAIAhABjAAEAhQBjAAIAhwBlAAEA
iABlAAIAiQBnAAEAigBnAAIAiwBpAAEAjABpAAIAjQBrAAEAjgBrAAIAjwBtAAEAkABtAAIAkQBv
AAEAkgBvAAIAkwBxAAEAlABxAAIAlgBzAAEAlwBzAAIAmAB1AAEAmQB1AAIAmgB3AAEAmwB3AAIA
nAB5AAEAnQB5AAIAngB7AAEAnwB7AAIAoAB9AAEAoQB9AAIAogB/AAEAowB/AAIApACBAAEApQCB
AAIApgCDAAEApwCDAAIAqACFAAEAqQCFAAIAqgCHAAEAqwCHAAIArACJAAEArQCJAAIArwCLAAEA
sACLAAIAsQCNAAEAsgCNAAIAswCPAAEAtACPAAIAtgCRAAEAtwCRAAIAuACTAAEAuQCTAAIAugCV
AAEAuwCVAAIAvACXAAEAvQCXAAIAygCZAAEAywCZAAIAzACbAAEAzQCbAAIAzgCdAAEAzwCdAAIA
0ACfAAEA0QCfAAIA0gChAAEA0wChAAIA1ACjAAEA1QCjAAIA1wClAAEA2AClAAIA2QCnAAEA2gCn
AAIA2wCpAAEA3ACpAAIA3QCrAAEA3gCrAAIA3wCtAAEA4ACtAAIA4gCvAAEA4wCvAAIA5QCxAAEA
5gCxAAIA5wCzAAEA6ACzAAIA6QC1AAEA6gC1AAIA6wC3AAEA7AC3AAIA8QC5AAEA8gC5AAIA8wC7
AAEA9AC7AAIA9QC9AAEA9gC9AAIA9wC/AAEA+AC/AAIA+QDBAAEA+gDBAAIA+wDDAAEA/ADDAAIA
/QDFAAEA/gDFAAIA/wDHAAEAAAHHAAIAAQHJAAEAAgHJAAIAAwHLAAEABAHLAAIABQHNAAEABgHN
AAIABwHPAAEACAHPAAIACQHRAAEACgHRAAIAJQHTAAEAJgHTAAIAJwHVAAEAKAHVAAIAKQHXAAEA
KgHXAAIAKwHZAAEALAHZAAIALQHbAAEALgHbAAIALwHdAAEAMAHdAAIAMQHfAAEAMgHfAAIAMwHh
AAEANAHhAAIANwHjAAEAOAHjAAIAOQHlAAEAOgHlAAIAPAHnAAEAPQHnAAIAPgHpAAEAPwHpAAIA
QAHrAAEAQQHrAAIAQgHtAAEAQwHtAAIARAHvAAEARQHvAAIARgHxAAEARwHxAAIASAHzAAEASQHz
AAIASgH1AAEASwH1AAIATAH3AAEATQH3AAIATgH5AAEATwH5AAIAUQH7AAEAUgH7AAIAUwH9AAEA
VAH9AAIAVQH/AAEAVgH/AAIAVwEBAQEAWAEBAQIAWQEDAQEAWgEDAQIAXAEFAQEAXQEFAQIAXgEH
AQEAXwEHAQIAYAEJAQEAYQEJAQIAYgELAQEAYwELAQIAZQENAQEAZgENAQIAZwEPAQEAaAEPAQIA
aQERAQEAagERAQIAawETAQEAbAETAQIAbQEVAQEAbgEVAQIAbwEXAQEAcAEXAQIAcgEZAQEAcwEZ
AQIAdAEbAQEAdQEbAQIAdgEdAQEAdwEdAQIAeAEfAQEAeQEfAQIAegEhAQEAewEhAQIAfQEjAQEA
fgEjAQIAfwElAQEAgAElAQIAgQEnAQEAggEnAQIAgwEpAQEAhAEpAQIAhQErAQEAhgErAQIAiAEt
AQEAiQEtAQIAigEvAQEAiwEvAQIAjAExAQEAjQExAQIAjgEzAQEAjwEzAQIAkAE1AQEAkQE1AQIA
kgE3AQEAkwE3AQIAlAE5AQEAlQE5AQIAlgE7AQEAlwE7AQIAmAE9AQEAmQE9AQIAmgE/AQEAmwE/
AQIAwwFBAQIAxwFDAQIAyQFFAQEAygFFAQIAzAFHAQEAzQFHAQIAzwFJAQEA0AFJAQIA0gFLAQEA
0wFLAQIA1QFNAQIA2wFPAQIA4AFRAQIA4gFTAQIA4wFVAQEA5AFVAQIA6QFXAQIA6wFZAQEA7AFZ
AQIA7wFbAQIA8wFdAQIA9QFfAQIA+AFhAQIA+gFjAQIA/gFlAQEA/wFlAQIAAQJnAQEAAgJnAQIA
AwJpAQIABwJrAQIACQJtAQIACwJvAQEADAJvAQIADQJxAQEADgJxAQIAHgJzAQIAIgJ1AQIAJgJ3
AQIAKAJ5AQIAKgJ7AQEAKwJ7AQIALwJ9AQEAMAJ9AQIAMgJ/AQIAOAKBAQIAPgKDAQEAPwKDAQIA
QwKFAQEARAKFAQIARQKHAQIARwKJAQIASgKLAQIAUAKNAQIAUgKPAQIAVAKRAQIAkAKTAQEAkQKT
AQIAkgKVAQEAkwKVAQIAlAKXAQEAlQKXAQIAlgKZAQEAlwKZAS4ztQDWABoBKQE0AWwBiwHhAegB
HAJCAk8CWAJzAtUC4wL4AocDkwO0A/0DBAQLBFcEawR/BIwEuQTGBNQE4wTuBPgEAQUOBUcFggWb
BccFbgZ1BqgGugbgBucG9Qb8BgkHIQdBB1AHXwdqB3UHvQdDCEoIWAhiCHEIfwiJCJQIoQhaCWEJ
sAm3CcUJ1AnfCekJ+wkJCjwKigqZCuoK+QoHCxELHAspCzUMQwx4DIcM3AzoDPYMTQ3qDfwNAg4S
DgABAwCvEAEAAAHhAa8QAQAEgAAAAQAAAIEcn3AAAAAAAACXAAAABAAAAAAAAAAAAAAAJQ7IDwAA
AAAEAAAAAAAAAAAAAAAlDucoAAAAAAQAAAAAAAAAAAAAACUOPA8AAAAABwAAAOQMAAAAAAAALg7A
DQAAAAANAAAAAAAAAAAAAAA3DnIxAAAAAAQAAAAAAAAAAAAAACUO/TMAAAAABAAAAAAAAAAAAAAA
JQ6HMwAAAAAEAAAAAAAAAAAAAAAuDiEwAAAAAAQAAAAAAAAAAAAAACUODzkAAAAABAAAAAAAAAAA
AAAALg7xOAAAAAANAAAAAAAAAAAAAAA3Dl8OAAAAAAQAAAAAAAAAAAAAACUORUAAAAAAAAAAAAEA
AACwPQAATAACAE0AAgBOAAIATwACAFAAAgBRAAIAUgAFAFMABQBUAAUAVQAIAFYACABXAAgAWAAI
AFkACABaAAgAWwAIAFwACABdAAgAXgAIAF8ACABgAAgAYQAIAGIACABjAAgAZAAIAGUACABmAAgA
ZwAIAGgACABpAAgAagAQAGsAEABsABAAbQAVAG4AFQBvABUAcAAVAHEAFQByABUAcwAVAHQAFQB1
ABUAdgAVAHcAFQB4ABUAeQAhAHoAIQB7ACEAfAAhAH0AIQB+ACEAfwAhAIAAIQCBACEAggAhAIMA
IQCEACEAhQAhAIYAIQCHACEAiAAhAAAAAABvA34OAAAAAH8Dfg4AAAAAgQN+DgAAAACDA34OfgO8
AGMAvABpAP4AawAWAWMAFgFzALwAfgP/AmMA/wLRAP8CggOOA2MAjgPRAI4D+QCOA2kAvAP9ABYB
cwCHBHMAlAT5AIcEVwFpBWkAaQXRABYBiQFjBpMBlwZpAO8G+QAWAfkABAdpABEHVwHFB4kBFgFb
AhYBcwBECm8CsgrJAhYBkwHwDM8CGA3RAB4NkwEYDc8C8AzJAh4NAAAASURUU0Nvbm5lY3Rpb25N
YW5hZ2VyRGF0YWJhc2VQYXJhbWV0ZXJzMTAwAF9WdGJsR2FwNF8xMAA8PjlfXzI3XzEwADxQcmVw
YXJlSW52b2ljZT5iX18yN18xMAA8Pm9fXzEwADw+cF9fMTAAX1Z0YmxHYXAxXzIwAF9WdGJsR2Fw
Ml8yMAA8Pm9fXzIwADw+cF9fMjAAU1RfZGQxNWIxYmFjY2ZiNDQ0NDhjMDE1Njc5MGIzZWFhMjAA
PD5wX18zMABfVnRibEdhcDRfNDAAX1Z0YmxHYXAyXzYwADw+OV9fMjBfMAA8R2V0V29ya1NwYWNl
UmFuZ2U+Yl9fMjBfMAA8PmNfX0Rpc3BsYXlDbGFzczMxXzAAPD5jX19EaXNwbGF5Q2xhc3MyMl8w
ADw+OV9fNDJfMAA8UHJlcGFyZT5iX180Ml8wADw+Y19fRGlzcGxheUNsYXNzNjJfMAA8PjlfXzY0
XzAAPEJpbmRSZWNvcmRTZXRUb1dvcmtTaGVldD5iX182NF8wADw+OV9fMjVfMAA8UHJlcGFySW1w
b3J0RGF0YT5iX18yNV8wADw+Y19fRGlzcGxheUNsYXNzMjVfMAA8PjlfXzM1XzAAPERvd25sb2Fk
Q29udHJhY3RFeGNlbFRlbXBsYXRlPmJfXzM1XzAAPD5jX19EaXNwbGF5Q2xhc3MzNV8wADw+OV9f
NDVfMAA8Q3JlYXRlU3VtbWFyeVNoZWV0PmJfXzQ1XzAAPD5jX19EaXNwbGF5Q2xhc3M2Nl8wADw+
OV9fMjdfMAA8UHJlcGFyZUludm9pY2U+Yl9fMjdfMAA8PmNfX0Rpc3BsYXlDbGFzczI3XzAAPD45
X183XzAAPE1haW4+Yl9fN18wADw+Y19fRGlzcGxheUNsYXNzN18wADw+OV9fMjhfMAA8UmVjdXJz
aXZlTWVyZ2VDZWxscz5iX18yOF8wADw+Y19fRGlzcGxheUNsYXNzMjhfMAA8PmNfX0Rpc3BsYXlD
bGFzczY5XzAAPEdldERhdGFUYWJsZT5iX18wADxPdmVyUmlkZVZpZXdGaWx0ZXI+Yl9fMAA8R2V0
TGlzdE9mRGF0YVNldHNVc2VkQnlJbnZvaWNlU2hlZXQ+Yl9fMAA8UHVibGlzaFNuYXBzaG90PmJf
XzAAPFNhdmVXb3Jrc2hlZXRTbmFwc2hvdD5iX18wADw+cF9fMAA8Pm9fXzExADw+cF9fMTEAPD5v
X18yMQA8PnBfXzIxADw+cF9fMzEAX1Z0YmxHYXA1XzUxAHhsQTEAeGxSMUMxAGdldF9DMQBzZXRf
QzEAZ2V0X1IxAHNldF9SMQA8PjlfXzIwXzEAPEdldFdvcmtTcGFjZVJhbmdlPmJfXzIwXzEAX1Z0
YmxHYXAyMV8xADw+OV9fMzFfMQA8R2V0RGF0YVRhYmxlPmJfXzMxXzEAPD5jX19EaXNwbGF5Q2xh
c3MzMV8xADw+Y19fRGlzcGxheUNsYXNzMjJfMQBfVnRibEdhcDNfMQA8PjlfXzI1XzEAPFByZXBh
ckltcG9ydERhdGE+Yl9fMjVfMQA8PjlfXzI3XzEAPFByZXBhcmVJbnZvaWNlPmJfXzI3XzEAPD5j
X19EaXNwbGF5Q2xhc3MyN18xADw+OV9fN18xADxNYWluPmJfXzdfMQBfVnRibEdhcDdfMQA8Pjlf
XzI4XzEAPFJlY3Vyc2l2ZU1lcmdlQ2VsbHM+Yl9fMjhfMQA8PmNfX0Rpc3BsYXlDbGFzczI4XzEA
X1Z0YmxHYXA4XzEAX1Z0YmxHYXA5XzEAPERvd25sb2FkQ29udHJhY3RFeGNlbFRlbXBsYXRlPmJf
XzEAPEdldExpc3RPZkRhdGFTZXRzVXNlZEJ5SW52b2ljZVNoZWV0PmJfXzEAPD5wX18xAElFbnVt
ZXJhYmxlYDEASU9yZGVyZWRFbnVtZXJhYmxlYDEAUHJlZGljYXRlYDEAQ2FsbFNpdGVgMQBJRW51
bWVyYXRvcmAxAExpc3RgMQBDZWxsMQBDUyQ8PjhfX2xvY2FsczEAX1Z0YmxHYXAxXzEyADw+b19f
MTIAPD5wX18xMgBfVnRibEdhcDNfMjIAPD5wX18yMgA8Pm9fXzMyADw+cF9fMzIAVG9JbnQzMgA8
Pm9fXzQyAGdldF9DMgBzZXRfQzIAZ2V0X1IyAHNldF9SMgA8PjlfXzIwXzIAPEdldFdvcmtTcGFj
ZVJhbmdlPmJfXzIwXzIAX1Z0YmxHYXAxMl8yADw+Y19fRGlzcGxheUNsYXNzMjJfMgBfVnRibEdh
cDZfMgBfVnRibEdhcDE3XzIAPD45X18yN18yADxQcmVwYXJlSW52b2ljZT5iX18yN18yAF9WdGJs
R2FwN18yADxQcmVwYXJJbXBvcnREYXRhPmJfXzIAPEdldERhdGFUYWJsZT5iX18yADxNYWluPmJf
XzIAPFJlY3Vyc2l2ZU1lcmdlQ2VsbHM+Yl9fMgA8R2V0TGlzdE9mRGF0YVNldHNVc2VkQnlJbnZv
aWNlU2hlZXQ+Yl9fMgA8PnBfXzIARnVuY2AyAEFjdGlvbmAyAGdldF9WYWx1ZTIAc2V0X1ZhbHVl
MgBUb1N0cmluZzIAQ2VsbDIAX1Z0YmxHYXAxNl8xMwBfVnRibEdhcDE5XzEzADw+b19fMTMAPD5w
X18xMwA8Pm9fXzIzADw+cF9fMjMAPD5vX18zMwA8PnBfXzMzADw+OV9fMjBfMwA8R2V0V29ya1Nw
YWNlUmFuZ2U+Yl9fMjBfMwBfVnRibEdhcDFfMwBfVnRibEdhcDE1XzMAPD45X18yNV8zADxQcmVw
YXJJbXBvcnREYXRhPmJfXzI1XzMAX1Z0YmxHYXA1XzMAPD45X18yN18zADxQcmVwYXJlSW52b2lj
ZT5iX18yN18zADw+OV9fN18zADxNYWluPmJfXzdfMwA8PjlfXzI4XzMAPFJlY3Vyc2l2ZU1lcmdl
Q2VsbHM+Yl9fMjhfMwA8Pm9fXzMAPD5wX18zAEZ1bmNgMwBBY3Rpb25gMwBfVnRibEdhcDEwXzE0
ADw+b19fMTQAPD5wX18xNABfVnRibEdhcDExXzI0AF9WdGJsR2FwMjNfMjQAPD5vX18yNAA8PnBf
XzI0ADw+cF9fMzQAPD5vX180NAA8Pm9fXzY0ADw+OV9fMjBfNAA8R2V0V29ya1NwYWNlUmFuZ2U+
Yl9fMjBfNABfVnRibEdhcDExXzQAX1Z0YmxHYXAxXzQAX1Z0YmxHYXAyXzQAX1Z0YmxHYXA1XzQA
PFByZXBhcmVJbnZvaWNlPmJfXzQAPFJlY3Vyc2l2ZU1lcmdlQ2VsbHM+Yl9fNAA8Pm9fXzQAPD5w
X180AEZ1bmNgNAA8Pm9fXzE1ADw+cF9fMTUAPD5vX18yNQA8PnBfXzI1ADw+b19fMzUAX1Z0YmxH
YXAxXzQ1ADw+b19fNDUAX1Z0YmxHYXAyXzY1ADw+b19fNjUAPD45X18yMF81ADxHZXRXb3JrU3Bh
Y2VSYW5nZT5iX18yMF81AF9WdGJsR2FwMV81AF9WdGJsR2FwMl81AF9WdGJsR2FwM181AF9WdGJs
R2FwNF81ADw+OV9fMjdfNQA8UHJlcGFyZUludm9pY2U+Yl9fMjdfNQA8PjlfXzI4XzUAPFJlY3Vy
c2l2ZU1lcmdlQ2VsbHM+Yl9fMjhfNQA8PnBfXzUARnVuY2A1ADw+b19fMTYAPD5wX18xNgBfVnRi
bEdhcDE4XzI2ADw+b19fMjYAPD5wX18yNgBfVnRibEdhcDZfMzYAPD5vX182NgA8Pm9fXzc2ADw+
OV9fMjBfNgA8R2V0V29ya1NwYWNlUmFuZ2U+Yl9fMjBfNgBfVnRibEdhcDIwXzYAX1Z0YmxHYXAy
Ml82AF9WdGJsR2FwMl82AF9WdGJsR2FwOV82ADxQcmVwYXJlSW52b2ljZT5iX182ADw+b19fNgA8
PnBfXzYAX1Z0YmxHYXAzXzE3ADw+cF9fMTcAPD5vX18yNwA8PnBfXzI3AF9WdGJsR2FwM18zNwBf
VnRibEdhcDZfNjcAPD5vX182NwBfVnRibEdhcDEwXzcAPD45X18yMF83ADxHZXRXb3JrU3BhY2VS
YW5nZT5iX18yMF83AF9WdGJsR2FwMV83AF9WdGJsR2FwMTJfNwBfVnRibEdhcDJfNwBfVnRibEdh
cDNfNwA8PjlfXzI3XzcAPFByZXBhcmVJbnZvaWNlPmJfXzI3XzcAPD5vX183ADw+cF9fNwBfVnRi
bEdhcDEzXzE4ADw+b19fMTgAPD5wX18xOAA8Pm9fXzI4ADw+cF9fMjgAU1RfZjM5MjMzZmFjMTZl
NDI2ZDk5MWQ5MzJmOWVmN2Q4NTgAZ2V0X1VURjgAPD45X18yMF84ADxHZXRXb3JrU3BhY2VSYW5n
ZT5iX18yMF84AF9WdGJsR2FwMTRfOAA8PjlfXzI3XzgAPFByZXBhcmVJbnZvaWNlPmJfXzI3XzgA
PD5vX184ADw+cF9fOABfVnRibEdhcDRfMTA5ADw+cF9fMTkAPD5vX18yOQA8PnBfXzI5ADw+b19f
NTkAPD5vX182OQA8PjkAX1Z0YmxHYXAxXzkAPD45X18yN185ADxQcmVwYXJlSW52b2ljZT5iX18y
N185ADw+b19fOQA8PnBfXzkAPE1vZHVsZT4AQURPREIAR2V0VHlwZUZyb21DTFNJRABnZXRfUGFn
ZUlEAHNldF9QYWdlSUQAUHJvY2Vzc0lEAHhsVHlwZVBERgBnZXRfQXBwbGljYXRpb25VUkwAc2V0
X0FwcGxpY2F0aW9uVVJMAGdldF9QYXNzd29yZFRSTQBzZXRfUGFzc3dvcmRUUk0AU3lzdGVtLklP
AFJIUwB4bFR5cGVYUFMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAFQAdmFsdWVfXwBD
cmVhdGVSZXBsaWNhAERlbGV0ZVJlcGxpY2EAZ2V0X0V4Y2VsUmVwbGljYQBzZXRfRXhjZWxSZXBs
aWNhAGdldF9BcmVhAHNldF9BcmVhAENvbnZlcnRUb0Zvcm11bGEAZ2V0X0hhc0Zvcm11bGEAQ2Vs
bEhhc0Zvcm11bGEASW1wb3J0U2hlZXRIYXNGb3JtdWxhAGZvcm11bGEAR2V0Q29ubmVjdGlvbkZv
clNjaGVtYQBTeXN0ZW0uRGF0YQBnZXRfU291cmNlRGF0YQBzZXRfU291cmNlRGF0YQBDbGVhckRh
dGFDb21wb25lbmV0V29ya3NoZWV0RGF0YQBnZXRfUmVwb3J0RGF0YQBzZXRfUmVwb3J0RGF0YQBQ
cmVwYXJJbXBvcnREYXRhAFN5c3RlbS5EYXRhLk9sZURiAG1zY29ybGliAHdiADw+YwBTeXN0ZW0u
Q29sbGVjdGlvbnMuR2VuZXJpYwBfcHNTZXR0bGVtZW50Q2FsYwBzZXR0bGVtZW50Q2FsYwBnZXRf
SWQAc2V0X0lkAGdldF9Gb3JtdWxhSWQAc2V0X0Zvcm11bGFJZABHZXRSdWxlSWQAZ2V0X0NoYXJn
ZVR5cGVJZABzZXRfQ2hhcmdlVHlwZUlkAGdldF9EYXRhdHlwZUlkAHNldF9EYXRhdHlwZUlkAElQ
cm9jZXNzSWQAZ2V0X1Byb2Nlc3NJZABzZXRfUHJvY2Vzc0lkAEdldFdpbmRvd1RocmVhZFByb2Nl
c3NJZABpUHJvY2Vzc0lkAF9wc1Byb2Nlc3NJZABscGR3UHJvY2Vzc0lkAHByb2Nlc3NJZABnZXRf
UmVwb3J0U3RhdHVzSWQAc2V0X1JlcG9ydFN0YXR1c0lkAGdldF9Db250cmFjdElkAHNldF9Db250
cmFjdElkAF9wc0V4Y2VsU2hlZXRJZABnZXRfUGFyYW1zZXRJZABzZXRfUGFyYW1zZXRJZABnZXRf
VGFibGl4SWQAc2V0X1RhYmxpeElkAEdldFByb2Nlc3NCeUlkAE9wZW5SZWFkAFRocmVhZABDb3Jy
dXB0TG9hZAB4bFBhc3RlU3BlY2lhbE9wZXJhdGlvbkFkZABJZ25vcmVSZWFkT25seVJlY29tbWVu
ZGVkAENoZWNrSWZSdWxlSXNDaGFuZ2VkAHhsU2hhcmVkAG1zb1RyaVN0YXRlTWl4ZWQATmV3R3Vp
ZABnZXRfRmllbGQAc2V0X0ZpZWxkADxDMT5rX19CYWNraW5nRmllbGQAPFIxPmtfX0JhY2tpbmdG
aWVsZAA8QzI+a19fQmFja2luZ0ZpZWxkADxSMj5rX19CYWNraW5nRmllbGQAPFBhZ2VJRD5rX19C
YWNraW5nRmllbGQAPEFwcGxpY2F0aW9uVVJMPmtfX0JhY2tpbmdGaWVsZAA8UGFzc3dvcmRUUk0+
a19fQmFja2luZ0ZpZWxkADxFeGNlbFJlcGxpY2E+a19fQmFja2luZ0ZpZWxkADxBcmVhPmtfX0Jh
Y2tpbmdGaWVsZAA8UmVwb3J0RGF0YT5rX19CYWNraW5nRmllbGQAPElkPmtfX0JhY2tpbmdGaWVs
ZAA8Rm9ybXVsYUlkPmtfX0JhY2tpbmdGaWVsZAA8Q2hhcmdlVHlwZUlkPmtfX0JhY2tpbmdGaWVs
ZAA8RGF0YXR5cGVJZD5rX19CYWNraW5nRmllbGQAPFByb2Nlc3NJZD5rX19CYWNraW5nRmllbGQA
PFJlcG9ydFN0YXR1c0lkPmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3RJZD5rX19CYWNraW5nRmll
bGQAPFBhcmFtc2V0SWQ+a19fQmFja2luZ0ZpZWxkADxUYWJsaXhJZD5rX19CYWNraW5nRmllbGQA
PEZpZWxkPmtfX0JhY2tpbmdGaWVsZAA8UGFzc3dvcmQ+a19fQmFja2luZ0ZpZWxkADxEYXRhU291
cmNlPmtfX0JhY2tpbmdGaWVsZAA8RXJyb3JDb2RlPmtfX0JhY2tpbmdGaWVsZAA8TWVzc2FnZT5r
X19CYWNraW5nRmllbGQAPEVuZFJhbmdlPmtfX0JhY2tpbmdGaWVsZAA8RGF0YVRhYmxlPmtfX0Jh
Y2tpbmdGaWVsZAA8UnVsZT5rX19CYWNraW5nRmllbGQAPE1vZHVsZT5rX19CYWNraW5nRmllbGQA
PE5hbWU+a19fQmFja2luZ0ZpZWxkADxQcm9jZXNzVGFibGVOYW1lPmtfX0JhY2tpbmdGaWVsZAA8
RmlsZU5hbWU+a19fQmFja2luZ0ZpZWxkADxFeGNlbEZpbGVOYW1lPmtfX0JhY2tpbmdGaWVsZAA8
U25hcHNob3RGaWxlTmFtZT5rX19CYWNraW5nRmllbGQAPENoYXJnZVR5cGVOYW1lPmtfX0JhY2tp
bmdGaWVsZAA8VXNlck5hbWU+a19fQmFja2luZ0ZpZWxkADxQYXJhbWV0ZXJOYW1lPmtfX0JhY2tp
bmdGaWVsZAA8U2VydmVyTmFtZT5rX19CYWNraW5nRmllbGQAPFNoZWV0TmFtZT5rX19CYWNraW5n
RmllbGQAPFNuYXBzaG90U2hlZXROYW1lPmtfX0JhY2tpbmdGaWVsZAA8UmVwb3J0TmFtZT5rX19C
YWNraW5nRmllbGQAPERpc3BsYXlOYW1lPmtfX0JhY2tpbmdGaWVsZAA8UmVmcmVzaGRhRGF0ZVRp
bWU+a19fQmFja2luZ0ZpZWxkADxUeXBlPmtfX0JhY2tpbmdGaWVsZAA8T3ZlcnJpZGVUeXBlPmtf
X0JhY2tpbmdGaWVsZAA8U2NoZWR1bGVUeXBlPmtfX0JhY2tpbmdGaWVsZAA8QXV0aGVudGljYXRp
b25UeXBlPmtfX0JhY2tpbmdGaWVsZAA8QWRqdXN0bWVudFR5cGU+a19fQmFja2luZ0ZpZWxkADxE
b2N1bWVudFR5cGU+a19fQmFja2luZ0ZpZWxkADxEYXRhYmFzZT5rX19CYWNraW5nRmllbGQAPFBy
b2REYXRlPmtfX0JhY2tpbmdGaWVsZAA8QXNPZkRhdGU+a19fQmFja2luZ0ZpZWxkADxDcmVhdGVU
ZW1wbGF0ZT5rX19CYWNraW5nRmllbGQAPFZhbHVlPmtfX0JhY2tpbmdGaWVsZAA8RGlzcGxheVZh
bHVlPmtfX0JhY2tpbmdGaWVsZAA8U3luY2hyb25pemU+a19fQmFja2luZ0ZpZWxkADxQYXJhbXNl
dEhhc2g+a19fQmFja2luZ0ZpZWxkADxQdWJsaXNoPmtfX0JhY2tpbmdGaWVsZAA8RG9jdW1lbnRQ
YXRoPmtfX0JhY2tpbmdGaWVsZAA8V29ya2Jvb2s+a19fQmFja2luZ0ZpZWxkADxPcHRpb25hbD5r
X19CYWNraW5nRmllbGQAPExhYmVsPmtfX0JhY2tpbmdGaWVsZAA8QXBwbGllZEZpbHRlcnNMYWJl
bD5rX19CYWNraW5nRmllbGQAPERpc3BsYXlMYWJlbD5rX19CYWNraW5nRmllbGQAPENvbHVtbj5r
X19CYWNraW5nRmllbGQAPFJlY29tbWVuZGF0aW9uPmtfX0JhY2tpbmdGaWVsZAA8T2xlRGJDb25u
ZWN0aW9uPmtfX0JhY2tpbmdGaWVsZAA8U3FsQ29ubmVjdGlvbj5rX19CYWNraW5nRmllbGQAPFBv
c2l0aW9uPmtfX0JhY2tpbmdGaWVsZAA8RGVzY3JpcHRpb24+a19fQmFja2luZ0ZpZWxkADxQcm9k
RGF0ZVRvPmtfX0JhY2tpbmdGaWVsZAA8U2NoZWR1bGVyRm9sZGVyPmtfX0JhY2tpbmdGaWVsZAA8
Q29ubmVjdGlvbklkZW50aWZpZXI+a19fQmFja2luZ0ZpZWxkADxQYXJhbWV0ZXI+a19fQmFja2lu
Z0ZpZWxkADxTZXR0bGVtZW50UGFyYW1ldGVyPmtfX0JhY2tpbmdGaWVsZAA8QXBwbGllZEZpbHRl
cj5rX19CYWNraW5nRmllbGQAPFNob3dEYXRhVGFicz5rX19CYWNraW5nRmllbGQAPENoYXJnZVR5
cGVzPmtfX0JhY2tpbmdGaWVsZAA8VmFsdWVzPmtfX0JhY2tpbmdGaWVsZAA8VGFibGl4ZXM+a19f
QmFja2luZ0ZpZWxkADxDb2x1bW5zPmtfX0JhY2tpbmdGaWVsZAA8UGFyYW1ldGVycz5rX19CYWNr
aW5nRmllbGQAPFZpZXdSZXBvcnRGaWx0ZXJzPmtfX0JhY2tpbmdGaWVsZAA8UmVwb3J0U2hlZXRz
PmtfX0JhY2tpbmdGaWVsZAA8U3RhdHVzPmtfX0JhY2tpbmdGaWVsZAA8Um93cz5rX19CYWNraW5n
RmllbGQAPEFnZ3JlZ2F0aW9uUm93cz5rX19CYWNraW5nRmllbGQAPEFkanVzdG1lbnREYXlzPmtf
X0JhY2tpbmdGaWVsZAA8RXhwb3J0Rm9ybWF0PmtfX0JhY2tpbmdGaWVsZAA8Q29udHJhY3Q+a19f
QmFja2luZ0ZpZWxkADxFeGNlbFNoZWV0PmtfX0JhY2tpbmdGaWVsZAA8UGFyYW1ldGVyU2hlZXQ+
a19fQmFja2luZ0ZpZWxkADxSZXBvcnRTaGVldD5rX19CYWNraW5nRmllbGQAPEltcG9ydFNoZWV0
PmtfX0JhY2tpbmdGaWVsZAA8V29ya3NoZWV0PmtfX0JhY2tpbmdGaWVsZAA8SW52b2ljZVdvcmtz
aGVldD5rX19CYWNraW5nRmllbGQAPFRlbXBsYXRlV29ya3NoZWV0PmtfX0JhY2tpbmdGaWVsZAA8
UmVwb3J0U2hlZXREYXRhc2V0PmtfX0JhY2tpbmdGaWVsZAA8UmVwb3J0RGF0YXNldD5rX19CYWNr
aW5nRmllbGQAPERhdGFDb21wb25lbnQ+a19fQmFja2luZ0ZpZWxkADxJbWFnZVNuYXBzaG90Pmtf
X0JhY2tpbmdGaWVsZAA8UmVwb3J0PmtfX0JhY2tpbmdGaWVsZAA8TmV3UmVwb3J0PmtfX0JhY2tp
bmdGaWVsZAA8UnVsZUNvbHVtbkxpc3Q+a19fQmFja2luZ0ZpZWxkADxBZ2dyZWdhdGlvbkxpc3Q+
a19fQmFja2luZ0ZpZWxkADxFbmRBZ2dyZWdhdGlvbkxpc3Q+a19fQmFja2luZ0ZpZWxkADxJbmRl
eD5rX19CYWNraW5nRmllbGQAPEdyb3VwaW5nSW5kZXg+a19fQmFja2luZ0ZpZWxkADxSb3dJbmRl
eD5rX19CYWNraW5nRmllbGQAPFRhYmxpeD5rX19CYWNraW5nRmllbGQAPERheT5rX19CYWNraW5n
RmllbGQAPEJ1c2luZXNzRGF5PmtfX0JhY2tpbmdGaWVsZAA8U3BhUmZ4UXVlcnk+a19fQmFja2lu
Z0ZpZWxkADxDYXRlZ29yeT5rX19CYWNraW5nRmllbGQAPFJlcG9ydFJlcG9zaXRvcnk+a19fQmFj
a2luZ0ZpZWxkADxNYWludGFpbkhpc3Rvcnk+a19fQmFja2luZ0ZpZWxkADxHcmFudWxhcml0eT5r
X19CYWNraW5nRmllbGQAPENvdW50ZXJwYXJ0eT5rX19CYWNraW5nRmllbGQAZ2V0X0JvbGQAc2V0
X0JvbGQAVHJpbUVuZABoV25kAE9sZURiQ29tbWFuZABFeGVjdXRlQ29tbWFuZABTcWxDb21tYW5k
AHNxbENvbW1hbmQAc2V0X0luc2VydENvbW1hbmQAR2V0SW5zZXJ0Q29tbWFuZAB4bEdyb3d0aFRy
ZW5kAHhsTGluZWFyVHJlbmQARmluZABnZXRfSHduZABDbGlwYm9hcmQAZ2V0X1Bhc3N3b3JkAHNl
dF9QYXNzd29yZABXcml0ZVJlc1Bhc3N3b3JkAFJlcGxhY2UAZ2V0X1N0YWNrVHJhY2UAUHJlcGFy
ZUludm9pY2UAUHJpY2UAWGxQaWN0dXJlQXBwZWFyYW5jZQBDcmVhdGVJbnN0YW5jZQBkZWZhdWx0
SW5zdGFuY2UAZ2V0X0RhdGFTb3VyY2UAc2V0X0RhdGFTb3VyY2UAeGxQYXN0ZVNwZWNpYWxPcGVy
YXRpb25EaXZpZGUAZ2V0X0Vycm9yQ29kZQBzZXRfRXJyb3JDb2RlAHNldF9Nb2RlAFBhZGRpbmdN
b2RlAENpcGhlck1vZGUAWGxTYXZlQXNBY2Nlc3NNb2RlAEdldEF0dHJpYnV0ZU5vZGUAWG1sTm9k
ZQBGaW5kQW5kUmVwbGFjZVNpZ25hdHVyZUltYWdlAEdldEltYWdlAFRleHRDb2RlcGFnZQBnZXRf
TWVzc2FnZQBzZXRfTWVzc2FnZQBnZXRfUmFuZ2UAQWRkUmFuZ2UAZ2V0X1VzZWRSYW5nZQBEZWxl
dGVVc2VkUmFuZ2UAZ2V0X0VuZFJhbmdlAHNldF9FbmRSYW5nZQBjb2x1bW5FbmRSYW5nZQBVcGRh
dGVUYWJsaXhFbmRSYW5nZQBHZXRXb3JrU3BhY2VSYW5nZQBjb2x1bW5TdGFydFJhbmdlAHhsTm9D
aGFuZ2UAY29sdW1uVG9NZXJnZQBDaGFuZ2VQaXZvdFNvdXJjZURhdGFDYWNoZQBJbnZva2UAR2V0
U2NoZW1hVGFibGUAZ2V0X0RhdGFUYWJsZQBzZXRfRGF0YVRhYmxlAEdldEdyb3VwZWREYXRhVGFi
bGUAQnVpbGREYXRhVGFibGUAQ3JlYXRlRGF0YVRhYmxlAER1bXBEYXRhVGFibGUAR2V0RGF0YVRh
YmxlAGRhdGFUYWJsZQBEZWxldGVFbXB0eVJvd3NPZlRhYmxlAFRvVGFibGUAQ3JlYXRlUHJvY2Vz
c1RhYmxlAFBpdm90VGFibGUAVmFyaWFibGUASUVudW1lcmFibGUASURpc3Bvc2FibGUARWRpdGFi
bGUAZ2V0X1Zpc2libGUAc2V0X1Zpc2libGUAeGxDZWxsVHlwZVZpc2libGUAeGxTaGVldFZpc2li
bGUAdmlzaWJsZQBEb3VibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAbXNv
VHJpU3RhdGVUb2dnbGUAZXhjZWxDYWxjRmlsZQBkZWxldGVGaWxlAEdldENvbnRyYWN0RXhjZWxG
aWxlAExpbmtUb0ZpbGUAeGxXaG9sZQBnZXRfUnVsZQBzZXRfUnVsZQBzZWxlY3RlZFJ1bGUASXNT
aGVldEJpbmRUb0ltcG9ydFJ1bGUAZ2V0X01vZHVsZQBzZXRfTW9kdWxlAFhsUmVmZXJlbmNlU3R5
bGUAZ2V0X05hbWUAc2V0X05hbWUAZmllbGROYW1lAGdldF9Qcm9jZXNzVGFibGVOYW1lAHNldF9Q
cm9jZXNzVGFibGVOYW1lAHRhYmxlTmFtZQBnZXRfRmlsZU5hbWUAc2V0X0ZpbGVOYW1lAHNvdXJj
ZUZpbGVOYW1lAGdldF9FeGNlbEZpbGVOYW1lAHNldF9FeGNlbEZpbGVOYW1lAGV4Y2VsRmlsZU5h
bWUAR2V0RmlsZU5hbWUAZ2V0X1NuYXBzaG90RmlsZU5hbWUAc2V0X1NuYXBzaG90RmlsZU5hbWUA
ZmlsZU5hbWUAZ2V0X0NoYXJnZVR5cGVOYW1lAHNldF9DaGFyZ2VUeXBlTmFtZQBHZXRFbGVtZW50
c0J5VGFnTmFtZQBhZ2dOYW1lAGdldF9Db2x1bW5OYW1lAGNvbHVtbk5hbWUAZ3JvdXBOYW1lAGdl
dF9Vc2VyTmFtZQBzZXRfVXNlck5hbWUAX3BzVXNlck5hbWUAX3VzZXJOYW1lAGdldF9QYXJhbWV0
ZXJOYW1lAHNldF9QYXJhbWV0ZXJOYW1lAGdldF9TZXJ2ZXJOYW1lAHNldF9TZXJ2ZXJOYW1lAEdl
dE5hbWUAZ2V0X1NoZWV0TmFtZQBzZXRfU2hlZXROYW1lAHdvcmtTaGVldE5hbWUAZ2V0X1NuYXBz
aG90U2hlZXROYW1lAHNldF9TbmFwc2hvdFNoZWV0TmFtZQB3b3Jrc2hlZXROYW1lAGdldF9SZXBv
cnROYW1lAHNldF9SZXBvcnROYW1lAHJlcG9ydE5hbWUAZ2V0X0Rpc3BsYXlOYW1lAHNldF9EaXNw
bGF5TmFtZQBwcm9wZXJ0eU5hbWUARmlsZW5hbWUAZmlsZW5hbWUAeGxQYXN0ZUFsbFVzaW5nU291
cmNlVGhlbWUAZ2V0X1JlZnJlc2hkYURhdGVUaW1lAHNldF9SZWZyZXNoZGFEYXRlVGltZQBUb0Rh
dGVUaW1lAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAeGxQYXN0ZVNwZWNpYWxPcGVy
YXRpb25Ob25lAFNoYXBlAGdldF9UeXBlAHNldF9UeXBlAFJhbmdlVmFsdWVEYXRhVHlwZQBzZXRf
Q29tbWFuZFR5cGUAZ2V0X092ZXJyaWRlVHlwZQBzZXRfT3ZlcnJpZGVUeXBlAENoYW5nZVR5cGUA
Q2hhcmdlVHlwZQBnZXRfU2NoZWR1bGVUeXBlAHNldF9TY2hlZHVsZVR5cGUAWGxQYXN0ZVR5cGUA
VmFsdWVUeXBlAFhsQ2VsbFR5cGUAWGxBdXRvRmlsbFR5cGUARXhwcmVzc2lvblR5cGUAZ2V0X0F1
dGhlbnRpY2F0aW9uVHlwZQBzZXRfQXV0aGVudGljYXRpb25UeXBlAFhsRml4ZWRGb3JtYXRUeXBl
AEdldFR5cGUAZ2V0X0FkanVzdG1lbnRUeXBlAHNldF9BZGp1c3RtZW50VHlwZQBnZXRfRG9jdW1l
bnRUeXBlAHNldF9Eb2N1bWVudFR5cGUAR2V0U2hlZXREb2N1bWVudFR5cGUAUHJlcGFyZQBXaGVy
ZQBNaWNyb3NvZnQuT2ZmaWNlLkNvcmUAU3lzdGVtLkNvcmUAQmVmb3JlAEZhaWx1cmUAR2V0VXNl
clNpZ25hdHVyZQBBZGRQaWN0dXJlAHhsUGljdHVyZQBDb3B5UGljdHVyZQBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAZ2V0X0ludmFyaWFudEN1bHR1cmUAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEludGVybmFsRGF0YUNvbGxlY3Rpb25CYXNlAEFwcGxpY2F0aW9u
U2V0dGluZ3NCYXNlAE1hdGNoQ2FzZQBnZXRfRGF0YWJhc2UAc2V0X0RhdGFiYXNlAG1zb0ZhbHNl
AENsb3NlAERpc3Bvc2UAVHJhbnNwb3NlAFJlc29sdmVEeW5hbWljRGF0ZQBJc1ZhbGlkRGF0ZQBn
ZXRfUHJvZERhdGUAc2V0X1Byb2REYXRlAGdldF9Bc09mRGF0ZQBzZXRfQXNPZkRhdGUAVXBkYXRl
AENyZWF0ZQBBZ2dyZWdhdGUAR2V0RGF0YVJvd0Zyb21JbnZvaWNlVGVtcGxhdGUAZ2V0X0NyZWF0
ZVRlbXBsYXRlAHNldF9DcmVhdGVUZW1wbGF0ZQBEb3dubG9hZENvbnRyYWN0RXhjZWxUZW1wbGF0
ZQBpc1RlbXBsYXRlAGdldF9TdGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBNc29UcmlTdGF0ZQBD
b25uZWN0aW9uU3RhdGUAU2V0QXBhcnRtZW50U3RhdGUAQWN0aXZhdGUARGVsZXRlAENhbGxTaXRl
AGdldF9XaGl0ZQBQYXN0ZQBEaXNwSWRBdHRyaWJ1dGUAU1RBVGhyZWFkQXR0cmlidXRlAENvbXBp
bGVyR2VuZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUAQ29tRXZlbnRJbnRlcmZhY2VBdHRy
aWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVk
aXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEludGVyZmFjZVR5
cGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFhtbEF0dHJpYnV0ZQBFeHRlbnNpb25BdHRyaWJ1dGUATENJRENvbnZlcnNpb25BdHRy
aWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25B
dHRyaWJ1dGUARGVmYXVsdE1lbWJlckF0dHJpYnV0ZQBUeXBlSWRlbnRpZmllckF0dHJpYnV0ZQBD
b21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAENvQ2xhc3NBdHRyaWJ1dGUAQXNzZW1ibHlQ
cm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNr
RW50cnlQb2ludEF0dHJpYnV0ZQBYbWxSb290QXR0cmlidXRlAHhtbFJvb3RBdHRyaWJ1dGUAQXNz
ZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAENvbHVt
bkFic29sdXRlAFJvd0Fic29sdXRlAE1hdGNoQnl0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAFNldFZh
bHVlAGdldF9EaXNwbGF5VmFsdWUAc2V0X0Rpc3BsYXlWYWx1ZQBwcm9wZXJ0eVZhbHVlAHZhbHVl
AG1zb0NUcnVlAG1zb1RydWUAU2F2ZQB4bEV4Y2x1c2l2ZQB4bEZvcm1hdEZyb21MZWZ0T3JBYm92
ZQBEZXNlcmlhbGl6ZQBnZXRfU3luY2hyb25pemUAc2V0X1N5bmNocm9uaXplAF9wc1N5bmNocm9u
aXplAGdldF9JdGVtT2YASW5kZXhPZgBhcnJBZ2cAZ2V0X1BuZwBTeXN0ZW0uVGhyZWFkaW5nAHNl
dF9QYWRkaW5nAEVuY29kaW5nAFN5c3RlbS5EcmF3aW5nLkltYWdpbmcAdXNlSGFzaGluZwBTeXN0
ZW0uUnVudGltZS5WZXJzaW9uaW5nAEFsbG93RmlsdGVyaW5nAEZyb21CYXNlNjRTdHJpbmcAVG9C
YXNlNjRTdHJpbmcAVHJ1bmNhdGVTdHJpbmcAZ2V0X0Nvbm5lY3Rpb25TdHJpbmcAc2V0X0Nvbm5l
Y3Rpb25TdHJpbmcAb2xlZGJDb25uZWN0aW9uU3RyaW5nAFRvU3RyaW5nAGNpcGhlclN0cmluZwBH
ZXRTdHJpbmcAU3Vic3RyaW5nAGNvbnN0cmluZwBNaXNzaW5nAEFsbG93U29ydGluZwBTeXN0ZW0u
RHJhd2luZwBDb21wdXRlSGFzaABnZXRfUGFyYW1zZXRIYXNoAHNldF9QYXJhbXNldEhhc2gAZ2V0
X1B1Ymxpc2gAc2V0X1B1Ymxpc2gAT3BlbkFmdGVyUHVibGlzaABnZXRfRG9jdW1lbnRQYXRoAHNl
dF9Eb2N1bWVudFBhdGgAZ2V0X1dpZHRoAGdldF9Db2x1bW5XaWR0aABzZXRfQ29sdW1uV2lkdGgA
TWFrZVNhbWVIZWlnaHRXaWR0aABnZXRfTGVuZ3RoAGxlbmd0aABFbmRzV2l0aABTdGFydHNXaXRo
AGkAVHJhbnNmb3JtRmluYWxCbG9jawBMaW5rAEdldFdvcmtzaGVldEZyb21Xb3JrQm9vawBnZXRf
V29ya2Jvb2sAc2V0X1dvcmtib29rAFJvdXRlV29ya2Jvb2sAd29ya2Jvb2sATWljcm9zb2Z0LlNx
bFNlcnZlci5TY3JpcHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRh
c2sAUGFyc2VWaWV3UmVwb3J0RmlsdGVyWE1sAGdldF9BZGRyZXNzTG9jYWwARGVhbABQYXN0ZVNw
ZWNpYWwAZ2V0X09wdGlvbmFsAHNldF9PcHRpb25hbABFeHRlcm5hbABnZXRfTGFiZWwAc2V0X0xh
YmVsAGdldF9BcHBsaWVkRmlsdGVyc0xhYmVsAHNldF9BcHBsaWVkRmlsdGVyc0xhYmVsAGdldF9E
aXNwbGF5TGFiZWwAc2V0X0Rpc3BsYXlMYWJlbABNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhj
ZWwAVGVybWluYXRlRXhjZWwAU3luY2hyb25pemVFeGNlbABLaWxsRXhjZWwAU2NyaXB0T2JqZWN0
TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAHhsUGFzdGVBbGwAUmVmcmVzaEFsbABTVF9kZDE1
YjFiYWNjZmI0NDQ0OGMwMTU2NzkwYjNlYWEyMC5kbGwAdXNlcjMyLmRsbABEYXRhQ2VsbABnZXRf
VG9wTGVmdENlbGwAZ2V0X0JvdHRvbVJpZ2h0Q2VsbAB4bENlbGxUeXBlTGFzdENlbGwAQXV0b0Zp
bGwAS2lsbABTeXN0ZW0uWG1sAExvYWRYbWwARGVzZXJpYWxpemVYbWwAZ2V0X0lubmVyWG1sAFRv
Qm9vbABVZFNxbABzcWwARmlsZVN0cmVhbQBGcm9tU3RyZWFtAFNjaGVkdWxlUGFyYW0AZ2V0X0l0
ZW0Ac2V0X0l0ZW0AU3lzdGVtAFN5bW1ldHJpY0FsZ29yaXRobQBIYXNoQWxnb3JpdGhtAFRyaW0A
RnJvbQBJQ3J5cHRvVHJhbnNmb3JtAExvY2tUeXBlRW51bQBDdXJzb3JUeXBlRW51bQBYbEZpbmRM
b29rSW4AcmVzb3VyY2VNYW4AVG9Cb29sZWFuAHhsU2hlZXRIaWRkZW4AeGxTaGVldFZlcnlIaWRk
ZW4AeGxTY3JlZW4AT3BlbgBNZXJnZUNlbGxzQW5kQWxpZ24ATWluAFNjcmlwdE1haW4AVFJNQWRk
aW4AWGxJbnNlcnRGb3JtYXRPcmlnaW4AQ29weU9yaWdpbgBnZXRfQ29sdW1uAHNldF9Db2x1bW4A
RGF0YUNvbHVtbgBSdWxlQ29sdW1uAHBzQ29sdW1uAGxhc3RDb2x1bW4AZmlyc3RDb2x1bW4AY29s
dW1uAF9BcHBsaWNhdGlvbgB4bENlbGxUeXBlU2FtZVZhbGlkYXRpb24AeGxQYXN0ZVZhbGlkYXRp
b24AeGxDZWxsVHlwZUFsbFZhbGlkYXRpb24AZ2V0X1JlY29tbWVuZGF0aW9uAHNldF9SZWNvbW1l
bmRhdGlvbgBEZXN0aW5hdGlvbgBYbFBhc3RlU3BlY2lhbE9wZXJhdGlvbgBVbmFyeU9wZXJhdGlv
bgBCaW5hcnlPcGVyYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AVXBkYXRlSW52b2ljZVhtbENv
bmZpZ3VyYXRpb24AUmVwb3J0Q29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBTeXN0
ZW0uWG1sLlNlcmlhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AWG1sQXR0cmlidXRlQ29sbGVj
dGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBfQ29ubmVjdGlvbgBn
ZXRfT2xlRGJDb25uZWN0aW9uAHNldF9PbGVEYkNvbm5lY3Rpb24AX29sZURiQ29ubmVjdGlvbgBn
ZXRfU3FsQ29ubmVjdGlvbgBzZXRfU3FsQ29ubmVjdGlvbgBHZXRTcWxDb25uZWN0aW9uAHNxbENv
bm5lY3Rpb24AR2V0Q29ubmVjdGlvbgBjb25uZWN0aW9uAFhsU2VhcmNoRGlyZWN0aW9uAFhsRGVs
ZXRlU2hpZnREaXJlY3Rpb24AWGxJbnNlcnRTaGlmdERpcmVjdGlvbgBHZXRSZXBvcnREZWZpbml0
aW9uAGdldF9Qb3NpdGlvbgBzZXRfUG9zaXRpb24AdGFibGl4UG9zaXRpb24AcG9zaXRpb24AZ2V0
X0NhcHRpb24Ac2V0X0NhcHRpb24ARXhjZXB0aW9uAGdldF9EZXNjcmlwdGlvbgBzZXRfRGVzY3Jp
cHRpb24AQ29uZmxpY3RSZXNvbHV0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBSdW4AeGxTaGlmdERv
d24AZ2V0X1Byb2REYXRlVG8Ac2V0X1Byb2REYXRlVG8AUmVsYXRpdmVUbwBvYmplY3RUbwBDdWx0
dXJlSW5mbwBDU2hhcnBBcmd1bWVudEluZm8AUHJvcGVydHlJbmZvAHhsU2hpZnRVcAB4bEJpdG1h
cABTbGVlcABnZXRfVG9wAHhsQXBwAGFwcABNaWNyb3NvZnQuQ1NoYXJwAENyZWF0ZUJhY2t1cABT
eXN0ZW0uWG1sLkxpbnEAU3lzdGVtLkxpbnEAQ2xlYXIAQ2hhcgBkcgBJbnZva2VNZW1iZXIAR2V0
TWVtYmVyAFNldE1lbWJlcgBPbGVEYkRhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBGcm9tRGF0YVJl
YWRlcgBGcm9tT2xlUmVhZGVyAEV4ZWN1dGVSZWFkZXIAU3RyaW5nUmVhZGVyAFRleHRSZWFkZXIA
TUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyAFRyaXBsZURFU0NyeXB0b1NlcnZpY2VQcm92aWRlcgBJ
Rm9ybWF0UHJvdmlkZXIAU3FsQ29tbWFuZEJ1aWxkZXIAZ2V0X1NjaGVkdWxlckZvbGRlcgBzZXRf
U2NoZWR1bGVyRm9sZGVyAE1pY3Jvc29mdC5DU2hhcnAuUnVudGltZUJpbmRlcgBDYWxsU2l0ZUJp
bmRlcgBYbFNlYXJjaE9yZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXIA
Z2V0X0Nvbm5lY3Rpb25JZGVudGlmaWVyAHNldF9Db25uZWN0aW9uSWRlbnRpZmllcgBEb2N1bWVu
dERlc2lnbmVyAFRvVXBwZXIATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVy
AEV2ZW50c09iamVjdFdyYXBwZXIATWV0ZXIAZ2V0X1BhcmFtZXRlcgBzZXRfUGFyYW1ldGVyAEV4
Y2VsU2hlZXRQYXJhbWV0ZXIAZ2V0X1NldHRsZW1lbnRQYXJhbWV0ZXIAc2V0X1NldHRsZW1lbnRQ
YXJhbWV0ZXIAUGFyc2VTZXR0bGVtZW50UGFyYW1ldGVyAEFmdGVyAERlbGltaXRlcgBnZXRfQXBw
bGllZEZpbHRlcgBzZXRfQXBwbGllZEZpbHRlcgBSZXBvcnRGaWx0ZXIAT3ZlclJpZGVWaWV3Rmls
dGVyAHhsUHJpbnRlcgBEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAENvbnZlcnRlcgBUb0xv
d2VyAFhtbFNlcmlhbGl6ZXIAZ2V0X0ludGVyaW9yAGdldF9Db2xvcgBzZXRfQ29sb3IARmlyZUVy
cm9yAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAQWN0aXZhdG9yAC5jdG9yAC5jY3RvcgBDcmVh
dGVEZWNyeXB0b3IAQ3JlYXRlRW5jcnlwdG9yAEZpeGVkRm9ybWF0RXh0Q2xhc3NQdHIASW50UHRy
AFNhdmVBcwBJZ25vcmVQcmludEFyZWFzAHhsQ2VsbFR5cGVGb3JtdWxhcwB4bFBhc3RlRm9ybXVs
YXMAeGxGb3JtdWxhcwBnZXRfU2hvd0RhdGFUYWJzAHNldF9TaG93RGF0YVRhYnMAU3lzdGVtLkRp
YWdub3N0aWNzAGdldF9GaWVsZHMAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAFN5c3Rl
bS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF9kZDE1YjFiYWNj
ZmI0NDQ0OGMwMTU2NzkwYjNlYWEyMC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVi
dWdnaW5nTW9kZXMAZ2V0X0NoaWxkTm9kZXMAU2VsZWN0Tm9kZXMAU2F2ZUNoYW5nZXMAeGxGaWxs
U2VyaWVzAFNUX2RkMTViMWJhY2NmYjQ0NDQ4YzAxNTY3OTBiM2VhYTIwLlByb3BlcnRpZXMASW5j
bHVkZURvY1Byb3BlcnRpZXMAQWxsb3dVc2luZ1Bpdm90VGFibGVzAGdldF9WYXJpYWJsZXMAZ2V0
X1NoYXBlcwBnZXRfQ2hhcmdlVHlwZXMAc2V0X0NoYXJnZVR5cGVzAGdldF9BdHRyaWJ1dGVzAGdl
dF9IYXNBdHRyaWJ1dGVzAEdldEJ5dGVzAGdldF9WYWx1ZXMAc2V0X1ZhbHVlcwB4bFBhc3RlVmFs
dWVzAHhsRmlsbFZhbHVlcwB4bFZhbHVlcwB2YWx1ZXMAZ2V0X1RhYmxpeGVzAHNldF9UYWJsaXhl
cwBDU2hhcnBBcmd1bWVudEluZm9GbGFncwBDU2hhcnBCaW5kZXJGbGFncwBpbnZvaWNlWG1sU2V0
dGluZ3MAeGxQYXN0ZUNvbHVtbldpZHRocwB4bEZpbGxNb250aHMAPD40X190aGlzAHhsQ2VsbFR5
cGVCbGFua3MAU2tpcEJsYW5rcwBVcGRhdGVMaW5rcwBBbGxvd0luc2VydGluZ0h5cGVybGlua3MA
Z2V0X1dvcmtib29rcwBnZXRfQ2VsbHMAUmVjdXJzaXZlTWVyZ2VDZWxscwBBbGxvd0Zvcm1hdHRp
bmdDZWxscwBTcGVjaWFsQ2VsbHMAU3lzdGVtLldpbmRvd3MuRm9ybXMAQ29udGFpbnMAZ2V0X0Nv
bHVtbnMAc2V0X0NvbHVtbnMAc2VsZWN0ZWRDb2x1bW5zAEFsbG93RGVsZXRpbmdDb2x1bW5zAEFs
bG93SW5zZXJ0aW5nQ29sdW1ucwBBbGxvd0Zvcm1hdHRpbmdDb2x1bW5zAGFnZ3JlZ2F0aW9uQ29s
dW1ucwBHZXRSZXBvcnREYXRhc2V0Q29sdW1ucwBNYXhDb2x1bW5zAHhsQnlDb2x1bW5zAElFTnVt
ZXJhYmxlRXh0ZW5zaW9ucwBTeXN0ZW0uTGlucS5FeHByZXNzaW9ucwBMaXN0QWxsQ29uZmlndXJh
dGlvbnMAU3lzdGVtLkNvbGxlY3Rpb25zAGdldF9Db25uZWN0aW9ucwB4bENlbGxUeXBlU2FtZUZv
cm1hdENvbmRpdGlvbnMAeGxDZWxsVHlwZUFsbEZvcm1hdENvbmRpdGlvbnMAU2NlbmFyaW9zAHhs
RmlsbFllYXJzAHhsUGFzdGVBbGxFeGNlcHRCb3JkZXJzAGdldF9QYXJhbWV0ZXJzAHNldF9QYXJh
bWV0ZXJzAGdldF9WaWV3UmVwb3J0RmlsdGVycwBzZXRfVmlld1JlcG9ydEZpbHRlcnMAQ29tbWFu
ZENsYXNzAENvbm5lY3Rpb25DbGFzcwBSZWNvcmRzZXRDbGFzcwBTdWNjZXNzAElzQ2FsY1Byb2Nl
c3MAS2lsbEV4Y2VsUHJvY2VzcwBDZWxsQWRkcmVzcwBnZXRfRHRzAHhsUGFzdGVGb3JtYXRzAHhs
UGFzdGVBbGxNZXJnaW5nQ29uZGl0aW9uYWxGb3JtYXRzAHhsRmlsbEZvcm1hdHMAQ2xlYXJGb3Jt
YXRzAHhsUGFzdGVGb3JtdWxhc0FuZE51bWJlckZvcm1hdHMAeGxQYXN0ZVZhbHVlc0FuZE51bWJl
ckZvcm1hdHMARHJhd2luZ09iamVjdHMAQ2hhcnRPYmplY3RzAEV4Y2VsU2hlZXRzAGdldF9SZXBv
cnRTaGVldHMAc2V0X1JlcG9ydFNoZWV0cwBnZXRfV29ya3NoZWV0cwBhcnJXb3Jrc2hlZXRzAFNj
cmlwdFJlc3VsdHMAeGxDZWxsVHlwZUNvbnN0YW50cwB4bENlbGxUeXBlQ29tbWVudHMAeGxQYXN0
ZUNvbW1lbnRzAHhsQ29tbWVudHMAR2V0R2VuZXJpY0FyZ3VtZW50cwBEZWxldGVFbnRpcmVDb250
ZW50cwBDb3B5RW50aXJlQ29udGVudHMAQ2xlYXJDb250ZW50cwBnZXRfRXZlbnRzAERvY0V2ZW50
cwBXb3JrYm9va0V2ZW50cwBBcHBFdmVudHMAZ2V0X0Rpc3BsYXlBbGVydHMAc2V0X0Rpc3BsYXlB
bGVydHMAQ2hlY2tJZlNoZWV0RXhpc3RzAHhsUHJldmlvdXMAZ2V0X1N0YXR1cwBzZXRfU3RhdHVz
AEltcG9ydFN0YXR1cwBnZXRfUm93cwBzZXRfUm93cwBDbGVhckRhdGFSb3dzAEFsbG93RGVsZXRp
bmdSb3dzAEFsbG93SW5zZXJ0aW5nUm93cwBBbGxvd0Zvcm1hdHRpbmdSb3dzAGdldF9BZ2dyZWdh
dGlvblJvd3MAc2V0X0FnZ3JlZ2F0aW9uUm93cwBnZXRfSGFzUm93cwBNYXhSb3dzAHhsQnlSb3dz
AHhsRmlsbERheXMAZ2V0X0FkanVzdG1lbnREYXlzAHNldF9BZGp1c3RtZW50RGF5cwB4bEZpbGxX
ZWVrZGF5cwBYbExvb2tBdABDb25jYXQAV2hhdABFeHBvcnRBc0ZpeGVkRm9ybWF0AEltYWdlRm9y
bWF0AEZpbGVGb3JtYXQAWGxDb3B5UGljdHVyZUZvcm1hdABTZWFyY2hGb3JtYXQAZ2V0X051bWJl
ckZvcm1hdABzZXRfTnVtYmVyRm9ybWF0AGdldF9FeHBvcnRGb3JtYXQAc2V0X0V4cG9ydEZvcm1h
dABfcHNFeHBvcnRGb3JtYXQAZXhwb3J0Rm9ybWF0AHhsUGFzdGVTcGVjaWFsT3BlcmF0aW9uU3Vi
dHJhY3QAZ2V0X0NvbnRyYWN0AHNldF9Db250cmFjdABnZXRfSW5uZXJPYmplY3QAQ2hhcnRPYmpl
Y3QAU2VsZWN0AFByb3RlY3QAVW5wcm90ZWN0AERpc3RpbmN0AGR0AEdldEludm9pY2VYTUxCeUlu
dm9pY2VTaGVldABHZXRMaXN0T2ZEYXRhU2V0c1VzZWRCeUludm9pY2VTaGVldABBZGRXb3JrU2hl
ZXQAR2V0SW52b2ljZVRlbXBsYXRlV29ya1NoZWV0AEJpbmRSZWNvcmRTZXRUb1dvcmtTaGVldABn
ZXRfRXhjZWxTaGVldABzZXRfRXhjZWxTaGVldABnZXRfUGFyYW1ldGVyU2hlZXQAc2V0X1BhcmFt
ZXRlclNoZWV0AGdldF9SZXBvcnRTaGVldABzZXRfUmVwb3J0U2hlZXQAZ2V0X0ltcG9ydFNoZWV0
AHNldF9JbXBvcnRTaGVldABpbXBvcnRTaGVldABDcmVhdGVTdW1tYXJ5U2hlZXQAZGVsZXRlU3Vt
bWFyeVNoZWV0AGdldF9Xb3Jrc2hlZXQAc2V0X1dvcmtzaGVldABnZXRfSW52b2ljZVdvcmtzaGVl
dABzZXRfSW52b2ljZVdvcmtzaGVldABzb3VyY2VXb3Jrc2hlZXQAZ2V0X1RlbXBsYXRlV29ya3No
ZWV0AHNldF9UZW1wbGF0ZVdvcmtzaGVldAB0ZW1wbGF0ZVdvcmtzaGVldABHZXREYXRhSW1wb3J0
Q29uZmlndXJhdGlvbk9mV29ya3NoZWV0AGRlc3RpbmF0aW9uV29ya3NoZWV0AGRvY3VtZW50V29y
a3NoZWV0AHdvcmtzaGVldABUYXJnZXQAZ2V0X1JlcG9ydFNoZWV0RGF0YXNldABzZXRfUmVwb3J0
U2hlZXREYXRhc2V0AGdldF9SZXBvcnREYXRhc2V0AHNldF9SZXBvcnREYXRhc2V0AF9SZWNvcmRz
ZXQAQ29weUZyb21SZWNvcmRzZXQAZ2V0X0xlZnQAeGxTaGlmdFRvTGVmdABTaGlmdAB4bFNoaWZ0
VG9SaWdodABnZXRfSGVpZ2h0AGdldF9Sb3dIZWlnaHQAc2V0X1Jvd0hlaWdodABBdXRvRml0AG9w
X0V4cGxpY2l0AFNwbGl0AFF1aXQAZ2V0X19EZWZhdWx0AHNldF9fRGVmYXVsdABnZXRfRGVmYXVs
dAB4bEZpbGxEZWZhdWx0AExhc3RPckRlZmF1bHQARmlyc3RPckRlZmF1bHQAc2V0X1Rhc2tSZXN1
bHQAVG9JbnQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFhFbGVtZW50AFhtbEVsZW1lbnQAeEVsZW1l
bnQAU2V0dGxlbWVudABDcmVhdGVQREZEb2N1bWVudABDcmVhdGVQTkdEb2N1bWVudABDcmVhdGVX
b3JkRG9jdW1lbnQAQ3JlYXRlRG9jdW1lbnQAU2F2ZURvY3VtZW50AFNhdmVXaXRoRG9jdW1lbnQA
Q3JlYXRlRXhjZWxEb2N1bWVudABYbWxEb2N1bWVudABnZXRfRGF0YUNvbXBvbmVudABzZXRfRGF0
YUNvbXBvbmVudABkYXRhQ29tcG9uZW50AGdldF9DdXJyZW50AGN1cnJlbnQAeG1sQ29udGVudABE
b2NFdmVudHNfRXZlbnQAV29ya2Jvb2tFdmVudHNfRXZlbnQAQXBwRXZlbnRzX0V2ZW50AGdldF9G
b250AGdldF9Db3VudABnZXRfRmllbGRDb3VudABnZXRfSW1hZ2VTbmFwc2hvdABzZXRfSW1hZ2VT
bmFwc2hvdABfcHNJbWFnZVNuYXBzaG90AERlbGV0ZVNuYXBzaG90AFB1Ymxpc2hTbmFwc2hvdABT
YXZlV29ya3NoZWV0U25hcHNob3QARGVjcnlwdAB0b0VuY3J5cHQAeGxQYXJ0AFRocmVhZFN0YXJ0
AFRyaW1TdGFydABzdGFydABJbnNlcnQAQ29udmVydABzZXRfU29ydABnZXRfUmVwb3J0AHNldF9S
ZXBvcnQAQmluZFJlcG9ydABnZXRfTmV3UmVwb3J0AHNldF9OZXdSZXBvcnQARGF0YUltcG9ydABk
YXRhSW1wb3J0AEV4ZWN1dGVJbXBvcnQASW1wb3J0RXhwb3J0AFhtbE5vZGVMaXN0AGdldF9SdWxl
Q29sdW1uTGlzdABzZXRfUnVsZUNvbHVtbkxpc3QAZ2V0X0FnZ3JlZ2F0aW9uTGlzdABzZXRfQWdn
cmVnYXRpb25MaXN0AGdldF9FbmRBZ2dyZWdhdGlvbkxpc3QAc2V0X0VuZEFnZ3JlZ2F0aW9uTGlz
dABUb0xpc3QAd29ya3NoZWV0TGlzdABsaXN0AEZpcnN0AFRleHRWaXN1YWxMYXlvdXQATW92ZU5l
eHQAeGxOZXh0AFN5c3RlbS5UZXh0AGdldF9UZXh0AEFkZFRvTXJ1AERhdGFWaWV3AGdldF9Ob3cA
Z3JvdXBlZERhdGFSb3cAZ2V0X0VudGlyZVJvdwBmaXJzUm93AEltcG9ydFJvdwBsYXN0Um93AHhs
Rm9ybWF0RnJvbVJpZ2h0T3JCZWxvdwByb3cATWF4AGdldF9JbmRleABzZXRfSW5kZXgAZ2V0X0dy
b3VwaW5nSW5kZXgAc2V0X0dyb3VwaW5nSW5kZXgAR2V0Q29sdW1uSW5kZXgAR2V0SW5kZXgAZ2V0
X1Jvd0luZGV4AHNldF9Sb3dJbmRleAByb3dJbmRleABpbmRleABnZXRfVGFibGl4AHNldF9UYWJs
aXgAcHNUYWJsaXgAdGFibGl4AFRoZW5CeQBPcmRlckJ5AGdldF9EYXkAc2V0X0RheQBnZXRfQnVz
aW5lc3NEYXkAc2V0X0J1c2luZXNzRGF5AGdldF9JdGVtQXJyYXkAVG9BcnJheQBUb0NoYXJBcnJh
eQBzZXRfS2V5AE5vdGlmeQBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5AGdldF9Bc3NlbWJs
eQBSZWFkT25seQBVc2VySW50ZXJmYWNlT25seQB4bFBhc3RlU3BlY2lhbE9wZXJhdGlvbk11bHRp
cGx5AHhsRmlsbENvcHkAT3ZlclJpZGVTdW1tYXJ5AG92ZXJSaWRlU3VtbWFyeQBFeGVjdXRlUXVl
cnkAc3FsUXVlcnkARXhlY3V0ZU5vblF1ZXJ5AGdldF9TcGFSZnhRdWVyeQBzZXRfU3BhUmZ4UXVl
cnkAc3BhUmZ4UXVlcnkAZ2V0X0NhdGVnb3J5AHNldF9DYXRlZ29yeQBnZXRfUmVwb3J0UmVwb3Np
dG9yeQBzZXRfUmVwb3J0UmVwb3NpdG9yeQBnZXRfTWFpbnRhaW5IaXN0b3J5AHNldF9NYWludGFp
bkhpc3RvcnkAU25hcEhpc3RvcnkAVXBkYXRlU25hcHNob3RIaXN0b3J5AGhpc3RvcnkAUXVhbGl0
eQBvcF9FcXVhbGl0eQBvcF9JbmVxdWFsaXR5AFhsU2hlZXRWaXNpYmlsaXR5AGdldF9HcmFudWxh
cml0eQBzZXRfR3JhbnVsYXJpdHkASXNOdWxsT3JFbXB0eQBnZXRfQ291bnRlcnBhcnR5AHNldF9D
b3VudGVycGFydHkARmlsbE9iamVjdFdpdGhQcm9wZXJ0eQBHZXRQcm9wZXJ0eQAAAC9zAHAAYQBf
AGUAeABjAGUAbABfAHMAbgBhAHAAcwBoAG8AdABzACAAJwBjACcAASlcAGUAeABjAGUAbABfAGMA
YQBsAGMAdQBsAGEAdABpAG8AbgBzAFwAAAsuAHgAbABzAHgAAAN5AABJMAAwADAAMgA0ADUAMAAw
AC0AMAAwADAAMAAtADAAMAAwADAALQBDADAAMAAwAC0AMAAwADAAMAAwADAAMAAwADAAMAA0ADYA
AQNuAAAXXAB0AGUAbQBwAF8ATgBvAHQAZQBcAAB/cwBwAGEAXwBlAHgAYwBlAGwAXwBhAGQAZABp
AG4AXwBzAGUAdAB0AGwAZQBtAGUAbgB0AF8AcAByAG8AYwBlAHMAcwAgAEAAZgBsAGEAZwAgAD0A
JwBjACcAIAAsACAAQABjAG8AbgB0AHIAYQBjAHQAXwBpAGQAIAA9ACAAASEsACAAQABwAHIAbwBk
AF8AZABhAHQAZQAgAD0AIAAnAAEpJwAsACAAQABwAHIAbwBkAF8AZABhAHQAZQBfAHQAbwAgAD0A
IAAnAAElJwAsACAAQABhAHMAXwBvAGYAXwBkAGEAdABlACAAPQAgACcAAS8nACwAIABAAHUAbgBp
AHEAdQBlAF8AcAByAG8AYwBlAHMAcwBfAGkAZAA9ACcAAQMnAAGBc0QAZQBhAGwAIABJAEQALABS
AGUAZgAgAEkAZAAsAFQAZQByAG0AIABTAHQAYQByAHQALABUAGUAcgBtACAARQBuAGQALABTAGUA
dAB0AGwAZQBtAGUAbgB0ACAARABhAHQAZQAsAEwAZQBnACwAUABoAHkAcwBpAGMAYQBsACAARgBp
AG4AYQBuAGMAaQBhAGwALABEAGUAYQBsACAAVAB5AHAAZQAsAEIAdQB5ACAAUwBlAGwAbAAsAEMA
dQByAHYAZQAsAEQAZQBhAGwAIABWAG8AbAB1AG0AZQAsAEEAbABsAG8AYwBhAHQAaQBvAG4AIABW
AG8AbAB1AG0AZQAsAFMAZQB0AHQAbABlAG0AZQBuAHQAIABWAG8AbAB1AG0AZQAsAFUATwBNACwA
UwBlAHQAdABsAGUAbQBlAG4AdAAgAFAAcgBpAGMAZQAsAFMAZQB0AHQAbABlAG0AZQBuAHQAIABB
AG0AbwB1AG4AdAAAgIFTAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAYQBkAGkAaABhAF8AcABy
AG8AYwBlAHMAcwAuAGQAYgBvAC4AZQB4AGMAZQBsAF8AYQBkAGQAXwBpAG4AXwB2AGkAZQB3AF8A
cgBlAHAAbwByAHQAXwBmAGkAbAB0AGUAcgBfAAAdQwBvAHUAbgB0AGUAcgBwAGEAcgB0AHkASQBk
AAAVQwBvAG4AdAByAGEAYwB0AEkAZAAAEVAAcgBvAGQARABhAHQAZQAAFVAAcgBvAGQARABhAHQA
ZQBUAG8AABFBAHMATwBmAEQAYQB0AGUAABNQAHIAbwBjAGUAcwBzAEkAZAAAHUMAcgBlAGEAdABl
AFQAZQBtAHAAbABhAHQAZQAAKywAIABAAGMAbwB1AG4AdABlAHIAcABhAHIAdAB5AF8AaQBkACAA
PQAgAAAfSQBtAHAAbwByAHQAIABTAGUAdAB0AGkAbgBnAHMAACVDAGgAZQBjAGsASQBmAFMAaABl
AGUAdABFAHgAaQBzAHQAcwAAC1YAYQBsAHUAZQAAD1MAdQBtAG0AYQByAHkAAF07AEQAYQB0AGEA
VAB5AHAAZQBDAG8AbQBwAGEAdABpAGIAaQBsAGkAdAB5AD0AOAAwADsATQBBAFIAUwAgAEMAbwBu
AG4AZQBjAHQAaQBvAG4APQBUAHIAdQBlAAABABlDAG8AdQBuAHQAZQByAHAAYQByAHQAeQAAEUMA
bwBuAHQAcgBhAGMAdAAAE1AAcgBvAGQAIABEAGEAdABlAAAZUAByAG8AZAAgAEQAYQB0AGUAIABU
AG8AABVBAHMAIABvAGYAIABEAGEAdABlAAATTABpAG4AZQAgAEkAdABlAG0AAH9zAHAAYQBfAGUA
eABjAGUAbABfAGEAZABkAGkAbgBfAHMAZQB0AHQAbABlAG0AZQBuAHQAXwBwAHIAbwBjAGUAcwBz
ACAAQABmAGwAYQBnACAAPQAnAHMAJwAgACwAIABAAGMAbwBuAHQAcgBhAGMAdABfAGkAZAAgAD0A
IAABHVAAUwBfAFMAeQBuAGMAaAByAG8AbgBpAHoAZQAAIVAAUwBfAEkAbQBhAGcAZQBTAG4AYQBw
AHMAaABvAHQAAB9QAFMAXwBFAHgAYwBlAGwAUwBoAGUAZQB0AEkAZAAAB0EATABMAAAXUABTAF8A
VQBzAGUAcgBOAGEAbQBlAAAZUABTAF8AUAByAG8AYwBlAHMAcwBJAGQAAB9QAFMAXwBFAHgAcABv
AHIAdABGAG8AcgBtAGEAdAAAI1AAUwBfAFMAZQB0AHQAbABlAG0AZQBuAHQAQwBhAGwAYwAAH08A
TABFAF8AQwBPAE4ATgBfAE0AYQBpAG4ARABCAAAXUwBjAHIAaQBwAHQAXwBUAGEAcwBrAAADDQAA
Ay0AAQNfAABTcwBwAGEAXwBlAHgAYwBlAGwAXwBzAG4AYQBwAHMAaABvAHQAcwAgAEAAZgBsAGEA
ZwA9ACcAZQAnACwAQABzAGgAZQBlAHQAXwBpAGQAPQAnAAEDMQAAcVMAVABfAGQAZAAxADUAYgAx
AGIAYQBjAGMAZgBiADQANAA0ADQAOABjADAAMQA1ADYANwA5ADAAYgAzAGUAYQBhADIAMAAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAGUkAbgB2AG8AaQBjAGUASQB0
AGUAbQBzAAAJTgBhAG0AZQAABVIAMQAABVIAMgAABUMAMQAABUMAMgAAEUUAbgBkAFIAYQBuAGcA
ZQAADUgAZQBhAGQAZQByAAALRgBpAGUAbABkAABJSQBuAHYAbwBpAGMAZQAvAEkAbgB2AG8AaQBj
AGUASQB0AGUAbQBzAC8AVABhAGIAbABpAHgALwBSAG8AdwBzAC8AUgBvAHcAAAtJAG4AZABlAHgA
AFFJAG4AdgBvAGkAYwBlAC8ASQBuAHYAbwBpAGMAZQBJAHQAZQBtAHMALwBUAGEAYgBsAGkAeAAv
AEcAcgBvAHUAcABzAC8ARwByAG8AdQBwAAAJVAB5AHAAZQAAG1QAZQBtAHAAbABhAHQAZQBJAG4A
ZABlAHgAACtJAG4AdgBvAGkAYwBlACAAQwBvAG4AZgBpAGcAdQByAGEAdABpAG8AbgAAD1QAbwBM
AG8AdwBlAHIAABNUAG8AUwB0AHIAaQBuAGcAMgAAC1QAYQBiAGwAZQAAB0EAZABkAAAbSQBzAE4A
dQBsAGwATwByAEUAbQBwAHQAeQAAEVQAbwBTAHQAcgBpAG4AZwAAAz0AAAtNAGUAcgBnAGUAAAtS
AGEAbgBnAGUAAANbAAAJXQA9ACcAewABD30AJwAgAEEATgBEACAAAQlBAE4ARAAgAAARUwBlAGwA
ZQBjAHQAZQBkAAA3SQBuAHYAbwBpAGMAZQAvAEkAbgB2AG8AaQBjAGUASQB0AGUAbQBzAC8AVABh
AGIAbABpAHgAAAlUAHIAaQBtAAALUwBwAGwAaQB0AAALVABvAEkAbgB0AAANVABhAGIAbABpAHgA
AHtFAFgARQBDACAAcwB5AHMALgBzAHAAXwBzAGUAdABfAHMAZQBzAHMAaQBvAG4AXwBjAG8AbgB0
AGUAeAB0ACAAQABrAGUAeQAgAD0AIABOACcARABCAF8AVQBTAEUAUgAnACwAIABAAHYAYQBsAHUA
ZQAgAD0AIAAnAAFhJwA7AEUAWABFAEMAIABzAHAAYQBfAGkAeABwAF8AcgB1AGwAZQBzACAAQABm
AGwAYQBnACAAPQAgACcAdAAnACwAQABwAHIAbwBjAGUAcwBzAF8AaQBkACAAPQAgACcAASMnACwA
QABpAHgAcABfAHIAdQBsAGUAcwBfAGkAZAAgAD0AAR8sAEAAcgB1AG4AXwB0AGEAYgBsAGUAIAA9
ACAAJwABYycALABAAHMAbwB1AHIAYwBlACAAPQAgACcAMgAxADQAMAAwACcALABAAHIAdQBuAF8A
dwBpAHQAaABfAGMAdQBzAHQAbwBtAF8AZQBuAGEAYgBsAGUAIAA9ACAAJwBuACcAAYCPUwBFAEwA
RQBDAFQAIABpAHIALgBpAHgAcABfAHIAdQBsAGUAcwBfAGkAZAAgAEYAUgBPAE0AIABpAHgAcABf
AHIAdQBsAGUAcwAgAEEAUwAgAGkAcgAgAFcASABFAFIARQAgAGkAcgAuAGkAeABwAF8AcgB1AGwA
ZQBzAF8AbgBhAG0AZQAgAD0AIAAnAAEPWwBDAG8AbAB1AG0AbgAAA10AAB1TAEUATABFAEMAVAAg
ACoAIABGAFIATwBNACAAAFtbAGEAZABpAGgAYQBfAHAAcgBvAGMAZQBzAHMAXQAuAGQAYgBvAC4A
WwBlAHgAYwBlAGwAXwBhAGQAZABpAG4AXwBkAGEAdABhAF8AaQBtAHAAbwByAHQAXwAAHUkARgAg
AE8AQgBKAEUAQwBUAF8ASQBEACgAJwABNScAKQAgAEkAUwAgAE4ATwBUACAATgBVAEwATAAgAEQA
UgBPAFAAIABUAEEAQgBMAEUAIAABG0MAUgBFAEEAVABFACAAVABBAEIATABFACAAAAMoAAAhXQAg
AFYAQQBSAEMASABBAFIAKAAxADAAMgA0ACkALAAAAykAABUgAFcASABFAFIARQAgADEAPQAyAAAZ
RABFAEwARQBUAEUAIABGAFIATwBNACAAAA8gAFcASABFAFIARQAgAAATIABJAFMATgBVAEwATAAo
AFsAABldACwAJwAnACkAIAA9ACAAJwAnACAAKwABAysAAAdBAE4ARAAACW4AYQBtAGUAAAt2AGEA
bAB1AGUAABlkAGkAcwBwAGwAYQB5AGwAYQBiAGUAbAAAGWQAaQBzAHAAbABhAHkAdgBhAGwAdQBl
AAAbbwB2AGUAcgB3AHIAaQB0AGUAdAB5AHAAZQAAHWEAZABqAHUAcwB0AG0AZQBuAHQAZABhAHkA
cwAAHWEAZABqAHUAcwB0AG0AZQBuAHQAdAB5AHAAZQAAF2IAdQBzAGkAbgBlAHMAcwBkAGEAeQAA
CU4AVQBMAEwAAAcgAHwAIAAAFTAAMAAwADEALQAwADEALQAwADEAAR1DAG8AbgBmAGkAZwB1AHIA
YQB0AGkAbwBuAHMAACdHAGUAdABSAGUAcABvAHIAdABEAGUAZgBpAG4AaQB0AGkAbwBuAAAxRwBl
AHQAVwBvAHIAawBzAGgAZQBlAHQARgByAG8AbQBXAG8AcgBrAEIAbwBvAGsAAA1WAGEAbAB1AGUA
MgAAH3MAcABhAF8AcgBmAHgAXwByAHUAbgBfAHMAcQBsAAADIAAAI3MAcABhAF8AcgBmAHgAXwBy
AHUAbgBfAHMAcQBsACAAIAAAAywAABNfAHQAZQBtAHAAbABhAHQAZQAAhQdTAEUATABFAEMAVAAg
AHIAcAAuAG4AYQBtAGUALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAByAHAALgByAGUAcABvAHIAdABfAHAAYQByAGEAbQBz
AGUAdABfAGkAZAAgAFsAUABhAHIAYQBtAHMAZQB0AEkAZABdACwADQAKACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAcgBwAHQALgBy
AGUAcABvAHIAdABfAHAAYQBnAGUAXwB0AGEAYgBsAGkAeABfAGkAZAAgAFsAVABhAGIAbABpAHgA
SQBkAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAByAHAALgBuAGEAbQBlACAAWwBSAGUAcABvAHIAdABOAGEAbQBlAF0A
LAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAByAHAALgBwAGEAZwBlAF8AaQBkACAAUABhAGcAZQBJAEQALAANAAoAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABy
AHAALgByAGUAcABvAHIAdABfAHMAdABhAHQAdQBzAF8AaQBkACAAWwBSAGUAcABvAHIAdABTAHQA
YQB0AHUAcwBJAGQAXQANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAARgBSAE8ATQAgACAAIAByAGUAcABvAHIAdABfAHAAYQByAGEAbQBzAGUAdAAgAHIA
cAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIABJAE4ATgBFAFIAIABKAE8ASQBOACAAcgBlAHAAbwByAHQAXwBwAGEAZwBlAF8A
dABhAGIAbABpAHgAIAByAHAAdAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBOACAAIAByAHAAdAAuAHAA
YQBnAGUAXwBpAGQAIAA9ACAAcgBwAC4AcABhAGcAZQBfAGkAZAANAAoAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABJAE4ATgBFAFIA
IABKAE8ASQBOACAAcgBlAHAAbwByAHQAXwBwAGEAZwBlACAAcgBwADIADQAKACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgAE8ATgAgACAAcgBwAHQALgBwAGEAZwBlAF8AaQBkACAAPQAgAHIAcAAyAC4AcgBlAHAAbwBy
AHQAXwBwAGEAZwBlAF8AaQBkAAAnIABXAEgARQBSAEUAIAAgAHIAcAAuAE4AQQBNAEUAIAA9ACAA
JwABDVAAYQBnAGUASQBkAAAVUABhAHIAYQBtAHMAZQB0AEkAZAAAFVIAZQBwAG8AcgB0AE4AYQBt
AGUAAB1SAGUAcABvAHIAdABTAHQAYQB0AHUAcwBJAGQAABFUAGEAYgBsAGkAeABJAGQAAAUnACwA
AQ1fAFAAYQByAGEAbQAAW0QAYQB0AGEAVAB5AHAAZQBDAG8AbQBwAGEAdABpAGIAaQBsAGkAdAB5
AD0AOAAwADsATQBBAFIAUwAgAEMAbwBuAG4AZQBjAHQAaQBvAG4APQBUAHIAdQBlAAAFQQAyAAAD
QAAAAzIAABEnACEAUgAxAEMAMQA6AFIAAQNDAAAXPABTAGkAZwBuAGEAdAB1AHIAZQA6AAAPUgBl
AHAAbABhAGMAZQAAAz4AACFHAGUAdABVAHMAZQByAFMAaQBnAG4AYQB0AHUAcgBlAABVcwBwAGEA
XwBlAHgAYwBlAGwAXwBzAG4AYQBwAHMAaABvAHQAcwAgAEAAZgBsAGEAZwA9ACcAeQAnACwAQAB1
AHMAZQByAF8AbgBhAG0AZQA9ACcAARlzAG4AYQBwAHMAaABvAHQAbwBuAGwAeQAAI3kAeQB5AHkA
TQBNAGQAZABfAEgASABtAG0AcwBzAGYAZgAACS4AcABuAGcAAAdwAGQAZgAACS4AcABkAGYAAAdw
AG4AZwAAC2UAeABjAGUAbAAACXcAbwByAGQAAAsuAGQAbwBjAHgAAFNzAHAAYQBfAGUAeABjAGUA
bABfAHMAbgBhAHAAcwBoAG8AdABzACAAQABmAGwAYQBnAD0AJwBoACcALABAAHMAaABlAGUAdABf
AGkAZAA9ACcAATMnACAALABAAHMAbgBhAHAAcwBoAG8AdABfAHMAaABlAGUAdABfAG4AYQBtAGUA
PQAnAAEvJwAsACAAQABzAG4AYQBwAHMAaABvAHQAXwBmAGkAbABlAG4AYQBtAGUAPQAnAAEpJwAs
ACAAQABhAHAAcABsAGkAZQBkAF8AZgBpAGwAdABlAHIAPQAnAAElJwAsACAAQAByAGUAZgByAGUA
cwBoAGUAZABfAG8AbgA9ACcAASt5AHkAeQB5ACAATQBNAE0ATQAgAGQAZAAgAEgASAA6AG0AbQA6
AHMAcwAAHycALABAAHAAcgBvAGMAZQBzAHMAXwBpAGQAPQAnAAFnUwBFAEwARQBDAFQAIABkAGIA
bwAuAEYATgBBAFIAZQBzAG8AbAB2AGUARAB5AG4AYQBtAGkAYwBEAGEAdABlACgAJwB7ADAAfQB8
AHsAMQB9AHwAewAyAH0AfAB7ADMAfQAnACkAARV5AHkAeQB5AC0ATQBNAC0AZABkAAERcAByAG8A
dgBpAGQAZQByAAATdAByAGEAbgBzAGwAYQB0AGUAAAM7AAAJewBSADEAfQAACXsAUgAyAH0AAAl0
AHIAdQBlAAAZZgBhAHIAcgBtAHMAXwBhAGQAbQBpAG4AAABFVC8mpgEORaaqw7iyZfKsAAMgAAEE
IAEBCAUgAQERFQQgAQEOBiABARGApQUgAgEODgQgAQEGByACARJ5EnkFIAEBEnkHBwISTRKAnAUg
ABGBOQYgAgEOEkEEIAASTQMgAAIEIAEcCAMgAA4HAAQODg4ODgQAAQIOBQACAg4OBwABEnkRgJEF
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
BLLv//8Ese///wTN7///BMHv//8Evu///wS97///BOfv//8Ev+///wTS7///BPjv//8EDQAAAAQO
AAAABObv//8Eyu///wEABlAATgBHAAQZAAAAAQEBHAEbARMBGYCrLAAAgKVTeXN0ZW0uUnVudGlt
ZS5JbnRlcm9wU2VydmljZXMuQ3VzdG9tTWFyc2hhbGVycy5FbnVtZXJhdG9yVG9FbnVtVmFyaWFu
dE1hcnNoYWxlciwgQ3VzdG9tTWFyc2hhbGVycywgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5l
dXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EAARoCBggEBhKAyAMGEgwDBhJB
AwYSRQIGCQcGFRJJARIQBAYSgJ0EBhKAoQMGEhwEBhKA2AcGFRJJARIkBwYVEkkBEjgHBhUSSQES
LAcGFRJJARIoBAYSgLEDBhI0AwYSPAMGEngCBgIDBhJQBwYVEkkBEkwDBhJIAwYSJAcGFRJJARJY
AwYSZAQGEYEBBwYVEkkBEnQHBhUSSQESfAMGEnQEBhGAkAQGEYDcBAYRgOAEBhGA5AQGEYDoBAYR
gOwEBhGA8AQGEYD0BAYRgPgEBhGA/AQGEYEABAYRgQQEBhGBCAQGEYEMBAYRgRAEBhGBFAQGEYEY
BAYRgRwPBhUSZQEVEmkDEm0cEoC4BAYSgTgIBhUScQISEA4NBhUSZQEVEmkDEm0cHBIGFRJlARUS
dQUSbRJ5HBKAyBwPBhUSZQEVEmkDEm0cEoDYDgYVEmUBFRJ9BBJtHA4cBAYRgUgEBhKBUAgGFRJx
AhJkAggGFRJxAhJkDgQGEoDBDwYVEmUBFRJ9BBJtEnkcHA4GFRJlARUSfQQSbQ4cHA0GFRJlARUS
aQMSbRwCDQYVEmUBFRJpAxJtHA4SBhUSZQEVEoDVAxJtFRJJAQ4cBAYSgXAIBhUScQISLAIJBhUS
aQMOEiwOCAYVEnECEiwOCAYVEnECEigICAYVEnECETAOBwYVEnECDgIIBhUScQIRMAgIBhUSaQMO
Dg4PBhUSZQEVEmkDEm0SgNgcDwYVEmUBFRJ1BRJtHBwcHA0GFRJlARUSgNkCEm0cBgYVEkkBDgQG
EoGIDgYVEmUBFRJ9BBJtHBwcDgYVEmUBFRJ9BBJtHAMcDwYVEmUBFRJpAxJtHBKA7Q0GFRJlARUS
aQMSbRwIDwYVEmUBFRJ9BBJtElQcHA4GFRJlARUSaQMSbRwSeBIGFRJlARUSdQUSbRJUEoDIHBwE
BhKBxA8GFRJlARUSaQMSbRwSgLQDBhJUAwYSaA4GFRJlARUSfQQSbRwIHA8GFRJlARUSdQUSbRwO
DhwNBhUSZQEVEmkDEm0cDQ4GFRJlARUSfQQSbQIcHA8GFRJlARUSaQMSbRwSgKAEBhKCIAgGFRJx
AhFsDggGFRJxAhFsCAYAAgkYEAkFIAASgMgGIAEBEoDIBCAAEgwFIAEBEgwEIAASQQUgAQESQQQg
ABJFBSABARJFCSAEAQ4SQRJFDgggABUSSQESEAkgAQEVEkkBEhAFIAESWQ4DIAAJCSACARUSSQEO
AgYgAwEODgIFIAESRQ4FAAASgJ0GAAEBEoChBAAAEhwDAAABBSAAEoDYBiABARKA2AggABUSSQES
JAkgAQEVEkkBEiQIIAAVEkkBEjgJIAEBFRJJARI4CSACARKA2BKAyAggAhKAuBIkCAUgAQESUAog
BBKAuBIkCAgICCAEAQgICBIkCSAFAQgICAgSJAkgAhKAsRKAsQ4NIAQSgLESgLESgMkODgUgAQES
JAggABUSSQESLAkgAQEVEkkBEiwIIAAVEkkBEigJIAEBFRJJARIoBCAAEjQFIAEBEjQEIAASPAUg
AQESPAQgABJ4BSABARJ4BCABAQIKIAMBEoDYEoDIDgQgABJQBSABAhJIBCAAEkQIIAAVEkkBEkwJ
IAEBFRJJARJMBCAAEkgFIAEBEkgEIAASJAYgAgESRQ4IIAAVEkkBElgJIAEBFRJJARJYBCAAEmQF
IAEBEmQGIAESgJwOCQACEoDYEoDIDgYgAgEOEAkGIAEBEoCcBSABEngOBSABEWAOESAGAhKAnBKA
yBKA2A4SRRFgCyADARJoEoCcEoDICCADAQ4dDhAJBSABARJoCyADARJoEoDIEoDYCCADAhKA2A4O
ByACAhKA2A4JIAISgNgSgMgOCSACARKAnBKAyAUgABGBAQYgAQERgQEIIAAVEkkBEnQJIAEBFRJJ
ARJ0CCAAFRJJARJ8CSABARUSSQESfAQgABJ0BSABARJ0AwAADgYAAgEOEkELAAEVEkkBEjgSgMgM
AAIVEkkBEiwOEoDIBgACDg4SNAkAAhKA2A4SgMgJAAIBEoDYEoDIDAADARKA2BKA2BKAyAcAAggS
gNgOCQADCBKA2A4SNAYAAQISgNgIAAMCEoDYCAgJAAIBEoDYEoDYCQACAhKA2BKAyAcAAggSgMgO
BQACDhwICgADEoDYEoDIDgIIAAESgLgSgNgJIAQBEBwOHB0cBAABCBwEAAEOHAQAAQEJCxABAhUS
SQEeAA4OBgABAhKBCQUAAg4OAhQQAQIVEoENAR4AFRKBDQEeABKBERMQAQIVEoENAR4AFRKBDQEe
ABJNFBABAhUSgQ0BHgAVEoENAR4AEoCNBSAAEoC4BCABARwKIAUOHBwRgQwcHAkgAhwSgLgRgNwE
IAEcHAYgAwgcHBwJIAIcEYEIEYDkBSACHBwcBiADARwcHBAgCRKAuBwcHBwcEYEUHBwcBSAAEoCs
BSAAEoCwCSACEoC4EYDgHAUgAgEcHAsgBBwRgQQRgQAcHAYgARKAvBwQIAcSgLwOEYCQEYCQDAwM
DAcgBBwcHBwcBiABEoDIHBQgDxKAyA4cHBwcHBwcHBwcHBwcHAUgABKA1AUgABKAxBEgDAEcHBwc
HBwRgRAcHBwcHAUgABGBHAYgAQERgRwFIAASgMAHIAISgLgcHBMgEAEcHBwcHBwcHBwcHBwcHBwc
DiAJARGA8BwcHBwcHBwcBSABAhIQBSABDhIQBSABAhJkBSABDhJkBSABAhIsBSABAhIoBiACDg4S
LAUgAQ4SLAUgAQgSKAUgAQ4RMAUgAQgRMAUgAQIRMAUgAQISWAUgAQ4RbAUgAQgRbAUoABKAyAMo
AA4EKAASDAQoABJBBCgAEkUIKAAVEkkBEhADKAAIBQgAEoCdBQgAEoChBAgAEhwFKAASgNgIKAAV
EkkBEiQIKAAVEkkBEjgIKAAVEkkBEiwIKAAVEkkBEigFKAASgLEEKAASNAQoABI8BCgAEngDKAAC
CCgAFRJJARJMBCgAEkgEKAASJAgoABUSSQESWAQoABJkBSgAEYEBCCgAFRJJARJ0CCgAFRJJARJ8
BCgAEnQFCAASgLgDCAAcAwgADgoIBQ4cHBGBDBwcAwgACAUIAhwcHAUIABKArAUIABKAsAQIARwc
BggBEoDIHAUIABKA1AMIAAIFCAASgMQFCAARgRwFCAASgMAHCAISgLgcHAgBAAgAAAAAAB4BAAEA
VAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfZGQxNWIxYmFjY2ZiNDQ0
NDhjMDE1Njc5MGIzZWFhMjAAAAUBAAAAAA4BAAlNaWNyb3NvZnQAAB8BABpDb3B5cmlnaHQgQCBN
aWNyb3NvZnQgMjAxNgAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0CAEAZwIAAAAACAEAdQAAAAAACAEAbAIAAAAA
CAEAYAAAAAAACAEAYwAAAAAACAEAAAAAAAAACAEArgIAAAAACAEAtQEAAAAACAEAwQEAAAAACAEA
7QAAAAAACAEA7gAAAAAACAEAcQAAAAAACAEAcAAAAAAACAEA8AAAAAAACAEA8QAAAAAACAEA8gAA
AAAACAEAJwIAAAAACAEAgAQAAAAACAEA1QAAAAAACAEAdgAAAAAACAEA9wAAAAAACAEAjgEAAAAA
CAEAkgAAAAAACAEACwEAAAAACAEA/AAAAAAACAEAgQAAAAAACAEAfwAAAAAACAEA/P///wAACAEA
wQAAAAAACAEAEAEAAAAACAEAAgEAAAAACAEAmgEAAAAACAEAigAAAAAACAEAfgAAAAAACAEABgAA
AAAACAEAbAUAAAAACAEAiAcAAAAACAEAuwYAAAAACAEAtQAAAAAACAEABAAAAAAACAEAAQAAAAAA
CAEADwAAAAAACAEAgwcAAAAACAEAPAIAAAAACAEAVwEAAAAACAEALgEAAAAACAEALgIAAAAACAEA
ngcAAAAACAEAAwAAAAAACAEAFQEAAAAACAEArAUAAAAACAEA7gEAAAAACAEADAAAAAAACAEAhQcA
AAAACAEAMAEAAAAACAEAbgAAAAAACAEA6wAAAAAACAEAHQEAAAAACAEAYQUAAAAACAEAJAQAAAAA
CAEA0wAAAAAACAEAsgIAAAAACAEAxQAAAAAACAEAnAEAAAAACAEA7QcAAAAACAEAvQkAAAAACAEA
GgAAAAAASwEAJDJkZjhkMDRjLTViZmEtMTAxYi1iZGU1LTAwYWEwMDQ0ZGU1MiFNaWNyb3NvZnQu
T2ZmaWNlLkNvcmUuTXNvVHJpU3RhdGUAACkBACQwMDAyNDQxMy0wMDAwLTAwMDAtQzAwMC0wMDAw
MDAwMDAwNDYAAAYBAAIAAABWAQAoTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLkFwcEV2
ZW50cyhNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuQXBwRXZlbnRzAABYAQAkMDAwMjA4
MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Lk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5F
eGNlbC5BcHBFdmVudHNfRXZlbnQAACkBACQwMDAyMDhENS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAw
MDAwNDYAAF8BAFpTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0
dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkAACkBACQwMDAyMDhD
Ri0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDAyNDQxMS0wMDAwLTAwMDAtQzAw
MC0wMDAwMDAwMDAwNDYAAFYBAChNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuRG9jRXZl
bnRzKE1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Eb2NFdmVudHMAAFgBACQwMDAyMDgx
My0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYuTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4
Y2VsLkRvY0V2ZW50c19FdmVudAAAKQEAJDAwMDIwODRELTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAw
MDA0NgAAKQEAJDAwMDIwODcwLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAADQEACF9EZWZh
dWx0AAApAQAkMDAwMjA4NzItMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjA4
NDYtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjQ0MzktMDAwMC0wMDAwLUMw
MDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjQ0M0EtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2
AAApAQAkMDAwMjA4RDctMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjA4REEt
MDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwMjQ0MTItMDAwMC0wMDAwLUMwMDAt
MDAwMDAwMDAwMDQ2AABgAQAtTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLldvcmtib29r
RXZlbnRzLU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Xb3JrYm9va0V2ZW50cwAAXQEA
JDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjNNaWNyb3NvZnQuT2ZmaWNlLklu
dGVyb3AuRXhjZWwuV29ya2Jvb2tFdmVudHNfRXZlbnQAACkBACQwMDAyMDhEQi0wMDAwLTAwMDAt
QzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDAyMDhEOC0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAw
NDYAAFcBACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYtTWljcm9zb2Z0Lk9m
ZmljZS5JbnRlcm9wLkV4Y2VsLlhsQXV0b0ZpbGxUeXBlAABTAQAkMDAwMjA4MTMtMDAwMC0wMDAw
LWMwMDAtMDAwMDAwMDAwMDQ2KU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbENlbGxU
eXBlAABcAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Mk1pY3Jvc29mdC5P
ZmZpY2UuSW50ZXJvcC5FeGNlbC5YbENvcHlQaWN0dXJlRm9ybWF0AABfAQAkMDAwMjA4MTMtMDAw
MC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2NU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Y
bERlbGV0ZVNoaWZ0RGlyZWN0aW9uAABVAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAw
MDAwMDQ2K01pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbEZpbmRMb29rSW4AAFoBACQw
MDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYwTWljcm9zb2Z0Lk9mZmljZS5JbnRl
cm9wLkV4Y2VsLlhsRml4ZWRGb3JtYXRUeXBlAABdAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAt
MDAwMDAwMDAwMDQ2M01pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbEluc2VydEZvcm1h
dE9yaWdpbgAAXwEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjVNaWNyb3Nv
ZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuWGxJbnNlcnRTaGlmdERpcmVjdGlvbgAAUQEAJDAwMDIw
ODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NidNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3Au
RXhjZWwuWGxMb29rQXQAAGABACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY2
TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLlhsUGFzdGVTcGVjaWFsT3BlcmF0aW9uAABU
AQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Kk1pY3Jvc29mdC5PZmZpY2Uu
SW50ZXJvcC5FeGNlbC5YbFBhc3RlVHlwZQAAXAEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAw
MDAwMDAwMDA0NjJNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuWGxQaWN0dXJlQXBwZWFy
YW5jZQAAWQEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0Ni9NaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuRXhjZWwuWGxSZWZlcmVuY2VTdHlsZQAAWwEAJDAwMDIwODEzLTAwMDAt
MDAwMC1jMDAwLTAwMDAwMDAwMDA0NjFNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuWGxT
YXZlQXNBY2Nlc3NNb2RlAABaAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2
ME1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbFNlYXJjaERpcmVjdGlvbgAAVgEAJDAw
MDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NixNaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuRXhjZWwuWGxTZWFyY2hPcmRlcgAAWgEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAw
MDAwMDA0NjBNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuWGxTaGVldFZpc2liaWxpdHkA
ACkBACQ2MTE2M0VGMC00NEU5LTQxM0YtQTgyMS1DQzgxNTM5QTcyQTIAAAC0AAAAzsrvvgEAAACR
AAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIsIG1zY29ybGliLCBWZXJzaW9uPTQu
MC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNT
eXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAA
HAcCAAAAAAAAAAAANgcCAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgHAgAAAAAAAAAAAAAAX0Nv
ckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFgg
AgA+BAAAAAAAAAAAAAA+BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAn3CBHAAAAQCfcIEcPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEngMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAegMAAAEAMAAwADAAMAAwADQA
YgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAADQACgABAEMAbwBtAHAAYQBuAHkATgBh
AG0AZQAAAAAATQBpAGMAcgBvAHMAbwBmAHQAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AZABkADEANQBiADEAYgBhAGMAYwBmAGIANAA0ADQANAA4AGMAMAAx
ADUANgA3ADkAMABiADMAZQBhAGEAMgAwAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADcAMgA5ADcALgAyADgAOAAzADEAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AZABkADEANQBiADEAYgBhAGMAYwBmAGIANAA0ADQANAA4AGMAMAAxADUA
NgA3ADkAMABiADMAZQBhAGEAMgAwAC4AZABsAGwAAABaABsAAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABNAGkAYwByAG8AcwBvAGYAdAAgADIA
MAAxADYAAAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAo
AAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfAGQAZAAxADUAYgAxAGIA
YQBjAGMAZgBiADQANAA0ADQAOABjADAAMQA1ADYANwA5ADAAYgAzAGUAYQBhADIAMAAuAGQAbABs
AAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwBkAGQAMQA1AGIAMQBiAGEA
YwBjAGYAYgA0ADQANAA0ADgAYwAwADEANQA2ADcAOQAwAGIAMwBlAGEAYQAyADAAAABCAA8AAQBQ
AHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMgA5ADcALgAyADgAOAAzADEA
AAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcAMgA5
ADcALgAyADgAOAAzADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAMAAAASDcAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="Settlement.cs"
            Line="337"
            Column="9" />
          <Breakpoint
            Enabled="True"
            File="Snapshot.cs"
            Line="99"
            Column="21" />
          <Breakpoint
            Enabled="True"
            File="Snapshot.cs"
            Line="960"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="128"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="174"
            Column="17" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="191,42"
          Id="Package\SCR_EXCEL_SNAPSHOT"
          TopLeft="347,71" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>