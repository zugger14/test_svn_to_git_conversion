<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/3/2016 10:20:17 AM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="PSLDEV10"
  DTS:CreatorName="PSLDEV10\Administrator"
  DTS:DTSID="{ED0161BA-809E-483B-9154-A0F389B11535}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.7001.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="ExcelSnapshot"
  DTS:PackageType="5"
  DTS:ProtectionLevel="0"
  DTS:VersionBuild="590"
  DTS:VersionGUID="{7DB3039D-3631-4956-8ADE-FE65113498CD}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[OLE_CONN_MainDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{2DAAFDCE-D134-423E-9B2C-455603BC9AE4}"
      DTS:ObjectName="OLE_CONN_MainDB">
      <DTS:PropertyExpression
        DTS:Name="UserName">@[User::PS_UserName]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=US-D-DEMO01.farrms.us,2033;User ID=farrms_admin;Initial Catalog=TRMTracker_Master_Demo4;Provider=SQLNCLI11.1;Persist Security Info=True;Auto Translate=False;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"></DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration
      DTS:ConfigurationString="SSIS_DB_CONFIG_PATH_TRMTracker_DEV"
      DTS:ConfigurationType="5"
      DTS:CreationName=""
      DTS:DTSID="{3E3C2DC3-936E-453C-9D21-4328F7391056}"
      DTS:ObjectName="XML_CFG_EXCEL_SNAPSHOT" />
    <DTS:Configuration
      DTS:ConfigurationString="&quot;OLE_CONN_MainDB&quot;;&quot;[dbo].[ssis_configurations]&quot;;&quot;PRJ_Excel_Snapshot&quot;;"
      DTS:ConfigurationType="7"
      DTS:CreationName=""
      DTS:DTSID="{E9E7BB68-663E-44DE-B364-936BAAAB91D8}"
      DTS:ObjectName="SQL_CFG_OLEDB_CONNECTION" />
  </DTS:Configurations>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="OLE_CONN_MainDB"
      DTS:CreationName="DTS.LogProviderSQLServer.3"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{2D18D90B-EA89-409F-98FF-1D09C4002DC5}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7DB09DDD-0BAB-4B8B-B287-C3160BD53C8B}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ExcelSheetId">
      <DTS:VariableValue
        DTS:DataType="8">1146</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{92ECF050-132F-449D-ACA4-0B640B3BE9A2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ExportFormat">
      <DTS:VariableValue
        DTS:DataType="8">PNG</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FDEB1745-FC6F-439A-A44B-1E4A857388F2}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ImageSnapshot">
      <DTS:VariableValue
        DTS:DataType="8">y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DC66927B-0A08-43AE-B05D-53D5DCB6D676}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_PackageSubDir">
      <DTS:VariableValue
        DTS:DataType="8">\ExcelSnapshot\Package</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{30D5E1BD-4CA9-401E-8CB9-9966B9DAB326}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_ProcessId">
      <DTS:VariableValue
        DTS:DataType="8">3E042DC6_E9F1_434E_BADE_458B4A23B649</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6D3BC407-FCB8-4A07-BB84-99943A1660AD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_SettlementCalc">
      <DTS:VariableValue
        DTS:DataType="8">n</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{A2819A94-DF0B-453A-A0EC-1F42A1191943}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_Synchronize">
      <DTS:VariableValue
        DTS:DataType="8">y</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0AE1BCAB-B286-4254-B624-C15FECE79D75}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="PS_UserName">
      <DTS:VariableValue
        DTS:DataType="8">farrms_admin</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">2,7,OnError,12,OnTaskFailed</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:Property
      DTS:EventName="OnTaskFailed"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{2D18D90B-EA89-409F-98FF-1D09C4002DC5}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SCR_EXCEL_SNAPSHOT"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:Description="Script Task"
      DTS:DTSID="{F0B78735-95E4-48EB-832C-D660046379D8}"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:LocaleID="-1"
      DTS:ObjectName="SCR_EXCEL_SNAPSHOT"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_dd15b1baccfb44448c0156790b3eaa20"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadWriteVariables="User::PS_ExcelSheetId,User::PS_ExportFormat,User::PS_ImageSnapshot,User::PS_PackageSubDir,User::PS_ProcessId,User::PS_SettlementCalc,User::PS_Synchronize,User::PS_UserName">
          <ProjectItem
            Name="Snapshot.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Serialization;
using ADODB;
using Microsoft.Office.Core;
using Microsoft.Office.Interop.Excel;
using System.Xml.Linq;
using ST_dd15b1baccfb44448c0156790b3eaa20;
using Application = Microsoft.Office.Interop.Excel.Application;
using Shape = Microsoft.Office.Interop.Excel.Shape;


namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class Snapshot
    {
        //  Added to support settlement specific initlze
        public Snapshot(bool settlementCalc)
        {
            
        }
        public Snapshot(OleDbConnection _oleDbConnection, string exportFormat = "PNG")
        {
            this.ExportFormat = exportFormat;
            OleDbConnection = _oleDbConnection;
            OleDbCommand cmd = new OleDbCommand("spa_excel_snapshots 'c'", OleDbConnection);
            using (OleDbDataReader rd = cmd.ExecuteReader())
            {
                if (rd.HasRows)
                    rd.Read();

                ReportRepository = rd[0].ToString();    //  excel_reports
                DocumentPath = rd[1].ToString();    //  temp_note
            }
        }

        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        private string ReportRepository { get; set; }
        private string DocumentPath { get; set; }
        public string SchedulerFolder { get; set; }
        public bool Synchronize { get; set; }
        public bool ImageSnapshot { get; set; }
        //public string SheetNames { get; set; }
        public string UserName { get; set; }
        public OleDbConnection OleDbConnection { get; set; }
        public string ExcelReplica { get; set; }
        private List<ReportFilter> ViewReportFilters { get; set; }

        public string ProcessId { get; set; }
        public ExcelSheets ExcelSheet { get; set; }
        private string ExportFormat { get; set; }
        private string AppliedFiltersLabel { get; set; }

        //View Report Filter . Eg xml format
        /*
         * <Parameters>
	            <Parameter>
		            <Name>as_of_date_from</Name>
		            <Value>5</Value>
	            </Parameter>
	            <Parameter>
		            <Name>as_of_date_to</Name>
		            <Value>5</Value>
	            </Parameter>
           </Parameters>
         */



        private Application CreateReplica(string sourceFileName)
        {
            uint iProcessId;
            Application xlApp = new Application();
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);

            try
            {
                string replicaFile = DocumentPath + this.ProcessId + ".xlsx";
                try 
	            {
                    if (File.Exists(replicaFile))
                        File.Delete(replicaFile);
	            }
	            catch (Exception)
	            {
		
	            }
                

                File.Copy(sourceFileName, replicaFile);

                xlApp.Visible = false;
                xlApp.DisplayAlerts = false;
                Workbook wb = xlApp.Workbooks.Add(replicaFile);

                /*
                foreach (Worksheet ws in wb.Worksheets)
                {
                    ws.Unprotect();
                    foreach (PivotTable pt in ws.PivotTables())
                    {
                        string sourceData = pt.SourceData;
                        string fname = "[" + Path.GetFileName(sourceFileName) + "]";
                        sourceData = sourceData.Substring(sourceData.IndexOf(']') + 1);
                        sourceData = Path.GetDirectoryName(replicaFile) + @"\[" + Path.GetFileName(replicaFile) + "]" + sourceData.Replace(fname, "").Replace("'", "");
                        pt.SourceData = sourceData;
                    }
                }
                 */



                wb.Close(SaveChanges: true, Filename: replicaFile);
                ExcelReplica = replicaFile;
                return xlApp;
            }
            catch (Exception ex)
            {
                KillExcelProcess(xlApp);
                return null;
            }

        }

        public void DeleteReplica(bool deleteFile)
        {
            try
            {
                if (deleteFile)
                    File.Delete(ExcelReplica);
            }
            catch (Exception ex)
            {
                throw;
            }

        }


        public void ParseViewReportFilterXMl()
        {
            this.ViewReportFilters = new List<ReportFilter>();
            try
            {
                using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                {
                    cn.Open();
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM adiha_process.dbo.excel_add_in_view_report_filter_" + this.ProcessId, cn))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                            {
                                var rf = new ReportFilter();

                                for (int i = 0; i < rd.FieldCount; i++)
                                {
                                    string fieldName = rd.GetName(i);
                                    if (fieldName.ToLower() == "name") rf.Name = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "value") rf.Value = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "displaylabel") rf.DisplayLabel = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "displayvalue") rf.DisplayValue = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "overwritetype") rf.OverrideType = rd[fieldName].ToInt();
                                    if (fieldName.ToLower() == "adjustmentdays") rf.AdjustmentDays = rd[fieldName].ToInt();
                                    if (fieldName.ToLower() == "adjustmenttype") rf.AdjustmentType = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "businessday") rf.BusinessDay = rd[fieldName].ToString();
                                }

                                if (rf.Value.Trim() == "")
                                    rf.Value = "NULL";
                                this.ViewReportFilters.Add(rf);
                            }
                        }
                    }
                    
                    this.AppliedFiltersLabel = "";
                    foreach (ReportFilter rf in this.ViewReportFilters)
                    {
                        //  Resolve dynamic date
                        rf.ResolveDynamicDate(cn);
                        if (string.IsNullOrEmpty(rf.DisplayLabel) && !string.IsNullOrEmpty(rf.Name)) rf.DisplayLabel = rf.Name;
                        if (string.IsNullOrEmpty(rf.DisplayValue) && !string.IsNullOrEmpty(rf.Value)) rf.DisplayValue = rf.Value;

                        if (!string.IsNullOrEmpty(rf.DisplayLabel) && !string.IsNullOrEmpty(rf.DisplayValue))
                        {
                            this.AppliedFiltersLabel += rf.DisplayLabel + "=" + rf.DisplayValue + " | ";
                        }
                    }
                    this.AppliedFiltersLabel = this.AppliedFiltersLabel.Trim().TrimEnd('|').Replace("0001-01-01", "");
                    cn.Close();
                }
            }
            catch (Exception)
            {
                
            }
        }

        private static Worksheet CheckIfSheetExists(Workbook wb, string sheetName)
        {
            Worksheet ws = null;
            foreach (Worksheet worksheet in wb.Worksheets)
            {
                if (worksheet.Name.ToLower() == sheetName.ToLower())
                {
                    ws = worksheet;
                    break;
                }
                else
                {
                    ws = null;
                }
            }
            return ws;
        }
        public void SynchronizeExcel(string excelFileName, out uint iProcessId)
        {

            iProcessId = 0;
            if (!Synchronize)
                return;

            Application xlApp = this.CreateReplica(excelFileName);
            if (xlApp == null) return; //   if cannot copy to replica folder 

            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);
            xlApp.Visible = false;
            xlApp.DisplayAlerts = false;
            Workbook wb = xlApp.Workbooks.Open(this.ExcelReplica);

            Worksheet wsConfiguration = GetWorksheetFromWorkBook(wb, "Configurations");

            List<ReportSheet> reportSheets = new List<ReportSheet>();

            if (wsConfiguration != null)
            {
                //  retrive rfx query for selected report
                bool empty = true;
                int row = 2;
                while (empty)
                {
                    var cellSheetName = (Range)wsConfiguration.Cells[row, 2];
                    if (cellSheetName.Value2 != null)
                    {
                        //  Check if report configuration does exists , if not try to changes report configuration paramset / tablix id according to report name
                        ReportData rd = GetReportDefinition(((Range)wsConfiguration.Cells[row, 1]).Value2.ToString());
                        if (rd == null) //  report doesnt exists in system
                        {
                            row++;
                            continue;
                        }

                        //  Don't add report sheet which doesnt exist in file , user can delte trm report sheet from file but its not removed from confiuration , same to parameter sheet
                        if (GetWorksheetFromWorkBook(wb, wsConfiguration.Cells[row, 2].Value2.ToString()) == null || GetWorksheetFromWorkBook(wb, wsConfiguration.Cells[row, 4].Value2.ToString()) == null)
                        {
                            row++;
                            continue;
                        }
                        ReportSheet rs = new ReportSheet() { ReportName = ((Range)wsConfiguration.Cells[row, 1]).Value2.ToString(), SheetName = ((Range)wsConfiguration.Cells[row, 2]).Value2.ToString(), SpaRfxQuery = ((Range)wsConfiguration.Cells[row, 3]).Value2.ToString(), ParameterSheet = ((Range)wsConfiguration.Cells[row, 4]).Value2.ToString(), Description = "" };

                        reportSheets.Add(rs);

                        if (rd != null)
                        {
                            string[] arr = rs.SpaRfxQuery.Split(',');
                            if (arr.Count() > 0)
                            {
                                arr[0] = arr[0].Replace("spa_rfx_run_sql", "").Replace(" ", "");
                                //  Check if config has been changed
                                if (rd.ParamsetId != arr[0].ToInt() || rd.TablixId != arr[1].ToInt())
                                {
                                    string query = "spa_rfx_run_sql  " + rd.ParamsetId.ToString() + "," + rd.TablixId.ToString();
                                    for (int i = 2; i < arr.Count(); i++)
                                    {
                                        query += "," + arr[i];
                                    }
                                    var pCell = (Microsoft.Office.Interop.Excel.Range)wsConfiguration.Cells[row, 3];
                                    pCell.Value2 = query;
                                    rs.SpaRfxQuery = query;
                                }
                            }
                        }

                    }
                    else if (cellSheetName.Value2 == null)
                    {
                        empty = false;
                        break;
                    }

                    row++;
                }



                string spaRfxQuery = "";
                
                foreach (ReportSheet rs in reportSheets)
                {
                    OverRideSummary overRideSummary = this.OverRideViewFilter(rs.SpaRfxQuery);

                    Worksheet ws = wb.Worksheets[rs.SheetName];
                    BindRecordSetToWorkSheet(xlApp, wb, ws, this.ExcelReplica, OleDbConnection, overRideSummary);
                }


                SnapHistory history = new SnapHistory()
                {
                    AppliedFilter = this.AppliedFiltersLabel,
                    FileName = excelFileName,
                    RefreshdaDateTime = DateTime.Now
                };
                //foreach (Worksheet ws in wb.Worksheets)
                //{
                //    foreach (PivotTable pt in ws.PivotTables())
                //    {
                //        pt.RefreshTable();
                //    }
                //}
                wb.RefreshAll();
                Worksheet documentWorksheet = wb.Worksheets[ExcelSheet.SheetName];

                //  Excel sheet document type verification
                ExcelSheet.DocumentType = TRMAddin.GetSheetDocumentType(wb, ExcelSheet.SheetName);

                if (ExcelSheet.DocumentType == 106701)      //  Invoice
                {
                    DocumentDesigner doc = new DocumentDesigner(documentWorksheet, wb);
                    TRMAddin.DeleteEntireContents(documentWorksheet, wb);
                    TRMAddin.CopyEntireContents(TRMAddin.CheckIfSheetExists(documentWorksheet.Name + "_template", wb), documentWorksheet);

                    doc.PrepareInvoice();
                    SaveWorksheetSnapshot(history, xlApp, wb);
                }
                else if (ExcelSheet.DocumentType == 106700) //  Report
                {
                    SaveWorksheetSnapshot(history, xlApp, wb);
                }
                else if (ExcelSheet.DocumentType == 106702)     //  Calculation
                {
                    using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                    {
                        cn.Open();
                        ImportExport ixp = new ImportExport(documentWorksheet, wb) { SqlConnection = cn };
                        if (ixp.DataImport != null)
                        {
                            DocumentDesigner docIxp = new DocumentDesigner(documentWorksheet, wb);
                            docIxp.PreparImportData(ixp.DataImport);
                            ixp.Run();
                            SaveWorksheetSnapshot(history, xlApp, wb);
                        }
                        cn.Close();
                    }
                }

                wb.Close(SaveChanges: true, Filename: this.ExcelReplica);


                TerminateExcel(xlApp, wb);
                this.DeleteReplica(deleteFile: false);
            }
            else
            {
                //  Start logging configuration not found
            }


        }

        public void KillExcelProcess(Application xlApp)
        {
            uint iProcessId = 0;
            //Get the process ID of excel so we can kill it later.
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out iProcessId);

            try
            {
                Process pProcess = Process.GetProcessById((int)iProcessId);
                if (pProcess != null)
                    pProcess.Kill();
            }
            catch (System.Exception)
            {
                //just ignore any failure.
            }

        }

        public ReportData GetReportDefinition(string reportName)
        {
            string sql = @"SELECT rp.name,
                               rp.report_paramset_id [ParamsetId],
                               rpt.report_page_tablix_id [TablixId],
                               rp.name [ReportName],
                               rp.page_id PageID,
                               rp.report_status_id [ReportStatusId]
                        FROM   report_paramset rp
                               INNER JOIN report_page_tablix rpt
                                    ON  rpt.page_id = rp.page_id
                               INNER JOIN report_page rp2
                                    ON  rpt.page_id = rp2.report_page_id";
            sql += " WHERE  rp.NAME = '" + reportName + "'";
            //MessageBox.Show(sql);
            OleDbCommand cmd = new OleDbCommand(sql, OleDbConnection);
            cmd.CommandType = System.Data.CommandType.Text;
            OleDbDataReader r = cmd.ExecuteReader();
            if (!r.HasRows)
            {
                r.Close();
                return null;
            }
            r.Read();
            ReportData rData = new ReportData()
            {
                PageID = r["PageId"].ToInt(),
                ParamsetId = r["ParamsetId"].ToInt(),
                ReportName = r["ReportName"].ToString(),
                ReportStatusId = r["ReportStatusId"].ToInt(),
                TablixId = r["TablixId"].ToInt()
            };
            r.Close();
            return rData;
        }


        private OverRideSummary OverRideViewFilter(string spaRfxQuery)
        {
            OverRideSummary ors = new OverRideSummary();
            string[] allParameters = spaRfxQuery.Split(',');

            //  Browse parameters to match rfx parameters
            foreach (string s in allParameters)
            {
                //  detect parameter
                if (s.Contains("="))
                {
                    //  if parameter starts/ends with single quote then replace it
                    string pName = s.Split('=').First().TrimStart('\'').TrimEnd('\'');
                    if (ViewReportFilters != null)
                    {
                        ReportFilter reportFilter = ViewReportFilters.FirstOrDefault(x => x.Name == pName);
                        if (reportFilter != null)
                        {
                            if (s.StartsWith("'"))
                                ors.SpaRfxQuery += "'";
                            if (s.EndsWith("'"))
                                ors.SpaRfxQuery += reportFilter.Name + "=" + reportFilter.Value + "',";
                            else
                                ors.SpaRfxQuery += reportFilter.Name + "=" + reportFilter.Value + ",";
                        }
                        else
                        {
                            ors.SpaRfxQuery += s + ",";
                        }
                    }
                    else
                    {
                        ors.SpaRfxQuery += s + ",";
                    }
                }
                else
                {
                    ors.SpaRfxQuery += s + ",";
                }

            }
            ors.SpaRfxQuery = ors.SpaRfxQuery.TrimEnd(',');

            return ors;
        }

        private bool IsValidDate(string value)
        {
            try
            {
                var obj = Convert.ToDateTime(value.ToString());
                return true;
            }
            catch (Exception)
            {

                return false;
            }
        }


        private bool BindRecordSetToWorkSheet(Application xlApp, Workbook wb, Worksheet ws, string filename, OleDbConnection connection, OverRideSummary overRideSummary)
        {
            Connection cn = new Connection();
            Recordset rs = new Recordset();
            Command cmd = new Command();



            string parameterWorksheet = ws.Name + "_Param";

            try
            {
                //cn.ConnectionString = @"user id=" + d.UserName + ";password=" + d.Password + ";provider=SQLOLEDB;data source=" + d.ServerName + ";Database=" + d.Database;
                //if (d.AuthenticationType == 1)   //  windows authentication
                //    cn.ConnectionString = "provider=SQLOLEDB;Integrated Security=SSPI;Initial Catalog=" + d.Database + ";Data Source=" + d.ServerName;

                cn.ConnectionString = connection.ConnectionString;
                cn.ConnectionString += "DataTypeCompatibility=80;MARS Connection=True";
                cn.Open();
                rs.Open(overRideSummary.SpaRfxQuery, cn, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockOptimistic, 1);

                ws.Cells.ClearContents();
                ws.Cells.ClearFormats();
                ws.Activate();
                //  Header
                for (int i = 0; i < rs.Fields.Count; i++)
                {
                    var cell = (Range)ws.Cells[1, i + 1];
                    cell.Value2 = rs.Fields[i].Name;
                    cell.Font.Bold = true;
                }

                Range range = ws.get_Range("A2");

                range.CopyFromRecordset(rs);
                //range.AutoFormat(XlRangeAutoFormat.xlRangeAutoFormatClassicPivotTable);
                ws.UsedRange.Columns.AutoFit();
                rs.Close();
                cn.Close();
                ChangePivotSourceDataCache(wb);
                //wb.RefreshAll();
                //RefreshSheets(wb);
                //  Freeze Top Row
                //if (range.Value2 != null)
                //{
                //    range.Select();
                //    range.Application.ActiveWindow.FreezePanes = true;
                //}

                //  Rewrite over rided parameter values to _Param work sheet 
                Worksheet wsParam = CheckIfSheetExists(wb, parameterWorksheet);
                string[] arrParams = overRideSummary.SpaRfxQuery.Split(',').Where(x => x.Contains('=')).ToArray();
                foreach (string p in arrParams)
                {
                    int row = 3;
                    bool empty = false;
                    while (!empty)
                    {
                        var cell = (Range)wsParam.Cells[row, 2];
                        if (cell.Value2 != null)
                        {
                            //if (p.Contains(cell.Value2))
                            if (p.Split('=')[0] == cell.Value2)
                            {
                                //  text format
                                ((Range)wsParam.Cells[row, 3]).NumberFormat = "@";
                                string strValue = p.Split('=')[1].TrimStart('\'').TrimEnd('\'');
                                ((Range)wsParam.Cells[row, 3]).Value2 = strValue;
                            }
                        }
                        else
                        {
                            empty = true;
                            break;
                        }
                        row++;
                    }
                }
                //  Rewrite spa rfx query in configuration worksheeet too
                Worksheet wsConfiguration = CheckIfSheetExists(wb, "Configurations");
                if (wsConfiguration != null)
                {
                    int row = 2;
                    bool empty = false;
                    while (!empty)
                    {
                        //  Sheetname
                        var cell = (Range)wsConfiguration.Cells[row, 2];
                        if (cell.Value2 != null)
                        {
                            if (cell.Value2 == ws.Name)
                            {
                                ((Range)wsConfiguration.Cells[row, 3]).Value2 = overRideSummary.SpaRfxQuery;
                            }
                        }
                        else
                        {
                            empty = true;
                            break;
                        }
                        row++;
                    }
                }
                xlApp.DisplayAlerts = false;

                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private void ChangePivotSourceDataCache(Workbook wb)
        {
            foreach (Worksheet ws in wb.Worksheets)
            {
                ws.Unprotect();
                foreach (PivotTable pt in ws.PivotTables())
                {
                    //'[9527CA3D_E48A_4808_9658_9120BFC91837.xlsx]PNL Attribution Report'!$A$1:$Q$13
                    string sourceData = pt.SourceData;
                    string[] pivotSource = sourceData.Split('!');
                    string pivotSourceSheet = pivotSource[0];

                    //  Check if it has file name created by older version enclosed by file
                    if (pivotSource[0] != null && pivotSource[0].Contains(']'))
                    {
                        pivotSourceSheet = "'" + pivotSourceSheet.Substring(pivotSourceSheet.IndexOf(']') + 1);

                    }

                    //  Check if pivot is generated from raw report , there might be custom pivots skip that
                    //var list = TRMAddin.ListAllConfigurations();
                    Worksheet wsReport = CheckIfSheetExists(wb, pivotSourceSheet.Replace("'", ""));

                    //var sheet = list.FirstOrDefault(x => x.ReportSheet == );
                    if (wsReport != null)
                    {
                        Range r = wsReport.UsedRange;
                        string row = r.Rows.Count.ToString();
                        if (r.Rows.Count <= 1)
                            row = "2";

                        string col = r.Columns.Count.ToString();
                        pt.SourceData = "'" + wsReport.Name + "'!R1C1:R" + row + "C" + col;
                    }
                }
            }
        }

        private void SaveWorksheetSnapshot(SnapHistory history, Application app, Workbook wb)
        {
            if (!ImageSnapshot)
                return;

            history.SnapshotSheetName = this.ExcelSheet.SheetName;
            Worksheet worksheet = wb.Worksheets[this.ExcelSheet.SheetName];

            FindAndReplaceSignatureImage(worksheet, wb);
            Thread newThread = new Thread(() => SaveDocument(history, wb, worksheet));

            newThread.SetApartmentState(ApartmentState.STA);
            newThread.Start();
            Thread.Sleep(2000);
        }

        /// <summary>
        /// Finds signature placeholder, replace with singnature image based on its referenced cell. Placeholder Eg. <Signature:Sheet1!A1>, If singnature image is not found it will clear the placeholder contents.
        /// </summary>
        private void FindAndReplaceSignatureImage(Worksheet worksheet, Workbook workbook)
        {
            try
            {
                //  Find signature contents
                bool exitFind = true;
                while (exitFind)
                {
                    Range x = worksheet.Cells.Find("<Signature:", Type.Missing, XlFindLookIn.xlValues, XlLookAt.xlPart, XlSearchOrder.xlByRows, XlSearchDirection.xlNext, false, Type.Missing, Type.Missing);
                    if (x != null)
                    {
                        try
                        {
                            string placeHolderFormula = x.Value2.ToString().Split(':')[1].Replace(">", "");
                            //  If signature is found get the value of referenced cell
                            //x.Value2 = "";
                            //var range = worksheet.get_Range("Sheet1!H2");
                            if (placeHolderFormula.Contains('!'))
                            {
                                Worksheet extWorksheet = TRMAddin.CheckIfSheetExists(placeHolderFormula.Split('!')[0], workbook);
                                var range = extWorksheet.get_Range(placeHolderFormula.Split('!')[1]);


                                //var refValue = worksheet.Range[placeHolderFormula];
                                //  Get image file for this reference cell (reffered to user)

                                string signatureFileName = GetUserSignature(range.Value2.ToString());
                                if (!string.IsNullOrEmpty(signatureFileName) && File.Exists(signatureFileName))
                                {
                                    worksheet.Activate();
                                    worksheet.Select();

                                    float Left = (float)((double)x.Left);
                                    float Top = (float)((double)x.Top);
                                    float imageWidth = 250;
                                    float imageHeight = 80;
                                    
                                    //  Get Image actual height and width
                                    try
                                    {
                                        using (System.IO.Stream stream = File.OpenRead(signatureFileName))
                                        {
                                            using (Image sourceImage = Image.FromStream(stream, false, false))
                                            {
                                                imageWidth = sourceImage.Width;
                                                imageHeight = sourceImage.Height;
                                            }
                                        }
                                    }
                                    catch (Exception)
                                    {
                                    }

                                    worksheet.Shapes.AddPicture(signatureFileName, MsoTriState.msoFalse, MsoTriState.msoCTrue, Left, Top, imageWidth, imageHeight);

                                    //Range picCellRange = worksheet.Cells[x.Row, x.Column];
                                    //picCellRange.Select();
                                    //worksheet.Pictures().Insert(signatureFileName);
                                    x.Value2 = " ";
                                    x.Interior.Color = Color.White;
                                }
                            }
                            x.Value2 = " ";
                            x.Interior.Color = Color.White;
                        }
                        catch (Exception)
                        {
                            x.Value2 = "";
                        }
                    }
                    else
                    {
                        exitFind = false;
                    }
                }
            }
            catch (Exception)
            {

            }
        }

        /// <summary>
        /// Reterives an user signature filename based on referenced cell value (containing username)
        /// </summary>
        /// <param name="userName">username which signature is to be retrived</param>
        /// <returns></returns>
        private string GetUserSignature(string userName)
        {
            try
            {
                if (!string.IsNullOrEmpty(userName))
                {
                    using (var cmd = new OleDbCommand("spa_excel_snapshots @flag='y',@user_name='" + userName + "'", this.OleDbConnection))
                    {
                        using (OleDbDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                                return rd[0].ToString();


                        }
                    }
                }
                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public void PublishSnapshot(string excelFileName, string[] arrWorksheets, out uint iProcessId)
        {
            iProcessId = 0;

            if (!ImageSnapshot) return;
            if (arrWorksheets.Count() == 0) return;

            Application app = new Application();
            GetWindowThreadProcessId((IntPtr)app.Hwnd, out iProcessId);

            app.DisplayAlerts = false;
            Workbook wb = app.Workbooks.Add(excelFileName);

            foreach (string s in arrWorksheets)
            {
                SnapHistory history = new SnapHistory() { AppliedFilter = "snapshotonly", FileName = excelFileName, RefreshdaDateTime = DateTime.Now, SnapshotSheetName = s, SnapshotFileName = "" };
                Worksheet ws2 = wb.Worksheets[s];
                Range r = TRMAddin.GetWorkSpaceRange(ws2);
                r.CopyPicture(XlPictureAppearance.xlScreen, XlCopyPictureFormat.xlBitmap);
                //CopyImage(history);
                Thread newThread = new Thread(() => SaveDocument(history));

                newThread.SetApartmentState(ApartmentState.STA);
                newThread.Start();
                Thread.Sleep(2000);

            }



            //app.Quit();
            TerminateExcel(app, wb);
        }


        private void SaveDocument(SnapHistory history)
        {
            history.SnapshotFileName = DocumentPath + history.SnapshotSheetName + "_" + UserName + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmssff") + ".png";
            Bitmap image2 = new Bitmap(System.Windows.Forms.Clipboard.GetImage());
            image2.Save(history.SnapshotFileName, ImageFormat.Png);
            //  Update snapshot history
            UpdateSnapshotHistory(history);
            System.Threading.Thread.Sleep(5000);
        }

        private void SaveDocument(SnapHistory history, Workbook wb, Worksheet worksheet)
        {
            history.SnapshotFileName = DocumentPath + history.SnapshotSheetName + "_" + UserName + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmssff");
            if (this.ExportFormat.ToLower() == "pdf")
                history.SnapshotFileName += ".pdf";
            else if (this.ExportFormat.ToLower() == "png")
                history.SnapshotFileName += ".png";
            else if (this.ExportFormat.ToLower() == "excel")
                history.SnapshotFileName += ".xlsx";
            else if (this.ExportFormat.ToLower() == "word")
                history.SnapshotFileName += ".docx";

            if (worksheet != null)
            {
                //  Hide other sheets except sheets that will be published
                try
                {
                    foreach (Worksheet sheet in wb.Worksheets)
                    {
                        if (sheet.Name != worksheet.Name && !this.ExcelSheet.ShowDataTabs)
                            sheet.Visible = XlSheetVisibility.xlSheetVeryHidden;
                    }
                }
                catch (Exception)
                {
                    
                }

                this.CreateDocument(worksheet, history.SnapshotFileName, this.ExportFormat);
                //  Update snapshot history
                UpdateSnapshotHistory(history);
                System.Threading.Thread.Sleep(5000);
            }

        }

        public bool CreateDocument(Worksheet worksheet, string fileName, string exportFormat)
        {
            if (exportFormat.ToLower() == "pdf")
                return CreatePDFDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "png")
                return CreatePNGDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "excel")
                return CreateExcelDocument(worksheet, fileName);
            else if (exportFormat.ToLower() == "word")
                return CreateWordDocument(worksheet, fileName);

            return false;
        }
        private bool CreatePDFDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                worksheet.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, fileName);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool CreateExcelDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                Application app = new Application();
                app.Workbooks.Add(1);
                app.Workbooks[0].Worksheets.Copy(worksheet);
                app.Workbooks[0].SaveAs(fileName);
                return true;

            }
            catch (Exception)
            {
                return false;
            }
        }

        private bool CreateWordDocument(Worksheet worksheet, string fileName)
        {
            //var app = new Microsoft.Office.Interop.Word.Application();
            try
            {
                //Microsoft.Office.Interop.Word.Document doc = app.Documents.Add();

                //Range start = worksheet.Cells[1, worksheet.UsedRange.Column];
                //Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];
                ////TODO :: Range For report below , for others above
                //Range usedRange = worksheet.get_Range(start, end);
                //usedRange.Copy();
                //doc.Content.Paste();
                //doc.SaveAs(fileName);
                //app.Quit(true);
                return true;
            }
            catch (Exception)
            {
                //app.Quit(false);
                return false;
            }
        }

        private bool CreatePNGDocument(Worksheet worksheet, string fileName)
        {
            try
            {
                Range start = worksheet.Cells[1, 1];
                Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                Range usedRange = worksheet.get_Range(start, end);
                //  TODO : Add validation for sheet which is not type of invoice
                usedRange = TRMAddin.GetWorkSpaceRange(worksheet);

                usedRange.CopyPicture(XlPictureAppearance.xlScreen, XlCopyPictureFormat.xlBitmap);
                System.Drawing.Bitmap image2 = new Bitmap(System.Windows.Forms.Clipboard.GetImage());
                image2.Save(fileName, ImageFormat.Png);
                return true;
            }
            catch (Exception)
            {
                return false;
            }

        }

        private void UpdateSnapshotHistory(SnapHistory history)
        {
            string sheetFile = Path.GetFileName(history.SnapshotFileName);
            using (var cmd =
                new OleDbCommand("spa_excel_snapshots @flag='h',@sheet_id='" + this.ExcelSheet.Id +
                                 "' ,@snapshot_sheet_name='" + history.SnapshotSheetName + "', @snapshot_filename='" +
                                 sheetFile + "', @applied_filter='" + history.AppliedFilter + "', @refreshed_on='" +
                                 history.RefreshdaDateTime.ToString("yyyy MMMM dd HH:mm:ss") + "',@process_id='" +
                                 this.ProcessId + "'", OleDbConnection))
            {
                cmd.ExecuteNonQuery();
            }
        }

        private bool DeleteSnapshot(string fileName)
        {
            if (File.Exists(fileName))
            {
                try
                {
                    File.Delete(fileName);
                    return true;
                }
                catch (Exception)
                {
                    return false;
                }
            }
            return false;
        }


        private Worksheet GetWorksheetFromWorkBook(Workbook workbook, string sheetName)
        {
            foreach (Worksheet ws in workbook.Worksheets)
            {
                if (ws.Name != sheetName)
                    continue;
                return ws;
            }
            return null;
        }

        private struct ScheduleParam
        {
            public string ParameterName { get; set; }
            public int ScheduleType { get; set; }
            public int Day { get; set; }
            public string Value { get; set; }
        }

        private void TerminateExcel(Application xlApp, Workbook wb)
        {
            KillExcelProcess(xlApp);

            //xlApp.Workbooks.Close();

            //Marshal.FinalReleaseComObject(wb);
            //Marshal.FinalReleaseComObject(xlApp);
            //xlApp = null;
        }

    }


    public class ReportFilter
    {
        public string Name { get; set; }
        public string DisplayLabel { get; set; }
        public string Value { get; set; }
        public string DisplayValue { get; set; }
        public int OverrideType { get; set; }
        public int AdjustmentDays { get; set; }
        public string AdjustmentType { get; set; }
        public string BusinessDay { get; set; }

        public void ResolveDynamicDate(SqlConnection sqlConnection)
        {
            try
            {
                if (this.OverrideType != 0)
                {
                    //SELECT  dbo.FNAResolveDynamicDate('45601|10|106400|n')
                    string sql = "SELECT dbo.FNAResolveDynamicDate('{0}|{1}|{2}|{3}')";

                    if (sqlConnection.State == ConnectionState.Closed) sqlConnection.Open();
                    sql = string.Format(sql, OverrideType, this.AdjustmentDays, AdjustmentType, BusinessDay);
                    using (var cmd = new SqlCommand(sql, sqlConnection))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            rd.Read();
                            Value = Convert.ToDateTime(rd[0]).ToString("yyyy-MM-dd");
                            DisplayValue = Value;
                        }
                    }
                }
            }
            catch (Exception)
            {

            }
        }
    }

    internal class ExcelSheetParameter
    {
        public string Name { get; set; }
        public string Label { get; set; }
    }

    struct OverRideSummary
    {
        public string ExcelFileName { get; set; }
        public string AppliedFilter { get; set; }
        public string SpaRfxQuery { get; set; }
    }

    public class ExcelSheets
    {
        public int Id { get; set; }
        public string FileName { get; set; }
        public string SheetName { get; set; }
        public bool Publish { get; set; }
        public bool MaintainHistory { get; set; }
        public int DocumentType { get; set; }
        public bool ShowDataTabs { get; set; }

    }

    public class SnapHistory
    {
        public string FileName { get; set; }
        public string SnapshotSheetName { get; set; }
        public string AppliedFilter { get; set; }
        public DateTime RefreshdaDateTime { get; set; }
        public string SnapshotFileName { get; set; }
    }

    struct CellAddress
    {
        public string Column { get; set; }
        public int Index { get; set; }
    }

    public class ExcelFile
    {
        public string FileName { get; set; }
        public virtual List<ReportSheet> ReportSheets { get; set; }
    }

    public class ReportSheet
    {
        public string ReportName { get; set; }
        public string SheetName { get; set; }
        public string Description { get; set; }
        public string SpaRfxQuery { get; set; }
        public string ParameterSheet { get; set; }

        public virtual List<Parameter> Parameters { get; set; }

    }

    public class ReportData
    {
        public int ParamsetId { get; set; }
        public int TablixId { get; set; }
        public string ReportName { get; set; }
        public int PageID { get; set; }
        public int ReportStatusId { get; set; }
    }

    public class Parameter
    {
        public string Name { get; set; }
        public string Label { get; set; }
        public bool Optional { get; set; }
        public int DatatypeId { get; set; }
        public virtual string Values { get; set; }
    }

    public class DataSource
    {
        public string DisplayName { get; set; }
        public string ApplicationURL { get; set; }
        public string ServerName { get; set; }
        public string Database { get; set; }
        public int AuthenticationType { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public string PasswordTRM { get; set; }
        public string FileName { get; set; }
        public virtual ReportSheet ReportSheet { get; set; }
    }


    public static class TRMAddin
    {
        public static string GetSqlConnection(string oledbConnectionString)
        {
            string sql = "";
            string[] arr = oledbConnectionString.Split(';');
            foreach (string s in arr)
            {
                if (s.ToLower().Contains("provider") || s.ToLower().Contains("translate"))
                    continue;
                sql += s + ";";
            }
            sql = sql.TrimEnd(';');
            return sql;
        }

        public static string ProcessID()
        {
            Guid id = Guid.NewGuid();
            return id.ToString().Replace("-", "_");
        }

        public static void ExecuteQuery(string sql, SqlConnection sqlConnection)
        {
            using (SqlCommand cmd = new SqlCommand(sql, sqlConnection))
            {
                cmd.ExecuteNonQuery();
            }
        }

        

        public static List<ReportConfiguration> ListAllConfigurations(Workbook workbook)
        {
            //  Check in report configurations
            List<ReportConfiguration> configurations = new List<ReportConfiguration>();

            Worksheet configWorksheet = TRMAddin.CheckIfSheetExists("Configurations", workbook);
            if (configWorksheet == null)
                return null;
            //  which row to use
            bool empty = true;
            int row = 2;
            while (empty)
            {
                var cell = (Range)configWorksheet.Cells[row, 2];
                if (cell.Value2 != null)
                {
                    ReportConfiguration c = new ReportConfiguration();
                    cell = (Range)configWorksheet.Cells[row, 1];
                    c.ReportName = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 2];
                    c.ReportSheet = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 3];
                    c.Parameter = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 4];
                    c.ParameterSheet = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 5];
                    c.Description = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 6];
                    c.ConnectionIdentifier = cell.Value2;

                    cell = (Range)configWorksheet.Cells[row, 7];
                    if (cell.Value2 != null)
                    {
                        c.ParamsetHash = cell.Value2;
                        //if (ReportList != null)
                        //    c.Report = ReportList.FirstOrDefault(x => x.ParamsetHash == c.ParamsetHash);
                    }


                    configurations.Add(c);
                }
                else if (cell.Value2 == null)
                {
                    empty = false;
                    break;
                }
                row++;
            }

            return configurations;
        }

        public static List<Column> GetReportDatasetColumns(string worksheetName, Workbook workbook)
        {
            List<Column> list = new List<Column>();
            Worksheet ws = TRMAddin.CheckIfSheetExists(worksheetName, workbook);
            if (ws != null)
            {
                int totalColumn = ws.UsedRange.Columns.Count;
                for (int i = 1; i < totalColumn; i++)
                {
                    list.Add(new Column() { Label = ws.Cells[1, i].Value.ToString(), Field = ws.Cells[1, i].Value.ToString() });
                }
            }
            return list;
        }

        public static string ConvertToFormula(this string formula, Position position)
        {
            try
            {
                //return formula.Replace("{R1}", position.R1.ToString(CultureInfo.InvariantCulture))
                //.Replace("{R2}", position.R2.ToString(CultureInfo.InvariantCulture))
                //.Replace("{C1}", position.C1.ToString(CultureInfo.InvariantCulture))
                //.Replace("{C2}", position.C2.ToString(CultureInfo.InvariantCulture));
                return formula.Replace("{R1}", position.C1.ToString(CultureInfo.InvariantCulture))
                .Replace("{R2}", position.C2.ToString(CultureInfo.InvariantCulture));
            }
            catch (Exception)
            {
                return formula;
            }

        }
        public static Worksheet GetInvoiceTemplateWorkSheet(string worksheet, Workbook workbook)
        {
            try
            {
                Worksheet invoiceConfig = CheckIfSheetExists("Invoice Configuration", workbook);
                //  Initially there will be no invoice configuration so template wont exists.
                if (invoiceConfig == null) return null;

                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (worksheet.ToLower() == IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        return CheckIfSheetExists(IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 3].Value).ToLower(), workbook);
                    }
                }
                return null;
            }
            catch (Exception)
            {

                return null;
            }
        }
        public static void AutoFill(Worksheet worksheet, Workbook workbook)
        {
            worksheet = workbook.Worksheets[worksheet.Name];
            int rows = worksheet.UsedRange.Rows.Count;
            for (int i = 0; i < worksheet.UsedRange.Columns.Count; i++)
            {
                Range r = worksheet.Cells[2, i + 1];
                if (r != null && r.HasFormula)
                {
                    //r.Select();
                    Range start = worksheet.Cells[2, i + 1];
                    Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, i + 1];
                    Range usedRange = worksheet.get_Range(start, end);
                    //usedRange.AutoFill(usedRange);
                    try
                    {
                        if (usedRange.Rows.Count > 1)
                            r.AutoFill(usedRange);
                    }
                    catch (Exception)
                    {
                    }

                }
            }
        }

        /// <summary>
        /// Adjust width / height of worksheet equivalent to specified worksheet
        /// </summary>
        /// <param name="documentWorksheet">Worksheet to adjust</param>
        /// <param name="templateWorksheet">Worksheet to compare</param>
        public static void MakeSameHeightWidth(this Worksheet documentWorksheet, Worksheet templateWorksheet, Workbook workbook)
        {
            try
            {
                if (TRMAddin.CheckIfSheetExists(templateWorksheet.Name, workbook) != null)
                {
                    int totalColumn = (templateWorksheet.UsedRange.Column - 1) + templateWorksheet.UsedRange.Columns.Count;
                    //  Adjust column width
                    for (int i = 1; i <= totalColumn; i++)
                    {
                        ((Range)documentWorksheet.Columns[i]).ColumnWidth = ((Range)templateWorksheet.Columns[i]).ColumnWidth;
                    }

                    for (int i = 1; i <= templateWorksheet.UsedRange.Rows.Count; i++)
                    {
                        ((Range)documentWorksheet.Rows[i]).RowHeight = ((Range)templateWorksheet.Rows[i]).RowHeight;
                    }

                }
            }
            catch (Exception)
            {
            }
        }
        /// <summary>
        /// Get index of column in worksheet
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="columnName">Valid Column Name</param>
        /// <returns></returns>
        public static int GetColumnIndex(this Worksheet worksheet, string columnName)
        {
            for (int i = 1; i <= worksheet.UsedRange.Columns.Count; i++)
            {
                if (columnName.ToLower() == IENumerableExtensions.ToString2(worksheet.Cells[1, i].Value).ToLower())
                    return i;
            }
            return 0;
        }
        /// <summary>
        /// Get Index of table column based on its position
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="columnName">Valid column name of tablix</param>
        /// <param name="tablixPosition">Position of tablix</param>
        /// <returns>Returns index of column</returns>
        public static int GetColumnIndex(this Worksheet worksheet, string columnName, Position tablixPosition)
        {
            for (int i = tablixPosition.C1; i <= tablixPosition.C2; i++)
            {
                if (columnName.ToLower() == IENumerableExtensions.ToString2(worksheet.Cells[tablixPosition.R1, i].Value).ToLower())
                    return i;
            }
            return 0;
        }
        /// <summary>
        /// Determines if specifed worksheet (Import sheet) has formula in second row 
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <returns>True, False</returns>
        public static bool ImportSheetHasFormula(Worksheet worksheet)
        {
            for (int i = 0; i < worksheet.UsedRange.Columns.Count; i++)
            {
                Range r = worksheet.Cells[2, i + 1];
                if (r != null && r.HasFormula)
                {
                    return true;
                }
            }
            return false;
        }
        /// <summary>
        /// Returns true or false if worksheet specified range has formula.
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        /// <param name="row">Row Index</param>
        /// <param name="column">Column Index</param>
        /// <returns>True / False</returns>
        public static bool CellHasFormula(this Worksheet worksheet, int row, int column)
        {
            try
            {
                Range cellRange = worksheet.Cells[row, column];
                if (cellRange.HasFormula)
                    return true;
            }
            catch (Exception)
            {
                return false;
            }

            return false;
        }
        /// <summary>
        /// Deletes all entire contents of specified workhsheet, For import specfic it checks for additional logic if 2nd row has some formula and preserves 2nd row
        /// </summary>
        /// <param name="worksheet">Worksheet</param>
        public static void DeleteEntireContents(Worksheet worksheet, Workbook workbook)
        {
            if (IsSheetBindToImportRule(worksheet, workbook))
            {
                int rowIndex = 2;
                if (ImportSheetHasFormula(worksheet)) rowIndex = 3;

                Range start = worksheet.Cells[rowIndex, worksheet.UsedRange.Columns.Count];
                Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                //  Added to fix if databinding returns single row even second row has formula
                if (worksheet.UsedRange.Rows.Count > rowIndex)
                {
                    Range usedRange = worksheet.get_Range(start, end);
                    usedRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                    //usedRange.Delete(XlDeleteShiftDirection.xlShiftUp);
                }
            }
            else
            {
                try
                {
                    //  This will delete all the shapes object (pictures)
                    foreach (Shape s in worksheet.Shapes)
                    {
                        s.Delete();
                    }
                    //  delete Charts
                    foreach (ChartObject ch in worksheet.ChartObjects())
                    {
                        ch.Delete();
                    }

                    Range start = worksheet.Cells[1, worksheet.UsedRange.Column];
                    Range end = worksheet.Cells[worksheet.UsedRange.Rows.Count, worksheet.UsedRange.Columns.Count];

                    Range usedRange = worksheet.get_Range(start, end);
                    usedRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                    //usedRange.Delete(XlDeleteShiftDirection.xlShiftUp);
                }
                catch (Exception)
                { }
            }

        }

        /// <summary>
        /// Copies entire contents from source worksheet to specified destination worksheet
        /// </summary>
        /// <param name="sourceWorksheet">Contents to be copied from</param>
        /// <param name="destinationWorksheet">Contents to be paste</param>
        public static void CopyEntireContents(Worksheet sourceWorksheet, Worksheet destinationWorksheet)
        {
            try
            {
                Range start = sourceWorksheet.Cells[1, sourceWorksheet.UsedRange.Column];
                //Range end = sourceWorksheet.Cells[200, sourceWorksheet.UsedRange.Columns.Count];
                Range end = sourceWorksheet.Cells.SpecialCells(XlCellType.xlCellTypeLastCell, Type.Missing);

                Range usedRange = sourceWorksheet.get_Range(start, end);

                //sourceWorksheet.UsedRange.Copy();
                usedRange.Copy();
                Range destination = destinationWorksheet.Cells[1, 1];
                destinationWorksheet.Paste(destination);
            }
            catch (Exception)
            {

            }
        }
        /// <summary>
        /// Determines if worksheet is bind to import rule , by checking import settings configuration worksheet.
        /// </summary>
        /// <param name="importSheet">Excel Worksheet</param>
        /// <returns>True , False</returns>
        public static bool IsSheetBindToImportRule(Worksheet importSheet, Workbook workbook)
        {
            Worksheet wsImportSetting = CheckIfSheetExists(@"Import Settings", workbook);
            if (wsImportSetting != null)
            {
                for (int i = 0; i < wsImportSetting.UsedRange.Rows.Count; i++)
                {
                    if (IENumerableExtensions.ToString2(wsImportSetting.Cells[i + 1, 5].Value).ToLower() ==
                        importSheet.Name.ToLower())
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public static int GetSheetDocumentType(Workbook wb, string sheetName)
        {
            try
            {
                //  Add logic to determine excel sheet type, Eg. confirmation letter can report but user will marked as document generation to map in contract report template
                //  If document generation is mapped content is cleared before preparing.
                //  Check if excel sheet is report
                Worksheet wsConfig = TRMAddin.CheckIfSheetExists("Configurations", wb);
                if (wsConfig != null)
                {
                    for (int i = 1; i <= wsConfig.UsedRange.Rows.Count; i++)
                    {
                        if (IENumerableExtensions.ToString2(wsConfig.Cells[i, 2].Value) == sheetName)
                            return 106700;
                    }
                }

                //  Check if sheet is import
                wsConfig = TRMAddin.CheckIfSheetExists("Import Settings", wb);
                if (wsConfig != null)
                {
                    for (int i = 1; i <= wsConfig.UsedRange.Rows.Count; i++)
                    {
                        if (IENumerableExtensions.ToString2(wsConfig.Cells[i, 5].Value) == sheetName)
                            return 106702;
                    }
                }
                //  Check if invoice template
                wsConfig = TRMAddin.CheckIfSheetExists(sheetName + "_template", wb);
                if (wsConfig != null)
                    return 106701;
            }
            catch (Exception)
            {
                return 106700;
            }

            return 106700;
        }

        public static string TruncateString(this Object value, int length = 25)
        {
            try
            {
                string temp = value.ToString();
                if (temp.Length >= length)
                    temp = temp.Substring(0, length);
                return temp;
            }
            catch (Exception)
            {
                return "";
                throw;
            }
        }

        public static Microsoft.Office.Interop.Excel.Worksheet AddWorkSheet( Workbook workbook, string workSheetName, bool visible = true)
        {


            Microsoft.Office.Interop.Excel.Worksheet ws = CheckIfSheetExists(workSheetName, workbook);
            if (ws == null)
            {
                Microsoft.Office.Interop.Excel.Worksheet newWorksheet;
                newWorksheet = workbook.Worksheets.Add();
                newWorksheet.Name = workSheetName.TruncateString(25);
                if (!visible)
                    newWorksheet.Visible = Microsoft.Office.Interop.Excel.XlSheetVisibility.xlSheetHidden;
                newWorksheet.Activate();
                return newWorksheet;
            }
            ws.Activate();
            return ws;
        }

        public static Microsoft.Office.Interop.Excel.Worksheet CheckIfSheetExists(string sheetName, Workbook workbook)
        {
            Microsoft.Office.Interop.Excel.Worksheet ws = null;
            foreach (Microsoft.Office.Interop.Excel.Worksheet worksheet in workbook.Worksheets)
            {
                if (worksheet.Name.ToLower() == sheetName.ToLower())
                {
                    ws = worksheet;
                    break;
                }
                else
                {
                    ws = null;
                }
            }
            return ws;
        }

        public static Range GetWorkSpaceRange(Worksheet ws)
        {
            string usedRange = ws.UsedRange.get_AddressLocal();
            List<CellAddress> minList = new List<CellAddress>();
            List<CellAddress> maxList = new List<CellAddress>();

            string[] arrMin = usedRange.Split(':').FirstOrDefault().Split('$').Where(x => x.Trim() != "").ToArray();
            minList.Add(new CellAddress() { Column = arrMin[0], Index = Convert.ToInt32(arrMin[1]) });

            string[] arrMax = usedRange.Split(':').LastOrDefault().Split('$').Where(x => x.Trim() != "").ToArray();
            maxList.Add(new CellAddress() { Column = arrMax[0], Index = Convert.ToInt32(arrMax[1]) });

            ws.Protect(Contents: false);

            List<string> bottomRightsRanges = new List<string>();

            foreach (ChartObject co in ws.ChartObjects())
            {

                string address = co.TopLeftCell.get_AddressLocal();
                string[] arr = address.Split('$').Where(x => x.Trim() != "").ToArray();
                minList.Add(new CellAddress() { Column = arr[0], Index = Convert.ToInt32(arr[1]) });

                address = co.BottomRightCell.get_AddressLocal();
                arr = address.Split('$').Where(x => x.Trim() != "").ToArray();
                maxList.Add(new CellAddress() { Column = arr[0], Index = Convert.ToInt32(arr[1]) });
            }


            CellAddress minAddress = minList.OrderBy(x => x.Column).ThenBy(x => x.Index).FirstOrDefault();
            string maxCol = maxList.OrderBy(x => x.Column.Length).ThenBy(x => x.Column).LastOrDefault().Column;
            CellAddress maxAddress = maxList.OrderBy(x => x.Index).LastOrDefault();

            Range r = ws.get_Range(minAddress.Column + minAddress.Index, maxCol + maxAddress.Index);
            return r;
        }
    }


    public class Reflection
    {
        public void FillObjectWithProperty(ref object objectTo, string propertyName, object propertyValue,
            Object[] index)
        {
            Type tOb2 = objectTo.GetType();
            tOb2.GetProperty(propertyName).SetValue(objectTo, propertyValue, null);
        }
    }

    public static class IENumerableExtensions
    {
        public static int ToInt(this Object value)
        {
            try
            {
                return Convert.ToInt32(value.ToString());
            }
            catch (Exception)
            {

                return 0;
            }
        }

        public static string ToString2(this Object value)
        {
            try
            {
                return Convert.ToString(value.ToString());
            }
            catch (Exception)
            {

                return "";
            }
        }

        public static void KillExcel(this uint iProcessId)
        {
            try
            {
                Process pProcess = Process.GetProcessById((int)iProcessId);
                if (pProcess != null)
                    pProcess.Kill();
            }
            catch (System.Exception)
            {
                //just ignore any failure.
            }

        }
        public static List<T> DeserializeXml<T>(this string xmlContent, string xmlRootAttribute)
        {
            try
            {
                using (StringReader stringReader = new StringReader(xmlContent))
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(List<T>), new XmlRootAttribute(xmlRootAttribute));
                    List<T> list = (List<T>)serializer.Deserialize(stringReader);
                    return list;
                }
            }
            catch (Exception)
            {
                return null;
            }

        }
        public static DateTime ToDateTime(this Object value)
        {
            DateTime dt = new DateTime();
            try
            {
                return Convert.ToDateTime(value.ToString());
            }
            catch (Exception)
            {

                return dt;
            }
        }

        public static bool ToBool(this Object value)
        {
            try
            {
                return Convert.ToBoolean(value);
            }
            catch (Exception)
            {

                return false;
            }
        }

        public static bool ToBool(this XElement xElement)
        {
            try
            {
                if (xElement.Value.ToLower() == "true" || xElement.Value.ToLower() == "1")
                    return true;
                return false;
            }
            catch (Exception)
            {

                return false;
            }
        }


        public static string Encrypt(this Object value)
        {
            string result = Encrypt(value.ToString());
            //string result = value.ToString();
            return result;
        }

        public static string Decrypt(this Object value)
        {
            string result = Decrypt(value.ToString());
            //string result = value.ToString();
            return result;
        }

        private static string Encrypt(string toEncrypt, bool useHashing = true)
        {
            byte[] keyArray;
            byte[] toEncryptArray = UTF8Encoding.UTF8.GetBytes(toEncrypt);

            string key = "farrms_admin";
            //System.Windows.Forms.MessageBox.Show(key);
            //If hashing use get hashcode regards to your key
            if (useHashing)
            {
                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                //Always release the resources and flush data
                // of the Cryptographic service provide. Best Practice

                hashmd5.Clear();
            }
            else
                keyArray = UTF8Encoding.UTF8.GetBytes(key);

            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes.
            //We choose ECB(Electronic code Book)
            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)

            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateEncryptor();
            //transform the specified region of bytes array to resultArray
            byte[] resultArray =
              cTransform.TransformFinalBlock(toEncryptArray, 0,
              toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor
            tdes.Clear();
            //Return the encrypted data into unreadable string format
            return Convert.ToBase64String(resultArray, 0, resultArray.Length);
        }

        private static string Decrypt(string cipherString, bool useHashing = true)
        {
            byte[] keyArray;
            //get the byte code of the string

            byte[] toEncryptArray = Convert.FromBase64String(cipherString);

            //Get your key from config file to open the lock!
            string key = "farrms_admin";

            if (useHashing)
            {
                //if hashing was used get the hash code with regards to your key
                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
                keyArray = hashmd5.ComputeHash(UTF8Encoding.UTF8.GetBytes(key));
                //release any resource held by the MD5CryptoServiceProvider

                hashmd5.Clear();
            }
            else
            {
                //if hashing was not implemented get the byte code of the key
                keyArray = UTF8Encoding.UTF8.GetBytes(key);
            }

            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            //set the secret key for the tripleDES algorithm
            tdes.Key = keyArray;
            //mode of operation. there are other 4 modes. 
            //We choose ECB(Electronic code Book)

            tdes.Mode = CipherMode.ECB;
            //padding mode(if any extra byte added)
            tdes.Padding = PaddingMode.PKCS7;

            ICryptoTransform cTransform = tdes.CreateDecryptor();
            byte[] resultArray = cTransform.TransformFinalBlock(
                                 toEncryptArray, 0, toEncryptArray.Length);
            //Release resources held by TripleDes Encryptor                
            tdes.Clear();
            //return the Clear decrypted TEXT
            return UTF8Encoding.UTF8.GetString(resultArray);
        }

        public static IEnumerable<T> FromDataReader<T>(this IEnumerable<T> list, DbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }
            dr.Close();
            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, SqlDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }

        public static IEnumerable<T> FromOleReader<T>(this IEnumerable<T> list, OleDbDataReader dr)
        {
            //Instance reflec object from Reflection class coded above
            var reflec = new Reflection();
            //Declare one "instance" object of Object type and an object list
            var lstObj = new List<Object>();

            //dataReader loop
            while (dr.Read())
            {
                //Create an instance of the object needed.
                //The instance is created by obtaining the object type T of the object
                //list, which is the object that calls the extension method
                //Type T is inferred and is instantiated
                Object instance = Activator.CreateInstance(list.GetType().GetGenericArguments()[0]);

                // Loop all the fields of each row of dataReader, and through the object
                // reflector (first step method) fill the object instance with the datareader values
                System.Data.DataTable schemaTable = dr.GetSchemaTable();
                if (schemaTable != null)
                    foreach (DataRow drow in schemaTable.Rows)
                    {
                        reflec.FillObjectWithProperty(ref instance,
                            drow.ItemArray[0].ToString(), dr[drow.ItemArray[0].ToString()], null);
                    }

                //Add object instance to list
                lstObj.Add(instance);
            }

            var lstResult = new List<T>();
            foreach (Object item in lstObj)
            {
                lstResult.Add((T)Convert.ChangeType(item, typeof(T)));
            }

            return lstResult;
        }
    }

}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Settlement.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Xml.Linq;
using ADODB;
using Microsoft.Office.Interop.Excel;
using ST_f39233fac16e426d991d932f9ef7d858;
using System.Data.OleDb;

namespace ST_dd15b1baccfb44448c0156790b3eaa20
{
    public class Settlement
    {
        [DllImport("user32.dll")]
        private static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint lpdwProcessId);

        private const int Meter = 107300;
        private const int Deal = 107301;
        private const int Price = 107302;
        private const int UdSql = 107303;

        public Workbook Workbook { get; set; }
        private string DocumentPath { get; set; }
        private Summary SettlementParameter { get; set; }
        private SqlConnection SqlConnection { get; set; }
        private OleDbConnection OleDbConnection { get; set; }
        public string ProcessId { get; set; }

        public uint IProcessId;
        
        private string excelCalcFile;
        /// <summary>
        /// Intialize settlement process
        /// </summary>
        /// <param name="processId">SSIS Execution Process Id filters are dumped under this process id process table
        /// </param>
        public Settlement(string processId, SqlConnection sqlConnection, OleDbConnection oleDbConnection)
        {
            this.ProcessId = processId;
            this.OleDbConnection = oleDbConnection;
            //  If connection is closed while initializing open it.
            if (sqlConnection.State == ConnectionState.Closed)
                sqlConnection.Open();

            this.SqlConnection = sqlConnection;
            this.ParseSettlementParameter();
            SqlCommand cmd = new SqlCommand("spa_excel_snapshots 'c'", this.SqlConnection);
            using (SqlDataReader rd = cmd.ExecuteReader())
            {
                if (rd.HasRows)
                    rd.Read();

                DocumentPath = rd[1].ToString();
            }
            this.excelCalcFile = DocumentPath + "\\excel_calculations\\" + this.SettlementParameter.ProcessId + ".xlsx";
            if (!string.IsNullOrEmpty(this.SettlementParameter.CreateTemplate) &&
                this.SettlementParameter.CreateTemplate.ToLower() == "y")
            {
                this.DownloadContractExcelTemplate();
            }
            else
            {
                Application xlApp = new Application();
                GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out IProcessId);
                xlApp.Visible = false;
                xlApp.DisplayAlerts = false;
                
                this.Workbook = xlApp.Workbooks.Open(this.excelCalcFile);
            }
            
            
        }

        public bool IsCalcProcess()
        {
            try
            {
                if (!string.IsNullOrEmpty(this.SettlementParameter.CreateTemplate) &&
                this.SettlementParameter.CreateTemplate.ToLower() == "n")
                    return true;
                else
                    return false;
            }
            catch (Exception)
            {
                return false;
            }
        }
        /// <summary>
        /// Reterives excel file uplodated to contract manage document template
        /// </summary>
        private void GetContractExcelFile()
        {
            
        }

        /// <summary>
        /// Download excel file template with distinct data component(Line Items) worksheet.
        /// Later this file will be uploaded to contract manage document.
        /// </summary>
        private void DownloadContractExcelTemplate()
        {
            //  Create a new workbook
            Application xlApp = new Application();
            GetWindowThreadProcessId((IntPtr)xlApp.Hwnd, out IProcessId);
            xlApp.Visible = false;
            xlApp.DisplayAlerts = false;
            string sampleFile = DocumentPath + "\\temp_Note\\" + this.SettlementParameter.ProcessId + ".xlsx";
            object misValue = System.Reflection.Missing.Value;
            this.Workbook = xlApp.Workbooks.Add(System.Reflection.Missing.Value);

            //  Add worksheet based on charge types (data component available)

            string sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract +
                              ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "', @unique_process_id='" + SettlementParameter.ProcessId + "'";
            List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
            List<string> dataComponentList;
            if (chargeTypes.Count > 0)
            {
                dataComponentList = chargeTypes.Select(x => x.DataComponent).Distinct().ToList();

                foreach (string dataComponent in dataComponentList)
                {
                    Worksheet ws = TRMAddin.AddWorkSheet(this.Workbook, dataComponent);
                    ChargeType ct = chargeTypes.FirstOrDefault(x => x.DataComponent == dataComponent);
                    if (ct != null)
                    {
                        if (ct.Type != Deal)
                            BindReport(ct.DataComponent, ct.DataSource, true);   
                        else if (ct.Type == Deal)
                        {
                            string[] dummyColumns =
                                "Deal ID,Ref Id,Term Start,Term End,Settlement Date,Leg,Physical Financial,Deal Type,Buy Sell,Curve,Deal Volume,Allocation Volume,Settlement Volume,UOM,Settlement Price,Settlement Amount"
                                    .Split(',');
                            int colIndex = 1;
                            foreach (string col in dummyColumns)
                            {
                                var cell = (Range)ws.Cells[1, colIndex];
                                cell.Value = col;
                                cell.Font.Bold = true;
                                
                                colIndex++;
                            }
                        }
                    }
                }
                this.CreateSummarySheet();
            }

            this.Workbook.SaveAs(sampleFile);
            this.Workbook.Close(true, misValue, misValue);
            xlApp.Quit();
            IProcessId.KillExcel();
        }


        
        public List<ChargeType> ChargeTypes { get; set; }

        /// <summary>
        /// Execute Sql Command
        /// </summary>
        /// <param name="sqlCommand">Sql Command Text</param>
        /// <returns>SqlCommand</returns>
        private SqlCommand ExecuteCommand(string sqlCommand)
        {
            using (SqlCommand cmd = new SqlCommand(sqlCommand, this.SqlConnection))
            {
                return cmd;
            }
        }

        private void ParseSettlementParameter()
        {
            this.SettlementParameter = new Summary();
            try
            {
                using (SqlConnection cn = new SqlConnection(TRMAddin.GetSqlConnection(OleDbConnection.ConnectionString)))
                {
                    cn.Open();
                    using (SqlCommand cmd = new SqlCommand("SELECT * FROM adiha_process.dbo.excel_add_in_view_report_filter_" + this.ProcessId, cn))
                    {
                        using (SqlDataReader rd = cmd.ExecuteReader())
                        {
                            while (rd.Read())
                            {
                                for (int i = 0; i < rd.FieldCount; i++)
                                {
                                    string fieldName = rd.GetName(i);
                                    if (fieldName.ToLower() == "CounterpartyId".ToLower()) SettlementParameter.Counterparty = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ContractId".ToLower()) SettlementParameter.Contract = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProdDate".ToLower()) SettlementParameter.ProdDate = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProdDateTo".ToLower()) SettlementParameter.ProdDateTo = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "AsOfDate".ToLower()) SettlementParameter.AsOfDate = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "ProcessId".ToLower()) SettlementParameter.ProcessId = rd[fieldName].ToString();
                                    if (fieldName.ToLower() == "CreateTemplate".ToLower()) SettlementParameter.CreateTemplate = rd[fieldName].ToString();
                                }
                            }
                        }
                    }
                    cn.Close();
                }
            }
            catch (Exception)
            {
                this.SettlementParameter = null;
            }
        }

        public uint Prepare()
        {
            try
            {
                string sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract +
                              ", @counterparty_id = " + SettlementParameter.Counterparty + ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "', @unique_process_id='" + SettlementParameter.ProcessId + "'";
                List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
                List<string> dataComponentList;
                if (chargeTypes.Count > 0)
                {
                    dataComponentList = chargeTypes.Select(x => x.DataComponent).Distinct().ToList();
                    this.ClearDataComponenetWorksheetData(dataComponentList);
                }


                foreach (ChargeType ct in chargeTypes)
                {
                    BindReport(ct.DataComponent, ct.DataSource, false);
                }
                this.CreateSummarySheet();
                //this.Workbook.Save();
                Workbook.RefreshAll();
                Worksheet wsImportSetting = TRMAddin.CheckIfSheetExists("Import Settings", this.Workbook);
                if (wsImportSetting != null)
                {
                    //  Available import worksheet
                    Worksheet wsImport = TRMAddin.CheckIfSheetExists(wsImportSetting.Cells[2, 5].Value, this.Workbook);
                    if (wsImport != null)
                    {
                        ImportExport ixp = new ImportExport(wsImport, this.Workbook) { SqlConnection = this.SqlConnection };
                        if (ixp.DataImport != null)
                        {
                            DocumentDesigner docIxp = new DocumentDesigner(wsImport, this.Workbook);
                            docIxp.PreparImportData(ixp.DataImport);
                            ixp.Run();
                        }
                    }

                }
                Workbook.Close(SaveChanges: true, Filename: this.excelCalcFile);
                return this.IProcessId;
            }
            catch (Exception)
            {

                return this.IProcessId;
            }
        }
        /// <summary>
        /// Clear all the worksheet data rows based on datacomponent name
        /// </summary>
        /// <param name="worksheetList"></param>
        private void ClearDataComponenetWorksheetData(List<string> worksheetList, bool deleteSummarySheet = false)
        {
            if (deleteSummarySheet)
                worksheetList.Add("Summary");
            ;
            foreach (string dataComponent in worksheetList)
            {
                Worksheet ws = TRMAddin.CheckIfSheetExists(dataComponent, this.Workbook);
                if (ws != null)
                {
                    TRMAddin.DeleteEntireContents(ws, this.Workbook);
                }
            }

        }

        /// <summary>
        /// Bind Data Component 
        /// </summary>
        /// <param name="dataComponent"></param>
        /// <param name="isTemplate">Generate Sample Data Only. By Default 10 Rows</param>
        private void BindReport(string dataComponent, string sqlQuery, bool isTemplate)
        {
            
            try
            {
                Worksheet dataComponentWorksheet = TRMAddin.CheckIfSheetExists(dataComponent, this.Workbook);

                dataComponentWorksheet = dataComponentWorksheet ?? TRMAddin.AddWorkSheet(this.Workbook, dataComponent);

                Connection cn = new Connection();
                Recordset rs = new Recordset();
                Command cmd = new Command();

                //cn.ConnectionString =@"Data Source=SG-D-SQL02.farrms.us,2033;Initial Catalog=TRMTracker_Dev;Persist Security Info=True;User ID=spneupane;password=Admin2929";
                cn.ConnectionString = this.OleDbConnection.ConnectionString;
                cn.ConnectionString += ";DataTypeCompatibility=80;MARS Connection=True";
                cn.Open();
                rs.Open(sqlQuery, cn, CursorTypeEnum.adOpenForwardOnly, LockTypeEnum.adLockOptimistic, 1);

                //dataComponent.Worksheet.Cells.ClearContents();
                //dataComponent.Worksheet.Cells.ClearFormats();
                //dataComponent.Worksheet.Activate();
                //  Header
                for (int i = 0; i < rs.Fields.Count; i++)
                {
                    var cell = (Range)dataComponentWorksheet.Cells[1, i + 1];
                    cell.Value2 = rs.Fields[i].Name;
                    cell.Font.Bold = true;
                }
                Range range = dataComponentWorksheet.Cells[dataComponentWorksheet.UsedRange.Rows.Count + 1, 1];

                if (!isTemplate)
                    range.CopyFromRecordset(rs);
                else
                    range.CopyFromRecordset(rs, 10);
            }
            catch (Exception)
            {
                
            }
            

        }

        private void CreateSummarySheet()
        {
            Microsoft.Office.Interop.Excel.Worksheet wsSummary = TRMAddin.CheckIfSheetExists("Summary", this.Workbook);
            if (wsSummary == null)
                wsSummary = TRMAddin.AddWorkSheet(this.Workbook, "Summary");
            wsSummary.Cells[1, 1].Value = "Counterparty";
            wsSummary.Cells[1, 2].Value = "Contract";
            wsSummary.Cells[1, 3].Value = "Prod Date";
            wsSummary.Cells[1, 4].Value = "Prod Date To";
            wsSummary.Cells[1, 5].Value = "As of Date";
            wsSummary.Cells[1, 6].Value = "Line Item";
            Range r = wsSummary.Rows[1];
            r.Font.Bold = true;
            r.AutoFit();

            string sqlQuery = "spa_excel_addin_settlement_process @flag ='s' , @contract_id = " + SettlementParameter.Contract +
                              ", @counterparty_id = " + SettlementParameter.Counterparty + ", @prod_date = '" + SettlementParameter.ProdDate +
                              "', @prod_date_to = '" + SettlementParameter.ProdDateTo + "', @as_of_date = '" + SettlementParameter.AsOfDate + "'";
            if (!this.IsCalcProcess())
                sqlQuery = "spa_excel_addin_settlement_process @flag ='s' , @contract_id = " + SettlementParameter.Contract;

            Summary summary = new List<Summary>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList().FirstOrDefault();
            if (summary != null)
            {
                wsSummary.Cells[2, 1].Value = summary.Counterparty;
                wsSummary.Cells[2, 2].Value = summary.Contract;
                wsSummary.Cells[2, 3].Value = summary.ProdDate;
                wsSummary.Cells[2, 4].Value = summary.ProdDateTo;
                wsSummary.Cells[2, 5].Value = summary.AsOfDate;
                r = wsSummary.Rows[2];
                r.AutoFit();
            }

            //  Add list of line items that are used for this contrac t calc

            sqlQuery = "spa_excel_addin_settlement_process @flag ='c' , @contract_id = " + SettlementParameter.Contract;
            List<ChargeType> chargeTypes = new List<ChargeType>().FromDataReader(this.ExecuteCommand(sqlQuery).ExecuteReader()).ToList();
            if (chargeTypes != null)
            {
                List<string> lineItems = chargeTypes.Select(x => x.ChargeTypeName).Distinct().ToList();
                int rowIndex = 2;
                foreach (string lineItem in lineItems)
                {
                    wsSummary.Cells[rowIndex, 6].Value = lineItem;
                    rowIndex++;
                }
            }
            

        }
    }

    public class Summary
    {
        public string Counterparty { get; set; }
        public string Contract { get; set; }
        public string ProdDate { get; set; }
        public string ProdDateTo { get; set; }
        public string AsOfDate { get; set; }
        public string ProcessId { get; set; }
        public string CreateTemplate { get; set;}
    }

    public class ChargeType
    {
        public int ContractId { get; set; }
        public int ChargeTypeId { get; set; }
        public string ChargeTypeName { get; set; }
        public int Granularity { get; set; }
        public string DataComponent { get; set; }
        public string DataSource { get; set; }
        public int Type { get; set; }
        public string ParamsetHash { get; set; }
        public int FormulaId { get; set; }
        public string Value { get; set; }
        public int ParamsetId { get; set; }
        public int TablixId { get; set; }
       
    }

}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Settings.get_Default():ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Sett" +
    "ings")]

namespace ST_dd15b1baccfb44448c0156790b3eaa20.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="DocumentDesigner.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;
using Microsoft.Office.Interop.Excel;
using Application = Microsoft.Office.Interop.Excel.Application;
using DataTable = System.Data.DataTable;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class DocumentDesigner
    {
        public Workbook Workbook { get; set; }
        public Worksheet InvoiceWorksheet { get; set; }
        public Worksheet TemplateWorksheet { get; set; }
        public List<Tablix> Tablixes { get; set; }
        public List<ReportConfiguration> ReportDataset { get; set; }

        public DocumentDesigner(Worksheet worksheet)
        {
            this.InvoiceWorksheet = worksheet;
        }

        public DocumentDesigner(Worksheet worksheet, Workbook workbook)
        {
            this.Workbook = workbook;
            this.InvoiceWorksheet = worksheet;
            this.TemplateWorksheet = TRMAddin.GetInvoiceTemplateWorkSheet(worksheet.Name, this.Workbook);
            this.Tablixes = GetListOfDataSetsUsedByInvoiceSheet();
            this.ReportDataset = TRMAddin.ListAllConfigurations(this.Workbook);
            if (ReportDataset != null)
            {
                foreach (ReportConfiguration rc in this.ReportDataset)
                {
                    Tablix tablix = new Tablix() { ReportSheetDataset = rc.ReportSheet, Columns = new List<Column>() };
                    tablix.Columns = TRMAddin.GetReportDatasetColumns(rc.ReportSheet, this.Workbook);
                }   
            }
        }


        public List<Tablix> GetListOfDataSetsUsedByInvoiceSheet()
        {
            List<Tablix> listDataSets = new List<Tablix>();

            //  Load xml configuration for this invoice sheet
            string invoiceStructureXml = this.GetInvoiceXMLByInvoiceSheet();
            if (invoiceStructureXml == null)
                return null;


            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.LoadXml(invoiceStructureXml);
            XmlNodeList xmlInvoiceItems = xmlDoc.GetElementsByTagName("InvoiceItems");

            foreach (XmlNode childrenNode in xmlInvoiceItems)
            {
                Tablix data = new Tablix()
                {
                    Columns = new List<Column>(),
                    Rows = new List<Row>(),
                    AggregationList = new List<Column>(),
                    EndAggregationList = new List<Row>()
                };

                foreach (XmlElement xmlElementTablix in childrenNode.ChildNodes)
                {
                    var name = xmlElementTablix.GetAttributeNode("Name");
                    data.ReportSheetDataset = name.Value;
                    data.Position = new Position()
                    {
                        R1 = xmlElementTablix.GetAttributeNode("R1").Value.ToInt(),
                        R2 = xmlElementTablix.GetAttributeNode("R2").Value.ToInt(),
                        C1 = xmlElementTablix.GetAttributeNode("C1").Value.ToInt(),
                        C2 = xmlElementTablix.GetAttributeNode("C2").Value.ToInt(),
                        EndRange = xmlElementTablix.GetAttributeNode("EndRange").Value.ToInt()
                    };

                    //  Column List
                    foreach (XmlElement xmlColumn in xmlElementTablix.ChildNodes)
                    {
                        if (xmlColumn.HasAttributes)
                            data.Columns.Add(new Column() { Label = xmlColumn.GetAttributeNode("Header").Value, Field = xmlColumn.GetAttributeNode("Field").Value });

                    }
                    listDataSets.Add(data);
                }
                //  Rows
                XmlNodeList rowNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix/Rows/Row");
                foreach (XmlElement rowNode in rowNodeList)
                {
                    var rowIndexNode = rowNode.GetAttributeNode("Index");
                    var rowName = rowNode.GetAttributeNode("Name");
                    data.Rows.Add(new Row() { Index = rowIndexNode.Value.ToInt(), Name = rowName.Value });
                }

                //  Grouping and Aggregation Used

                XmlNodeList groupNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix/Groups/Group");
                foreach (XmlElement groupNode in groupNodeList)
                {
                    var groupIndex = groupNode.GetAttributeNode("Index");
                    var groupName = groupNode.GetAttributeNode("Name");
                    var type = groupNode.GetAttributeNode("Type");
                    if (type.Value.ToInt() == 0)
                    {
                        //  Aggregation fields in column
                        Column col = data.Columns.FirstOrDefault(x => x.Field == groupName.Value);
                        if (col != null)
                        {
                            col.GroupingIndex = groupIndex.Value.ToInt();
                            col.AggregationRows = new List<Row>();
                            data.AggregationList.Add(col);
                            //  Aggregations
                            foreach (XmlElement aggElement in groupNode.ChildNodes)
                            {
                                var aggIndex = aggElement.GetAttributeNode("TemplateIndex");
                                var aggName = aggElement.GetAttributeNode("Name");
                                var row = data.Rows.FirstOrDefault(x => x.Name == aggName.Value);
                                if (row != null)
                                    col.AggregationRows.Add(row);
                            }
                        }
                    }
                    else
                    {
                        foreach (XmlElement aggElement in groupNode.ChildNodes)
                        {
                            var aggIndex = aggElement.GetAttributeNode("TemplateIndex");
                            var aggName = aggElement.GetAttributeNode("Name");
                            var row = data.Rows.FirstOrDefault(x => x.Name == aggName.Value);
                            if (row != null)
                                data.EndAggregationList.Add(row);
                        }
                    }

                }
            }
            return listDataSets;
        }

        public string GetInvoiceXMLByInvoiceSheet()
        {
            if (TRMAddin.CheckIfSheetExists(this.InvoiceWorksheet.Name, this.Workbook) != null && TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook) != null)
            {
                Worksheet invoiceConfig = TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook);
                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (this.InvoiceWorksheet.Name.ToLower() ==
                        IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        //  XML configuration for that sheet
                        return IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 2].Value);
                    }
                }

            }
            return null;
        }

        private Range GetDataRowFromInvoiceTemplate(Tablix tablix, int rowIndex)
        {
            try
            {
                Range start = this.TemplateWorksheet.Cells[rowIndex, tablix.Position.C1];
                Range end = this.TemplateWorksheet.Cells[rowIndex, tablix.Position.C2];
                Range dataRow = this.TemplateWorksheet.get_Range(start, end);
                return dataRow;
            }
            catch (Exception)
            {
                return null;
            }
            return null;
        }

        public void PreparImportData(DataImport dataImport)
        {
            //  Skipp runtime databinding if no dataset is bind
            if (dataImport.Tablix == null) return;

            //  Dataset sheet for import
            Worksheet wsDataset = TRMAddin.CheckIfSheetExists(dataImport.Tablix.ReportSheetDataset, this.Workbook);
            Worksheet wsImportSheet = TRMAddin.CheckIfSheetExists(dataImport.ImportSheet, this.Workbook);
            string selectedColumns = dataImport.Tablix.Columns.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
            if (wsDataset != null && wsImportSheet != null)
            {
                int totalImportSheetColumns = wsImportSheet.UsedRange.Columns.Count;
                //  Clear Import Sheet Data
                TRMAddin.DeleteEntireContents(wsImportSheet, this.Workbook);


                System.Data.DataTable dt = new System.Data.DataTable("Table");
                dataImport.Tablix.DataTable = dt;
                //  where data column caption stores index of column corresponding to report dataset worksheet
                foreach (string dataColumn in selectedColumns.Split(','))
                {
                    dt.Columns.Add(new DataColumn(dataColumn) { Caption = wsDataset.GetColumnIndex(dataColumn).ToString() });
                }


                //  Data Plot to datatable
                int totalRow = wsDataset.UsedRange.Rows.Count;
                int totalColumn = wsDataset.UsedRange.Columns.Count;

                for (int i = 2; i <= totalRow; i++)
                {
                    List<string> values = new List<string>();
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        values.Add(IENumerableExtensions.ToString2(wsDataset.Cells[i, dt.Columns[j].Caption.ToInt()].Value));
                    }
                    dataImport.Tablix.DataTable.Rows.Add(values.ToArray());
                }

                //  Columns to be selected to create table from existing dataset datatable


                //DataView view = new DataView(dataImport.Tablix.DataTable);
                //DataTable selected = view.ToTable("Selected", false, selectedCols.Split(','));
                int rowIndex = 2;

                //if (TRMAddin.ImportSheetHasFormula(wsImportSheet)) rowIndex = 3;

                for (int i = 0; i < dataImport.Tablix.DataTable.Rows.Count; i++)
                {
                    for (int j = 1; j <= totalImportSheetColumns; j++)
                    {
                        //  If cell has formula skipp plotting values
                        if (wsImportSheet.CellHasFormula(rowIndex, j)) continue;
                        string fieldName = IENumerableExtensions.ToString2(wsImportSheet.Cells[1, j].Value);
                        string field = dataImport.Tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                        if (string.IsNullOrEmpty(field))
                        {
                            //  table column is unmapped to worksheet table
                            continue;

                        }
                        else
                            this.InvoiceWorksheet.Cells[rowIndex, j].Value = dataImport.Tablix.DataTable.Rows[i][field].ToString2();
                    }
                    rowIndex++;
                }

                //  If worksheet has 2nd row formula delete after this will be treated as template for every run
                if (TRMAddin.ImportSheetHasFormula(wsImportSheet))
                {
                    //  After completion of data population check if any column default row 2 has formula autofill formula to all rows
                    //  TODO: This may throw error , if error exists add workbook parameter like check if sheet exists
                    TRMAddin.AutoFill(wsImportSheet, this.Workbook);
                    //Range secondRow = wsImportSheet.Rows[2];
                    //secondRow.Delete(XlDeleteShiftDirection.xlShiftUp);
                }

            }
        }

        private Range GetDataRowFromInvoiceTemplate(Tablix tablix, int rowIndex, int columnStartRange, int columnEndRange)
        {
            try
            {
                Range start = this.TemplateWorksheet.Cells[rowIndex, columnStartRange];
                Range end = this.TemplateWorksheet.Cells[rowIndex, columnEndRange];
                Range dataRow = this.TemplateWorksheet.get_Range(start, end);
                return dataRow;
            }
            catch (Exception)
            {
                return null;
            }
            return null;
        }

        public void PrepareInvoice()
        {
            if (Tablixes == null)
                return;

            #region Build Data Tables
            int index = 1;
            Tablixes[0].RowIndex = Tablixes[0].Position.R1 + 1;
            //foreach (Tablix tablix in Tablixes)

            for (int t = 0; t < Tablixes.Count; t++)
            {
                Tablix tablix = Tablixes[t];

                //  Dataset worksheet to be used
                Worksheet ws = TRMAddin.CheckIfSheetExists(tablix.ReportSheetDataset, this.Workbook);

                //LOGIC TO BUILD DATA TABLE BASED ON COLUMNS SELECTIONS
                string selectedColumns = tablix.Columns.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
                if (ws != null)
                {
                    System.Data.DataTable dt1 = new System.Data.DataTable("Table" + index);
                    tablix.DataTable = dt1;
                    //  where data column caption stores index of column corresponding to report dataset worksheet
                    foreach (string dataColumn in selectedColumns.Split(','))
                    {
                        dt1.Columns.Add(new DataColumn(dataColumn) { Caption = ws.GetColumnIndex(dataColumn).ToString() });
                    }

                    for (int i = 2; i <= ws.UsedRange.Rows.Count; i++)
                    {
                        List<string> values = new List<string>();
                        for (int j = 0; j < dt1.Columns.Count; j++)
                        {
                            values.Add(IENumerableExtensions.ToString2(ws.Cells[i, dt1.Columns[j].Caption.ToInt()].Value));
                        }
                        tablix.DataTable.Rows.Add(values.ToArray());
                    }
                }



                #region Table Building in worksheet
                //  Group by Columns
                string aggregationColumns = tablix.AggregationList.Where(x => x.Field != "").Aggregate("", (current, psColumn) => current + (psColumn.Field + ",")).TrimEnd(',');
                //string aggregationColumns = "";



                //  Calculate Offset between previous tablix & current table
                int rowOffset = 0;
                if (t != 0 && (Tablixes[t - 1] != null))
                {
                    //  current tablix header row index index - previous tablix table end position
                    rowOffset = tablix.Position.R1 - Tablixes[t - 1].Position.R2;
                    tablix.RowIndex += Tablixes[t - 1].RowIndex + rowOffset + 1;
                }

                //  Clear data rows drawn from template
                this.ClearDataRows(tablix);

                Range range = null;
                //  Copy Data Detail Row from template
                Range dataRow = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1);

                //  Make same height & width with template worksheet
                this.InvoiceWorksheet.MakeSameHeightWidth(this.TemplateWorksheet, this.Workbook);

                if (string.IsNullOrEmpty(aggregationColumns))
                {
                    for (int i = 0; i < tablix.DataTable.Rows.Count; i++)
                    {
                        range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                        range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                        dataRow.Copy();
                        Range destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                        //destination.Select();
                        this.InvoiceWorksheet.Paste(destination);

                        for (int j = tablix.Position.C1; j <= tablix.Position.C2; j++)
                        {
                            //  Excel sheet Table column header
                            //string fieldName = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[tablix.Position.R1, j].Value);
                            string fieldName = IENumerableExtensions.ToString2(this.TemplateWorksheet.Cells[tablix.Position.R1, j].Value);
                            string field = tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                            if (string.IsNullOrEmpty(field))
                            {
                                //  table column is unmapped to worksheet table
                                continue;

                            }
                            else
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, j].Value = tablix.DataTable.Rows[i][field].ToString2();
                        }
                        tablix.Position.EndRange = tablix.RowIndex;
                        tablix.RowIndex++;

                    }
                }
                else
                {
                    //  Used for merging  
                    //  If any sub total aggregation are present
                    int subTotalCount = 1;

                    //  Apply grouping
                    DataTable aggregateDt = GetGroupedDataTable(tablix.DataTable, aggregationColumns);


                    //  Browse through group result sets
                    int groupRowIndex = tablix.RowIndex;
                    Range destination = null;
                    foreach (DataRow groupedRow in aggregateDt.Rows)
                    {
                        Range groupedData = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1, tablix.Position.C1, tablix.Position.C1 + groupedRow.ItemArray.Count());

                        //  Copying of data row may vary exclude aggregation columns count
                        dataRow = GetDataRowFromInvoiceTemplate(tablix, tablix.Position.R1 + 1, tablix.Position.C1 + groupedRow.ItemArray.Count(), tablix.Position.C2);
                        //  Grouped result sets, It will exclude aggregated columns from select list
                        DataTable groupeDt = GetDataTable(tablix.DataTable, groupedRow, aggregationColumns, selectedColumns);

                        tablix.RowIndex = groupRowIndex;
                        //  if offset is needed
                        //rowIndex = groupRowIndex + 1;
                        for (int i = 0; i < groupeDt.Rows.Count; i++)
                        {
                            //-----GROUPING HEADERS------------------------------------------------------
                            groupedData.Copy();
                            destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                            this.InvoiceWorksheet.Paste(destination);
                            for (int j = 0; j < groupedRow.ItemArray.Count(); j++)
                            {
                                string item = groupedRow.ItemArray[j].ToString();
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1 + j].Value = item;
                            }
                            //------------------------------------------------------------------------------
                            dataRow.Copy();
                            destination = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1 + groupedRow.ItemArray.Count()];
                            //destination.Select();
                            this.InvoiceWorksheet.Paste(destination);

                            for (int j = tablix.Position.C1; j <= tablix.Position.C2; j++)
                            {
                                //  Excel sheet Table column header
                                string fieldName = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[tablix.Position.R1, j].Value);
                                string field = tablix.Columns.Where(x => x.Label == fieldName).Select(y => y.Field).FirstOrDefault();
                                if (string.IsNullOrEmpty(field))
                                {
                                    //  table column is unmapped to worksheet table
                                    continue;

                                }
                                else
                                    if (groupeDt.Columns[field] != null)
                                        this.InvoiceWorksheet.Cells[tablix.RowIndex, j].Value = groupeDt.Rows[i][field].ToString2();
                            }
                            tablix.RowIndex++;
                        }
                        //  Sub Totals Etc..
                        //  DYNAMIC GROUPING BASED ON SETTINGS
                        //List<Row> aggregationRows = tablix.AggregationList.Select(x => x.AggregationRows).FirstOrDefault().ToList();

                        List<Row> aggregationRows = new List<Row>();
                        foreach (Column column in tablix.AggregationList)
                        {
                            aggregationRows.AddRange(column.AggregationRows.OrderBy(x => x.Index));
                        }
                        subTotalCount = aggregationRows.Count;

                        foreach (Row row in aggregationRows.OrderBy(x => x.Index))
                        {
                            Range aggregateRange = GetDataRowFromInvoiceTemplate(tablix, row.Index);
                            range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                            //range.Select();
                            range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                            aggregateRange.Copy();
                            Range destinationtotal = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                            this.InvoiceWorksheet.Paste(destinationtotal);

                            foreach (Range range1 in aggregateRange.Cells)
                            {
                                if (!string.IsNullOrEmpty(IENumerableExtensions.ToString2(range1.Value2)))
                                {
                                    string value = range1.Value2.ToString();
                                    string formula =
                                        value.ConvertToFormula(new Position()
                                        {
                                            C1 = groupRowIndex,
                                            C2 = groupRowIndex + groupeDt.Rows.Count - 1
                                        });
                                    if (value.StartsWith("="))
                                    {
                                        this.InvoiceWorksheet.Cells[tablix.RowIndex, range1.Column].Value = formula;
                                        //range1.Formula = formula;
                                    }
                                }
                            }
                            tablix.RowIndex++;
                        }
                        groupRowIndex = tablix.RowIndex;
                    }

                    //  Merge Based on data

                    //  If any aggregation is present start merging from initital column
                    if (tablix.AggregationList.Count > 0)
                    {
                        int initMergeIndex = this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[0].Label, tablix.Position);
                        RecursiveMergeCells(tablix.Position.R1 + 1, tablix.RowIndex, initMergeIndex, tablix);
                    }

                    tablix.Position.EndRange = tablix.RowIndex;
                }


                #region End Of Table Aggregation
                //  End Of Table Aggregation
                foreach (Row row in tablix.EndAggregationList.OrderBy(x => x.Index))
                {
                    Range aggregateRange = GetDataRowFromInvoiceTemplate(tablix, row.Index);
                    range = this.InvoiceWorksheet.Rows[tablix.RowIndex + 1];
                    //range.Select();
                    range.Insert(XlInsertShiftDirection.xlShiftDown, XlInsertFormatOrigin.xlFormatFromLeftOrAbove);
                    aggregateRange.Copy();
                    Range destinationtotal = this.InvoiceWorksheet.Cells[tablix.RowIndex, tablix.Position.C1];
                    this.InvoiceWorksheet.Paste(destinationtotal);
                    //destinationtotal.Select();
                    //  To copy the format (Format Painter)
                    destinationtotal.PasteSpecial(XlPasteType.xlPasteAll, XlPasteSpecialOperation.xlPasteSpecialOperationNone, false, false);


                    foreach (Range range1 in aggregateRange.Cells)
                    {
                        if (!string.IsNullOrEmpty(IENumerableExtensions.ToString2(range1.Value2)))
                        {
                            string value = range1.Value2.ToString();
                            string formula =
                                value.ConvertToFormula(new Position()
                                {
                                    C1 = tablix.Position.R1 + 1,
                                    C2 = tablix.RowIndex - 1// tablix.Position.EndRange //+ groupeDt.Rows.Count - 1
                                });
                            if (value.StartsWith("="))
                            {
                                this.InvoiceWorksheet.Cells[tablix.RowIndex, range1.Column].Value = formula;
                                //range1.Formula = formula;     
                            }
                        }
                    }
                    tablix.RowIndex++;
                    tablix.Position.EndRange += 1;
                }
                #endregion
                this.UpdateTablixEndRange(tablix);
                #endregion

                index++;
            }
            #endregion
        }


        private void RecursiveMergeCells(int start, int end, int columnToMerge, Tablix tablix)
        {


            if (columnToMerge != 0)
            {
                List<DataCell> dataCells = new List<DataCell>();
                for (int i = start; i <= end; i++)
                {
                    dataCells.Add(new DataCell() { Index = i, Value = IENumerableExtensions.ToString2(this.InvoiceWorksheet.Cells[i, columnToMerge].Value) });
                }

                List<string> values = new List<string>();
                values.AddRange(dataCells.Select(x => x.Value).Distinct().Where(x => x != "").ToList());
                //  Determine max merge area 
                for (int i = 0; i < values.Count; i++)
                {
                    int min = dataCells.Where(x => x.Value == values[i]).Select(x => x.Index).Min();
                    int max = dataCells.Where(x => x.Value == values[i]).Select(x => x.Index).Max();
                    this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[min, columnToMerge], this.InvoiceWorksheet.Cells[max, columnToMerge]].Merge();
                    Range mergedRange = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[min, columnToMerge], this.InvoiceWorksheet.Cells[max, columnToMerge]];

                    if (mergedRange.Count == 1) continue;
                    for (int j = 1; j < tablix.AggregationList.Count; j++)
                    {
                        //  if its the same column
                        if (columnToMerge == this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[j].Label, tablix.Position))
                        {
                            min += mergedRange.Count;
                            max = max + (end - max);
                        }
                        columnToMerge = this.InvoiceWorksheet.GetColumnIndex(tablix.AggregationList[j].Label, tablix.Position);
                        RecursiveMergeCells(min, max, columnToMerge, tablix);
                    }
                    columnToMerge = tablix.Position.C1;
                }
            }
        }
        


        private void MergeCellsAndAlign(int firsRow, int firstColumn, int lastRow, int lastColumn, Tablix tablix)
        {
            //  No of columns to merge => Invoice Type,Counterparty
            try
            {
                if (tablix.AggregationList != null)
                {
                    for (int i = 0; i < tablix.AggregationList.Count; i++)
                    {
                        Range range = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[firsRow, firstColumn], this.InvoiceWorksheet.Cells[lastRow, lastColumn]].Merge();
                        firstColumn++;
                        lastColumn++;
                    }
                }

                //Range range = this.InvoiceWorksheet.Range[this.InvoiceWorksheet.Cells[firsRow, firstColumn], this.InvoiceWorksheet.Cells[lastRow, lastColumn]].Merge();
                //range.Select();
                //range.HorizontalAlignment = XlHAlign.xlHAlignLeft;
                //range.VerticalAlignment = XlVAlign.xlVAlignTop;
            }
            catch (Exception)
            {

            }
        }

        private DataTable GetGroupedDataTable(DataTable dataTable, string aggregationColumns)
        {
            if (string.IsNullOrEmpty(aggregationColumns))
                return dataTable;

            string[] groups = aggregationColumns.Split(',');
            DataView view = new DataView(dataTable);
            view.Sort = aggregationColumns;
            return view.ToTable(true, groups);
        }

        private DataTable GetDataTable(DataTable dataTable, DataRow groupedDataRow, string aggregationColumns, string selectedColumns)
        {
            try
            {
                if (string.IsNullOrEmpty(aggregationColumns))
                    return dataTable;

                //  remove aggregated columns from selected columns list
                if (!string.IsNullOrEmpty(aggregationColumns))
                {
                    List<string> arrAgg = aggregationColumns.Split(',').ToList();
                    List<string> arrSel = selectedColumns.Split(',').ToList();
                    selectedColumns = arrSel.Where(s => string.IsNullOrEmpty(arrAgg.Find(x => x == s))).Aggregate("", (current, p) => current + (p + ",")).TrimEnd(',');
                }


                string[] groups = aggregationColumns.Split(',');
                string whereSql = "";
                //foreach (DataRow row in groupedDataRow)
                //{
                int index = 0;
                foreach (string group in groups)
                {
                    whereSql += "[" + group + "]='{" + index + "}' AND ";
                    index++;
                }
                whereSql = string.Format(whereSql.TrimEnd("AND ".ToCharArray()), groupedDataRow.ItemArray);
                //}
                // Create row filter based on group by columns
                DataRow[] results = dataTable.Select(whereSql);
                DataTable resultDt = new DataTable();
                //  Making an equivalent to output
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    resultDt.Columns.Add(dataTable.Columns[i].ColumnName);
                }

                foreach (DataRow dataRow in results)
                {
                    resultDt.ImportRow(dataRow);
                }

                DataView view = new DataView(resultDt);
                System.Data.DataTable selected = view.ToTable("Selected", false, selectedColumns.Split(','));
                return selected;
            }
            catch (Exception)
            {
                return null;
            }
        }

        //  Deletes data rows that has been already plotted
        private void DeleteUsedRange(Tablix psTablix)
        {
            //  Delete rows except data row sample always assume there is data row sample is present
            if (psTablix != null && (psTablix.Position.EndRange > psTablix.Position.R1))
            {

                Range start = this.InvoiceWorksheet.Cells[psTablix.Position.R1 + 2, psTablix.Position.C2];
                //Range end = this.InvoiceWorksheet.Cells[psTablix.Position.EndRange + psTablix.Position.R1 + 2, psTablix.Position.C2];
                Range end = this.InvoiceWorksheet.Cells[psTablix.Position.EndRange, psTablix.Position.C2];
                Range deleteRange = this.InvoiceWorksheet.get_Range(start, end);
                deleteRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);

            }

        }

        /// <summary>
        /// Delete Data Rows 
        /// </summary>
        /// <param name="psTablix"></param>
        private void ClearDataRows(Tablix psTablix)
        {
            //  Skip 1 sample data row
            if (psTablix != null && psTablix.Rows.Count > 1)
            {
                Range start = this.InvoiceWorksheet.Cells[psTablix.RowIndex, psTablix.Position.C2];
                Range end = this.InvoiceWorksheet.Cells[psTablix.RowIndex + psTablix.Rows.Count, psTablix.Position.C2];

                Range deleteRange = this.InvoiceWorksheet.get_Range(start, end);
                deleteRange.EntireRow.Delete(XlDeleteShiftDirection.xlShiftUp);
            }
        }

        //  Update invoice worksheet xml after data has been populated in table
        //  This configuration will be repused in every plot of invoice preparation
        private void UpdateTablixEndRange(Tablix psTablix)
        {
            string xml = this.GetInvoiceXMLByInvoiceSheet();
            if (xml != null)
            {
                XmlDocument xmlDoc = new XmlDocument();
                xmlDoc.LoadXml(xml);
                XmlNodeList tablixNodeList = xmlDoc.SelectNodes("Invoice/InvoiceItems/Tablix");
                foreach (XmlNode tablixNode in tablixNodeList)
                {
                    if (tablixNode.Attributes != null)
                    {
                        Position pos = new Position()
                        {
                            EndRange = tablixNode.Attributes["EndRange"].Value.ToInt(),
                            R1 = tablixNode.Attributes["R1"].Value.ToInt(),
                            C1 = tablixNode.Attributes["C1"].Value.ToInt(),
                            C2 = tablixNode.Attributes["C2"].Value.ToInt()
                        };
                        //  Comparision based on data table that plotted 
                        if (psTablix.Position.R1 == pos.R1 && psTablix.Position.C1 == pos.C1 &&
                            psTablix.Position.C2 == pos.C2)
                        {
                            tablixNode.Attributes["EndRange"].Value = psTablix.Position.EndRange.ToString();
                        }
                    }
                }
                //  Update to invoice configurations
                UpdateInvoiceXmlConfiguration(xmlDoc.InnerXml);
            }

        }

        private void UpdateInvoiceXmlConfiguration(string invoiceXmlSettings)
        {
            if (TRMAddin.CheckIfSheetExists(this.InvoiceWorksheet.Name, this.Workbook) != null && TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook) != null)
            {
                Worksheet invoiceConfig = TRMAddin.CheckIfSheetExists("Invoice Configuration", this.Workbook);
                Range r = invoiceConfig.UsedRange;
                for (int i = 2; i <= r.Rows.Count; i++)
                {
                    if (this.InvoiceWorksheet.Name.ToLower() == IENumerableExtensions.ToString2(invoiceConfig.Cells[i, 1].Value).ToLower())
                    {
                        //  XML configuration for that sheet
                        invoiceConfig.Cells[i, 2].Value = invoiceXmlSettings;
                    }
                }

            }
        }

    }

    public class Tablix
    {
        public string ReportSheetDataset { get; set; }
        public string Description { get; set; }
        public List<Column> Columns { get; set; }
        public List<Row> Rows { get; set; }

        public virtual DataTable DataTable { get; set; }
        public virtual Position Position { get; set; }
        public virtual List<Column> AggregationList { get; set; }

        //  For End of Grouping
        public virtual List<Row> EndAggregationList { get; set; }
        public virtual int RowIndex { get; set; }

    }

    public class Row
    {
        public int Index { get; set; }
        public string Name { get; set; }
    }

    public class Column
    {
        public string Label { get; set; }
        public string Field { get; set; }

        //  If any grouping aggregation field has been bound
        public virtual List<Row> AggregationRows { get; set; }
        public virtual int GroupingIndex { get; set; }
    }

    public struct DataCell
    {
        public int Index { get; set; }
        public string Value { get; set; }
    }

    public class Position
    {
        public int R1 { get; set; }
        public int R2 { get; set; }
        public int C1 { get; set; }
        public int C2 { get; set; }
        public int EndRange { get; set; }
    }

    public class ReportConfiguration
    {

        public string ReportName { get; set; }
        public string ReportSheet { get; set; }
        public string Description { get; set; }
        public string Parameter { get; set; }
        public string ParameterSheet { get; set; }
        public virtual string ParamsetHash { get; set; }
        public virtual string ConnectionIdentifier { get; set; }

        public virtual Report Report { get; set; }
        public virtual ReportData ReportData { get; set; }
        public virtual bool NewReport { get; set; }

        public virtual int ParamsetId { get; set; }
        public virtual int TablixId { get; set; }

    }

    public class Report
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string ParamsetHash { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using ST_f39233fac16e426d991d932f9ef7d858;
using Microsoft.Office.Interop.Excel;

#endregion

namespace ST_dd15b1baccfb44448c0156790b3eaa20
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// 
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        /// 

        private string _psSynchronize;
        private string _psImageSnapshot;
        private string _psExcelSheetId;
        private string _psUserName;
        private string _psProcessId;
        private string _psExportFormat;
        private string _psSettlementCalc;

        [STAThread]
        public void Main()
        {
            uint iProcessId = 0;
            try
            {
                _psSynchronize = Dts.Variables["PS_Synchronize"].Value.ToString();
                _psImageSnapshot = Dts.Variables["PS_ImageSnapshot"].Value.ToString();
                _psExcelSheetId = Dts.Variables["PS_ExcelSheetId"].Value.ToString().Replace('|', ',').Replace("ALL", "");
                _psUserName = Dts.Variables["PS_UserName"].Value.ToString();
                _psProcessId = Dts.Variables["PS_ProcessId"].Value.ToString();
                _psExportFormat = Dts.Variables["PS_ExportFormat"].Value.ToString();

                _psSettlementCalc = Dts.Variables["PS_SettlementCalc"].Value.ToString();
                
                OleDbConnection oleDbConnection = GetConnection("OLE_CONN_MainDB");
                
                
                    if (_psSettlementCalc == "y")
                    {
                        using (
                            SqlConnection connection =
                                new SqlConnection(TRMAddin.GetSqlConnection(oleDbConnection.ConnectionString)))
                        {
                            connection.Open();
                            Settlement settlement = new Settlement(_psProcessId, connection, oleDbConnection);
                            try
                            {
                                    if (settlement.IsCalcProcess())
                                {
                                        settlement.Prepare();
                                        settlement.IProcessId.KillExcel();
                                }
                                return;
                            }
                            catch (Exception ex)
                            {
                                settlement.IProcessId.KillExcel();
                                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                                Dts.TaskResult = (int)ScriptResults.Failure;
                                return;

                            }
                        }
                        
                    }
                
                

                if (_psProcessId == "")
                    _psProcessId = Guid.NewGuid().ToString().Replace("-", "_").ToUpper();

                
                OleDbCommand cmd = new OleDbCommand("spa_excel_snapshots @flag='e',@sheet_id='" + _psExcelSheetId + "'", oleDbConnection);
                OleDbDataReader reader = cmd.ExecuteReader();
                List<ExcelSheets> excelSheets = new List<ExcelSheets>().FromOleReader(reader).ToList();

                Snapshot snap = new Snapshot(oleDbConnection, _psExportFormat);
                snap.ExcelSheet = excelSheets.FirstOrDefault();
                snap.ProcessId = _psProcessId;
                snap.UserName = _psUserName;
                snap.ParseViewReportFilterXMl();


                if (_psSynchronize.Replace('y', '1') == "1")
                    snap.Synchronize = true;

                if (_psImageSnapshot.Replace('y', '1') == "1")
                    snap.ImageSnapshot = true;




                //  Synchronize excel sheets , Synchronization process creates snapshots its self
                string[] files = excelSheets.Where(x => x.Publish == true).Select(x => x.FileName).Distinct().ToArray();
                foreach (string f in files)
                {
                    snap.SynchronizeExcel(f, out iProcessId);
                }

                //  Publish Snapshots only
                if (!snap.Synchronize && snap.ImageSnapshot)
                //if (snap.ImageSnapshot)
                {
                    foreach (string s in files)
                    {
                        string[] arrSheets = excelSheets.Where(x => x.FileName == s && x.Publish == true).Select(x => x.SheetName).ToArray();
                        snap.PublishSnapshot(s, arrSheets, out iProcessId);
                    }
                }
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                iProcessId.KillExcel();
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }


        }



        private OleDbConnection GetConnection(string constring)
        {
            try
            {
                ConnectionManager cm = Dts.Connections[constring];
                IDTSConnectionManagerDatabaseParameters100 cmParams = cm.InnerObject as IDTSConnectionManagerDatabaseParameters100;
                OleDbConnection con = cmParams.GetConnectionForSchema() as OleDbConnection;
                return con;
            }
            catch (Exception ex)
            {
                Dts.Events.FireError(0, "Script_Task", ex.Message + "\r" + ex.StackTrace, String.Empty, 0);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
            return null;
        }
        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion
	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_dd15b1baccfb44448c0156790b3eaa20.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{0C3005C9-9BCC-4175-B32E-77B5C2007D49}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_dd15b1baccfb44448c0156790b3eaa20</RootNamespace>
    <AssemblyName>ST_dd15b1baccfb44448c0156790b3eaa20</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="adodb, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>False</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft.NET\Primary Interop Assemblies\adodb.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="Microsoft.CSharp" />
    <Reference Include="Microsoft.Office.Interop.Excel, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Program Files (x86)\Microsoft Visual Studio 11.0\Visual Studio Tools for Office\PIA\Office14\Microsoft.Office.Interop.Excel.dll</HintPath>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="office, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL">
      <SpecificVersion>False</SpecificVersion>
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms">
      <Private>True</Private>
      <EmbedInteropTypes>False</EmbedInteropTypes>
    </Reference>
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="System.Xml.Linq" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="DocumentDesigner.cs" />
    <Compile Include="ImportExport.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <Compile Include="Settlement.cs" />
    <Compile Include="Snapshot.cs" />
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug32dd7fa2-0819-4108-97fb-711b4acd7a1b/c34a9309-fa8f-40db-ad1d-45aeee340652&quot;" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_dd15b1baccfb44448c0156790b3eaa20</msb:CodeName>
		<msb:DisplayName>ST_dd15b1baccfb44448c0156790b3eaa20</msb:DisplayName>
		<msb:Language>msBuild</msb:Language>
		<msb:ProjectId>{FC04B4FB-676E-4C29-B168-91092E46900D}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_dd15b1baccfb44448c0156790b3eaa20.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="DocumentDesigner.cs"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:File Include="Snapshot.cs"/>
		<msb:File Include="ImportExport.cs"/>
		<msb:File Include="Settlement.cs"/>
		<msb:Breakpoint Include="3385709aec5640388b1d1f7c329730e1">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>128</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="332440c7203f41ceb1a201815ba47d34">
			<msb:FileName>Settlement.cs</msb:FileName>
			<msb:HitCountType>1</msb:HitCountType>
			<msb:LineNumber>335</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>1</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Condition></msb:Condition>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="4312954d26a74bac992666941e60f0ce">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>ScriptMain.cs</msb:FileName>
			<msb:LineNumber>174</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>17</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="0da132fc5a7c4b9c9abb57d7b9e3c042">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>Snapshot.cs</msb:FileName>
			<msb:LineNumber>99</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>21</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
		<msb:Breakpoint Include="6e03703372c349439c27a23456cbc573">
			<msb:HitCountType>1</msb:HitCountType>
			<msb:FileName>Snapshot.cs</msb:FileName>
			<msb:LineNumber>960</msb:LineNumber>
			<msb:HitCountTarget>1</msb:HitCountTarget>
			<msb:ColumnNumber>13</msb:ColumnNumber>
			<msb:Enabled>True</msb:Enabled>
			<msb:Condition></msb:Condition>
			<msb:ConditionType>1</msb:ConditionType>
			<msb:Language>C#</msb:Language>
		</msb:Breakpoint>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_dd15b1baccfb44448c0156790b3eaa20")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ST_dd15b1baccfb44448c0156790b3eaa20")]
[assembly: AssemblyCopyright("Copyright @ Microsoft 2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="ImportExport.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Runtime.Serialization;
using System.Security.AccessControl;
using System.Text;
using System.Xml;
using Microsoft.Office.Interop.Excel;

namespace ST_f39233fac16e426d991d932f9ef7d858
{
    public class ImportExport
    {
        public Worksheet Worksheet { get; set; }
        public Workbook Workbook { get; set; }
        public DataImport DataImport;
        public SqlConnection SqlConnection { get; set; }
        public string ProcessTableName { get; set; }
        private string processId;
        public ImportExport()
        {
            this.processId = TRMAddin.ProcessID();
        }

        public ImportExport(Worksheet worksheet, Workbook workbook)
        {
            this.processId = TRMAddin.ProcessID();
            this.Workbook = workbook;
            this.Worksheet = worksheet;
            this.DataImport = GetDataImportConfigurationOfWorksheet();
        }


        public DataImport GetDataImportConfigurationOfWorksheet()
        {
            try
            {
                //  if no any configuration is saved
                Worksheet wsImportSettings = TRMAddin.CheckIfSheetExists("Import Settings", this.Workbook);
                if (wsImportSettings != null)
                {
                    for (int i = 2; i <= wsImportSettings.UsedRange.Rows.Count; i++)
                    {
                        //  Check for matching worksheet
                        string importSheetName = IENumerableExtensions.ToString2(wsImportSettings.Cells[i, 5].Value);
                        if (!string.IsNullOrEmpty(importSheetName) && (importSheetName.ToLower() == this.Worksheet.Name.ToLower()))
                        {
                            var ruleId = (Range)wsImportSettings.Cells[i, 1];
                            var ruleName = (Range)wsImportSettings.Cells[i, 2];
                            var description = (Range)wsImportSettings.Cells[i, 3];
                            var sourceColumns = (Range)wsImportSettings.Cells[i, 4];
                            string xmlConfig = IENumerableExtensions.ToString2(wsImportSettings.Cells[i, 6].Value).Trim();
                            List<RuleColumn> ruleColumns = new List<RuleColumn>();
                            if (sourceColumns.Value2 != null)
                            {
                                foreach (string col in sourceColumns.Value2.ToString().Split(','))
                                {
                                    //cols.Add(col);
                                    ruleColumns.Add(new RuleColumn() { Column = col });
                                }
                            }

                            DataImport di = new DataImport()
                            {
                                Description = (description.Value2 != null) ? description.Value2.ToString() : "",
                                ImportSheet = importSheetName,
                                Rule = new Rule() { Id = IENumerableExtensions.ToInt(ruleId.Value2), Name = ruleName.Value2.ToString(), RuleColumnList = ruleColumns }
                            };

                            if (!string.IsNullOrEmpty(xmlConfig))
                            {
                                XmlDocument xmlDoc = new XmlDocument();
                                xmlDoc.LoadXml(xmlConfig);
                                XmlNodeList importXml = xmlDoc.GetElementsByTagName("Tablix");
                                XmlNode xNode = importXml[0];
                                string datasetSheetName = xNode.Attributes["Name"].Value;


                                di.Tablix = new Tablix()
                                {
                                    ReportSheetDataset = datasetSheetName,
                                    Columns = new List<Column>()
                                };

                                foreach (XmlElement xmlColumn in xNode.ChildNodes)
                                {
                                    if (xmlColumn.HasAttributes)
                                        di.Tablix.Columns.Add(new Column() { Label = xmlColumn.GetAttributeNode("Header").Value, Field = xmlColumn.GetAttributeNode("Field").Value });
                                }
                            }

                            return di;
                        }

                    }
                }
                return null;
            }
            catch (Exception)
            {
                return null;
            }
        }

        public bool CheckIfRuleIsChanged(Rule selectedRule)
        {
            DataImport di = GetDataImportConfigurationOfWorksheet();
            if (di != null)
            {
                if (di.Rule.Name.ToLower() != selectedRule.Name.ToLower())
                    return true;
            }
            return false;
        }


        public ImportStatus Run()
        {
            //string json = new PsJson(this.Worksheet).ConvertToJson();
            //  TODO : Run Import Rule WithOut API
            //return TRMAddin.PSAPIInterface.RunImport(json, this.DataImport.Rule.Id);

            var dt = this.CreateDataTable();
            if (dt != null)
            {
                this.BuildDataTable(dt);
                this.CreateProcessTable(dt);
                this.DumpDataTable(dt);
                this.ExecuteImport();
            }

            return null;
        }

        private void ExecuteImport()
        {
            //  Check if valid rule id selected in sheet, if excel file from different version is uploaded get rule id from its name
            //  Rule Name is unique always

            int ruleId = this.GetRuleId();
            if (ruleId != 0) this.DataImport.Rule.Id = ruleId;

            string sql = "EXEC spa_ixp_rules @flag = 't',@process_id = '" + this.processId + "',@ixp_rules_id =" +
                         this.DataImport.Rule.Id + ",@run_table = '" + this.ProcessTableName +
                         "',@source = '21400',@run_with_custom_enable = 'n'";
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);
        }

        private int GetRuleId()
        {
            string sql = "SELECT ir.ixp_rules_id FROM ixp_rules AS ir WHERE ir.ixp_rules_name = '" + this.DataImport.Rule.Name + "'";
            using (var cmd = new SqlCommand(sql, this.SqlConnection))
            {
                using (SqlDataReader rd = cmd.ExecuteReader())
                {
                    while (rd.Read())
                    {
                        return rd[0].ToInt();
                    }
                }
            }
            return 0;
        }

        private System.Data.DataTable CreateDataTable()
        {
            try
            {
                var dt = new System.Data.DataTable();
                Range range = this.Worksheet.UsedRange;
                if (range != null)
                {
                    int totalColumn = range.Columns.Count;
                    for (int i = 0; i < totalColumn; i++)
                    {
                        string columnName = "[Column" + (i + 1) + "]";
                        var cell = (Range)this.Worksheet.Cells[1, i + 1];
                        if (cell.Value2 != null)
                            columnName = cell.Text;
                        DataColumn datacolumn = new DataColumn(columnName);
                        dt.Columns.Add(datacolumn);

                    }
                }
                return dt;
            }
            catch (Exception)
            {
                return null;
            }
        }

        private void BuildDataTable(System.Data.DataTable dt)
        {
            //  check if data rows are present or not excluding header
            Range usedRange = this.Worksheet.UsedRange;
            if (usedRange != null)
            {
                int totalRows = usedRange.Rows.Count;
                int totalColumns = usedRange.Columns.Count;
                if (totalRows > 1)
                {
                    //  Row
                    int rowIndex = 0;
                    for (int i = 2; i <= totalRows; i++)
                    {
                        var dr = dt.Rows.Add();
                        //  Column
                        for (int j = 1; j <= totalColumns; j++)
                        {
                            dt.Rows[rowIndex][j - 1] = ((Range)usedRange.Cells[i, j]).Text;
                        }
                        rowIndex++;
                    }
                }
            }
        }

        private void DumpDataTable(System.Data.DataTable dt)
        {
            using (var adapter = new SqlDataAdapter("SELECT * FROM " + this.ProcessTableName, this.SqlConnection))
            using (var builder = new SqlCommandBuilder(adapter))
            {
                adapter.InsertCommand = builder.GetInsertCommand();
                adapter.Update(dt);
            }
            DeleteEmptyRowsOfTable(this.ProcessTableName);
        }

        private void CreateProcessTable(System.Data.DataTable dt)
        {
            //  Create process table  Drop If exists
            this.ProcessTableName = "[adiha_process].dbo.[excel_addin_data_import_" + this.processId + "]";
            //  Drop process table if exists
            string sql = "IF OBJECT_ID('" + this.ProcessTableName + "') IS NOT NULL DROP TABLE " + this.ProcessTableName;
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);

            sql = "CREATE TABLE " + this.ProcessTableName + "(";

            foreach (System.Data.DataColumn dtColumn in dt.Columns)
            {
                sql += "[" + dtColumn.ColumnName + "] VARCHAR(1024),";
            }
            sql = sql.TrimEnd(',') + ")";
            TRMAddin.ExecuteQuery(sql, this.SqlConnection);
        }

        private void DeleteEmptyRowsOfTable(string tableName)
        {
            try
            {
                //  Just load the structure
                using (SqlCommand cmd = new SqlCommand("SELECT * FROM " + tableName + " WHERE 1=2", this.SqlConnection))
                {
                    string sql = @"DELETE FROM " + tableName + " WHERE ";
                    using (SqlDataReader rd = cmd.ExecuteReader())
                    {

                        for (int i = 0; i < rd.FieldCount; i++)
                        {
                            sql += " ISNULL([" + rd.GetName(i) + "],'') = '' +";
                        }
                        rd.Close();
                    }
                    sql = sql.TrimEnd('+').Replace("+", "AND");
                    TRMAddin.ExecuteQuery(sql, this.SqlConnection);
                }
            }
            catch (Exception)
            {

            }
        }

    }

    public class ImportStatus
    {
        public string ErrorCode { get; set; }
        public string Module { get; set; }
        public string Area { get; set; }
        public string Status { get; set; }
        public string Message { get; set; }
        public string Recommendation { get; set; }
    }

    public class Rule
    {
        public int Id { get; set; }
        public string Category { get; set; }
        public string Name { get; set; }
        public string DataSource { get; set; }

        public virtual List<RuleColumn> RuleColumnList { get; set; }
    }

    public class RuleColumn
    {
        public string Column { get; set; }
    }

    public class DataImport
    {
        public Rule Rule { get; set; }
        public string Description { get; set; }
        public string ImportSheet { get; set; }
        public virtual Tablix Tablix { get; set; }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_dd15b1baccfb44448c0156790b3eaa20.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_dd15b1baccfb44448c0156790b3eaa20.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_dd15b1baccfb44448c0156790b3eaa20.dll">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
ERz+BkcCAAZzKAAAChMbERsoAQAAKxMUERQ5ZgEAABEUERJvFwAACijQAQAGb0sAAAYRFHMfAAAK
b0kAAAYRBW84AAAGERRvIwAAChERbyAAAApvHQAAChMmK2sRJm8eAAAKdDAAAAETFXNIAgAGExcR
FxEcfdgAAAQRFXIbAQBwbyEAAAomERcRFXIbAABwbyEAAAp92QAABBEFbzIAAAYRF/4GSQIABnMq
AAAKKAIAACsTFhEWLA4RFG9IAAAGERZvJwAAChEmbyQAAAotjN2wAAAAESZ1KQAAARMnEScsBxEn
bxYAAArcERFvIAAACm8dAAAKEygraxEobx4AAAp0MAAAARMYc0oCAAYTGhEaERx92gAABBEYchsB
AHBvIQAACiYRGhEYchsAAHBvIQAACn3bAAAEEQVvMgAABhEa/gZLAgAGcyoAAAooAgAAKxMZERks
DhEFbzoAAAYRGW8nAAAKEShvJAAACi2M3hURKHUpAAABEykRKSwHESlvFgAACtwRJW8kAAAKOgz+
///eFREldSkAAAETKhEqLAcRKm8WAAAK3BEebyQAAAo6WPv//94VER51KQAAARMrESssBxErbxYA
AArcBioAAABBrAAAAgAAAG0BAABpAAAA1gEAABUAAAAAAAAAAgAAAI8AAAByAQAAAQIAABUAAAAA
AAAAAgAAACwCAABtAAAAmQIAABUAAAAAAAAAAgAAAIYDAAB7AAAAAQQAABUAAAAAAAAAAgAAACQE
AAB4AAAAnAQAABUAAAAAAAAAAgAAAMQCAAD7AQAAvwQAABUAAAAAAAAAAgAAADMAAACvBAAA4gQA
ABUAAAAAAAAAEzARAEMDAAADAAARAigDAAAGbysCAAYCKAEAAAYowwEABjkmAwAAcjcBAHACKAEA
AAYowwEABjkRAwAAcjcBAHACKAEAAAYowwEABgoGb0ECAAYLGAw44QIAAH7cAAAELS4WH1PQAgAA
AigsAAAKF405AAABDQkWFhQoLQAACqIJKC4AAAooLwAACoDcAAAEftwAAAR7MAAACn7cAAAEft0A
AAQtPBYfDdACAAACKCwAAAoYjTkAAAETBBEEFhcUKC0AAAqiEQQXFhQoLQAACqIRBCgxAAAKKDIA
AAqA3QAABH7dAAAEezMAAAp+3QAABAIoAwAABm8rAgAGbzQAAAp+3gAABC01FnJjAQBwFNACAAAC
KCwAAAoXjTkAAAETBREFFhYUKC0AAAqiEQUoNQAACig2AAAKgN4AAAR+3gAABHs3AAAKft4AAAR+
3wAABC1BFnJzAQBwFNACAAACKCwAAAoYjTkAAAETBhEGFh8hFCgtAAAKohEGFxYUKC0AAAqiEQYo
NQAACig4AAAKgN8AAAR+3wAABHs5AAAKft8AAATQIQAAAigsAAAKfuAAAAQtNBZyhwEAcNACAAAC
KCwAAAoXjTkAAAETBxEHFhYUKC0AAAqiEQcoOgAACig2AAAKgOAAAAR+4AAABHs3AAAKfuAAAAQG
bzQCAAYIjD8AAAEXjD8AAAFvAgIABm89AAAKbz4AAApvPQAACm8/AAAKb0AAAAo5DAEAAH7hAAAE
LSQW0CwAAAEoLAAACtACAAACKCwAAAooQQAACihCAAAKgOEAAAR+4QAABHtDAAAKfuEAAAR+4gAA
BC1BFnJzAQBwFNACAAACKCwAAAoYjTkAAAETCBEIFh8hFCgtAAAKohEIFxYUKC0AAAqiEQgoNQAA
Cig4AAAKgOIAAAR+4gAABHs5AAAKfuIAAATQIQAAAigsAAAKfuMAAAQtNBZyhwEAcNACAAACKCwA
AAoXjTkAAAETCREJFhYUKC0AAAqiEQkoOgAACig2AAAKgOMAAAR+4wAABHs3AAAKfuMAAAQGbzQC
AAYIjD8AAAEYjD8AAAFvAgIABm89AAAKbz4AAApvRAAACioIF1gMCAdvGgIABm8AAgAGPg79//8U
KgAbMAUA5QAAAAQAABF+5AAABC0kFtAoAAACKCwAAArQAgAAAigsAAAKKEEAAAooRwAACoDkAAAE
fuQAAAR7SAAACn7kAAAEAigFAAAGbzQCAAYEjD8AAAEDbzYAAAZvVQAABow/AAABbwICAAZvSQAA
Cgp+5QAABC0kFtAoAAACKCwAAArQAgAAAigsAAAKKEEAAAooRwAACoDlAAAEfuUAAAR7SAAACn7l
AAAEAigFAAAGbzQCAAYEjD8AAAEDbzYAAAZvVwAABow/AAABbwICAAZvSQAACgsCKAUAAAYGB289
AgAGDAgN3gUmFA3eAAkqAAAAARAAAAAAAADe3gAFQAAAAR4CKBAAAAoqRgJvRgAABnKTAQBwKEsA
AAoqSgIDb0YAAAZylQEAcChMAAAKKkoDb0QAAAYCe+0AAAQoGAAACioeAm9GAAAGKhMwDQB4BQAA
BQAAEQNvsQAABi0BKgNvsQAABm8sAAAGAigBAAAGKMMBAAYKA2+vAAAGAigBAAAGKMMBAAYLA2+x
AAAGbzAAAAZ+BgAABC0RFP4GGwAABnMoAAAKgAYAAAR+BgAABCgDAAArcpMBAHB+BwAABC0RFP4G
HAAABnNOAAAKgAcAAAR+BwAABCgEAAArF41CAAABExAREBYfLJ0REG9QAAAKDAY51QQAAAc5zwQA
AAdvQQIABm/5AQAGbwACAAYNBwIoAQAABii9AQAGcpkBAHBzUgAAChMEA2+xAAAGEQRvNQAABggX
jUIAAAETERERFh8snRERb1MAAAoTEhYTEys8ERIRE5oTBREEb1QAAAoRBXNVAAAKEwYRBgYRBSi5
AQAGExQSFChWAAAKb1cAAAoRBm9YAAAKERMXWBMTERMREo5pMrwGb0ECAAZvGgIABm8AAgAGEwcG
b0ECAAZv+QEABm8AAgAGJhgTCDiQAQAAc1kAAAoTCRYTCjhLAQAAfuYAAAQtRCAAAQAAcqUBAHAU
0AIAAAIoLAAAChiNOQAAARMVERUWFxQoLQAACqIRFRcWFCgtAAAKohEVKDUAAAooWgAACoDmAAAE
fuYAAAR7WwAACn7mAAAEEQl+5wAABC1BFnJzAQBwFNACAAACKCwAAAoYjTkAAAETFhEWFh8hFCgt
AAAKohEWFxYUKC0AAAqiERYoNQAACig4AAAKgOcAAAR+5wAABHs5AAAKfucAAATQIQAAAigsAAAK
fugAAAQtNBZyhwEAcNACAAACKCwAAAoXjTkAAAETFxEXFhYUKC0AAAqiERcoOgAACig2AAAKgOgA
AAR+6AAABHs3AAAKfugAAAQGbzQCAAYRCIw/AAABEQRvVAAAChEKb1wAAApvXQAACijQAQAGjD8A
AAFvAgIABm89AAAKbz4AAApvXgAAChEKF1gTChEKEQRvVAAACm9fAAAKP6L+//8Db7EAAAZvNAAA
Bm9gAAAKEQlvYQAACm9iAAAKJhEIF1gTCBEIEQc+Z/7//xgTCxYTDDg5AgAAFxMNOB0CAABzTAIA
BhMPBxELEQ0ovAEABjoBAgAAEQ9+6QAABC0kFtAsAAABKCwAAArQAgAAAigsAAAKKEEAAAooQgAA
CoDpAAAEfukAAAR7QwAACn7pAAAEfuoAAAQtQRZycwEAcBTQAgAAAigsAAAKGI05AAABExgRGBYf
IRQoLQAACqIRGBcWFCgtAAAKohEYKDUAAAooOAAACoDqAAAEfuoAAAR7OQAACn7qAAAE0CEAAAIo
LAAACn7rAAAELTQWcocBAHDQAgAAAigsAAAKF405AAABExkRGRYWFCgtAAAKohEZKDoAAAooNgAA
CoDrAAAEfusAAAR7NwAACn7rAAAEB280AgAGF4w/AAABEQ2MPwAAAW8CAgAGbz0AAApvPgAACm9E
AAAKfe0AAAQDb7EAAAZvMAAABhEP/gZNAgAGcygAAAooAwAAK34IAAAELREU/gYdAAAGc2MAAAqA
CAAABH4IAAAEKAUAACsoBgAAKxMOEQ4oZgAACjqcAAAAfuwAAAQtPxZyhwEAcNACAAACKCwAAAoY
jTkAAAETGhEaFhYUKC0AAAqiERoXFxQoLQAACqIRGihnAAAKKGgAAAqA7AAABH7sAAAEe2kAAAp+
7AAABAIoAwAABm80AgAGEQuMPwAAARENjD8AAAFvAgIABgNvsQAABm80AAAGb2AAAAoRDG9qAAAK
EQ5vawAACijRAQAGb2wAAAomEQ0XWBMNEQ0JPtv9//8RCxdYEwsRDBdYEwwRDANvsQAABm80AAAG
b2AAAApvXwAACj+r/f//Byi7AQAGLAwHAigBAAAGKLcBAAYqGzAFANIAAAAEAAARfu4AAAQtJBbQ
KAAAAigsAAAK0AIAAAIoLAAACihBAAAKKEcAAAqA7gAABH7uAAAEe0gAAAp+7gAABAIoBQAABm80
AgAGBIw/AAABBYw/AAABbwICAAZvSQAACgp+7wAABC0kFtAoAAACKCwAAArQAgAAAigsAAAKKEEA
AAooRwAACoDvAAAEfu8AAAR7SAAACn7vAAAEAigFAAAGbzQCAAYEjD8AAAEOBIw/AAABbwICAAZv
SQAACgsCKAUAAAYGB289AgAGDAgN3gUmFA3eAAkqAAABEAAAAAAAAMvLAAVAAAABHgIoEAAACioe
AigQAAAKKkYCb0YAAAZykwEAcChLAAAKKkoCA29GAAAGcpUBAHAoTAAACipGAm9GAAAGcpMBAHAo
SwAACipKAgNvRgAABnKVAQBwKEwAAAoqSgNvRAAABgJ7EgEABCgYAAAKKh4Cb0YAAAYqSgNvRAAA
BgJ7EwEABCgYAAAKKh4Cb0YAAAYqHgJvPwAABioeAm8/AAAGKh4Cbz8AAAYqGzAPABAXAAAGAAAR
AigHAAAGLQEqFwoCKAcAAAYWb20AAAoCKAcAAAYWb20AAApvNgAABm9RAAAGF1hvPQAABhYLOMMW
AAACKAcAAAYHb20AAAoMCG8sAAAGAigBAAAGKMMBAAYNCG8wAAAGfgkAAAQtERT+Bh4AAAZzKAAA
CoAJAAAEfgkAAAQoAwAAK3KTAQBwfgoAAAQtERT+Bh8AAAZzTgAACoAKAAAEfgoAAAQoBAAAKxeN
QgAAARMxETEWHyydETFvUAAAChMECTkrAgAAcpkBAHAGjD8AAAEobgAACnNSAAAKEwUIEQVvNQAA
BhEEF41CAAABEzIRMhYfLJ0RMm9TAAAKEzMWEzQrPBEzETSaEwYRBW9UAAAKEQZzVQAAChMHEQcJ
EQYouQEABhM1EjUoVgAACm9XAAAKEQdvWAAAChE0F1gTNBE0ETOOaTK8GBMIOIsBAABzWQAAChMJ
FhMKOEsBAAB+8AAABC1EIAABAABypQEAcBTQAgAAAigsAAAKGI05AAABEzYRNhYXFCgtAAAKohE2
FxYUKC0AAAqiETYoNQAACihaAAAKgPAAAAR+8AAABHtbAAAKfvAAAAQRCX7xAAAELUEWcnMBAHAU
0AIAAAIoLAAAChiNOQAAARM3ETcWHyEUKC0AAAqiETcXFhQoLQAACqIRNyg1AAAKKDgAAAqA8QAA
BH7xAAAEezkAAAp+8QAABNAhAAACKCwAAAp+8gAABC00FnKHAQBw0AIAAAIoLAAACheNOQAAARM4
ETgWFhQoLQAACqIROCg6AAAKKDYAAAqA8gAABH7yAAAEezcAAAp+8gAABAlvNAIABhEIjD8AAAER
BW9UAAAKEQpvXAAACm9dAAAKKNABAAaMPwAAAW8CAgAGbz0AAApvPgAACm9eAAAKEQoXWBMKEQoR
BW9UAAAKb18AAAo/ov7//whvNAAABm9gAAAKEQlvYQAACm9iAAAKJhEIF1gTCBEICW9BAgAGbxoC
AAZvAAIABj5e/v//CG84AAAGfgsAAAQtERT+BiAAAAZzKAAACoALAAAEfgsAAAQoAwAAK3KTAQBw
fgwAAAQtERT+BiEAAAZzTgAACoAMAAAEfgwAAAQoBAAAKxeNQgAAARM5ETkWHyydETlvUAAAChML
FhMMByxbAigHAAAGBxdZb20AAAosSwhvNgAABm9RAAAGAigHAAAGBxdZb20AAApvNgAABm9TAAAG
WRMMCCVvPAAABgIoBwAABgcXWW9tAAAKbzwAAAYRDFgXWFhvPQAABgIIKBgAAAYUEw0CCAhvNgAA
Bm9RAAAGF1goDwAABhMOAigDAAAGAigFAAAGAigBAAAGKLgBAAYRCyhmAAAKOYoDAAAWEw84ZgMA
AH7zAAAELSQW0CgAAAIoLAAACtACAAACKCwAAAooQQAACihHAAAKgPMAAAR+8wAABHtIAAAKfvMA
AAQCKAMAAAZvPwIABghvPAAABhdYjD8AAAF+cAAACm8CAgAGb0kAAAoTDRENIOfv//+MNgAAAhaM
NwAAAm8OAgAGJhEOfnAAAApv/QEABiZ+9AAABC0kFtAoAAACKCwAAArQAgAAAigsAAAKKEEAAAoo
RwAACoD0AAAEfvQAAAR7SAAACn70AAAEAigDAAAGbzQCAAYIbzwAAAaMPwAAAQhvNgAABm9VAAAG
jD8AAAFvAgIABm9JAAAKExACKAMAAAYREH5wAAAKbzkCAAYIbzYAAAZvVQAABhMROBcCAABzTgIA
BhMTERN+9QAABC0kFtAsAAABKCwAAArQAgAAAigsAAAKKEEAAAooQgAACoD1AAAEfvUAAAR7QwAA
Cn71AAAEfvYAAAQtQRZycwEAcBTQAgAAAigsAAAKGI05AAABEzoROhYfIRQoLQAACqIROhcWFCgt
AAAKohE6KDUAAAooOAAACoD2AAAEfvYAAAR7OQAACn72AAAE0CEAAAIoLAAACn73AAAELTQWcocB
AHDQAgAAAigsAAAKF405AAABEzsROxYWFCgtAAAKohE7KDoAAAooNgAACoD3AAAEfvcAAAR7NwAA
Cn73AAAEAigFAAAGbzQCAAYIbzYAAAZvUQAABow/AAABERGMPwAAAW8CAgAGbz0AAApvPgAACm9E
AAAKfRIBAAQIbzAAAAYRE/4GTwIABnMoAAAKKAMAACt+DQAABC0RFP4GIgAABnNjAAAKgA0AAAR+
DQAABCgFAAArKAYAACsTEhESKGYAAAo6mwAAAH74AAAELT8WcocBAHDQAgAAAigsAAAKGI05AAAB
EzwRPBYWFCgtAAAKohE8FxcUKC0AAAqiETwoZwAACihoAAAKgPgAAAR++AAABHtpAAAKfvgAAAQC
KAMAAAZvNAIABghvPAAABow/AAABERGMPwAAAW8CAgAGCG80AAAGb2AAAAoRD29qAAAKERJvawAA
CijRAQAGb2wAAAomEREXWBMREREIbzYAAAZvVwAABj7X/f//CG82AAAGCG88AAAGb1oAAAYIJW88
AAAGF1hvPQAABhEPF1gTDxEPCG80AAAGb2AAAApvXwAACj+D/P//OKgKAAACCG80AAAGEQsoFQAA
BhMUCG88AAAGExUUExYRFG9gAAAKb3QAAAoTPTj4CQAAET1vHgAACnQLAAABExcCCAhvNgAABm9R
AAAGF1gIbzYAAAZvVQAABghvNgAABm9VAAAGERdvdQAACigHAAArWCgRAAAGExgCCAhvNgAABm9R
AAAGF1gIbzYAAAZvVQAABhEXb3UAAAooBwAAK1gIbzYAAAZvVwAABigRAAAGEw4CCG80AAAGERcR
CxEEKBYAAAYTGQgRFW89AAAGFhMaOD4EAAARGH5wAAAKb/0BAAYmfvkAAAQtJBbQKAAAAigsAAAK
0AIAAAIoLAAACihBAAAKKEcAAAqA+QAABH75AAAEe0gAAAp++QAABAIoAwAABm80AgAGCG88AAAG
jD8AAAEIbzYAAAZvVQAABow/AAABbwICAAZvSQAAChMWAigDAAAGERZ+cAAACm85AgAGFhMbOKIA
AAARF291AAAKERuab3cAAAoTHH76AAAELT8WcocBAHDQAgAAAigsAAAKGI05AAABEzYRNhYWFCgt
AAAKohE2FxcUKC0AAAqiETYoZwAACihoAAAKgPoAAAR++gAABHtpAAAKfvoAAAQCKAMAAAZvNAIA
BghvPAAABow/AAABCG82AAAGb1UAAAYRG1iMPwAAAW8CAgAGERxvbAAACiYRGxdYExsRGxEXb3UA
AAooBwAAKz9L////EQ5+cAAACm/9AQAGJn77AAAELSQW0CgAAAIoLAAACtACAAACKCwAAAooQQAA
CihHAAAKgPsAAAR++wAABHtIAAAKfvsAAAQCKAMAAAZvNAIABghvPAAABow/AAABCG82AAAGb1UA
AAYRF291AAAKKAcAACtYjD8AAAFvAgIABm9JAAAKExYCKAMAAAYRFn5wAAAKbzkCAAYIbzYAAAZv
VQAABhMdOCYCAABzUAIABhMfER9+/AAABC0kFtAsAAABKCwAAArQAgAAAigsAAAKKEEAAAooQgAA
CoD8AAAEfvwAAAR7QwAACn78AAAEfv0AAAQtQRZycwEAcBTQAgAAAigsAAAKGI05AAABEzYRNhYf
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
OAAABm+HAAAKFjFAAigDAAAGCG84AAAGFm+IAAAKb0QAAAYIbzYAAAYougEABhMpAghvNgAABm9R
AAAGF1gIbzwAAAYRKQgoEwAABghvNgAABghvPAAABm9aAAAGCG86AAAGfhEAAAQtERT+BiYAAAZz
ewAACoARAAAEfhEAAAQoCAAAK2+AAAAKEz84dAQAABE/b4EAAAoTKgIIESpvPwAABigPAAAGEyt+
CQEABC0kFtAoAAACKCwAAArQAgAAAigsAAAKKEEAAAooRwAACoAJAQAEfgkBAAR7SAAACn4JAQAE
AigDAAAGbz8CAAYIbzwAAAYXWIw/AAABfnAAAApvAgIABm9JAAAKEw0RDSDn7///jDYAAAIWjDcA
AAJvDgIABiYRK35wAAAKb/0BAAYmfgoBAAQtJBbQKAAAAigsAAAK0AIAAAIoLAAACihBAAAKKEcA
AAqACgEABH4KAQAEe0gAAAp+CgEABAIoAwAABm80AgAGCG88AAAGjD8AAAEIbzYAAAZvVQAABow/
AAABbwICAAZvSQAAChMsAigDAAAGESx+cAAACm85AgAGESwg+O///yDS7///FoxMAAABFoxMAAAB
bycCAAYmEStv8gEABm8TAgAGEz044AIAABE9bx4AAAp0KAAAAhMtfgsBAAQtMRYfU9ACAAACKCwA
AAoXjTkAAAETNhE2FhYUKC0AAAqiETYoLgAACigvAAAKgAsBAAR+CwEABHswAAAKfgsBAAR+DAEA
BC0xFh8i0AIAAAIoLAAACheNOQAAARM2ETYWFhQoLQAACqIRNiguAAAKKDYAAAqADAEABH4MAQAE
ezcAAAp+DAEABH4NAQAELUEWcq0BAHAU0AIAAAIoLAAAChiNOQAAARM2ETYWHyEUKC0AAAqiETYX
FhQoLQAACqIRNig1AAAKKDgAAAqADQEABH4NAQAEezkAAAp+DQEABNAsAAABKCwAAAp+DgEABC1B
FnJzAQBwFNACAAACKCwAAAoYjTkAAAETNhE2Fh8hFCgtAAAKohE2FxYUKC0AAAqiETYoNQAACig4
AAAKgA4BAAR+DgEABHs5AAAKfg4BAATQIQAAAigsAAAKES1vJAIABm8+AAAKbz4AAApvPQAACm9A
AAAKOWIBAAB+DwEABC0kFtAsAAABKCwAAArQAgAAAigsAAAKKEEAAAooQgAACoAPAQAEfg8BAAR7
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
AAAGERRvrAAABhETEwsRByhmAAAKOvYAAABzGgAAChMMEQwRB28bAAAKEQxyqwIAcG8cAAAKEw0R
DRZvxAAAChMOEQ5vsAAACnIbAABwb7EAAApvFwAAChMPEQtzPgAABhMSERIRD28tAAAGERJzFAAA
Cm8xAAAGERJvsgAABhEObyAAAApvHQAAChMmK2ERJm8eAAAKdDAAAAETEBEQbyIAAAosShELb7EA
AAZvMAAABnNMAAAGExEREREQck8AAHBvIQAACm8XAAAKb0UAAAYREREQcl0AAHBvIQAACm8XAAAK
b0cAAAYREW8jAAAKESZvJAAACi2W3hURJnUpAAABEycRJywHESdvFgAACtwRCxMV3iUHF1gLBwZv
QQIABm8aAgAGbwACAAY+5vX//xQTFd4GJhQTFd4AERUqAABBTAAAAgAAAMYFAABvAAAANQYAABUA
AAAAAAAAAgAAAJUJAABuAAAAAwoAABUAAAAAAAAAAAAAAAAAAAA9CgAAPQoAAAYAAABAAAABEzAC
ADAAAAAQAAARAiiGAAAGCgYsJAZvqwAABm+hAAAGbzQAAAoDb6EAAAZvNAAACihLAAAKLAIXKhYq
EzACACcAAAARAAARAiiLAAAGCgYsGwIGKIwAAAYCBiiOAAAGAgYojQAABgIoiQAABhQqABMwAwCA
AAAAEgAAEQIoigAABgoGLBECezwAAARvqwAABgZvngAABh2NAQAAAQwIFnK5AgBwoggXAns9AAAE
oggYchcDAHCiCBkCezwAAARvqwAABm+dAAAGjD8AAAGiCBpyOwMAcKIIGwIoggAABqIIHHJbAwBw
oggopQAACgsHAiiAAAAGKLIBAAYqGzADAGkAAAATAAARcr8DAHACezwAAARvqwAABm+hAAAGclAE
AHAoTAAACgoGAiiAAAAGc8UAAAoLB2/GAAAKDCsPCBZvxwAACijQAQAGDd4iCG/IAAAKLeneCggs
BghvFgAACtzeCgcsBgdvFgAACtwWKgkqAAAAARwAAAIANAAbTwAKAAAAAAIALQAuWwAKAAAAABsw
CQDIAQAAFAAAEXOpAAAKCgIofAAABm9BAgAGCwc5ogEAAAdv+QEABm8AAgAGDBYNOIgBAAByVAQA
cAkXWIw/AAABcmQEAHAoyQAAChMEfmYBAAQtJR8Q0CgAAAIoLAAACtAKAAACKCwAAAooQQAACihH
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
AAQtJR8Q0CgAAAIoLAAACtAPAAACKCwAAAooQQAACihHAAAKgGsBAAR+awEABHtIAAAKfmsBAAQR
Bm80AgAGF4w/AAABEQmMPwAAAW8CAgAGb0kAAAoTCxELfnAAAAoRCm8jAgAGEQtvCgIABheMTAAA
AW9wAgAGEQkXWBMJERIXWBMSERIREY5pP2f///8SDyjvAAAKOqX+///eDhIP/hY1AAAbbxYAAArc
AijMAAAGAii1AAAGB35wAAAKfnAAAAp+cAAACn5wAAAKfnAAAAoXfnAAAAp+cAAACn5wAAAKfnAA
AAp+cAAACm94AgAGAii1AAAGF4xMAAABCAhvcgIABgZvYAIABgJ7VgAABCjSAQAGKgAAAEEcAAAC
AAAAcwEAAGIBAADVAgAADgAAAAAAAAAeAnteAAAEKiICA31eAAAEKgAAABswAgAdAAAAHAAAEQMC
KLsAAAZzxQAACgoGC94KBiwGBm8WAAAK3AcqAAAAARAAAAIADQAEEQAKAAAAABswAwD8AQAAHQAA
EQJz3gAABii6AAAGAii9AAAGb/MAAAoosAEABnP0AAAKCgZv2QAACnJdCQBwAii/AAAGKMwAAAoG
c8UAAAoLB2/GAAAKDDhwAQAAFg04XQEAAAgJb9MAAAoTBBEEbzQAAApy4AkAcG80AAAKKBgAAAos
GAIouQAABggRBG/1AAAKb3cAAApv0QAABhEEbzQAAApy/gkAcG80AAAKKBgAAAosGAIouQAABggR
BG/1AAAKb3cAAApv0wAABhEEbzQAAApyFAoAcG80AAAKKBgAAAosGAIouQAABggRBG/1AAAKb3cA
AApv1QAABhEEbzQAAApyJgoAcG80AAAKKBgAAAosGAIouQAABggRBG/1AAAKb3cAAApv1wAABhEE
bzQAAApyPAoAcG80AAAKKBgAAAosGAIouQAABggRBG/1AAAKb3cAAApv2QAABhEEbzQAAApyTgoA
cG80AAAKKBgAAAosGAIouQAABggRBG/1AAAKb3cAAApv2wAABhEEbzQAAApyYgoAcG80AAAKKBgA
AAosGAIouQAABggRBG/1AAAKb3cAAApv3QAABgkXWA0JCG/UAAAKP5f+//8Ib8gAAAo6hf7//94K
CCwGCG8WAAAK3N4KBywGB28WAAAK3AZv9gAACt4KBiwGBm8WAAAK3N4KJgIUKLoAAAbeACpBZAAA
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
AAAKfn0BAAQGbzQCAAYYjD8AAAEXjD8AAAFvAgIABglv0AAABm9sAAAKJn5+AQAELT8WcocBAHDQ
DwAAAigsAAAKGI05AAABExAREBYWFCgtAAAKohEQFxcUKC0AAAqiERAoZwAACihoAAAKgH4BAAR+
fgEABHtpAAAKfn4BAAQGbzQCAAYYjD8AAAEYjD8AAAFvAgIABglv0gAABm9sAAAKJn5/AQAELT8W
cocBAHDQDwAAAigsAAAKGI05AAABExERERYWFCgtAAAKohERFxcUKC0AAAqiEREoZwAACihoAAAK
gH8BAAR+fwEABHtpAAAKfn8BAAQGbzQCAAYYjD8AAAEZjD8AAAFvAgIABglv1AAABm9sAAAKJn6A
AQAELT8WcocBAHDQDwAAAigsAAAKGI05AAABExIREhYWFCgtAAAKohESFxcUKC0AAAqiERIoZwAA
CihoAAAKgIABAAR+gAEABHtpAAAKfoABAAQGbzQCAAYYjD8AAAEajD8AAAFvAgIABglv1gAABm9s
AAAKJn6BAQAELT8WcocBAHDQDwAAAigsAAAKGI05AAABExMRExYWFCgtAAAKohETFxcUKC0AAAqi
ERMoZwAACihoAAAKgIEBAAR+gQEABHtpAAAKfoEBAAQGbzQCAAYYjD8AAAEbjD8AAAFvAgIABglv
2AAABm9sAAAKJn6CAQAELSQW0CgAAAIoLAAACtAPAAACKCwAAAooQQAACihHAAAKgIIBAAR+ggEA
BHtIAAAKfoIBAAQGbz8CAAYYjD8AAAF+cAAACm8CAgAGb0kAAAoLB2/wAQAGJnLGBgBwAii5AAAG
b9IAAAYozAAACgxz5gAACgIIKMcAAAZvxgAACigQAAArKBEAACsTBBEEOeEAAAARBH5hAAAELREU
/gbPAAAGc+gAAAqAYQAABH5hAAAEKBIAACsoCgAAKygMAAArEwUYEwYRBW/pAAAKExQ4hAAAABIU
KOoAAAoTB36DAQAELT8WcocBAHDQDwAAAigsAAAKGI05AAABExURFRYWFCgtAAAKohEVFxcUKC0A
AAqiERUoZwAACihoAAAKgIMBAAR+gwEABHtpAAAKfoMBAAQGbzQCAAYRBow/AAABHIw/AAABbwIC
AAYRB29sAAAKJhEGF1gTBhIUKO8AAAo6cP///94OEhT+FjUAABtvFgAACtwqARAAAAIAYgeX+QcO
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
AAoo+wAACoClAQAEfqUBAAR7/AAACn6lAQAEB292AgAGEQ5vegEABm9/AgAGbwABAAoTEAIGBxEQ
AigJAQAGAigHAQAGEQ8oHgEABiYSMigsAQAKOnD////eDhIy/hZGAAAbbxYAAArcc24BAAYTGBEY
AigTAQAGb2kBAAYRGANvZQEABhEYKC0BAApvawEABhEYExEHb3QCAAZ+pgEABC0kFtAnAAACKCwA
AArQEgAAAigsAAAKKEEAAAoo+wAACoCmAQAEfqYBAAR7/AAACn6mAQAEB292AgAGAigPAQAGb1kB
AAZvfwIABm8AAQAKExICKA8BAAYHAigPAQAGb1kBAAYowAEABm9gAQAGAigPAQAGb18BAAYgzaAB
ADNGERIHcwwAAAYTExESByi9AQAGERJvKwIABnL0DQBwKMwAAAoHKMMBAAYREii+AQAGERNvEgAA
BgIREQYHKCABAAY4sAAAAAIoDwEABm9fAQAGIMygAQAzDwIREQYHKCABAAY4jwAAAAIoDwEABm9f
AQAGIM6gAQAzfQIoBwEABm/zAAAKKLABAAZz9AAAChMUERRv2QAAChESB3OFAAAGExcRFxEUb4EA
AAYRFxMVERV7PAAABCwqERIHcwwAAAYTFhEWERV7PAAABG8QAAAGERVviAAABiYCEREGByggAQAG
ERRv9gAACt4MERQsBxEUbxYAAArcBxeMTAAAAQIoCQEABn5wAAAKb3ICAAYCBgcoLgEABgIWKBYB
AAYqAAAAARwAAAIADA2Xow0OAAAAAAIA+A5aUg8MAAAAABswAgArAAAAJwAAERYKA29lAgAGKN8A
AAoSACj6AAAGJgYoLgEACgsHLAYHby8BAAreAybeACoAARAAAAAAFQASJwADQAAAARMwBADPAAAA
KAAAEXIIDgBwCgZyERMAcANyUAQAcCjSAAAKCgYCKAcBAAZzEQEACgsHF28wAQAKB28SAQAKDAhv
2gAACi0ICG/VAAAKFCoIb8gAAAomc48BAAYTBBEECHI5EwBwb/UAAAoo0AEABm+MAQAGEQQIckcT
AHBv9QAACijQAQAGb4YBAAYRBAhyXRMAcG/1AAAKb3cAAApvigEABhEECHJzEwBwb/UAAAoo0AEA
Bm+OAQAGEQQIcpETAHBv9QAACijQAQAGb4gBAAYRBA0Ib9UAAAoJKh4CKBAAAAoqSgNvOAEABgJ7
pwEABCgYAAAKKgAAEzAFABYCAAApAAAREgD+FRYAAAIDF41CAAABEwYRBhYfLJ0RBm9TAAAKCwcT
BxYTCDi8AQAAEQcRCJoMCHLbAQBwbzEBAAo5iAEAABQTBHOAAgAGEwURBQgXjUIAAAETCREJFh89
nREJb1MAAAooGAAAKxeNQgAAARMKEQoWHyedEQpvMwEACheNQgAAARMLEQsWHyedEQtvUAAACn2n
AQAEAigLAQAGOQ0BAAACKAsBAAYRBC0PEQX+BoECAAZzNAEAChMEEQQoGQAAKw0JOcwAAAAIclAE
AHBvhQAACiwXEgAlKFMBAAZyUAQAcCjMAAAKKFQBAAYIclAEAHBvNQEACixPEgAlKFMBAAYTDBuN
LAAAARMNEQ0WEQyiEQ0XCW84AQAGohENGHLbAQBwohENGQlvPAEABqIRDRpyoxMAcKIRDSjlAAAK
KFQBAAY4mAAAABIAJShTAQAGEw4bjSwAAAETDxEPFhEOohEPFwlvOAEABqIRDxhy2wEAcKIRDxkJ
bzwBAAaiEQ8acpUBAHCiEQ8o5QAACihUAQAGK0wSACUoUwEABghylQEAcChMAAAKKFQBAAYrMhIA
JShTAQAGCHKVAQBwKEwAAAooVAEABisYEgAlKFMBAAYIcpUBAHAoTAAACihUAQAGEQgXWBMIEQgR
B45pPzn+//8SABIAKFMBAAYXjUIAAAETEBEQFh8snREQb1AAAAooVAEABgYqAAAbMAEAFwAAABoA
ABEDb3cAAAooNgEACiYXCt4FJhYK3gAGKgABEAAAAAAAABAQAAVAAAABJgIfPSgaAAArKgAAGzAJ
AFAHAAAqAAARcwIBAAoKcwMBAAoLcwQBAAomBW8rAgAGcqkTAHAozAAACgwGDgVv8wAACm8FAQAK
BiVvBgEACnK3EwBwKMwAAApvBQEACgZykwEAcHKTAQBwcpMBAHAVbwcBAAoHDwYoUwEABgYWGRdv
CAEACgVvNAIABm/0AQAGJgVvNAIABm/1AQAGJgVvKQIABhYNOI4AAAB+qAEABC0lHxDQKAAAAigs
AAAK0BIAAAIoLAAACihBAAAKKEcAAAqAqAEABH6oAQAEe0gAAAp+qAEABAVvNAIABheMPwAAAQkX
WIw/AAABbwICAAZvSQAAChMEEQQHbwkBAAoJjD8AAAFvCgEACm8LAQAKbyUCAAYRBG8KAgAGF4xM
AAABb3ACAAYJF1gNCQdvCQEACm8NAQAKP2H///8FchMUAHB+cAAACm89AgAGEwURBQd+cAAACn5w
AAAKb/4BAAYmBW9BAgAGb/kBAAZv8AEABiYHbzsBAAoGbzwBAAoCBCgfAQAGBAgoGAEABhMGDwYo
UwEABheNQgAAARMSERIWHyydERJvUwAACn6CAAAELREU/gYvAQAGc5AAAAqAggAABH6CAAAEKAsA
ACsoGwAAKxMHEQcTExYTFDgHAwAAERMRFJoTCBkTCRYTCjjoAgAAfqkBAAQtJR8Q0CgAAAIoLAAA
CtASAAACKCwAAAooQQAACihHAAAKgKkBAAR+qQEABHtIAAAKfqkBAAQRBm80AgAGEQmMPwAAARiM
PwAAAW8CAgAGb0kAAAoTC36qAQAELTEWH1PQEgAAAigsAAAKF405AAABExURFRYWFCgtAAAKohEV
KC4AAAooLwAACoCqAQAEfqoBAAR7MAAACn6qAQAEfqsBAAQtPBYfI9ASAAACKCwAAAoYjTkAAAET
FhEWFhYUKC0AAAqiERYXGBQoLQAACqIRFigxAAAKKLYAAAqAqwEABH6rAQAEe7cAAAp+qwEABBEL
byQCAAYUb7gAAApvQAAACjnSAQAAfqwBAAQtMRYfU9ASAAACKCwAAAoXjTkAAAETFxEXFhYUKC0A
AAqiERcoLgAACigvAAAKgKwBAAR+rAEABHswAAAKfqwBAAR+rQEABC08Fh8N0BIAAAIoLAAAChiN
OQAAARMYERgWFxQoLQAACqIRGBcWFCgtAAAKohEYKDEAAAooMgAACoCtAQAEfq0BAAR7MwAACn6t
AQAEEQgXjUIAAAETGREZFh89nREZb1MAAAoWmhELbyQCAAZvPwAACm9AAAAKOQ8BAAB+rgEABC0l
HxDQKAAAAigsAAAK0BIAAAIoLAAACihBAAAKKEcAAAqArgEABH6uAQAEe0gAAAp+rgEABBEGbzQC
AAYRCYw/AAABGYw/AAABbwICAAZvSQAACnIZFABwbxYCAAYRCBeNQgAAARMaERoWHz2dERpvUwAA
CheaF41CAAABExsRGxYfJ50RG28zAQAKF41CAAABExwRHBYfJ50RHG9QAAAKEwx+rwEABC0lHxDQ
KAAAAigsAAAK0BIAAAIoLAAACihBAAAKKEcAAAqArwEABH6vAQAEe0gAAAp+rwEABBEGbzQCAAYR
CYw/AAABGYw/AAABbwICAAZvSQAAChEMbyUCAAYrBRcTCisNEQkXWBMJEQo5Ef3//xEUF1gTFBEU
EROOaT/u/P//BHImDQBwKBgBAAYTDRENOUECAAAYEw4WEw84LwIAAH6wAQAELSUfENAoAAACKCwA
AArQEgAAAigsAAAKKEEAAAooRwAACoCwAQAEfrABAAR7SAAACn6wAQAEEQ1vNAIABhEOjD8AAAEY
jD8AAAFvAgIABm9JAAAKExB+sQEABC0xFh9T0BIAAAIoLAAACheNOQAAARMdER0WFhQoLQAACqIR
HSguAAAKKC8AAAqAsQEABH6xAQAEezAAAAp+sQEABH6yAQAELTwWHyPQEgAAAigsAAAKGI05AAAB
Ex4RHhYWFCgtAAAKohEeFxgUKC0AAAqiER4oMQAACii2AAAKgLIBAAR+sgEABHu3AAAKfrIBAAQR
EG8kAgAGFG+4AAAKb0AAAAo5GQEAAH6zAQAELTEWH1PQEgAAAigsAAAKF405AAABEx8RHxYWFCgt
AAAKohEfKC4AAAooLwAACoCzAQAEfrMBAAR7MAAACn6zAQAEfrQBAAQtPBYfDdASAAACKCwAAAoY
jTkAAAETIBEgFhYUKC0AAAqiESAXFxQoLQAACqIRICgxAAAKKGgAAAqAtAEABH60AQAEe2kAAAp+
tAEABBEQbyQCAAYFbysCAAZvbAAACm9AAAAKLGx+tQEABC0lHxDQKAAAAigsAAAK0BIAAAIoLAAA
CihBAAAKKEcAAAqAtQEABH61AQAEe0gAAAp+tQEABBENbzQCAAYRDow/AAABGYw/AAABbwICAAZv
SQAACg8GKFMBAAZvJQIABisFFxMPKw0RDhdYEw4RDznK/f//AxZvXgIABhcTEd4GJhYTEd4AEREq
QRwAAAAAAAAjAAAAJAcAAEcHAAAGAAAAQAAAARswBABUAgAAKwAAEQNvdgIABm99AgAGEwk4HgIA
ABEJbx4AAAp0JwAAAgoGfnAAAApvLwIABn62AQAELSQW0FcAAAEoLAAACtASAAACKCwAAAooQQAA
Cii5AAAKgLYBAAR+tgEABHu6AAAKfrYBAAQGfnAAAApvOwIABm++AAAKb78AAAoTCjiNAQAAfrcB
AAQtJR8Q0FYAAAIoLAAACtASAAACKCwAAAooQQAACihBAQAKgLcBAAR+twEABHtCAQAKfrcBAAQR
Cm8eAAAKb0MBAAoLfrgBAAQtJBbQLAAAASgsAAAK0BIAAAIoLAAACihBAAAKKEIAAAqAuAEABH64
AQAEe0MAAAp+uAEABAdvgwIABm9EAAAKDAgXjUIAAAETCxELFh8hnRELb1MAAAoNCRaaEwQJFpos
KgkWmh9dKBoAACssHnJQBABwEQQRBB9db0UBAAoXWG9GAQAKKMwAAAoTBAMRBHJQBABwcpMBAHBv
1gAACigYAQAGEwURBTmUAAAAEQVvQQIABhMGEQZvGgIABm8AAgAGEwwSDChWAAAKEwcRBm8aAgAG
bwACAAYXMAdyHRQAcBMHEQZv+QEABm8AAgAGEw0SDShWAAAKEwgHHI0sAAABEw4RDhZyUAQAcKIR
DhcRBW8rAgAGohEOGHIhFABwohEOGREHohEOGnIzFABwohEOGxEIohEOKOUAAApvhAIABhEKbyQA
AAo6Z/7//94VEQp1KQAAARMPEQ8sBxEPbxYAAArcEQlvJAAACjrW/f//3hURCXUpAAABExARECwH
ERBvFgAACtwqQTQAAAIAAAB7AAAAoAEAABsCAAAVAAAAAAAAAAIAAAANAAAAMQIAAD4CAAAVAAAA
AAAAAB4CKBAAAAoqegJ7uwEABAJ7vAEABAJ7vQEABAJ7ugEABCglAQAGKgATMAUA1gAAACwAABFz
hQIABgsHA328AQAEBwV9vQEABAcCfbsBAAQCKAMBAAYtASoHe7wBAAQCKA8BAAZvWQEABm9nAQAG
B365AQAELSQW0CcAAAIoLAAACtASAAACKCwAAAooQQAACij7AAAKgLkBAAR+uQEABHv8AAAKfrkB
AAQHe70BAARvdgIABgIoDwEABm9ZAQAGb38CAAZvAAEACn26AQAEAgd7ugEABAd7vQEABCghAQAG
B/4GhgIABnNIAQAKc0kBAAoKBhZvSgEACgZvSwEACiDQBwAAKEwBAAoqAAAbMBAA0AQAAC0AABEX
Cji9BAAAA280AgAGcjcUAHB+TQEACiC97///jFoAAAIYjFsAAAIXjFwAAAIXFoxMAAABfk0BAAp+
TQEACm8IAgAGCwc5eAQAAH6+AQAELSQW0CwAAAEoLAAACtASAAACKCwAAAooQQAACihCAAAKgL4B
AAR+vgEABHtDAAAKfr4BAAR+vwEABC1LFnJPFABwFNASAAACKCwAAAoZjTkAAAETDBEMFhYUKC0A
AAqiEQwXGRQoLQAACqIRDBgZFCgtAAAKohEMKDUAAAooTwEACoC/AQAEfr8BAAR7UAEACn6/AQAE
fsABAAQtOhbQEgAAAigsAAAKGI05AAABEw0RDRYWFCgtAAAKohENFxkUKC0AAAqiEQ0omQAACihR
AQAKgMABAAR+wAEABHtSAQAKfsABAAR+wQEABC1AFnKTAgBwFNASAAACKCwAAAoYjTkAAAETDhEO
FhYUKC0AAAqiEQ4XGRQoLQAACqIRDig1AAAKKLsAAAqAwQEABH7BAQAEe7wAAAp+wQEABH7CAQAE
LTUWcskBAHAU0BIAAAIoLAAACheNOQAAARMPEQ8WFhQoLQAACqIRDyg1AAAKKDYAAAqAwgEABH7C
AQAEezcAAAp+wgEABAdvJAIABm89AAAKHzpvvQAAChdvUwEACnJfFABwcpMBAHBvVAEACm9EAAAK
DAgfISgaAAArOYICAAAIF41CAAABExAREBYfIZ0REG9TAAAKFpoEKMMBAAYNCQgXjUIAAAETERER
Fh8hnRERb1MAAAoXmn5wAAAKbz0CAAYTBH7DAQAELSQW0CwAAAEoLAAACtASAAACKCwAAAooQQAA
CihCAAAKgMMBAAR+wwEABHtDAAAKfsMBAAR+xAEABC1AGHJjFABwFNASAAACKCwAAAoYjTkAAAET
EhESFhcUKC0AAAqiERIXFhQoLQAACqIREig1AAAKKCEBAAqAxAEABH7EAQAEeyIBAAp+xAEABAJ+
xQEABC01FnLJAQBwFNASAAACKCwAAAoXjTkAAAETExETFhYUKC0AAAqiERMoNQAACig2AAAKgMUB
AAR+xQEABHs3AAAKfsUBAAQRBG8kAgAGbz0AAApvIwEACm9EAAAKEwURBShmAAAKOj4BAAARBSgT
AQAKOTIBAAADbykCAAYDfnAAAApvLgIABn7GAQAELSUfENCAAAABKCwAAArQEgAAAigsAAAKKEEA
AAooVgEACoDGAQAEfsYBAAR7VwEACn7GAQAEB28RAgAGb1kBAAprEwZ+xwEABC0lHxDQgAAAASgs
AAAK0BIAAAIoLAAACihBAAAKKFYBAAqAxwEABH7HAQAEe1cBAAp+xwEABAdvIAIABm9ZAQAKaxMH
IgAAekMTCCIAAKBCEwkRBShbAQAKEwoRChYWKFwBAAoTCxELb10BAAprEwgRC29eAQAKaxMJ3gwR
CywHEQtvFgAACtzeDBEKLAcRCm8WAAAK3N4DJt4AA28yAgAGEQUWFxEGEQcRCBEJb4oCAAYmB3LM
DQBwbyUCAAYHbw8CAAYoYgEACoyIAAABb48CAAYHcswNAHBvJQIABgdvDwIABihiAQAKjIgAAAFv
jwIABt4QJgdykwEAcG8lAgAG3gIWCgY6Pfv//94DJt4AKkF8AAACAAAAJQQAABYAAAA7BAAADAAA
AAAAAAACAAAAGgQAAC8AAABJBAAADAAAAAAAAAAAAAAAEQQAAEYAAABXBAAAAwAAAEAAAAEAAAAA
SgAAAGoEAAC0BAAADgAAAEAAAAEAAAAAAAAAAMwEAADMBAAAAwAAAEAAAAEbMAMAZwAAAC4AABED
KGYAAAotVHKFFABwA3JQBABwKEwAAAoCKAcBAAZzEQEACgoGbxIBAAoLKw8HFm/HAAAKb3cAAAoM
3ikHb8gAAAot6d4KBywGB28WAAAK3N4KBiwGBm8WAAAK3BQM3gUmFAzeAAgqAAEoAAACACsAG0YA
CgAAAAACACQALlIACgAAAAAAAAAAYGAABUAAAAEeAigQAAAKKkoCe90BAAQCe9wBAAQoJAEABioA
EzAEAF4BAAAvAAARBRZUAigDAQAGLQEqBCgXAAArLQEqcmAGAHBz2wAACijcAAAKKN0AAAp0KQAA
AgoGb2UCAAYo3wAACgUo+gAABiYGFm9eAgAGBm9bAgAGA29nAgAGCwQTCBYTCTjqAAAAEQgRCZoM
c5ACAAYTBxEHAn3dAQAEEQdzbgEABhMGEQZy2xQAcG9pAQAGEQYDb2UBAAYRBigtAQAKb2sBAAYR
BghvZwEABhEGcpMBAHBvbQEABhEGfdwBAAR+2wEABC0kFtAnAAACKCwAAArQEgAAAigsAAAKKEEA
AAoo+wAACoDbAQAEftsBAAR7/AAACn7bAQAEB292AgAGCG9/AgAGbwABAAoNCSjEAQAGEwQRBBcY
b/8BAAYmEQf+BpECAAZzSAEACnNJAQAKEwURBRZvSgEAChEFb0sBAAog0AcAAChMAQAKEQkXWBMJ
EQkRCI5pPwv///8CBgcoLgEABioAABMwBQCJAAAAMAAAEQMdjSwAAAELBxYCKP0AAAaiBxcDb2YB
AAaiBxhy9RQAcKIHGQIoBQEABqIHGnL1FABwogcbKC0BAAoMEgJy+RQAcChlAQAKogccch0VAHCi
ByjlAAAKb20BAAYoZgEACnNnAQAKCgYDb2wBAAYoaAEACm9pAQAKAgMoKwEABiCIEwAAKEwBAAoq
AAAAGzAFAKABAAAxAAARAxyNLAAAAQsHFgIo/QAABqIHFwNvZgEABqIHGHL1FABwogcZAigFAQAG
ogcacvUUAHCiBxsoLQEACgwSAnL5FABwKGUBAAqiByjlAAAKb20BAAYCKBEBAAZvNAAACnInFQBw
KBgAAAosGwMlb2wBAAZyLxUAcCjMAAAKb20BAAY4iwAAAAIoEQEABm80AAAKcjkVAHAoGAAACiwY
AyVvbAEABnIdFQBwKMwAAApvbQEABitcAigRAQAGbzQAAApyQRUAcCgYAAAKLBgDJW9sAQAGclAG
AHAozAAACm9tAQAGKy0CKBEBAAZvNAAACnJNFQBwKBgAAAosFgMlb2wBAAZyVxUAcCjMAAAKb20B
AAYFOYkAAAAEb3YCAAZvfQIABg0rMwlvHgAACnQnAAACCgZvKwIABgVvKwIABihLAAAKLBQCKA8B
AAZvYQEABi0HBhhvMQIABglvJAAACi3F3hQJdSkAAAETBBEELAcRBG8WAAAK3N4DJt4AAgUDb2wB
AAYCKBEBAAYoJgEABiYCAygrAQAGIIgTAAAoTAEACioBHAAAAgAiAT9hARQAAAAAAAAWAWF3AQNA
AAABAzADAG4AAAAAAAAABW80AAAKcicVAHAoGAAACiwJAgMEKCcBAAYqBW80AAAKcjkVAHAoGAAA
CiwJAgMEKCoBAAYqBW80AAAKckEVAHAoGAAACiwJAgMEKCgBAAYqBW80AAAKck0VAHAoGAAACiwJ
AgMEKCkBAAYqFioAABswCgA2AAAAGgAAEQMWBH5wAAAKfnAAAAp+cAAACn5wAAAKfnAAAAp+cAAA
Cn5wAAAKb0UCAAYXCt4FJhYK3gAGKgAAARAAAAAAAAAvLwAFQAAAARswDQCiAAAAMgAAEXJgBgBw
c9sAAAoo3AAACijdAAAKdCkAAAIKBm9bAgAGF4w/AAABb2cCAAYmBm9bAgAGFow/AAABb2kCAAZv
dgIABgN+cAAACm97AgAGBm9bAgAGFow/AAABb2kCAAYEfnAAAAp+cAAACn5wAAAKfnAAAAp+cAAA
Chd+cAAACn5wAAAKfnAAAAp+cAAACn5wAAAKb3gCAAYXC94FJhYL3gAHKgAAARAAAAAAAACbmwAF
QAAAARswAQALAAAAGgAAERcK3gUmFgreAAYqAAEQAAAAAAAABAQABUAAAAEbMAUACgEAADMAABF+
6wEABC0kFtAoAAACKCwAAArQEgAAAigsAAAKKEEAAAooRwAACoDrAQAEfusBAAR7SAAACn7rAQAE
A280AgAGF4w/AAABF4w/AAABbwICAAZvSQAACgp+7AEABC0kFtAoAAACKCwAAArQEgAAAigsAAAK
KEEAAAooRwAACoDsAQAEfuwBAAR7SAAACn7sAQAEA280AgAGA29BAgAGbxoCAAZvAAIABow/AAAB
A29BAgAGb/kBAAZvAAIABow/AAABbwICAAZvSQAACgsDBgdvPQIABgwDKMQBAAYMCBcYb/8BAAYm
KGYBAApzZwEACg0JBChoAQAKb2kBAAoXEwTeBiYWEwTeABEEKgAAQRwAAAAAAAAAAAAAAQEAAAEB
AAAGAAAAQAAAARswBAC+AAAANAAAEQNvbAEABihuAQAKCh8NjQEAAAEMCBZyYxUAcKIIFwIoDwEA
Bm9VAQAGjD8AAAGiCBhytxUAcKIIGQNvZgEABqIIGnLrFQBwoggbBqIIHHIbFgBwoggdA29oAQAG
oggeckUWAHCiCB8JA29qAQAGDRIDcmsWAHAoZQEACqIIHwpylxYAcKIIHwsCKA0BAAaiCB8MclAE
AHCiCCilAAAKAigHAQAGcxEBAAoLB29vAQAKJt4KBywGB28WAAAK3CoAAAEQAAACAKoACbMACgAA
AAAbMAEAGwAAABoAABEDKBMBAAosDwMoFAEAChcK3gcmFgreAhYqBioAARAAAAAACAAKEgAFQAAA
ARswAgBLAAAAJQAAEQNvdgIABm99AgAGDCseCG8eAAAKdCcAAAIKBm8rAgAGBChLAAAKLQQGC94d
CG8kAAAKLdreEQh1KQAAAQ0JLAYJbxYAAArcFCoHKgABEAAAAgAMACo2ABEAAAAAIgIDKBoBAAYq
HgJ7gwAABCoiAgN9gwAABCoeAnuEAAAEKiICA32EAAAEKh4Ce4UAAAQqIgIDfYUAAAQqHgJ7hgAA
BCoiAgN9hgAABCoeAnuHAAAEKiICA32HAAAEKh4Ce4gAAAQqIgIDfYgAAAQqHgJ7iQAABCoiAgN9
iQAABCoeAnuKAAAEKiICA32KAAAEKh4Ce4sAAAQqIgIDfYsAAAQqHgJ7jAAABCoiAgN9jAAABCoe
AnuNAAAEKiICA32NAAAEKh4Ce44AAAQqIgIDfY4AAAQqAAAAGzAEALwAAAA1AAARAihAAQAGOasA
AABytxYAcAoDb9gAAAotBgNv2QAACgYajQEAAAENCRYCKEABAAaMPwAAAaIJFwIoQgEABow/AAAB
ogkYAihEAQAGogkZAihGAQAGogkopwAACgoGA3PFAAAKCwdvxgAACgwIb8gAAAomAggWb8cAAAoo
cAEAChMEEgRyHxcAcChlAQAKKD0BAAYCAig8AQAGKD8BAAbeCggsBghvFgAACtzeCgcsBgdvFgAA
CtzeAybeACoBKAAAAgBrADWgAAoAAAAAAgBkAEisAAoAAAAAAAAAALi4AANAAAABHgIoEAAACioe
AnuPAAAEKiICA32PAAAEKh4Ce5AAAAQqIgIDfZAAAAQqHgIoEAAACioeAnuRAAAEKiICA32RAAAE
Kh4Ce5IAAAQqIgIDfZIAAAQqHgJ7kwAABCoiAgN9kwAABCoeAnuUAAAEKiICA32UAAAEKh4Ce5UA
AAQqIgIDfZUAAAQqHgJ7lgAABCoiAgN9lgAABCoeAnuXAAAEKiICA32XAAAEKh4Ce5gAAAQqIgID
fZgAAAQqHgJ7mQAABCoiAgN9mQAABCoeAnuaAAAEKiICA32aAAAEKh4CKBAAAAoqHgJ7mwAABCoi
AgN9mwAABCoeAnucAAAEKiICA32cAAAEKh4Ce50AAAQqIgIDfZ0AAAQqHgJ7ngAABCoiAgN9ngAA
BCoeAnufAAAEKiICA32fAAAEKh4CKBAAAAoqHgJ7oAAABCoiAgN9oAAABCoeAnuhAAAEKiICA32h
AAAEKh4Ce6IAAAQqIgIDfaIAAAQqHgJ7owAABCoiAgN9owAABCoeAigQAAAKKh4Ce6QAAAQqIgID
faQAAAQqHgJ7pQAABCoiAgN9pQAABCoeAnumAAAEKiICA32mAAAEKh4Ce6cAAAQqIgIDfacAAAQq
HgJ7qAAABCoiAgN9qAAABCoeAnupAAAEKiICA32pAAAEKh4CKBAAAAoqHgJ7qgAABCoiAgN9qgAA
BCoeAnurAAAEKiICA32rAAAEKh4Ce6wAAAQqIgIDfawAAAQqHgJ7rQAABCoiAgN9rQAABCoeAnuu
AAAEKiICA32uAAAEKh4CKBAAAAoqHgJ7rwAABCoiAgN9rwAABCoeAnuwAAAEKiICA32wAAAEKh4C
e7EAAAQqIgIDfbEAAAQqHgJ7sgAABCoiAgN9sgAABCoeAnuzAAAEKiICA32zAAAEKh4CKBAAAAoq
HgJ7tAAABCoiAgN9tAAABCoeAnu1AAAEKiICA321AAAEKh4Ce7YAAAQqIgIDfbYAAAQqHgJ7twAA
BCoiAgN9twAABCoeAnu4AAAEKiICA324AAAEKh4Ce7kAAAQqIgIDfbkAAAQqHgJ7ugAABCoiAgN9
ugAABCoeAnu7AAAEKiICA327AAAEKh4Ce7wAAAQqIgIDfbwAAAQqHgJ7vQAABCoiAgN9vQAABCoe
AigQAAAKKgATMAQAgAAAADYAABFykwEAcAoCF41CAAABDQkWHzudCW9TAAAKCwcTBBYTBSs9EQQR
BZoMCG80AAAKcjUXAHBvMQEACi0fCG80AAAKckcXAHBvMQEACi0NBghyWxcAcChMAAAKChEFF1gT
BREFEQSOaTK7BheNQgAAARMGEQYWHzudEQZvUAAACgoGKhMwAwAjAAAANwAAEShxAQAKChIA/hZe
AAABb3cAAApyXxcAcHL1FABwb9YAAAoqABswAgAcAAAAOAAAEQIDc8UAAAoKBm9vAQAKJt4KBiwG
Bm8WAAAK3CoBEAAAAgAIAAkRAAoAAAAAEzAJADEHAAA5AAARc3IBAAoKciYNAHACKMMBAAYLBy0C
FCoXDBgNOAkHAAB+7QEABC0lHxDQKAAAAigsAAAK0B8AAAIoLAAACihBAAAKKEcAAAqA7QEABH7t
AQAEe0gAAAp+7QEABAdvNAIABgmMPwAAARiMPwAAAW8CAgAGb0kAAAoTBH7uAQAELTEWH1PQHwAA
AigsAAAKF405AAABEwYRBhYWFCgtAAAKohEGKC4AAAooLwAACoDuAQAEfu4BAAR7MAAACn7uAQAE
fu8BAAQtPBYfI9AfAAACKCwAAAoYjTkAAAETBxEHFhYUKC0AAAqiEQcXGBQoLQAACqIRBygxAAAK
KLYAAAqA7wEABH7vAQAEe7cAAAp+7wEABBEEbyQCAAYUb7gAAApvQAAACjlLBQAAc3QAAAYTBX7w
AQAELSUfENAoAAACKCwAAArQHwAAAigsAAAKKEEAAAooRwAACoDwAQAEfvABAAR7SAAACn7wAQAE
B280AgAGCYw/AAABF4w/AAABbwICAAZvSQAAChMEEQV+8QEABC0kFtAsAAABKCwAAArQHwAAAigs
AAAKKEEAAAooQgAACoDxAQAEfvEBAAR7QwAACn7xAQAEEQRvJAIABm9EAAAKb10AAAZ+8gEABC0l
HxDQKAAAAigsAAAK0B8AAAIoLAAACihBAAAKKEcAAAqA8gEABH7yAQAEe0gAAAp+8gEABAdvNAIA
BgmMPwAAARiMPwAAAW8CAgAGb0kAAAoTBBEFfvMBAAQtJBbQLAAAASgsAAAK0B8AAAIoLAAACihB
AAAKKEIAAAqA8wEABH7zAQAEe0MAAAp+8wEABBEEbyQCAAZvRAAACm9fAAAGfvQBAAQtJR8Q0CgA
AAIoLAAACtAfAAACKCwAAAooQQAACihHAAAKgPQBAAR+9AEABHtIAAAKfvQBAAQHbzQCAAYJjD8A
AAEZjD8AAAFvAgIABm9JAAAKEwQRBX71AQAELSQW0CwAAAEoLAAACtAfAAACKCwAAAooQQAACihC
AAAKgPUBAAR+9QEABHtDAAAKfvUBAAQRBG8kAgAGb0QAAApvYwAABn72AQAELSUfENAoAAACKCwA
AArQHwAAAigsAAAKKEEAAAooRwAACoD2AQAEfvYBAAR7SAAACn72AQAEB280AgAGCYw/AAABGow/
AAABbwICAAZvSQAAChMEEQV+9wEABC0kFtAsAAABKCwAAArQHwAAAigsAAAKKEEAAAooQgAACoD3
AQAEfvcBAAR7QwAACn73AQAEEQRvJAIABm9EAAAKb2UAAAZ++AEABC0lHxDQKAAAAigsAAAK0B8A
AAIoLAAACihBAAAKKEcAAAqA+AEABH74AQAEe0gAAAp++AEABAdvNAIABgmMPwAAARuMPwAAAW8C
AgAGb0kAAAoTBBEFfvkBAAQtJBbQLAAAASgsAAAK0B8AAAIoLAAACihBAAAKKEIAAAqA+QEABH75
AQAEe0MAAAp++QEABBEEbyQCAAZvRAAACm9hAAAGfvoBAAQtJR8Q0CgAAAIoLAAACtAfAAACKCwA
AAooQQAACihHAAAKgPoBAAR++gEABHtIAAAKfvoBAAQHbzQCAAYJjD8AAAEcjD8AAAFvAgIABm9J
AAAKEwQRBX77AQAELSQW0CwAAAEoLAAACtAfAAACKCwAAAooQQAACihCAAAKgPsBAAR++wEABHtD
AAAKfvsBAAQRBG8kAgAGb0QAAApvaQAABn78AQAELSUfENAoAAACKCwAAArQHwAAAigsAAAKKEEA
AAooRwAACoD8AQAEfvwBAAR7SAAACn78AQAEB280AgAGCYw/AAABHYw/AAABbwICAAZvSQAAChME
fv0BAAQtMRYfU9AfAAACKCwAAAoXjTkAAAETCBEIFhYUKC0AAAqiEQgoLgAACigvAAAKgP0BAAR+
/QEABHswAAAKfv0BAAR+/gEABC08Fh8j0B8AAAIoLAAAChiNOQAAARMJEQkWFhQoLQAACqIRCRcY
FCgtAAAKohEJKDEAAAootgAACoD+AQAEfv4BAAR7twAACn7+AQAEEQRvJAIABhRvuAAACm9AAAAK
LE0RBX7/AQAELSQW0CwAAAEoLAAACtAfAAACKCwAAAooQQAACihCAAAKgP8BAAR+/wEABHtDAAAK
fv8BAAQRBG8kAgAGb0QAAApvZwAABgYRBW9zAQAKOLEAAAB+AAIABC0xFh9T0B8AAAIoLAAACheN
OQAAARMKEQoWFhQoLQAACqIRCiguAAAKKC8AAAqAAAIABH4AAgAEezAAAAp+AAIABH4BAgAELTwW
Hw3QHwAAAigsAAAKGI05AAABEwsRCxYWFCgtAAAKohELFxgUKC0AAAqiEQsoMQAACii2AAAKgAEC
AAR+AQIABHu3AAAKfgECAAQRBG8kAgAGFG+4AAAKb0AAAAosBBYMKwoJF1gNCDrx+P//BioAAAAT
MA0AQAIAADoAABFzFAAACgoCAyjDAQAGCwc5KgIAAAdvQQIABm/5AQAGbwACAAYMFw04CwIAAAZz
TAAABhMEEQR+AgIABC0kFtAsAAABKCwAAArQHwAAAigsAAAKKEEAAAooQgAACoACAgAEfgICAAR7
QwAACn4CAgAEfgMCAAQtNRZyyQEAcBTQHwAAAigsAAAKF405AAABEwURBRYWFCgtAAAKohEFKDUA
AAooNgAACoADAgAEfgMCAAR7NwAACn4DAgAEfgQCAAQtNBZyhwEAcNAfAAACKCwAAAoXjTkAAAET
BhEGFhYUKC0AAAqiEQYoOgAACig2AAAKgAQCAAR+BAIABHs3AAAKfgQCAAQHbzQCAAYXjD8AAAEJ
jD8AAAFvAgIABm89AAAKbz0AAApvRAAACm9FAAAGEQR+BQIABC0kFtAsAAABKCwAAArQHwAAAigs
AAAKKEEAAAooQgAACoAFAgAEfgUCAAR7QwAACn4FAgAEfgYCAAQtNRZyyQEAcBTQHwAAAigsAAAK
F405AAABEwcRBxYWFCgtAAAKohEHKDUAAAooNgAACoAGAgAEfgYCAAR7NwAACn4GAgAEfgcCAAQt
NBZyhwEAcNAfAAACKCwAAAoXjTkAAAETCBEIFhYUKC0AAAqiEQgoOgAACig2AAAKgAcCAAR+BwIA
BHs3AAAKfgcCAAQHbzQCAAYXjD8AAAEJjD8AAAFvAgIABm89AAAKbz0AAApvRAAACm9HAAAGEQRv
IwAACgkXWA0JCD/u/f//BiobMAQARQAAADsAABECcmMXAHADb1UAAAYLEgEodAEACih1AQAKb9YA
AApybRcAcANvVwAABgwSAih0AQAKKHUBAApv1gAACgreBSYCCt4ABioAAAABEAAAAAAAAD4+AAVA
AAABGzARAN4DAAA8AAARcjcBAHADKMMBAAYKBi0HFA3dxgMAAAZvQQIABgsYDDieAwAAfggCAAQt
MRYfU9AfAAACKCwAAAoXjTkAAAETBBEEFhYUKC0AAAqiEQQoLgAACigvAAAKgAgCAAR+CAIABHsw
AAAKfggCAAR+CQIABC08Fh8N0B8AAAIoLAAAChiNOQAAARMFEQUWFxQoLQAACqIRBRcWFCgtAAAK
ohEFKDEAAAooMgAACoAJAgAEfgkCAAR7MwAACn4JAgAEAm80AAAKfgoCAAQtNRZyYwEAcBTQHwAA
AigsAAAKF405AAABEwYRBhYWFCgtAAAKohEGKDUAAAooNgAACoAKAgAEfgoCAAR7NwAACn4KAgAE
fgsCAAQtQRZycwEAcBTQHwAAAigsAAAKGI05AAABEwcRBxYfIRQoLQAACqIRBxcWFCgtAAAKohEH
KDUAAAooOAAACoALAgAEfgsCAAR7OQAACn4LAgAE0CEAAAIoLAAACn4MAgAELTQWcocBAHDQHwAA
AigsAAAKF405AAABEwgRCBYWFCgtAAAKohEIKDoAAAooNgAACoAMAgAEfgwCAAR7NwAACn4MAgAE
Bm80AgAGCIw/AAABF4w/AAABbwICAAZvPQAACm8+AAAKbz0AAApvPwAACm9AAAAKOdABAAB+DQIA
BC0kFtAnAAACKCwAAArQHwAAAigsAAAKKEEAAAoo+wAACoANAgAEfg0CAAR7/AAACn4NAgAEfg4C
AAQtTBZyrAoAcBTQHwAAAigsAAAKGY05AAABEwkRCRYfIRQoLQAACqIRCRcWFCgtAAAKohEJGBcU
KC0AAAqiEQkoNQAACij9AAAKgA4CAAR+DgIABHv+AAAKfg4CAATQHwAAAigsAAAKfg8CAAQtNRZy
YwEAcBTQHwAAAigsAAAKF405AAABEwoRChYWFCgtAAAKohEKKDUAAAooNgAACoAPAgAEfg8CAAR7
NwAACn4PAgAEfhACAAQtQRZycwEAcBTQHwAAAigsAAAKGI05AAABEwsRCxYfIRQoLQAACqIRCxcW
FCgtAAAKohELKDUAAAooOAAACoAQAgAEfhACAAR7OQAACn4QAgAE0CEAAAIoLAAACn4RAgAELTQW
cocBAHDQHwAAAigsAAAKF405AAABEwwRDBYWFCgtAAAKohEMKDoAAAooNgAACoARAgAEfhECAAR7
NwAACn4RAgAEBm80AgAGCIw/AAABGYw/AAABbwICAAZvPQAACm8+AAAKbz0AAAoDb/8AAApvAAEA
Cg3eHggXWAwIB28aAgAGbwACAAY+Ufz//xQN3gUmFA3eAAkqAABBHAAAAAAAAAAAAADXAwAA1wMA
AAUAAABAAAABGzAJAIwCAAA9AAARfhICAAQtJBbQJwAAAigsAAAK0B8AAAIoLAAACihBAAAKKPsA
AAqAEgIABH4SAgAEe/wAAAp+EgIABANvdgIABgJvKwIABm9/AgAGbwABAAoQAAJvQQIABm8aAgAG
bwACAAYmFgo4CwIAAH4TAgAELSQW0CgAAAIoLAAACtAfAAACKCwAAAooQQAACihHAAAKgBMCAAR+
EwIABHtIAAAKfhMCAAQCbzQCAAYYjD8AAAEGF1iMPwAAAW8CAgAGb0kAAAoLfhQCAAQtMRYfU9Af
AAACKCwAAAoXjTkAAAETBREFFhYUKC0AAAqiEQUoLgAACigvAAAKgBQCAAR+FAIABHswAAAKfhQC
AAQHFP4BFv4BEwYRBixgfhUCAAQtOx4Y0B8AAAIoLAAAChiNOQAAARMHEQcWFxQoLQAACqIRBxcW
FCgtAAAKohEHKDEAAAoodgEACoAVAgAEfhUCAAR7dwEACn4VAgAEEQYHbwwCAAZveQEACisHEQaM
TAAAAW9AAAAKOekAAAB+FgIABC0kFtAoAAACKCwAAArQHwAAAigsAAAKKEEAAAooRwAACoAWAgAE
fhYCAAR7SAAACn4WAgAEAm80AgAGGIw/AAABBhdYjD8AAAFvAgIABm9JAAAKDH4XAgAELSQW0CgA
AAIoLAAACtAfAAACKCwAAAooQQAACihHAAAKgBcCAAR+FwIABHtIAAAKfhcCAAQCbzQCAAYCb0EC
AAZvGgIABm8AAgAGjD8AAAEGF1iMPwAAAW8CAgAGb0kAAAoNAggJbz0CAAYTBBEEbxoCAAZvAAIA
BhcxCgcRBBZv7gEABibeAybeAAYXWAoGAm9BAgAGb/kBAAZvAAIABj/f/f//KgEQAAAAAFMCG24C
A0AAAAEbMAYA1QEAAD4AABEDbysCAAYEKMMBAAY5vgEAAANvQQIABm/3AQAGF1kDb0ECAAZv+QEA
Bm8AAgAGWAoXCzi6AAAAfiQCAAQtJR8Q0CgAAAIoLAAACtAfAAACKCwAAAooQQAACihHAAAKgCQC
AAR+JAIABHtIAAAKfiQCAAQCbzcCAAYHjD8AAAF+cAAACm8CAgAGb0kAAAp+JQIABC0lHxDQKAAA
AigsAAAK0B8AAAIoLAAACihBAAAKKEcAAAqAJQIABH4lAgAEe0gAAAp+JQIABANvNwIABgeMPwAA
AX5wAAAKbwICAAZvSQAACm/6AQAGb/sBAAYHF1gLBwY+P////xcMOLoAAAB+JgIABC0lHxDQKAAA
AigsAAAK0B8AAAIoLAAACihBAAAKKEcAAAqAJgIABH4mAgAEe0gAAAp+JgIABAJvPwIABgiMPwAA
AX5wAAAKbwICAAZvSQAACn4nAgAELSUfENAoAAACKCwAAArQHwAAAigsAAAKKEEAAAooRwAACoAn
AgAEficCAAR7SAAACn4nAgAEA28/AgAGCIw/AAABfnAAAApvAgIABm9JAAAKbxgCAAZvGQIABggX
WAwIA29BAgAGbxoCAAZvAAIABj4w////3gMm3gAqAAAAQRwAAAAAAAAAAAAA0QEAANEBAAADAAAA
QAAAARMwEQDiAQAAPwAAERcKOMMBAAB+KAIABC0uFh9T0B8AAAIoLAAACheNOQAAAQsHFhYUKC0A
AAqiByguAAAKKC8AAAqAKAIABH4oAgAEezAAAAp+KAIABH4pAgAELTgWHw3QHwAAAigsAAAKGI05
AAABDAgWFxQoLQAACqIIFxYUKC0AAAqiCCgxAAAKKDIAAAqAKQIABH4pAgAEezMAAAp+KQIABANv
NAAACn4qAgAELTIWcmMBAHAU0B8AAAIoLAAACheNOQAAAQ0JFhYUKC0AAAqiCSg1AAAKKDYAAAqA
KgIABH4qAgAEezcAAAp+KgIABH4rAgAELUEWcnMBAHAU0B8AAAIoLAAAChiNOQAAARMEEQQWHyEU
KC0AAAqiEQQXFhQoLQAACqIRBCg1AAAKKDgAAAqAKwIABH4rAgAEezkAAAp+KwIABNAhAAACKCwA
AAp+LAIABC00FnKHAQBw0B8AAAIoLAAACheNOQAAARMFEQUWFhQoLQAACqIRBSg6AAAKKDYAAAqA
LAIABH4sAgAEezcAAAp+LAIABAJvNAIABheMPwAAAQaMPwAAAW8CAgAGbz0AAApvPgAACm89AAAK
bz8AAApvQAAACiwCBioGF1gKBgJvQQIABm/5AQAGbwACAAY+J/7//xYqAAATMBEA4gEAAD8AABEE
b1UAAAYKOMgBAAB+LQIABC0uFh9T0B8AAAIoLAAACheNOQAAAQsHFhYUKC0AAAqiByguAAAKKC8A
AAqALQIABH4tAgAEezAAAAp+LQIABH4uAgAELTgWHw3QHwAAAigsAAAKGI05AAABDAgWFxQoLQAA
CqIIFxYUKC0AAAqiCCgxAAAKKDIAAAqALgIABH4uAgAEezMAAAp+LgIABANvNAAACn4vAgAELTIW
cmMBAHAU0B8AAAIoLAAACheNOQAAAQ0JFhYUKC0AAAqiCSg1AAAKKDYAAAqALwIABH4vAgAEezcA
AAp+LwIABH4wAgAELUEWcnMBAHAU0B8AAAIoLAAAChiNOQAAARMEEQQWHyEUKC0AAAqiEQQXFhQo
LQAACqIRBCg1AAAKKDgAAAqAMAIABH4wAgAEezkAAAp+MAIABNAhAAACKCwAAAp+MQIABC00FnKH
AQBw0B8AAAIoLAAACheNOQAAARMFEQUWFhQoLQAACqIRBSg6AAAKKDYAAAqAMQIABH4xAgAEezcA
AAp+MQIABAJvNAIABgRvUQAABow/AAABBow/AAABbwICAAZvPQAACm8+AAAKbz0AAApvPwAACm9A
AAAKLAIGKgYXWAoGBG9XAAAGPiz+//8WKgAAEzAJADkBAABAAAARFgo4GgEAAH4yAgAELSQW0CgA
AAIoLAAACtAfAAACKCwAAAooQQAACihHAAAKgDICAAR+MgIABHtIAAAKfjICAAQCbzQCAAYYjD8A
AAEGF1iMPwAAAW8CAgAGb0kAAAoLfjMCAAQtLhYfU9AfAAACKCwAAAoXjTkAAAEMCBYWFCgtAAAK
oggoLgAACigvAAAKgDMCAAR+MwIABHswAAAKfjMCAAQHFP4BFv4BDQksX340AgAELTseGNAfAAAC
KCwAAAoYjTkAAAETBBEEFhcUKC0AAAqiEQQXFhQoLQAACqIRBCgxAAAKKHYBAAqANAIABH40AgAE
e3cBAAp+NAIABAkHbwwCAAZveQEACisGCYxMAAABb0AAAAosAhcqBhdYCgYCb0ECAAZv+QEABm8A
AgAGP9D+//8WKgAAABswBwC3AAAAQQAAEX41AgAELSQW0CgAAAIoLAAACtAfAAACKCwAAAooQQAA
CihHAAAKgDUCAAR+NQIABHtIAAAKfjUCAAQCbzQCAAYDjD8AAAEEjD8AAAFvAgIABm9JAAAKCn42
AgAELS4WH1PQHwAAAigsAAAKF405AAABDAgWFhQoLQAACqIIKC4AAAooLwAACoA2AgAEfjYCAAR7
MAAACn42AgAEBm8MAgAGb0AAAAosBBcL3gneBSYWC94CFioHKgABEAAAAAAAAK6uAAVAAAABGzAF
ADIDAABCAAARAgMovwEABjkdAQAAGAoCKLsBAAYsAhkKfjcCAAQtJBbQKAAAAigsAAAK0B8AAAIo
LAAACihBAAAKKEcAAAqANwIABH43AgAEe0gAAAp+NwIABAJvNAIABgaMPwAAAQJvQQIABm/5AQAG
bwACAAaMPwAAAW8CAgAGb0kAAAoLfjgCAAQtJBbQKAAAAigsAAAK0B8AAAIoLAAACihBAAAKKEcA
AAqAOAIABH44AgAEe0gAAAp+OAIABAJvNAIABgJvQQIABm8aAgAGbwACAAaMPwAAAQJvQQIABm/5
AQAGbwACAAaMPwAAAW8CAgAGb0kAAAoMAm9BAgAGbxoCAAZvAAIABgY+KAIAAAIHCG89AgAGDQlv
BgIABiC+7///jEEAAAJvBAIABiYqAm8yAgAGb4gCAAYTCSsVEQlvHgAACnRfAAACEwQRBG+MAgAG
EQlvJAAACi3i3hURCXUpAAABEwoRCiwHEQpvFgAACtx+OQIABC0kFtBXAAABKCwAAArQHwAAAigs
AAAKKEEAAAoouQAACoA5AgAEfjkCAAR7ugAACn45AgAEAn5wAAAKbzUCAAZvvgAACm+/AAAKEwsr
UX46AgAELSUfENB0AAACKCwAAArQHwAAAigsAAAKKEEAAAoogwEACoA6AgAEfjoCAAR7hAEACn46
AgAEEQtvHgAACm+FAQAKEwURBW+VAgAGJhELbyQAAAotpt4VEQt1KQAAARMMEQwsBxEMbxYAAArc
fjsCAAQtJBbQKAAAAigsAAAK0B8AAAIoLAAACihBAAAKKEcAAAqAOwIABH47AgAEe0gAAAp+OwIA
BAJvNAIABheMPwAAAQJvQQIABm/3AQAGjD8AAAFvAgIABm9JAAAKEwZ+PAIABC0kFtAoAAACKCwA
AArQHwAAAigsAAAKKEEAAAooRwAACoA8AgAEfjwCAAR7SAAACn48AgAEAm80AgAGAm9BAgAGbxoC
AAZvAAIABow/AAABAm9BAgAGb/kBAAZvAAIABow/AAABbwICAAZvSQAAChMHAhEGEQdvPQIABhMI
EQhvBgIABiC+7///jEEAAAJvBAIABibeAybeACoAAEFMAAACAAAANgEAACIAAABYAQAAFQAAAAAA
AAACAAAAvgEAAF4AAAAcAgAAFQAAAAAAAAAAAAAAKQEAAAUCAAAuAwAAAwAAAEAAAAEbMAUA8gAA
AAQAABF+PQIABC0kFtAoAAACKCwAAArQHwAAAigsAAAKKEEAAAooRwAACoA9AgAEfj0CAAR7SAAA
Cn49AgAEAm80AgAGF4w/AAABAm9BAgAGb/cBAAaMPwAAAW8CAgAGb0kAAAoKAm80AgAGHwt+TQEA
Cm8cAgAGCwIGB289AgAGDAh+cAAACm/9AQAGJn4+AgAELSQW0CgAAAIoLAAACtAfAAACKCwAAAoo
QQAACihHAAAKgD4CAAR+PgIABHtIAAAKfj4CAAQDbzQCAAYXjD8AAAEXjD8AAAFvAgIABm9JAAAK
DQMJfnAAAApvOQIABt4DJt4AKgAAARAAAAAAAADu7gADQAAAARMwEAD+AQAAQwAAEXJpAgBwAyjD
AQAGCgY56gEAABYLOM0BAAB+SgIABC0uFh9T0B8AAAIoLAAACheNOQAAAQwIFhYUKC0AAAqiCCgu
AAAKKC8AAAqASgIABH5KAgAEezAAAAp+SgIABH5LAgAELTgWHw3QHwAAAigsAAAKGI05AAABDQkW
FhQoLQAACqIJFxcUKC0AAAqiCSgxAAAKKGgAAAqASwIABH5LAgAEe2kAAAp+SwIABH5MAgAELTUW
cmMBAHAU0B8AAAIoLAAACheNOQAAARMEEQQWFhQoLQAACqIRBCg1AAAKKDYAAAqATAIABH5MAgAE
ezcAAAp+TAIABH5NAgAELUEWcnMBAHAU0B8AAAIoLAAAChiNOQAAARMFEQUWHyEUKC0AAAqiEQUX
FhQoLQAACqIRBSg1AAAKKDgAAAqATQIABH5NAgAEezkAAAp+TQIABNAhAAACKCwAAAp+TgIABC00
FnKHAQBw0B8AAAIoLAAACheNOQAAARMGEQYWFhQoLQAACqIRBig6AAAKKDYAAAqATgIABH5OAgAE
ezcAAAp+TgIABAZvNAIABgcXWIw/AAABG4w/AAABbwICAAZvPQAACm8+AAAKbz0AAAoCbysCAAZv
NAAACm9sAAAKb0AAAAosAhcqBxdYCwcGb0ECAAZvGgIABm8AAgAGPx3+//8WKgAAGzAOAI0DAABE
AAARciYNAHACKMMBAAYKBjmeAQAAFws4gQEAAH5PAgAELTEWH1PQHwAAAigsAAAKF405AAABEwQR
BBYWFCgtAAAKohEEKC4AAAooLwAACoBPAgAEfk8CAAR7MAAACn5PAgAEflACAAQtPBYfDdAfAAAC
KCwAAAoYjTkAAAETBREFFhYUKC0AAAqiEQUXFxQoLQAACqIRBSgxAAAKKGgAAAqAUAIABH5QAgAE
e2kAAAp+UAIABH5RAgAELUEWcnMBAHAU0B8AAAIoLAAAChiNOQAAARMGEQYWHyEUKC0AAAqiEQYX
FhQoLQAACqIRBig1AAAKKDgAAAqAUQIABH5RAgAEezkAAAp+UQIABNAhAAACKCwAAAp+UgIABC00
FnKHAQBw0B8AAAIoLAAACheNOQAAARMHEQcWFhQoLQAACqIRByg6AAAKKDYAAAqAUgIABH5SAgAE
ezcAAAp+UgIABAZvNAIABgeMPwAAARiMPwAAAW8CAgAGbz0AAApvPgAACgNvbAAACm9AAAAKLAsg
zKABAA3d9QEAAAcXWAsHBm9BAgAGbxoCAAZvAAIABj5p/v//cmkCAHACKMMBAAYKBjmbAQAAFww4
fgEAAH5TAgAELTEWH1PQHwAAAigsAAAKF405AAABEwgRCBYWFCgtAAAKohEIKC4AAAooLwAACoBT
AgAEflMCAAR7MAAACn5TAgAEflQCAAQtPBYfDdAfAAACKCwAAAoYjTkAAAETCREJFhYUKC0AAAqi
EQkXFxQoLQAACqIRCSgxAAAKKGgAAAqAVAIABH5UAgAEe2kAAAp+VAIABH5VAgAELUEWcnMBAHAU
0B8AAAIoLAAAChiNOQAAARMKEQoWHyEUKC0AAAqiEQoXFhQoLQAACqIRCig1AAAKKDgAAAqAVQIA
BH5VAgAEezkAAAp+VQIABNAhAAACKCwAAAp+VgIABC00FnKHAQBw0B8AAAIoLAAACheNOQAAARML
EQsWFhQoLQAACqIRCyg6AAAKKDYAAAqAVgIABH5WAgAEezcAAAp+VgIABAZvNAIABgiMPwAAARuM
PwAAAW8CAgAGbz0AAApvPgAACgNvbAAACm9AAAAKLAggzqABAA3eSAgXWAwIBm9BAgAGbxoCAAZv
AAIABj5s/v//A3L0DQBwKMwAAAoCKMMBAAYKBiwIIM2gAQAN3hHeCSYgzKABAA3eBiDMoAEAKgkq
AAAAQRwAAAAAAAAAAAAAfAMAAHwDAAAJAAAAQAAAARswAwAoAAAARQAAEQJvdwAACgoGb4gBAAoD
MgkGFgNviQEACgoGC94JJnKTAQBwC94AByoBEAAAAAAAAB0dAAlAAAABEzAHAJIAAABGAAARAwIo
wwEABgoGLX9+VwIABC0kFtAnAAACKCwAAArQHwAAAigsAAAKKEEAAAoo+wAACoBXAgAEflcCAAR7
/AAACn5XAgAEAm92AgAGfnAAAAp+cAAACn5wAAAKfnAAAApvegIABm8AAQAKCwcDHxkowQEABm8s
AgAGBC0HBxZvMQIABgdvKQIABgcqBm8pAgAGBioAABswAgBXAAAAJQAAERQKA292AgAGb30CAAYM
KyoIbx4AAAp0JwAAAgsHbysCAAZvNAAACgJvNAAACigYAAAKLAQHCisKFAoIbyQAAAotzt4RCHUp
AAABDQksBglvFgAACtwGKgABEAAAAgAOADZEABEAAAAARgJvFwEACnKTAQBwKEsAAAoqRgJvFwEA
CnKTAQBwKEsAAAoqRgJvFwEACnKTAQBwKEsAAAoqRgJvFwEACnKTAQBwKEsAAAoqIg8AKG8BAAYq
Ig8AKHEBAAYqNg8AKG8BAAZviAEACioiDwAobwEABioiDwAocQEABioAABswEQBuBAAARwAAEQJv
QQIABn5wAAAKfnAAAAoXfnAAAAp+cAAACm/sAQAGCnONAQAKC3ONAQAKDAYXjUIAAAETEBEQFh86
nREQb1MAAAooBgAAKxeNQgAAARMREREWHySdERFvUwAACn6+AAAELREU/gbFAQAGc5AAAAqAvgAA
BH6+AAAEKAsAACsoGwAAKw0HEg7+FRkAAAISDgkWmihwAQAGEg4JF5oojgEACihyAQAGEQ5vjwEA
CgYXjUIAAAETEhESFh86nRESb1MAAAooHAAAKxeNQgAAARMTERMWHySdERNvUwAACn6/AAAELREU
/gbGAQAGc5AAAAqAvwAABH6/AAAEKAsAACsoGwAAKxMECBIP/hUZAAACEg8RBBaaKHABAAYSDxEE
F5oojgEACihyAQAGEQ9vjwEACgJ+cAAACn5wAAAKFoxMAAABfnAAAAp+cAAACn5wAAAKfnAAAAp+
cAAACn5wAAAKfnAAAAp+cAAACn5wAAAKfnAAAAp+cAAACn5wAAAKfnAAAApvQwIABnNZAAAKJn5Y
AgAELSQW0FcAAAEoLAAACtAfAAACKCwAAAooQQAACii5AAAKgFgCAAR+WAIABHu6AAAKflgCAAQC
fnAAAApvNQIABm++AAAKb78AAAoTFDhlAQAAflkCAAQtJR8Q0HQAAAIoLAAACtAfAAACKCwAAAoo
QQAACiiDAQAKgFkCAAR+WQIABHuEAQAKflkCAAQRFG8eAAAKb4UBAAoTBREFb5cCAAZ+cAAACn5w
AAAKF35wAAAKfnAAAApv7AEABhMGEQYXjUIAAAETFREVFh8knREVb1MAAAp+wAAABC0RFP4GxwEA
BnOQAAAKgMAAAAR+wAAABCgLAAArKBsAACsTBwcSCP4VGQAAAhIIEQcWmihwAQAGEggRBxeaKI4B
AAoocgEABhEIb48BAAoRBW+TAgAGfnAAAAp+cAAAChd+cAAACn5wAAAKb+wBAAYTBhEGF41CAAAB
ExYRFhYfJJ0RFm9TAAAKfsEAAAQtERT+BsgBAAZzkAAACoDBAAAEfsEAAAQoCwAAKygbAAArEwcI
Egn+FRkAAAISCREHFpoocAEABhIJEQcXmiiOAQAKKHIBAAYRCW+PAQAKERRvJAAACjqP/v//3hUR
FHUpAAABExcRFywHERdvFgAACtwHfsIAAAQtERT+BskBAAZzlAEACoDCAAAEfsIAAAQoHQAAK37D
AAAELREU/gbKAQAGc5UBAAqAwwAABH7DAAAEKB4AACsoHwAAKxMKCH7EAAAELREU/gbLAQAGc5UB
AAqAxAAABH7EAAAEKCAAACt+xQAABC0RFP4GzAEABnOUAQAKgMUAAAR+xQAABCghAAArKCIAACsT
GBIYKG8BAAYTCwh+xgAABC0RFP4GzQEABnOVAQAKgMYAAAR+xgAABCggAAArKCIAACsTDAISCihv
AQAGEgoocQEABow/AAABKG4AAAoRCxIMKHEBAAaMPwAAAShuAAAKbz0CAAYTDRENKgAAQRwAAAIA
AADgAQAAeAEAAFgDAAAVAAAAAAAAABMwBAAZAAAASAAAEQNQb5cBAAoKBgRvmAEACgNQBRRvmQEA
CioeAigQAAAKKgAAABswAQAVAAAASQAAEQJvdwAACiiOAQAKCt4FJhYK3gAGKgAAAAEQAAAAAAAA
Dg4ABUAAAAEbMAEAGQAAAEoAABECb3cAAAoomgEACgreCSZykwEAcAreAAYqAAAAARAAAAAAAAAO
DgAJQAAAARswAQAWAAAASwAAEQIoLgEACgoGLAYGby8BAAreAybeACoAAAEQAAAAAAAAEhIAA0AA
AAEbMAIAPwAAAEwAABECc5sBAAoK0FcAABsoLAAACgNznAEACnOdAQAKCwcGb54BAAp0VwAAGwwI
Dd4PBiwGBm8WAAAK3CYUDd4ACSoAARwAAAIABwAnLgAKAAAAAAAAAAA4OAAFQAAAARswAQAdAAAA
TQAAERIA/hUQAAABAm93AAAKKDYBAAoL3gUmBgveAAcqAAAAARAAAAAACAAOFgAFQAAAARswAQAQ
AAAAGgAAEQIonwEACgreBSYWCt4ABioBEAAAAAAAAAkJAAVAAAABGzACAD0AAAAaAAARAm+gAQAK
bzQAAApydxcAcCgYAAAKLRcCb6ABAApvNAAACnKBFwBwKBgAAAosBBcK3gkWCt4FJhYK3gAGKgAA
AAEQAAAAAAAANjYABUAAAAETMAIADwAAAEoAABECb3cAAAoXKNkBAAYKBioAEzACAA8AAABKAAAR
Am93AAAKFyjaAQAGCgYqABMwBACLAAAATgAAESihAQAKAm+iAQAKC3KFFwBwDAMsIHOjAQAKDQko
oQEACghvogEACm+kAQAKCglvpQEACisMKKEBAAoIb6IBAAoKc6YBAAoTBBEEBm+nAQAKEQQYb6gB
AAoRBBhvqQEAChEEb6oBAAoTBREFBxYHjmlvqwEAChMGEQRvrAEAChEGFhEGjmkorQEACioAEzAE
AIYAAABOAAARAiiuAQAKC3KFFwBwDAMsIHOjAQAKDQkooQEACghvogEACm+kAQAKCglvpQEACisM
KKEBAAoIb6IBAAoKc6YBAAoTBBEEBm+nAQAKEQQYb6gBAAoRBBhvqQEAChEEb68BAAoTBREFBxYH
jmlvqwEAChMGEQRvrAEACiihAQAKEQZvsAEACioAABswBgABAQAATwAAEXPPAQAGCnOxAQAKCziM
AAAAAm+XAQAKb7IBAAoWmijdAAAKDANvswEACg0JLGgJb2AAAApvdAAAChMHKzkRB28eAAAKdAsA
AAETBAYSAhEEb3UAAAoWmm93AAAKAxEEb3UAAAoWmm93AAAKb/UAAAoUb84BAAYRB28kAAAKLb7e
FREHdSkAAAETCBEILAcRCG8WAAAK3AcIb7QBAAoDb8gAAAo6af///3O1AQAKEwUHb7YBAAoTCSsm
EgkotwEAChMGEQURBtBaAAAbKCwAAAoouAEACqVaAAAbb7kBAAoSCSi6AQAKLdHeDhIJ/hZZAAAb
bxYAAArcA2/VAAAKEQUqAAAAARwAAAIAOwBGgQAVAAAAAAIAtwAz6gAOAAAAABswBgD7AAAATwAA
EXPPAQAGCnOxAQAKCziMAAAAAm+XAQAKb7IBAAoWmijdAAAKDANvswEACg0JLGgJb2AAAApvdAAA
ChMHKzkRB28eAAAKdAsAAAETBAYSAhEEb3UAAAoWmm93AAAKAxEEb3UAAAoWmm93AAAKb/UAAAoU
b84BAAYRB28kAAAKLb7eFREHdSkAAAETCBEILAcRCG8WAAAK3AcIb7QBAAoDb8gAAAo6af///3O1
AQAKEwUHb7YBAAoTCSsmEgkotwEAChMGEQURBtBaAAAbKCwAAAoouAEACqVaAAAbb7kBAAoSCSi6
AQAKLdHeDhIJ/hZZAAAbbxYAAArcEQUqAAEcAAACADsARoEAFQAAAAACALcAM+oADgAAAAAbMAYA
+wAAAE8AABFzzwEABgpzsQEACgs4jAAAAAJvlwEACm+yAQAKFpoo3QAACgwDb7MBAAoNCSxoCW9g
AAAKb3QAAAoTBys5EQdvHgAACnQLAAABEwQGEgIRBG91AAAKFppvdwAACgMRBG91AAAKFppvdwAA
Cm/1AAAKFG/OAQAGEQdvJAAACi2+3hURB3UpAAABEwgRCCwHEQhvFgAACtwHCG+0AQAKA2/IAAAK
Omn///9ztQEAChMFB2+2AQAKEwkrJhIJKLcBAAoTBhEFEQbQWgAAGygsAAAKKLgBAAqlWgAAG2+5
AQAKEgkougEACi3R3g4SCf4WWQAAG28WAAAK3BEFKgABHAAAAgA7AEaBABUAAAAAAgC3ADPqAA4A
AAAAHgIoEAAACioTMAIALQAAAFAAABF+xwAABC0gcp8XAHDQIgAAAigsAAAKb7wBAApzvQEACgoG
gMcAAAR+xwAABCoafsgAAAQqHgKAyAAABCoafskAAAQqLnPjAQAGgMkAAAQqHgIovwEACioeAigQ
AAAKKh4Cb1sBAAYqHgJvVwEABipyA29XAQAGAntdAgAEKBgAAAosBwNvWwEABioWKh4Cb1kBAAYq
GzAGAEwEAABRAAARFgoCAijCAQAKb8MBAApyERgAcG/EAQAKb8UBAApvdwAACn3KAAAEAgIowgEA
Cm/DAQAKci8YAHBvxAEACm/FAQAKb3cAAAp9ywAABAICKMIBAApvwwEACnJRGABwb8QBAApvxQEA
Cm93AAAKH3wfLG/GAQAKcnEYAHBykwEAcG/WAAAKfcwAAAQCAijCAQAKb8MBAApyeRgAcG/EAQAK
b8UBAApvdwAACn3NAAAEAgIowgEACm/DAQAKcpEYAHBvxAEACm/FAQAKb3cAAAp9zgAABAICKMIB
AApvwwEACnKrGABwb8QBAApvxQEACm93AAAKfc8AAAQCAijCAQAKb8MBAApyyxgAcG/EAQAKb8UB
AApvdwAACn3QAAAEAnLvGABwKOYBAAYLAnvQAAAEclwGAHAoGAAACjmhAAAAB2/zAAAKKLABAAZz
9AAACgwIb9kAAAoCe84AAAQIB3PBAAAGDQlvwgAABiwSCW/JAAAGJgl7VgAABCjSAQAG3ckCAAAT
BAl7VgAABCjSAQAGAijCAQAKb8cBAAoWcg8ZAHARBG/IAQAKcicZAHARBG/JAQAKKEwAAAp+ygEA
ChZvywEACiYCKMIBAAoXb8wBAArddgIAAAgsBghvFgAACtwCe84AAARykwEAcCgYAAAKLC4CKHEB
AAoTDxIP/hZeAAABb3cAAApyXxcAcHL1FABwb9YAAApvzQEACn3OAAAEcisZAHACe8wAAARyUAQA
cChMAAAKB3MRAQAKEwURBW8SAQAKEwZzzgEAChEGKCMAACsoJAAAKxMHBwJ7zwAABHP5AAAGEwgR
CBEHKCUAACtvEAEABhEIAnvOAAAEbw4BAAYRCAJ7zQAABG8GAQAGEQhvFwEABgJ7ygAABB95HzFv
xgEACnKBFwBwKBgAAAosCBEIF28CAQAGAnvLAAAEH3kfMW/GAQAKcoEXAHAoGAAACiwIEQgXbwQB
AAYRB37RAAAELREU/gboAQAGc88BAAqA0QAABH7RAAAEKCYAACt+0gAABC0RFP4G6QEABnPQAQAK
gNIAAAR+0gAABCgnAAArKAoAACsoGwAAKxMJEQkTEBYTESsYERAREZoTChEIEQoSAG8ZAQAGEREX
WBMREREREI5pMuARCG8BAQAGOpAAAAARCG8DAQAGOYQAAAARCRMSFhMTK3MUEwxzmAIABhMNEQ0R
EhETmn1dAgAEEQcRDC0PEQ3+BpkCAAZzzwEAChMMEQwoJgAAK37TAAAELREU/gbqAQAGc9ABAAqA
0wAABH7TAAAEKCcAACsoGwAAKxMLEQgRDXtdAgAEEQsSAG8jAQAGERMXWBMTERMREo5pMoUCKMIB
AAoWb8wBAAreSxMOBijSAQAGAijCAQAKb8cBAAoWcg8ZAHARDm/IAQAKcicZAHARDm/JAQAKKEwA
AAp+ygEAChZvywEACiYCKMIBAAoXb8wBAAreACpBTAAAAAAAAGMBAAAfAAAAggEAAFMAAABAAAAB
AgAAAE8BAACGAAAA1QEAAAoAAAAAAAAAAAAAAAIAAAD+AwAAAAQAAEsAAABAAAABGzAGAHYAAABS
AAARAijCAQAKb9EBAAoDb9IBAAoKBm/TAQAKda8AAAELB2/UAQAKdQ0AAAEMCBME3kQNAijCAQAK
b8cBAAoWcg8ZAHAJb8gBAApyJxkAcAlvyQEACihMAAAKfsoBAAoWb8sBAAomAijCAQAKF2/MAQAK
3gAUKhEEKgAAARAAAAAAAAAvLwBCQAAAAR4CKNUBAAoqAAAAALQAAADOyu++AQAAAJEAAABsU3lz
dGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwg
Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5S
ZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQAB
AAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABMggAAI34AALiCAACYZwAAI1N0cmluZ3MAAAAA
UOoAAIAZAAAjVVMA0AMBABAAAAAjR1VJRAAAAOADAQAsLAAAI0Jsb2IAAAAAAAAAAgAAAVc/oh0J
DwAAAPolMwAWAAABAAAAvAAAAIIAAABdAgAAmQIAAC8CAAAKAAAA3wEAAFwAAABbAwAApAAAAFIA
AAApAAAAygAAAHgBAAABAAAAXQAAAAIAAAABAAAADQAAAAEAAAA4AAAABAAAACcAAAAAAAoAAQAA
AAAABgBUAk0CBgBbAk0CCgB6AmUCDgDaArECBgD2Ak0CBAD7AgQDBAA9AwQDBgC4A50DBABDBAQD
EgC6BK4EEgDYBK4EEgBADioOEgBUE0ITEgAiFCoOBABqGgQDBgCMI00CFgAhKhEqBgA6Kp0DEgBb
KkgqEgB3KioOEgCTKkITBgC0KqMqBgDlKtAqBgAmLQctBgDpL88vBgAUMAIwBgArMAIwBgBIMAIw
BgBnMAIwBgCAMAIwBgCZMAIwBgC0MAIwBgDPMAIwBgDoMAIwBgAhMQExBgBBMQExGgBrMQExBgB+
MQExBACZMQQDIwCkMQAABgDSMU0CHgAEMvkxHgDZMvkxBgDhMk0CHgD0MvkxHgAIM/kxBgA8Mykz
HgBXM/kxBgCVM00CGgCoM5wzGgDxMwExBgD8M00CGgADNAExBgAYNE0CBgDtGE0CBgCBNE0CIgDV
NLY0IgDoNLY0IgAHNbY0GgAONQExIgAdNbY0GgBHNS81BgClNU0CBgAlNk0CBgBUNk0CBgDfN00C
EgDyN64EEgAHOK4EEgA8OK4EEgBXOK4EBgAXPQIwBAAfPQQDBAA2PQQDGgBxPZwzBgCXPZ0DBgC7
PU0CBADDPQQDBADPPQQDBgBAPk0CBgBVPk0CEgCUQK4EBgBWQU0CBADdQQQDHgA1QvkxBgDtQgct
BgADQwctBgC1QykzEgBdRCoOEgBsRCoOEgChREgqBgDbRActEgD5REgqEgAGRa4EBgAxRU0CBgBH
RU0CBABgRQQDBgB2RU0CBACnRQQDBAB9RgQDBACURgQDBACeRgQDJgBRR0tHJgBhR0tHJgBwR0tH
JgB9R0tHJgCeR0tHJgCpR0tHJgC4R0tHJgDFR0tHJgDQCUtHJgD0R0tHJgD/R0tHEgB6SEITBgCR
SIdIBACiSAQDCgAlSRJJEgBBSUgqEgBLSa4EBgC/NU0CBADSSgQDBgCZS4hLBgClS4hLBgCsS4hL
BAAKTAQDBAAXTAQDBAAgTAQDBAAuTAQDBgBATE0CBgBYTIdIKgB7TGxMBgCBTIdIBACoTAQDBAC6
TAQDBADATMxMBADtTAQDKgADTWxMBABsTQQDBACATQQDLgC1TaBNKgDITWxMKgDmTc9NBAD/TQQD
BAARTgQDBgB1TodIBgAeT00CBADGTwQDBAD1UAQDBAA1UQQDBADNVAQDBgBAVQIwBgBiVYdIHgCI
VW9VHgCZVW9VBgCnVYdIBgDUVchVBgAMVu9VBgAlVu9VBgBFVu9VBgBkVu9VBgB/Vu9VBgCTVu9V
BgCrVu9VBgBIVxJJBgBlVwIwCgCRV3tXCgCqV3tXDgDGV7ECBgDoV00CDgCIWLECMgDhWMFYMgD5
WMFYDgACWbECMgBXWcFYMgBzWcFYNgDgWbhZBAAiWgQDBgA3WgctBgBFWgctBgBdWgctBgBwWgct
BACBWgQDBgCdWgctBgBhXQIwBgB4XQctBgCPXQctBACgXQQDBgC8XQctBgAWZwctAAAAAAEAAAAA
AAEAAQABABAAMgBDAAUAAQABAAEAEABnAEMABQAXACwAAQAQAG4AQwAFACAAPwABABAAcgBDAAUA
IgBEAAkBEAB5AEMACQAmAE0AAQAQAIIAQwAFACgAUQABABAAiwBDAAUALQBcAAEAEACfAEMABQA5
AHUAAQAQAKYAQwAFADwAfAABABAAswBDAAUAQgCQAAEAEADAAEMABQBIAJ0AAQAQAMUAQwAFAE0A
qAABABAA0ABDAAUATgCrAAEAEADbAOYABQBSALQAAQAQAAoB5gAFAGIA0AABABAAEgHmAAUAaQDf
AAEAEAAdAUMABQB1APgACwEQACYBAAAJAIMAMAEBABAANAFDAAUAhwA4AQAAEABBAUMABQCPAEoB
CAEQAFUBQwAJAJEATwEBABAAZQFDAAUAlABVAQEAEABxAUMABQCbAGQBCAEQAH0BQwAJAKAAbwEB
ABAAiQFDAAUAogBzAQEAEACTAUMABQCkAHgBAQAQAJ8BQwAFAKoAhQEBABAAqgFDAAUArwCQAQEA
EAC0AUMABQC0AJsBgQEQAL8BQwAFAL4AsAEBABAAyAFDAAUAxwDOAYEBEADTAUMABQDHANABAAAQ
AOkB8wEFAMcA3gEAARAAIgLzAQ0AyQDiAQEAEAArAuYAEQDKAOUBAwEAADYCAAAVANQA6wGhEAAA
+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
sAABAJwULQEBALoUgAIBAG8PxgEBAN8UhAIBAAAVLQEBABsViAIRAFZGLxARAPtGLxARAEpILxAB
ACMWLQEBAEEWLQEBAFsWLQEBAHUWLQEBAJEWLQEBAAAVLQEBAKsWLQEBAOUXSAEBAAEYSAEBAB8Y
LQEBAD8YSAEBAFwYLQEBAJ8RLQEBAHsYSAEBAMYMLQEBAJEYSAEBAAgKLQEBAFkNSAEBAHUNSAEB
AE8cLQEBAJwULQEBAHEcLQEBAJIclgEBAK8clgEBAM4cLQEBAN8UhAIBAOgcLQEBAAYdWwMBAAAV
LQEBACkdYwMBAEUdLQEBAGMdLQERAEZKwQsBAG0eLQEBAIweSAEBAKoeSAEBAAgKLQEBAMcILQEB
AMMfLQEBAAgKLQEBAOEfLQEBAP8fSAEBAB0gSAEBAD0gLQEBAF0gLQEBAMcILQEBAFwJLQEBADMh
LQEBAFIhLQEBAHEhLQEBAPcNSAEBAHAiLQEBAIoiLQEBAKUilgEBAL4ilgEBAN8iSAEBAP0ilgEB
AHAiLQEBAOsjLQEBAFIhLQEBAA4kgAMBADEkLQEBAAkSLQEBALAISAEBAHAiLQEBAKoknAMBAFIM
LQEBAIoiLQEBAFIHLQEBAHEhLQEBAKYMLQEBAPMkwAMBAFkNSAEBAHUNSAEBAFIMLQEBAFYlSAEB
AG4lSAEBAMcILQEBAFwJLQEBAPIllgEBAAwmSAEBACgmLQEBAEEnLQEBAF4nLQEBAH4nLQEBAJon
LQEBALQnSAEBAM4cLQEBANgnLQEBAPInLQEBAHAiLQEBAG4M3AMRAJ1SwQsRAN5SwQsRAB9TwQsR
AGBTwQsRAKFT6xgRAOJT+xgRACNU+xgRAGRU6xgRAKVU+xgRAMQqAAURAPEqBAURADUrIgUBAFkr
LQEBAGgrLQEBAHkrLQEBAIkrLQEBAJUrLQEBAKIrLQEBALIrLQERAFZG2xoRAC9Y6xoRAGFY6xoG
BtcrSAFWgN8rOQVWgOcrOQUGABEyjQUGAFoymAUGAGoyjQUGAFoymAUGAGoyjQUWAAw0lwYWAB80
qAYWACs0ugYWADc0ywYWAEM0ugYWAE803wYWAFs0ywYWAGc0ugYWAAM2RggWAA82RggWAF02jwgW
AGk2ywYWAHU2ugYWAIE23wYWAI02ywYWAJk2ugYWAKU2pAgGAMU2LQEWAMI4RggWAM44RggWAP04
jwgWAAk5ywYWABU5ugYWACE5RggWAC05RggWADk53wYWAEU5ywYWAFE5ugYWAF05pAgWAGk5RggW
AHU5pAgWAIE5RggWAI053wYWAJk5ywYWAKU5ugYWALE5pAgWAL05RggWAMk5RggWANU5lwYWAOE5
ugYWAO05ywYWAPk5ywYWAAU63wYWABE6ugYWAB06pAgWACk6RggWADU6RggWAEE6lwYWAE06ugYW
AFk6ywYWAGU6ywYWAHE63wYWAH06ugYWAIk6pAgGAMU2LQEGAMU2LQEGBtcrSAFWgP1fYh9WgAlg
Yh8GBtcrSAFWgBhg1x9WgDBg1x8GBtcrSAFWgElgOiBWgFRgOiBWgG9gOiBWgJNgOiBWgKtgOiBW
gLpgOiBWgMpgOiBWgNpgOiBWgOhgOiBWgPxgOiBWgA5hOiBWgC5hOiAGBtcrSAFWgExhyyBWgGdh
yyBWgIVhyyBWgKVhyyBWgMFhyyAWABw+3wYWACg+ywYWADQ+ugYWAEk+fAsWAFw+jAsWAGg+ugYW
AHQ+RggWAIA+jAsWAIw+ugYGAKw+nwsGAMc+pgsGANg+SAEWAGRARggWAHBAugYWAHxAjAsWAIhA
ugYGANZAnwsGAPFABA0GAAJBLQEWALdBRggWAMNBRggGBtcrSAFWgOFhRSFWgO9hRSEWAB1CRggW
AClCRggWAKVClwYWALFCqAYWAL1CugYWAMlCywYWANVCugYWAOFCpAgWAEdD3wYWAFJDywYWAF1D
ugYWAGhDRggWAHNDRggWAH5DRggWAIlDRggWAJRD3wYWAJ9DugYWAKpDywYWAAw0ugYWAB80lwYW
ACs07g0WADc0AA4WAEM0Ew4WAE80ugYWAFs03wYWAGc03wYWAMFDlwYWAAM27g0WAA82ugYWAM1D
JQ4WANlDywYWAF023wYWAGk2ugYWAIE2RggWAI02lwYWAJk27g0WAKU23wYWAEhERggWAPBFRggG
AH0tLQEGBtcrSAFWgNZjmSJWgOJjmSJWgO1jmSIWAHND3xAWAH5D8hAWAIlDugYWAAw0RggWAB80
RggWADc0pAgWAEM0pAgWAE80pAgWAFs0pAgWAGc0pAgWAMFDpAgWAAM2RggWAA82pAgWAM1DpAgW
ANlDpAgWAF02pAgWAGk2pAgWAHU2RggWAIE2pAgWANxIRggWAOdIlwYWAEdD7g0WAFJDmBIWAF1D
qhIWAGhDugYWAHNDRggWAH5DlwYWAIlD7g0WAJRDvRIWAJ9DugYWAKpDugYWAAw0lwYWAB807g0W
ACs07g0WADc0vRIWAEM0ugYWAE80ugYWAFs03wYWAGc0ugYWAMFDRggWAAM23wYWAA82ugYWAM1D
RggWANlD3wYWAF02ugYWAGk2RggWAHU23wYWAIE2ugYWAI02RggWAJk2RggWAKU2lwYWAPJI7g0W
AEhE3xAWAP5I3xAGAHtJLQEWAOpJRggWAMI4RggWAM44lwYWAPZJ7g0WAAJKlwYWAA5KqAYWABpK
RggWAP04RggWAAk5RggWABU5lwYWACE57g0WAC05lwYWADk5pAgWAEU5RggWAHU5AA4WAIE5uhQW
AI053wYWAKU53xAGAPUrtQAGAGFLGBUGAFAuHBUGAOYtsAAWAOE53wYWAO05PBUWAPk5TxUWAAU6
Ew4WABE6ugYWAB063wYWACk6qhIWADU6ugYWAEE6YRUWAE06YRUGBtcrSAFWgCFkYCNWgCxkYCNW
gDdkYCMGBtcrSAFWgEBkuyNWgEdkuyMGBtcrSAFWgE9kEiRWgFtkEiQGBtcrSAFWgGRkbiRWgGtk
biQGBtcrSAFWgLdkKyVWgL9kKyVWgMhkKyVWgNFkKyVWgONkKyUWAHE63xAGAFAuHBUGAGFLGBUG
BtcrSAFWgP5kviVWgAhlviUGBtcrSAFWgBFlICZWgBplICYGBtcrSAFWgCRlgiZWgDNlgiZWgEFl
giYGBtcrSAFWgFNl4iZWgF1l4iYWAF1ORggWAGlORggWAPBFRggWAMdOlwYWANJO7g0WANxIRggW
AOdI3wYWAEdDRggWAFJD3wYWAF1DRggWAGhD3wYWAHNDRggWAH5D3wYWAIlDRggWAJRD3wYWAJ9D
RggWAKpD3wYWAAw0RggWAB80lwYWACs07g0WADc03wYWAEM0lwYWAE807g0WAMFD3wYWAAM2ugYW
AA82ugYWAM1D3wYWANlDugYWAF02ugYWAHU2lwYWAIE2qAYWAI02ugYWAJk2ywYWAKU2ugYWAPJI
3xAWAEhE8hAWAP5IugYWAF5PywYWAGpPugYWAJNP3xAWAJ9PRggWAKtPlwYWAOpJlhcWAMI4RggW
AM44RggGBtcrSAFWgGdlQidWgHJlQidWgH1lQidWgItlQidWgJllQidWgKZlQidWgLNlQidWgMBl
QidWgM9lQidWgNtlQidWgOllQicWAAJKRggWAA5KRggWABpKRggWAP04RggWABU5lwYWACE5qAYW
AC05ugYWADk5ywYWAEU5ugYWAF05lwYWAGk5qAYWAHU5ugYWAIE5ywYWAI05ugYWAKU5RggWALE5
lwYWAL05lhcWANU5RggWAOE5lwYWAPk5RggWAAU6RggWABE6AA4WAB06IRgWACk6RggWADU6RggW
AE06RggWAFk6RggGBtcrSAFWgCxm5SdWgD1m5SdWgFFm5SdWgGRm5SdWgHdm5SdWgIpm5SdWgJxm
5SdWgLpm5SdWgNlm5SdWgPFm5ScWAHE6lwYWAH06pAgWAIk6ugYWAHlRywYWAIVRugYWAGlOlwYW
ALpRpAgWAMZRywYWANJRugYWAN5RlwYWAOpRpAgWAPZRywYWAAJSugYWADpS3xAWAGxSAA4WAHhS
IRgGBtcrSAFWgApnUihWgA9nUigGAAJBLQFQIAAAAACGCCMDEwABAFggAAAAAIYIMAMZAAEAYSAA
AAAAhghHAyAAAgBpIAAAAACGCFwDJgACAHIgAAAAAIYIcQMgAAMAeiAAAAAAhgiHAyYAAwCDIAAA
AACGCL8DLQAEAIsgAAAAAIYIzAM2AAQAlCAAAAAAhgjZA0AABQCcIAAAAACGCOsDSQAFAKUgAAAA
AIYY/QMmAAYAtCAAAAAAhhj9A1MABwDoIQAAAACGAAMELQAJAJwnAAAAAIYAJwRdAAkA7CoAAAAA
gQBJBGEACQA4LAAAAACGAGcEagALALwxAAAAAIEASQRwAAwAVDMAAAAAhgB4BHsAEACESwAAAACB
AIcEfwAQADhRAAAAAIEAmwSIABQAEFMAAAAAgQDEBJIAGQC8UwAAAACBAOAEmgAbAOhVAAAAAIEA
7QSlAB8AHFcAAAAAgQD9BKUAIABIWAAAAACBAAsFpQAhAOBZAAAAAIEAIAWrACIA+CsAAAAAkQDn
NrYIIwAKLAAAAACRACc3xggkADAsAAAAAJEAeDfYCCYAvDIAAAAAkQDpOrYIJwDOMgAAAACRACc7
xggoAOEyAAAAAJEAZTu2CCoA8zIAAAAAkQCjO8YIKwAZMwAAAACRAOE72AgtADQzAAAAAJEAHzzY
CC4APDMAAAAAkQBdPDYKLwBEMwAAAACRAJs8NgowAEwzAAAAAJEA2Tw2CjEAFEsAAAAAkQAQP7EL
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
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAPUr
AAACAP8rAAABANosAAABAOcsAAABAOcsAAABAOcsAAABAOosAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAPQsAgACAPksAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAJwOAAACADMtAAADAEEtAAABAO8rAAABAFEtAAABAFwtEBACAGotAAABAH0t
AAACAIstAAADAJQtAAABAEUyAAABAEUyAAABAEUyAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAJ8tAAABAK4tEBACAL8tAAABAPQsAgAC
APksAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAMwtAAABANstAAABAOYtAAACAOktAAABAPMtAgAC
AAEuAAABAAwuAAABABIuAAABAB0uAAABAO8rAAABAAwuAAACAOYtAAADACkuAAAEACwuAAAFADUu
AAAGAEAuAAABAOYtAAABAFAuAAACAFguAAADAOYtAAABAPUrAAACAP8rAAABAFwuAAABAPMtAAAC
AGUuAgADAAEuAAABAFAuAAABAFAuAAACAOYtAAADAPUrAAABAPUrAAACAHMuAAADAL8tAAABAPUr
AAACAHMuAAABAPUrAAACAHMuAAABAPUrAAACAHMuAAABAPUrAAACAHMuAAABAFAuAAABAHMuAAAB
AP8rAAACAOktAAABAAwuAAACAOYtAAABAEUyAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABADMtAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8r
AAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAAB
AO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAO8rAAABAHwuAAABAJIu
AAACADMtAAABAP8rAAABAJYuAAACAP8rAAABAKQuAAACAKwuAAABAPUrAAACAP8rAAABAPUrAAAC
AP8rAAABALUuAAACAMcuAAADAP8rAAABAPUrAAACANkuAAABAPUrAAACANkuAAADAOQuAAABAPUr
AAABAPUrAAACAPMuAAADAPcuAAABAPUrAAACAP8rAAABAP4uAAACAA4vAAABACMvAAACAP8rAAAB
AOYtAAACAOktAAABAO8rEBACAC8vAAABAP8rAAACADYvEBADAEQvAAABAOktAAACAP8rAAABACku
AAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAAB
AEwvAAACAFUvAAADAGIvAAAEAHAvAAABAO8rAAABAO8rAAABAAEuAAABAHYvAAACAIEvAAABAO8r
AAABAO8rAAABAJIvAAABAO8rAAABAO8rAAABAJsvEBACAKUvAAABALAvEBACAKUvAAABAL0vAAAC
AMIvAAABAL0vAAACAMIvAAABAL0vAAACAMIvAAABAO8rAAABAMUvAAABAEUyAAABAEUyAAABAEUy
ACAAAAAAESABAK1aESACALlaERADAMhaESAEANdaESAFAOBaACAAAAAAASABAPdaERACAO0YACAA
AAAAACAAAAAAACAAAAAAACAAAAAAACAAAAAAACAAAAAAASABAO8rACAAAAAAESABAPdaASABAEtb
ESACAFBbESADAFhbACAAAAAAERABAGNbERACAHNBACAAAAAAESABAIEIESACAHpbESABAIEIESAC
AHpbESADAO8rACAAAAAAESABAJNbACAAAAAAACAAAAAAASABALNbESACALhbESADAL5bESAEAMVb
ESAFAMxbERAGANhbESAHAOhbESAIAPJbESAJAPxbACAAAAAAACAAAAAAACAAAAAAESABAJNbESAC
ADFcACAAAAAAACAAAAAAACAAAAAAACAAAAAAASABAO8rACAAAAAAASABAO8rACAAAAAAACAAAAAA
AQABAO0YESACAB8KACAAAAAAACAAAAAAACAAAAAAESABALhcESABALhcESACAO8rACAAAAAAASAB
AO8rACAAAAAAERABAFc9ERACANlcESADAONcESAEAO5cACAAAAAAASABAOBdESABANNEESABAFEo
AQABAOBdACAAAAAAACAAAAAAACAAAAAAESABAN0IACAAAAAAESABAPdaESACACNeACAAAAAAESAB
AN0IACAAAAAAASABADReESACADpeACAAAAAAACAAAAAAESABAFEoESACAGheESADAHdeESAEAIBe
ESAFAIpeESAGAJxeESAHALFeESAIAMheESAJANxeESAKAPJeESALAAVfESAMAB5fESANADNfESAO
AEVfESAPAFJfESAQAGFfAQABAO0YESACAIRfESADAI1fESAEAJVfESAFAKpfESAGALtfESAHAMBf
ESAIAMNfESAJANRfAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAABAEUyAAAB
AEUyAAABAAJBAAABAEUyACAAAAAAAQABAOBdAQABAOBdACAAAAAAESABAGBiACAAAAAAASABAN0I
ACAAAAAAASABAIRfESACAHViESADAIFiESAEAHNBESAFAFEoESAGAIpiESAHAJtiESAIALViESAJ
ALxiESAKAMZiESALAM9iESAMANZiESANAOBiESAOAOliESAPAO9iAAABAEUyACAAAAAAASABAO8r
ESABACJjESACAIRfESADAC5jACAAAAAAESABAIRfESACAGNjESADAFEoESAEAIpiESAFAG5jESAG
AIJjERAHAI9jESAIAJpjESAJAOBiESAKAK1jESALALpjESAMAOliACAAAAAAESABAPZjESACALhb
ESADAGs9ESAEAO0YESABAPZjESACALhbACAAAAAAACAAAAAAASABAN0IAAABAEUyACAAAAAAASAB
AO8rACAAAAAAACAAAAAAASABAIRfAQACAIJkAQADAI1kAQAEADVdAQAFAFZdAQAGAJ5kAQAHAKRk
ACAAAAAAASABAO8rACAAAAAAACAAAAAAACAAAAAAAAABAEUyJgAwASYA9AEnAKgAJwD4ASgAXQEp
ABwBKQD8AUgAXQFRAF0BXgBdAcEA/QN7AMkA/QOrANEA/QOrANkA/QOrAOEA/QOrAOkA/QOrAPEA
/QOrAPkA/QOrAAEB/QOrAAkB/QOrABEB/QOrABkB/QMoASEB/QN7ACkB/QN7ADEB/QN7AAkA/QN7
AFsRnghdAAwArzFfBRQAvTFxBRwA/QN7ABQAyTGFAUkB3jF7AFkB9AldAGEB6DKjBSQA/QN7AGkB
/QN7AGkBADOrAGkBFDOwBXEBrzG3BXkBvTG9BSwA/QN7AFkBSDPIBYEBYjPOBYEBczOFARwAhTPV
BXkByTGFASQAhTPVBVkBiTOwBSwAhTPVBTQA/QPkBZEBszPqBTwA/QPkBQsSczTwBrkBkzT2BskB
ADUIB9kBVjUSB0QAADU4B0QAZTVFB9kBbDUSB0wAADU4B0wAZTVFB2EBfDVdANkBhDVaB1QAADU4
B1QAZTVFB1wAADU4B1wAZTVFB9kBkTWYB6MRmzXwBhMQqzWsB2QAuDW9B2wAuDXUB3QAuDXUB3wA
uDW9B9kBvzX2B4QAADU4B4QAZTVFB4wAuDW9B9MQdgbwBgMQxzUkAZQAADU4B5QAZTVFB5wAuDW9
B+sRGzZ4CGEBujejBWEByDfoCJEBzzfvCKQA/QPkBZEB1TcRCWEB5DcwCcsPXgbwBlEA/QOrAGEB
7Dc2CVEAXgY9CSEC/QOrAPkBEjhdACECGzirABkChTNDCawA/QN7ALQAADU4B7QAZTVFBxkCJzhk
CSECMDhdALwAuDV6CSkCxzUkAVEAdgaECawAaTiKCTEChTOQCcQA/QPkBZEBcTigCZEBszO5CWEB
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
MVVIGQkAOFWsGbkBTVWyGbEEWVW5GbkDEjjlA7kE/QOrAMEE/QOrAMkE/QPcGckEslXmGbkDvlW5
BIkA9AldANkE3VUJGtkE5lUPGuEE/QN7AOkEM1YVGukEP1Z7APEE/QN7APkEd1YcGvkEilYiGvkE
n1YpGvkEvFYwGhEFzFY2GvkEP1Z7ALkD4FY/GrkD71ZaGvkEAFcwGtkEEFdgGsQC/QN7ALkBGlds
GpkALlcOAcQChTPVBbwC/QN7AMQCrzFfBcwCvTFxBbkDPVd9GrwChTPVBcwCyTGFARkF/QN7ALkB
bleoGrEA/QOuGikF/QO7GhkA/QN7ADkF/QN7AEEF/QN7ACEAmlj1GkkF61j7GlEFJzgBG1kF9Am9
BWEB00QIG0kFFlkOGwECGxBdAAECIVldAGEBMFktAWEFNlkUG0kFQFkoAWEBT1ldANwC/QN7AOQC
/QPkBewC/QPkBUkFY1l3G2kFJzh9G3EFhVm9BXkFC1q9BSEA/QN7AIkF/QOrAJEF/QN7AJkF/QN7
AKEF/QO+G7EF/QMoAbkF/QOrAMEF/QOXHtkF/QMoAZEF/QNxH+EF/QMUKQgASAEVAggATAEaAggA
UAEfAggAVAEkAgIAGQJIBQ4AiQJKBQgAVAM+BQgAWANDBQgAVARnHwgAWARsHwgAYAQ+BQgAZARD
BQgAbAQpHggAcAQ/IAgAdAREIAgAeARJIAgAfAROIAgAgARTIAgAhARYIAgAiARdIAgAjARiIAgA
kARnIAgAlARsIAgAmARxIAgAoATQIAgApATVIAgAqATaIAgArAQuHggAsATfIAgA/QRRBQIACQVW
BQgADAVKIQgAEAVPIQIAeQVWBQIAgQVWBQgAuAXfIAgAvAVDBQgAvQVDBQgAwAXQIAgA0QU+BQgA
CQZDBQgADQbDHAgATQZDBQgAwQYpHggAxQYuHggAJAdTIAgAKAdYIAgALAddIAgANAfQIAgAOAdD
BQgAQAfQIAgARAdDBQgATAdDBQgAUAfQIAgAWAcwJQgAXAc+BQgAYAdDBQgAZAc1JQgAaAc6JQgA
fAfQIAgAgAdDBQgAiAfQIAgAjAfDHAgAlAcwJQgAmAc+BQgAnAfQIAgApAc+BQgAqAdDBQgAOQhD
BQgAZAhDBQgAaAjVIAgAbAg+BQgAcAjfIAgAdAhJIAgAeAjQIAgAfAjaIAgAgAhnIAgAhAhiIAgA
iAhHJwgAjAhMJwgAAAnaIAgABAnQIAgACAlTIAgADAlsIAgAEAlYIAgAFAlxIAgAGAnqJwgAHAnv
JwgAIAn0JwgAJAn5JwgAbAlDBQgAcAlXKCAAewBDBSEAewBDBS4AOwClKy4ASwDOKy4AEwBdKy4A
GwClKy4AIwDOKy4AYwADLC4AKwDOKy4AMwDUKy4AawAMLC4AcwBDBS4AQwDjK0AAewBDBUEAewBD
BWAAewBDBWEAewBDBYAAewBDBYEAewBDBaAAewBDBaEAewBDBcAAewBDBcEAewBDBeAAewBDBeEA
ewBDBQABewBDBQEBewBDBSABewBDBSEBewBDBUABewBDBUEBewBDBWEBewBDBYEBewBDBaEBewBD
BcEBewBDBeEBewBDBQECewBDBSECewBDBUECewBDBWECewBDBYECewBDBaECewBDBcECewBDBeEC
ewBDBQEDewBDBSEDewBDBUEDewBDBWADewBDBWEDewBDBYADewBDBYEDewBDBaADewBDBaEDewBD
BcADewBDBcEDewBDBeADewBDBeEDewBDBeMDcwBDBQAEewBDBQEEewBDBSAEewBDBSEEewBDBSME
cwBDBUAEewBDBUEEewBDBUME2w1DBWAEewBDBWEEewBDBYAEewBDBYEEewBDBYMEAw5DBaAEewBD
BaEEewBDBcAEewBDBcEEewBDBcMEyw7FG8MEuw5DBcMEewBDBcMEsw6UG+AEewBDBeEEewBDBeME
ewBDBeMEsw4lHOMEuw5DBeMEyw7FGwAFewBDBQEFewBDBQMFewBDBQMFuw5DBQMF2w6JHgMF4w7C
GgMFsw5fHiAFewBDBSEFewBDBSMFuw5DBSMFyw7FGyMFewBDBSMFsw6eHkAFewBDBUEFewBDBUMF
uw5DBUMFewBDBUMFsw4lHGAFewBDBWEFewBDBWMFewBDBYAFewBDBYEFewBDBYMFewBDBaAFewBD
BaEFewBDBaMFewBDBcAFewBDBcEFewBDBcMFewBDBeAFewBDBeEFewBDBeMFewBDBQAGewBDBQEG
ewBDBQMGewBDBSAGewBDBSEGewBDBSMGewBDBUAGewBDBUEGewBDBUMGewBDBWAGewBDBWEGewBD
BWMGewBDBYAGewBDBYEGewBDBYMGewBDBaAGewBDBaEGewBDBaMGewBDBcAGewBDBcEGewBDBcMG
8w53H8MGewBDBeAGewBDBeEGewBDBeMGewBDBeMG8w7cHwAHewBDBQEHewBDBQMHewBDBQMH8w52
ICAHewBDBSEHewBDBSMH8w7kICMHewBDBUAHewBDBUEHewBDBUMHewBDBWAHewBDBWEHewBDBWMH
ewBDBYAHewBDBYMHewBDBaAHewBDBaMHewBDBcEHewBDBcMHewBDBeAHewBDBeEHewBDBQAIewBD
BQEIewBDBQMIewBDBSAIewBDBSEIewBDBSMIewBDBSMI8w5UIUAIewBDBUEIewBDBUMIewBDBWEI
ewBDBWMIewBDBYAIewBDBYEIewBDBYMIewBDBaAIewBDBaEIewBDBaMIewBDBcAIewBDBcEIewBD
BcMIewBDBeAIewBDBeEIewBDBeMIuw5DBeMIewBDBeMI2w6JHuMIsw6eHgAJewBDBQEJewBDBQMJ
sw4AIgMJuw5DBQMJewBDBQMJ2w6JHiAJewBDBSEJewBDBSMJewBDBUAJewBDBUEJewBDBUMJewBD
BWAJewBDBWEJewBDBWMJsw4zImMJ4w7CGmMJewBDBWMJuw5DBYEJewBDBYMJuw5DBYMJsw6UG4MJ
ewBDBaAJewBDBaEJewBDBaMJewBDBaMJ8w6eIsAJewBDBcEJewBDBcMJewBDBeAJewBDBeEJewBD
BeMJewBDBQAKewBDBQEKewBDBQMKewBDBSAKewBDBSEKewBDBSMKuw5DBSMKsw4DIyMKewBDBSMK
2w6JHkAKewBDBUMKewBDBWAKewBDBWMKewBDBYAKewBDBYMKewBDBaAKewBDBaMKewBDBcAKewBD
BcMKsw42I8MK4w7CGsMKuw5DBcMK2w6JHsMKewBDBeAKewBDBeMKewBDBQALewBDBQELewBDBQML
ewBDBSALewBDBSELewBDBSMLewBDBUALewBDBUELewBDBUML8w5lI0MLewBDBWELewBDBWML8w7A
I2MLewBDBYALewBDBYELewBDBYMLewBDBYML8w4XJKALewBDBaELewBDBaMLewBDBaML8w5zJMAL
ewBDBcELewBDBcML4w7CGsMLsw7XJMMLuw5DBcMLewBDBcML2w6JHuALewBDBeELewBDBeML4w7C
GuMLuw5DBeMLsw4BJeMLewBDBQAMewBDBQEMewBDBQMMewBDBQMM8w4/JSAMewBDBSEMewBDBSMM
ewBDBSMMuw5DBSMM4w7CGiMMsw6UJUAMewBDBUEMewBDBUMMewBDBWAMewBDBWEMewBDBWMMewBD
BYAMewBDBYEMewBDBYMMewBDBYMM8w7DJaAMewBDBaEMewBDBaMM8w4lJqMMewBDBcAMewBDBcEM
ewBDBcMM8w6HJsMMewBDBeAMewBDBeEMewBDBeMM8w7nJuMMewBDBQANewBDBQENewBDBQMNewBD
BSANewBDBSENewBDBSMNewBDBUANewBDBUENewBDBUMNewBDBWANewBDBWENewBDBWMNewBDBYAN
ewBDBYENewBDBYMNewBDBaANewBDBaENewBDBaMNewBDBaMN8w5RJ8ANewBDBcENewBDBcMNewBD
BeANewBDBeENewBDBeMNewBDBQAOewBDBQEOewBDBQMOewBDBSAOewBDBSEOewBDBSMOewBDBUAO
ewBDBUEOewBDBUMOewBDBWAOewBDBWEOewBDBWMOewBDBYEOewBDBYMOsw67J4MOuw5DBYMO4w7C
GoMOewBDBaAOewBDBaEOewBDBaMOewBDBcAOewBDBcEOewBDBcMOewBDBcMO8w7+J+AOewBDBeEO
ewBDBeMOewBDBQAPewBDBQEPewBDBQMPewBDBSAPewBDBSEPewBDBSMPewBDBUAPewBDBUEPewBD
BUMPewBDBWEPewBDBWMPewBDBWMP8w5cKIAPewBDBYEPewBDBYMPewBDBaAPewBDBaEPewBDBaMP
ewBDBaMP8w62KKMP+w4eKcAPewBDBcEPewBDBcMP+w7YKcMPewBDBcMP8w5/KeAPewBDBeEPewBD
BeMP+w6IKuMPewBDBeMP8w4vKgAQewBDBQEQewBDBQMQewBDBQMQuw5DBQMQ4w7CGgMQsw7fKiAQ
ewBDBSEQewBDBSMQsw4JKyMQ4w7CGiMQewBDBSMQuw5DBUAQewBDBUEQewBDBUMQ4w7CGkMQsw4z
K0MQewBDBUMQuw5DBWAQewBDBWEQewBDBYEQewBDBaEQewBDBcEQewBDBeEQewBDBQERewBDBSER
ewBDBUERewBDBWERewBDBYERewBDBaERewBDBcERewBDBeERewBDBQASewBDBQESewBDBSASewBD
BSESewBDBUASewBDBUESewBDBWASewBDBWESewBDBYASewBDBYESewBDBaASewBDBaESewBDBcAS
ewBDBcESewBDBeASewBDBeESewBDBQATewBDBQETewBDBSATewBDBSETewBDBUATewBDBUETewBD
BWATewBDBWETewBDBYETewBDBaATewBDBaETewBDBcATewBDBcETewBDBeATewBDBeETewBDBQAU
ewBDBQEUewBDBSAUewBDBSEUewBDBSkU8w3CGkAUewBDBUEUewBDBUkU8w3CGmAUewBDBWEUewBD
BYAUewBDBYEUewBDBaAUewBDBaEUewBDBcAUewBDBcEUewBDBeEUewBDBQAVewBDBQEVewBDBSAV
ewBDBSEVewBDBUEVewBDBWAVewBDBWEVewBDBYAVewBDBYEVewBDBaAVewBDBaEVewBDBcAVewBD
BcEVewBDBeAVewBDBeEVewBDBQAWewBDBQEWewBDBSAWewBDBSEWewBDBUAWewBDBUEWewBDBWEW
ewBDBYEWewBDBaAWewBDBaEWewBDBcAWewBDBcEWewBDBeAWewBDBeEWewBDBQAXewBDBQEXewBD
BSAXewBDBSEXewBDBUAXewBDBUEXewBDBWAXewBDBWEXewBDBYAXewBDBYEXewBDBaAXewBDBaEX
ewBDBcAXewBDBcEXewBDBeAXewBDBeEXewBDBQAYewBDBQEYewBDBSEYewBDBUEYewBDBWEYewBD
BYEYewBDBaAYewBDBaEYewBDBcAYewBDBcEYewBDBSEZewBDBaAZewBDBcAZewBDBeAZewBDBQAa
ewBDBSAaewBDBSEaewBDBUAaewBDBUEaewBDBWAaewBDBWEaewBDBYAaewBDBaAaewBDBcAaewBD
BeAaewBDBQAbewBDBSAbewBDBUAbewBDBWAbewBDBYAbewBDBaAbewBDBeAbewBDBQAcewBDBSAc
ewBDBUAcewBDBWAcewBDBYAcewBDBaAcewBDBcAcewBDBeAcewBDBQAdewBDBSAdewBDBUAdewBD
BWAdewBDBYAdewBDBaAdewBDBcAdewBDBeAdewBDBQAeewBDBSAeewBDBUAeewBDBWAeewBDBYAe
ewBDBaAeewBDBcAeewBDBWAfewBDBYAfewBDBaAfewBDBcAfewBDBeAfewBDBQAgewBDBSAgewBD
BUAgewBDBWAgewBDBYAgewBDBaAgewBDBcAgewBDBeAgewBDBQAhewBDBSAhewBDBUAhewBDBWAh
ewBDBYAhewBDBaAhewBDBcAhewBDBeAhewBDBQAiewBDBSAiewBDBUAiewBDBWAiewBDBYAiewBD
BeAlewBDBQAmewBDBSAmewBDBUAmewBDBWAmewBDBYAmewBDBaAmewBDBcAmewBDBeAmewBDBQAn
ewBDBSAnewBDBUAnewBDBWAnewBDBYAnewBDBaAnewBDBcAnewBDBeAnewBDBQAoewBDBSAoewBD
BUAoewBDBWAoewBDBYAoewBDBaAoewBDBcAoewBDBeAoewBDBUApewBDBWApewBDBYApewBDBaAp
ewBDBeApewBDBQAqewBDBSAqewBDBUAqewBDBWAqewBDBYAqewBDBaAqewBDBcAqewBDBeAqewBD
BQArewBDBSArewBDBUArewBDBWArewBDBYArewBDBaArewBDBcArewBDBeArewBDBQAsewBDBSAs
ewBDBUAsewBDBYAsewBDBaAsewBDBcAsewBDBeAsewBDBQAtewBDBSAtewBDBUAtewBDBWAtewBD
BYAtewBDBaAtewBDBeAtewBDBQAuewBDBSAuewBDBUAuewBDBWAuewBDBYAuewBDBaAuewBDBcAu
ewBDBQAvewBDBSAvewBDBUAvewBDBWAvewBDBYAvewBDBaAvewBDBcAvewBDBeAvewBDBQAwewBD
BSAwewBDBUAwewBDBWAwewBDBaAwewBDBcAwewBDBeAwewBDBQAxewBDBSAxewBDBUAxewBDBWAx
ewBDBYAxewBDBaAxewBDBcAxewBDBQAyewBDBSAyewBDBUAyewBDBWAyewBDBYAyewBDBaAyewBD
BcAyewBDBeAyewBDBQAzewBDBSAzewBDBWAzewBDBYAzewBDBaAzewBDBcAzewBDBeAzewBDBQA0
ewBDBSA0ewBDBUA0ewBDBWA0ewBDBYA0ewBDBaA0ewBDBcA0ewBDBeA0ewBDBQA1ewBDBSA1ewBD
BUA1ewBDBWA1ewBDBYA1ewBDBaA1ewBDBcA1ewBDBaA2cwBDBQA3cwBDBSA3cwBDBUA3cwBDBYA3
cwBDBSA4cwBDBaA4ewBDBcA4ewBDBeA4ewBDBQA5ewBDBSA5ewBDBUA5ewBDBWA5ewBDBYA5ewBD
BaA5ewBDBQA6cwBDBSA6cwBDBUA6cwBDBWA6cwBDBYA6cwBDBaA6cwBDBcA6cwBDBeA6cwBDBQA7
cwBDBWA7cwBDBYA7cwBDBaA7cwBDBaA8Cw5DBQA9ewBDBSA9ewBDBUA9ewBDBYA90w5PHMA90w5c
HAA+0w5nHEA+0w5wHIA+0w55HKA+0w6CHOA+0w6LHCA/0w6UHEA/0w6dHGA/0w6dHKA/0w6mHMA/
0w6vHOA/0w66HABA0w7IHEBA0w7RHGBA0w7RHIBA0w7aHMBA0w7jHABB0w7sHEBB0w71HIBB0w7+
HMBB0w4HHeBB0w4QHSBC0w4ZHWBC0w4iHaBC0w7YHcBC0w7YHQBD0w7hHSBD0w7hHUBD0w7qHYBD
0w7zHcBD0w78HQBE0w4FHkBE0w4OHmBE0w4OHoBE0w4XHqBE0w4XHuBE0w4gHiBF0w7IHiBF6w7R
HGBF0w7RHoBF0w7RHsBF0w7jHsBF6w7aHuBF6w7aHuBF0w7sHgBG0w77HgBG6w7RHCBG6w7RHCBG
0w77HkBG0w4EH4BG0w5wHKBG6w7aHqBG0w4NH+BG0w6UHCBH6w7CGiBH0w4YH2BH6w7aHmBH0w4h
H6BH0w4qH+BH0w7qHSBI0w4zHyBI6w7RHGBI0w48H6BI0w5FH2BL0w60IaBL6w7RHKBL0w69IcBL
0w69IcBL6w7RHABM0w7GIUBM0w77HkBM6w7RHGBM6w7RHGBM0w77HqBM0w7PIeBM0w7eIeBM6w7a
HiBN0w7RHGBN6w7nIWBN0w7wIeBN0w4qIgBO0w4qIkBO6w5dIkBO0w5mIoBO0w5vIsBO0w54IgBP
6w6BIgBP0w6KIkBP0w7eIUBP6w76ImBP6w7CGmBP0w6mHKBP0w4iHeBP0w7RHGBQ0w4tI4BQ0w4t
IwBR0w4iHUBR0w7OJIBR0w7aHMBR0w6LJeBR0w6LJWBS0w6pJ6BS0w7aHOBS0w6yJ9kCWBzbAloc
3QJaHOECWhzjAloc5QJaHOcCZRzrAloc7QJlHO8CWhzxAloc8wJlHPUCWhz3Aloc+QJaHPsCWhz9
Argc/wJaHAEDWhwDA1ocCQNaHAsDWhwNA1ocDwNaHBEDWhwTA1ocFQNaHBcDWhwZA2UcGwNlHB0D
WhwfA1ocIQNaHCMDWhwlA1ocKQNaHCsDWhwtA1ocLwNlHDEDWhwzA1ocNQNaHDcDWhw5A2UcOwNa
HD0DKx0/A1ocQQNaHEMDWhxFA1ocRwNlHEkDZRxNA1ocTwNaHFEDWhxTA1ocVQNaHFcDWhxZA1oc
WwNaHF0DWhxfA1ocZQNaHGcDWhxpA1gcawNYHG0DWhxvA1occwNlHHUDZRx3AxYfeQNaHHsDZRx9
A1ocfwNaHIEDFh+DA1ochQNlHIcDWhyJA1ociwNlHI0DZRyPA1ockQNaHJMDWhyVA1oclwNaHJkD
WhybA1ocnQNaHJ8DWhyhA1ocowNaHKUDWhynA1ocqQNaHKsDWhytA1ocsQNaHLMDWhy1A1octwNa
HLkDWhy7A1ocvQNaHL8DWhzVA2Uc2wNlHN0DWhzfA2Uc4QNaHOMDZRzlA1gc5wNaHOkDWhzrA1oc
7QNaHO8DWhzxA1oc8wNaHPUDWhz3A1oc+QNaHPsDWhz9A1oc/wNaHAEEWhwFBFocBwRaHAkEWhwL
BFocDQRaHA8EZRwRBFocEwRaHBUEWhwXBFocGQRaHBsEWhwfBFocIQRaHCMEWhwlBFocJwRaHCkE
Fh8rBFocLQRaHC8EWhwxBFocMwRaHDUEWhw3BCsdOQQWHzsEWhw/BFocQQRaHEMEKx1FBGUcRwRY
HFUEWhxXBFocWQRlHFsEWhxdBGUcfQURBiAIgAj2Cd0KngziDPoMLA1oDZsNrQ3FDbgOMw84Dz0P
VQ9lD4YPqQ+6D9QPFRAfEJUQzRDUEFcRhhG8EdsROBJLEmgSiRJIE+wT+hMbFGcU8RQzFRIWRxZa
FpAWoRbAFscW1xbiFu4WAhcIFw0XOBdfF2UXzxfoF+4XBhgWGFMYhRigGM8Y3BhuGcEZxxnLGc8Z
7RkCGkcahRq2GkEbhBsCAAEAAwAGAAQADwAFABEABgAVAAcAFwAIABwACQAoAAoAKwALAC8ADAA1
AA0AOgAOADsADwA/ABAARgARAE0AEgBZABMAZgAUAGoAFQByABYAdAAXAHcAGAB+ABkAgwAaAIUA
GwCHABwAjQAdAJIAHgCXACIAoQAjAKMAKACkACoAtwBHAL8ASADDAEsAxABMAMUAUQDGAFYAxwBh
AMgAdADJAAAA+wLKAAAA1gXQAAAA5wXQAAAA+QXWAAAAAgbfAAAAMghLAQAARQhLAQAAUQhPAQAA
WQhYAQAAugRhAQAAggBmAQAAXghPAQAAbghYAQAAgQhrAQAA3QhrAQAA4whLAQAAyglLAQAA0AlL
AQAA1glYAQAA5glrAQAA3QhrAQAAHwpLAQAA4QprAQAA5AprAQAA5wprAQAA6gprAQAA7QprAQAA
jw1LAQAAkwFLAQAARQhLAQAAqgFLAQAAmg1LAQAAqQ1LAQAAtg1LAQAAnwCZAQAAnwGeAQAAyw2j
AQAA1Q1rAQAA4A1rAQAACw5LAQAA4whLAQAAqQ1LAQAAPQPQAAAA+wLKAAAAQA7KAQAAsA9LAQAA
8xBLAQAA/RBLAQAABBFLAQAACRFLAQAAEBFLAQAAGBFLAQAACw5rAQAA2xFLAQAA4whLAQAAtAFL
AQAA5BHqAQAAcgBLAQAAwAALAgAARQhLAQAAtBJLAQAAZwAQAgAA+wLKAAAAOBVLAQAARRWQAgAA
QA7KAQAAVBOVAgAAWRVLAQAAYxWaAgAAyxZLAQAA2BZLAQAA4RZLAQAA6hZLAQAA9RZLAQAAWRVL
AQAA/hZLAQAArBhrAQAAtxhrAQAAxBhLAQAA0xhrAQAA3xhLAQAAtAFLAQAA7RhrAQAAqQ1LAQAA
8hhrAQAAHwpLAQAA1Q1rAQAA4A1rAQAAiB1LAQAAOBVLAQAAmR1LAQAAqR2jAQAAtR2jAQAAwx1L
AQAAVBOVAgAAzB1LAQAA2R1nAwAAWRVLAQAA6x1wAwAA9h1LAQAAAx5LAQAAvx5LAQAAzR5rAQAA
2h5rAQAAHwpLAQAA4whLAQAAeiBLAQAAHwpLAQAAhyBLAQAAlCBrAQAAoSBrAQAAsCBLAQAAvyBL
AQAA4whLAQAAyglLAQAAjiFLAQAAnCFLAQAAqiFLAQAACw5rAQAAGyNLAQAAJCNLAQAALiOjAQAA
NiOjAQAARiNrAQAAUyOjAQAAGyNLAQAAUyRLAQAAnCFLAQAAZSSEAwAAdyRLAQAAcgBLAQAA3Qhr
AQAAGyNLAQAAyCSkAwAAjw1LAQAAJCNLAQAARQhLAQAAqiFLAQAAmg1LAQAADyXIAwAA1Q1rAQAA
4A1rAQAAjw1LAQAAjiVrAQAAlSVrAQAA4whLAQAAyglLAQAAQCajAQAASSZrAQAAVCZLAQAADyhL
AQAAGyhLAQAAKihLAQAANShLAQAAPihrAQAAwx1LAQAAUShLAQAAWihLAQAAGyNLAQAAkwHgAwAA
tCoYBQAALSsdBQAAUSstBQAA+FwzHgAABV0+HgAAcgBrAQAAUQg+HgAAC11EHgAAaz1rAQAAF11I
HgAAIF0+HgAAfUZOHgAAKl1EHgAA7UxUHgAANV1EHgAAOl1EHgAAR11EHgAAWQg+HgAAUV1EHgAA
Vl1EHgAAHwpaHgAAWl1EHgAA4whLAQAA619OHwAAqExUHwAABV0+HgAAUQg+HgAAQwRaHwAAWQg+
HgAA818+HgAAp0XYIQAATWKjAQAA61+jAQAAW2JrAQAAF135IQAAEGNEHgAAy2OTIgAAF11aHgAA
FmREHgAAA01EHgAAEGY+HgAAIGY+HgIAAQADAAEAAgADAAEABAAFAAIAAwAFAAEABgAHAAIABQAH
AAIABwAJAAEACAAJAAEACgALAAIACQALAAEALQANAAIALAANAAIALgAPAAEALwAPAAIAMAARAAEA
MQARAAEAMwATAAIAMgATAAIANAAVAAEANQAVAAEANwAXAAIANgAXAAEAOQAZAAIAOAAZAAIAOgAb
AAEAOwAbAAIAPAAdAAEAPQAdAAEAQAAfAAIAPwAfAAIAQQAhAAEAQgAhAAIARAAjAAEARQAjAAEA
RwAlAAIARgAlAAIASAAnAAEASQAnAAIASgApAAEASwApAAEATgArAAIATQArAAIATwAtAAEAUAAt
AAEAUgAvAAIAUQAvAAEAVAAxAAIAUwAxAAIAVQAzAAEAVgAzAAIAVwA1AAEAWAA1AAEAWgA3AAIA
WQA3AAIAXAA5AAEAXQA5AAIAXgA7AAEAXwA7AAEAYQA9AAIAYAA9AAIAYgA/AAEAYwA/AAIAZABB
AAEAZQBBAAEAZwBDAAIAZgBDAAIAaABFAAEAaQBFAAIAagBHAAEAawBHAAEAbQBJAAIAbABJAAIA
bgBLAAEAbwBLAAIAcABNAAEAcQBNAAEAcwBPAAIAcgBPAAIAdQBRAAEAdgBRAAIAdwBTAAEAeABT
AAEAegBVAAIAeQBVAAIAfABXAAEAfQBXAAIAfgBZAAEAfwBZAAEAgQBbAAIAgABbAAIAggBdAAEA
gwBdAAIAkABfAAEAkQBfAAIAkgBhAAEAkwBhAAEAlQBjAAIAlABjAAEAlwBlAAIAlgBlAAIAmABn
AAEAmQBnAAEAmwBpAAIAmgBpAAEAngBrAAIAnQBrAAIAnwBtAAEAoABtAAIAoQBvAAEAogBvAAEA
pABxAAIAowBxAAIApQBzAAEApgBzAAEAqQB1AAIAqAB1AAEArAB3AAIAqwB3AAIArQB5AAEArgB5
AAIArwB7AAEAsAB7AAEAsgB9AAIAsQB9AAIAtQB/AAEAtgB/AAIAtwCBAAEAuACBAAEAugCDAAIA
uQCDAAIAuwCFAAEAvACFAAIAvQCHAAEAvgCHAAEAwACJAAIAvwCJAAIAxQCLAAEAxgCLAAEA0QCN
AAIA0ACNAAEA0wCPAAIA0gCPAAIA1ACRAAEA1QCRAAIA1gCTAAEA1wCTAAEA2QCVAAIA2ACVAAIA
2gCXAAEA2wCXAAIA3ACZAAEA3QCZAAEA4ACbAAIA3wCbAAIA4QCdAAEA4gCdAAIA4wCfAAEA5ACf
AAEA5gChAAIA5QChAAIA5wCjAAEA6ACjAAIA6QClAAEA6gClAAEA7ACnAAIA6wCnAAIA7QCpAAEA
7gCpAAIA7wCrAAEA8ACrAAEA8gCtAAIA8QCtAAIA8wCvAAEA9ACvAAIA9QCxAAEA9gCxAAEA/ACz
AAIA+wCzAAIA/QC1AAEA/gC1AAIA/wC3AAEAAAG3AAEAAgG5AAIAAQG5AAIAAwG7AAEABAG7AAEA
BgG9AAIABQG9AAIABwG/AAEACAG/AAEACgHBAAIACQHBAAEADAHDAAIACwHDAAIADQHFAAEADgHF
AAEAEAHHAAIADwHHAAEAEgHJAAIAEQHJAAIAEwHLAAEAFAHLAAIAMAHNAAEAMQHNAAEAMwHPAAIA
MgHPAAIANAHRAAEANQHRAAEANwHTAAIANgHTAAEAOQHVAAIAOAHVAAIAOgHXAAEAOwHXAAIAPAHZ
AAEAPQHZAAEAPwHbAAIAPgHbAAIAQAHdAAEAQQHdAAIAQgHfAAEAQwHfAAEARQHhAAIARAHhAAIA
RgHjAAEARwHjAAIASgHlAAEASwHlAAEATQHnAAIATAHnAAIATwHpAAEAUAHpAAEAUgHrAAIAUQHr
AAEAVAHtAAIAUwHtAAIAVQHvAAEAVgHvAAIAVwHxAAEAWAHxAAEAWgHzAAIAWQHzAAIAWwH1AAEA
XAH1AAIAXQH3AAEAXgH3AAEAYAH5AAIAXwH5AAIAYQH7AAEAYgH7AAIAZAH9AAEAZQH9AAEAZwH/
AAIAZgH/AAIAaAEBAQEAaQEBAQIAagEDAQEAawEDAQEAbQEFAQIAbAEFAQIAbwEHAQEAcAEHAQIA
cQEJAQEAcgEJAQEAdAELAQIAcwELAQIAdQENAQEAdgENAQIAeAEPAQEAeQEPAQEAewERAQIAegER
AQIAfAETAQEAfQETAQIAfgEVAQEAfwEVAQEAgQEXAQIAgAEXAQIAggEZAQEAgwEZAQEAhgEbAQIA
hQEbAQEAiAEdAQIAhwEdAQIAiQEfAQEAigEfAQIAiwEhAQEAjAEhAQEAjgEjAQIAjQEjAQIAkAEl
AQEAkQElAQIAkgEnAQEAkwEnAQEAlQEpAQIAlAEpAQIAlgErAQEAlwErAQIAmAEtAQEAmQEtAQEA
nAEvAQIAmwEvAQIAnQExAQEAngExAQIAnwEzAQEAoAEzAQEAogE1AQIAoQE1AQIAowE3AQEApAE3
AQIApQE5AQEApgE5AQEAqAE7AQIApwE7AQIAqQE9AQEAqgE9AQIAqwE/AQEArAE/AQIArQFBAQEA
rgFBAQIA3wFDAQEA4QFFAQIA4AFFAQIA4gFHAQIA7AFJAQIA8gFLAQIA9wFNAQIA+QFPAQIA+gFR
AQEA+wFRAQIAAAJTAQIAAgJVAQEAAwJVAQIABgJXAQIACgJZAQIADAJbAQIADwJdAQIAEQJfAQEA
FgJhAQIAFQJhAQEAGQJjAQIAGAJjAQIAGgJlAQIAHgJnAQIAIAJpAQIAIgJrAQEAIwJrAQIAJAJt
AQEAJQJtAQIAKwJvAQEALAJvAQEAMQJxAQIAMAJxAQIAMgJzAQIANAJ1AQIANwJ3AQIAPQJ5AQIA
PwJ7AQIAQQJ9AQIAWwJ/AQIAXQKBAQEAXgKBAQEAYwKDAQIAYgKDAQIAZQKFAQIAaQKHAQIAbwKJ
AQEAcAKJAQIAdgKLAQIAfwKNAQIAgwKPAQEAhAKPAQIAjgKRAQEAjwKRAQIAkwKTAQIAlwKVAe5E
WAVpBXYFqQXBBdsFAwYoB0kHdQeFB7IHxgffB+sHBQgVCFkIawgHCUoJUAlrCZcJzgnqCX0KhQq4
CskK2gvhCwAMGAwmDD4MYAxyDIwMGQ0yDTYOPQ5ODloObA59DokOlg6mDkYQUhBhEGgQCRERESMR
ORFKEc8RWRJgEtMS2hLrEv0SChMWEysTOxMNFM0U3xSGFZgVqRW1FcIV0hWoF7kXNBhGGBAZMBk/
GdUZZhpzGnoaHRspGzIbAAFpAdcSAQAAAfUB1xIBAASAAAABAAAATRu6cgAAAAAAAOYAAAAEAAAA
AAAAAAAAAAABAEQCAAAAAAQAAAAAAAAAAAAAAAEATQIAAAAACwAAAAAAAAAAAAAACgCSAgAAAAAE
AAAAAAAAAAAAAAABAK4EAAAAAAQAAAAAAAAAAAAAAAEAESoAAAAABAAAAAAAAAAAAAAAAQBfMQAA
AAAEAAAAAAAAAAAAAAABAPkxAAAAAAQAAAAAAAAAAAAAAP8GpTQAAAAABwAAAOQMAAAAAAAA/wZL
RwAAAAAEAAAAAAAAAAAAAAD/BmxMAAAAAAQAAAAAAAAAAAAAAAEAoE0AAAAACwAAAAAAAAAAAAAA
CgCiWAAAAAALAAAAAAAAAAAAAAAKAJVZAAAAAAAAAAABAAAAVGcAABMAEgAlACQAKwACACwAAgAt
AAIALgACAC8AAgAwAAIAMQACADIAAgAzAAIANAACADUAAgA6AAIAOwACADwAAgA9AAIAPgACAD8A
PgBAAAIAQgACAEMAAgBEAAoARQAKAEYACgBJAA8ASgAPAE4ADwBPAA8AUAAPAFIAEgBTABIAVAAS
AFUAEgBXABIAWAASAFkAEgBiABIAYwASAGgAEgBpAB8AagAfAGsAHwBsAB8AbgAfAG8AHwBwAB8A
cQAfAHIAHwBzAB8AdQAfAHcAHwB4AB8AeQAfAHoAHwB8ACQAAAAAAKcD/SkAAAAAtwP9KQAAAAC5
A/0pAAAAALsD/SlTAP4FUwAMBpsA/gWfACoJyQAqCcsAxQntAHIK+QCoCskA6gsfAcUJmwDFCSMB
xQmbACEMyQAvDJ8AOw22A00QIwFNEMkAWxBTAE0QtgPWESMB1hHLANYR7QDFCWUCxQlTABYUbwJW
FHsCxQkhA8UJ+QA5GS0DYxnLAGkZ+QBjGS0DORkhA2kZugMkGyMBJBvLACQbmwAkG8kAOxsAAAA8
TW9kdWxlPgBTVF9kZDE1YjFiYWNjZmI0NDQ0OGMwMTU2NzkwYjNlYWEyMC5kbGwARG9jdW1lbnRE
ZXNpZ25lcgBTVF9mMzkyMzNmYWMxNmU0MjZkOTkxZDkzMmY5ZWY3ZDg1OABUYWJsaXgAUm93AENv
bHVtbgBEYXRhQ2VsbABQb3NpdGlvbgBSZXBvcnRDb25maWd1cmF0aW9uAFJlcG9ydABJbXBvcnRF
eHBvcnQASW1wb3J0U3RhdHVzAFJ1bGUAUnVsZUNvbHVtbgBEYXRhSW1wb3J0AFNldHRsZW1lbnQA
U1RfZGQxNWIxYmFjY2ZiNDQ0NDhjMDE1Njc5MGIzZWFhMjAAU3VtbWFyeQBDaGFyZ2VUeXBlAFNu
YXBzaG90AFNjaGVkdWxlUGFyYW0AUmVwb3J0RmlsdGVyAEV4Y2VsU2hlZXRQYXJhbWV0ZXIAT3Zl
clJpZGVTdW1tYXJ5AEV4Y2VsU2hlZXRzAFNuYXBIaXN0b3J5AENlbGxBZGRyZXNzAEV4Y2VsRmls
ZQBSZXBvcnRTaGVldABSZXBvcnREYXRhAFBhcmFtZXRlcgBEYXRhU291cmNlAFRSTUFkZGluAFJl
ZmxlY3Rpb24ASUVOdW1lcmFibGVFeHRlbnNpb25zAFJlc291cmNlcwBTVF9kZDE1YjFiYWNjZmI0
NDQ0OGMwMTU2NzkwYjNlYWEyMC5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU2NyaXB0
UmVzdWx0cwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFZhbHVlVHlwZQBTeXN0ZW0uQ29uZmlndXJh
dGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRh
c2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBWU1RBUlRTY3JpcHRP
YmplY3RNb2RlbEJhc2UARW51bQBXb3JrYm9vawBNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhj
ZWwAZ2V0X1dvcmtib29rAHNldF9Xb3JrYm9vawBXb3Jrc2hlZXQAZ2V0X0ludm9pY2VXb3Jrc2hl
ZXQAc2V0X0ludm9pY2VXb3Jrc2hlZXQAZ2V0X1RlbXBsYXRlV29ya3NoZWV0AHNldF9UZW1wbGF0
ZVdvcmtzaGVldABTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBMaXN0YDEAZ2V0X1RhYmxpeGVz
AHNldF9UYWJsaXhlcwBnZXRfUmVwb3J0RGF0YXNldABzZXRfUmVwb3J0RGF0YXNldAAuY3RvcgBH
ZXRMaXN0T2ZEYXRhU2V0c1VzZWRCeUludm9pY2VTaGVldABHZXRJbnZvaWNlWE1MQnlJbnZvaWNl
U2hlZXQAUmFuZ2UAR2V0RGF0YVJvd0Zyb21JbnZvaWNlVGVtcGxhdGUAUHJlcGFySW1wb3J0RGF0
YQBQcmVwYXJlSW52b2ljZQBSZWN1cnNpdmVNZXJnZUNlbGxzAE1lcmdlQ2VsbHNBbmRBbGlnbgBT
eXN0ZW0uRGF0YQBEYXRhVGFibGUAR2V0R3JvdXBlZERhdGFUYWJsZQBEYXRhUm93AEdldERhdGFU
YWJsZQBEZWxldGVVc2VkUmFuZ2UAQ2xlYXJEYXRhUm93cwBVcGRhdGVUYWJsaXhFbmRSYW5nZQBV
cGRhdGVJbnZvaWNlWG1sQ29uZmlndXJhdGlvbgA8V29ya2Jvb2s+a19fQmFja2luZ0ZpZWxkADxJ
bnZvaWNlV29ya3NoZWV0PmtfX0JhY2tpbmdGaWVsZAA8VGVtcGxhdGVXb3Jrc2hlZXQ+a19fQmFj
a2luZ0ZpZWxkADxUYWJsaXhlcz5rX19CYWNraW5nRmllbGQAPFJlcG9ydERhdGFzZXQ+a19fQmFj
a2luZ0ZpZWxkAEludm9pY2VXb3Jrc2hlZXQAVGVtcGxhdGVXb3Jrc2hlZXQAVGFibGl4ZXMAUmVw
b3J0RGF0YXNldABnZXRfUmVwb3J0U2hlZXREYXRhc2V0AHNldF9SZXBvcnRTaGVldERhdGFzZXQA
Z2V0X0Rlc2NyaXB0aW9uAHNldF9EZXNjcmlwdGlvbgBnZXRfQ29sdW1ucwBzZXRfQ29sdW1ucwBn
ZXRfUm93cwBzZXRfUm93cwBnZXRfRGF0YVRhYmxlAHNldF9EYXRhVGFibGUAZ2V0X1Bvc2l0aW9u
AHNldF9Qb3NpdGlvbgBnZXRfQWdncmVnYXRpb25MaXN0AHNldF9BZ2dyZWdhdGlvbkxpc3QAZ2V0
X0VuZEFnZ3JlZ2F0aW9uTGlzdABzZXRfRW5kQWdncmVnYXRpb25MaXN0AGdldF9Sb3dJbmRleABz
ZXRfUm93SW5kZXgAPFJlcG9ydFNoZWV0RGF0YXNldD5rX19CYWNraW5nRmllbGQAPERlc2NyaXB0
aW9uPmtfX0JhY2tpbmdGaWVsZAA8Q29sdW1ucz5rX19CYWNraW5nRmllbGQAPFJvd3M+a19fQmFj
a2luZ0ZpZWxkADxEYXRhVGFibGU+a19fQmFja2luZ0ZpZWxkADxQb3NpdGlvbj5rX19CYWNraW5n
RmllbGQAPEFnZ3JlZ2F0aW9uTGlzdD5rX19CYWNraW5nRmllbGQAPEVuZEFnZ3JlZ2F0aW9uTGlz
dD5rX19CYWNraW5nRmllbGQAPFJvd0luZGV4PmtfX0JhY2tpbmdGaWVsZABSZXBvcnRTaGVldERh
dGFzZXQARGVzY3JpcHRpb24AQ29sdW1ucwBSb3dzAEFnZ3JlZ2F0aW9uTGlzdABFbmRBZ2dyZWdh
dGlvbkxpc3QAUm93SW5kZXgAZ2V0X0luZGV4AHNldF9JbmRleABnZXRfTmFtZQBzZXRfTmFtZQA8
SW5kZXg+a19fQmFja2luZ0ZpZWxkADxOYW1lPmtfX0JhY2tpbmdGaWVsZABJbmRleABOYW1lAGdl
dF9MYWJlbABzZXRfTGFiZWwAZ2V0X0ZpZWxkAHNldF9GaWVsZABnZXRfQWdncmVnYXRpb25Sb3dz
AHNldF9BZ2dyZWdhdGlvblJvd3MAZ2V0X0dyb3VwaW5nSW5kZXgAc2V0X0dyb3VwaW5nSW5kZXgA
PExhYmVsPmtfX0JhY2tpbmdGaWVsZAA8RmllbGQ+a19fQmFja2luZ0ZpZWxkADxBZ2dyZWdhdGlv
blJvd3M+a19fQmFja2luZ0ZpZWxkADxHcm91cGluZ0luZGV4PmtfX0JhY2tpbmdGaWVsZABMYWJl
bABGaWVsZABBZ2dyZWdhdGlvblJvd3MAR3JvdXBpbmdJbmRleABnZXRfVmFsdWUAc2V0X1ZhbHVl
ADxWYWx1ZT5rX19CYWNraW5nRmllbGQAVmFsdWUAZ2V0X1IxAHNldF9SMQBnZXRfUjIAc2V0X1Iy
AGdldF9DMQBzZXRfQzEAZ2V0X0MyAHNldF9DMgBnZXRfRW5kUmFuZ2UAc2V0X0VuZFJhbmdlADxS
MT5rX19CYWNraW5nRmllbGQAPFIyPmtfX0JhY2tpbmdGaWVsZAA8QzE+a19fQmFja2luZ0ZpZWxk
ADxDMj5rX19CYWNraW5nRmllbGQAPEVuZFJhbmdlPmtfX0JhY2tpbmdGaWVsZABSMQBSMgBDMQBD
MgBFbmRSYW5nZQBnZXRfUmVwb3J0TmFtZQBzZXRfUmVwb3J0TmFtZQBnZXRfUmVwb3J0U2hlZXQA
c2V0X1JlcG9ydFNoZWV0AGdldF9QYXJhbWV0ZXIAc2V0X1BhcmFtZXRlcgBnZXRfUGFyYW1ldGVy
U2hlZXQAc2V0X1BhcmFtZXRlclNoZWV0AGdldF9QYXJhbXNldEhhc2gAc2V0X1BhcmFtc2V0SGFz
aABnZXRfQ29ubmVjdGlvbklkZW50aWZpZXIAc2V0X0Nvbm5lY3Rpb25JZGVudGlmaWVyAGdldF9S
ZXBvcnQAc2V0X1JlcG9ydABnZXRfUmVwb3J0RGF0YQBzZXRfUmVwb3J0RGF0YQBnZXRfTmV3UmVw
b3J0AHNldF9OZXdSZXBvcnQAZ2V0X1BhcmFtc2V0SWQAc2V0X1BhcmFtc2V0SWQAZ2V0X1RhYmxp
eElkAHNldF9UYWJsaXhJZAA8UmVwb3J0TmFtZT5rX19CYWNraW5nRmllbGQAPFJlcG9ydFNoZWV0
PmtfX0JhY2tpbmdGaWVsZAA8UGFyYW1ldGVyPmtfX0JhY2tpbmdGaWVsZAA8UGFyYW1ldGVyU2hl
ZXQ+a19fQmFja2luZ0ZpZWxkADxQYXJhbXNldEhhc2g+a19fQmFja2luZ0ZpZWxkADxDb25uZWN0
aW9uSWRlbnRpZmllcj5rX19CYWNraW5nRmllbGQAPFJlcG9ydD5rX19CYWNraW5nRmllbGQAPFJl
cG9ydERhdGE+a19fQmFja2luZ0ZpZWxkADxOZXdSZXBvcnQ+a19fQmFja2luZ0ZpZWxkADxQYXJh
bXNldElkPmtfX0JhY2tpbmdGaWVsZAA8VGFibGl4SWQ+a19fQmFja2luZ0ZpZWxkAFJlcG9ydE5h
bWUAUGFyYW1ldGVyU2hlZXQAUGFyYW1zZXRIYXNoAENvbm5lY3Rpb25JZGVudGlmaWVyAE5ld1Jl
cG9ydABQYXJhbXNldElkAFRhYmxpeElkAGdldF9JZABzZXRfSWQAPElkPmtfX0JhY2tpbmdGaWVs
ZABJZABnZXRfV29ya3NoZWV0AHNldF9Xb3Jrc2hlZXQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFNx
bENvbm5lY3Rpb24AZ2V0X1NxbENvbm5lY3Rpb24Ac2V0X1NxbENvbm5lY3Rpb24AZ2V0X1Byb2Nl
c3NUYWJsZU5hbWUAc2V0X1Byb2Nlc3NUYWJsZU5hbWUAcHJvY2Vzc0lkAEdldERhdGFJbXBvcnRD
b25maWd1cmF0aW9uT2ZXb3Jrc2hlZXQAQ2hlY2tJZlJ1bGVJc0NoYW5nZWQAUnVuAEV4ZWN1dGVJ
bXBvcnQAR2V0UnVsZUlkAENyZWF0ZURhdGFUYWJsZQBCdWlsZERhdGFUYWJsZQBEdW1wRGF0YVRh
YmxlAENyZWF0ZVByb2Nlc3NUYWJsZQBEZWxldGVFbXB0eVJvd3NPZlRhYmxlADxXb3Jrc2hlZXQ+
a19fQmFja2luZ0ZpZWxkADxTcWxDb25uZWN0aW9uPmtfX0JhY2tpbmdGaWVsZAA8UHJvY2Vzc1Rh
YmxlTmFtZT5rX19CYWNraW5nRmllbGQAUHJvY2Vzc1RhYmxlTmFtZQBnZXRfRXJyb3JDb2RlAHNl
dF9FcnJvckNvZGUAZ2V0X01vZHVsZQBzZXRfTW9kdWxlAGdldF9BcmVhAHNldF9BcmVhAGdldF9T
dGF0dXMAc2V0X1N0YXR1cwBnZXRfTWVzc2FnZQBzZXRfTWVzc2FnZQBnZXRfUmVjb21tZW5kYXRp
b24Ac2V0X1JlY29tbWVuZGF0aW9uADxFcnJvckNvZGU+a19fQmFja2luZ0ZpZWxkADxNb2R1bGU+
a19fQmFja2luZ0ZpZWxkADxBcmVhPmtfX0JhY2tpbmdGaWVsZAA8U3RhdHVzPmtfX0JhY2tpbmdG
aWVsZAA8TWVzc2FnZT5rX19CYWNraW5nRmllbGQAPFJlY29tbWVuZGF0aW9uPmtfX0JhY2tpbmdG
aWVsZABFcnJvckNvZGUATW9kdWxlAEFyZWEAU3RhdHVzAE1lc3NhZ2UAUmVjb21tZW5kYXRpb24A
Z2V0X0NhdGVnb3J5AHNldF9DYXRlZ29yeQBnZXRfRGF0YVNvdXJjZQBzZXRfRGF0YVNvdXJjZQBn
ZXRfUnVsZUNvbHVtbkxpc3QAc2V0X1J1bGVDb2x1bW5MaXN0ADxDYXRlZ29yeT5rX19CYWNraW5n
RmllbGQAPERhdGFTb3VyY2U+a19fQmFja2luZ0ZpZWxkADxSdWxlQ29sdW1uTGlzdD5rX19CYWNr
aW5nRmllbGQAQ2F0ZWdvcnkAUnVsZUNvbHVtbkxpc3QAZ2V0X0NvbHVtbgBzZXRfQ29sdW1uADxD
b2x1bW4+a19fQmFja2luZ0ZpZWxkAGdldF9SdWxlAHNldF9SdWxlAGdldF9JbXBvcnRTaGVldABz
ZXRfSW1wb3J0U2hlZXQAZ2V0X1RhYmxpeABzZXRfVGFibGl4ADxSdWxlPmtfX0JhY2tpbmdGaWVs
ZAA8SW1wb3J0U2hlZXQ+a19fQmFja2luZ0ZpZWxkADxUYWJsaXg+a19fQmFja2luZ0ZpZWxkAElt
cG9ydFNoZWV0AE1ldGVyAERlYWwAUHJpY2UAVWRTcWwAR2V0V2luZG93VGhyZWFkUHJvY2Vzc0lk
AGdldF9Eb2N1bWVudFBhdGgAc2V0X0RvY3VtZW50UGF0aABnZXRfU2V0dGxlbWVudFBhcmFtZXRl
cgBzZXRfU2V0dGxlbWVudFBhcmFtZXRlcgBTeXN0ZW0uRGF0YS5PbGVEYgBPbGVEYkNvbm5lY3Rp
b24AZ2V0X09sZURiQ29ubmVjdGlvbgBzZXRfT2xlRGJDb25uZWN0aW9uAGdldF9Qcm9jZXNzSWQA
c2V0X1Byb2Nlc3NJZABJUHJvY2Vzc0lkAGV4Y2VsQ2FsY0ZpbGUASXNDYWxjUHJvY2VzcwBHZXRD
b250cmFjdEV4Y2VsRmlsZQBEb3dubG9hZENvbnRyYWN0RXhjZWxUZW1wbGF0ZQBnZXRfQ2hhcmdl
VHlwZXMAc2V0X0NoYXJnZVR5cGVzAFNxbENvbW1hbmQARXhlY3V0ZUNvbW1hbmQAUGFyc2VTZXR0
bGVtZW50UGFyYW1ldGVyAFByZXBhcmUAQ2xlYXJEYXRhQ29tcG9uZW5ldFdvcmtzaGVldERhdGEA
QmluZFJlcG9ydABDcmVhdGVTdW1tYXJ5U2hlZXQAPERvY3VtZW50UGF0aD5rX19CYWNraW5nRmll
bGQAPFNldHRsZW1lbnRQYXJhbWV0ZXI+a19fQmFja2luZ0ZpZWxkADxPbGVEYkNvbm5lY3Rpb24+
a19fQmFja2luZ0ZpZWxkADxQcm9jZXNzSWQ+a19fQmFja2luZ0ZpZWxkADxDaGFyZ2VUeXBlcz5r
X19CYWNraW5nRmllbGQARG9jdW1lbnRQYXRoAFNldHRsZW1lbnRQYXJhbWV0ZXIAUHJvY2Vzc0lk
AENoYXJnZVR5cGVzAGdldF9Db3VudGVycGFydHkAc2V0X0NvdW50ZXJwYXJ0eQBnZXRfQ29udHJh
Y3QAc2V0X0NvbnRyYWN0AGdldF9Qcm9kRGF0ZQBzZXRfUHJvZERhdGUAZ2V0X1Byb2REYXRlVG8A
c2V0X1Byb2REYXRlVG8AZ2V0X0FzT2ZEYXRlAHNldF9Bc09mRGF0ZQBnZXRfQ3JlYXRlVGVtcGxh
dGUAc2V0X0NyZWF0ZVRlbXBsYXRlADxDb3VudGVycGFydHk+a19fQmFja2luZ0ZpZWxkADxDb250
cmFjdD5rX19CYWNraW5nRmllbGQAPFByb2REYXRlPmtfX0JhY2tpbmdGaWVsZAA8UHJvZERhdGVU
bz5rX19CYWNraW5nRmllbGQAPEFzT2ZEYXRlPmtfX0JhY2tpbmdGaWVsZAA8Q3JlYXRlVGVtcGxh
dGU+a19fQmFja2luZ0ZpZWxkAENvdW50ZXJwYXJ0eQBDb250cmFjdABQcm9kRGF0ZQBQcm9kRGF0
ZVRvAEFzT2ZEYXRlAENyZWF0ZVRlbXBsYXRlAGdldF9Db250cmFjdElkAHNldF9Db250cmFjdElk
AGdldF9DaGFyZ2VUeXBlSWQAc2V0X0NoYXJnZVR5cGVJZABnZXRfQ2hhcmdlVHlwZU5hbWUAc2V0
X0NoYXJnZVR5cGVOYW1lAGdldF9HcmFudWxhcml0eQBzZXRfR3JhbnVsYXJpdHkAZ2V0X0RhdGFD
b21wb25lbnQAc2V0X0RhdGFDb21wb25lbnQAZ2V0X1R5cGUAc2V0X1R5cGUAZ2V0X0Zvcm11bGFJ
ZABzZXRfRm9ybXVsYUlkADxDb250cmFjdElkPmtfX0JhY2tpbmdGaWVsZAA8Q2hhcmdlVHlwZUlk
PmtfX0JhY2tpbmdGaWVsZAA8Q2hhcmdlVHlwZU5hbWU+a19fQmFja2luZ0ZpZWxkADxHcmFudWxh
cml0eT5rX19CYWNraW5nRmllbGQAPERhdGFDb21wb25lbnQ+a19fQmFja2luZ0ZpZWxkADxUeXBl
PmtfX0JhY2tpbmdGaWVsZAA8Rm9ybXVsYUlkPmtfX0JhY2tpbmdGaWVsZABDb250cmFjdElkAENo
YXJnZVR5cGVJZABDaGFyZ2VUeXBlTmFtZQBHcmFudWxhcml0eQBEYXRhQ29tcG9uZW50AFR5cGUA
Rm9ybXVsYUlkAGdldF9SZXBvcnRSZXBvc2l0b3J5AHNldF9SZXBvcnRSZXBvc2l0b3J5AGdldF9T
Y2hlZHVsZXJGb2xkZXIAc2V0X1NjaGVkdWxlckZvbGRlcgBnZXRfU3luY2hyb25pemUAc2V0X1N5
bmNocm9uaXplAGdldF9JbWFnZVNuYXBzaG90AHNldF9JbWFnZVNuYXBzaG90AGdldF9Vc2VyTmFt
ZQBzZXRfVXNlck5hbWUAZ2V0X0V4Y2VsUmVwbGljYQBzZXRfRXhjZWxSZXBsaWNhAGdldF9WaWV3
UmVwb3J0RmlsdGVycwBzZXRfVmlld1JlcG9ydEZpbHRlcnMAZ2V0X0V4Y2VsU2hlZXQAc2V0X0V4
Y2VsU2hlZXQAZ2V0X0V4cG9ydEZvcm1hdABzZXRfRXhwb3J0Rm9ybWF0AGdldF9BcHBsaWVkRmls
dGVyc0xhYmVsAHNldF9BcHBsaWVkRmlsdGVyc0xhYmVsAEFwcGxpY2F0aW9uAENyZWF0ZVJlcGxp
Y2EARGVsZXRlUmVwbGljYQBQYXJzZVZpZXdSZXBvcnRGaWx0ZXJYTWwAQ2hlY2tJZlNoZWV0RXhp
c3RzAFN5bmNocm9uaXplRXhjZWwAS2lsbEV4Y2VsUHJvY2VzcwBHZXRSZXBvcnREZWZpbml0aW9u
AE92ZXJSaWRlVmlld0ZpbHRlcgBJc1ZhbGlkRGF0ZQBCaW5kUmVjb3JkU2V0VG9Xb3JrU2hlZXQA
Q2hhbmdlUGl2b3RTb3VyY2VEYXRhQ2FjaGUAU2F2ZVdvcmtzaGVldFNuYXBzaG90AEZpbmRBbmRS
ZXBsYWNlU2lnbmF0dXJlSW1hZ2UAR2V0VXNlclNpZ25hdHVyZQBQdWJsaXNoU25hcHNob3QAU2F2
ZURvY3VtZW50AENyZWF0ZURvY3VtZW50AENyZWF0ZVBERkRvY3VtZW50AENyZWF0ZUV4Y2VsRG9j
dW1lbnQAQ3JlYXRlV29yZERvY3VtZW50AENyZWF0ZVBOR0RvY3VtZW50AFVwZGF0ZVNuYXBzaG90
SGlzdG9yeQBEZWxldGVTbmFwc2hvdABHZXRXb3Jrc2hlZXRGcm9tV29ya0Jvb2sAVGVybWluYXRl
RXhjZWwAPFJlcG9ydFJlcG9zaXRvcnk+a19fQmFja2luZ0ZpZWxkADxTY2hlZHVsZXJGb2xkZXI+
a19fQmFja2luZ0ZpZWxkADxTeW5jaHJvbml6ZT5rX19CYWNraW5nRmllbGQAPEltYWdlU25hcHNo
b3Q+a19fQmFja2luZ0ZpZWxkADxVc2VyTmFtZT5rX19CYWNraW5nRmllbGQAPEV4Y2VsUmVwbGlj
YT5rX19CYWNraW5nRmllbGQAPFZpZXdSZXBvcnRGaWx0ZXJzPmtfX0JhY2tpbmdGaWVsZAA8RXhj
ZWxTaGVldD5rX19CYWNraW5nRmllbGQAPEV4cG9ydEZvcm1hdD5rX19CYWNraW5nRmllbGQAPEFw
cGxpZWRGaWx0ZXJzTGFiZWw+a19fQmFja2luZ0ZpZWxkAFJlcG9ydFJlcG9zaXRvcnkAU2NoZWR1
bGVyRm9sZGVyAFN5bmNocm9uaXplAEltYWdlU25hcHNob3QAVXNlck5hbWUARXhjZWxSZXBsaWNh
AFZpZXdSZXBvcnRGaWx0ZXJzAEV4Y2VsU2hlZXQARXhwb3J0Rm9ybWF0AEFwcGxpZWRGaWx0ZXJz
TGFiZWwAZ2V0X1BhcmFtZXRlck5hbWUAc2V0X1BhcmFtZXRlck5hbWUAZ2V0X1NjaGVkdWxlVHlw
ZQBzZXRfU2NoZWR1bGVUeXBlAGdldF9EYXkAc2V0X0RheQA8UGFyYW1ldGVyTmFtZT5rX19CYWNr
aW5nRmllbGQAPFNjaGVkdWxlVHlwZT5rX19CYWNraW5nRmllbGQAPERheT5rX19CYWNraW5nRmll
bGQAUGFyYW1ldGVyTmFtZQBTY2hlZHVsZVR5cGUARGF5AGdldF9EaXNwbGF5TGFiZWwAc2V0X0Rp
c3BsYXlMYWJlbABnZXRfRGlzcGxheVZhbHVlAHNldF9EaXNwbGF5VmFsdWUAZ2V0X092ZXJyaWRl
VHlwZQBzZXRfT3ZlcnJpZGVUeXBlAGdldF9BZGp1c3RtZW50RGF5cwBzZXRfQWRqdXN0bWVudERh
eXMAZ2V0X0FkanVzdG1lbnRUeXBlAHNldF9BZGp1c3RtZW50VHlwZQBnZXRfQnVzaW5lc3NEYXkA
c2V0X0J1c2luZXNzRGF5AFJlc29sdmVEeW5hbWljRGF0ZQA8RGlzcGxheUxhYmVsPmtfX0JhY2tp
bmdGaWVsZAA8RGlzcGxheVZhbHVlPmtfX0JhY2tpbmdGaWVsZAA8T3ZlcnJpZGVUeXBlPmtfX0Jh
Y2tpbmdGaWVsZAA8QWRqdXN0bWVudERheXM+a19fQmFja2luZ0ZpZWxkADxBZGp1c3RtZW50VHlw
ZT5rX19CYWNraW5nRmllbGQAPEJ1c2luZXNzRGF5PmtfX0JhY2tpbmdGaWVsZABEaXNwbGF5TGFi
ZWwARGlzcGxheVZhbHVlAE92ZXJyaWRlVHlwZQBBZGp1c3RtZW50RGF5cwBBZGp1c3RtZW50VHlw
ZQBCdXNpbmVzc0RheQBnZXRfRXhjZWxGaWxlTmFtZQBzZXRfRXhjZWxGaWxlTmFtZQBnZXRfQXBw
bGllZEZpbHRlcgBzZXRfQXBwbGllZEZpbHRlcgBnZXRfU3BhUmZ4UXVlcnkAc2V0X1NwYVJmeFF1
ZXJ5ADxFeGNlbEZpbGVOYW1lPmtfX0JhY2tpbmdGaWVsZAA8QXBwbGllZEZpbHRlcj5rX19CYWNr
aW5nRmllbGQAPFNwYVJmeFF1ZXJ5PmtfX0JhY2tpbmdGaWVsZABFeGNlbEZpbGVOYW1lAEFwcGxp
ZWRGaWx0ZXIAU3BhUmZ4UXVlcnkAZ2V0X0ZpbGVOYW1lAHNldF9GaWxlTmFtZQBnZXRfU2hlZXRO
YW1lAHNldF9TaGVldE5hbWUAZ2V0X1B1Ymxpc2gAc2V0X1B1Ymxpc2gAZ2V0X01haW50YWluSGlz
dG9yeQBzZXRfTWFpbnRhaW5IaXN0b3J5AGdldF9Eb2N1bWVudFR5cGUAc2V0X0RvY3VtZW50VHlw
ZQBnZXRfU2hvd0RhdGFUYWJzAHNldF9TaG93RGF0YVRhYnMAPEZpbGVOYW1lPmtfX0JhY2tpbmdG
aWVsZAA8U2hlZXROYW1lPmtfX0JhY2tpbmdGaWVsZAA8UHVibGlzaD5rX19CYWNraW5nRmllbGQA
PE1haW50YWluSGlzdG9yeT5rX19CYWNraW5nRmllbGQAPERvY3VtZW50VHlwZT5rX19CYWNraW5n
RmllbGQAPFNob3dEYXRhVGFicz5rX19CYWNraW5nRmllbGQARmlsZU5hbWUAU2hlZXROYW1lAFB1
Ymxpc2gATWFpbnRhaW5IaXN0b3J5AERvY3VtZW50VHlwZQBTaG93RGF0YVRhYnMAZ2V0X1NuYXBz
aG90U2hlZXROYW1lAHNldF9TbmFwc2hvdFNoZWV0TmFtZQBEYXRlVGltZQBnZXRfUmVmcmVzaGRh
RGF0ZVRpbWUAc2V0X1JlZnJlc2hkYURhdGVUaW1lAGdldF9TbmFwc2hvdEZpbGVOYW1lAHNldF9T
bmFwc2hvdEZpbGVOYW1lADxTbmFwc2hvdFNoZWV0TmFtZT5rX19CYWNraW5nRmllbGQAPFJlZnJl
c2hkYURhdGVUaW1lPmtfX0JhY2tpbmdGaWVsZAA8U25hcHNob3RGaWxlTmFtZT5rX19CYWNraW5n
RmllbGQAU25hcHNob3RTaGVldE5hbWUAUmVmcmVzaGRhRGF0ZVRpbWUAU25hcHNob3RGaWxlTmFt
ZQBnZXRfUmVwb3J0U2hlZXRzAHNldF9SZXBvcnRTaGVldHMAPFJlcG9ydFNoZWV0cz5rX19CYWNr
aW5nRmllbGQAUmVwb3J0U2hlZXRzAGdldF9QYXJhbWV0ZXJzAHNldF9QYXJhbWV0ZXJzADxQYXJh
bWV0ZXJzPmtfX0JhY2tpbmdGaWVsZABQYXJhbWV0ZXJzAGdldF9QYWdlSUQAc2V0X1BhZ2VJRABn
ZXRfUmVwb3J0U3RhdHVzSWQAc2V0X1JlcG9ydFN0YXR1c0lkADxQYWdlSUQ+a19fQmFja2luZ0Zp
ZWxkADxSZXBvcnRTdGF0dXNJZD5rX19CYWNraW5nRmllbGQAUGFnZUlEAFJlcG9ydFN0YXR1c0lk
AGdldF9PcHRpb25hbABzZXRfT3B0aW9uYWwAZ2V0X0RhdGF0eXBlSWQAc2V0X0RhdGF0eXBlSWQA
Z2V0X1ZhbHVlcwBzZXRfVmFsdWVzADxPcHRpb25hbD5rX19CYWNraW5nRmllbGQAPERhdGF0eXBl
SWQ+a19fQmFja2luZ0ZpZWxkADxWYWx1ZXM+a19fQmFja2luZ0ZpZWxkAE9wdGlvbmFsAERhdGF0
eXBlSWQAVmFsdWVzAGdldF9EaXNwbGF5TmFtZQBzZXRfRGlzcGxheU5hbWUAZ2V0X0FwcGxpY2F0
aW9uVVJMAHNldF9BcHBsaWNhdGlvblVSTABnZXRfU2VydmVyTmFtZQBzZXRfU2VydmVyTmFtZQBn
ZXRfRGF0YWJhc2UAc2V0X0RhdGFiYXNlAGdldF9BdXRoZW50aWNhdGlvblR5cGUAc2V0X0F1dGhl
bnRpY2F0aW9uVHlwZQBnZXRfUGFzc3dvcmQAc2V0X1Bhc3N3b3JkAGdldF9QYXNzd29yZFRSTQBz
ZXRfUGFzc3dvcmRUUk0APERpc3BsYXlOYW1lPmtfX0JhY2tpbmdGaWVsZAA8QXBwbGljYXRpb25V
Ukw+a19fQmFja2luZ0ZpZWxkADxTZXJ2ZXJOYW1lPmtfX0JhY2tpbmdGaWVsZAA8RGF0YWJhc2U+
a19fQmFja2luZ0ZpZWxkADxBdXRoZW50aWNhdGlvblR5cGU+a19fQmFja2luZ0ZpZWxkADxQYXNz
d29yZD5rX19CYWNraW5nRmllbGQAPFBhc3N3b3JkVFJNPmtfX0JhY2tpbmdGaWVsZABEaXNwbGF5
TmFtZQBBcHBsaWNhdGlvblVSTABTZXJ2ZXJOYW1lAERhdGFiYXNlAEF1dGhlbnRpY2F0aW9uVHlw
ZQBQYXNzd29yZABQYXNzd29yZFRSTQBHZXRTcWxDb25uZWN0aW9uAFByb2Nlc3NJRABFeGVjdXRl
UXVlcnkATGlzdEFsbENvbmZpZ3VyYXRpb25zAEdldFJlcG9ydERhdGFzZXRDb2x1bW5zAENvbnZl
cnRUb0Zvcm11bGEAR2V0SW52b2ljZVRlbXBsYXRlV29ya1NoZWV0AEF1dG9GaWxsAE1ha2VTYW1l
SGVpZ2h0V2lkdGgAR2V0Q29sdW1uSW5kZXgASW1wb3J0U2hlZXRIYXNGb3JtdWxhAENlbGxIYXNG
b3JtdWxhAERlbGV0ZUVudGlyZUNvbnRlbnRzAENvcHlFbnRpcmVDb250ZW50cwBJc1NoZWV0Qmlu
ZFRvSW1wb3J0UnVsZQBHZXRTaGVldERvY3VtZW50VHlwZQBUcnVuY2F0ZVN0cmluZwBBZGRXb3Jr
U2hlZXQAR2V0V29ya1NwYWNlUmFuZ2UARmlsbE9iamVjdFdpdGhQcm9wZXJ0eQBUb0ludABUb1N0
cmluZzIAS2lsbEV4Y2VsAERlc2VyaWFsaXplWG1sAFQAVG9EYXRlVGltZQBUb0Jvb2wAU3lzdGVt
LlhtbC5MaW5xAFhFbGVtZW50AEVuY3J5cHQARGVjcnlwdABJRW51bWVyYWJsZWAxAFN5c3RlbS5E
YXRhLkNvbW1vbgBEYkRhdGFSZWFkZXIARnJvbURhdGFSZWFkZXIAU3FsRGF0YVJlYWRlcgBGcm9t
T2xlUmVhZGVyAE9sZURiRGF0YVJlYWRlcgBTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdl
cgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1
bHR1cmUAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJl
AGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AF9wc1N5bmNocm9uaXplAF9wc0lt
YWdlU25hcHNob3QAX3BzRXhjZWxTaGVldElkAF9wc1VzZXJOYW1lAF9wc1Byb2Nlc3NJZABfcHNF
eHBvcnRGb3JtYXQAX3BzU2V0dGxlbWVudENhbGMATWFpbgBHZXRDb25uZWN0aW9uAHZhbHVlX18A
U3VjY2VzcwBGYWlsdXJlAHZhbHVlAHdvcmtzaGVldAB3b3JrYm9vawB0YWJsaXgAcm93SW5kZXgA
ZGF0YUltcG9ydABjb2x1bW5TdGFydFJhbmdlAGNvbHVtbkVuZFJhbmdlAHN0YXJ0AGVuZABjb2x1
bW5Ub01lcmdlAGZpcnNSb3cAZmlyc3RDb2x1bW4AbGFzdFJvdwBsYXN0Q29sdW1uAGRhdGFUYWJs
ZQBhZ2dyZWdhdGlvbkNvbHVtbnMAZ3JvdXBlZERhdGFSb3cAc2VsZWN0ZWRDb2x1bW5zAHBzVGFi
bGl4AGludm9pY2VYbWxTZXR0aW5ncwBzZWxlY3RlZFJ1bGUAZHQAdGFibGVOYW1lAGhXbmQAbHBk
d1Byb2Nlc3NJZABTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMAT3V0QXR0cmlidXRlAHNx
bENvbm5lY3Rpb24Ab2xlRGJDb25uZWN0aW9uAHNxbENvbW1hbmQAd29ya3NoZWV0TGlzdABkZWxl
dGVTdW1tYXJ5U2hlZXQAZGF0YUNvbXBvbmVudABzcWxRdWVyeQBpc1RlbXBsYXRlAHNldHRsZW1l
bnRDYWxjAF9vbGVEYkNvbm5lY3Rpb24AZXhwb3J0Rm9ybWF0AHNvdXJjZUZpbGVOYW1lAGRlbGV0
ZUZpbGUAd2IAc2hlZXROYW1lAGV4Y2VsRmlsZU5hbWUAaVByb2Nlc3NJZAB4bEFwcAByZXBvcnRO
YW1lAHNwYVJmeFF1ZXJ5AHdzAGZpbGVuYW1lAGNvbm5lY3Rpb24Ab3ZlclJpZGVTdW1tYXJ5AGhp
c3RvcnkAYXBwAHVzZXJOYW1lAGFycldvcmtzaGVldHMAZmlsZU5hbWUAb2xlZGJDb25uZWN0aW9u
U3RyaW5nAHNxbAB3b3Jrc2hlZXROYW1lAGZvcm11bGEAcG9zaXRpb24AZG9jdW1lbnRXb3Jrc2hl
ZXQAdGVtcGxhdGVXb3Jrc2hlZXQAY29sdW1uTmFtZQB0YWJsaXhQb3NpdGlvbgByb3cAY29sdW1u
AHNvdXJjZVdvcmtzaGVldABkZXN0aW5hdGlvbldvcmtzaGVldABpbXBvcnRTaGVldABsZW5ndGgA
d29ya1NoZWV0TmFtZQB2aXNpYmxlAG9iamVjdFRvAHByb3BlcnR5TmFtZQBwcm9wZXJ0eVZhbHVl
AGluZGV4AHhtbENvbnRlbnQAeG1sUm9vdEF0dHJpYnV0ZQB4RWxlbWVudAB0b0VuY3J5cHQAdXNl
SGFzaGluZwBjaXBoZXJTdHJpbmcAbGlzdABkcgBjb25zdHJpbmcAU3lzdGVtLlJ1bnRpbWUuVmVy
c2lvbmluZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1i
bHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29u
ZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9k
dWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJr
QXR0cmlidXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1
dGUAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25z
QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFN5c3RlbS5Db3JlAEV4dGVu
c2lvbkF0dHJpYnV0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBfV29ya3NoZWV0AEVudW1l
cmF0b3IAR2V0RW51bWVyYXRvcgBnZXRfQ3VycmVudABNb3ZlTmV4dABJRGlzcG9zYWJsZQBEaXNw
b3NlADw+Y19fRGlzcGxheUNsYXNzOQBTeXN0ZW0uWG1sAFhtbEF0dHJpYnV0ZQBncm91cE5hbWUA
PEdldExpc3RPZkRhdGFTZXRzVXNlZEJ5SW52b2ljZVNoZWV0PmJfXzUAeAA8PmNfX0Rpc3BsYXlD
bGFzc2IAQ1MkPD44X19sb2NhbHNhAGFnZ05hbWUAPEdldExpc3RPZkRhdGFTZXRzVXNlZEJ5SW52
b2ljZVNoZWV0PmJfXzYAPD5jX19EaXNwbGF5Q2xhc3NkADxHZXRMaXN0T2ZEYXRhU2V0c1VzZWRC
eUludm9pY2VTaGVldD5iX183AFhtbE5vZGUAU3RyaW5nAG9wX0VxdWFsaXR5AFhtbERvY3VtZW50
AExvYWRYbWwAWG1sTm9kZUxpc3QAR2V0RWxlbWVudHNCeVRhZ05hbWUAU3lzdGVtLkNvbGxlY3Rp
b25zAElFbnVtZXJhdG9yAGdldF9DaGlsZE5vZGVzAFhtbEVsZW1lbnQAR2V0QXR0cmlidXRlTm9k
ZQBnZXRfSGFzQXR0cmlidXRlcwBBZGQAU2VsZWN0Tm9kZXMARnVuY2AyAFN5c3RlbS5MaW5xAEVu
dW1lcmFibGUARmlyc3RPckRlZmF1bHQAPEdldEludm9pY2VYTUxCeUludm9pY2VTaGVldD5vX19T
aXRlQ29udGFpbmVyZgBDYWxsU2l0ZWAxAEZ1bmNgMwBDYWxsU2l0ZQA8PnBfX1NpdGUxMABGdW5j
YDQAPD5wX19TaXRlMTEAPD5wX19TaXRlMTIAPD5wX19TaXRlMTMAPD5wX19TaXRlMTQAPD5wX19T
aXRlMTUAPD5wX19TaXRlMTYAPD5wX19TaXRlMTcAZ2V0X1VzZWRSYW5nZQBSdW50aW1lVHlwZUhh
bmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBNaWNyb3NvZnQuQ1NoYXJwAE1pY3Jvc29mdC5DU2hhcnAu
UnVudGltZUJpbmRlcgBDU2hhcnBBcmd1bWVudEluZm8AQ1NoYXJwQXJndW1lbnRJbmZvRmxhZ3MA
Q3JlYXRlAEJpbmRlcgBDYWxsU2l0ZUJpbmRlcgBDU2hhcnBCaW5kZXJGbGFncwBTeXN0ZW0uTGlu
cS5FeHByZXNzaW9ucwBFeHByZXNzaW9uVHlwZQBVbmFyeU9wZXJhdGlvbgBUYXJnZXQAQmluYXJ5
T3BlcmF0aW9uAFRvTG93ZXIASW52b2tlTWVtYmVyAEdldE1lbWJlcgBnZXRfQ2VsbHMASW50MzIA
Z2V0X19EZWZhdWx0AEludm9rZQBDb252ZXJ0AGdldF9Db3VudAA8R2V0RGF0YVJvd0Zyb21JbnZv
aWNlVGVtcGxhdGU+b19fU2l0ZUNvbnRhaW5lcjE4ADw+cF9fU2l0ZTE5ADw+cF9fU2l0ZTFhAGdl
dF9SYW5nZQBFeGNlcHRpb24APFByZXBhckltcG9ydERhdGE+b19fU2l0ZUNvbnRhaW5lcjFjAEFj
dGlvbmAzADw+cF9fU2l0ZTFkADw+cF9fU2l0ZTFlADw+cF9fU2l0ZTFmADw+cF9fU2l0ZTIwADw+
cF9fU2l0ZTIxADw+cF9fU2l0ZTIyADw+cF9fU2l0ZTIzADw+Y19fRGlzcGxheUNsYXNzMmIAZmll
bGROYW1lADxQcmVwYXJJbXBvcnREYXRhPmJfXzI2ADxQcmVwYXJJbXBvcnREYXRhPmJfXzI0AENT
JDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGUyOAA8UHJlcGFySW1wb3J0RGF0YT5i
X18yNQBjdXJyZW50AHBzQ29sdW1uAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdh
dGUyOQA8UHJlcGFySW1wb3J0RGF0YT5iX18yNwB5AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGUyYQBvcF9JbmVxdWFsaXR5AENvbmNhdABXaGVyZQBBZ2dyZWdhdGUAQ2hhcgBU
cmltRW5kAFNwbGl0AERhdGFDb2x1bW5Db2xsZWN0aW9uAERhdGFDb2x1bW4AVG9TdHJpbmcAc2V0
X0NhcHRpb24AZ2V0X0l0ZW0AZ2V0X0NhcHRpb24ASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UA
RGF0YVJvd0NvbGxlY3Rpb24AVG9BcnJheQBTZWxlY3QASXNOdWxsT3JFbXB0eQBTZXRNZW1iZXIA
PEdldERhdGFSb3dGcm9tSW52b2ljZVRlbXBsYXRlPm9fX1NpdGVDb250YWluZXIyZAA8PnBfX1Np
dGUyZQA8PnBfX1NpdGUyZgA8UHJlcGFyZUludm9pY2U+b19fU2l0ZUNvbnRhaW5lcjMzADw+cF9f
U2l0ZTM0ADw+cF9fU2l0ZTM1ADw+cF9fU2l0ZTM2ADw+cF9fU2l0ZTM3ADw+cF9fU2l0ZTM4ADw+
cF9fU2l0ZTM5ADw+cF9fU2l0ZTNhADw+cF9fU2l0ZTNiADw+cF9fU2l0ZTNjADw+cF9fU2l0ZTNk
ADw+cF9fU2l0ZTNlADw+cF9fU2l0ZTNmADw+cF9fU2l0ZTQwADw+cF9fU2l0ZTQxADw+cF9fU2l0
ZTQyADw+cF9fU2l0ZTQzADw+cF9fU2l0ZTQ0ADw+cF9fU2l0ZTQ1ADw+cF9fU2l0ZTQ2ADw+cF9f
U2l0ZTQ3ADw+cF9fU2l0ZTQ4ADw+cF9fU2l0ZTQ5ADw+cF9fU2l0ZTRhADw+cF9fU2l0ZTRiADw+
cF9fU2l0ZTRjADw+cF9fU2l0ZTRkADw+cF9fU2l0ZTRlADw+cF9fU2l0ZTRmADw+cF9fU2l0ZTUw
ADw+cF9fU2l0ZTUxADw+cF9fU2l0ZTUyADw+cF9fU2l0ZTUzADw+cF9fU2l0ZTU0ADw+cF9fU2l0
ZTU1ADw+Y19fRGlzcGxheUNsYXNzNmEAPFByZXBhcmVJbnZvaWNlPmJfXzVhADw+Y19fRGlzcGxh
eUNsYXNzNmMAPFByZXBhcmVJbnZvaWNlPmJfXzVjADxQcmVwYXJlSW52b2ljZT5iX181NgBDUyQ8
PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlNjEAPFByZXBhcmVJbnZvaWNlPmJfXzU3
AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU2MgA8UHJlcGFyZUludm9pY2U+
Yl9fNTgAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTYzADxQcmVwYXJlSW52
b2ljZT5iX181OQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlNjQAPFByZXBh
cmVJbnZvaWNlPmJfXzViAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU2NQA8
UHJlcGFyZUludm9pY2U+Yl9fNWQAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0
ZTY2ADxQcmVwYXJlSW52b2ljZT5iX181ZQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERl
bGVnYXRlNjcAPFByZXBhcmVJbnZvaWNlPmJfXzVmAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGU2OAA8UHJlcGFyZUludm9pY2U+Yl9fNjAAQ1MkPD45X19DYWNoZWRBbm9ueW1v
dXNNZXRob2REZWxlZ2F0ZTY5AE1pc3NpbmcAWGxJbnNlcnRTaGlmdERpcmVjdGlvbgBYbEluc2Vy
dEZvcm1hdE9yaWdpbgBJbnNlcnQAQ29weQBQYXN0ZQBnZXRfSXRlbUFycmF5AENvdW50AElPcmRl
cmVkRW51bWVyYWJsZWAxAE9yZGVyQnkAQWRkUmFuZ2UASUVudW1lcmF0b3JgMQBnZXRfVmFsdWUy
AFN0YXJ0c1dpdGgAQm9vbGVhbgBYbFBhc3RlVHlwZQBYbFBhc3RlU3BlY2lhbE9wZXJhdGlvbgBQ
YXN0ZVNwZWNpYWwAPFJlY3Vyc2l2ZU1lcmdlQ2VsbHM+b19fU2l0ZUNvbnRhaW5lcjZmADw+cF9f
U2l0ZTcwADw+cF9fU2l0ZTcxADw+cF9fU2l0ZTcyAEFjdGlvbmAyADw+cF9fU2l0ZTczAEZ1bmNg
NQA8PnBfX1NpdGU3NAA8PnBfX1NpdGU3NQA8PnBfX1NpdGU3NgA8PnBfX1NpdGU3NwA8PnBfX1Np
dGU3OAA8PmNfX0Rpc3BsYXlDbGFzczgzAHZhbHVlcwA8PmNfX0Rpc3BsYXlDbGFzczg3AENTJDw+
OF9fbG9jYWxzODQAaQA8UmVjdXJzaXZlTWVyZ2VDZWxscz5iX183YgA8UmVjdXJzaXZlTWVyZ2VD
ZWxscz5iX183ZAA8UmVjdXJzaXZlTWVyZ2VDZWxscz5iX183OQBDUyQ8PjlfX0NhY2hlZEFub255
bW91c01ldGhvZERlbGVnYXRlN2YAPFJlY3Vyc2l2ZU1lcmdlQ2VsbHM+Yl9fN2EAQ1MkPD45X19D
YWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTgwADxSZWN1cnNpdmVNZXJnZUNlbGxzPmJfXzdj
AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU4MQA8UmVjdXJzaXZlTWVyZ2VD
ZWxscz5iX183ZQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlODIARGlzdGlu
Y3QAVG9MaXN0AE1pbgBNYXgAR2V0SW5kZXgAPE1lcmdlQ2VsbHNBbmRBbGlnbj5vX19TaXRlQ29u
dGFpbmVyODkAPD5wX19TaXRlOGEAPD5wX19TaXRlOGIAPD5wX19TaXRlOGMAPD5wX19TaXRlOGQA
RGF0YVZpZXcAc2V0X1NvcnQAVG9UYWJsZQA8PmNfX0Rpc3BsYXlDbGFzczkyADw+Y19fRGlzcGxh
eUNsYXNzOTQAYXJyQWdnADxHZXREYXRhVGFibGU+Yl9fOGUAQ1MkPD44X19sb2NhbHM5MwBzADxH
ZXREYXRhVGFibGU+Yl9fOGYAPEdldERhdGFUYWJsZT5iX185MABwAENTJDw+OV9fQ2FjaGVkQW5v
bnltb3VzTWV0aG9kRGVsZWdhdGU5MQBQcmVkaWNhdGVgMQBGaW5kAFRvQ2hhckFycmF5AEZvcm1h
dABnZXRfQ29sdW1uTmFtZQBJbXBvcnRSb3cAPERlbGV0ZVVzZWRSYW5nZT5vX19TaXRlQ29udGFp
bmVyOTYAPD5wX19TaXRlOTcAPD5wX19TaXRlOTgAZ2V0X0VudGlyZVJvdwBYbERlbGV0ZVNoaWZ0
RGlyZWN0aW9uAERlbGV0ZQA8Q2xlYXJEYXRhUm93cz5vX19TaXRlQ29udGFpbmVyOTkAPD5wX19T
aXRlOWEAPD5wX19TaXRlOWIAWG1sQXR0cmlidXRlQ29sbGVjdGlvbgBnZXRfQXR0cmlidXRlcwBn
ZXRfSXRlbU9mAGdldF9Jbm5lclhtbAA8VXBkYXRlSW52b2ljZVhtbENvbmZpZ3VyYXRpb24+b19f
U2l0ZUNvbnRhaW5lcjlkADw+cF9fU2l0ZTllADw+cF9fU2l0ZTlmADw+cF9fU2l0ZWEwADw+cF9f
U2l0ZWExADw+cF9fU2l0ZWEyADw+cF9fU2l0ZWEzAFN0cnVjdExheW91dEF0dHJpYnV0ZQBMYXlv
dXRLaW5kADxHZXREYXRhSW1wb3J0Q29uZmlndXJhdGlvbk9mV29ya3NoZWV0Pm9fX1NpdGVDb250
YWluZXI1ADw+cF9fU2l0ZTYAPD5wX19TaXRlNwA8PnBfX1NpdGU4ADw+cF9fU2l0ZTkAPD5wX19T
aXRlYQA8PnBfX1NpdGViADw+cF9fU2l0ZWMAPD5wX19TaXRlZAA8PnBfX1NpdGVlADw+cF9fU2l0
ZWYASUVudW1lcmFibGUAPD5wX19TaXRlMTgAPD5wX19TaXRlMWIAPD5wX19TaXRlMWMARXhlY3V0
ZVJlYWRlcgBSZWFkADxDcmVhdGVEYXRhVGFibGU+b19fU2l0ZUNvbnRhaW5lcjFmAGdldF9UZXh0
ADxCdWlsZERhdGFUYWJsZT5vX19TaXRlQ29udGFpbmVyMjQAPD5wX19TaXRlMjUAc2V0X0l0ZW0A
U3FsRGF0YUFkYXB0ZXIAU3FsQ29tbWFuZEJ1aWxkZXIAR2V0SW5zZXJ0Q29tbWFuZABzZXRfSW5z
ZXJ0Q29tbWFuZABEYkRhdGFBZGFwdGVyAFVwZGF0ZQBHZXROYW1lAGdldF9GaWVsZENvdW50AENs
b3NlAFJlcGxhY2UARGxsSW1wb3J0QXR0cmlidXRlAHVzZXIzMi5kbGwARGJDb25uZWN0aW9uAENv
bm5lY3Rpb25TdGF0ZQBnZXRfU3RhdGUAT3BlbgBnZXRfSGFzUm93cwBHdWlkAEdldFR5cGVGcm9t
Q0xTSUQAQWN0aXZhdG9yAENyZWF0ZUluc3RhbmNlAF9BcHBsaWNhdGlvbgBnZXRfSHduZABJbnRQ
dHIAb3BfRXhwbGljaXQAc2V0X1Zpc2libGUAc2V0X0Rpc3BsYXlBbGVydHMAV29ya2Jvb2tzAGdl
dF9Xb3JrYm9va3MAPERvd25sb2FkQ29udHJhY3RFeGNlbFRlbXBsYXRlPm9fX1NpdGVDb250YWlu
ZXIwADw+cF9fU2l0ZTEAPD5jX19EaXNwbGF5Q2xhc3M2ADxEb3dubG9hZENvbnRyYWN0RXhjZWxU
ZW1wbGF0ZT5iX18zADxEb3dubG9hZENvbnRyYWN0RXhjZWxUZW1wbGF0ZT5iX18yAENTJDw+OV9f
Q2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU0AEZvbnQAZ2V0X0ZvbnQAc2V0X0JvbGQAX1dv
cmtib29rAFhsU2F2ZUFzQWNjZXNzTW9kZQBTYXZlQXMAUXVpdABnZXRfQ29ubmVjdGlvblN0cmlu
ZwA8UHJlcGFyZT5vX19TaXRlQ29udGFpbmVyOQA8UHJlcGFyZT5iX19kAENTJDw+OV9fQ2FjaGVk
QW5vbnltb3VzTWV0aG9kRGVsZWdhdGVlAFJlZnJlc2hBbGwAPEJpbmRSZXBvcnQ+b19fU2l0ZUNv
bnRhaW5lcmYAQURPREIAQ29ubmVjdGlvbkNsYXNzAFJlY29yZHNldENsYXNzAENvbW1hbmRDbGFz
cwBfQ29ubmVjdGlvbgBzZXRfQ29ubmVjdGlvblN0cmluZwBfUmVjb3Jkc2V0AEN1cnNvclR5cGVF
bnVtAExvY2tUeXBlRW51bQBGaWVsZHMAZ2V0X0ZpZWxkcwBzZXRfVmFsdWUyAENvcHlGcm9tUmVj
b3Jkc2V0AENvbm5lY3Rpb24AUmVjb3Jkc2V0ADxDcmVhdGVTdW1tYXJ5U2hlZXQ+b19fU2l0ZUNv
bnRhaW5lcjEyADxDcmVhdGVTdW1tYXJ5U2hlZXQ+Yl9fMjEAQ1MkPD45X19DYWNoZWRBbm9ueW1v
dXNNZXRob2REZWxlZ2F0ZTIyAEF1dG9GaXQAT2xlRGJDb21tYW5kAFN5c3RlbS5JTwBGaWxlAEV4
aXN0cwBUcmltAFNoZWV0cwBnZXRfV29ya3NoZWV0cwA8U3luY2hyb25pemVFeGNlbD5vX19TaXRl
Q29udGFpbmVyMwA8PnBfX1NpdGU0ADw+cF9fU2l0ZTUAPD5wX19TaXRlMjQAPD5wX19TaXRlMjYA
Z2V0X05vdwBTeXN0ZW0uRGlhZ25vc3RpY3MAUHJvY2VzcwBHZXRQcm9jZXNzQnlJZABLaWxsAERi
Q29tbWFuZABDb21tYW5kVHlwZQBzZXRfQ29tbWFuZFR5cGUAPD5jX19EaXNwbGF5Q2xhc3MyYQBw
TmFtZQA8T3ZlclJpZGVWaWV3RmlsdGVyPmJfXzI4AENvbnRhaW5zAEZpcnN0AFRyaW1TdGFydABF
bmRzV2l0aAA8QmluZFJlY29yZFNldFRvV29ya1NoZWV0Pm9fX1NpdGVDb250YWluZXIyYwA8PnBf
X1NpdGUyZAA8PnBfX1NpdGUzMAA8PnBfX1NpdGUzMQA8PnBfX1NpdGUzMgA8PnBfX1NpdGUzMwA8
QmluZFJlY29yZFNldFRvV29ya1NoZWV0PmJfXzNiAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0
aG9kRGVsZWdhdGUzYwBDbGVhckNvbnRlbnRzAENsZWFyRm9ybWF0cwBBY3RpdmF0ZQBzZXRfTnVt
YmVyRm9ybWF0ADxDaGFuZ2VQaXZvdFNvdXJjZURhdGFDYWNoZT5vX19TaXRlQ29udGFpbmVyM2QA
UGl2b3RUYWJsZQBVbnByb3RlY3QAUGl2b3RUYWJsZXMAZ2V0X1NvdXJjZURhdGEASW5kZXhPZgBT
dWJzdHJpbmcAc2V0X1NvdXJjZURhdGEAPFNhdmVXb3Jrc2hlZXRTbmFwc2hvdD5vX19TaXRlQ29u
dGFpbmVyNDEAPD5jX19EaXNwbGF5Q2xhc3M0NAA8PjRfX3RoaXMAPFNhdmVXb3Jrc2hlZXRTbmFw
c2hvdD5iX180MwBTeXN0ZW0uVGhyZWFkaW5nAFRocmVhZFN0YXJ0AFRocmVhZABBcGFydG1lbnRT
dGF0ZQBTZXRBcGFydG1lbnRTdGF0ZQBTdGFydABTbGVlcAA8RmluZEFuZFJlcGxhY2VTaWduYXR1
cmVJbWFnZT5vX19TaXRlQ29udGFpbmVyNDYAWGxGaW5kTG9va0luAFhsTG9va0F0AFhsU2VhcmNo
T3JkZXIAWGxTZWFyY2hEaXJlY3Rpb24ARG91YmxlAGdldF9MZWZ0AGdldF9Ub3AARmlsZVN0cmVh
bQBPcGVuUmVhZABTeXN0ZW0uRHJhd2luZwBJbWFnZQBTdHJlYW0ARnJvbVN0cmVhbQBnZXRfV2lk
dGgAZ2V0X0hlaWdodABTaGFwZXMAZ2V0X1NoYXBlcwBTaGFwZQBNc29UcmlTdGF0ZQBNaWNyb3Nv
ZnQuT2ZmaWNlLkNvcmUAQWRkUGljdHVyZQBJbnRlcmlvcgBnZXRfSW50ZXJpb3IAQ29sb3IAZ2V0
X1doaXRlAHNldF9Db2xvcgA8UHVibGlzaFNuYXBzaG90Pm9fX1NpdGVDb250YWluZXI1MgA8PmNf
X0Rpc3BsYXlDbGFzczU1ADxQdWJsaXNoU25hcHNob3Q+Yl9fNTQAWGxQaWN0dXJlQXBwZWFyYW5j
ZQBYbENvcHlQaWN0dXJlRm9ybWF0AENvcHlQaWN0dXJlAFN5c3RlbS5XaW5kb3dzLkZvcm1zAENs
aXBib2FyZABHZXRJbWFnZQBCaXRtYXAAU3lzdGVtLkRyYXdpbmcuSW1hZ2luZwBJbWFnZUZvcm1h
dABnZXRfUG5nAFNhdmUAWGxTaGVldFZpc2liaWxpdHkAWGxGaXhlZEZvcm1hdFR5cGUARXhwb3J0
QXNGaXhlZEZvcm1hdAA8Q3JlYXRlUE5HRG9jdW1lbnQ+b19fU2l0ZUNvbnRhaW5lcjU3ADw+cF9f
U2l0ZTU4ADw+cF9fU2l0ZTU5AFBhdGgAR2V0RmlsZU5hbWUARXhlY3V0ZU5vblF1ZXJ5AE5ld0d1
aWQAPExpc3RBbGxDb25maWd1cmF0aW9ucz5vX19TaXRlQ29udGFpbmVyMAA8PnBfX1NpdGUyADw+
cF9fU2l0ZTMAPEdldFJlcG9ydERhdGFzZXRDb2x1bW5zPm9fX1NpdGVDb250YWluZXIxNwBnZXRf
SW52YXJpYW50Q3VsdHVyZQBJRm9ybWF0UHJvdmlkZXIAPEdldEludm9pY2VUZW1wbGF0ZVdvcmtT
aGVldD5vX19TaXRlQ29udGFpbmVyMWUAPD5wX19TaXRlMjcAPD5wX19TaXRlMjgAPEF1dG9GaWxs
Pm9fX1NpdGVDb250YWluZXIyOQA8PnBfX1NpdGUyYQA8PnBfX1NpdGUyYgA8PnBfX1NpdGUyYwBn
ZXRfSGFzRm9ybXVsYQBYbEF1dG9GaWxsVHlwZQA8TWFrZVNhbWVIZWlnaHRXaWR0aD5vX19TaXRl
Q29udGFpbmVyMzAAZ2V0X0NvbHVtbldpZHRoAHNldF9Db2x1bW5XaWR0aABnZXRfUm93SGVpZ2h0
AHNldF9Sb3dIZWlnaHQAPEdldENvbHVtbkluZGV4Pm9fX1NpdGVDb250YWluZXIzNQA8R2V0Q29s
dW1uSW5kZXg+b19fU2l0ZUNvbnRhaW5lcjNiADxJbXBvcnRTaGVldEhhc0Zvcm11bGE+b19fU2l0
ZUNvbnRhaW5lcjQxADxDZWxsSGFzRm9ybXVsYT5vX19TaXRlQ29udGFpbmVyNDUAPERlbGV0ZUVu
dGlyZUNvbnRlbnRzPm9fX1NpdGVDb250YWluZXI0OABDaGFydE9iamVjdABDaGFydE9iamVjdHMA
PENvcHlFbnRpcmVDb250ZW50cz5vX19TaXRlQ29udGFpbmVyNGYAWGxDZWxsVHlwZQBTcGVjaWFs
Q2VsbHMAPElzU2hlZXRCaW5kVG9JbXBvcnRSdWxlPm9fX1NpdGVDb250YWluZXI1MgA8PnBfX1Np
dGU1NgA8PnBfX1NpdGU1NwA8R2V0U2hlZXREb2N1bWVudFR5cGU+b19fU2l0ZUNvbnRhaW5lcjU4
ADw+cF9fU2l0ZTVhADw+cF9fU2l0ZTViADw+cF9fU2l0ZTVjADw+cF9fU2l0ZTVkADw+cF9fU2l0
ZTVlADw+cF9fU2l0ZTVmADw+cF9fU2l0ZTYwAGdldF9MZW5ndGgAPEFkZFdvcmtTaGVldD5vX19T
aXRlQ29udGFpbmVyNjEAPD5wX19TaXRlNjIAPEdldFdvcmtTcGFjZVJhbmdlPm9fX1NpdGVDb250
YWluZXI2NwA8PnBfX1NpdGU2OAA8PnBfX1NpdGU2OQA8R2V0V29ya1NwYWNlUmFuZ2U+Yl9fNmEA
Q1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTczADxHZXRXb3JrU3BhY2VSYW5n
ZT5iX182YgBDUyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlNzQAPEdldFdvcmtT
cGFjZVJhbmdlPmJfXzZjAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU3NQA8
R2V0V29ya1NwYWNlUmFuZ2U+Yl9fNmQAQ1MkPD45X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxl
Z2F0ZTc2ADxHZXRXb3JrU3BhY2VSYW5nZT5iX182ZQBDUyQ8PjlfX0NhY2hlZEFub255bW91c01l
dGhvZERlbGVnYXRlNzcAPEdldFdvcmtTcGFjZVJhbmdlPmJfXzZmAENTJDw+OV9fQ2FjaGVkQW5v
bnltb3VzTWV0aG9kRGVsZWdhdGU3OAA8R2V0V29ya1NwYWNlUmFuZ2U+Yl9fNzAAQ1MkPD45X19D
YWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTc5ADxHZXRXb3JrU3BhY2VSYW5nZT5iX183MQBD
UyQ8PjlfX0NhY2hlZEFub255bW91c01ldGhvZERlbGVnYXRlN2EAPEdldFdvcmtTcGFjZVJhbmdl
PmJfXzcyAENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU3YgBYbFJlZmVyZW5j
ZVN0eWxlAGdldF9BZGRyZXNzTG9jYWwAVG9JbnQzMgBMYXN0T3JEZWZhdWx0AFByb3RlY3QAZ2V0
X1RvcExlZnRDZWxsAGdldF9Cb3R0b21SaWdodENlbGwAVGhlbkJ5AEdldFR5cGUAUHJvcGVydHlJ
bmZvAEdldFByb3BlcnR5AFNldFZhbHVlAFN0cmluZ1JlYWRlcgBTeXN0ZW0uWG1sLlNlcmlhbGl6
YXRpb24AWG1sUm9vdEF0dHJpYnV0ZQBYbWxTZXJpYWxpemVyAFRleHRSZWFkZXIARGVzZXJpYWxp
emUAVG9Cb29sZWFuAFN5c3RlbS5UZXh0AEVuY29kaW5nAGdldF9VVEY4AEdldEJ5dGVzAFN5c3Rl
bS5TZWN1cml0eS5DcnlwdG9ncmFwaHkATUQ1Q3J5cHRvU2VydmljZVByb3ZpZGVyAEhhc2hBbGdv
cml0aG0AQ29tcHV0ZUhhc2gAQ2xlYXIAVHJpcGxlREVTQ3J5cHRvU2VydmljZVByb3ZpZGVyAFN5
bW1ldHJpY0FsZ29yaXRobQBzZXRfS2V5AENpcGhlck1vZGUAc2V0X01vZGUAUGFkZGluZ01vZGUA
c2V0X1BhZGRpbmcASUNyeXB0b1RyYW5zZm9ybQBDcmVhdGVFbmNyeXB0b3IAVHJhbnNmb3JtRmlu
YWxCbG9jawBUb0Jhc2U2NFN0cmluZwBGcm9tQmFzZTY0U3RyaW5nAENyZWF0ZURlY3J5cHRvcgBH
ZXRTdHJpbmcAR2V0R2VuZXJpY0FyZ3VtZW50cwBHZXRTY2hlbWFUYWJsZQBDaGFuZ2VUeXBlAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5D
b21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3Rh
dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBTVEFUaHJlYWRBdHRy
aWJ1dGUAPD5jX19EaXNwbGF5Q2xhc3M4ADxNYWluPmJfXzIAPE1haW4+Yl9fMAA8TWFpbj5iX18x
AENTJDw+OV9fQ2FjaGVkQW5vbnltb3VzTWV0aG9kRGVsZWdhdGU1ADxNYWluPmJfXzMAQ1MkPD45
X19DYWNoZWRBbm9ueW1vdXNNZXRob2REZWxlZ2F0ZTYAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0
cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBWYXJpYWJsZXMAZ2V0X1ZhcmlhYmxlcwBWYXJpYWJsZQBFdmVudHNPYmplY3RXcmFw
cGVyAGdldF9FdmVudHMAZ2V0X1N0YWNrVHJhY2UARW1wdHkARmlyZUVycm9yAHNldF9UYXNrUmVz
dWx0AFRvVXBwZXIAQ29ubmVjdGlvbnMAZ2V0X0Nvbm5lY3Rpb25zAENvbm5lY3Rpb25NYW5hZ2Vy
AGdldF9Jbm5lck9iamVjdABNaWNyb3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBlcgBJRFRTQ29ubmVjdGlvbk1hbmFnZXJE
YXRhYmFzZVBhcmFtZXRlcnMxMDAAR2V0Q29ubmVjdGlvbkZvclNjaGVtYQBXb3JrYm9va0V2ZW50
c19FdmVudABHdWlkQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbUltcG9ydEF0
dHJpYnV0ZQBDb0NsYXNzQXR0cmlidXRlAERvY0V2ZW50c19FdmVudABfVnRibEdhcDFfNwBEaXNw
SWRBdHRyaWJ1dGUAUm93QWJzb2x1dGUAQ29sdW1uQWJzb2x1dGUAUmVmZXJlbmNlU3R5bGUARXh0
ZXJuYWwAUmVsYXRpdmVUbwBfVnRibEdhcDJfNQBEZXN0aW5hdGlvbgBfVnRibEdhcDNfMQBfVnRi
bEdhcDRfNQBfVnRibEdhcDVfMwBfVnRibEdhcDZfMgBfVnRibEdhcDdfMQBfVnRibEdhcDhfMQBE
YXRhAE1heFJvd3MATWF4Q29sdW1ucwBBcHBlYXJhbmNlAF9WdGJsR2FwOV82AENvbHVtbkluZGV4
AHNldF9fRGVmYXVsdABTaGlmdABfVnRibEdhcDEwXzcAX1Z0YmxHYXAxMV80AFdoYXQAQWZ0ZXIA
TG9va0luAExvb2tBdABTZWFyY2hPcmRlcgBTZWFyY2hEaXJlY3Rpb24ATWF0Y2hDYXNlAE1hdGNo
Qnl0ZQBTZWFyY2hGb3JtYXQAX1Z0YmxHYXAxMl8yAF9WdGJsR2FwMTNfMTgAX1Z0YmxHYXAxNF84
AENvcHlPcmlnaW4AX1Z0YmxHYXAxNV8zAF9WdGJsR2FwMTZfMTMAX1Z0YmxHYXAxN18yAGdldF9O
dW1iZXJGb3JtYXQAX1Z0YmxHYXAxOF8yNgBfVnRibEdhcDE5XzEzAF9WdGJsR2FwMjBfNgBfVnRi
bEdhcDIxXzEAX1Z0YmxHYXAyMl82AFJhbmdlVmFsdWVEYXRhVHlwZQBfVnRibEdhcDIzXzI0AE9w
ZXJhdGlvbgBTa2lwQmxhbmtzAFRyYW5zcG9zZQBBZGRyZXNzTG9jYWwAQ2VsbHMAQ29sdW1uV2lk
dGgAX0RlZmF1bHQARW50aXJlUm93AEhhc0Zvcm11bGEATGVmdABOdW1iZXJGb3JtYXQAUm93SGVp
Z2h0AFRleHQAVG9wAFZhbHVlMgBEZWZhdWx0TWVtYmVyQXR0cmlidXRlAEludGVyZmFjZVR5cGVB
dHRyaWJ1dGUAQ29tSW50ZXJmYWNlVHlwZQBBcHBFdmVudHNfRXZlbnQAX1Z0YmxHYXAxXzMATENJ
RENvbnZlcnNpb25BdHRyaWJ1dGUAX1Z0YmxHYXAyXzcAUkhTAF9WdGJsR2FwM18xNwBnZXRfVmlz
aWJsZQBfVnRibEdhcDRfMTAAX1Z0YmxHYXA1XzQAX1Z0YmxHYXA2XzM2AExpbmsAX1Z0YmxHYXA3
XzIAQ2VsbDEAQ2VsbDIAX1Z0YmxHYXA5XzEAX1Z0YmxHYXAxMF8xNABfVnRibEdhcDExXzI0AERy
YXdpbmdPYmplY3RzAENvbnRlbnRzAFNjZW5hcmlvcwBVc2VySW50ZXJmYWNlT25seQBBbGxvd0Zv
cm1hdHRpbmdDZWxscwBBbGxvd0Zvcm1hdHRpbmdDb2x1bW5zAEFsbG93Rm9ybWF0dGluZ1Jvd3MA
QWxsb3dJbnNlcnRpbmdDb2x1bW5zAEFsbG93SW5zZXJ0aW5nUm93cwBBbGxvd0luc2VydGluZ0h5
cGVybGlua3MAQWxsb3dEZWxldGluZ0NvbHVtbnMAQWxsb3dEZWxldGluZ1Jvd3MAQWxsb3dTb3J0
aW5nAEFsbG93RmlsdGVyaW5nAEFsbG93VXNpbmdQaXZvdFRhYmxlcwBfVnRibEdhcDEyXzcARmls
ZW5hbWUAUXVhbGl0eQBJbmNsdWRlRG9jUHJvcGVydGllcwBJZ25vcmVQcmludEFyZWFzAEZyb20A
VG8AT3BlbkFmdGVyUHVibGlzaABGaXhlZEZvcm1hdEV4dENsYXNzUHRyAFZpc2libGUAVXNlZFJh
bmdlAHhsU2hpZnREb3duAHhsU2hpZnRUb1JpZ2h0AHhsRm9ybWF0RnJvbUxlZnRPckFib3ZlAHhs
Rm9ybWF0RnJvbVJpZ2h0T3JCZWxvdwB4bFBhc3RlQWxsAHhsUGFzdGVBbGxVc2luZ1NvdXJjZVRo
ZW1lAHhsUGFzdGVBbGxNZXJnaW5nQ29uZGl0aW9uYWxGb3JtYXRzAHhsUGFzdGVBbGxFeGNlcHRC
b3JkZXJzAHhsUGFzdGVGb3JtYXRzAHhsUGFzdGVGb3JtdWxhcwB4bFBhc3RlQ29tbWVudHMAeGxQ
YXN0ZVZhbHVlcwB4bFBhc3RlQ29sdW1uV2lkdGhzAHhsUGFzdGVWYWxpZGF0aW9uAHhsUGFzdGVG
b3JtdWxhc0FuZE51bWJlckZvcm1hdHMAeGxQYXN0ZVZhbHVlc0FuZE51bWJlckZvcm1hdHMAeGxQ
YXN0ZVNwZWNpYWxPcGVyYXRpb25BZGQAeGxQYXN0ZVNwZWNpYWxPcGVyYXRpb25EaXZpZGUAeGxQ
YXN0ZVNwZWNpYWxPcGVyYXRpb25NdWx0aXBseQB4bFBhc3RlU3BlY2lhbE9wZXJhdGlvbk5vbmUA
eGxQYXN0ZVNwZWNpYWxPcGVyYXRpb25TdWJ0cmFjdAB4bFNoaWZ0VG9MZWZ0AHhsU2hpZnRVcABf
VnRibEdhcDFfNDUAX1Z0YmxHYXAyXzY2AGdldF9EaXNwbGF5QWxlcnRzAF9WdGJsR2FwM18xMDkA
X1Z0YmxHYXA0XzUxAF9WdGJsR2FwNV82NwBEaXNwbGF5QWxlcnRzAEh3bmQAVGVtcGxhdGUAX1Z0
YmxHYXAyXzYAVXBkYXRlTGlua3MAUmVhZE9ubHkAV3JpdGVSZXNQYXNzd29yZABJZ25vcmVSZWFk
T25seVJlY29tbWVuZGVkAE9yaWdpbgBEZWxpbWl0ZXIARWRpdGFibGUATm90aWZ5AENvbnZlcnRl
cgBBZGRUb01ydQBMb2NhbABDb3JydXB0TG9hZABfVnRibEdhcDFfNQBnZXRfQm9sZABCb2xkAF9W
dGJsR2FwMV8yMABTYXZlQ2hhbmdlcwBSb3V0ZVdvcmtib29rAF9WdGJsR2FwMl82NQBfVnRibEdh
cDNfMzcAX1Z0YmxHYXA0XzQwAEZpbGVGb3JtYXQAUmVhZE9ubHlSZWNvbW1lbmRlZABDcmVhdGVC
YWNrdXAAQWNjZXNzTW9kZQBDb25mbGljdFJlc29sdXRpb24AVGV4dENvZGVwYWdlAFRleHRWaXN1
YWxMYXlvdXQAV29ya3NoZWV0cwB4bEV4Y2x1c2l2ZQB4bE5vQ2hhbmdlAHhsU2hhcmVkAEJlZm9y
ZQBfVnRibEdhcDNfNwBfVnRibEdhcDFfMzQAU291cmNlRGF0YQB4bEZvcm11bGFzAHhsQ29tbWVu
dHMAeGxWYWx1ZXMAeGxQYXJ0AHhsV2hvbGUAeGxCeUNvbHVtbnMAeGxCeVJvd3MAeGxOZXh0AHhs
UHJldmlvdXMAX1Z0YmxHYXAxXzYATGlua1RvRmlsZQBTYXZlV2l0aERvY3VtZW50AFdpZHRoAEhl
aWdodABfVnRibEdhcDFfNABtc29UcnVlAG1zb0ZhbHNlAG1zb0NUcnVlAG1zb1RyaVN0YXRlVG9n
Z2xlAG1zb1RyaVN0YXRlTWl4ZWQAZ2V0X0NvbG9yAHhsUHJpbnRlcgB4bFNjcmVlbgB4bEJpdG1h
cAB4bFBpY3R1cmUAeGxTaGVldFZpc2libGUAeGxTaGVldEhpZGRlbgB4bFNoZWV0VmVyeUhpZGRl
bgB4bFR5cGVQREYAeGxUeXBlWFBTAHhsRmlsbENvcHkAeGxGaWxsRGF5cwB4bEZpbGxEZWZhdWx0
AHhsRmlsbEZvcm1hdHMAeGxGaWxsTW9udGhzAHhsRmlsbFNlcmllcwB4bEZpbGxWYWx1ZXMAeGxG
aWxsV2Vla2RheXMAeGxGaWxsWWVhcnMAeGxHcm93dGhUcmVuZAB4bExpbmVhclRyZW5kAF9WdGJs
R2FwMl80AF9WdGJsR2FwM18yMgBCb3R0b21SaWdodENlbGwAVG9wTGVmdENlbGwAeGxDZWxsVHlw
ZUJsYW5rcwB4bENlbGxUeXBlQ29uc3RhbnRzAHhsQ2VsbFR5cGVGb3JtdWxhcwB4bENlbGxUeXBl
TGFzdENlbGwAeGxDZWxsVHlwZUNvbW1lbnRzAHhsQ2VsbFR5cGVWaXNpYmxlAHhsQ2VsbFR5cGVB
bGxGb3JtYXRDb25kaXRpb25zAHhsQ2VsbFR5cGVTYW1lRm9ybWF0Q29uZGl0aW9ucwB4bENlbGxU
eXBlQWxsVmFsaWRhdGlvbgB4bENlbGxUeXBlU2FtZVZhbGlkYXRpb24AeGxBMQB4bFIxQzEAQ29t
RXZlbnRJbnRlcmZhY2VBdHRyaWJ1dGUAQXBwRXZlbnRzAERvY0V2ZW50cwBXb3JrYm9va0V2ZW50
cwBTVF9kZDE1YjFiYWNjZmI0NDQ0OGMwMTU2NzkwYjNlYWEyMC5Qcm9wZXJ0aWVzLlJlc291cmNl
cy5yZXNvdXJjZXMAAAAZSQBuAHYAbwBpAGMAZQBJAHQAZQBtAHMAAAlOAGEAbQBlAAAFUgAxAAAF
UgAyAAAFQwAxAAAFQwAyAAARRQBuAGQAUgBhAG4AZwBlAAANSABlAGEAZABlAHIAAAtGAGkAZQBs
AGQAAElJAG4AdgBvAGkAYwBlAC8ASQBuAHYAbwBpAGMAZQBJAHQAZQBtAHMALwBUAGEAYgBsAGkA
eAAvAFIAbwB3AHMALwBSAG8AdwAAC0kAbgBkAGUAeAAAUUkAbgB2AG8AaQBjAGUALwBJAG4AdgBv
AGkAYwBlAEkAdABlAG0AcwAvAFQAYQBiAGwAaQB4AC8ARwByAG8AdQBwAHMALwBHAHIAbwB1AHAA
AAlUAHkAcABlAAAbVABlAG0AcABsAGEAdABlAEkAbgBkAGUAeAAAK0kAbgB2AG8AaQBjAGUAIABD
AG8AbgBmAGkAZwB1AHIAYQB0AGkAbwBuAAAPVABvAEwAbwB3AGUAcgAAE1QAbwBTAHQAcgBpAG4A
ZwAyAAALVgBhAGwAdQBlAAABAAMsAAALVABhAGIAbABlAAAHQQBkAGQAABtJAHMATgB1AGwAbABP
AHIARQBtAHAAdAB5AAARVABvAFMAdAByAGkAbgBnAAADPQAAC00AZQByAGcAZQAAC1IAYQBuAGcA
ZQAAA1sAAAldAD0AJwB7AAEPfQAnACAAQQBOAEQAIAABCUEATgBEACAAABFTAGUAbABlAGMAdABl
AGQAADdJAG4AdgBvAGkAYwBlAC8ASQBuAHYAbwBpAGMAZQBJAHQAZQBtAHMALwBUAGEAYgBsAGkA
eAAAH0kAbQBwAG8AcgB0ACAAUwBlAHQAdABpAG4AZwBzAAAJVAByAGkAbQAAC1MAcABsAGkAdAAA
C1QAbwBJAG4AdAAADVQAYQBiAGwAaQB4AABdRQBYAEUAQwAgAHMAcABhAF8AaQB4AHAAXwByAHUA
bABlAHMAIABAAGYAbABhAGcAIAA9ACAAJwB0ACcALABAAHAAcgBvAGMAZQBzAHMAXwBpAGQAIAA9
ACAAJwABIycALABAAGkAeABwAF8AcgB1AGwAZQBzAF8AaQBkACAAPQABHywAQAByAHUAbgBfAHQA
YQBiAGwAZQAgAD0AIAAnAAFjJwAsAEAAcwBvAHUAcgBjAGUAIAA9ACAAJwAyADEANAAwADAAJwAs
AEAAcgB1AG4AXwB3AGkAdABoAF8AYwB1AHMAdABvAG0AXwBlAG4AYQBiAGwAZQAgAD0AIAAnAG4A
JwABgI9TAEUATABFAEMAVAAgAGkAcgAuAGkAeABwAF8AcgB1AGwAZQBzAF8AaQBkACAARgBSAE8A
TQAgAGkAeABwAF8AcgB1AGwAZQBzACAAQQBTACAAaQByACAAVwBIAEUAUgBFACAAaQByAC4AaQB4
AHAAXwByAHUAbABlAHMAXwBuAGEAbQBlACAAPQAgACcAAQMnAAEPWwBDAG8AbAB1AG0AbgAAA10A
AB1TAEUATABFAEMAVAAgACoAIABGAFIATwBNACAAAFtbAGEAZABpAGgAYQBfAHAAcgBvAGMAZQBz
AHMAXQAuAGQAYgBvAC4AWwBlAHgAYwBlAGwAXwBhAGQAZABpAG4AXwBkAGEAdABhAF8AaQBtAHAA
bwByAHQAXwAAHUkARgAgAE8AQgBKAEUAQwBUAF8ASQBEACgAJwABNScAKQAgAEkAUwAgAE4ATwBU
ACAATgBVAEwATAAgAEQAUgBPAFAAIABUAEEAQgBMAEUAIAABG0MAUgBFAEEAVABFACAAVABBAEIA
TABFACAAAAMoAAAhXQAgAFYAQQBSAEMASABBAFIAKAAxADAAMgA0ACkALAAAAykAABUgAFcASABF
AFIARQAgADEAPQAyAAAZRABFAEwARQBUAEUAIABGAFIATwBNACAAAA8gAFcASABFAFIARQAgAAAT
IABJAFMATgBVAEwATAAoAFsAABldACwAJwAnACkAIAA9ACAAJwAnACAAKwABAysAAAdBAE4ARAAA
L3MAcABhAF8AZQB4AGMAZQBsAF8AcwBuAGEAcABzAGgAbwB0AHMAIAAnAGMAJwABKVwAZQB4AGMA
ZQBsAF8AYwBhAGwAYwB1AGwAYQB0AGkAbwBuAHMAXAAACy4AeABsAHMAeAAAA3kAAEkwADAAMAAy
ADQANQAwADAALQAwADAAMAAwAC0AMAAwADAAMAAtAEMAMAAwADAALQAwADAAMAAwADAAMAAwADAA
MAAwADQANgABA24AABdcAHQAZQBtAHAAXwBOAG8AdABlAFwAAH9zAHAAYQBfAGUAeABjAGUAbABf
AGEAZABkAGkAbgBfAHMAZQB0AHQAbABlAG0AZQBuAHQAXwBwAHIAbwBjAGUAcwBzACAAQABmAGwA
YQBnACAAPQAnAGMAJwAgACwAIABAAGMAbwBuAHQAcgBhAGMAdABfAGkAZAAgAD0AIAABISwAIABA
AHAAcgBvAGQAXwBkAGEAdABlACAAPQAgACcAASknACwAIABAAHAAcgBvAGQAXwBkAGEAdABlAF8A
dABvACAAPQAgACcAASUnACwAIABAAGEAcwBfAG8AZgBfAGQAYQB0AGUAIAA9ACAAJwABLycALAAg
AEAAdQBuAGkAcQB1AGUAXwBwAHIAbwBjAGUAcwBzAF8AaQBkAD0AJwABgXNEAGUAYQBsACAASQBE
ACwAUgBlAGYAIABJAGQALABUAGUAcgBtACAAUwB0AGEAcgB0ACwAVABlAHIAbQAgAEUAbgBkACwA
UwBlAHQAdABsAGUAbQBlAG4AdAAgAEQAYQB0AGUALABMAGUAZwAsAFAAaAB5AHMAaQBjAGEAbAAg
AEYAaQBuAGEAbgBjAGkAYQBsACwARABlAGEAbAAgAFQAeQBwAGUALABCAHUAeQAgAFMAZQBsAGwA
LABDAHUAcgB2AGUALABEAGUAYQBsACAAVgBvAGwAdQBtAGUALABBAGwAbABvAGMAYQB0AGkAbwBu
ACAAVgBvAGwAdQBtAGUALABTAGUAdAB0AGwAZQBtAGUAbgB0ACAAVgBvAGwAdQBtAGUALABVAE8A
TQAsAFMAZQB0AHQAbABlAG0AZQBuAHQAIABQAHIAaQBjAGUALABTAGUAdAB0AGwAZQBtAGUAbgB0
ACAAQQBtAG8AdQBuAHQAAICBUwBFAEwARQBDAFQAIAAqACAARgBSAE8ATQAgAGEAZABpAGgAYQBf
AHAAcgBvAGMAZQBzAHMALgBkAGIAbwAuAGUAeABjAGUAbABfAGEAZABkAF8AaQBuAF8AdgBpAGUA
dwBfAHIAZQBwAG8AcgB0AF8AZgBpAGwAdABlAHIAXwAAHUMAbwB1AG4AdABlAHIAcABhAHIAdAB5
AEkAZAAAFUMAbwBuAHQAcgBhAGMAdABJAGQAABFQAHIAbwBkAEQAYQB0AGUAABVQAHIAbwBkAEQA
YQB0AGUAVABvAAARQQBzAE8AZgBEAGEAdABlAAATUAByAG8AYwBlAHMAcwBJAGQAAB1DAHIAZQBh
AHQAZQBUAGUAbQBwAGwAYQB0AGUAACssACAAQABjAG8AdQBuAHQAZQByAHAAYQByAHQAeQBfAGkA
ZAAgAD0AIAAAJUMAaABlAGMAawBJAGYAUwBoAGUAZQB0AEUAeABpAHMAdABzAAAPUwB1AG0AbQBh
AHIAeQAAXTsARABhAHQAYQBUAHkAcABlAEMAbwBtAHAAYQB0AGkAYgBpAGwAaQB0AHkAPQA4ADAA
OwBNAEEAUgBTACAAQwBvAG4AbgBlAGMAdABpAG8AbgA9AFQAcgB1AGUAABlDAG8AdQBuAHQAZQBy
AHAAYQByAHQAeQAAEUMAbwBuAHQAcgBhAGMAdAAAE1AAcgBvAGQAIABEAGEAdABlAAAZUAByAG8A
ZAAgAEQAYQB0AGUAIABUAG8AABVBAHMAIABvAGYAIABEAGEAdABlAAATTABpAG4AZQAgAEkAdABl
AG0AAH9zAHAAYQBfAGUAeABjAGUAbABfAGEAZABkAGkAbgBfAHMAZQB0AHQAbABlAG0AZQBuAHQA
XwBwAHIAbwBjAGUAcwBzACAAQABmAGwAYQBnACAAPQAnAHMAJwAgACwAIABAAGMAbwBuAHQAcgBh
AGMAdABfAGkAZAAgAD0AIAABCW4AYQBtAGUAAAt2AGEAbAB1AGUAABlkAGkAcwBwAGwAYQB5AGwA
YQBiAGUAbAAAGWQAaQBzAHAAbABhAHkAdgBhAGwAdQBlAAAbbwB2AGUAcgB3AHIAaQB0AGUAdAB5
AHAAZQAAHWEAZABqAHUAcwB0AG0AZQBuAHQAZABhAHkAcwAAHWEAZABqAHUAcwB0AG0AZQBuAHQA
dAB5AHAAZQAAF2IAdQBzAGkAbgBlAHMAcwBkAGEAeQAACU4AVQBMAEwAAAcgAHwAIAAAFTAAMAAw
ADEALQAwADEALQAwADEAAR1DAG8AbgBmAGkAZwB1AHIAYQB0AGkAbwBuAHMAACdHAGUAdABSAGUA
cABvAHIAdABEAGUAZgBpAG4AaQB0AGkAbwBuAAAxRwBlAHQAVwBvAHIAawBzAGgAZQBlAHQARgBy
AG8AbQBXAG8AcgBrAEIAbwBvAGsAAA1WAGEAbAB1AGUAMgAAH3MAcABhAF8AcgBmAHgAXwByAHUA
bgBfAHMAcQBsAAADIAAAI3MAcABhAF8AcgBmAHgAXwByAHUAbgBfAHMAcQBsACAAIAAAE18AdABl
AG0AcABsAGEAdABlAACFB1MARQBMAEUAQwBUACAAcgBwAC4AbgBhAG0AZQAsAA0ACgAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHIA
cAAuAHIAZQBwAG8AcgB0AF8AcABhAHIAYQBtAHMAZQB0AF8AaQBkACAAWwBQAGEAcgBhAG0AcwBl
AHQASQBkAF0ALAANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAByAHAAdAAuAHIAZQBwAG8AcgB0AF8AcABhAGcAZQBfAHQAYQBi
AGwAaQB4AF8AaQBkACAAWwBUAGEAYgBsAGkAeABJAGQAXQAsAA0ACgAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHIAcAAuAG4AYQBt
AGUAIABbAFIAZQBwAG8AcgB0AE4AYQBtAGUAXQAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHIAcAAuAHAAYQBnAGUAXwBp
AGQAIABQAGEAZwBlAEkARAAsAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAHIAcAAuAHIAZQBwAG8AcgB0AF8AcwB0AGEAdAB1
AHMAXwBpAGQAIABbAFIAZQBwAG8AcgB0AFMAdABhAHQAdQBzAEkAZABdAA0ACgAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIABGAFIATwBNACAAIAAgAHIAZQBw
AG8AcgB0AF8AcABhAHIAYQBtAHMAZQB0ACAAcgBwAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUAUgAgAEoATwBJ
AE4AIAByAGUAcABvAHIAdABfAHAAYQBnAGUAXwB0AGEAYgBsAGkAeAAgAHIAcAB0AA0ACgAgACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIABPAE4AIAAgAHIAcAB0AC4AcABhAGcAZQBfAGkAZAAgAD0AIAByAHAALgBwAGEA
ZwBlAF8AaQBkAA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgAEkATgBOAEUAUgAgAEoATwBJAE4AIAByAGUAcABvAHIAdABfAHAA
YQBnAGUAIAByAHAAMgANAAoAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
ACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAATwBOACAAIAByAHAAdAAuAHAAYQBnAGUA
XwBpAGQAIAA9ACAAcgBwADIALgByAGUAcABvAHIAdABfAHAAYQBnAGUAXwBpAGQAACcgAFcASABF
AFIARQAgACAAcgBwAC4ATgBBAE0ARQAgAD0AIAAnAAENUABhAGcAZQBJAGQAABVQAGEAcgBhAG0A
cwBlAHQASQBkAAAVUgBlAHAAbwByAHQATgBhAG0AZQAAHVIAZQBwAG8AcgB0AFMAdABhAHQAdQBz
AEkAZAAAEVQAYQBiAGwAaQB4AEkAZAAABScALAABDV8AUABhAHIAYQBtAABbRABhAHQAYQBUAHkA
cABlAEMAbwBtAHAAYQB0AGkAYgBpAGwAaQB0AHkAPQA4ADAAOwBNAEEAUgBTACAAQwBvAG4AbgBl
AGMAdABpAG8AbgA9AFQAcgB1AGUAAAVBADIAAANAAAADMgAAEScAIQBSADEAQwAxADoAUgABA0MA
ABc8AFMAaQBnAG4AYQB0AHUAcgBlADoAAA9SAGUAcABsAGEAYwBlAAADPgAAIUcAZQB0AFUAcwBl
AHIAUwBpAGcAbgBhAHQAdQByAGUAAFVzAHAAYQBfAGUAeABjAGUAbABfAHMAbgBhAHAAcwBoAG8A
dABzACAAQABmAGwAYQBnAD0AJwB5ACcALABAAHUAcwBlAHIAXwBuAGEAbQBlAD0AJwABGXMAbgBh
AHAAcwBoAG8AdABvAG4AbAB5AAADXwAAI3kAeQB5AHkATQBNAGQAZABfAEgASABtAG0AcwBzAGYA
ZgAACS4AcABuAGcAAAdwAGQAZgAACS4AcABkAGYAAAdwAG4AZwAAC2UAeABjAGUAbAAACXcAbwBy
AGQAAAsuAGQAbwBjAHgAAFNzAHAAYQBfAGUAeABjAGUAbABfAHMAbgBhAHAAcwBoAG8AdABzACAA
QABmAGwAYQBnAD0AJwBoACcALABAAHMAaABlAGUAdABfAGkAZAA9ACcAATMnACAALABAAHMAbgBh
AHAAcwBoAG8AdABfAHMAaABlAGUAdABfAG4AYQBtAGUAPQAnAAEvJwAsACAAQABzAG4AYQBwAHMA
aABvAHQAXwBmAGkAbABlAG4AYQBtAGUAPQAnAAEpJwAsACAAQABhAHAAcABsAGkAZQBkAF8AZgBp
AGwAdABlAHIAPQAnAAElJwAsACAAQAByAGUAZgByAGUAcwBoAGUAZABfAG8AbgA9ACcAASt5AHkA
eQB5ACAATQBNAE0ATQAgAGQAZAAgAEgASAA6AG0AbQA6AHMAcwAAHycALABAAHAAcgBvAGMAZQBz
AHMAXwBpAGQAPQAnAAFnUwBFAEwARQBDAFQAIABkAGIAbwAuAEYATgBBAFIAZQBzAG8AbAB2AGUA
RAB5AG4AYQBtAGkAYwBEAGEAdABlACgAJwB7ADAAfQB8AHsAMQB9AHwAewAyAH0AfAB7ADMAfQAn
ACkAARV5AHkAeQB5AC0ATQBNAC0AZABkAAERcAByAG8AdgBpAGQAZQByAAATdAByAGEAbgBzAGwA
YQB0AGUAAAM7AAADLQABCXsAUgAxAH0AAAl7AFIAMgB9AAAJdAByAHUAZQAAAzEAABlmAGEAcgBy
AG0AcwBfAGEAZABtAGkAbgAAcVMAVABfAGQAZAAxADUAYgAxAGIAYQBjAGMAZgBiADQANAA0ADQA
OABjADAAMQA1ADYANwA5ADAAYgAzAGUAYQBhADIAMAAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAHVAAUwBfAFMAeQBuAGMAaAByAG8AbgBpAHoAZQAAIVAAUwBfAEkA
bQBhAGcAZQBTAG4AYQBwAHMAaABvAHQAAB9QAFMAXwBFAHgAYwBlAGwAUwBoAGUAZQB0AEkAZAAA
B0EATABMAAAXUABTAF8AVQBzAGUAcgBOAGEAbQBlAAAZUABTAF8AUAByAG8AYwBlAHMAcwBJAGQA
AB9QAFMAXwBFAHgAcABvAHIAdABGAG8AcgBtAGEAdAAAI1AAUwBfAFMAZQB0AHQAbABlAG0AZQBu
AHQAQwBhAGwAYwAAH08ATABFAF8AQwBPAE4ATgBfAE0AYQBpAG4ARABCAAAXUwBjAHIAaQBwAHQA
XwBUAGEAcwBrAAADDQAAU3MAcABhAF8AZQB4AGMAZQBsAF8AcwBuAGEAcABzAGgAbwB0AHMAIABA
AGYAbABhAGcAPQAnAGUAJwAsAEAAcwBoAGUAZQB0AF8AaQBkAD0AJwABAHrzhJNVXqlJs5MBu/bF
IksACLd6XFYZNOCJCImEXc2AgMyRBSAAEoCYBiABARKAmAUgABKAnAYgAQESgJwIIAAVEiEBEgwJ
IAEBFRIhARIMCCAAFRIhARIgCSABARUSIQESIAkgAgESgJwSgJgDIAAOCCACEoCgEgwIBSABARI4
CiAEEoCgEgwICAgDIAABCCAEAQgICBIMCSAFAQgICAgSDAcgAhIpEikOCiAEEikSKRItDg4FIAEB
EgwEIAEBDgQGEoCYBAYSgJwHBhUSIQESDAcGFRIhARIgBSgAEoCYBSgAEoCcCCgAFRIhARIMCCgA
FRIhARIgCCAAFRIhARIUCSABARUSIQESFAggABUSIQESEAkgAQEVEiEBEhAEIAASKQUgAQESKQQg
ABIcBSABARIcAyAACAQgAQEIAgYOBwYVEiEBEhQHBhUSIQESEAMGEikDBhIcAgYIAygADggoABUS
IQESFAgoABUSIQESEAQoABIpBCgAEhwDKAAIBCAAEiQFIAEBEiQEIAAScAUgAQEScAMgAAIEIAEB
AgMGEiQDBhJwAgYCBCgAEiQEKAAScAMoAAIDBhI4BCAAEjEFIAEBEjEEIAASOAUgAQISMAQgABIs
AwYSMQQoABIxCCAAFRIhARI0CSABARUSIQESNAcGFRIhARI0CCgAFRIhARI0BCAAEjAFIAEBEjAE
IAASDAMGEjADBhIMBCgAEjAEKAASDAQkowEABCWjAQAEJqMBAAQnowEABgACCRgQCQQgABJABSAB
ARJABCAAEjUFIAEBEjUCBgkIIAMBDhIxEjUIIAAVEiEBEkQJIAEBFRIhARJEBSABEjkOAyAACQkg
AgEVEiEBDgIGIAMBDg4CAwYSQAMGEjUHBhUSIQESRAQoABJABCgAEjUIKAAVEiEBEkQGIAIBEjUO
CCAAFRIhARJQCSABARUSIQESUAQgABJcBSABARJcBiABEoCkDgkAAhKAnBKAmA4GIAIBDhAJBiAB
ARKApAUgARJwDgUgARFYDgQgAQIOESAGAhKApBKAmBKAnA4SNRFYCyADARJgEoCkEoCYBCABDg4I
IAMBDh0OEAkFIAEBEmALIAMBEmASgJgSgJwIIAMCEoCcDg4HIAICEoCcDgkgAhKAnBKAmA4JIAIB
EoCkEoCYBwYVEiEBElADBhJcCCgAFRIhARJQBCgAElwEIAARQQUgAQERQQMGEUEEKAARQQggABUS
IQESbAkgAQEVEiEBEmwHBhUSIQESbAgoABUSIQESbAggABUSIQESdAkgAQEVEiEBEnQHBhUSIQES
dAgoABUSIQESdAQgABJsBSABARJsAwYSbAQoABJsBAABDg4DAAAOBgACAQ4SMQsAARUSIQESIBKA
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
AB4BBQoCEWQIBAoBEWQ9BxkOFRIhARFkFRIhARFkHQ4dDhKB0A4dDhFkEWQRZA4RZBKAoBFkEWQd
Ax0DHQMdAxKAvR0DHQMSgKURZAUgABKA3QYgARKCWQ4HIAMBHBwdHAUHARKA3QMHAQgDBwEOBQcB
EoHRBhUSIQEeAAkgAgESgN0SgmEGIAEcEoJpFAcEEoJdEoJlFRIhAR4AFRIhAR4ABgcCEUERQQUA
ABKCbQUgAR0FDgYgAR0FHQUFIAEBHQUGIAEBEYKBBiABARGChQUgABKCiQggAx0FHQUICAcAAw4d
BQgIEgcHHQUdBQ4SgnESgnkSgokdBQUAAR0FDgUgAQ4dBQUVEiEBHAYgAB0SgN0GFRGAoQEcAh4A
BwACHBwSgN0iBwoSgIAVEiEBHBwSKRItFRIhAR4AHBKAvRKApRURgKEBHAUgABKCkQcgAgEOEoKR
BAcBElkGIAEBEYKZCAEAAgAAAAAAAwAAAQUgAQISXAUAAQISXAkGFRKAxQISXAIFAAEOElwJBhUS
gMUCElwOBSAAEoKlBSAAEoKpBiABEoKtHAUgAg4DAwUgABKCsQggBQIIDg4OCAYVEiEBElwECgES
XAgVEoDFAhJcAggVEoDFAhJcDgUKAhJcDjUHFAkSNRIxEjwSgQESgcUSVRUSIQESXBJIHQ4OHQ4V
EoDFAhJcAhKB8BKBARGBeR0OCB0OCAUgABKCtQYgARKCuRwPBwUSgrkSgr0SNRKBARI1KQEAJDAw
MDIwOERBLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAABiABARKA3V8BAFpTeXN0ZW0uT2Jq
ZWN0LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkAACkBACQwMDAyMDhEOC0wMDAwLTAwMDAtQzAwMC0wMDAw
MDAwMDAwNDYAAAgBALUBAAAAAAETARsIAQDBAQAAAAABHAgBAO0AAAAAAAgBAO4AAAAAAAgBAHEA
AAAAAAgBAHAAAAAAAAgBAPAAAAAAAAgBAPEAAAAAAAgBAPIAAAAAAAgBACcCAAAAAAgBAIAEAAAA
AAEZCAEA1QAAAAAABM3v//8IAQB2AAAAAAAIAQAAAAAAAAAIAQB1AAAAAAAIAQD3AAAAAAAIAQCO
AQAAAAAIAQCSAAAAAAAIAQALAQAAAAAIAQD8AAAAAAAIAQCBAAAAAAAIAQB/AAAAAAAIAQD8////
AACAqywAAIClU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLkN1c3RvbU1hcnNoYWxlcnMu
RW51bWVyYXRvclRvRW51bVZhcmlhbnRNYXJzaGFsZXIsIEN1c3RvbU1hcnNoYWxlcnMsIFZlcnNp
b249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUw
YTNhAAgBAMEAAAAAAAgBABABAAAAAAgBAAIBAAAAAAgBAJoBAAAAAAgBAIoAAAAAAAgBAH4AAAAA
AAgBAAYAAAAAAAgBAGwFAAAAAAgBAIgHAAAAAAT47///BNLv//8KKAUOHBwRgewcHAUoABKAoAMo
ABwFKAIcHBwFKAASgSwFKAASgYQEKAEcHCkBACQwMDAyMDg0Ni0wMDAwLTAwMDAtQzAwMC0wMDAw
MDAwMDAwNDYAAA0BAAhfRGVmYXVsdAAABiABARGC5SkBACQwMDAyMDhENS0wMDAwLTAwMDAtQzAw
MC0wMDAwMDAwMDAwNDYAAAgBADABAAAAAAgBAG4AAAAAAAgBAAEAAAAAAAgBAOsAAAAAAAgBAB0B
AAAAAAUgABGBmAgBAC4CAAAAAAgBAGEFAAAAAAgBACQEAAAAAAEaCAEA0wAAAAAACAEAsgIAAAAA
CAEAxQAAAAAACAEAnAEAAAAACAEA7QcAAAAACAEAvQkAAAAABSgAEYGYBSgAEoF4BygCEoCgHBwE
BhGA2ATn7///BL/v//8FIAIBDg5fAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAw
MDQ2NU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbEluc2VydFNoaWZ0RGlyZWN0aW9u
AAAEBhGA3F0BACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYzTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLlhsSW5zZXJ0Rm9ybWF0T3JpZ2luAAAEBhGA4AQNAAAABA4A
AAAEBwAAAATm7///BOXv//8E0O///wS97///BAgAAAAEBgAAAAQLAAAABAwAAABUAQAkMDAwMjA4
MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Kk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5F
eGNlbC5YbFBhc3RlVHlwZQAABAYRgOQEAgAAAAQFAAAABAQAAAAEAwAAAGABACQwMDAyMDgxMy0w
MDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY2TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2Vs
LlhsUGFzdGVTcGVjaWFsT3BlcmF0aW9uAAAEBhGBBATB7///BL7v//9fAQAkMDAwMjA4MTMtMDAw
MC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2NU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Y
bERlbGV0ZVNoaWZ0RGlyZWN0aW9uAAAIAQA8AgAAAAAIAQBXAQAAAAAIAQAuAQAAAAAIAQCeBwAA
AAAFKAASgSAIAQC1AAAAAAAIAQAPAAAAAAAIAQCDBwAAAAAGKAESgJgcKQEAJDAwMDIwOERCLTAw
MDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAACAEAYAAAAAAAKQEAJDAwMDIwODRELTAwMDAtMDAw
MC1DMDAwLTAwMDAwMDAwMDA0NgAACAEAAwAAAAAACAEAFQEAAAAACAEArAUAAAAACAEA7gEAAAAA
CAEADAAAAAAACAEAhQcAAAAABSgAEoFEBAYRgTRbAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAt
MDAwMDAwMDAwMDQ2MU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbFNhdmVBc0FjY2Vz
c01vZGUAAAgBAAQAAAAAACkBACQwMDAyMDhENy0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYA
AAgBAK4CAAAAACkBACQwMDAyMDg3Mi0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAAQGEYFo
VQEAJDAwMDIwODEzLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NitNaWNyb3NvZnQuT2ZmaWNl
LkludGVyb3AuRXhjZWwuWGxGaW5kTG9va0luAAAEBhGBbFEBACQwMDAyMDgxMy0wMDAwLTAwMDAt
YzAwMC0wMDAwMDAwMDAwNDYnTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLlhsTG9va0F0
AAAEBhGBcFYBACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYsTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLlhsU2VhcmNoT3JkZXIAAAQGEYF0WgEAJDAwMDIwODEzLTAw
MDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjBNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwu
WGxTZWFyY2hEaXJlY3Rpb24AAAgBALsGAAAAACkBACQwMDAyNDQzQS0wMDAwLTAwMDAtQzAwMC0w
MDAwMDAwMDAwNDYAACkBACQwMDAyNDQzOS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAAQG
EYGABP////8E/f///wT+////SwEAJDJkZjhkMDRjLTViZmEtMTAxYi1iZGU1LTAwYWEwMDQ0ZGU1
MiFNaWNyb3NvZnQuT2ZmaWNlLkNvcmUuTXNvVHJpU3RhdGUAAAgBAGMAAAAAACkBACQwMDAyMDg3
MC0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAAQGEYGQXAEAJDAwMDIwODEzLTAwMDAtMDAw
MC1jMDAwLTAwMDAwMDAwMDA0NjJNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuWGxQaWN0
dXJlQXBwZWFyYW5jZQAABAYRgZRcAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAw
MDQ2Mk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbENvcHlQaWN0dXJlRm9ybWF0AAAE
BhGBmFoBACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYwTWljcm9zb2Z0Lk9m
ZmljZS5JbnRlcm9wLkV4Y2VsLlhsU2hlZXRWaXNpYmlsaXR5AAAEBhGBnFoBACQwMDAyMDgxMy0w
MDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYwTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2Vs
LlhsRml4ZWRGb3JtYXRUeXBlAAAEBhGBtAQKAAAABAkAAABXAQAkMDAwMjA4MTMtMDAwMC0wMDAw
LWMwMDAtMDAwMDAwMDAwMDQ2LU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbEF1dG9G
aWxsVHlwZQAACAEAZwIAAAAACAEAbAIAAAAAKQEAJDAwMDIwOENGLTAwMDAtMDAwMC1DMDAwLTAw
MDAwMDAwMDA0NgAABAYRgdgEtO///wSz7///BLLv//8Ese///1MBACQwMDAyMDgxMy0wMDAwLTAw
MDAtYzAwMC0wMDAwMDAwMDAwNDYpTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLlhsQ2Vs
bFR5cGUAAAQGEYHsBMrv//9ZAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2
L01pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5YbFJlZmVyZW5jZVN0eWxlAABdAQAkMDAw
MjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2M01pY3Jvc29mdC5PZmZpY2UuSW50ZXJv
cC5FeGNlbC5Xb3JrYm9va0V2ZW50c19FdmVudAAACSACARKA3RKA3WABAC1NaWNyb3NvZnQuT2Zm
aWNlLkludGVyb3AuRXhjZWwuV29ya2Jvb2tFdmVudHMtTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9w
LkV4Y2VsLldvcmtib29rRXZlbnRzAABYAQAkMDAwMjA4MTMtMDAwMC0wMDAwLWMwMDAtMDAwMDAw
MDAwMDQ2Lk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5Eb2NFdmVudHNfRXZlbnQAAFYB
AChNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuRXhjZWwuRG9jRXZlbnRzKE1pY3Jvc29mdC5PZmZp
Y2UuSW50ZXJvcC5FeGNlbC5Eb2NFdmVudHMAAFgBACQwMDAyMDgxMy0wMDAwLTAwMDAtYzAwMC0w
MDAwMDAwMDAwNDYuTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLkFwcEV2ZW50c19FdmVu
dAAAVgEAKE1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5FeGNlbC5BcHBFdmVudHMoTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLkV4Y2VsLkFwcEV2ZW50cwAAKQEAJDAwMDI0NDEzLTAwMDAtMDAwMC1D
MDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDI0NDExLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0
NgAAKQEAJDAwMDI0NDEyLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAARwEAGi5ORVRGcmFt
ZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29y
ayA0KAEAI1NUX2RkMTViMWJhY2NmYjQ0NDQ4YzAxNTY3OTBiM2VhYTIwAAAFAQAAAAAOAQAJTWlj
cm9zb2Z0AAAfAQAaQ29weXJpZ2h0IEAgTWljcm9zb2Z0IDIwMTYAAAgBAAgAAAAAAB4BAAEAVAIW
V3JhcE5vbkV4Y2VwdGlvblRocm93cwEA1CoCAAAAAAAAAAAA7ioCAAAgAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAOAqAgAAAAAAAAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAA
AAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhAAgD4AwAAAAAAAAAAAAD4AzQA
AABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAunJNGwAAAQC6
ck0bPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYA
bwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEWAMAAAEAUwB0AHIAaQBu
AGcARgBpAGwAZQBJAG4AZgBvAAAANAMAAAEAMAAwADAAMAAwADQAYgAwAAAANAAKAAEAQwBvAG0A
cABhAG4AeQBOAGEAbQBlAAAAAABNAGkAYwByAG8AcwBvAGYAdAAAAHAAJAABAEYAaQBsAGUARABl
AHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwBkAGQAMQA1AGIAMQBiAGEAYwBjAGYAYgA0ADQA
NAA0ADgAYwAwADEANQA2ADcAOQAwAGIAMwBlAGEAYQAyADAAAABAAA8AAQBGAGkAbABlAFYAZQBy
AHMAaQBvAG4AAAAAADEALgAwAC4ANgA5ADgAOQAuADIAOQAzADcAMAAAAAAAcAAoAAEASQBuAHQA
ZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwBkAGQAMQA1AGIAMQBiAGEAYwBjAGYAYgA0ADQANAA0
ADgAYwAwADEANQA2ADcAOQAwAGIAMwBlAGEAYQAyADAALgBkAGwAbAAAAFwAGwABAEwAZQBnAGEA
bABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgAE0AaQBjAHIAbwBz
AG8AZgB0ACAAMgAwADEANgAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAVABfAGQAZAAxADUAYgAxAGIAYQBjAGMAZgBiADQANAA0ADQAOABjADAAMQA1ADYANwA5
ADAAYgAzAGUAYQBhADIAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAFQAXwBkAGQAMQA1AGIAMQBiAGEAYwBjAGYAYgA0ADQANAA0ADgAYwAwADEANQA2ADcAOQAw
AGIAMwBlAGEAYQAyADAAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADYAOQA4ADkALgAyADkAMwA3ADAAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADYAOQA4ADkALgAyADkAMwA3ADAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAgAgAMAAAAADsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="128"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="174"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="Snapshot.cs"
            Line="99"
            Column="21" />
          <Breakpoint
            Enabled="True"
            File="Snapshot.cs"
            Line="960"
            Column="13" />
          <Breakpoint
            Enabled="True"
            File="Settlement.cs"
            Line="335"
            Column="1" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="191,42"
          Id="Package\SCR_EXCEL_SNAPSHOT"
          TopLeft="347,71" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>