SET NOCOUNT ON

IF OBJECT_ID(N'[dbo].batch_report_process', N'P ') IS NOT NULL 
	DROP PROCEDURE [dbo].batch_report_process
GO

/**
	Main Sp call from Batch window. It creates a immediate job process to perform some huge/complex calculations, or some scheduled jobs to generate reports in daily/weekly basis.

	Parameters
	@spa	:	SQL query to be run.
	@flag	:	Determines the actions of call for different process for the SP.
	@jobId	:	The job identification number assigned to the job if created successfully
	@scheduleId	:	Schedule identification number assigned to the schedule if it is created successfully. schedule_idis an output variable of typeï¿½int, with no default
	@report_name	:	Report Name/Notification Header for batch process.
	@active_start_date	:	Start date for scheduling the bacth/job process.
	@active_start_time	:	Starting time for scheduling the bacth/job process.
	@freq_type	:	requency_type Value that indicates when the job is to be executed.  frequency_type is int, with a default of 0 .  Check sp_add_jobschedule for detail.
	@freq_interval	:	frequency_interval Day that the job is executed. frequency_interval is int, with a default of 0, and depends on the value of frequency_type. Check sp_add_jobschedule for detail.
	@freq_subday_type	:	frequency_subday_type Specifies the units for frequency_subday_interval.  frequency_subday_type is int, with no default. Check sp_add_jobschedule for detail.
	@freq_subday_interval	:	frequency_subday_interval Number of frequency_subday_type periods to occur  between each execution of the job. frequency_subday_interval is int, with a default of 0. Check sp_add_jobschedule for detail.
	@freq_relative_interval	:	frequency_relative_interval Further defines the frequency_interval when  frequency_type is set to 32
	@freq_recurrence_factor	:	frequency_recurrence_factor Number of weeks or months between the scheduled execution of the job. frequency_recurrence_factor is used only if frequency_type is set to 8, 16, or 32.  frequency_recurrence_factor is int, with a default of 0. Check sp_add_jobschedule
	@active_end_date	: Ending date for scheduling the batch/job process.
	@active_end_time	:	Ending time for scheduling the bacth/job process.
	@batch_type	:	Type of batch, whether it is calculations or reporting, c is defined for calculation like MTM, Position etc and r for schedule and download CSV file for reports.
	@generate_dynamic_params	:	Determines whether to genrate dynamic date params or not (it should be replaced now, it is handled by dynamic caledar component)
	@custom_as_of_date	:	As of date, for which we run calculation or run reports which have "as_of_date" parameter
	@notify_users	:	Users to which the notifications is sent after batch completion.
	@notify_roles	:	Roles to which the notifications is sent after batch completion.
	@notification_type	:	type of notification sent after batch completion, whether it is email, message board or many more.
	@send_attachment	:	Attaches the generated file to email is it is enabled.
	@batch_unique_id	:	Unique ID generated by PHP function uniqid(), used for generating unique job process ID.
	@source	:	It is the source of batch process whether it is from import,  or calculation or report, etc and used in the naming of JOB as prefix.
	@csv_path	:	Location to dump the csv/excel file, while we batch the report. (download link is pointed to this location)
	@login_id	:	User login id of connected user.
	@holiday_calendar_id	:	holiday calendar id set in static data which determines the list of holidays on which report/calculation should not be run.
	@non_sys_users	:	email ids for non system user which are not add in Setup User menu.
	@temp_notes_path	:	Document path to dump export file.
	@export_table_name	:	If data are to be dumped into system table then it is included here.
	@export_table_name_suffix	:	Suffix for export table name LIKE if table name is "dump_new_data" and we set suffix as "pre" final export table will be "[batch_export_dump_new_data - pre]" this table will be created in adiha_process and exported data will be dumped into this table.(Logic of data insertion and table creation is done in "[dbo].[spa_rfx_export_report_data]")
	@compress_file	:	Flag whether to compress the output csv/excel file while we batch any reports, only used for batch type 'r'
	@delim	:	delimeter for CSV file generation.
	@is_header	:	Determines whether to include header in report or not.
	@xml_format	:	formal of xml, (Standard Node Type or Standard Attribute Type)
	@export_file_format	:	File format downloading reports (EG: Excel, CSV, XML, TEXT)
	@ftp_folder_path	:	Shared External Location to Dump the processed file.
	@export_web_services_id	:	This is used for exporting data using web services. Parent table for storage is export_web_service where details of web services are kept.
	@debug_mode	:	only used for debugging purpose, it enable printing of dynamic queries and many more.
	@file_transfer_endpoint_id : File transfer endpoint id, Refers to endpoint S/FTP information.
*/

CREATE PROCEDURE [dbo].[batch_report_process]
    @spa VARCHAR(MAX) = NULL,
    @flag CHAR(1),--(r for Run | n for getNotifyUsers | v for getNotifyRoles)
	@jobId VARCHAR(2000) = NULL,
	@scheduleId INT = NULL,
	@report_name VARCHAR(200) = NULL,
	@active_start_date DATETIME = NULL,
	@active_start_time VARCHAR(20) = NULL,
	@freq_type INT = NULL,
	@freq_interval INT = NULL,
	@freq_subday_type INT = NULL,
	@freq_subday_interval INT = NULL,
	@freq_relative_interval INT = NULL,
	@freq_recurrence_factor INT = NULL,
	@active_end_date DATETIME = NULL,
	@active_end_time INT = NULL,
	@batch_type VARCHAR(50) = 'r',
	@generate_dynamic_params BIT = 0,
	@custom_as_of_date VARCHAR(20) = NULL,
	@notify_users VARCHAR(MAX) = NULL,
	@notify_roles VARCHAR(MAX) = NULL,
	@notification_type INT = NULL,
	@send_attachment CHAR(1) = 'n',
	@batch_unique_id VARCHAR(100) = NULL,
	@source VARCHAR(200) = NULL,
	@csv_path VARCHAR(500) = NULL,
	@login_id VARCHAR(50) = NULL,
	@holiday_calendar_id INT = NULL,
	@non_sys_users VARCHAR(8000) = NULL,
	@temp_notes_path VARCHAR(500) = NULL,
	@export_table_name VARCHAR(200) = NULL,
	@export_table_name_suffix VARCHAR(200) = NULL,
	@compress_file CHAR(1) = 'n',
	@delim VARCHAR(200) = NULL,
	@is_header VARCHAR(200) = NULL,
	@xml_format INT = NULL,
	@export_file_format VARCHAR(6) = NULL,
	@ftp_folder_path VARCHAR(1024) = NULL,
	@export_web_services_id		INT     = NULL, -- this is used for exporting data using web services
	@debug_mode BIT = NULL,
	@file_transfer_endpoint_id INT = NULL
AS

/*---------------------------------Debug Section--------------------------
DECLARE @spa VARCHAR(MAX) = NULL,
		@flag CHAR(1),
		@jobId VARCHAR(200) = NULL,
		@scheduleId INT = NULL,
		@report_name VARCHAR(200) = NULL,
		@active_start_date DATETIME = NULL,
		@active_start_time VARCHAR(20) = NULL,
		@freq_type INT = NULL,
		@freq_interval INT = NULL,
		@freq_subday_type INT = NULL,
		@freq_subday_interval INT = NULL,
		@freq_relative_interval INT = NULL,
		@freq_recurrence_factor INT = NULL,
		@active_end_date DATETIME = NULL,
		@active_end_time INT = NULL,
		@batch_type VARCHAR(50) = 'r',
		@generate_dynamic_params BIT = 0,
		@custom_as_of_date VARCHAR(20) = NULL,
		@notify_users VARCHAR(MAX) = NULL,
		@notify_roles VARCHAR(MAX) = NULL,
		@notification_type INT = NULL,
		@send_attachment CHAR(1) = 'n',
		@batch_unique_id VARCHAR(100) = NULL,
		@source VARCHAR(200) = NULL,
		@csv_path VARCHAR(500) = NULL,
		@login_id VARCHAR(50) = NULL,
		@holiday_calendar_id INT = NULL,
		@non_sys_users VARCHAR(8000) = NULL,
		@temp_notes_path VARCHAR(500) = NULL,
		@export_table_name VARCHAR(200) = NULL,
		@export_table_name_suffix VARCHAR(200) = NULL,
		@compress_file CHAR(1) = 'n',
		@delim VARCHAR(200) = NULL,
		@is_header VARCHAR(200) = NULL,
		@xml_format INT = NULL,
		@export_file_format VARCHAR(6) = NULL,
		@ftp_folder_path VARCHAR(1024) = NULL,
		@export_web_services_id		INT     = NULL,
		@debug_mode BIT = NULL,
		@file_transfer_endpoint_id = NULL

--SELECT @spa='ry_value_id=NULL,internal_counterparty=NULL,pricing_type=NULL,product_id=NULL,profile_id=NULL,counterparty_type=NULL,confirm_status_type=NULL,deal_status_id=NULL,deal_lock=NULL'''''''',is_refresh:0,report_region:en-US,runtime_user:runaj,global_currency_format:$,global_date_format:M/dd/yyyy,global_thousand_format:,#,global_rounding_format:#0.00,global_science_rounding_format:2,global_negative_mark_format:1,is_html:n'''', @OutputFileFormat = ''''EXCELOPENXML'''', @output_filename = ''''\\SG-D-WEB01\shared_docs_TRMTracker_Release\temp_Note\BatchReport - Deal Extract Report_runaj_2020_02_06_231200.xlsx'''', @csv_field_delimiter ='''','''', @csv_include_header =''''0'''', @process_id =''''CED0BEDD_7DFC_46E4_9FB5_BE53E6B5725E_5e3c2cab66c75'''',  @xml_format=''''-100000'''''',@batch_unique_id = ''5e3c2cab66c75'',@holiday_calendar_id = NULL,@job_name = @job_name',
--@flag='u',
--@jobId='C542E225-A86F-41F1-B144-AFF3C982EDA9',
--@scheduleId='13874',
--@report_name='TRMTracker_Release - Report_Batch_Batch_Test_CED0BEDD_7DFC_46E4_9FB5_BE53E6B5725E_5e3c2cab66c75',
--@active_start_date='2020-02-07',
--@active_start_time='000000',
--@freq_type=4,
--@freq_interval=1,
--@freq_subday_type=0,
--@freq_subday_interval='',
--@freq_relative_interval='',
--@freq_recurrence_factor=0,
--@active_end_date=NULL,
--@active_end_time='000000',
--@batch_type='r',
--@generate_dynamic_params='',
--@custom_as_of_date='',
--@notify_users='',
--@notify_roles='',
--@notification_type='751',
--@send_attachment='n',
--@batch_unique_id='5e3c2e8dafa91',
--@source='immediate_run',
--@csv_path='\\SG-D-WEB01\shared_docs_TRMTracker_Release\temp_Note\',
--@login_id='',
--@holiday_calendar_id='',
--@non_sys_users='',
--@temp_notes_path='\\SG-D-WEB01\shared_docs_TRMTracker_Release\temp_Note',
--@export_table_name='',
--@export_table_name_suffix='',
--@compress_file='n',
--@delim=',',
--@is_header='0',
--@xml_format='-100000',
--@export_file_format='.csv',
--@debug_mode=0,
--@export_web_services_id=''
--@file_transfer_endpoint_id = ''
select @flag='a', @jobId='C542E225-A86F-41F1-B144-AFF3C982EDA9'
------------------------------------------------------------------------*/

SET NOCOUNT ON
IF @csv_path = @temp_notes_path
	SET @csv_path = ''

SET @spa = NULLIF(@spa, '')
SET @flag = NULLIF(@flag, '')
SET @jobId = NULLIF(@jobId, '')
SET @scheduleId = NULLIF(@scheduleId, '')
SET @report_name = NULLIF(@report_name, '')
SET @active_start_date = NULLIF(@active_start_date, '')
SET @active_start_time = NULLIF(@active_start_time, '')
SET @freq_type = NULLIF(@freq_type, '')
SET @freq_interval = NULLIF(@freq_interval, '')
SET @freq_subday_type = NULLIF(@freq_subday_type, '')
SET @freq_subday_interval = NULLIF(@freq_subday_interval, '')
SET @freq_relative_interval = NULLIF(@freq_relative_interval, '')
SET @freq_recurrence_factor = NULLIF(@freq_recurrence_factor, '')
SET @active_end_date = NULLIF(@active_end_date, '')
SET @active_end_time = NULLIF(@active_end_time, '')
SET @generate_dynamic_params = NULLIF(@generate_dynamic_params, '')
SET @notify_users = NULLIF(@notify_users, '')
SET @notify_roles = NULLIF(@notify_roles, '')
SET @notification_type = NULLIF(@notification_type, '')
SET @send_attachment = NULLIF(@send_attachment, '')
SET @batch_unique_id = NULLIF(@batch_unique_id, '')
SET @source = NULLIF(@source, '')
SET @csv_path = NULLIF(@csv_path, '')
SET @login_id = NULLIF(@login_id, '')
SET @holiday_calendar_id = NULLIF(@holiday_calendar_id, '')
SET @non_sys_users = NULLIF(@non_sys_users, '')
SET @temp_notes_path = NULLIF(@temp_notes_path, '')
SET @export_table_name = NULLIF(@export_table_name, '')
SET @export_table_name_suffix = NULLIF(@export_table_name_suffix, '')
SET @compress_file = NULLIF(@compress_file, '')
SET @delim = NULLIF(@delim, '')
SET @is_header = NULLIF(@is_header, '')
SET @ftp_folder_path = NULLIF(@ftp_folder_path, '')
SET @debug_mode = NULLIF(@debug_mode, '')
SET @export_web_services_id = NULLIF(@export_web_services_id, '')
SET @file_transfer_endpoint_id = NULLIF(@file_transfer_endpoint_id, '')

DECLARE @job_name VARCHAR(500), @batch_report_param VARCHAR(5000), @desc VARCHAR(1000), @time VARCHAR(8), @active_start_date_int INT, @active_end_date_int INT,
		@msg VARCHAR(8000), @process_id VARCHAR(50), @desc1 VARCHAR(250), @user_login_id VARCHAR(100), @set_default_report_name_for_MTM_Run BIT, @diffwd INT,
		@currenttime DATETIME, @currenthourminsec INT, @endofmonth INT, @user_date_time DATETIME, @user_date DATETIME, @user_end_date_time DATETIME, @new_report_name VARCHAR(200),
		@ReturnCode TINYINT, @st VARCHAR(4000), @hasadminrights INT, @computed_flag VARCHAR(1), @next_run INT, @rfx_batch_call INT, @report_export_custom_dir VARCHAR(5000)

--incase of export (flag = e), set the computed_flag as i, since the processing logic of i is used. The original flag is required just
--to supress messageboard messages (Processing...)	
IF @debug_mode = 1 
	EXEC spa_print 'SPA:  ', @spa

IF @flag = 'e'
	SET @computed_flag = 'i'
ELSE
	SET @computed_flag = @flag

IF NULLIF(@user_login_id, '') IS NULL
	SET @user_login_id = dbo.FNADBUser()

SET @process_id = dbo.FNAGetNewID()

--Set standard node type xml format.
SELECT @xml_format = IIF(@xml_format IS NULL, value_id, @xml_format)
FROM static_data_value
WHERE [type_id] = 100000
	AND value_id = -100000

SET @next_run = CHARINDEX('.dbo.', @spa, 0)
SET @rfx_batch_call = CHARINDEX('spa_rfx_export_report_job', @spa, 0)

IF @rfx_batch_call <> 0 AND @csv_path IS NOT NULL
BEGIN
	SET @report_export_custom_dir = @csv_path
END
ELSE
BEGIN
	SET @csv_path = ISNULL(@csv_path, @temp_notes_path)	
END

IF @delim IS NULL
    SET @delim = ','

IF @csv_path IS NOT NULL 
BEGIN
	DECLARE @backslash_at_end INT,
			@is_dir INT,
			@is_file INT,
			@err_message VARCHAR(MAX),
			@server_name VARCHAR(100),
			@cmd VARCHAR(8000),
			@sql VARCHAR(MAX),
			@dummy_file VARCHAR(800)
	
	IF OBJECT_ID('tempdb..#is_dir') IS NOT NULL
		DROP TABLE #is_dir

	CREATE TABLE #is_dir(
		[OUTPUT] VARCHAR(4000) COLLATE DATABASE_DEFAULT
	)
	
	SET @backslash_at_end = CHARINDEX('\', REVERSE(@csv_path), 1)

	IF @backslash_at_end <> 1
	BEGIN
		SET @csv_path = @csv_path + '\'
	END
	
	-- Check if path has write access
	DECLARE @result NVARCHAR(MAX)
	SELECT @is_file = dbo.FNACheckWriteAccessToFolder(@csv_path)
	
	IF @is_file IN (0, -1)
	BEGIN
		SET @err_message = IIF(@is_file = 0, 'Please enter the correct Export directory with privilege.', 'Export directory is not found.') 
							
		EXEC spa_ErrorHandler 1, 'Check Directory Exists', 'spa_check_dir_exists', 'DB Error', @err_message, '0'
	
		RETURN		
	END		
END

DECLARE @is_scheduled CHAR(1)
SET @is_scheduled = IIF(@freq_type IS NULL, 'n', 'y')

IF @computed_flag = 'i'
BEGIN
	SET @batch_type = IIF(@batch_type IS NULL, 'r', @batch_type)
	SET @process_id = IIF(@batch_unique_id IS NOT NULL, @process_id + '_' + @batch_unique_id, @process_id)
	SET @user_date_time = CAST(CONVERT(VARCHAR(10), @active_start_date, 101) + ' ' + 
						  CAST(LEFT(@active_start_time, 2) AS VARCHAR(10)) + ':' + 
						  CAST(SUBSTRING(@active_start_time, 3, 2) AS VARCHAR(10)) + ':' +	
						  CAST(RIGHT(@active_start_time, 2) AS VARCHAR(10)) AS DATETIME)

	SET @user_date = dbo.FNAConvertTimezone(@user_date_time, 1)
	SET @active_start_date = @user_date
	SET @active_start_time = RIGHT('0' + CAST(DATEPART(hh, @active_start_date) AS VARCHAR(10)), 2) + 
							 RIGHT('0' + CAST(DATEPART(mi, @active_start_date) AS VARCHAR(10)), 2) +
							 RIGHT('0' + CAST(DATEPART(ss, @active_start_date) AS VARCHAR(10)), 2)

	SET @user_end_date_time =  CAST(CONVERT(VARCHAR(10), @active_end_date, 101) + ' 23:59:59' AS DATETIME)
	SET @active_end_date = dbo.FNAConvertTimezone(@user_end_date_time, 1)
	SET @active_end_time = RIGHT('0' + CAST(DATEPART(hh, @active_end_date) AS VARCHAR(10)), 2) +
						   RIGHT('0' + CAST(DATEPART(mi, @active_end_date) AS VARCHAR(10)), 2) +
						   RIGHT('0' + CAST(DATEPART(ss, @active_end_date) AS VARCHAR(10)), 2)
	
	IF (@report_name IS NULL OR @report_name = '') AND CHARINDEX('spa_get_settlement_sap_export', @spa, 0) > 1	
		SET @new_report_name = 'SAP Export'
		
	IF ISNULL(@batch_type, '') = 'r' 
	BEGIN
		SET @job_name = IIF(@report_name IS NOT NULL, 'Report_Batch_' + @report_name + '_' + @process_id, 'Report_Batch_' + @process_id)
	END 
	ELSE IF ISNULL(@batch_type, '') = 'i' 
	BEGIN
		SET @job_name = IIF(@report_name IS NOT NULL, 'ImportData_' + @report_name + '_' + @process_id, 'ImportData_' + @process_id)		
	END
	ELSE IF ISNULL(@batch_type, '') = 'e' 
	BEGIN
		SET @job_name = IIF(@report_name IS NOT NULL, 'ExportData_' + @report_name + '_' + @process_id, 'ExportData_' + @process_id)
	END
	ELSE IF ISNULL(@batch_type, '') = 's' 
	BEGIN
		SET @job_name = IIF(@report_name IS NOT NULL, 'Report_Snapshot_Job_' + @report_name + '_' + @process_id, 'Report_Snapshot_Job_' + @process_id)
	END
	ELSE
	BEGIN
		SET @job_name = IIF(@report_name IS NOT NULL, 'batch_' + @report_name + '_' + @process_id, 'batch_' + @process_id)
	END
	
	----From view schedule job menu original jobid is included in @spa 
	--IF (CHARINDEX('JobID:', @spa) > 0)
	--BEGIN
	--	SELECT  @spa = REPLACE(REPLACE(RIGHT(command, LEN(command) - CHARINDEX('GO', command) - IIF(CHARINDEX('GO', command)>0,1,0)) ,CHAR(13),' '),CHAR(10),' ')
	--	FROM msdb.dbo.sysjobsteps
	--	WHERE job_id =  REPLACE(@spa,'JobID:','')
	--		AND step_id = 1
	--END
	
	SET @spa = LTRIM(IIF(SUBSTRING(LTRIM(@spa),1,4)='EXEC', SUBSTRING(LTRIM(@spa), 5, LEN(@spa)), @spa))
	SET @batch_report_param = REPLACE(@spa, '''', '''''')
	
	--'spa_run_sp_with_dynamic_params' will need to generate new process id and REPLACE to 'PROCESS_ID:'
	IF @source = 'immediate_run'
	BEGIN
		SET @spa = REPLACE(@spa, 'PROCESS_ID:', @process_id)
		SET @source = NULL
	END
	IF (CHARINDEX('JobID:', @spa) > 0) SET @next_run = 1

	IF @rfx_batch_call = 0
	BEGIN
		IF @next_run <> 0
		BEGIN
			SET @spa = @spa
		END
		ELSE
		BEGIN
			IF @freq_type IS NOT NULL  
			BEGIN
				SET @generate_dynamic_params = 1 --for recursive job, makes sure to generate dyanamic process_id.
				SET @spa = @spa + ',@batch_process_id=''PROCESS_ID:'',@batch_report_param=''' + @batch_report_param + ''''
			END
			ELSE
				SET @spa = @spa + ',@batch_process_id="' + @process_id + '",@batch_report_param=''' + @batch_report_param + ''''	
		END
	END
		
	--If user or roles are not null the insert in table batch_process_notifications
	--don't try to re-save export and notification info in case of export flag	
	IF (@flag <> 'e') AND (@notify_users IS NOT NULL OR @notify_roles IS NOT NULL OR @csv_path IS NOT NULL OR @holiday_calendar_id IS NOT NULL OR @export_table_name IS NOT NULL)
	BEGIN
		IF @batch_type = 'c' SET @csv_path = NULL

		INSERT INTO batch_process_notifications (
			user_login_id, role_id, process_id, notification_type, attach_file, scheduled, csv_file_path, holiday_calendar_id, non_sys_user_email, export_table_name,
			compress_file, delimiter, report_header, xml_format,output_file_format, ftp_folder_path, export_web_services_id, file_transfer_endpoint_id	
		)	
		SELECT @user_login_id, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL,
			   @export_table_name, @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id		   
		UNION 
		SELECT a.item, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL, @export_table_name,
			   @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id
		FROM dbo.SplitCommaSeperatedValues(@notify_users) a
		LEFT JOIN application_users au ON au.user_login_id = a.item
		WHERE @notify_users IS NOT NULL
			AND au.user_active = 'y'
		UNION
		SELECT NULL, a.item, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL, @export_table_name,
			   @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path	, @export_web_services_id, @file_transfer_endpoint_id
		FROM dbo.SplitCommaSeperatedValues(@notify_roles) a
		WHERE @notify_roles IS NOT NULL
		UNION	
		SELECT NULL, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, a.item, @export_table_name,
			   @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path	, @export_web_services_id, @file_transfer_endpoint_id
		FROM dbo.SplitCommaSeperatedValues(@non_sys_users) a
	END

	IF @generate_dynamic_params = 1 AND @rfx_batch_call = 0
	BEGIN
		SET @spa = 'spa_run_sp_with_dynamic_params ''' + REPLACE(@spa, '''', '''''') + ''', ''' + @batch_unique_id + ''', ' + ISNULL('''' + CAST(@holiday_calendar_id AS VARCHAR(10)) + '''', 'NULL')
		--Append extra parameters only if available, to make it compatible with old version of spa_run_sp_with_dynamic_params where new parameters (process_id, export_table_name) aren't added yet.
		IF ISNULL(@export_table_name, '') <> ''
			SET @spa = @spa + ', ''' + @process_id + '''' + ISNULL(', ''' + @export_table_name_suffix + '''', '')
	END

	IF @debug_mode = 1 
		EXEC spa_print 'Job: ', @spa

	IF @freq_type IS NULL 
	BEGIN
		--Resolve dynamic date if spa contains dynamic date	for non recurring jobs(immediate job)
		SET @spa = [dbo].FNAReplaceDYNDateParam(@spa) 
		IF @batch_type = 'i' OR @batch_type = 'e'
		BEGIN
			SET @new_report_name = ISNULL(@new_report_name, IIF(@batch_type = 'i', 'ImportData', 'ExportData'))
		END
		ELSE
		BEGIN
			SET @new_report_name = ISNULL(@report_name, 'BatchReport')
		END	
	END
	/*Message board insert login begin*/
	DECLARE @start_date DATETIME
	SET @start_date = GETDATE()
	
	INSERT process_log_tracker (process_id, time_start)
	VALUES (@process_id, @start_date)

	SET @msg = 'Processing <b>' + ISNULL(@new_report_name, '') + '</b>... Please wait'
	
	IF @batch_type = 'c' 
	BEGIN
		SET @msg = 'Batch process has been scheduled to run as of date ' + dbo.FNADateFormat([dbo].[FNAResolveCustomAsOfDate](@custom_as_of_date, @active_start_date)) + '.'
		
		IF @freq_type IS NULL 
		BEGIN
			SET @desc =  'Batch process has been scheduled to run. Please refresh the message board to check status.'		
		END
		ELSE
		BEGIN
			SET @time = CONVERT(VARCHAR(5), @user_date_time, 108)
			SET @desc = 'Batch process has been scheduled to run on ' + dbo.FNADateFormat(@user_date_time) + ' at ' + @time + '. Please refresh the message board to check status.'
		END
		
		EXEC spa_ErrorHandler 0, @job_name, 'process run', 'Status', @desc, ''

		SET @new_report_name = ISNULL(@new_report_name, 'ImportData')
		
		EXEC spa_message_board 'i', @user_login_id, NULL, @new_report_name , @msg, '', '', 's', @job_name, NULL , @process_id
	END

	IF @batch_type IN ('i', 'e')
	BEGIN 
		IF @freq_type IS NULL 
		BEGIN
			IF NOT EXISTS (
				SELECT 1
				FROM dbo.farrms_sysjobactivity a 
				INNER JOIN msdb.dbo.sysjobs_view v ON a.job_id = v.job_id
				WHERE v.[name] LIKE IIF(@batch_type = 'i', 'importdata%', 'exportdata%')
					AND a.stop_execution_date IS NULL
					AND [name] <> @job_name
					AND a.schedule_id IS NULL
			)
				SET @msg = 'Your Ad-hoc ' + CASE WHEN @batch_type = 'i' THEN 'import' ELSE 'export' END + ' data process has been run and will complete shortly.'
			ELSE
				SET @msg = 'Your Ad-hoc ' + CASE WHEN @batch_type = 'i' THEN 'import' ELSE 'export' END + ' data process is in queue and will start shortly.'
			
			SET @desc = IIF(@batch_type = 'i', 'Import', 'Export') + ' Data process has been scheduled to run. Please refresh the message board to check status.'		
		END
		ELSE 
		BEGIN
			SET @time = CONVERT(VARCHAR(5), @user_date_time, 108)
			SET @msg =  IIF(@batch_type = 'i', 'Import', 'Export') + ' process has been scheduled to run on ' + dbo.FNADateFormat(@user_date_time) + ' at ' + @time + '. Please refresh the message board to check status.'
		END
		
		SET @desc = ISNULL(@desc, @msg)
		EXEC spa_ErrorHandler 0, @job_name, 'process run', 'Status', @desc, ''

		SET @new_report_name = ISNULL(@new_report_name, IIF(@batch_type = 'i', 'Import', 'Export'))
		
		EXEC spa_message_board 'i', @user_login_id, NULL, @new_report_name , @msg, '', '', 's', @job_name, NULL, @process_id
	END
	ELSE IF (ISNULL(@batch_type,'') <> 'i') AND (ISNULL(@batch_type,'') <> 'c')
	BEGIN		
		IF @freq_type IS NOT NULL
		BEGIN
			SET @msg = 'Batch process has been scheduled to run'
			
			IF @freq_type = 1
				SET @msg = @msg + ' as of date ' + dbo.FNADateFormat([dbo].[FNAResolveCustomAsOfDate](@custom_as_of_date, @active_start_date))
			SET @msg = @msg + '.'
		END
			
		IF @report_name IS NULL OR @new_report_name = @report_name --Job name given and report name not resolved specially (like MTM Process or SAP Report) 
		BEGIN
			SET @new_report_name = 'BatchReport'
		END	
		
		IF @source IS NOT NULL
		BEGIN
			SET @new_report_name = @source
		END
		
		SET @new_report_name = ISNULL(@new_report_name, 'BatchReport')		
		
		IF @flag <> 'e'
			EXEC spa_message_board 'i', @user_login_id, NULL, @new_report_name, @msg, NULL, NULL, 's', @job_name, NULL, @process_id, DEFAULT, 'n'
	END
	/*Message board insert login end */
	
	IF @freq_type IS NULL 
	BEGIN
		IF @batch_type = 'i' OR @batch_type = 'e' 
		BEGIN
			EXEC spa_run_sp_as_job @job_name, @spa, @new_report_name, @user_login_id, DEFAULT, DEFAULT, DEFAULT
		END
		ELSE
		BEGIN
			IF @rfx_batch_call <> 0
			BEGIN
				SET @spa = @spa + ', @process_id = ''' + @process_id + ''', @report_export_custom_dir = ''' 
							+ ISNULL(@report_export_custom_dir, '')+ ''''
							--+ ', @batch_unique_id = ' + ISNULL('''' + @batch_unique_id + '''', 'NULL') 
							--+ ', @holiday_calendar_id = ' + ISNULL(CAST(@holiday_calendar_id AS VARCHAR(10)), 'NULL') 
							+ ', @job_name = ' + ISNULL('''' + @job_name + '''', 'NULL')
			
				EXEC(@spa)				
			END
			ELSE
			BEGIN
				EXEC spa_run_sp_as_job @job_name, @spa, @new_report_name, @user_login_id, DEFAULT, DEFAULT, DEFAULT
			END
			
			IF @batch_type = 'r' OR @batch_type = 's' OR @batch_type = 'remit'
			BEGIN
				EXEC spa_ErrorHandler 0, 'BatchReport', 'process run', 'Status', 'Batch process has been run and will complete shortly.', 'Please check/refresh your message board.'
			END
		END
	END
	ELSE 
	BEGIN
		SET @time = RIGHT('0' + CAST(@active_start_time AS VARCHAR(10)), 6)
		SET @time = LEFT(@time, 2) + ':' + SUBSTRING(@time, 3, 2)
		SET @active_start_date_int = CAST(REPLACE(CONVERT(VARCHAR(10), @active_start_date, 21), '-', '') AS INT)
		SET @active_end_date_int = CAST(REPLACE(CONVERT(VARCHAR(10), @active_end_date, 21), '-', '') AS INT)

		--for weekly recurring, set the start_date to the weekday that has been set to start.
		IF @freq_type = 8
		BEGIN
			SET @diffwd = LOG(@freq_interval)/LOG(2) + 1 - DATEPART(dw, @active_start_date)
			
			IF @diffwd < 0 
				SET @diffwd = @diffwd + 7
			
			IF @diffwd <> 0 
				SET @active_start_date = DATEADD(DAY, @diffwd, @active_start_date)
		END		
		ELSE IF @freq_type = 16
		BEGIN
			--for monthly recurring, set the start_date to the month day that has been set to start.
			--check if that set day is greater than end day of month (for eg 28/29 for feb, 30 for april)
			--Job date wont be back date.
			SET @currenttime = GETDATE()
			IF @active_start_date < @currenttime
				SET @active_start_date = @currenttime
			
			SET @currenthourminsec = CAST(DATEPART(HOUR, @currenttime) AS VARCHAR(10)) + RIGHT('0' + CAST(DATEPART(MINUTE, @currenttime) AS VARCHAR(10)), 2) + '00'
			
			--if yearmonth(startdate) > current date ,it is safe to run on same year month.
			IF (CAST(CAST(YEAR(@active_start_date) AS VARCHAR(10)) + CAST(MONTH(@active_start_date) AS VARCHAR(10)) AS INT) = CAST(CAST(YEAR(@currenttime) AS VARCHAR(10)) + CAST(MONTH(@currenttime) AS VARCHAR) AS INT))
			IF (DAY(@active_start_date) > @freq_interval) OR (DAY(@active_start_date) = @freq_interval AND @currenthourminsec > CAST(@active_start_time AS INT))
				SET @active_start_date = DATEADD(MONTH, 1, @active_start_date)

			SET @endofmonth = DAY(DATEADD(DAY, -1, DATEADD(MONTH, 1, CAST(YEAR(@active_start_date) AS VARCHAR(10)) + '-' + CAST(MONTH(@active_start_date) AS VARCHAR(10)) + '-01')))
							  
			IF DAY(@active_start_date) <> @freq_interval
				SET @active_start_date = CAST(YEAR(@active_start_date) AS VARCHAR(10)) + '-' + 
										 CAST(MONTH(@active_start_date) AS VARCHAR(10)) + '-' + 
										 IIF(@freq_interval > @endofmonth, CAST(@endofmonth AS VARCHAR(10)), CAST(@freq_interval AS VARCHAR(10)))
		END

		SET @time = CONVERT(VARCHAR(5), @user_date_time, 108)

		IF @batch_type = 'i'
			SET @desc1 = 'Import process has been scheduled to run'	
		ELSE IF @batch_type = 'e'
			SET @desc1 = 'Export process has been scheduled to run'	
		ELSE	
			SET @desc1 = 'Batch process has been scheduled to run'	
		
		IF @freq_type = 1
		BEGIN
			SET @desc1 = @desc1 + ' on ' + dbo.FNADateFormat(@user_date_time) + ' at ' + @time			
		END
		
		SET @desc1 = @desc1 + '.'
	        
		IF @rfx_batch_call <> 0
		BEGIN								
			SET @spa = @spa + ', @process_id = ''' + @process_id + ''', @report_export_custom_dir = ''' + ISNULL(@report_export_custom_dir, '') + ''''

			SELECT @spa = @spa + ', @active_start_date = ''' + CAST(ISNULL(@active_start_date_int, 19900101) AS VARCHAR(50)) 
							   + ''', @active_start_time = ''' + CAST(ISNULL(@active_start_time, 99991231) AS VARCHAR(50)) 
							   + ''', @freq_type = ''' + CAST(ISNULL(@freq_type, 1) AS VARCHAR(50)) 
							   + ''', @freq_interval = ''' + CAST(ISNULL(@freq_interval, 0) AS VARCHAR(50)) 
							   + ''', @freq_subday_type = ''' + CAST(ISNULL(@freq_subday_type, 0) AS VARCHAR(50)) 
							   + ''', @freq_subday_interval = ''' + CAST(ISNULL(@freq_subday_interval, 0) AS VARCHAR(50)) 
							   + ''', @freq_relative_interval = ''' + CAST(ISNULL(@freq_relative_interval, 0) AS VARCHAR(50)) 
							   + ''', @freq_recurrence_factor = ''' + CAST(ISNULL(@freq_recurrence_factor, 0) AS VARCHAR(50)) 
							   + ''', @active_end_date = ''' + CAST(ISNULL(@active_end_date_int, 000000) AS VARCHAR(50)) 
							   + ''', @active_end_time = ''' + CAST(ISNULL(@active_end_time, 235959) AS VARCHAR(50))
   							   + ''''
							   --+ ', @batch_unique_id = ' + ISNULL('''' + @batch_unique_id + '''', 'NULL') 
							  -- + ', @holiday_calendar_id = ' + ISNULL(CAST(@holiday_calendar_id AS VARCHAR(10)), 'NULL') 
   							   + ', @job_name = ' + ISNULL('''' + @job_name + '''', 'NULL')

			EXEC(@spa)
		END
		ELSE
		BEGIN
			EXEC spa_run_sp_as_job_schedule @job_name, @spa, 'BatchReport', @user_login_id, NULL, @active_start_date_int, @active_start_time, @freq_type, @freq_interval, @freq_subday_type,
										    @freq_subday_interval, @freq_relative_interval, @freq_recurrence_factor, @active_end_date_int, @active_end_time, @next_run
		END
	    
		EXEC spa_ErrorHandler 0, 'BatchReport', 'Process Run', 'Status', @desc1, 'Please check/refresh your message board.'
	END  
	
END
ELSE IF @computed_flag = 'a'
BEGIN
	SET @st = '
		SELECT DISTINCT sjs.job_id, REPLACE(ss.name, ''schedule_'', '''') AS jobname, ss.schedule_id, ss.freq_type, ss.freq_interval, ss.freq_subday_type, ss.freq_subday_interval, ss.freq_relative_interval, ss.freq_recurrence_factor, 
			   dbo.FNAConvertTimezone(CAST(CONVERT(VARCHAR(10), ss.active_start_date, 101) + '' '' + CAST(LEFT(RIGHT(''0'' + CAST(ss.active_start_time AS VARCHAR(10)), 6), 2) AS VARCHAR(10)) + '':'' + CAST(SUBSTRING(RIGHT(''0'' + CAST(ss.active_start_time AS VARCHAR(10)), 6), 3, 2) AS VARCHAR(10)) + '':'' + CAST(RIGHT(RIGHT(''0'' + CAST(ss.active_start_time AS VARCHAR(10)), 6), 2) AS VARCHAR(10)) AS DATETIME), 0) [start_date],
			   dbo.FNAConvertTimezone(CAST(CONVERT(VARCHAR(10), ss.active_end_date, 101) + '' '' + CAST(LEFT(RIGHT(''0'' + CAST(ss.active_end_time AS VARCHAR(10)), 6), 2) AS VARCHAR(10)) + '':'' + CAST(SUBSTRING(RIGHT(''0'' + CAST(ss.active_end_time AS VARCHAR(10)), 6), 3, 2) AS VARCHAR(10)) + '':'' +	CAST(RIGHT(RIGHT(''0'' + CAST(ss.active_end_time AS VARCHAR(10)), 6), 2) AS VARCHAR(10)) AS DATETIME), 0) [end_date],
			   bpn.csv_file_path, bpn.notification_type, bpn.attach_file, bpn.holiday_calendar_id, bpn.export_table_name, bpn.compress_file,
			   bpn.delimiter,
			   report_header,
			   bpn.output_file_format,
			   bpn.ftp_folder_path,
			   bpn.export_web_services_id,
			   bpn.file_transfer_endpoint_id
		INTO #temp_jobs_table
		FROM msdb.dbo.sysschedules ss
		LEFT JOIN msdb.dbo.sysjobschedules sjs ON ss.schedule_id = sjs.schedule_id
		LEFT JOIN batch_process_notifications bpn ON bpn.process_id  = RIGHT(ss.name, 13) COLLATE DATABASE_DEFAULT
		WHERE sjs.job_id = ''' + @jobId + '''
		ORDER BY jobname
			
		SELECT job_id, jobname, schedule_id, freq_type, freq_interval, freq_subday_type, freq_subday_interval, freq_relative_interval, freq_recurrence_factor,
			   CAST(REPLACE(CONVERT(VARCHAR(10), start_date, 21), ''-'', '''') AS INT) [active_start_date],
			   CAST(REPLACE(CONVERT(VARCHAR(10), end_date, 21), ''-'', '''') AS INT) [active_end_date],
			   RIGHT(''0'' + CAST(DATEPART(hh, start_date) AS VARCHAR(10)), 2) + RIGHT(''0'' + CAST(DATEPART(mi, start_date) AS VARCHAR(10)), 2) + RIGHT(''0'' + CAST(DATEPART(ss, start_date) AS VARCHAR(10)), 2) [active_start_time],
			   RIGHT(''0'' + CAST(DATEPART(hh, end_date) AS VARCHAR(10)), 2) + RIGHT(''0'' + CAST(DATEPART(mi, end_date) AS VARCHAR(10)), 2) + RIGHT(''0'' + CAST(DATEPART(ss, end_date) AS VARCHAR(10)), 2) [active_end_time],
			   csv_file_path, notification_type, attach_file, holiday_calendar_id, export_table_name, compress_file, delimiter, report_header, output_file_format,
			   ftp_folder_path, export_web_services_id
			   , CAST(b.file_transfer_endpoint_id AS NVARCHAR(8)) + ''|'' 
				+ CASE WHEN file_protocol = 2 THEN ''sftp://'' ELSE ''ftp://''  END 
				+ b.host_name_url file_transfer_endpoint_id
		FROM #temp_jobs_table a
		LEFT JOIN file_transfer_endpoint b ON b.file_transfer_endpoint_id = a.file_transfer_endpoint_id
		'
	EXEC(@st)
END
ELSE IF @computed_flag = 'x' 
BEGIN
	SELECT job_id, RIGHT(command, LEN(command) - CHARINDEX('GO', command) - 1) spa
	FROM msdb.dbo.sysjobsteps
	WHERE job_id =  @jobId
		AND step_id = 1
END
ELSE IF @computed_flag = 'u'
BEGIN
	SET @user_date_time = CAST(CONVERT(VARCHAR(10), @active_start_date, 101) + ' ' + 
						  CAST(LEFT(@active_start_time, 2) AS VARCHAR(10)) + ':' +
						  CAST(SUBSTRING(@active_start_time, 3, 2) AS VARCHAR(10)) + ':' +
						  CAST(RIGHT(@active_start_time, 2) AS VARCHAR(10)) AS DATETIME)

	SET @active_start_date = dbo.FNAConvertTimezone(@user_date_time, 1)
	SET @active_start_time = RIGHT('0' + CAST(DATEPART(hh, @active_start_date) AS VARCHAR(10)), 2)
						   + RIGHT('0' + CAST(DATEPART(mi, @active_start_date) AS VARCHAR(10)), 2) 
						   + RIGHT('0' + CAST(DATEPART(ss, @active_start_date) AS VARCHAR(10)), 2)

	SET @user_end_date_time =  CAST(CONVERT(VARCHAR(10), @active_end_date, 101) + ' 23:59:59' AS DATETIME)
	SET @active_end_date = dbo.FNAConvertTimezone(@user_end_date_time, 1)
	SET @active_end_time = RIGHT('0' + CAST(DATEPART(hh, @active_end_date) AS VARCHAR(10)), 2) + 
						   RIGHT('0' + CAST(DATEPART(mi, @active_end_date) AS VARCHAR(10)), 2) +
						   RIGHT('0' + CAST(DATEPART(ss, @active_end_date) AS VARCHAR(10)), 2)

	SET @active_start_date_int = CAST(REPLACE(CONVERT(VARCHAR(10), @active_start_date, 21), '-', '') AS INT)
    SET @active_end_date_int = CAST(REPLACE(CONVERT(VARCHAR(10), @active_end_date, 21), '-', '') AS INT)
    
   	SELECT @freq_type = ISNULL(@freq_type, 1),
		   @freq_interval = ISNULL(@freq_interval, 0) ,
		   @freq_subday_type = ISNULL(@freq_subday_type, 0),
		   @freq_subday_interval = ISNULL(@freq_subday_interval, 0),
		   @freq_relative_interval = ISNULL(@freq_relative_interval, 0),
		   @freq_recurrence_factor = ISNULL(@freq_recurrence_factor, 0),
		   @active_start_date_int = ISNULL(@active_start_date_int, 19900101),
		   @active_end_date_int = ISNULL(@active_end_date_int, 000000),
		   @active_start_time = ISNULL(@active_start_time, 99991231),
		   @active_end_time = ISNULL(@active_end_time, 235959)
	
	EXEC msdb.dbo.sp_update_schedule @schedule_id =  @scheduleId, @freq_type = @freq_type, @freq_interval = @freq_interval, @freq_subday_type = @freq_subday_type,
									 @freq_subday_interval = @freq_subday_interval, @freq_relative_interval = @freq_relative_interval, @freq_recurrence_factor = @freq_recurrence_factor,
									 @active_start_date = @active_start_date_int, @active_end_date = @active_end_date_int, @active_start_time = @active_start_time, @active_end_time = @active_end_time;

	IF @@ERROR <> 0
		EXEC spa_ErrorHandler @@ERROR, 'Manage Job', 'batch_report_process', 'DB Error', 'Failed to update requested job.', ''
	ELSE
		EXEC spa_ErrorHandler 0, 'Manage Job ', 'batch_report_process', 'Success', 'Job has been updated successfully.', ''
	
	IF @notify_users IS NOT NULL OR @notify_roles IS NOT NULL OR @csv_path IS NOT NULL OR @holiday_calendar_id IS NOT NULL OR @export_table_name IS NOT NULL
	BEGIN
		SET @batch_unique_id = RIGHT(@report_name, 13)
		IF @batch_type = 'c' SET @csv_path = NULL
		--First deleting existing records for this job then insert again new records
		DELETE 
		FROM batch_process_notifications
		WHERE process_id = @batch_unique_id 
		
		INSERT INTO batch_process_notifications(
			user_login_id, role_id, process_id, notification_type, attach_file, scheduled, csv_file_path, holiday_calendar_id, non_sys_user_email,
			export_table_name, compress_file, delimiter, report_header, xml_format, output_file_format, ftp_folder_path, export_web_services_id, file_transfer_endpoint_id	
		)
		SELECT @user_login_id, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL,
			   @export_table_name, @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id	   
		UNION
		SELECT a.item, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL,
			   @export_table_name, @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id				   
		FROM dbo.SplitCommaSeperatedValues(@notify_users) a
		WHERE @notify_users IS NOT NULL
		UNION
		SELECT NULL, a.item, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, NULL,
			   @export_table_name, @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id				   
		FROM dbo.SplitCommaSeperatedValues(@notify_roles) a
		WHERE @notify_roles IS NOT NULL
		UNION	
		SELECT NULL, NULL, @batch_unique_id, @notification_type, @send_attachment, @is_scheduled, @csv_path, @holiday_calendar_id, a.item,
		   @export_table_name, @compress_file, @delim, @is_header, @xml_format, @export_file_format, @ftp_folder_path, @export_web_services_id, @file_transfer_endpoint_id
		FROM  dbo.SplitCommaSeperatedValues(@non_sys_users) a
	END
END
ELSE IF @computed_flag = 'r'
BEGIN
	EXEC @ReturnCode = msdb.dbo.sp_start_job @job_id = @jobId;
	
	IF @@ERROR <> 0 OR @ReturnCode = 1
		EXEC spa_ErrorHandler -1, 'Manage Job', 'batch_report_process', 'DB Error', 'Failed to run requested job.', ''
	ELSE
		EXEC spa_ErrorHandler 0, 'Manage Job ', 'batch_report_process', 'Success', 'Job has been started successfully.', '' 
END
ELSE IF @computed_flag = 'd'
BEGIN
	BEGIN TRY
		BEGIN TRAN
			DECLARE @del_jobs VARCHAR(MAX) = NULL
				  , @del_ids VARCHAR(MAX) = @jobId
			--	  , @stop_jobs VARCHAR(MAX) = NULL;

			SELECT @del_jobs = COALESCE(@del_jobs + 'EXEC msdb.dbo.sp_delete_job ', '') + '''' + CONVERT(VARCHAR(MAX), job_id) + '''; '
			FROM msdb.dbo.sysjobs jobs
			INNER JOIN dbo.FNASplit(@del_ids, ',') ids ON ids.item = jobs.job_id;

			--SELECT @stop_jobs = COALESCE(@stop_jobs + 'EXEC msdb.dbo.sp_stop_job ', '') + '''' + CONVERT(VARCHAR(MAX), job_id) + '''; '
			--FROM msdb.dbo.sysjobs jobs
			--INNER JOIN dbo.FNASplit(@del_ids, ',') ids ON ids.item = jobs.job_id;

			--EXEC('EXEC msdb.dbo.sp_stop_job ' + @stop_jobs);
			EXEC('EXEC msdb.dbo.sp_delete_job ' + @del_jobs);

			DELETE FROM batch_process_notifications WHERE process_id = RIGHT(@report_name, 13);

			EXEC spa_ErrorHandler 0, 'Manage Job ', 
				'batch_report_process', 'Success', 
				'Job has been deleted successfully.', ''

			COMMIT TRAN
    END TRY
    BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRAN

		EXEC spa_ErrorHandler -1, 'Manage Job', 
			'batch_report_process', 'DB Error', 
			'Failed to delete requested job.', ''
	END CATCH	
END  
ELSE IF @computed_flag = 'n'
BEGIN
	SELECT au.user_login_id,
	       (au.user_f_name + ' ' + au.user_l_name) notify_users
	FROM application_users au
	INNER JOIN batch_process_notifications bpn ON au.user_login_id = bpn.user_login_id
	WHERE au.user_login_id <> dbo.FNADBUser()
		AND bpn.process_id = RIGHT(@report_name, 13)
	ORDER BY au.user_f_name
END	
ELSE IF @computed_flag = 'v'
BEGIN
	SELECT asr.role_id AS [Role ID], 
	       asr.role_name AS [Role Name]
	FROM application_security_role asr
	INNER JOIN batch_process_notifications bpn ON  asr.role_id = bpn.role_id
	WHERE bpn.process_id = RIGHT(@report_name, 13)
	ORDER BY asr.role_name	
END
ELSE IF @computed_flag = 'w'
BEGIN
	IF OBJECT_ID('tempdb..#agentOperatorRole','u') IS NOT NULL
		DROP TABLE #agentOperatorRole

	CREATE TABLE #agentOperatorRole (
		SQLAgentOperatorRole VARCHAR(100) COLLATE DATABASE_DEFAULT
	)
	
	DECLARE @qry VARCHAR(MAX),
			@returnValue VARCHAR(100)
	
	SET @qry = '
		USE msdb
		INSERT INTO #agentOperatorRole(SQLAgentOperatorRole)
		SELECT ISNULL(IS_MEMBER(''SQLAgentOperatorRole''), 0)
	'
	EXEC(@qry)
	
	SELECT @returnValue = SQLAgentOperatorRole
	FROM #agentOperatorRole
	
	--(User is SYSADMIN OR User has SQLAgentOperatorRole) OR (User is under Application Admin Group role type)
	
	SELECT IIF(ISNULL(dbo.FNAAppAdminRoleCheck(@login_id), 0) <> 0, 1, 0) hasadminrights,
		   IIF(IS_SRVROLEMEMBER('sysadmin') = 1 OR 1 = @returnValue, 1, 0) has_server_level_permission
END
ELSE IF @computed_flag = 'f'
BEGIN
	SELECT non_sys_user_email
	FROM batch_process_notifications
	WHERE process_id = RIGHT(@report_name, 13)
	    AND user_login_id IS NULL
	    AND role_id IS NULL
END

--Export to table logic for Report Manager Reports
IF @export_table_name IS NOT NULL AND @rfx_batch_call > 0
BEGIN
	DECLARE @paramset_id VARCHAR(8000), @criteria VARCHAR(8000), @component_id VARCHAR(8000), @display_type VARCHAR(50),
			@paramset_hash VARCHAR(8000), @report_batch_spa VARCHAR(8000), @rfx_item_count INT 
							
	SELECT @paramset_id = dbo. FNARFXGetReportParameterValue(@spa, 'vParamsetID')
	SELECT @criteria = dbo. FNARFXGetReportParameterValue(@spa, 'vReportFilter')
	SELECT @paramset_hash = dbo. FNARFXGetReportParameterValue(@spa, 'vParamsetHash')
	
	-- Count the number of tablix and chart present in a page.
	--If the count is greater then 1(i.e more the 1 tablix or chart then only concate @export_table_name_suffix else pass NULL )

	SELECT @rfx_item_count = COUNT(*) 
	FROM (
		SELECT 1 itm
		FROM report_paramset rps 
		INNER JOIN report_page rp ON rp.report_page_id = rps.page_id
		INNER JOIN report_page_tablix rpt ON rpt.page_id = rp.report_page_id
		WHERE rps.paramset_hash = @paramset_hash
		UNION ALL
		SELECT 1
		FROM report_paramset rps 
		INNER JOIN report_page rp ON rp.report_page_id = rps.page_id
		INNER JOIN report_page_chart rpc ON rpc.page_id = rp.report_page_id
		WHERE rps.paramset_hash = @paramset_hash
	) cnt_rows

	DECLARE cur_generate_report_query  CURSOR LOCAL FOR
	
	SELECT rps.report_paramset_id [paramset_id],
		   rpt.report_page_tablix_id [component_id],
		   't' [display_type],
		   rpt.name AS [suffix]
	FROM report_paramset rps 
	INNER JOIN report_page rp ON rp.report_page_id = rps.page_id
	INNER JOIN report_page_tablix rpt ON rpt.page_id = rp.report_page_id
	WHERE rps.paramset_hash = @paramset_hash
	UNION ALL
	SELECT rps.report_paramset_id [paramset_id],
		   rpc.report_page_chart_id [component_id],
		   'c' [display_type],
		   rpc.name AS [suffix]
	FROM report_paramset rps 
	INNER JOIN report_page rp ON rp.report_page_id = rps.page_id
	INNER JOIN report_page_chart rpc ON rpc.page_id = rp.report_page_id
	WHERE rps.paramset_hash = @paramset_hash

	OPEN cur_generate_report_query   
	FETCH NEXT FROM cur_generate_report_query INTO @paramset_id, @component_id, @display_type, @export_table_name_suffix
	WHILE @@FETCH_STATUS = 0 
	BEGIN
		SET @report_batch_spa = 'spa_rfx_run_sql ''' + @paramset_id + ''', '''+ @component_id + ''', ' +  IIF(NULLIF(@criteria,'') IS NULL, 'NULL', ''''+ @criteria + '''' ) + ', NULL, ''' + @display_type + ''', ''' + @user_login_id + ''', NULL, NULL'
		
		SELECT @export_table_name_suffix = IIF(@rfx_item_count > 1, @export_table_name_suffix, NULL)
		
		EXEC batch_report_process @report_batch_spa, 'e', @jobId, @scheduleId, @report_name, @active_start_date, @active_start_time, @freq_type, @freq_interval, @freq_subday_type,
								  @freq_subday_interval, @freq_relative_interval, @freq_recurrence_factor, @active_end_date, @active_end_time, 'r', 1, @custom_as_of_date, NULL, NULL,
								  NULL, 'n', @batch_unique_id, @source, NULL, @login_id, @holiday_calendar_id, NULL, @temp_notes_path, @export_table_name, @export_table_name_suffix,
								  @compress_file, @delim, @is_header, @xml_format, @export_file_format
			
		FETCH NEXT FROM cur_generate_report_query INTO @paramset_id, @component_id, @display_type, @export_table_name_suffix
	END 
	CLOSE cur_generate_report_query   
	DEALLOCATE cur_generate_report_query
END
GO