IF OBJECT_ID('spa_calc_mtm_job') IS NOT NULL
DROP PROCEDURE [dbo].[spa_calc_mtm_job]
GO

/****** Object:  StoredProcedure [dbo].[spa_calc_mtm_job]    Script Date: 5/26/2014 3:15:38 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


 /**
	Calculate Marked to Market and settlement of deals in portfolio.


	Parameters : 
	@sub_id : Subsidiary filter for deals to process
	@strategy_id : Strategy filter for deals to process
	@book_id : Book filter for deals to process
	@source_book_mapping_id : Sub-book filter for deals to process
	@source_deal_header_id : Deal filter to process
	@as_of_date : Date for processing
	@curve_source_value_id : Source of curves to use in calculation
	@pnl_source_value_id : Source of curves to use in calculation
	@hedge_or_item : Instrument deals filter  to process
						 - 'h' - Hedge deal 
						 - 'i' - Item deal  
	@process_id : To run the calculation under same process or using job
	@job_name : Provide job name to create
	@user_id : User name of runner
	@assessment_curve_type_value_id : Curve assessment type filter for curve that used in deal
	@table_name : Provide table name to output the process result.
	@print_diagnostic : Run Mode - 'y' - With Debug 'n' - Without Debug
	@curve_as_of_date : Date to price of curve for processing
	@tenor_option : Term Option - 'f' - Forward term only 'c' - Forward with current term
	@summary_detail : Result output glanularity - 's' - Summary 'd' - Detail
	@options_only : Option Deal Filter to process - 'y' - Option only 'n' - All deals
	@trader_id : Trader filter to process
	@status_table_name : Table to export for process status
	@run_incremental : Incremental run option - 'y' - Process only deal's curve price changed in given term 'n' - All deals
	@term_start : Term Start filter to process
	@term_end : Term end filter to process
	@calc_type : Calculation Type - 'm' - MTM 's' - Settlement 'x' - Credit Exposure 'b' - Broker fee
	@curve_shift_val : Curve shift value for whatif calculation
	@curve_shift_per : Curve shift percentage for whatif calculation
	@deal_list_table : Input list deal table filter for process
	@criteria_id : WHATIF parameter changed criteria ID.
	@counterparty_id : Counterparty filter to process
	@ref_id : Deal reference filter to process
	@calc_explain_type : Type delta explain calculation
						 - 'd' - Delivered 
						 - 'f' - Forecast 
						 - 'p' - Price changed 
	@transaction_type : Instrument deal type filter to process
	@calc_mtm_attribute : Process run type
	@ignore_deal_date : Ignore deal date checking in process
	@calc_settlement_adjustment : Calculate invoice adjustment settlement
	@process_linear_options_delta : Process the option deal linearly
	@look_term : Term filter column to process
						- 'd' - Delivered term (term_start)
						- 's' - Settled term (settlement_date)
	@batch_process_id : process id when run through batch
	@batch_report_param : paramater to run through barch

  */


CREATE procedure [dbo].[spa_calc_mtm_job]
	@sub_id varchar(MAX)=NULL,
	@strategy_id varchar(MAX)=NULL,
	@book_id varchar(MAX)=NULl,
	@source_book_mapping_id varchar (MAX)=NULL,
	@source_deal_header_id varchar (MAX) =NULL,
	@as_of_date varchar(100),
	@curve_source_value_id INT ,
	@pnl_source_value_id INT ,
	@hedge_or_item char(1) =NULL,
	@process_id varchar(150)=NULL,
	@job_name varchar(100)=NULL,
	@user_id varchar(100)=NULL,
	@assessment_curve_type_value_id int= 77,
	@table_name varchar(250) = NULL,
	@print_diagnostic int = NULL,
	@curve_as_of_date varchar(100) = NULL,
	@tenor_option varchar(1) = NULL,
	@summary_detail varchar(1) = NULL,
	@options_only varchar(1) = NULL,
	@trader_id int = NULL,
	@status_table_name varchar(100) = NULL,
	@run_incremental CHAR(1) = NULL,
	@term_start VARCHAR(100) =NULL,
	@term_end VARCHAR(100) =NULL,
	@calc_type VARCHAR(1) = NULL, --'m' for mtm, 'w' for what if and 's' for settlement - 'b' for Broker Settlement
	@curve_shift_val float = NULL,
	@curve_shift_per float = NULL, 
	@deal_list_table VARCHAR(200)=NULL, -- contains list of deals to be processed
	@criteria_id INT,
	@counterparty_id VARCHAR(MAX)=NULL,
	@ref_id VARCHAR(200) = NULL,
	@calc_explain_type CHAR(1) = NULL, -- 'm'-> modified
	@transaction_type  VARCHAR(400) = NULL,
	@calc_mtm_attribute BIT = 0,
	@ignore_deal_date BIT = 0,
	@calc_settlement_adjustment BIT = 0,
	@process_linear_options_delta CHAR(1) = NULL,
	@look_term CHAR(1) = 'd', -- 'd'-> delivered term 's'-> settled term
	@trigger_workflow NCHAR(1) =  'y',
	@batch_process_id	VARCHAR(120) = NULL,
	@batch_report_param	varchar(5000) = NULL
as 

SET STATISTICS IO off
SET NOCOUNT ON
SET ROWCOUNT 0

----BEGIN OF TESTING -------------------------
-----------------------------------------------------
/*

--select * from source_deal_pnl 
--DBCC DROPCLEANBUFFERS
----DBCC FREEPROCCACHE
----dbcc stackdump(1)


SET nocount off	
DECLARE @contextinfo VARBINARY(128) = CONVERT(VARBINARY(128), 'DEBUG_MODE_ON')
SET CONTEXT_INFO @contextinfo

declare	@sub_id varchar(1000),
	@strategy_id varchar(1000),
	@book_id varchar(1000),
	@source_book_mapping_id varchar (100),
	@source_deal_header_id varchar (5000),
	@as_of_date varchar(100),
	@curve_source_value_id INT ,
	@pnl_source_value_id INT ,
	@hedge_or_item char(1) ,
	@process_id varchar(50),
	@job_name varchar(100),
	@user_id varchar(100),
	@assessment_curve_type_value_id int,
	@table_name varchar(100),
	@print_diagnostic int,
	@curve_as_of_date varchar(100),
	@tenor_option varchar(1),
	@summary_detail varchar(1),
	@options_only varchar(1) ,
	@trader_id int ,
	@status_table_name varchar(100),
	@run_incremental CHAR(1),
	@term_start VARCHAR(100) ,
	@term_end VARCHAR(100) ,
	@calc_type VARCHAR(1), --'m' for mtm, 'w' for what if and 's' for settlement, 'd' for mkt value drill down, 'c' for contract value drill down, 'e' for mkt value settlement drill down, 'f' for contract value settlemetn drill down
	@curve_shift_val float,
	@curve_shift_per float, 
	@deal_list_table VARCHAR(100), -- contains list of deals to be processed	@batch_process_id	varchar(50),
	@criteria_id INT, --what-if criteria id
	@counterparty_id VARCHAR(MAX),
	@batch_process_id varchar(50), 
	@batch_report_param	varchar(5000),
	@ref_id VARCHAR(30),
	@calc_explain_type CHAR(1)
	,@transaction_type  VARCHAR(400) = '401,400'
	,@calc_mtm_attribute BIT = 1
	,@ignore_deal_date BIT = 0
	,@calc_settlement_adjustment BIT = 0
	,@process_linear_options_delta CHAR(1) = NULL
	,@look_term CHAR(1)='s'
	,@trigger_workflow NCHAR(1) =  'n'
	--,@batch_process_id	VARCHAR(120) = '212aaaaaaaaaaaaaaaaaa',
	--@batch_report_param	varchar(5000) = NULL

SET @calc_explain_type ='p'



-- select * from  source_deal_settlement_breakdown where source_deal_header_id=79742 and pnl_as_of_date='2018-03-31'
--		delete select * from source_deal_pnl_detail where pnl_as_of_date='2013-03-25'
--delete index_fees_breakdown_settlement where as_of_date='2013-03-25'

/* 

select *  from source_deal_HEADER   where source_deal_header_id=104416
select *  from source_deal_pnl_detail   where source_deal_header_id=1600
select *  from source_deal_settlement   where source_deal_header_id=104791
select * from index_fees_breakdown   where source_deal_header_id=1600
select * from index_fees_breakdown_settlement   where source_deal_header_id=145462
delete index_fees_breakdown_settlement   where source_deal_header_id=1600

select *  from source_deal_pnl_breakdown   where source_deal_header_id=7876
select *  from source_deal_pnl_detail   where source_deal_header_id=7876

select *  from source_deal_settlement   where source_deal_header_id=104791


*/

--270109,270113,270118,270119

SELECT	
	@sub_id = null, 
	@strategy_id =null, 
	@book_id = null,
	@source_book_mapping_id = null,
	@source_deal_header_id =510982   ,-- 349 , --'29,30,31,32,33,39',--,8,19',
	@as_of_date = '2021-08-02' , --'2017-02-15',
	@curve_source_value_id = 4500, 
	@pnl_source_value_id = 4500,
	@hedge_or_item = NULL, 
	@process_id = null,
	@job_name = null,
	@user_id = 'farrms_admin',
	@assessment_curve_type_value_id = NULL,
	@table_name = NULL,
	@print_diagnostic = NULL,
	@curve_as_of_date = NULL,
	@tenor_option = NULL,
	@summary_detail = NULL,
	@options_only = NULL,
	@trader_id = NULL,
	@status_table_name = NULL,
	@run_incremental = 'n',
	@term_start = '2019-12-01' ,
	@term_end = '2019-12-28' ,
	@calc_type = 'm',
	@curve_shift_val = NULL,
	@curve_shift_per = NULL, 
	@deal_list_table = null,
	@criteria_id = null,
	@counterparty_id=null,
	@ref_id=null,
	@process_linear_options_delta = NULL
	,@look_term= 's' -- 'd'-> delivered term 's'-> settled term


/*

select * from source_price_curve_def where curve_name= 'NYMEX CL'

select * from #temp_mtm_linear_asset
select * from source_deal_settlement where source_deal_header_id=267497
select * from source_deal_settlement_tou where source_deal_header_id=1288

select * from #fx_curves
select * from #fees_breakdown
select * from index_fees_breakdown where source_deal_header_id=1266
select * from index_fees_breakdown_settlement where source_deal_header_id=145354

select * from #component_price

select curve_value,curve_value_deal,curve_value_inv,* from #temp_leg_mtm


select * from   #temp_curves
SELECT * FROM  #calc_status
select * from #s_cids1
 select * from adiha_process.dbo.tmp_hourly_price_vol_dev_admin_A1D29672_773A_4C7C_B910_ABB5D49A8282 hv
select * from #temp_leg_mtm
select * from  #ok_deals
select * from adiha_process.dbo.tmp_hourly_price_vol_dev_admin_EAD25D8B_24AF_4B0C_8B78_092F1BFE5473
select original_formula_currency, formula_Currency, contract_id, formula_id, * 
  from #temp_deals where source_deal_header_id = 1650

 select * from source_deal_pnl_breakdown where source_deal_header_id =7876


*/

--select * from deal_position_break_down where source_deal_header_id=36740
--select * from #wght_curve_value

-- select * from #option_param
-- select * from #option_leg2


-- exec [spa_calc_mtm_job] null,null,null,NULL,NULL,'2013-02-11',4500 ,775 ,
--						NULL,'D4B0DC47_ED48_4BEA_BA7B_76B5C515FB9B' ,NULL,'SRV_systrmtrackera' ,77,NULL,NULL,NULL,NULL,'d',
--						NULL,NULL,NULL,'n','2000-01-01','2012-12-31',NULL,NULL,NULL, 'D4B0DC47_ED48_4BEA_BA7B_76B5C515FB9B',
--						null,NULL,NULL,'d',NULL,NULL	
	
	--set @process_id='A6E83E76_B1D9_4E5A_814C_748C0AF1D1A6'
	--if object_id('adiha_process.dbo.calcprocess_discount_factor_farrms_admin_F60E7B51_DAB6_4FFE_A2E1_99BBCDC4619C_t9') is not null 
	--DROP TABLE adiha_process.dbo.calcprocess_discount_factor_farrms_admin_F60E7B51_DAB6_4FFE_A2E1_99BBCDC4619C_t9
--select * from adiha_process.dbo.source_deal_header_farrms_admin_F60E7B51_DAB6_4FFE_A2E1_99BBCDC4619C

--set @process_id='A6E83E76_B1D9_4E5A_814C_748C0AF1D1A6'
--DROP TABLE adiha_process.dbo.calcprocess_discount_factor_farrms_admin_A6E83E76_B1D9_4E5A_814C_748C0AF1D1A6
--DROP TABLE adiha_process.dbo.explain_reforecast_deals_farrms_admin_A6E83E76_B1D9_4E5A_814C_748C0AF1D1A6
-- select * from #fees_breakdown where internal_type=-1 and term_start between '2011-09-01' and '2011-09-30'
-- select  deal_volume, fixed_price, FORMULA_ID, contract_id, source_deal_detail_id, source_deal_header_id, formula, formula_curve_id, pricing, term_start, * from #temp_deals
--	select formula_curve_id,pricing,contract_id,* from #temp_deals
-- select * from #formula_value
-- select avg(curve_value) from #temp_curves where source_curve_def_id in (23,76) and month(maturity_date)=7
-- select * from #temp_curves where month(maturity_date)=7 order by source_curve_def_id, maturity_date
 -- select * from #lag_curves_values
 -- select * from #fx_curves
 -- select * from #cids1

 --  select option_flag,formula_curve_id,pricing,* from #temp_Deals

-- SELECT * FROM  #calc_status
-- select curve_value,* from #temp_leg_mtm where formula is null
--select * from #formula_value where formula=' dbo.FNALagCurve(266,0,0,0,3,null,0,1)' order by term_start

		-- select curve_value,curve_value_deal,curve_value_inv,*  from  #temp_leg_mtm 
		-- select *  from  #fees_breakdown
		-- select *  from  source_deal_pnl_detail where source_deal_header_id=263
		-- select *  from  #temp_deals

	
	 --select * from source_deal_pnl where source_deal_header_id=263
	 --	 select * from source_deal_pnl_detail where source_deal_header_id=263

	 -- select * from #temp_curves
	 --select * from #fees_breakdown
	 
-- select distinct source_curve_def_id from #temp_curves
-- select * from #formula_value3
--select * from source_price_curve where source_curve_def_id between 238 and 242 and as_of_date = '2009-12-01'
-- select * from source_deal_pnl where source_deal_header_id = 245172 and pnl_as_of_date = '2011-01-01'
--select * from source_deal_pnl_detail where source_deal_header_id = 1555 and pnl_as_of_date = '2009-12-01'
--select * from source_deal_pnl_settlement where source_deal_header_id = 1555 
-- select * from #temp_leg_mtm where curve_id=260 order by term_start 
--select source_deal_header_id, sum(leg_mtm) from #temp_leg_mtm group by source_deal_header_id
-- select * from #calc_status
-- select * from source_deal_settlement where source_deal_header_id = 1667
-- select * from source_deal_settlement where source_deal_header_id = 1667



/*

 SET @sub_id = 1 --179 (Gas)
 SET @strategy_id =3
 SET @book_id = 14
 SET @source_book_mapping_id = NULL
 SET @source_deal_header_id =  '39' --147769 --'51615' --'1591,1547,1555,1571,1606,1608,1576,1577,51615,1579,1581,51612'--NULL --'1555' --'1571' '2925' '1429' --'1437, 1439, 1429'
 SET @as_of_date = '2011-01-01' 
 SET @curve_source_value_id = 4500
 SET @pnl_source_value_id = 775 
 -- SET @hedge_or_item = 'b'
 SET @process_id = '10101'
 -- SET @job_name = 'xxx10101'
 SET @user_id = 'farrms_admin'
 SET @assessment_curve_type_value_id = 77
 SET @run_incremental='n'

*/
--select * from adiha_process.dbo.testtest



SET @table_name  = null --'adiha_process.dbo.explain_position_detail_farrms_admin_F60E7B51_DAB6_4FFE_A2E1_99BBCDC4619C'
set @print_diagnostic = 1
--set @curve_as_of_date = NULL
set @tenor_option = NULL
set @summary_detail = 'd'
set @options_only = NULL
set @trader_id = NULL
SET @calc_explain_type =null --'p'
SET @process_linear_options_delta = ISNULL(@process_linear_options_delta, 'y')

--declare @qry2g100 varchar(max)
--	,@qry201  varchar(max)
--	, @qry3g101  varchar(max)
--	, @qry2g200  varchar(max)
--	, @qry3g202  varchar(max)
--	, @qry100  varchar(max)
--	, @qry101  varchar(max)
--	, @qry200  varchar(max)
--	,@qry2g201  varchar(max)

If @calc_type = 'w'
BEGIN
	IF OBJECT_ID('adiha_process.dbo.WhatIfSample') IS NOT NULL EXEC ('DROP TABLE adiha_process.dbo.WhatIfSample')
	
	CREATE TABLE adiha_process.dbo.WhatIfSample
	(
		real_deal varchar(1), -- 'y' is existing deal and 'n' non existing deal
		source_deal_header_id INT, --FOR EXISTING DEAL
		counterparty_id INT,
		buy_index INT, 
		buy_price FLOAT,
		buy_volume FLOAT,
		buy_UOM INT, 
		buy_term_start DATETIME,
		buy_end_start DATETIME,
		sell_index INT, 
		sell_price FLOAT,
		sell_volume FLOAT,
		sell_UOM INT, 
		sell_term_start DATETIME,
		sell_end_start DATETIME
	 )
	 
	 insert into adiha_process.dbo.WhatIfSample(real_deal, source_deal_header_id)
	 select 'y', 1201 UNION
	 select 'y', 1202 UNION
	 select 'y', 1203 UNION
	 select 'y', 1204 UNION
	 select 'y', 1234 UNION
	 select 'y', 1235 UNION 
	 select 'y', 1239  
 
END


 -- exec dbo.spa_drop_all_temp_table

-- select * from #temp_curves where source_curve_def_id IN ( 23, 76)
-- select * from source_price_curve where source_curve_def_id=588 and as_of_date='2013-07-01 00:00:00.000' and maturity_date='2013-07-01 00:00:00.000'
 
-- select * from #calc_status 
-- select original_formula_currency, formula_Currency, contract_id, formula_id, * from #temp_deals where source_deal_header_id = 1650
-- select * from #temp_leg_mtm
-- select * from #formula_value
-- select * from MESSAGE_BOARD


--*/


-------------------------- END OF TESTING scripts -------------
----------------------------------------------------------------

DECLARE @calc_price_change_at_tou_level varchar(1)
set @calc_price_change_at_tou_level='n'
SET @process_linear_options_delta = ISNULL(@process_linear_options_delta, 'y')
SET @trigger_workflow = ISNULL(@trigger_workflow, 'y')
declare @derive_on_calculation varchar(1),@CFD_id varchar(30),@phy_future varchar(30)

select @CFD_id=internal_deal_type_subtype_id from internal_deal_type_subtype_types where internal_deal_type_subtype_type='CFD'
set @CFD_id=isnull(@CFD_id,'-1')
 -- exec spa_drop_all_temp_table
 select @phy_future= internal_deal_type_subtype_id from internal_deal_type_subtype_types where internal_deal_type_subtype_type='Physical Future'
set @phy_future=isnull(@phy_future,'-1')

if OBJECT_ID('tempdb..#source_deal_pnl_detail_options') is not null drop table #source_deal_pnl_detail_options
if OBJECT_ID('tempdb..#option_leg2') is not null drop table #option_leg2
if OBJECT_ID('tempdb..#option_param') is not null drop table  #option_param
if OBJECT_ID('tempdb..#t_max_vol_date') is not null drop table  #t_max_vol_date
if OBJECT_ID('tempdb..#calendar_options') is not null drop table  #calendar_options
if OBJECT_ID('tempdb..#deal_corr') is not null drop table  #deal_corr
if OBJECT_ID('tempdb..#books') is not null drop table #books
if OBJECT_ID('tempdb..#temp_deals') is not null drop table #temp_deals
if OBJECT_ID('tempdb..#calc_status') is not null drop table #calc_status
if OBJECT_ID('tempdb..#temp_curves') is not null drop table #temp_curves
if OBJECT_ID('tempdb..#temp_leg_mtm') is not null drop table #temp_leg_mtm
if OBJECT_ID('tempdb..#ir_no_days_left') is not null drop table #ir_no_days_left
if OBJECT_ID('tempdb..#basis_adjustments') is not null  drop table #basis_adjustments
if OBJECT_ID('tempdb..#interest_expense') is not null  drop table #interest_expense
if OBJECT_ID('tempdb..#avg_temp_curves') is not null  drop table #avg_temp_curves
if OBJECT_ID('tempdb..#non_expired_deals') is not null  drop table #non_expired_deals
if OBJECT_ID('tempdb..#curve_uom_conv_factor') is not null  drop table #curve_uom_conv_factor
if OBJECT_ID('tempdb..#tx') is not null  drop table #tx
if OBJECT_ID('tempdb..#tx2') is not null  drop table #tx2
if OBJECT_ID('tempdb..#formula_value') is not null  drop table #formula_value
if OBJECT_ID('tempdb..#formula_value_at_low') is not null  drop table #formula_value_at_low
if OBJECT_ID('tempdb..#formula_value2') is not null  drop table #formula_value2
if OBJECT_ID('tempdb..#fx_curve_ids') is not null drop table #fx_curve_ids
if OBJECT_ID('tempdb..#fx_curves') is not null  drop table #fx_curves
if OBJECT_ID('tempdb..#uom_ids') is not null  drop table #uom_ids
if OBJECT_ID('tempdb..#ok_deals') is not null  drop table #ok_deals
if OBJECT_ID('tempdb..#ok_deals_header') is not null  drop table #ok_deals_header
if OBJECT_ID('tempdb..#tmp_delete') is not null  drop table #tmp_delete
if OBJECT_ID('tempdb..#source_deal_header_id') is not null  drop table #source_deal_header_id
if OBJECT_ID('tempdb..#hourly_vol_deals') is not null  drop table #hourly_vol_deals
if OBJECT_ID('tempdb..#hourly_vol') is not null drop table #hourly_vol
if OBJECT_ID('tempdb..#hrly_wght_avg_price') is not null  drop table #hrly_wght_avg_price
if OBJECT_ID('tempdb..#cids') is not null  drop table #cids
if OBJECT_ID('tempdb..#cids_derived') is not null drop table #cids_derived
if OBJECT_ID('tempdb..#incremental_deals') is not null drop table #incremental_deals
if OBJECT_ID('tempdb..#tmp_hourly_price_vol') is not null drop table  #tmp_hourly_price_vol  
if OBJECT_ID('tempdb..#tmp_deals_settled') is not null drop table #tmp_deals_settled
if OBJECT_ID('tempdb..#hrly_price_curves') is not null drop table #hrly_price_curves
if OBJECT_ID('tempdb..#source_deal_settlement') is not null drop table #source_deal_settlement
if OBJECT_ID('tempdb..#lag_curves') is not null drop table #lag_curves
if OBJECT_ID('tempdb..#lag_curves_values') is not null drop table #lag_curves_values
if OBJECT_ID('tempdb..#lag_curves_values_fx') is not null drop table #lag_curves_values_fx
if OBJECT_ID('tempdb..#tmp_hourly_price_vol_c') is not null drop table #tmp_hourly_price_vol_c
if OBJECT_ID('tempdb..#mv90_dst') is not null drop table #mv90_dst
if OBJECT_ID('tempdb..#hrl_pos') is not null drop table #hrl_pos
if OBJECT_ID('tempdb..#hrl_pos_c') is not null drop table #hrl_pos_c
if OBJECT_ID('tempdb..#fees_breakdown') is not null drop table #fees_breakdown
if OBJECT_ID('tempdb..#meter_data') is not null drop table #meter_data
if OBJECT_ID('tempdb..#meter_data_allocation') is not null drop table #meter_data_allocation
if OBJECT_ID('tempdb..#simple_formula_multiplier') is not null drop table #simple_formula_multiplier
if OBJECT_ID('tempdb..#premium') is not null drop table #premium
if OBJECT_ID('tempdb..#calcprocess_inventory_wght_avg_cost_forward') is not null drop table #calcprocess_inventory_wght_avg_cost_forward
if OBJECT_ID('tempdb..#calcprocess_inventory_wght_avg_cost') is not null drop table #calcprocess_inventory_wght_avg_cost
if OBJECT_ID('tempdb..#profile_deals') is not null drop table #profile_deals 
if OBJECT_ID('tempdb..#profile_total') is not null drop table #profile_total 
if OBJECT_ID('tempdb..#meter_mnth_brk') is not null drop table #meter_mnth_brk
if OBJECT_ID('tempdb..#s_cids') is not null drop table #s_cids
if OBJECT_ID('tempdb..#s_cids1') is not null drop table #s_cids1

if OBJECT_ID('tempdb..#meter_data_15min') is not null drop table #meter_data_15min
if OBJECT_ID('tempdb..#mv_data_15min') is not null drop table #mv_data_15min
if OBJECT_ID('tempdb..#deal_id_missing_15min') is not null drop table #deal_id_missing_15min
if OBJECT_ID('tempdb..#tx3') is not null drop table #tx3
if OBJECT_ID('tempdb..#tx4') is not null drop table #tx4

if OBJECT_ID('tempdb..#formula_value3') is not null drop table #formula_value3
if OBJECT_ID('tempdb..#formula_value4') is not null drop table #formula_value4

if OBJECT_ID('tempdb..#formula_value_hour_min_wght_avg') is not null drop table #formula_value_hour_min_wght_avg

if OBJECT_ID('tempdb..#source_deal_pnl_detail_options') is not null drop table #source_deal_pnl_detail_options
if OBJECT_ID('tempdb..#avg_pricing_curve_value') is not null drop table #avg_pricing_curve_value
if OBJECT_ID('tempdb..#wght_curve_value') is not null drop table #wght_curve_value
if OBJECT_ID('tempdb..#pivot_price_curves') is not null drop table #pivot_price_curves
if OBJECT_ID('tempdb..#Options_Prem_detail') is not null drop table #Options_Prem_detail

if OBJECT_ID('tempdb..#temp_vol_unpivot') is not null drop table #temp_vol_unpivot
if OBJECT_ID('tempdb..#temp_price_unpivot') is not null drop table #temp_price_unpivot
if OBJECT_ID('tempdb..#whatif_shift_mtm') is not null drop table #whatif_shift_mtm
if OBJECT_ID('tempdb..#whatif_shift_mtm_new') is not null drop table #whatif_shift_mtm_new

if OBJECT_ID('tempdb..#tmp_hourly_price_only') is not null drop table #tmp_hourly_price_only

if OBJECT_ID('tempdb..#source_deal_pnl_detail_options_at_low') is not null drop table #source_deal_pnl_detail_options_at_low
if OBJECT_ID('tempdb..#tmp_position_table') is not null drop table #tmp_position_table
if OBJECT_ID('tempdb..#source_deal_detail_hour') is not null drop table #source_deal_detail_hour
if OBJECT_ID('tempdb..#pivot_price_curves1') is not null drop table #pivot_price_curves1
if OBJECT_ID('tempdb..#pivot_price_curves4') is not null drop table #pivot_price_curves4
if OBJECT_ID('tempdb..#pivot_price_curves3') is not null drop table #pivot_price_curves3
if OBJECT_ID('tempdb..#meter_location') is not null drop table #meter_location
if OBJECT_ID('tempdb..#temp_group_profile_deals') is not null drop table #temp_group_profile_deals
if OBJECT_ID('tempdb..#mv_data_15min_0') is not null drop table #mv_data_15min_0
if OBJECT_ID('tempdb..#mv_data_15min_15') is not null drop table #mv_data_15min_15
if OBJECT_ID('tempdb..#mv_data_15min_30') is not null drop table #mv_data_15min_30
if OBJECT_ID('tempdb..#mv_data_15min_45') is not null drop table #mv_data_15min_45
if OBJECT_ID('tempdb..#tmp_hour_list') is not null drop table #tmp_hour_list
if OBJECT_ID('tempdb..#temp_deals_filter') is not null drop table #temp_deals_filter
if OBJECT_ID('tempdb..#index_fees_breakdown0001') is not null drop table #index_fees_breakdown0001
if OBJECT_ID('tempdb..#hrly_price_curves1') is not null drop table #hrly_price_curves1
if OBJECT_ID('tempdb..#hrly_price_curves2') is not null drop table #hrly_price_curves2
if OBJECT_ID('tempdb..#hrly_price_curves3') is not null drop table #hrly_price_curves3
if OBJECT_ID('tempdb..#temp_curves1') is not null drop table #temp_curves1
if OBJECT_ID('tempdb..#temp_curves2') is not null drop table #temp_curves2
if OBJECT_ID('tempdb..#temp_curves3') is not null drop table #temp_curves3
if OBJECT_ID('tempdb..#temp_curves4') is not null drop table #temp_curves4
if OBJECT_ID('tempdb..#formula_value_daily_wght_avg') is not null drop table #formula_value_daily_wght_avg
if OBJECT_ID('tempdb..#uddft') is not null drop table #uddft
if OBJECT_ID('tempdb..#uddf') is not null drop table #uddf
if OBJECT_ID('tempdb..#udddf') is not null drop table #udddf
if OBJECT_ID('tempdb..#udft') is not null drop table #udft
if OBJECT_ID('tempdb..#temp_mtm_linear_asset') is not null drop table #temp_mtm_linear_asset
if OBJECT_ID('tempdb..#cids_derive_on_calculation') is not null drop table #cids_derive_on_calculation
if OBJECT_ID('tempdb..#tmp_avg_curve_value') is not null drop table #tmp_avg_curve_value

if OBJECT_ID('tempdb..#hrly_price_curves_bid') is not null drop table #hrly_price_curves_bid
if OBJECT_ID('tempdb..#hrly_price_curves_ask') is not null drop table #hrly_price_curves_ask
if OBJECT_ID('tempdb..#fx_conversion_values') is not null drop table #fx_conversion_values
if OBJECT_ID('tempdb..#must_run_volume') is not null drop table #must_run_volume
if OBJECT_ID('tempdb..#process_generation_unit_cost') is not null drop table #process_generation_unit_cost
if OBJECT_ID('tempdb..#process_generation_unit_cost_lt') is not null drop table #process_generation_unit_cost_lt
if OBJECT_ID('tempdb..#source_fx_ids') is not null drop table #source_fx_ids
if OBJECT_ID('tempdb..#target_fx_ids') is not null drop table #target_fx_ids
if OBJECT_ID('tempdb..#hrly_price_curves_bid') is not null drop table #hrly_price_curves_bid
if OBJECT_ID('tempdb..#hrly_price_curves_ask') is not null drop table #hrly_price_curves_ask
if OBJECT_ID('tempdb..#temp_curves_settlement') is not null drop table #temp_curves_settlement
if OBJECT_ID('tempdb..#component_price_detail') is not null drop table #component_price_detail

if OBJECT_ID('tempdb..#pricing_aod') is not null drop table #pricing_aod
if OBJECT_ID('tempdb..#component_price') is not null drop table #component_price
if OBJECT_ID('tempdb..#temp_curves_settlement') is not null drop table #temp_curves_settlement
if OBJECT_ID('tempdb..#component_price_detail') is not null drop table #component_price_detail
if OBJECT_ID('tempdb..#opt_etire_term_avg_price') is not null drop table #opt_etire_term_avg_price
if OBJECT_ID('tempdb..#pricing_aod_curve_id') is not null drop table #pricing_aod_curve_id
if OBJECT_ID('tempdb..#formula_value0') is not null drop table #formula_value0
if OBJECT_ID('tempdb..#source_deal_settlement1') is not null drop table #source_deal_settlement1
if OBJECT_ID('tempdb..#sddh') is not null drop table #sddh
if OBJECT_ID('tempdb..#temp_deal_header') is not null drop table #temp_deal_header
if OBJECT_ID('tempdb..#fuel_based_variable_charge') is not null drop table #fuel_based_variable_charge
if OBJECT_ID('tempdb..#temp_mtm_linear_asset_tou') is not null drop table #temp_mtm_linear_asset_tou
if OBJECT_ID('tempdb..#price_curve_mat') is not null drop table #price_curve_mat
if OBJECT_ID('tempdb..#curve_aod_mat') is not null drop table #curve_aod_mat
if OBJECT_ID('tempdb..#component_price_deemed') is not null drop table #component_price_deemed

if OBJECT_ID('tempdb..#component_price_detail_fx_value') is not null drop table #component_price_detail_fx_value
if OBJECT_ID('tempdb..#component_price_detail_fx_value_adder') is not null drop table #component_price_detail_fx_value_adder

if OBJECT_ID('tempdb..#duplicate_fx') is not null drop table #duplicate_fx

if OBJECT_ID('tempdb..#rtc_temp_curves') is not null drop table #rtc_temp_curves
if OBJECT_ID('tempdb..#rtc_hourly_block_curve_value') is not null drop table #rtc_hourly_block_curve_value
if OBJECT_ID('tempdb..#rtc_hourly_block_curve_value_deal') is not null drop table #rtc_hourly_block_curve_value_deal
if OBJECT_ID('tempdb..#rtc_curve_info') is not null drop table #rtc_curve_info
if OBJECT_ID('tempdb..#rtc_hour_block_term_deal') is not null drop table #rtc_hour_block_term_deal
--if OBJECT_ID('tempdb..#rtc_cids_deal') is not null drop table #rtc_cids_deal
if OBJECT_ID('tempdb..#rtc_hour_block_term') is not null drop table #rtc_hour_block_term
if OBJECT_ID('tempdb..#rtc_hour_block_term_deal') is not null drop table #rtc_hour_block_term_deal
if OBJECT_ID('tempdb..#tmp_deal_vol_mult') is not null drop table #tmp_deal_vol_mult
if OBJECT_ID('tempdb..#tmp_fees') is not null drop table #tmp_fees
if OBJECT_ID('tempdb..#tmp_source_fees') is not null drop table #tmp_source_fees
if OBJECT_ID('tempdb..#price_curve_mat_pre') is not null drop table #price_curve_mat_pre
if OBJECT_ID('tempdb..#pnl_comp_source_deal_header_id') is not null drop table #pnl_comp_source_deal_header_id
if OBJECT_ID('tempdb..#options_calc_method') is not null drop table #options_calc_method
if OBJECT_ID('tempdb..#list_need_next_maturity_date_price') is not null drop table #list_need_next_maturity_date_price




DECLARE @proc_begin_time datetime
DECLARE @log_time datetime
DECLARE @pr_name VARCHAR(5000)
DECLARE @log_increment 	int
DECLARE @trading_days int
DECLARE @source_price_curve varchar(120)
DECLARE @derived_curve_table varchar(220)
Declare @DiscountTableName varchar(200)
Declare @mkt_drill_down varchar(1)
declare @premium_id INT
DECLARE @isprofile_static_id INT
DECLARE @cancel_deal_status VARCHAR(10)
DECLARE @default_holiday_id INT
DECLARE @next_business_term VARCHAR(10)
DECLARE @reforecast_table_name VARCHAR(200)
DECLARE @index_brk_table_name VARCHAR(200)
DECLARE @next_business_day VARCHAR(20)
DECLARE @last_business_day VARCHAR(20),@sqlstmt1 VARCHAR(max)
DECLARE @tmp_hourly_price_vol varchar(220)
DECLARE @tmp_hourly_price_vol_fee varchar(220)
DECLARE @tmp_pos_neg_price_vol varchar(220)
DECLARE @tmp_hourly_price_vol_c varchar(220)
DECLARE @option_param varchar(220)
DECLARE @options_prem_detail varchar(220)
DECLARE @hourly_price_vol_at_low varchar(220)
DECLARE @hourly_price_vol_at_low_c varchar(220)

DECLARE @tmp_hourly_price_vol_at_low varchar(220)
DECLARE @tmp_hourly_price_vol_at_low_c varchar(220)
DECLARE @tmp_hourly_price_vol_udf varchar(220)

DECLARE @option_param_table VARCHAR(200)
--DECLARE @tmp_hourly_price_vol_udf varchar(220)
DECLARE @pt_source_deal_pnl_detail_options_at_low varchar(128)
DECLARE @pt_option_param varchar(128)
DECLARE @pt_temp_deals varchar(128)

DECLARE @qry VARCHAR(350)
DECLARE @original_process_id VARCHAR(50),@original_calc_type varchar(1)
declare @avg_pricing_curve_value varchar(250),@whatif_shift varchar(250), @whatif_shift_new varchar(250)
	,@group_by_clms VARCHAR(2000), @select_clms VARCHAR(max)

declare @ErrorCode varchar(50),
	@Module varchar(100),
	@Source varchar(100),
	@type varchar(100),
	@description varchar(1000),
	@nextstep varchar(250)


DECLARE @formula_table2 VARCHAR(100)
DECLARE @calc_result_table2 VARCHAR(100)
DECLARE @calc_result_table_breakdown2 VARCHAR(100)
DECLARE @process_id2 VARCHAR(100)

DECLARE @formula_table3 VARCHAR(100)
DECLARE @calc_result_table3 VARCHAR(100)
DECLARE @calc_result_table_breakdown3 VARCHAR(100)
DECLARE @process_id3 VARCHAR(100)

DECLARE @formula_table4 VARCHAR(100)
DECLARE @calc_result_table4 VARCHAR(100)
DECLARE @calc_result_table_breakdown4 VARCHAR(100)
DECLARE @process_id4 VARCHAR(100)

SET @process_id2 = REPLACE(newid(),'-','_')	


SET @process_id3 = REPLACE(newid(),'-','_')

SET @process_id4 = REPLACE(newid(),'-','_')

DECLARE @storage_inventory_template_id VARCHAR(350) -- for these  template, only save the fees without mtm/settlement.
select @storage_inventory_template_id=isnull(@storage_inventory_template_id+',','')+cast(template_id as varchar) 
from source_deal_header_template where template_name in ('Actual Storage Inventory','Forward Storage Inventory')

set @storage_inventory_template_id=isnull(nullif(@storage_inventory_template_id,''),'-99999')

Declare @mw_id int,@kw_id int

select @mw_id=source_uom_id from source_uom where uom_id in ('MW')
select @kw_id=source_uom_id from source_uom where uom_id in ('KW')

set @mw_id=ISNULL(NULLIF(@mw_id,''),'-1')
set @kw_id=ISNULL(NULLIF(@kw_id,''),'-1')


DECLARE @cpt_type CHAR(1)='x'
DECLARE @T2 FLOAT = (1/12.0) --Conctant For Asian Options Premium/Delta Value
-- If calculation is run for broker

IF @calc_type = 'b'
BEGIN
	SET @cpt_type = 'b'
	SET @calc_type = 's'
END

if @as_of_date>@term_end and @calc_type = 's'
	set  @as_of_date=@term_end


--Storing default dst to use below while returning null from vwDealTimezoneContract for REC deals
DECLARE @default_dst_group VARCHAR(50)
       ,@exclude_zero_position BIT = 0
	   ,@exclude_zero_position_query NVARCHAR(20)

SELECT  @default_dst_group = tz.dst_group_value_id
FROM
	(
		SELECT var_value default_timezone_id 
		FROM dbo.adiha_default_codes_values (NOLOCK) 
		WHERE instance_no = 1 AND default_code_id = 36 AND seq_no = 1
	) df  
inner join dbo.time_zones tz (NOLOCK) ON tz.timezone_id = df.default_timezone_id

/* Get value for Include/Exclude zero position for MW position in MTM*/
SELECT @exclude_zero_position = 1
FROM adiha_default_codes_values
WHERE default_code_id = 207
	AND var_value = 208
	AND instance_no = 1
	AND seq_no = 1


DECLARE @save_settlement_data INT

SELECT @save_settlement_data =  var_value
FROM adiha_default_codes_values
WHERE(instance_no = 1) AND (default_code_id = 209) AND (seq_no = 1)



--Restriction (same variable's value used in multiple times): These variables are used for only mtm value calculating statement, not use for other.  
declare @mtm_value_01 varchar(max) 
declare @mtm_value_02 varchar(max) 
declare @mtm_value_03 varchar(max) 
declare @mtm_value_04 varchar(max) 
declare @mtm_value_05 varchar(max) 
declare @mtm_value_06 varchar(max) 
declare @mtm_value_07 varchar(max) 
declare @mtm_value_08 varchar(max) 
declare @mtm_value_09 varchar(max) 
declare @mtm_value_10 varchar(max) 
declare @mtm_value_11 varchar(max) 
declare @mtm_value_12 varchar(max) 
declare @mtm_value_13 varchar(max) 
declare @mtm_value_14 varchar(max) 
declare @mtm_value_15 varchar(max) 
declare @sql_col varchar(max)
declare @mtm_value_16 varchar(max) 
declare @mtm_value_17 varchar(max) 
declare @mtm_value_18 varchar(max) 
declare @mtm_value_19 varchar(max) 
declare @mtm_value_20 varchar(max) 

declare @mtm_value_01_opt varchar(max) 
declare @mtm_value_02_opt varchar(max) 
declare @mtm_value_03_opt varchar(max) 
declare @mtm_value_04_opt varchar(max) 
declare @mtm_value_05_opt varchar(max) 
declare @mtm_value_06_opt varchar(max) 
declare @mtm_value_07_opt varchar(max) 
declare @mtm_value_08_opt varchar(max) 
declare @mtm_value_09_opt varchar(max) 
declare @mtm_value_10_opt varchar(max) 
declare @mtm_value_11_opt varchar(max) 
declare @mtm_value_12_opt varchar(max) 
declare @mtm_value_13_opt varchar(max) 
declare @mtm_value_14_opt varchar(max) 
declare @mtm_value_15_opt varchar(max) 
declare @mtm_value_16_opt varchar(max) 
declare @mtm_value_17_opt varchar(max) 
declare @mtm_value_18_opt varchar(max) 
declare @mtm_value_19_opt varchar(max) 
declare @mtm_value_20_opt varchar(max) 

SET @isprofile_static_id = -5564 -- Static value id for PRATOS "IsProfiled" field
SET @premium_id = 2 ---fees 1

SET @mkt_drill_down = NULL
SET @cancel_deal_status = 5607
SET @default_holiday_id = 291898

set @original_calc_type=@calc_type

set @source_deal_header_id=nullif(@source_deal_header_id,'')

if @calc_type='v' --spa_calc_VAR_Simulation_job 
	set  @calc_type='w'
	
----###### Logic for reprocessing deals
CREATE TABLE #source_deal_header_id (source_deal_header_id INT)
SET @deal_list_table = nullif(@deal_list_table,'')

IF @calc_type IN('r','t') -- If calc type is reprocessed -r mtm reprocess t- settlement reprocess
BEGIN
	INSERT INTO #source_deal_header_id 
	SELECT RTRIM(LTRIM(SUBSTRING(SUBSTRING([description],CHARINDEX('Deal ID:',[description],0)+8,20),0,CHARINDEX('(',SUBSTRING([description],CHARINDEX('Deal ID:',[description],0)+8,10),0)))) FROM mtm_test_run_log 
	WHERE process_id=@deal_list_table 
		AND [description] LIKE '%Deal ID:%'
	
	SET @source_deal_header_id = -1	
	IF @calc_type = 'r'
		SET @calc_type = 'm'
	ELSE IF @calc_type = 't'
		SET @calc_type = 's'		
END

--########## changes for Explain Modified deals
IF @calc_explain_type = 'd'
BEGIN
	SET @reforecast_table_name = dbo.FNAProcessTableName('delivered_position', @user_id, @process_id)
	SET @table_name = 'explain_delivered_mtm'	
	SET @index_brk_table_name = 'index_fees_breakdown_delivered'	
	SET @source_deal_header_id = -1	
	EXEC('INSERT INTO #source_deal_header_id  SELECT DISTINCT source_deal_header_id FROM '+@reforecast_table_name)
	SELECT @next_business_day =  dbo.FNAGetBusinessDay ('n',@as_of_date,@default_holiday_id)
	
END
ELSE IF @calc_explain_type = 'f'
BEGIN
	SET @reforecast_table_name = dbo.FNAProcessTableName('forecast_position', @user_id, @process_id)
	SET @table_name = dbo.FNAProcessTableName('explain_reforecast_deals', @user_id, @process_id)
	SET @index_brk_table_name = dbo.FNAProcessTableName('index_fees_breakdown_forecast', @user_id, @process_id)
	SET @source_deal_header_id = -1	
	EXEC('INSERT INTO #source_deal_header_id  SELECT DISTINCT source_deal_header_id FROM '+@reforecast_table_name)
END
ELSE IF @calc_explain_type = 'p'
BEGIN
	SET @table_name = dbo.FNAProcessTableName('delta_price_changed', @user_id, @process_id)
	set  @reforecast_table_name = dbo.FNAProcessTableName('explain_position_detail', @user_id, left(@process_id,LEN(@process_id)-3))
	SET @source_deal_header_id = -1	
	EXEC('INSERT INTO #source_deal_header_id  SELECT DISTINCT source_deal_header_id FROM '+@deal_list_table)
	set @deal_list_table=null
END

CREATE TABLE #ok_deals (source_deal_header_id INT, term_start DATETIME, term_end DATETIME, expired_term varchar(1) COLLATE DATABASE_DEFAULT, error_deal INT,source_deal_detail_id int, mtm_sett_calc bit)


CREATE TABLE #formula_value0
	(term_start datetime, formula_id INT, contract_expiration_date datetime, formula_value float,contract_id INT, source_deal_detail_id INT)

--########## Changes for Settlement Adjustments
DECLARE @deal_settlement_table VARCHAR(200),@index_fees_settlement_table VARCHAR(200) 

SET @deal_settlement_table = 'source_deal_settlement'
SET @index_fees_settlement_table = 'index_fees_breakdown_settlement'

IF @calc_settlement_adjustment = 1
BEGIN
	SET @deal_settlement_table = dbo.FNAProcessTableName('deal_settlement', @user_id, @process_id)
	SET @index_fees_settlement_table = dbo.FNAProcessTableName('index_fees_settlement', @user_id, @process_id)

END



SET @formula_table2=dbo.FNAProcessTableName('curve_formula_table2', @user_id, @process_id2)
SET @formula_table3=dbo.FNAProcessTableName('curve_formula_table3', @user_id, @process_id3)
SET @formula_table4=dbo.FNAProcessTableName('curve_formula_table4', @user_id, @process_id3)




--#######################

If @calc_type IN ('d', 'c')
BEGIN
	SET @mkt_drill_down = @calc_type
	SET @calc_type = 'm'
END 
If @calc_type IN ('e')
BEGIN
	SET @mkt_drill_down = 'd'
	SET @calc_type = 's'
END 
If @calc_type IN ('f')
BEGIN
	SET @mkt_drill_down = 'c'
	SET @calc_type = 's'
END 


--Start tracking time for Elapse time
DECLARE @begin_time DATETIME
SET @begin_time = getdate()

if @user_id  is null
	set @user_id = dbo.FNADBUser()

SET @pnl_source_value_id = @curve_source_value_id
set @trading_days = 252
set @proc_begin_time = getdate()

IF @process_id IS NULL
BEGIN
	SET @process_id=REPLACE(newid(),'-','_')
END
SET @original_process_id=@process_id


If @calc_type IN ('x') -- call for FX Exposure calculation...
begin

	EXEC spa_print  'exec [dbo].[spa_create_fx_exposure_report] .........................'
	exec [dbo].[spa_create_fx_exposure_report] 
		@as_of_date =@as_of_date,
		@sub_id =@sub_id, 
		@strategy_id =@strategy_id, 
		@book_id =@book_id, 
		@curve_source_value_id=@curve_source_value_id, 
		@report_group=0,
		@deal_status=null,
		@deal_id=null,
		@round_value=8,
		@source_deal_header_id =@source_deal_header_id, 
		@calc  =1,
		@deal_list_table =@deal_list_table -- contains list of deals to be processed

	GOTO CleanUp_Process_Tables
end


SET @DiscountTableName = dbo.FNAProcessTableName('calcprocess_discount_factor', @user_id, @process_id)
SELECT @option_param_table = dbo.FNAProcessTableName('option_param_co_', @user_id, @process_id)
SET @qry = 'IF OBJECT_ID (N''' + @DiscountTableName +''', N''U'') IS NOT NULL
	BEGIN
		DROP TABLE ' + @DiscountTableName + '
	END'
	
exec spa_print @qry
EXEC(@qry)
	
IF OBJECT_ID(@option_param_table) IS NOT NULL EXEC ('DROP TABLE ' + @option_param_table)
	
set @source_price_curve = dbo.FNAGetProcessTableName(@as_of_date, 'source_price_curve')
set @derived_curve_table = dbo.FNAProcessTableName('der_price_curve', @user_id, @process_id)
SET @DiscountTableName = dbo.FNAProcessTableName('calcprocess_discount_factor', @user_id, @process_id)
SET @tmp_hourly_price_vol = dbo.FNAProcessTableName('tmp_hourly_price_vol', @user_id, @process_id)
SET @tmp_hourly_price_vol_fee = dbo.FNAProcessTableName('tmp_hourly_price_vol_fee', @user_id, @process_id)
SET @tmp_pos_neg_price_vol = dbo.FNAProcessTableName('tmp_pos_neg_price_vol', @user_id, @process_id)
SET @tmp_hourly_price_vol_c = dbo.FNAProcessTableName('tmp_hourly_price_vol_c', @user_id, @process_id)

declare @hypo_deal_header varchar(250),@hypo_deal_detail varchar(250)
SET @hypo_deal_header = dbo.FNAProcessTableName('hypo_deal_header', @user_id, @process_id)
SET @hypo_deal_detail = dbo.FNAProcessTableName('hypo_deal_detail', @user_id, @process_id)
set @avg_pricing_curve_value=dbo.FNAProcessTableName('avg_pricing_curve', @user_id, @process_id)

declare @tmp_hourly_price_only_pt varchar(128)
SET @tmp_hourly_price_only_pt = dbo.FNAProcessTableName('tmp_hourly_price_only_pt', @user_id, @process_id)
SET @hourly_price_vol_at_low = dbo.FNAProcessTableName('hourly_price_vol_at_low', @user_id, @process_id)
SET @hourly_price_vol_at_low_c = dbo.FNAProcessTableName('hourly_price_vol_at_low_c', @user_id, @process_id)

SET @tmp_hourly_price_vol_at_low = dbo.FNAProcessTableName('tmp_hourly_price_vol_at_low', @user_id, @process_id)
SET @tmp_hourly_price_vol_udf = dbo.FNAProcessTableName('tmp_hourly_price_vol_udf', @user_id, @process_id)

SET @tmp_hourly_price_vol_at_low_c = dbo.FNAProcessTableName('tmp_hourly_price_vol_at_low_c', @user_id, @process_id)

SET @whatif_shift= dbo.FNAProcessTableName('whatif_shift', @user_id,@process_id)
SET @whatif_shift_new= dbo.FNAProcessTableName('whatif_shift_new', @user_id,@process_id)
	
SET @option_param= dbo.FNAProcessTableName('option_param', @user_id,@process_id)
SET @options_prem_detail = dbo.FNAProcessTableName('options_prem_detail', @user_id,@process_id)	

create table #whatif_shift_mtm(curve_id int,curve_shift_val float ,curve_shift_per FLOAT)
create table #whatif_shift_mtm_new(curve_id int,curve_shift_val float ,curve_shift_per FLOAT, shift_by CHAR(1) COLLATE DATABASE_DEFAULT)


if OBJECT_ID(@whatif_shift) is not null
	exec('insert into #whatif_shift_mtm(curve_id,curve_shift_val ,curve_shift_per) select curve_id,curve_shift_val, curve_shift_per from ' + @whatif_shift)
if OBJECT_ID(@whatif_shift_new) is not null
	exec('insert into #whatif_shift_mtm_new(curve_id,curve_shift_val ,curve_shift_per, shift_by) select curve_id,curve_shift_val ,curve_shift_per, shift_by from '+@whatif_shift_new)	
--ELSE
--insert into #whatif_shift_mtm(curve_id,curve_shift_val ,curve_shift_per) 
--VALUES (1,0,.5),(2,0,.5),(3,0,.5)		

IF OBJECT_ID(@tmp_hourly_price_vol) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_hourly_price_vol)
IF OBJECT_ID(@tmp_pos_neg_price_vol) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_pos_neg_price_vol)
IF OBJECT_ID(@tmp_hourly_price_vol_c) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_hourly_price_vol_c)

IF OBJECT_ID(@hourly_price_vol_at_low) IS NOT NULL EXEC ('DROP TABLE ' + @hourly_price_vol_at_low)
IF OBJECT_ID(@hourly_price_vol_at_low_c) IS NOT NULL EXEC ('DROP TABLE ' + @hourly_price_vol_at_low_c)

IF OBJECT_ID(@tmp_hourly_price_vol_at_low) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_hourly_price_vol_at_low)
IF OBJECT_ID(@tmp_hourly_price_vol_at_low_c) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_hourly_price_vol_at_low_c)

IF OBJECT_ID(@avg_pricing_curve_value) IS NOT NULL EXEC ('DROP TABLE ' + @avg_pricing_curve_value)
IF OBJECT_ID(@tmp_hourly_price_vol_udf) IS NOT NULL EXEC ('DROP TABLE ' + @tmp_hourly_price_vol_udf)
IF OBJECT_ID(@option_param) IS NOT NULL EXEC ('DROP TABLE ' + @option_param)


DECLARE @temptablequery VARCHAR(500)
SET @temptablequery ='exec '+DB_NAME()+'.dbo.spa_get_mtm_test_run_log ''' + @process_id + ''''

if @job_name IS NULL AND @batch_process_id IS NOT NULL
	SET @job_name='batch_'+@batch_process_id

If @source_deal_header_id = ''
	set @source_deal_header_id = NULL

if @curve_as_of_date is null
	set @curve_as_of_date = convert(varchar(10),@as_of_date,120)

if @assessment_curve_type_value_id IS NULL
	SET @assessment_curve_type_value_id=77

If @calc_type IS NULL OR (@calc_type <> 's' AND @calc_type <> 'w')
	SET @calc_type = 'm'


--If @calc_type = 'w'
--BEGIN
--	IF @curve_shift_val IS NULL SET @curve_shift_val = 0
--	IF @curve_shift_per IS NULL OR @curve_shift_per = 0
--		SET @curve_shift_per = 1
--	ELSE
--		SET @curve_shift_per = @curve_shift_per + 1
--END 
--ELSE
--BEGIN
--	SET @curve_shift_val = 0
--	SET @curve_shift_per = 1
--END 

SET @curve_shift_val =isnull(@curve_shift_val,0)
SET @curve_shift_per = isnull(@curve_shift_per,1)

If @calc_type = 's' AND @term_start IS NULL AND @term_end IS NULL
BEGIN
	SET @term_end = DBO.FNAGetTermEndDate('m', @as_of_date, 0)
	SET @term_start = DBO.FNAGetTermStartDate('m', @as_of_date, 0)
END	
 
----------------------Step 2  Create Temporay Status Table------------------------------

CREATE TABLE #calc_status
(
	process_id varchar(100) COLLATE DATABASE_DEFAULT,
	ErrorCode varchar(50) COLLATE DATABASE_DEFAULT,
	Module varchar(100) COLLATE DATABASE_DEFAULT,
	[Source] varchar(100) COLLATE DATABASE_DEFAULT,
	[type] varchar(100) COLLATE DATABASE_DEFAULT,
	[description] varchar(1000) COLLATE DATABASE_DEFAULT,
	[nextstep] varchar(250) COLLATE DATABASE_DEFAULT
)

-------------------------End of Step 2----------------------------------------

If @calc_type not IN ('s') AND @term_start IS NULL
begin
	set @term_start=ISNULL(@term_start,@as_of_date)
	set @term_end=dateadd(year,1,ISNULL(@term_start,@as_of_date))
end

IF @calc_type = 'm'
BEGIN
	if OBJECT_ID(@deal_list_table) is not null
	begin
		--EXEC('INSERT INTO #source_deal_header_id  SELECT DISTINCT source_deal_header_id FROM '+@deal_list_table)
		set @source_deal_header_id=-1
	end
END
 
If @print_diagnostic = 1
begin
	set @log_increment = 1
	EXEC spa_print  '******************************************************************************************'
	EXEC spa_print  '********************START &&&&&&&&&[spa_calc_mtm_job]**********'
end

BEGIN TRY

if @table_name = ''
	set @table_name = NULL

DECLARE @count int, @hr_columns varchar(max)
DECLARE @sqlstmt varchar(max)
DECLARE @sqlstmt2 varchar(max)
DECLARE @sqlstmt3 varchar(max)
DECLARE @sqlstmt4 varchar(max)
DECLARE @url varchar(500)
DECLARE @urlP varchar(500)
DECLARE @url_desc varchar(8000)
DECLARE @user_name varchar(25)
DECLARE @desc varchar(8000)
DECLARE @price_curve_name varchar(50)
DECLARE @price_curve_id varchar(50)
DECLARE @where_clause varchar(max)
DECLARE @from_clause varchar(max)
DECLARE @from_clause1 varchar(max)
DECLARE @run_type VARCHAR(50)



set @where_clause = ''
set @from_clause = ''

DECLARE @include_options int

set @user_name = @user_id

--@module_name == 1 is FASTracker , 2 is RECTracker 3 is EmissionsTracker
DECLARE @module_name int 

SELECT  @module_name =  var_value
FROM    adiha_default_codes_values
WHERE(instance_no = 1) AND (default_code_id = 25) AND (seq_no = 1)

declare @time_zone_id int

SELECT @time_zone_id=var_value   --26
  FROM dbo.adiha_default_codes_values(nolock)
  WHERE        instance_no = 1 AND default_code_id = 36 AND seq_no = 1

SET @pt_temp_deals = dbo.FNAProcessTableName('pt_temp_deals', @user_id, @process_id)
SET @pt_source_deal_pnl_detail_options_at_low = dbo.FNAProcessTableName('pt_source_deal_pnl_detail_options_at_low', @user_id, @process_id)
SET @pt_option_param = dbo.FNAProcessTableName('pt_option_param', @user_id, @process_id)


If @calc_type <> 'w' AND isnull(@source_deal_header_id,'') <> ''
begin
	INSERT INTO #source_deal_header_id
	SELECT CAST(Item AS INT) source_deal_header_id FROM  SplitCommaSeperatedValues(@source_deal_header_id) d

	INSERT INTO #source_deal_header_id
	select m.close_reference_id from  (
		select distinct sdh.close_reference_id from source_deal_header sdh inner join #source_deal_header_id i on sdh.source_deal_header_id=i.source_deal_header_id
		where sdh.product_id=4100 AND sdh.close_reference_id IS NOT NULL and ISNULL(sdh.internal_desk_id,17300)=17301 AND  @calc_type='s'
	) m left join #source_deal_header_id d
	on  m.close_reference_id=d.source_deal_header_id
	where d.source_deal_header_id is null
end 
--Else If @calc_type = 'w'
--	EXEC('INSERT INTO #source_deal_header_id select source_deal_header_id from ' + @deal_list_table )--+ ' where real_deal = ''y''')

IF OBJECT_ID(@deal_list_table) IS NOT NULL
BEGIN
    EXEC ('INSERT INTO #source_deal_header_id  SELECT DISTINCT source_deal_header_id FROM ' + @deal_list_table)
END

--SELECT @time_zone_from= var_value  FROM adiha_default_codes_values  
--	 WHERE  (instance_no = 1) AND (default_code_id = 36) AND (seq_no = 1)  
--  
--SELECT @time_zone_to=timezone_id from application_users where user_login_id=@user_login_id
--DECLARE @group1 VARCHAR(100),@group2 VARCHAR(100),@group3 VARCHAR(100),@group4 VARCHAR(100)

--0 means save all, 1 means dont save pnl_detail, 2 pnl_detail and settlement, 3 pnl_detail but not settlement
DECLARE @save_pnl_option INT
SELECT  @save_pnl_option =  var_value
FROM    adiha_default_codes_values
WHERE(instance_no = 1) AND (default_code_id = 39) AND (seq_no = 1)

If @save_pnl_option IS NULL
	set @save_pnl_option = 0

--0 means do not calcualte and 1 means calculate
DECLARE @mtm_hourly_prices INT
SELECT  @mtm_hourly_prices =  var_value
FROM    adiha_default_codes_values
WHERE(instance_no = 1) AND (default_code_id = 40) AND (seq_no = 1)

If @mtm_hourly_prices IS NULL
	set @mtm_hourly_prices = 0


---####### take the maximum run date form simulation
DECLARE @run_date VARCHAR(20)
IF @criteria_id <0
	select @run_date = MAX(run_date)  from source_price_curve_simulation
		where run_date<=@as_of_date
		
CREATE TABLE #books ( 
	fas_book_id INT
	,fas_stra_id INT
	,fas_sub_id INT
	,book_deal_type_map_id INT
	,source_system_book_id1 INT
	,source_system_book_id2 INT
	,source_system_book_id3 INT
	,source_system_book_id4  INT
	,fas_deal_type_value_id INT
	,func_cur_value_id INT
	,discount_curve_id INT
	,risk_free_curve_id int
	,fx_conversion_market int
) 

if @calc_type = 'w'
begin
	if object_id(@hypo_deal_header) is not null
	begin

		SET @sqlstmt='IF COL_LENGTH('''+@hypo_deal_header+''', ''fx_conversion_market'') IS NULL
			BEGIN
				ALTER TABLE '+@hypo_deal_header+' ADD fx_conversion_market int
			END'
		EXEC(@sqlstmt)	

		SET @sqlstmt='IF COL_LENGTH('''+@hypo_deal_header+''', ''fx_conversion_rate'') IS NULL
			BEGIN
				ALTER TABLE '+@hypo_deal_header+' ADD fx_conversion_rate float
			END'
		EXEC(@sqlstmt)	

		SET @sqlstmt='IF COL_LENGTH('''+@hypo_deal_header+''', ''fx_rounding'') IS NULL
			BEGIN
				ALTER TABLE '+@hypo_deal_header+' ADD fx_rounding int
			END'
		EXEC(@sqlstmt)	

		SET @sqlstmt='IF COL_LENGTH('''+@hypo_deal_header+''', ''fx_option'') IS NULL
			BEGIN
				ALTER TABLE '+@hypo_deal_header+' ADD fx_option int
			END'
		EXEC(@sqlstmt)	
	
		SET @sqlstmt='IF COL_LENGTH('''+@hypo_deal_detail+''', ''fx_conversion_rate'') IS NULL
			BEGIN
				ALTER TABLE '+@hypo_deal_detail+' ADD fx_conversion_rate float
			END'
		EXEC(@sqlstmt)	

	end
end

SET @from_clause = '
	INSERT INTO  #books
	SELECT  distinct sbm.fas_book_id,stra.entity_id,stra.parent_entity_id,sbm.book_deal_type_map_id fas_book_id,sbm.source_system_book_id1,
		sbm.source_system_book_id2,sbm.source_system_book_id3,sbm.source_system_book_id4,sbm.fas_deal_type_value_id 
		, fs.func_cur_value_id,	fs.discount_curve_id,fs.risk_free_curve_id,fs.fx_conversion_market
	FROM portfolio_hierarchy book (nolock) 
	INNER JOIN	Portfolio_hierarchy stra (nolock) ON book.parent_entity_id = stra.entity_id 
	 inner JOIN	source_system_book_map sbm ON sbm.fas_book_id = book.entity_id   
	 inner join  fas_subsidiaries fs ON fs.fas_subsidiary_id = stra.parent_entity_id'
	 +case when  @calc_type = 'w'    then 
		 ' inner join (select  source_system_book_id1,source_system_book_id2,source_system_book_id3,source_system_book_id4 from 
				source_deal_header sdh inner join #source_deal_header_id t on sdh.source_deal_header_id=t.source_deal_header_id '+
		 case when object_id(@hypo_deal_header) is null then '' else ' 
			union select  source_system_book_id1,source_system_book_id2,source_system_book_id3,source_system_book_id4 from '+@hypo_deal_header
		end +') map on map.source_system_book_id1=sbm.source_system_book_id1 and map.source_system_book_id2=sbm.source_system_book_id2 and map.source_system_book_id3=sbm.source_system_book_id3 and map.source_system_book_id4=sbm.source_system_book_id4'
		else  ' WHERE 1=1 ' 
	end  
	    

if  @calc_type = 'w'
begin
	exec spa_print @from_clause
	EXEC(@from_clause)
end
else
begin
	If isnull(@source_deal_header_id ,'')= ''
	BEGIN
		if @hedge_or_item ='h'	
			set @where_clause = @where_clause + ' AND (sbm.fas_deal_type_value_id = 400 OR sbm.fas_deal_type_value_id = 407 OR sbm.fas_deal_type_value_id = 409)'
		else if @hedge_or_item ='i'	
			set @where_clause = @where_clause + ' AND sbm.fas_deal_type_value_id = 401 '
		else
		BEGIN
			SET @where_clause = @where_clause + CASE WHEN @transaction_type IS NOT NULL THEN ' AND sbm.fas_deal_type_value_id IN (' + @transaction_type + ')' 
					ELSE ' AND (sbm.fas_deal_type_value_id NOT IN (402,404,405,406,408,411,410))'
				END
		END
					  			
		if ISNULL(@sub_id, '') <> ''
			set @where_clause = @where_clause + ' AND stra.parent_entity_id in ('+@sub_id + ')'	
		if ISNULL(@strategy_id, '') <>''
			set @where_clause = @where_clause + ' AND stra.entity_id in ('+@strategy_id+')'
		if ISNULL(@book_id, '') <>''
			set @where_clause = @where_clause + ' AND book.entity_id in ('+@book_id+')'
		if ISNULL(@source_book_mapping_id, '') <> ''
			set @where_clause = @where_clause + ' AND sbm.book_deal_type_map_id in ('+@source_book_mapping_id+')'
		

	END

	exec spa_print @from_clause
	exec spa_print @where_clause

	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@from_clause+@where_clause)
end


--return
----------------------Step 1  Create Temporay Deal Table------------------------------
create table #temp_deals(
	[temp_deal_id] [int] identity(1,1),
	[source_deal_header_id] [int]  NOT NULL ,
	[source_deal_detail_id] [int]  NOT NULL ,
	[source_system_id] [int] NOT NULL ,
	[deal_id] [varchar] (200) COLLATE DATABASE_DEFAULT ,
	[deal_date] [datetime] NOT NULL ,
	[ext_deal_id] [varchar] (150) COLLATE DATABASE_DEFAULT  NULL ,
	[physical_financial_flag] [char] (10) COLLATE DATABASE_DEFAULT NOT NULL ,
	[structured_deal_id] [varchar] (50) COLLATE DATABASE_DEFAULT NULL ,
	[counterparty_id] [int] NOT NULL ,
	[entire_term_start] [datetime] NOT NULL ,
	[entire_term_end] [datetime] NOT NULL ,
	[source_deal_type_id] [int] NOT NULL ,
	[deal_sub_type_type_id] [int] NULL ,
	[option_flag] [char] (1) COLLATE DATABASE_DEFAULT NOT NULL ,
	[option_type] [char] (1) COLLATE DATABASE_DEFAULT NULL ,
	[option_excercise_type] [char] (1) COLLATE DATABASE_DEFAULT  NULL ,
	[source_system_book_id1] [int] NOT NULL ,
	[source_system_book_id2] [int] NULL ,
	[source_system_book_id3] [int] NULL ,
	[source_system_book_id4] [int] NULL ,
	[description1] [varchar] (max) COLLATE DATABASE_DEFAULT NULL ,
	[description2] [varchar] (max) COLLATE DATABASE_DEFAULT  NULL ,
	[description3] [varchar] (max) COLLATE DATABASE_DEFAULT  NULL ,
	[deal_category_value_id] [int] NOT NULL,
	[trader_id] [int] NOT NULL,
	[maturity_date] [datetime] NOT NULL,
	[term_start] [datetime] NOT NULL ,
	[term_end] [datetime] NOT NULL ,
	[Leg] [int] NOT NULL ,
	[contract_expiration_date] [datetime] NOT NULL ,
	[fixed_float_leg] [char] (1) COLLATE DATABASE_DEFAULT NOT NULL ,
	[buy_sell_flag] [char] (1) COLLATE DATABASE_DEFAULT  NOT NULL ,
	[curve_id] [int] NULL ,
	[fixed_price] [float] NULL ,
	[fixed_price_currency_id] [int] NULL ,
	[option_strike_price] [float] NULL ,
	[deal_volume] [float]  NULL ,
	[deal_volume_frequency] [char] (1) COLLATE DATABASE_DEFAULT  NOT NULL ,
	[deal_volume_uom_id] [int] NULL ,
	[block_description] [varchar] (100) COLLATE DATABASE_DEFAULT  NULL ,
	[internal_deal_type_value_id] INT  NULL , -- 17 is storage ACTUAL,  20 is nomination and 21 is scheduled which will be processed
	[internal_deal_subtype_value_id] INT  NULL, -- 12 is lagging,19 is Storage Actual, 20 Storage Nom, 21 Storage Scheduled 
	[deal_detail_description] [varchar] (100) COLLATE DATABASE_DEFAULT NULL,
	formula_id int NULL,
	[formula] varchar(6000) COLLATE DATABASE_DEFAULT NULL,
	[formula_value] float NULL,
	[price_adder] float NULL, 
	[price_multiplier] float NULL,
	[day_count_id] int NULL,
	[no_days] int NULL,
	[days_year] int NULL,
	[settlement_date] datetime NULL,
	[no_days_left] float NULL,
	[no_days_accrued] float NULL,
	[spot_price] float NULL,
	[func_cur_id] float NULL,
	[discount_curve_id] int NULL,
	[risk_free_curve_id] int NULL,
	pricing int NULL, --1600 is avg pricing,
	contract_id int NULL,
	derived_curve varchar(1) COLLATE DATABASE_DEFAULT,
--	block_type INT,
--	block_definition_id INT,
	fixed_cost float,
	curve_currency_id int,
	curve_uom_id int,
	settled int, -- 1 means yes and 0 means no
	leg_physical_financial_flag varchar(1) COLLATE DATABASE_DEFAULT NULL,
	fas_deal_type_value_id int,
	discount_factor float,
	contract_volume float, 
	volume_multiplier float,
	volume_multiplier2 float,
	price_adder2 float,
	pay_opposite varchar(1) COLLATE DATABASE_DEFAULT,
	price_adder_currency int,
	price_adder2_currency int,
	formula_currency int,
	fixed_cost_currency int,
	exp_curve_as_of_date datetime,
	exp_maturity_date datetime,
	curve_type_maturity_date datetime,
	volume_type INT, -- Deal Volume (17300)   Forecasted (17301) Shaped (17302)
	curve_granularity INT, --982 is hourly
	hourly_position_breakdown INT,
	--original_curve_id INT,
	monthly_index INT,
	location_id INT,
	product_id INT,
	option_settlement_date DATETIME,
	proxy_curve_id  INT,
	proxy_curve_id3  INT,
	settlement_curve_id INT,
	formula_curve_id INT,
	settlement_currency INT,
	monthly_index_maturity DATETIME,
	proxy_curve_maturity DATETIME,
	proxy_curve_maturity3 DATETIME,
	settlement_curve_maturity DATETIME, 
	monthly_index_granularity INT,
	proxy_curve_granularity INT,
	proxy_curve_granularity3 INT,
	settlement_curve_granularity INT,
	proxy_derived_curve varchar(1) COLLATE DATABASE_DEFAULT,
	proxy_derived_curve3 varchar(1) COLLATE DATABASE_DEFAULT,
	monthly_index_derived_curve varchar(1) COLLATE DATABASE_DEFAULT, 
	settlement_derived_curve varchar(1) COLLATE DATABASE_DEFAULT,
	price_uom_id INT,
	curve_factor float, 
	proxy_curve_factor float,
	proxy_curve_factor3 float,
	monthly_index_factor float,
	settlement_curve_factor float,
	fixed_price_cur_factor float,
	fixed_cost_cur_factor float, 
	adder1_cur_factor float,
	adder2_cur_factor float,
	formula_cur_factor float,
	proxy_currency_id int,
	proxy_currency_id3 int,
	monthly_index_currency_id int, 
	settlement_curve_currency_id int,
	monthly_maturity datetime,
	original_formula_currency INT,
	capacity FLOAT,
	meter_deal_id INT,
	curve_tou INT,
	volume_rounding INT,
	original_fixed_price_currency_id INT,
	meter_id INT,
	variable_swap CHAR(1) COLLATE DATABASE_DEFAULT 
	,save_mtm_at_calculation_granularity varchar(1) COLLATE DATABASE_DEFAULT,timezone_id int,	[header_buy_sell_flag] [char] (1) COLLATE DATABASE_DEFAULT  NOT NULL 
	,filter_term_start datetime,filter_term_end datetime
	,actual_granularity INT
	,actualization_flag CHAR(1) COLLATE DATABASE_DEFAULT 
	,actual_volume FLOAT
	,schedule_volume FLOAT
	,options_calc_method INT
	,attribute_type VARCHAR(1) COLLATE DATABASE_DEFAULT NULL
	,bid_n_ask_price char(1) COLLATE DATABASE_DEFAULT,
	broker_id INT
	,fx_conversion_market int, invoice_fx_rate float
	,fas_sub_id INT,fx_rounding int,
	fx_option int,holiday_calendar_id int,settlement_days int,invoice_due_date int
	,invoice_date datetime
	,term_frequency varchar(1) COLLATE DATABASE_DEFAULT
	,calc_mtm_at_tou_level varchar(1) COLLATE DATABASE_DEFAULT
	,commodity_id INT,
	shipment_id INT, 
	ticket_detail_id INT,
	state_value_id INT,
	tier_value_id INT,
	match_info_id INT
	,exception_handle bit
	,mtm_sett_calc bit
	,curve_as_of_date date
	,calc_physical_financial_flag CHAR(1) COLLATE DATABASE_DEFAULT --calculate mtm/settlement on this physical/financial flag. Sometime it is required to calculate mtm/settlement as financial deal though it is physical deal.

) 

CREATE TABLE #fees_breakdown 
(
	as_of_date DATETIME,
	source_deal_header_id int,
	leg int,
	term_start DATETIME,
	term_end DATETIME,
	field_id int,
	field_name VARCHAR(100) COLLATE DATABASE_DEFAULT,
	price_deal FLOAT,
	price FLOAT,
	price_inv FLOAT,
	total_price_deal FLOAT,
	total_price FLOAT,
	total_price_inv FLOAT,
	volume FLOAT,
	value_deal FLOAT,
	[value] FLOAT,
	value_inv FLOAT,
	deal_cur_id int,
	inv_cur_id int,
	contract_value_deal FLOAT,
	contract_value FLOAT,
	contract_value_inv FLOAT,
	internal_type int,
	tab_group_name int,
	udf_group_name int,
	[sequence] int,
	fee_currency_id int,
	currency_id int,
	contract_mkt_flag CHAR(1) COLLATE DATABASE_DEFAULT,
	source_deal_detail_id int
	,shipment_id INT,
	ticket_detail_id INT,
	match_info_id INT,
	counterparty_id int NULL,
	contract_id int NULL

)


-------------------------End of Step 1----------------------------------------

-- 0 means it is interest rate, 1 means the vale is already discount factor, 2 discount factor provided at deal level
DECLARE @is_discount_curve_a_factor int
SELECT  @is_discount_curve_a_factor   = var_value FROM adiha_default_codes_values
WHERE(instance_no = '1') AND (default_code_id = 14) AND (seq_no = 1)

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end
--SELECT @curve_as_of_date, NULL, NULL, NULL, @DiscountTableName, NULL, @source_deal_header_id

exec spa_Calc_Discount_Factor @curve_as_of_date, NULL, NULL, NULL, @DiscountTableName, NULL, @source_deal_header_id

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** End of Collecting Discount Factors *****************************'	
END
----------------------Step 3  select all deals given rthe input criteria in to a temp table------------------------------
DECLARE @no_days_left varchar(1000)
DECLARE @no_days_accrued varchar(1000)

--changed 1 to 0 below to remove 1 day from the logic as the start and end date are overlapping by a day.
set @no_days_left = 
	'
	case    when (isnull(sdd.settlement_date, sdd.contract_expiration_date) <= ''' + @as_of_date + ''') then 0
			when (dcd.no_days is null) then
				datediff(dd, sdd.term_start, isnull(sdd.settlement_date, sdd.contract_expiration_date)) + 0 -
				case when (''' + @as_of_date + ''' > sdd.term_start) then
					(datediff(dd, sdd.term_start, ''' + @as_of_date + ''') + 0)
				else 0 end
			else
				(datediff(dd, sdd.term_start, isnull(sdd.settlement_date, sdd.contract_expiration_date))/28) *
				dcd.no_days - case when (''' + @as_of_date + ''' > sdd.term_start) then
					dcd.no_days - (datediff(dd, sdd.term_start, ''' + @as_of_date + ''') + 0)
				 else 0 end
	end
	'


set @no_days_accrued = 
	'
	case when (sdd.term_start >= ''' + @as_of_date + ''') then 0 
	else 
		case when (dcd.no_days is null) then 
			datediff(dd, sdd.term_start, isnull(sdd.settlement_date, sdd.contract_expiration_date)) + 0
		else (datediff(dd, sdd.term_start, isnull(sdd.settlement_date, sdd.contract_expiration_date))/28) * dcd.no_days end - ' + @no_days_left + ' 
	end 		
	'

--set @where_clause = ' where   ((ISNULL(sc.env_product,''n'')=''y'') OR (ISNULL(sc.env_product,''n'')=''n'' AND  sdh.deal_date <='''+ dbo.FNAGetSQLStandardDate(@as_of_date)+ '''))'	
SET @where_clause = ' WHERE 1=1 '

IF @ignore_deal_date = 0
	set @where_clause = @where_clause + ' AND sdh.deal_date <='''+ dbo.FNAGetSQLStandardDate(@as_of_date)+ ''''


If isnull(@source_deal_header_id ,'')= ''
BEGIN
	
	if @trader_id <> ''
		set @where_clause = @where_clause + ' AND sdh.trader_id = ' + cast(@trader_id as varchar)
	
	if @options_only = 'y'
	    set @where_clause = @where_clause + ' AND sdh.option_flag = ''' + @options_only + ''''
	
	if @counterparty_id <> ''  AND @cpt_type <> 'b'
	    set @where_clause = @where_clause + ' AND sdh.counterparty_id IN(' + @counterparty_id + ')'
	
	IF isnull(@ref_id,'') <> ''
		SET @where_clause = @where_clause + ' AND sdh.deal_id LIKE ''%' + @ref_id + '%'''		    
		
	----IF @contract_id <> ''
	----	SET @where_clause = @where_clause + ' AND sdh.contract_id IN (' + @contract_id + ')' 	    
END

--If @tenor_option = 'f' -- f
--   SET @where_clause = @where_clause + ' AND sdd.term_start > ''' +  @as_of_date  + ''''
--If @tenor_option = 'c' -- c, f
--   SET @where_clause = @where_clause + ' AND sdd.term_start >= ''' +  dbo.FNAGetContractMonth(@as_of_date)  + ''''

IF @calc_type ='s'
begin
	If isnull(@look_term,'d') = 's'  -- c, f
	   SET @where_clause = @where_clause + ' and 
		   CASE WHEN sdh.is_environmental = ''y'' THEN ned.delivery_date
		   else  
			   CASE WHEN sdh.option_flag = ''y'' THEN ned.option_settlement_date
				else 
					case when calc_physical_financial_flag.calc_physical_financial_flag =''f'' THEN COALESCE(cexp.exp_date,sdd.settlement_date,sdd.term_start) else sdd.term_start end 
				end
			end BETWEEN ''' + @term_start + ''' AND ''' + @term_end + ''''
	else
	   SET @where_clause = @where_clause + ' and 
		   CASE WHEN sdh.is_environmental = ''y'' THEN ned.delivery_date
		   else  
			   CASE WHEN sdh.option_flag = ''y'' THEN ned.option_settlement_date
				else 
					sdd.term_start
				end
			end BETWEEN ''' + @term_start + ''' AND ''' + @term_end + ''''
end


IF @calc_type <> 's'
	SET @where_clause = @where_clause + ' AND COALESCE(cexp.exp_date,sdd.contract_expiration_date,sdd.term_end) between
		case when isnull(sdht.ignore_bom,''n'')=''n'' then dateadd(day,1,'''+@as_of_date+''')  else '''+ convert(varchar(10),dateadd(month,1,left(@as_of_date,8)+'01'),120) +''' end and  case when  (sdht.[month] is null and sdht.[year] is null) then ''9999-01-01''  
			else  dateadd(month,isnull(sdht.[month],0),dateadd(year,isnull(sdht.[year],0),case when sdht.[year] is null then case when sdht.[month] is null then '''+@as_of_date+''' else '''+convert(varchar(10),dateadd(day,-1,dateadd(month,1,left(@as_of_date,8)+'01')),120)+''' end else '''+convert(varchar(10),dateadd(day,-1,dateadd(year,1,left(@as_of_date,5)+'01-01')),120)+''' end )) end'


IF @calc_type <> 's'
	SET @where_clause = @where_clause + ' AND (sdh.is_environmental = ''y'' OR ISNULL(case when sdh.option_flag=''y''
	 or calc_physical_financial_flag.calc_physical_financial_flag=''f'' then ISNULL(cexp.exp_date,sdd.contract_expiration_date) else null end,sdd.term_end) > ''' +  @as_of_date  + ''')'




IF @calc_type = 's'
SET @where_clause = @where_clause + ' AND (ISNULL(sdh.is_environmental, ''n'') <> ''y'' OR sdd.status = 25006 OR rec.transfer_status = 112102) 
--	AND COALESCE(rec.delivery_date, sdd.actual_delivery_date, sdd.delivery_date, sdd.term_start) BETWEEN ''' + @term_start + ''' AND ''' + @term_end + '''
	AND (rec.delivery_date IS NULL OR rec.delivery_date BETWEEN ''' + @term_start + ''' AND ''' + @term_end + ''')'

SET   @where_clause =   @where_clause + ' AND ISNULL(sdh.deal_status,-1) <> '+@cancel_deal_status

SET @where_clause = @where_clause + ' --AND ( COALESCE(sdh.internal_deal_type_value_id, sdht.internal_deal_type_value_id,1) NOT IN (17,19) 
	--OR
	--(ISNULL(sdh.internal_deal_type_value_id, sdht.internal_deal_type_value_id) = 21 AND ''' + @calc_type + ''' <> ''s''))
	'
-- Exclude MTM for Transportation Deals 
SET @where_clause =  @where_clause + ' AND (( COALESCE(sdh.internal_deal_type_value_id, sdht.internal_deal_type_value_id,1) NOT IN (13)  
	AND ''' + @calc_type + ''' = ''m'' OR ''' + @calc_type + ''' = ''w'') OR (''' + @calc_type + ''' = ''s''))'

-- select * from #temp_leg_mtm
exec spa_print @where_clause
--return



If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--CREATE TABLE #hrly_wght_avg_price (source_deal_header_id INT, curve_id INT, term_start DATETIME, wght_avg_price FLOAT)
CREATE TABLE #non_expired_deals (source_deal_header_id INT, max_term_end datetime, delivery_date DATETIME)
DECLARE @sql_expired_deals varchar(8000)
CREATE TABLE #incremental_deals(source_deal_header_id INT, entire_term_end datetime)

-- find out the deals and price changes if run_incremental is checked. Process only those deals
IF @run_incremental='y'
BEGIN

	set @sql_expired_deals  = 
	'
	;WITH cte (source_curve_def_id,term_start,term_end)
	 AS (
		SELECT
			source_curve_def_id,
			MIN(maturity_date) AS term_start,
			MAX(maturity_date) AS term_end
		FROM
			source_price_curve spc
		WHERE
			spc.update_ts between '''+@term_start+''' AND '''+@term_end+'''
		GROUP BY source_curve_def_id
	)

	INSERT INTO #incremental_deals(source_deal_header_id)
	SELECT source_deal_header_id
	FROM
	(
		SELECT 
			sdh.source_deal_header_id
		FROM
			source_deal_header sdh 
			INNER JOIN source_deal_detail sdd  ON sdh.source_deal_header_id=sdd.source_deal_header_id
		WHERE
			sdd.update_ts between '''+@term_start+''' AND '''+@term_end+'''
		UNION ALL
		SELECT
			sdh.source_deal_header_id
		FROM
			source_deal_header sdh 
			INNER JOIN source_deal_detail sdd  ON sdh.source_deal_header_id=sdd.source_deal_header_id
			INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id=sdd.curve_id
			INNER JOIN cte ct ON ct.source_curve_def_id=sdd.curve_id
		WHERE
			sdd.term_start between ct.term_start AND ct.term_end
	)a
	GROUP BY source_deal_header_id'

	EXEC spa_print  @sql_expired_deals
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql_expired_deals)
END

set @sql_expired_deals  = '
	INSERT INTO #non_expired_deals
	select --top(50)
		sdh.source_deal_header_id, max(sdh.entire_term_end) max_term_end, null 
			FROM   source_deal_header sdh  ' +
			CASE WHEN @run_incremental='y' THEN ' INNER JOIN #incremental_deals id ON id.source_deal_header_id=sdh.source_deal_header_id' ELSE '' END+
			CASE when isnull(@source_deal_header_id,'') = '' THEN '' 
			ELSE ' inner join #source_deal_header_id tmp_id on tmp_id.source_deal_header_id=sdh.source_deal_header_id '  END +
			' inner join #books sbm ON sdh.source_system_book_id1 = sbm.source_system_book_id1 AND 
		 sdh.source_system_book_id2 = sbm.source_system_book_id2 AND sdh.source_system_book_id3 = sbm.source_system_book_id3 AND 
		 sdh.source_system_book_id4 = sbm.source_system_book_id4 			
	 where (sdh.entire_term_end >= ''' + dbo.FNAGetSQLStandardDate(@as_of_date) + ''' OR sdh.is_environmental = ''y'')'


		 
If isnull(@source_deal_header_id ,'')= ''
BEGIN
	if @trader_id <> ''
		set @sql_expired_deals = @sql_expired_deals + ' AND sdh.trader_id = ' + cast(@trader_id as varchar)
	if @options_only = 'y'
	    set @sql_expired_deals = @sql_expired_deals + ' AND sdh.option_flag = ''' + @options_only + ''''
	 
	if @counterparty_id <> '' AND @cpt_type <> 'b'
	   set @sql_expired_deals = @sql_expired_deals + ' AND sdh.counterparty_id IN(' + @counterparty_id + ')'    

	IF isnull(@ref_id,'') <> ''
		SET @sql_expired_deals = @sql_expired_deals + ' AND sdh.deal_id LIKE ''%' + @ref_id + '%'''		 
		
	--IF @contract_id <> ''
	--	SET @sql_expired_deals = @sql_expired_deals + ' AND sdh.contract_id IN (' + @contract_id + ')' 	      		
END
set @sql_expired_deals = @sql_expired_deals + ' group by  sdh.source_deal_header_id '

--RECT MTM Objects - to collect product and it's detail
IF OBJECT_ID('tempdb..#product_info') IS NOT NULL DROP TABLE #product_info

CREATE TABLE #product_info (source_deal_header_id INT, 
	source_deal_detail_id INT,
	term_start DATE,
	vintage_year INT,
	state_value_id INT, 
	tier_value_id INT,
	contract_expiration_date DATE,
	banking_exp_date DATE
)


IF OBJECT_ID('tempdb..#product_detail') IS NOT NULL DROP TABLE #product_detail

CREATE TABLE #product_detail(
	id INT IDENTITY(1,1),
	source_deal_header_id INT,
	source_deal_detail_id INT, 
	state_value_id INT, 
	tier_value_id INT, 
	vintage_year INT,
	price_index INT,
	volume INT,
	vintage_term DATE
)


If @calc_type <> 's'
BEGIN

	EXEC spa_print @sql_expired_deals
	exec (@sql_expired_deals)

	If @calc_type = 'w'
	begin
	
		if OBJECT_ID(@hypo_deal_header) is not null
		begin
			set @sql_expired_deals  = '
				INSERT INTO #non_expired_deals
				select sdh.source_deal_header_id, max(sdh.entire_term_end) max_term_end, null 
				FROM  '+ @hypo_deal_header+' sdh  inner join '+ @hypo_deal_detail+' sdd
					on sdh.source_deal_header_id=sdd.source_deal_header_id
				 where  sdh.entire_term_end >= ''' + CONVERT(varchar(10),@as_of_date,120) + '''
				 group by sdh.source_deal_header_id '

				exec (@sql_expired_deals)
				
				set @sql_expired_deals  = '
				INSERT INTO #source_deal_header_id
				select DISTINCT sdh.source_deal_header_id 
				FROM  '+ @hypo_deal_header+' sdh '

				exec (@sql_expired_deals)
		end
	end

	CREATE index indx_non_expired_deals ON #non_expired_deals (source_deal_header_id)

	--For REC MTM Calculation
	--DECLARE @rec_deal_ids VARCHAR(MAX)

	--SELECT @rec_deal_ids = COALESCE(@rec_deal_ids + ',', '') + CAST(ned.source_deal_header_id AS VARCHAR)
	--FROM #non_expired_deals ned
	--	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = ned.source_deal_header_id
	--WHERE sdh.is_environmental = 'y'
	--GROUP BY ned.source_deal_header_id

	DECLARE @product_info_process_table VARCHAR(2000) = 'adiha_process.dbo.buy_sell_match_' + @process_id + '__product_info'

	IF OBJECT_ID(@product_info_process_table) IS NOT NULL EXEC ('DROP TABLE ' + @product_info_process_table)

	EXEC spa_buy_sell_match @flag = 'm', @return_process_table = @product_info_process_table

	EXEC('INSERT INTO #product_info SELECT * FROM ' + @product_info_process_table)

	INSERT INTO #product_detail
	SELECT 
		sdh.source_deal_header_id,
		pii.source_deal_detail_id, 
		pii.state_value_id, 
		pii.tier_value_id, 
		pii.vintage_year,
		spd.price_index AS price_index,
		NULL AS volume,
		ISNULL(pii.contract_expiration_date, pii.banking_exp_date)
	FROM source_deal_header sdh
	INNER JOIN #product_info pii ON pii.source_deal_header_id = sdh.source_deal_header_id
	INNER JOIN state_properties_details spd ON spd.state_value_id = pii.state_value_id
		AND spd.tier_id = pii.tier_value_id
	INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = pii.source_deal_detail_id
	LEFT JOIN rec_generator rg ON rg.generator_id = sdh.generator_id
	WHERE (rg.technology IS NULL OR rg.technology = spd.technology_id)
		--AND ISNULL(pii.contract_expiration_date, pii.banking_exp_date) >= @as_of_date
		AND spd.price_index IS NOT NULL

	DELETE ned
	FROM #non_expired_deals ned
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = ned.source_deal_header_id
	LEFT JOIN #product_detail pd ON pd.source_deal_header_id  = ned.source_deal_header_id
	WHERE sdh.is_environmental = 'y' AND pd.source_deal_header_id IS NULL

	;WITH dupIndex AS(
				SELECT *,
					ROW_NUMBER() OVER (PARTITION BY source_deal_header_id,
						source_deal_detail_id,
						price_index 
					ORDER BY source_deal_header_id,
						source_deal_detail_id,
						price_index,volume DESC) AS rnk
				FROM #product_detail
				)
	DELETE FROM dupIndex WHERE rnk > 1 AND volume IS NULL
END

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** End of Collecting Unexpired Deals *****************************'	
END


CREATE TABLE #tmp_deals_settled (source_deal_header_id int, term_start datetime, term_end datetime, 
		expiration_date datetime, payment_date datetime, option_settlement_date datetime, delivery_date datetime)

If @calc_type = 's'
BEGIN

	SELECT
		b.gl_account_id,
		b.wght_avg_cost
	INTO #calcprocess_inventory_wght_avg_cost
	FROM
		 calcprocess_inventory_wght_avg_cost b 
	WHERE
		 b.as_of_date = @as_of_date AND 1=2 --price will not be taken from wacog for Virtual Storage deals.
		 
	SET @sqlstmt = '
	INSERT into #tmp_deals_settled
	Select	--top(100)
	sdh.source_deal_header_id, sdd.term_start, sdd.term_end, max(sdd.contract_expiration_date) expiration_date, 
			max(sdd.settlement_date) payment_date, 
			CASE WHEN MAX(sdh.option_flag) = ''y'' THEN max(isnull(sdh.option_settlement_date, sdh.deal_date)) ELSE NULL END option_settlement_date,MAX(rec.dDate)  
	from source_deal_header sdh  			
	' + CASE WHEN (ISNULL(@source_deal_header_id, '') = '') AND NULLIF(@deal_list_table,'') IS NULL THEN 
	' INNER JOIN #books sbm ON sdh.source_system_book_id1 = sbm.source_system_book_id1 AND 
		 sdh.source_system_book_id2 = sbm.source_system_book_id2 AND sdh.source_system_book_id3 = sbm.source_system_book_id3 AND 
		 sdh.source_system_book_id4 = sbm.source_system_book_id4 ' 
	ELSE
		' INNER JOIN #source_deal_header_id tmp_id on tmp_id.source_deal_header_id=sdh.source_deal_header_id ' END +
	' INNER JOIN source_deal_detail sdd  on sdh.source_deal_header_id = sdd.source_deal_header_id

	OUTER APPLY (SELECT DISTINCT delivery_date
			FROM matching_header_detail_info mhdi
			WHERE mhdi.source_deal_header_id = sdh.source_deal_header_id
			AND mhdi.source_deal_detail_id = sdd.source_deal_detail_id
			AND mhdi.delivery_date BETWEEN ''' + @term_start + ''' AND ''' + @term_end + ''') match

	OUTER APPLY(SELECT sdh1.source_deal_header_id 
				FROM source_deal_header sdh1 
				INNER JOIN source_deal_detail sdd1 ON sdh1.source_deal_header_id=sdd1.source_deal_header_id
				WHERE sdh1.source_deal_header_id=sdh.source_deal_header_id 
					AND sdd1.term_start = sdd.term_start 
					AND ISNULL(total_volume,0)=0 
					and formula_id is null 
					and isnull(fixed_price,0)=0  --and curve_id is null 
					AND fixed_float_leg =''f''					
					AND '''+@as_of_date+'''< CASE WHEN sdh1.is_environmental = ''y'' THEN COALESCE(match.delivery_date, sdd1.actual_delivery_date, sdd1.delivery_date, sdd1.term_start) ELSE sdd1.term_end END 
					And isnull(fixed_cost,0)=0 
				GROUP BY sdh1.source_deal_header_id) fee_deals 

	OUTER APPLY(SELECT 
					COALESCE(match.delivery_date,sdd2.actual_delivery_date, sdd2.delivery_date, sdd2.term_start) dDate
				FROM source_deal_detail sdd2
				WHERE sdd2.source_deal_detail_id = sdd.source_deal_detail_id
					AND COALESCE(match.delivery_date, sdd2.actual_delivery_date, sdd2.delivery_date, sdd2.term_start) BETWEEN ''' + @term_start + ''' and ''' + @term_end + '''
					AND sdh.is_environmental = ''y'') rec 

	WHERE fee_deals.source_deal_header_id IS NULL '
	+CASE WHEN @cpt_type = 'b' AND @counterparty_id IS NOT NULL THEN ' AND sdh.broker_id IN('+@counterparty_id+')' ELSE '' END +
	' group by sdH.source_deal_header_id, 
	sdd.term_start, 
	sdd.term_end,
	fee_deals.source_deal_header_id
'
	EXEC spa_print @sqlstmt
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)
END



If @calc_type = 's'
	set @from_clause = '
	FROM   #tmp_deals_settled ned 
	INNER JOIN source_deal_header sdh  ON sdh.source_deal_header_id = ned.source_deal_header_id INNER JOIN source_deal_detail sdd  ON sdh.source_deal_header_id = sdd.source_deal_header_id AND sdd.term_start = ned.term_start
			inner join #books sbm ON sdh.source_system_book_id1 = sbm.source_system_book_id1 AND 
		 sdh.source_system_book_id2 = sbm.source_system_book_id2 AND sdh.source_system_book_id3 = sbm.source_system_book_id3 AND sdh.source_system_book_id4 = sbm.source_system_book_id4
	LEFT JOIN #product_detail pd ON pd.source_deal_detail_id = sdd.source_deal_detail_id 			
	LEFT JOIN contract_group cg ON cg.contract_id = sdh.contract_id 
	OUTER APPLY(SELECT mhdi.id AS match_info_id,
				mhdi.delivery_date,
				mhdi.transfer_status, 
				mhdi.assigned_vol
		FROM matching_header_detail_info mhdi
		WHERE mhdi.source_deal_header_id = sdh.source_deal_header_id
		AND mhdi.source_deal_detail_id = sdd.source_deal_detail_id) rec
		--AND mhdi.delivery_date <= ned.delivery_date
    LEFT JOIN holiday_group hgc ON hgc.hol_group_value_id = cg.payment_calendar and 
       convert(varchar(7), hgc.hol_date, 120) = convert(varchar(7), sdd.term_start, 120) 
	LEFT JOIN  formula_editor fe ON sdd.formula_id = fe.formula_id   
	LEFT JOIN source_deal_header_template sdht on sdht.template_id = sdh.template_id  
	LEFT JOIN days_count_def dcd on dcd.value_id = sdd.day_count_id 
	LEFT JOIN source_price_curve_def spcd_f ON spcd_f.source_curve_def_id =  sdd.formula_curve_id 
	LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = ISNULL(pd.price_index, sdd.curve_id) 
	LEFT JOIN source_price_curve_def spcd_p ON spcd_p.source_curve_def_id = spcd.proxy_source_curve_def_id 
	LEFT JOIN source_price_curve_def spcd_m ON spcd_m.source_curve_def_id = spcd.monthly_index 
	LEFT JOIN source_price_curve_def spcd_s ON spcd_s.source_curve_def_id = spcd.settlement_curve_id 
	LEFT JOIN source_price_curve_def spcd_p3 ON spcd_p3.source_curve_def_id = spcd.proxy_curve_id3 
	LEFT JOIN source_currency sc1 ON sc1.source_currency_id = spcd.source_currency_id
	LEFT JOIN source_currency sc2 ON sc2.source_currency_id = spcd_p.source_currency_id 
	LEFT JOIN source_currency sc3 ON sc3.source_currency_id = spcd_m.source_currency_id 
	LEFT JOIN source_currency sc4 ON sc4.source_currency_id = spcd_s.source_currency_id 
	LEFT JOIN source_currency sc5 ON sc5.source_currency_id = sdd.fixed_price_currency_id 
	LEFT JOIN source_currency sc6 ON sc6.source_currency_id = sdd.fixed_cost_currency_id 
	LEFT JOIN source_currency sc7 ON sc7.source_currency_id = sdd.adder_currency_id 
	LEFT JOIN source_currency sc8 ON sc8.source_currency_id = sdd.price_adder_currency2 
	LEFT JOIN source_currency sc9 ON sc9.source_currency_id = sdd.formula_currency_id 
	LEFT JOIN	source_currency sc10 ON sc10.source_currency_id = spcd_p3.source_currency_id
	LEFT JOIN vol_value_rounding r ON r.contract_id = sdh.contract_id 
		AND r.item_type = ''v'' AND r.field_id = -1
	LEFT JOIN source_commodity sc ON sc.source_commodity_id = ISNULL(spcd.commodity_id,sdh.commodity_id)
	LEFT JOIN inventory_account_type iat ON iat.location_id = sdd.location_id 
			LEFT JOIN source_minor_location sml ON sml.source_minor_location_id = sdd.location_id
		LEFT JOIN match_group_detail mgd ON sdd.source_deal_detail_id = mgd.source_deal_detail_id
		LEFT JOIN match_group_header mgh ON mgd.match_group_header_id= mgh.match_group_header_id
		LEFT JOIN ticket_match tm ON mgh.match_group_header_id = tm.match_group_header_id
		LEFT JOIN dbo.ticket_detail AS td2 ON td2.ticket_detail_id = tm.ticket_detail_id 	
		--outer apply (
		--	select sum(simple_for_adder) simple_for_adder,EXP(SUM(LOG(simple_for_multiplier))) simple_for_multiplier
		--	from 
		--		(
		--			select  curve_id, max(simple_for_adder) simple_for_adder
		--				, isnull(max(simple_for_multiplier),1) simple_for_multiplier 
		--			from  deal_position_break_down 
		--			where source_deal_detail_id=sdd.source_deal_detail_id
		--			group by curve_id
		--		) a
		--) dpbd
		LEFT OUTER JOIN #calcprocess_inventory_wght_avg_cost wacog ON wacog.gl_account_id = iat.gl_account_id 
					AND sdd.buy_sell_flag = ''b'' 
					AND sdh.internal_deal_type_value_id IN(17,19,20,21) 
					LEFT OUTER JOIN 
			'+ @DiscountTableName + ' dist ON ' +
				CASE WHEN (@is_discount_curve_a_factor IN (2)) THEN ' dist.source_deal_header_id = sdd.source_deal_header_id AND dist.term_start = sdd.term_start '
				 WHEN (@is_discount_curve_a_factor IN (2)) THEN ' dist.fas_subsidiary_id = sbm.fas_sub_id AND dist.term_start = sdd.term_start '
				ELSE  ' dist.fas_subsidiary_id = sbm.fas_sub_id AND dist.term_start = sdd.term_start ' END  
Else  
BEGIN

	SELECT
		b.gl_account_id,
		term_date,
		b.wght_avg_cost
	INTO #calcprocess_inventory_wght_avg_cost_forward
	FROM
		calcprocess_inventory_wght_avg_cost_forward b 
	WHERE 1=2 --price will not be taken from wacog for Virtual Storage deals.	
		 --AND as_of_date = @as_of_date
				
				
	set @from_clause = '
		FROM   #non_expired_deals ned  INNER JOIN 
			[source_deal_header] sdh  ON sdh.source_deal_header_id = ned.source_deal_header_id INNER JOIN
		 [source_deal_detail] sdd  ON sdh.source_deal_header_id = sdd.source_deal_header_id ' 
		+ CASE WHEN (ISNULL(@source_deal_header_id, '') <> '') or @calc_type = 'w' THEN 
			' INNER JOIN #source_deal_header_id tmp_id  on tmp_id.source_deal_header_id=sdh.source_deal_header_id ' ELSE '' END
		+ ' 
		LEFT JOIN #product_detail pd ON pd.source_deal_detail_id = sdd.source_deal_detail_id
		LEFT JOIN #books sbm  ON sdh.source_system_book_id1 = sbm.source_system_book_id1 AND 
		 sdh.source_system_book_id2 = sbm.source_system_book_id2 AND sdh.source_system_book_id3 = sbm.source_system_book_id3 AND  sdh.source_system_book_id4 = sbm.source_system_book_id4 
		 LEFT JOIN contract_group cg ON cg.contract_id = sdh.contract_id
			LEFT OUTER JOIN  formula_editor fe  ON sdd.formula_id = fe.formula_id   LEFT OUTER JOIN
			source_deal_header_template sdht  on sdht.template_id = sdh.template_id  LEFT OUTER JOIN
			days_count_def dcd on dcd.value_id = sdd.day_count_id 
		LEFT JOIN source_price_curve_def spcd_f ON spcd_f.source_curve_def_id =  sdd.formula_curve_id 
		LEFT JOIN source_price_curve_def spcd  ON spcd.source_curve_def_id = ISNULL(pd.price_index, sdd.curve_id) LEFT OUTER JOIN
			source_price_curve_def spcd_p  ON spcd_p.source_curve_def_id = spcd.proxy_source_curve_def_id LEFT OUTER JOIN 
			source_price_curve_def spcd_m  ON spcd_m.source_curve_def_id = spcd.monthly_index LEFT OUTER JOIN 
			source_price_curve_def spcd_s  ON spcd_s.source_curve_def_id = spcd.settlement_curve_id LEFT OUTER JOIN 
			source_price_curve_def spcd_p3  ON spcd_p3.source_curve_def_id = spcd.proxy_curve_id3 LEFT OUTER JOIN 
			source_currency sc1  ON sc1.source_currency_id = spcd.source_currency_id LEFT OUTER JOIN
			source_currency sc2  ON sc2.source_currency_id = spcd_p.source_currency_id LEFT OUTER JOIN
			source_currency sc3  ON sc3.source_currency_id = spcd_m.source_currency_id LEFT OUTER JOIN
			source_currency sc4  ON sc4.source_currency_id = spcd_s.source_currency_id LEFT OUTER JOIN
			source_currency sc5  ON sc5.source_currency_id = sdd.fixed_price_currency_id LEFT OUTER JOIN
			source_currency sc6  ON sc6.source_currency_id = sdd.fixed_cost_currency_id LEFT OUTER JOIN
			source_currency sc7  ON sc7.source_currency_id = sdd.adder_currency_id LEFT OUTER JOIN
			source_currency sc8  ON sc8.source_currency_id = sdd.price_adder_currency2 LEFT OUTER JOIN
			source_currency sc9  ON sc9.source_currency_id = sdd.formula_currency_id LEFT OUTER JOIN
			source_currency sc10  ON sc10.source_currency_id = spcd_p3.source_currency_id LEFT OUTER JOIN
			vol_value_rounding r  ON r.contract_id = sdh.contract_id AND r.item_type = ''v'' AND r.field_id = -1 '

	set @from_clause1 = '
			LEFT OUTER JOIN source_commodity sc  ON sc.source_commodity_id = ISNULL(spcd.commodity_id,sdh.commodity_id)
			LEFT OUTER JOIN inventory_account_type iat  ON iat.location_id = sdd.location_id 
				AND ISNULL(iat.sub_entity_id,sbm.fas_sub_id) = sbm.fas_sub_id
				AND ISNULL(iat.stra_entity_id,sbm.fas_stra_id) = sbm.fas_stra_id
				AND ISNULL(iat.book_entity_id,sbm.fas_book_id) = sbm.fas_book_id
		LEFT OUTER JOIN  #calcprocess_inventory_wght_avg_cost_forward wacog  ON wacog.gl_account_id = iat.gl_account_id AND wacog.term_date = sdd.term_start
						--AND wacog.term_month = MONTH(sdd.term_start) 
			AND sdd.buy_sell_flag = ''b'' AND sdh.internal_deal_type_value_id IN(17,19,20,21) 
			LEFT JOIN source_minor_location sml  ON sml.source_minor_location_id = sdd.location_id
		--outer apply (
		--	select sum(simple_for_adder) simple_for_adder,EXP(SUM(LOG(simple_for_multiplier))) simple_for_multiplier
		--	from 
		--		(
		--			select  curve_id, max(simple_for_adder) simple_for_adder
		--				,isnull(max(simple_for_multiplier),1) simple_for_multiplier 
		--			from  deal_position_break_down 
		--			where source_deal_detail_id=sdd.source_deal_detail_id
		--			group by curve_id
		--		) a			
		--) dpbd
			LEFT OUTER JOIN 						
			'+	@DiscountTableName + ' dist  ON ' +
				CASE WHEN (@is_discount_curve_a_factor IN (2)) THEN ' dist.source_deal_header_id = sdd.source_deal_header_id AND dist.term_start = sdd.term_start '
				ELSE  ' dist.fas_subsidiary_id = sbm.fas_sub_id AND dist.term_start = sdd.term_start ' END  

END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


--980 monthly, 981 daily, 991 quarterly, 992 semi-annual, 993 annual

DECLARE @maturity_date varchar(1000)
DECLARE @maturity_date_m varchar(1000)
DECLARE @maturity_date_p varchar(1000)
DECLARE @maturity_date_p3 varchar(1000)
DECLARE @maturity_date_s varchar(1000)
DECLARE @monthly_maturity varchar(1000)


--select * from source_deal_type

set @monthly_maturity = 
'
	cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
'

set @maturity_date = 
'
	CASE WHEN (spcd.Granularity in (980,10000289)) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
		 WHEN (spcd.Granularity in (981,10000290)) THEN sdd.term_start
		 WHEN (spcd.Granularity = 991) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''  
		 WHEN (spcd.Granularity = 992) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''  
		 WHEN (spcd.Granularity = 993) THEN cast(Year(sdd.term_start) as varchar) + ''-01-01'' 
		 ELSE sdd.term_start 
	END 		 
'

set @maturity_date_m = 
'
	CASE WHEN (spcd_m.Granularity in (980,10000289)) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
		 WHEN (spcd_m.Granularity in (981,10000290)) THEN sdd.term_start
		 WHEN (spcd_m.Granularity = 991) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''  
		 WHEN (spcd_m.Granularity = 992) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''  
		 WHEN (spcd_m.Granularity = 993) THEN cast(Year(sdd.term_start) as varchar) + ''-01-01'' 
		 ELSE sdd.term_start 
	END 		 
'

set @maturity_date_p = 
'
	CASE WHEN (spcd_p.Granularity in (980,10000289)) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
		 WHEN (spcd_p.Granularity in (981,10000290)) THEN sdd.term_start
		 WHEN (spcd_p.Granularity = 991) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''  
		 WHEN (spcd_p.Granularity = 992) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''  
		 WHEN (spcd_p.Granularity = 993) THEN cast(Year(sdd.term_start) as varchar) + ''-01-01'' 
	ELSE sdd.term_start 
	END 		 
'

set @maturity_date_p3 = 
'
	CASE WHEN (spcd_p3.Granularity in (980,10000289)) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
		 WHEN (spcd_p3.Granularity in (981,10000290)) THEN sdd.term_start
		 WHEN (spcd_p3.Granularity = 991) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''  
		 WHEN (spcd_p3.Granularity = 992) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''  
		 WHEN (spcd_p3.Granularity = 993) THEN cast(Year(sdd.term_start) as varchar) + ''-01-01'' 
		 ELSE sdd.term_start 
	END 		 
'

set @maturity_date_s = 
'
	CASE WHEN (spcd_s.Granularity in (980,10000289)) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(Month(sdd.term_start) as varchar) + ''-01'' 
		 WHEN (spcd_s.Granularity in (981,10000290)) THEN sdd.term_start
		 WHEN (spcd_s.Granularity = 991) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''  
		 WHEN (spcd_s.Granularity = 992) THEN cast(Year(sdd.term_start) as varchar) + ''-'' + cast(CASE datepart(q, sdd.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''  
		 WHEN (spcd_s.Granularity = 993) THEN cast(Year(sdd.term_start) as varchar) + ''-01-01'' 
		 ELSE sdd.term_start 
	END 		 
'


--IF @calc_type = 'm' 
SET @from_clause = @from_clause + ' 
OUTER APPLY(
	select max(exp_date) exp_date ,max(case when aa=0 then exp_date else null end) exp_date_market   
	from (
		SELECT max(hg.exp_date) exp_date,0 aa FROM holiday_group hg 
		WHERE hg.hol_group_value_id = spcd.exp_calendar_id  AND ' + @maturity_date + ' BETWEEN hg.hol_date AND hg.hol_date_to
			and 1= case when ''s''='''+ @calc_type+''' then
						case when isnull(sdh.internal_deal_subtype_value_id,-1)='+@phy_future+' and sdd.physical_financial_flag=''p'' then 
							case when hg.exp_date='''+@as_of_date+''' then 1 else 2 end 
						else 1 end
					
					else -- calc_type=m
						case when sdd.physical_financial_flag=''p'' then 
							case when isnull(sdh.internal_deal_subtype_value_id,-1) in ('+@CFD_id+')  then 1 
							when isnull(sdh.internal_deal_subtype_value_id,-1) in ('+@phy_future+') then
								case when hg.exp_date='''+@as_of_date+''' then 1 else 2 end 
							else 2 end
						else 1 end
					end					
		union all
		SELECT max(hg.exp_date) exp_date,1 aa FROM holiday_group hg 
			WHERE hg.hol_group_value_id = spcd_f.exp_calendar_id  AND ' + @maturity_date + ' BETWEEN hg.hol_date AND hg.hol_date_to
			and 1= case when ''m''='''+ @calc_type+''' and sdd.physical_financial_flag=''p'' and isnull(sdh.internal_deal_subtype_value_id,-1)<>'+@CFD_id+' then 2 else 1 end
		) a
) cexp 
outer apply ( 
select
	case when ''s''='''+ @calc_type+''' and isnull(sdh.internal_deal_subtype_value_id,-1)='+@phy_future+' and cexp.exp_date='''+@as_of_date+''' then ''f''
			when  ''s''='''+ @calc_type+''' and isnull(sdh.internal_deal_subtype_value_id,-1)='+@CFD_id+' then  ''f''
			else sdd.physical_financial_flag end calc_physical_financial_flag
) calc_physical_financial_flag  --calculate mtm/settlement on this physical/financial flag. Sometime it is required to calculate mtm/settlement as financial deal though  physical deal.
' 

set @sqlstmt='insert into #temp_deals  
		SELECT -- top(100)
		sdh.source_deal_header_id,sdd.source_deal_detail_id, sdh.source_system_id,sdh.deal_id,sdh.deal_date,sdh.ext_deal_id,
		isnull(sdd.physical_financial_flag, sdh.physical_financial_flag) physical_financial_flag,
		sdh.structured_deal_id,sdh.counterparty_id,sdh.entire_term_start,sdh.entire_term_end,sdh.source_deal_type_id, 
		sdh.deal_sub_type_type_id,sdh.option_flag,sdh.option_type,sdh.option_excercise_type,sdh.source_system_book_id1,
		sdh.source_system_book_id2,sdh.source_system_book_id3,sdh.source_system_book_id4,sdh.description1,
		sdh.description2,sdh.description3,sdh.deal_category_value_id,sdh.trader_id,
		' + @maturity_date + ' maturity_date,
		sdd.term_start, 
		sdd.term_end,
		sdd.leg, 
		ISNULL(CASE WHEN '''+@calc_type+''' = ''m'' or isnull(sdh.internal_deal_subtype_value_id,-1)='+@phy_future+' THEN cexp.exp_date ELSE NULL END, sdd.contract_expiration_date), 
		sdd.fixed_float_leg,sdd.buy_sell_flag,
		ISNULL(pd.price_index, spcd.source_curve_def_id), 
		case when sdh.source_deal_type_id=1228 then 1.00/COALESCE(wacog.wght_avg_cost, sdd.fixed_price, 0)  -- Check FX
			else COALESCE(wacog.wght_avg_cost, sdd.fixed_price, 0) end fixed_price,
		--case when (isnull(sdd.fixed_price, 0) = 0) then NULL else ISNULL(sc5.currency_id_to, sdd.fixed_price_currency_id) end fixed_price_currency_id,
		ISNULL(sc5.currency_id_to, sdd.fixed_price_currency_id) fixed_price_currency_id,
		sdd.option_strike_price,
		round(coalesce(' + CASE WHEN @calc_type = 's' THEN  'rec.assigned_vol,' ELSE '' END + 'sdd.actual_volume,sdd.schedule_volume,sdd.total_volume, sdd.deal_volume,0), isnull(r.rounding, 100)) deal_volume,		sdd.deal_volume_frequency, 
		isnull(spcd.display_uom_id, spcd.uom_id) deal_volume_uom_id,
		sdd.block_description,	
		coalesce(sdh.internal_deal_type_value_id, sdht.internal_deal_type_value_id, 1) internal_deal_type_value_id,
		coalesce(sdh.internal_deal_subtype_value_id, sdht.internal_deal_subtype_value_id, 1) internal_deal_subtype_value_id,
		sdd.deal_detail_description, 
		sdd.formula_id, fe.formula, 0 formula_value,
		isnull(sdd.price_adder, 0) price_adder,
		--isnull(sdd.price_adder, 0) +isnull(dpbd.simple_for_adder, 0) price_adder
		--, isnull(sdd.price_multiplier, 1)*isnull(dpbd.simple_for_multiplier, 1) price_multiplier,
		isnull(nullif(sdd.price_multiplier, 0), 1) price_multiplier, 
		sdd.day_count_id, dcd.no_days, CASE WHEN sdh.option_excercise_type = ''s'' THEN ' + CAST(@trading_days AS VARCHAR) + ' ELSE isnull(dcd.days_year, 365) END days_year, 
		COALESCE(' + CASE WHEN @calc_type = 's' THEN  'rec.delivery_date,' ELSE '' END + 'ned.delivery_date,sdd.settlement_date, sdd.contract_expiration_date) settlement_date, ' 
		+ @no_days_left + ' no_days_left, ' + @no_days_accrued + ' no_days_accrued, NULL spot_price,ISNULL(sbm.func_cur_value_id,sdd.fixed_price_currency_id) func_cur_value_id,
		sbm.discount_curve_id, sbm.risk_free_curve_id,
		CASE WHEN ('''+@calc_type+'''= ''s'' AND sdh.pricing=1601 AND DATEDIFF(dd, sdd.term_start, sdd.term_end)  <> DATEDIFF(dd, cast(convert(varchar(8),sdd.term_start,120) +''01'' AS datetime),
				dateadd(mm, 1,cast(convert(varchar(8),sdd.term_start,120) +''01'' AS datetime))-1)) THEN 1602
			 WHEN ('''+@calc_type+'''<> ''s'' AND sdh.pricing = 1601) THEN -1 -- For swaps always use forward price and not lag curve for swaps for example
			 ELSE isnull(sdh.pricing, -1) 
		END pricing,
		sdh.contract_id, 	
		case when (spcd.formula_id is not null) then ''y'' else ''n'' end derived_curve,
		isnull(sdd.fixed_cost, 0) fixed_cost,
		CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN ISNULL(sc1.currency_id_to, spcd.source_currency_id) ELSE spcd.source_currency_to_id END curve_currency_id,
		--case when (spcd.display_uom_id <> spcd.uom_id) then  spcd.uom_id else NULL end curve_uom_id,
		 spcd.uom_id curve_uom_id,'

-- taking portion/ratio in current term by no. of days in period.

set @sqlstmt2=
	case when isnull(@look_term,'d') = 's' then
		  '
		CASE WHEN sdh.is_environmental = ''y'' then
			case when '''+@calc_type+'''=''s'' THEN 1 else 0 end
		else  
			case when case when sdd.physical_financial_flag=''f'' then 
				COALESCE(cexp.exp_date,sdd.settlement_date,sdd.term_end) 
			else sdd.contract_expiration_date end >''' + @as_of_date + '''  then 0 else 1 end
		end '
	else
		   '
		CASE WHEN sdh.is_environmental = ''y'' THEN 
				CASE WHEN '''+@calc_type+'''= ''s'' THEN 1 ELSE 0 END
		ELSE
			case when (sdd.contract_expiration_date > ''' + @as_of_date + ''') then 0 else 1 end 
			END '
	end+' settled,
		isnull(sdd.physical_financial_flag, sdh.physical_financial_flag) leg_physical_financial_flag,
		sbm.fas_deal_type_value_id,case when isnull(sdht.discounting_applies,''n'')=''y'' then 1 else dist.discount_factor end discount_factor, 
		ISNULL(' + CASE WHEN @calc_type = 's' THEN  'rec.assigned_vol' ELSE 'NULL' END + ',sdd.deal_volume) contract_volume, 
		isnull(sdd.multiplier, 1) volume_multiplier,
		isnull(sdd.volume_multiplier2, 1) volume_multiplier2, isnull(sdd.price_adder2, 0) price_adder2, isnull(sdd.pay_opposite, ''n'') pay_opposite,
		case when (isnull(sdd.price_adder, 0)=0) then NULL else ISNULL(sc7.currency_id_to, sdd.adder_currency_id) end price_adder_currency, 
		case when (isnull(sdd.price_adder2, 0)=0) then NULL else ISNULL(sc8.currency_id_to, sdd.price_adder_currency2) end price_adder2_currency, 
		case when ((sdd.formula_id IS NULL AND sdd.formula_curve_id IS NULL)OR sdd.formula_currency_id=0) then NULL else ISNULL(sc9.currency_id_to, sdd.formula_currency_id) end formula_currency, 
		case when (isnull(sdd.fixed_cost, 0)=0) then NULL else ISNULL(sc6.currency_id_to, sdd.fixed_cost_currency_id) end fixed_cost_currency, 
		case when (sdd.contract_expiration_date < ''' + @as_of_date + ''' AND sdh.Pricing = -1) then sdd.contract_expiration_date else 
				''' + @curve_as_of_date + ''' end exp_curve_as_of_date,
		CASE when (sdd.contract_expiration_date >= ''' + @as_of_date + ''') THEN ' + @maturity_date + '
		ELSE sdd.contract_expiration_date END exp_maturity_date,
		CASE WHEN (' + cast(@assessment_curve_type_value_id as varchar) + '= 77) THEN ' + @maturity_date + '
		ELSE ''' + @as_of_date + ''' END  curve_type_maturity_date,
		ISNULL(sdh.internal_desk_id, 17300) volume_type,
		spcd.Granularity curve_granularity,isnull(sdht.hourly_position_breakdown,980) hourly_position_breakdown,
		spcd.monthly_index,
		isnull(sdd.location_id,-1) location_id, isnull(sdh.product_id, 4101) product_id, ' + -- 4100 is fixation and 4101 is original
		CASE WHEN (@calc_type<>'s') THEN ' NULL option_settlement_date ' ELSE ' sdh.option_settlement_date ' END + ','

set @sqlstmt3='	
		spcd.proxy_source_curve_def_id proxy_curve_id, spcd.proxy_curve_id3, spcd.settlement_curve_id,
		sdd.formula_curve_id, sdd.settlement_Currency,
		' + @maturity_date_m + ' monthly_index_maturity,
		' + @maturity_date_p + ' proxy_curve_maturity,
		' + @maturity_date_p3 + ' proxy_curve_maturity3,
		' + @maturity_date_s + ' settlement_curve_maturity, 
		spcd_m.Granularity monthly_index_granularity, spcd_p.Granularity proxy_curve_granularity, spcd_p3.Granularity proxy_curve_granularity3, spcd_s.Granularity settlement_curve_granularity, 	
		case when (spcd_p.formula_id is not null) then ''y'' else ''n'' end proxy_derived_curve,
		case when (spcd_p3.formula_id is not null) then ''y'' else ''n'' end proxy_derived_curve3,
		case when (spcd_m.formula_id is not null) then ''y'' else ''n'' end monthly_index_derived_curve,
		case when (spcd_s.formula_id is not null) then ''y'' else ''n'' end settlement_derived_curve,
		sdd.price_uom_id,
		isnull(sc1.factor,1) curve_factor, isnull(sc2.factor,1) proxy_curve_factor, isnull(sc10.factor,1) proxy_curve_factor3, isnull(sc3.factor,1) monthly_index_factor, 
		isnull(sc4.factor,1) settlement_curve_factor, isnull(sc5.factor,1) fixed_price_cur_factor, 
		isnull(sc6.factor,1) fixed_cost_cur_factor,  COALESCE(sc7.factor,sc9.factor,sc5.factor,1) adder1_cur_factor, 
		isnull(sc8.factor,1) adder2_cur_factor, 
		CASE WHEN sdd.formula_curve_id IS NOT NULL THEN 1 ELSE isnull(sc9.factor, 1) END formula_cur_factor,
		ISNULL(sc2.currency_id_to, spcd_p.source_currency_id) proxy_currency_id, ISNULL(sc10.currency_id_to, spcd_p3.source_currency_id) proxy_currency_id3, 
		ISNULL(sc3.currency_id_to, spcd_m.source_currency_id) monthly_index_currency_id, 
		ISNULL(sc4.currency_id_to, spcd_s.source_currency_id) settlement_curve_currency_id,
		' + @monthly_maturity + ',
		ISNULL(NULLIF(sdd.formula_currency_id, 0), sbm.func_cur_value_id) Original_formula_currency,
		sdd.capacity,'



set @sqlstmt4='	
		CASE WHEN(sdh.product_id=4100 AND sdh.close_reference_id IS NOT NULL) THEN sdh.close_reference_id ELSE sdh.source_deal_header_id END meter_deal_id,
		ISNULL(spcd.curve_tou, -1) curve_tou,
		ISNULL(r.rounding, 100) volume_rounding,
		sdd.fixed_price_currency_id original_fixed_price_currency_id,
		NULLIF(sdd.meter_id, 0) meter_id,
		CASE WHEN ISNULL(sdh.product_id, 4101) = 4100 AND ISNULL(sdh.internal_desk_id,17300)=17301 AND  '''+@calc_type+'''=''s'' THEN ''y'' ELSE ''n'' END
		,case when case  isnull(sdht.save_mtm_at_calculation_granularity,''-1'') when  20150 then ''m''  when 20151 then ''s'' when 20152 then  '''+@calc_type+''' else '''' end='''+@calc_type+''' then ''y'' else ''n'' end save_mtm_at_calculation_granularity
		,COALESCE(sdh.timezone_id, sml.time_zone, spcd.time_zone) timezone_id,sdh.header_buy_sell_flag header_buy_sell_flag 
		,case when isnull(sdht.ignore_bom,''n'')=''n'' then dateadd(day,1,'''+@as_of_date+''')  
		else '''+ convert(varchar(10),dateadd(month,1,left(@as_of_date,8)+'01'),120) +''' end filter_term_start
		,case when  (sdht.[month] is null and sdht.[year] is null) then ''9999-01-01''  
			else  dateadd(month,isnull(sdht.[month],0),dateadd(year,isnull(sdht.[year],0),case when sdht.[year] is null then case when sdht.[month] is null then '''+@as_of_date+''' else '''+convert(varchar(10),dateadd(day,-1,dateadd(month,1,left(@as_of_date,8)+'01')),120)+''' end else '''+convert(varchar(10),dateadd(day,-1,dateadd(year,1,left(@as_of_date,5)+'01-01')),120)+''' end )) end filter_term_end
	,sdht.actual_granularity,isnull(sdht.actualization_flag,''d'') actualization_flag,sdd.actual_volume,sdd.schedule_volume 		
	,sdht.options_calc_method,sdht.attribute_type,sdht.bid_n_ask_price,sdh.broker_id
	-- For excluding fx conversion for FX deal type.
	,case when sdh.source_deal_type_id=1228 then ''-999999'' else COALESCE(sdh.fx_conversion_market, sbm.fx_conversion_market,'''') end fx_conversion_market
	,sdd.fx_conversion_rate invoice_fx_rate
	,sbm.fas_sub_id,isnull(sdh.fx_rounding,10),isnull(sdh.fx_option,104500) fx_option, cg.holiday_calendar_id,cg.settlement_days,cg.invoice_due_date, null invoice_date
	,isnull(sdh.term_frequency,''m'') term_frequency,''n'' calc_mtm_at_tou_level
	,COALESCE(sdd.detail_commodity_id,sdh.commodity_id,-1),null match_group_shipment_id, null ticket_detail_id, pd.state_value_id, pd.tier_value_id, ' 
	+ CASE WHEN @calc_type = 's' THEN 'rec.match_info_id' ELSE 'NULL' END
	+', case when sdht.template_id in ('+@storage_inventory_template_id +') then 0 else 1 end exception_handle
	,case when sdht.template_id in ('+ @storage_inventory_template_id+') then 0 else 1 end  mtm_sett_calc
	,isnull(case when calc_physical_financial_flag.calc_physical_financial_flag =''f'' and '''+ @calc_type+''' = ''s'' then  isnull(cexp.exp_date_market,sdd.settlement_date) else null end,'''+@curve_as_of_date+''')  curve_as_of_date
	,calc_physical_financial_flag.calc_physical_financial_flag  

'

SET @from_clause1 = ISNULL(@from_clause1,'')
EXEC spa_print  @sqlstmt 
EXEC spa_print  @sqlstmt2 
EXEC spa_print  @sqlstmt3 
EXEC spa_print  @sqlstmt4
EXEC spa_print  @from_clause
EXEC spa_print  @from_clause1
EXEC spa_print  @where_clause

exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt + @sqlstmt2 +@sqlstmt3+@sqlstmt4+ @from_clause+@from_clause1 + @where_clause )

-- taking forward portion for mtm and settled portion for settlement 
update td  set fixed_cost=td.fixed_cost *
	case when @calc_type='m' then datediff(day,@as_of_date,td.term_end) else datediff(day,td.term_start,@as_of_date)+1 end 
	* (cast(1.00 as float) /(datediff(day,td.term_start,td.term_end)+1))
from #temp_deals td inner join [source_deal_type] sdt on sdt.[source_deal_type_id]=td.[source_deal_type_id] and [source_deal_type_name]='Cash'
where @as_of_date between td.term_start and td.term_end

DECLARE @baseload_block_definition INT
SELECT @baseload_block_definition= value_id FROM static_data_value WHERE type_id=10018 AND code ='Base Load'

/*Updated total fixed price to unit fixed price to calculate MTM for Capacity Based Deals*/
--UPDATE td SET fixed_price = (td.fixed_price)/CASE sdh.pricing WHEN 1618 THEN mul.volume_mult WHEN 1619 THEN DATEDIFF(DAY, td.term_start, td.term_end)+1 ELSE 1 END
UPDATE td SET fixed_price = (CASE sdh.pricing WHEN 1618 THEN td.fixed_price/nullif(mul.volume_mult,0) WHEN 1619 THEN (td.fixed_price*isnull(mul.no_day,1))/nullif(mul.volume_mult,0) ELSE 1 END)
FROM #temp_deals td
INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	--left JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = td.source_deal_detail_id
	left join source_price_curve_def spcd on spcd.source_curve_def_id=td.curve_id
LEFT JOIN dbo.vwDealTimezoneContract tz ON tz.source_deal_header_id = sdh.source_deal_header_id
	AND tz.curve_id = isnull(td.curve_id, -1)  
	AND tz.location_id = isnull(td.location_id, -1)
OUTER APPLY(
		SELECT NULLIF(SUM(volume_mult), 0) volume_mult ,NULLIF(SUM(case when isnull(volume_mult,0)=0 then 0 else 1 end), 0) no_day
		FROM hour_block_term WHERE block_define_id =coalesce(spcd.block_define_id,sdh.block_define_id, @baseload_block_definition)
				AND dst_group_value_id = ISNULL(tz.dst_group_value_id, @default_dst_group) 
				AND term_date BETWEEN td.term_start AND td.term_end 
		--	and ((@calc_type='m' AND term_date > DATEADD(month, -1, EOMONTH(@as_of_date))) OR (@calc_type='s' AND term_date <= EOMONTH(@as_of_date)))
	) mul
WHERE sdh.pricing in(1618,1619)

--WHERE sdh.pricing = 1618

UPDATE td SET pricing=-1 FROM #temp_deals td where td.pricing in (1618,1619)

update #temp_deals 
	set invoice_date=
dbo.FNAInvoiceDueDate(settlement_date,invoice_due_date,holiday_calendar_id,settlement_days)
where fx_option=104501 and @calc_type='s'

update #temp_deals 
	set calc_mtm_at_tou_level=case when tou.tou_mtm=1 then 'y' else 'n' end
from #temp_deals a 
cross apply
(
	select tou_mtm from source_DEAL_HEADER sdh 
		inner join deal_type_pricing_maping d on d.template_id=sdh.template_id
			and d.commodity_id=sdh.commodity_id
			and sdh.source_deal_type_id=d.source_deal_type_id
			and isnull(sdh.Pricing_type,-1)=coalesce(d.Pricing_type,sdh.Pricing_type,-1)
			and sdh.source_DEAL_HEADER_id=a.source_DEAL_HEADER_id
) tou

--########## Create a table for broker fees calculations
IF OBJECT_ID('tempdb..#temp_deals_broker') is not null DROP TABLE #temp_deals_broker
create table #temp_deals_broker(
	[temp_deal_id] [int] identity(1,1),
	[source_deal_header_id] [int]  NULL ,
	[source_deal_detail_id] [int]  NULL ,
	[counterparty_id] [int] NULL ,
	[contract_id] int NULL,
	[broker_id] INT,
	[term_start] [datetime] NULL ,
	[term_end] [datetime] NULL ,
	[Leg] [int] NULL ,
	[buy_sell_flag] [char] (1) COLLATE DATABASE_DEFAULT NULL ,
	[deal_volume] [float]  NULL ,
	[total_volume] [float] NULL ,
	[internal_deal_type_value_id] INT  NULL ,
	[internal_deal_subtype_value_id] INT  NULL,
	curve_id INT,
	fas_sub_id INT,
	source_deal_type_id INT,
	location_id INT,
	func_cur_id INT
)


SET @sqlstmt1 = '
INSERT into #temp_deals_broker(source_deal_header_id,source_deal_detail_id,counterparty_id,contract_id,broker_id,term_start,term_end,Leg,buy_sell_flag,deal_volume,total_volume,internal_deal_type_value_id,internal_deal_subtype_value_id,curve_Id,fas_sub_id,source_deal_type_id,location_id,func_cur_id)
SELECT	
	sdh.source_deal_header_id, 
	sdd.source_deal_detail_id, 
	sdh.counterparty_id,
	sdh.contract_id,
	sdh.broker_id,
	sdh.deal_date term_start, 
	sdh.deal_date term_end,
	sdd.leg,
	sdh.header_buy_sell_flag,
	sdd.deal_volume,
	sdd.total_volume,
	sdh.internal_deal_type_value_id,
	sdh.internal_deal_subtype_value_id,
	sdd.curve_Id,
	sbm.fas_sub_id,
	sdh.source_deal_type_id,
	sdd.location_id,
	sbm.func_cur_value_id
FROM source_deal_header sdh  			
	INNER JOIN #books sbm ON sdh.source_system_book_id1 = sbm.source_system_book_id1 AND 
		sdh.source_system_book_id2 = sbm.source_system_book_id2 AND sdh.source_system_book_id3 = sbm.source_system_book_id3 AND 
		sdh.source_system_book_id4 = sbm.source_system_book_id4 ' 
	+ CASE WHEN (ISNULL(@source_deal_header_id, '') <> '') OR NULLIF(@deal_list_table,'') IS NOT NULL THEN 
' INNER JOIN #source_deal_header_id tmp_id on tmp_id.source_deal_header_id=sdh.source_deal_header_id ' ELSE '' END +
' CROSS APPLY(
		SELECT MIN(source_deal_detail_id) source_deal_detail_id,MAX(curve_id) curve_id,MAX(location_id) location_id,MIN(leg) leg, SUM(deal_volume) deal_volume,SUM(total_volume) total_volume  
		FROM source_deal_detail WHERE source_deal_header_id = sdh.source_deal_header_id
	) sdd 
WHERE 1=1  AND sdd.source_deal_detail_id IS NOT NULL '
	+CASE WHEN @cpt_type = 'b' AND @counterparty_id IS NOT NULL THEN ' AND sdh.broker_id IN('+@counterparty_id+')' ELSE '' END +
	' AND sdh.deal_date BETWEEN 	''' + @term_start + ''' and ''' + @term_end + ''''
	
EXEC spa_print @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)

	
If @calc_type = 'w' --hypothetical deals
begin
	if OBJECT_ID(@hypo_deal_header) is not null
	begin
		set @from_clause=REPLACE(@from_clause,'[source_deal_header]',@hypo_deal_header) 
		set @from_clause=REPLACE(@from_clause,'[source_deal_detail]',@hypo_deal_detail) 
		
		EXEC spa_print  @sqlstmt 
		EXEC spa_print  @sqlstmt2 
		EXEC spa_print  @sqlstmt3
		EXEC spa_print  @sqlstmt4
		EXEC spa_print  @from_clause
		EXEC spa_print  @from_clause1
		EXEC spa_print  @where_clause

		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt + @sqlstmt2 +@sqlstmt3+@sqlstmt4+@from_clause+@from_clause1+@where_clause)
		
	end		
END


--Linear Model Option Leg 1

delete #temp_deals where internal_deal_subtype_value_id=155 and leg>=2 

CREATE INDEX [IX_PT_temp_deals_source_deal_header_id_term_start1] ON [#temp_deals] ([source_deal_header_id], [term_start]) INCLUDE ([deal_volume])
CREATE INDEX [IX_PT_temp_deals_term_start_deal_volume1] ON [#temp_deals] ([term_start],[deal_volume]) INCLUDE ([source_deal_header_id])

--################ For Storage, if Actual deal exists then delete the nomination deals for that day
CREATE INDEX [IX_PT_temp_deals_option_flag] ON [#temp_deals] ([option_flag])
CREATE INDEX [IX_PT_temp_deals_Leg] ON [#temp_deals] ([Leg]) INCLUDE ([source_deal_header_id], [source_deal_detail_id], [source_system_id], [entire_term_start], [entire_term_end], [term_start], [term_end], [buy_sell_flag], [curve_id], [deal_volume], [func_cur_id], [contract_id], [contract_volume], [exp_curve_as_of_date], [monthly_maturity], [capacity], [curve_tou], [original_fixed_price_currency_id])
CREATE INDEX [IX_PT_temp_deals_save_mtm_at_calculation_granularity] ON [#temp_deals] ([save_mtm_at_calculation_granularity]) INCLUDE ([source_deal_detail_id])
CREATE INDEX [IX_PT_temp_deals_hourly_position_breakdown] ON [#temp_deals] ([hourly_position_breakdown]) INCLUDE ([source_deal_header_id], [source_deal_detail_id], [term_start], [term_end], [Leg], [curve_id], [formula_id], [price_adder], [price_multiplier], [func_cur_id], [pricing], [contract_id], [volume_multiplier], [volume_multiplier2], [pay_opposite], [curve_granularity], [monthly_index], [location_id], [proxy_curve_id], [proxy_curve_id3], [settlement_curve_id], [formula_curve_id], [monthly_index_granularity], [proxy_curve_granularity], [proxy_curve_granularity3], [settlement_curve_granularity], [meter_deal_id], [volume_rounding], [variable_swap], [save_mtm_at_calculation_granularity])
CREATE INDEX [IX_PT_temp_deals_internal_deal_type_value_id] ON [#temp_deals] ([internal_deal_type_value_id])
CREATE INDEX [IX_PT_temp_deals_internal_deal_type_value_id_include] ON [#temp_deals] ([internal_deal_type_value_id]) INCLUDE ([source_deal_header_id], [term_start])
CREATE INDEX [IX_PT_temp_deals_formula_curve_id_formula_id_pricing] ON [#temp_deals] ([formula_curve_id],[formula_id], [pricing]) INCLUDE ([source_deal_detail_id], [term_start], [deal_volume], [contract_id])
CREATE INDEX [IX_PT_temp_deals_deal_volume] ON [#temp_deals] ([deal_volume]) INCLUDE ([source_deal_header_id], [term_start])

DELETE td FROM #temp_deals td
	INNER JOIN source_deal_header sdh ON sdh.close_reference_id=td.source_deal_header_id
		AND td.internal_deal_type_value_id IN(20,21)
	INNER JOIN #temp_deals td1 ON td1.source_deal_header_id=sdh.source_deal_header_id
		AND td.term_start=td1.term_start
		AND td1.deal_volume<>0	

---################

--select * from #tmp_deals_settled


---################

--################
-- Changed by : ashrestha@pioneersolutonsglobal.com
-- Date: 2019-09-19
-- Descriptions: If the deal or ticket is already invoiced, settlement should not be processed. Check for invoiceed data in stmt_checkout table

-- Changed by : bmaharjan@pioneersolutonsglobal.com
-- Date: 2019-10-11
-- Descriptions: Deleted the deals which has been invoiced only in case of settlement calculation not for adjustment.
-- Descriptions: Deleted the deals other than invoiced one for adjustment case to improve performance. Only invoiced deal are needed for adjustment.

INSERT INTO #calc_status
Select @process_id,'Warning','Settlement Calc','Run Settlement','Warning',
			'Invoice already prepared for deal(s) '+CAST(td.[source_deal_header_id] AS VARCHAR),'Please check your input.'
FROM
	#temp_deals td
	LEFT JOIN ticket_detail ttd ON td.ticket_detail_id = ttd.ticket_detail_id
	INNER JOIN stmt_checkout sc ON td.source_deal_detail_id = sc.source_deal_detail_id 
		AND ISNULL(ttd.ticket_header_id,-1) = ISNULL(sc.ticket_id,-1)
		AND ISNULL(td.match_info_id,-1) = ISNULL(sc.match_info_id,-1)
	INNER JOIN stmt_invoice_detail sid ON sid.stmt_invoice_detail_id = sc.stmt_invoice_detail_id
	WHERE sc.accrual_or_final = 'f' AND @calc_settlement_adjustment = 0

DELETE td 
FROM 
	 #temp_deals td
	LEFT JOIN ticket_detail ttd ON td.ticket_detail_id = ttd.ticket_detail_id
	INNER JOIN stmt_checkout sc ON td.source_deal_detail_id = sc.source_deal_detail_id 
		AND ISNULL(ttd.ticket_header_id,-1) = ISNULL(sc.ticket_id,-1)
		AND ISNULL(td.match_info_id,-1) = ISNULL(sc.match_info_id,-1)
	INNER JOIN stmt_invoice_detail sid ON sid.stmt_invoice_detail_id = sc.stmt_invoice_detail_id
	WHERE sc.accrual_or_final = 'f' AND @calc_settlement_adjustment = 0

DELETE td 
FROM 
	 #temp_deals td
	LEFT JOIN ticket_detail ttd ON td.ticket_detail_id = ttd.ticket_detail_id
	INNER JOIN stmt_checkout sc ON td.source_deal_detail_id = sc.source_deal_detail_id 
		AND ISNULL(ttd.ticket_header_id,-1) = ISNULL(sc.ticket_id,-1) 
		AND ISNULL(td.match_info_id,-1) = ISNULL(sc.match_info_id,-1)
		AND sc.accrual_or_final = 'f'
	INNER JOIN stmt_invoice_detail sid ON sid.stmt_invoice_detail_id = sc.stmt_invoice_detail_id
	WHERE sid.stmt_invoice_detail_id IS NULL AND @calc_settlement_adjustment = 1

--###########################


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	print  '**************** End of Collecting Deals *****************************'	
END

If @@ERROR <> 0
BEGIN
	--**ERROR**
	INSERT INTO #calc_status
		Select @process_id,'Error','MTM Calc','Run MTM','Application Error',
		'Failed to Insert Deals Data','Please contact technical support'
	GOTO FinalStep
	Return
End

If (select count(*) from #temp_deals) = 0 AND (select count(*) from #temp_deals_broker) = 0
BEGIN
	--**ERROR**
	If @calc_type <> 's'
		INSERT INTO #calc_status
			Select @process_id,'Warning','MTM Calc','Run MTM','Warning',
			'No deals found to process for MTM calculation. Total deals processed count (0).','Please check your input.'
	Else
		INSERT INTO #calc_status
			Select @process_id,'Warning',CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlement Adjustments' ELSE 'Deal Settlement Calc' END,'Deal Settlement Calc','Warning',
			'No deals found to process for '+CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlement Adjustment' ELSE 'Deal Settlement' END+' calculation. Total deals processed count (0).','Please check your input.'
	
	GOTO FinalStep
	Return
End


if object_id('tempdb..#udf_header') is not null drop table #udf_header
if object_id('tempdb..#udf_detail') is not null drop table #udf_detail
if object_id('tempdb..#var_fee_amount') is not null drop table #var_fee_amount
if object_id('tempdb..#var_fee_amount_001') is not null drop table #var_fee_amount_001

SELECT * INTO #udft from user_defined_fields_template 
--SELECT distinct field_id  from user_defined_fields_template where udf_template_id=133

--SELECT *  from user_defined_deal_fields_template where udf_template_id=133


--select * from user_defined_deal_fields where source_deal_header_id=98447


SELECT uddft.*,udft.udf_category
INTO #uddft 
FROM (
		select uddf.udf_template_id from
		(
			SELECT source_deal_header_id FROM #temp_deals
			UNION  
			SELECT source_deal_header_id FROM #temp_deals_broker 
		) sdh 
		inner join user_defined_deal_fields uddf on uddf.source_deal_header_id=sdh.source_deal_header_id
			and try_cast(ISNULL(NULLIF(uddf.udf_value,''),0) as numeric(20,4)) is not null
		UNION 
		select udddf.udf_template_id from
		(
			SELECT source_deal_detail_id FROM #temp_deals td 
			UNION  
			SELECT source_deal_detail_id FROM #temp_deals_broker 
		) sdd 
		inner join user_defined_deal_detail_fields udddf on udddf.source_deal_detail_id=sdd.source_deal_detail_id
			and try_cast(ISNULL(NULLIF(udddf.udf_value,''),0) as numeric(20,4)) is not null
) udf 
	inner join user_defined_deal_fields_template uddft on uddft.udf_template_id=udf.udf_template_id
	inner join #udft udft on udft.field_id=uddft.field_id
	WHERE uddft.internal_field_type NOT IN (18742,18743)




select td.source_deal_header_id
	,try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4)) udf_value
	,uddf.udf_template_id
	,uddft.internal_field_type
	,uddft.field_name 
	,uddft.field_label
	,uddft.udf_tabgroup tab_group_name
	,uddft.udf_group udf_group_name
	,uddft.sequence
	,uddft.template_id 
	,uddft.field_id 
	,uddft.currency_field_id
into #udf_header -- select distinct * from #udf_header
from (select  source_deal_header_id FROM #temp_deals union select  source_deal_header_id from #temp_deals_broker ) td 
	left JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	left JOIN #uddft uddft ON uddft.template_id=sdh.template_id	 and uddft.udf_type='h'
	LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id 
			AND uddf.udf_template_id = uddft.udf_template_id
	--left JOIN user_defined_fields_template udft ON	udft.field_id = uddft.field_id  --udft.udf_template_id = uddft.udf_user_field_id 
	--	and udft.udf_type='h'
where nullif(uddf.udf_value,'') is not null

select td.source_deal_header_id,td.source_deal_detail_id
	,try_cast(NULLIF(udddf.udf_value,'') as numeric(20,4)) udf_value
	,udddf.udf_template_id
	,uddft.internal_field_type
	,uddft.field_name 
	,uddft.field_label
	,uddft.udf_tabgroup tab_group_name,uddft.udf_group udf_group_name
	,uddft.sequence
	,uddft.template_id 
	,uddft.field_id ,uddft.currency_field_id
into #udf_detail
FROM 
	(select  source_deal_header_id,source_deal_detail_id,leg FROM #temp_deals union select  source_deal_header_id,source_deal_detail_id,leg from #temp_deals_broker ) td 
	left JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	left JOIN #uddft uddft ON uddft.template_id=sdh.template_id	
		and td.leg= ISNULL(uddft.leg,td.leg) and uddft.udf_type='d'	
	LEFT JOIN user_defined_deal_detail_fields udddf ON udddf.udf_template_id = uddft.udf_template_id
		AND udddf.source_deal_detail_id = td.source_deal_detail_id
	--left JOIN user_defined_fields_template udft ON	udft.field_id = uddft.field_id  --udft.udf_template_id = uddft.udf_user_field_id 
	--	and td.leg= ISNULL(udft.leg,td.leg)	 and udft.udf_type='d'	
where nullif(udddf.udf_value,'') is not null


create index ix_pt_1 on #uddft(template_id) include(leg,field_id,udf_template_id)
create index ix_pt_3 on #uddft(internal_field_type)
create index ix_pt_4 on #udft(leg,field_id,udf_template_id)


-- Taking deal variable fess for checking in money for linear option model deals

select  sdh.source_deal_header_id, variable_charge.rate fee_amt
into #var_fee_amount_001 --  select * from #var_fee_amount_001
FROM (
			SELECT source_deal_header_id,max(fx_conversion_market) fx_conversion_market
			,max(fixed_price_currency_id) fixed_price_currency_id,max(source_system_id) source_system_id
			,max(deal_volume_uom_id) deal_volume_uom_id, min(term_start) term_start, max(term_end) term_end,max(contract_id) contract_id 
			FROM #temp_deals
			 where internal_deal_type_value_id=103 and internal_deal_subtype_value_id=102
			group by source_deal_header_id
			UNION  
			SELECT source_deal_header_id,null fx_conversion_market,null fixed_price_currency_id,null source_system_id 
				,null deal_volume_uom_id, min(term_start) term_start, max(term_end) term_end ,null contract_id
			FROM #temp_deals_broker 
			group by source_deal_header_id
	) td
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	outer apply (
		select  try_cast(NULLIF(uddf.udf_value,'') as int) path_id from #uddft ud 
			inner JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id AND ud.udf_template_id = uddf.udf_template_id
			AND ud.field_id = 293432
		where ud.template_id = sdh.template_id
	) udf_dp
	outer apply (
		select  try_cast(NULLIF(uddf.udf_value,'') as int) schedule_id from #uddft ud 
			inner JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id AND ud.udf_template_id = uddf.udf_template_id
			AND ud.field_id = -5678
		where ud.template_id = sdh.template_id
	) rate_schedule
	LEFT JOIN delivery_path dp ON dp.path_id =udf_dp.path_id
	LEFT JOIN contract_group cg ON cg.contract_id = td.contract_id
	LEFT JOIN counterparty_contract_rate_schedule ccrs ON ccrs.counterparty_id = dp.counterparty 
			AND ccrs.contract_id = cg.contract_id AND dp.path_id = ccrs.path_id
	outer apply
	(
		select --sum(vc.rate*isnull(fx_v_deal.price_fx_conv_factor, 1)*ISNULL(conv_v.conversion_factor,1)) rate
		sum(vc.rate*ISNULL(conv_v.conversion_factor,1)) rate
		from variable_charge vc
			LEFT JOIN rec_volume_unit_conversion conv_v ON vc.uom_id=conv_v.FROM_source_uom_id AND conv_v.to_source_uom_id=td.deal_volume_uom_id  
				AND conv_v.state_value_id is null AND conv_v.assignment_type_value_id is null AND conv_v.curve_id is null  
			--outer apply
			--( select avg(price_fx_conv_factor) price_fx_conv_factor from #fx_curves  
			--	where fx_currency_id = vc.currency_id AND 
			--		func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id 
			--		AND  maturity_date between td.term_start and td.term_end and market_value_desc=td.fx_conversion_market
			--		and as_of_date between case when  @calc_type='s' then @term_start else @curve_as_of_date end
			--		and case when  @calc_type='s' then @term_end else @curve_as_of_date end
			--) fx_v_deal	
		where vc.rate_schedule_id = COALESCE(rate_schedule.schedule_id,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
			and td.term_start between isnull(vc.begin_date,'1900-01-01') and isnull(vc.end_date,'9999-01-01')
	) variable_charge
union all
select td.source_deal_header_id
	,sum(try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4))) fee_amt
from (
		select  source_deal_header_id FROM #temp_deals 
				 where internal_deal_type_value_id=103 and internal_deal_subtype_value_id=102
		union 
		select  source_deal_header_id from #temp_deals_broker 
	) td 
	left JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	left JOIN #uddft uddft ON uddft.template_id=sdh.template_id	 and uddft.udf_type='h'	and uddft.udf_category=101901
	LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id 
			AND uddf.udf_template_id = uddft.udf_template_id
where nullif(uddf.udf_value,'') is not null
group by td.source_deal_header_id
union all
select td.source_deal_header_id
	,sum(try_cast(NULLIF(udddf.udf_value,'') as numeric(20,4))) fee_amt
FROM 
	(
		select  source_deal_header_id,source_deal_detail_id,leg FROM #temp_deals 
			where internal_deal_type_value_id=103 and internal_deal_subtype_value_id=102
		union 
		select  source_deal_header_id,source_deal_detail_id,leg from #temp_deals_broker 
	) td 
	inner JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	inner JOIN #uddft uddft ON uddft.template_id=sdh.template_id	
		and td.leg= ISNULL(uddft.leg,td.leg) and uddft.udf_type='d' and uddft.udf_category=101901
	LEFT JOIN user_defined_deal_detail_fields udddf ON udddf.udf_template_id = uddft.udf_template_id
		AND udddf.source_deal_detail_id = td.source_deal_detail_id
	--left JOIN user_defined_fields_template udft ON	udft.field_id = uddft.field_id  --udft.udf_template_id = uddft.udf_user_field_id 
	--	and td.leg= ISNULL(udft.leg,td.leg)	 and udft.udf_type='d'	
where nullif(udddf.udf_value,'') is not null
group by td.source_deal_header_id


select source_deal_header_id,sum(fee_amt) fee_amt
	into #var_fee_amount -- select * from #var_fee_amount
from #var_fee_amount_001
group by source_deal_header_id


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--Update deal price to spot price to  get spot-forward difference

SET @sqlstmt = '
	UPDATE #temp_deals
	SET spot_price = spot_deal_price
	FROM  #temp_deals td 
	INNER JOIN 
	( 
	select 	fixed_price_null.source_deal_header_id, fixed_price_null.deal_date, 
		fixed_price_null.term_start, fixed_price_null.term_end, 
		fixed_price_null.leg, fixed_price_null.curve_id, 
		(isnull(fixed_price_null.spot_deal_price, 0) -  
			isnull(fixed_price_not_null.spot_deal_price, 0)) spot_deal_price
	from
	(
	select 	td.source_deal_header_id, td.deal_date, td.term_start, td.term_end, 
		td.leg, td.curve_id, td.fixed_price,
		case when td.bid_n_ask_price=''y'' then case when td.buy_sale_flag=''b'' then spc.bid_value else spc.ask_value end else spc.curve_value end curve_value, 
		isnull(td.fixed_price, 0) + isnull(case when td.bid_n_ask_price=''y'' then case when td.buy_sale_flag=''b'' then spc.bid_value else spc.ask_value end else spc.curve_value end, 0) as  spot_deal_price
	from #temp_deals td 
		inner join ' + @source_price_curve + ' spc on td.deal_date = spc.as_of_date and
		spc.assessment_curve_type_value_id = ' + cast(@assessment_curve_type_value_id as varchar) + '
		and spc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and
		spc.maturity_date = td.deal_date and 
		spc.source_curve_def_id = td.curve_id
	where fixed_price is null
	) fixed_price_null
	LEFT OUTER JOIN
	(
		select 	td.source_deal_header_id, td.deal_date, td.term_start, td.term_end, 
		td.leg, td.curve_id, td.fixed_price, case when td.bid_n_ask_price=''y'' then case when td.buy_sale_flag=''b'' then spc.bid_value else spc.ask_value end else spc.curve_value end curve_value,
		isnull(case when td.bid_n_ask_price=''y'' then case when td.buy_sale_flag=''b'' then spc.bid_value else spc.ask_value end else spc.curve_value end, 0) as spot_deal_price	 from 
		#temp_deals td inner join ' + @source_price_curve + ' spc on td.deal_date = spc.as_of_date and
		spc.assessment_curve_type_value_id = ' + cast(@assessment_curve_type_value_id as varchar) + '
		and spc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and
		spc.maturity_date = td.deal_date and 
		spc.source_curve_def_id = td.curve_id
		where fixed_price is not null
	) fixed_price_not_null ON
	fixed_price_null.source_deal_header_id  = fixed_price_not_null.source_deal_header_id AND
	fixed_price_null.term_start  = fixed_price_not_null.term_start AND
	fixed_price_null.term_end  = fixed_price_not_null.term_end 
	) new_deal_price
		ON 	td.source_deal_header_id  = new_deal_price.source_deal_header_id AND
		td.term_start  = new_deal_price.term_start AND
		td.term_end  = new_deal_price.term_end 
	WHERE td.fixed_price IS NOT NULL AND td.internal_deal_type_value_id = 8
'

declare @count_internal_deal_type_8 INT
If Exists (select top 1 1 from #temp_deals where internal_deal_type_value_id = 8)
	SET @count_internal_deal_type_8  = 1
else 
	SET @count_internal_deal_type_8 = 0

IF @count_internal_deal_type_8 = 1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Updating spot price in deals to get spot-forward difference *****************************'	
END
	
	
-------------------------End of Step 3----------------------------------------

------------------Step 4  select  forward price curves in to a table #temp_curves ------------------------------
-----------------------------------------------------------------------------------------------------------------


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end
	
DECLARE  @termstart DATETIME, @formula VARCHAR(8000), @volume FLOAT, @contract_expiration_date DATETIME, @formula_stmt VARCHAR(8000)
		
--CREATE TABLE #tx(term_start DATETIME, formula VARCHAR(8000) COLLATE DATABASE_DEFAULT, volume FLOAT, contract_expiration_date DATETIME)
CREATE TABLE #tx(
	[ID] INT IDENTITY, as_of_date DATETIME, term_start DATETIME, formula_id INT, granularity INT, contract_id INT, source_deal_detail_id INT, volume FLOAT,deal_price_type_id int,price_type_id int,rounding int, pricing_curve_currency int
)

CREATE TABLE #formula_value
	(term_start datetime, formula_id INT, contract_expiration_date datetime, formula_value float,contract_id INT, source_deal_detail_id INT)

CREATE TABLE #formula_value_at_low
	(term_start datetime, formula_id INT, contract_expiration_date datetime, formula_value float,contract_id INT, source_deal_detail_id INT,hr int,period int,is_dst int)
DECLARE @sql VARCHAR(8000)

DECLARE @formula_table VARCHAR(250)
DECLARE @calc_result_table VARCHAR(250)
DECLARE @calc_result_table_breakdown VARCHAR(250)
declare @user_login_id varchar(100)
DECLARE @formula_table0 VARCHAR(250)
DECLARE @calc_result_table0 VARCHAR(250)
DECLARE @formula_derive VARCHAR(250)
DECLARE @calc_result_derive VARCHAR(250)

set @user_login_id = dbo.FNADBUser()

SET @process_id = REPLACE(newid(),'-','_')
SET @formula_table=dbo.FNAProcessTableName('curve_formula_table', @user_login_id, @process_id)
SET @formula_table0=dbo.FNAProcessTableName('curve_formula_table0', @user_login_id, @process_id)

--SET @calc_result_table=dbo.FNAProcessTableName('calc_result_table', @user_login_id, @process_id)
--SET @calc_result_table_breakdown=dbo.FNAProcessTableName('calc_result_table_breakdown', @user_login_id, @process_id)

set @formula_derive=dbo.FNAProcessTableName('curve_formula_derive', @user_login_id, @process_id)
set @calc_result_derive=dbo.FNAProcessTableName('calc_result_derive', @user_login_id, @process_id)


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	--print @pr_name+' Running..............'
end

CREATE TABLE #temp_curves(
	[source_curve_def_id] [int] NOT NULL,
	[as_of_date] [datetime] NOT NULL,
	[Assessment_curve_type_value_id] [int] NOT NULL,
	[curve_source_value_id] [int] NOT NULL,
	[maturity_date] [datetime] NOT NULL,
	is_dst bit,
	[curve_value] [float] NOT NULL,
	[pnl_as_of_date] [datetime] NOT NULL,
	curve_granularity INT,deal_curve_id int,
	[bid_value] [float] ,
	[ask_value] [float],
	location_id INT,
	commodity_id INT,block_define_id int -- use in RTC : when copying proxy curve value for the missing curve value of main curve
) 
CREATE TABLE #temp_curves_settlement(
	[source_curve_def_id] [int] NOT NULL,
	[as_of_date] [datetime] NOT NULL,
	[Assessment_curve_type_value_id] [int] NOT NULL,
	[curve_source_value_id] [int] NOT NULL,
	[maturity_date] [datetime] NOT NULL,
	is_dst bit,
	[curve_value] [float] NOT NULL,
	[pnl_as_of_date] [datetime] NOT NULL,
	curve_granularity INT,deal_curve_id int,
	[bid_value] [float] ,
	[ask_value] [float],
	location_id INT,
	commodity_id INT,
	exp_calendar_id INT
) 


----------------------------------GET FX AND UOM CONVERSION FACTORS----------------------

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	--print @pr_name+' Running..............'
end

--Get conversion factor between curve uom and volume uom of the deal leg 
CREATE TABLE #uom_ids (curve_uom_id INT, deal_volume_uom_id INT) 

create index indx_curve_uom_id_temp_deals on #temp_deals (curve_uom_id)
create index indx_deal_volume_uom_id_deals on #temp_deals (deal_volume_uom_id)
create index indx_source_deal_header_id_temp_dealsqqq on #temp_deals (source_deal_header_id,location_id,Leg,term_start,term_end )

INSERT INTO #uom_ids
SELECT curve_uom_id, deal_volume_uom_id 
FROM #temp_deals td
WHERE td.curve_uom_id <> td.deal_volume_uom_id
GROUP BY curve_uom_id, deal_volume_uom_id 
union
SELECT  price_uom_id, deal_volume_uom_id 
FROM #temp_deals td
WHERE isnull(td.price_uom_id, -1) <> isnull(td.deal_volume_uom_id, -1) AND 
		ISNULL(td.curve_uom_id,-1) <> isnull(td.price_uom_id, -1)
GROUP BY price_uom_id, deal_volume_uom_id 
union
select  dpd.pricing_uom,td.deal_volume_uom_id
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id
	inner join deal_price_deemed dpd on dpd.deal_price_type_id=dpt.deal_price_type_id
		and dpt.price_type_id in (103600) -- fixed_price
	where td.deal_volume_uom_id<>dpd.pricing_uom	
union
select uom.uom_id,td.deal_volume_uom_id
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id
	outer apply
	(	
	select spcd.uom_id 
	from deal_price_deemed  d
		inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
	where deal_price_type_id=dpt.deal_price_type_id
			and dpt.price_type_id in (103601) -- Indexed
			and spcd.uom_id is not null
	union all
	select spcd.uom_id from deal_price_custom_event d
	inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103605 -- Custom Event
		and spcd.uom_id is not null
	union all
	select spcd.uom_id 
	from  deal_price_std_event d
		inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
	where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103603 --Standard Event	
		and spcd.uom_id is not null
	) uom
	where uom.uom_id<>td.deal_volume_uom_id

CREATE TABLE #curve_uom_conv_factor (curve_uom_id INT, deal_volume_uom_id INT, curve_uom_conv_factor FLOAT)

-- Convert position uom to curve uom
INSERT INTO #curve_uom_conv_factor
SELECT DISTINCT curve_uom_id, deal_volume_uom_id, vuc.conversion_factor curve_uom_conv_factor
FROM #uom_ids u INNER JOIN
rec_volume_unit_conversion vuc ON	vuc.from_source_uom_id = u.deal_volume_uom_id   AND
									vuc.to_source_uom_id = u.curve_uom_id 

CREATE index indx_curve_uom_conv_factor ON #curve_uom_conv_factor (deal_volume_uom_id,curve_uom_id )

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** End of Collecting Volume UOM conversion factor*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	--print @pr_name+' Running..............'
end


update #temp_deals set formula_curve_id=null
	,price_adder=null,price_adder_currency=null
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id 

----------------------------------------------------------------------------------------------------------
-- Deriving price  for 	103605:Custom Event, 103603:Standard Event, 103601:Indexed

select td.source_deal_detail_id,isnull(dpb.curve_id,ft.pricing_index) curve_id 
	,case when  dpt.price_type_id=103601 and dpd.pricing_period is null and @calc_type='m' then td.curve_as_of_date else isnull(dpb.fin_term_start,ft.term_start) end as_of_date
	,case when datepart(dw,isnull(dpb.fin_term_start,ft.term_start))=isnull(tz.weekend_first_day,7)
		or datepart(dw,isnull(dpb.fin_term_start,ft.term_start))=isnull(tz.weekend_second_day,1)
		or h_day.hol_date is not null	then 1 else 0 end holiday
	,case when isnull(dpb.fin_term_start,ft.term_start)<=td.curve_as_of_date then 's' else 'f' end fwd_set
	,coalesce(spcd.proxy_source_curve_def_id,spcd.monthly_index,spcd.proxy_curve_id3) proxy_curve_id,spcd.settlement_curve_id
	,min(isnull(dpb.fin_term_start,ft.term_start)) over(partition by td.source_deal_detail_id,isnull(dpb.curve_id,ft.pricing_index),isnull(dpb.fin_term_start,ft.term_start)) first_aod
	,isnull(spcd1.exp_calendar_id,spcd.exp_calendar_id) exp_calendar_id,case when @calc_type='s' then dpd.pricing_month else 
		case when  dpt.price_type_id=103601 and dpd.pricing_period is null then
		convert(varchar(8),td.term_start,120)+'01' else null end end maturity_date
	,dpt.deal_price_type_id,dpt.price_type_id
	,isnull(dpd.rounding,9) rounding, dpd.pricing_month, dpd.adder_currency, dpd.pricing_curve_currency,dpd.uom_id,dpd.price_multiplier,dpd.price_adder,td.shipment_id,td.ticket_detail_id
	,dpd.pricing_period,td.term_start,dpd.expiration_calendar
	,cast(null as date) next_as_of_date_holiday
	,spcd.Granularity main_granularity
	,spcd1.Granularity proxy_granularity
	,dpd.pricing_start, isnull(dpd.pricing_end,dpd.pricing_start) pricing_end,dpd.pricing_method,td.fx_conversion_market market_value_desc
	,td.curve_as_of_date
into #pricing_aod --  select * from #pricing_aod where curve_id=7185 and first_aod='2021-01-01' and  maturity_date='2021-01-01'
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id --
	cross apply
	(
		select d.pricing_index,d.rounding,null pricing_month,d.adder_currency , spcd.source_currency_id pricing_curve_currency,spcd.uom_id ,d.multiplier price_multiplier,d.adder price_adder,d.pricing_period,isnull(pps.expiration_calendar,0) expiration_calendar
		,d.pricing_start,d.pricing_end,pps.pricing_method
		from deal_price_deemed d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
			left join [dbo].[pricing_period_setup] pps on pps.pricing_period_value_id=d.pricing_period
		where d.deal_price_type_id=dpt.deal_price_type_id
			--and isnull(d.pricing_period,-1) in (106600,106601,106602,-1) 
			and dpt.price_type_id=103601 -- Indexed
		union 
		select d.pricing_index,d.rounding,d.pricing_month,d.currency adder_currency, spcd.source_currency_id pricing_curve_currency,spcd.uom_id,d.multiplier price_multiplier,d.adder price_adder ,-1 pricing_period,0 expiration_calendar,'1900-01-01' pricing_start, '9999-01-01' pricing_end,null pricing_method
		from deal_price_custom_event d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103605 -- Custom Event
		union
		select d.pricing_index,d.rounding,d.pricing_month, d.currency adder_currency, spcd.source_currency_id pricing_curve_currency,spcd.uom_id,d.multiplier price_multiplier,d.adder price_adder ,-1 pricing_period,0 expiration_calendar,'1900-01-01' pricing_start, '9999-01-01' pricing_end,null pricing_method
		from  deal_price_std_event d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103603 --Standard Event
	) dpd
	left join deal_position_break_down dpb on dpb.source_deal_detail_id=td.source_deal_detail_id
		and dpb.curve_id=dpd.pricing_index and not (dpt.price_type_id in (103605,103603) and @calc_type='s')
		and dpb.fin_term_start between isnull(dpd.pricing_start,'1900-01-01') and coalesce(dpd.pricing_end,dpd.pricing_start,'9999-01-01')
	outer apply 
	(
		select * from dbo.FNAGetFinancialTerm(td.source_deal_detail_id,td.ticket_detail_id) a
		where dpt.price_type_id in (103605,103603) and @calc_type='s'
	) ft
	left join source_price_curve_def spcd on spcd.source_curve_def_id=isnull(dpb.curve_id,ft.pricing_index) 
	left join source_price_curve_def spcd1 on spcd1.source_curve_def_id=
		case when dpb.fin_term_start<=td.curve_as_of_date then spcd.settlement_curve_id else 
		case when convert(varchar(7),td.curve_as_of_date,120)=convert(varchar(7),td.term_start,120) AND spcd.settlement_curve_id  IS NOT NULL then spcd.settlement_curve_id 
			else coalesce(spcd.proxy_source_curve_def_id,spcd.monthly_index,spcd.proxy_curve_id3,spcd.source_curve_def_id) end 
		 end  
	left join time_zones tz on tz.TIMEZONE_ID=isnull(spcd.time_zone,@time_zone_id)	 --@time_zone_id
	left join holiday_group h_day on h_day.hol_group_value_id=spcd.holiday_calendar_id
		and h_day.hol_date=isnull(dpb.fin_term_start,ft.term_start)

--update #pricing_aod set next_as_of_date_holiday=dbo.FNAGetBusinessDay('p',as_of_date,@default_holiday_id) --,holiday=0
--	where first_aod=as_of_date and holiday=1 -- if first as_of_date is holiday then as_of_date will be previous business day


-- performance tuning
select distinct curve_id,fwd_set,as_of_date
	,settlement_curve_id,proxy_curve_id,exp_calendar_id,expiration_calendar,first_aod,proxy_granularity,main_granularity, 
	case when fwd_set='f' then
		case isnull(proxy_granularity,main_granularity)
			when 980 then cast(Year(as_of_date) as varchar) + '-' + cast(Month(as_of_date) as varchar) + '-01'
			WHEN 981 THEN as_of_date
			WHEN 991 THEN cast(Year(as_of_date) as varchar) + '-' + cast(CASE datepart(q, as_of_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01'
			WHEN 992 THEN cast(Year(as_of_date) as varchar) + '-' + cast(CASE datepart(q, as_of_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
			WHEN 993 THEN cast(Year(as_of_date) as varchar) + '-01-01'
			ELSE as_of_date END    
	else '1900-01-01' end maturity_date,curve_as_of_date
into #price_curve_mat_pre -- select * from #price_curve_mat
from #pricing_aod

select distinct curve_id,fwd_set,as_of_date
	,settlement_curve_id,proxy_curve_id,exp_calendar_id,min(expiration_calendar) expiration_calendar -- take 0 (not look expiration calendar) if found 0 and 1 for same curve
	,first_aod,proxy_granularity,main_granularity,  maturity_date,curve_as_of_date
into #price_curve_mat -- select * from #price_curve_mat
from #price_curve_mat_pre
group by curve_id,fwd_set,as_of_date,curve_as_of_date
	,settlement_curve_id,proxy_curve_id,exp_calendar_id,first_aod,proxy_granularity,main_granularity,  maturity_date



create index indx_001 on #price_curve_mat (	curve_id)
create index indx_002 on #price_curve_mat (	fwd_set)
create index indx_003 on #price_curve_mat (	as_of_date)
create index indx_004 on #price_curve_mat (	settlement_curve_id)
create index indx_005 on #price_curve_mat (	proxy_curve_id)
create index indx_006 on #price_curve_mat (	maturity_date)


select distinct
	pa.curve_id,pa.as_of_date,pa.first_aod,pa.fwd_set,pa.settlement_curve_id,pa.proxy_curve_id
	, case when pa.curve_as_of_date< pa.first_aod then pa.curve_as_of_date else coalesce(s1.as_of_date,s.as_of_date,pa.as_of_date) end derived_as_of_date
	,case when pa.fwd_set='s' then coalesce(s1.as_of_date,s.as_of_date,pa.as_of_date) else pa.curve_as_of_date end  set_as_of_date
	,coalesce(mat_non_cal.min_maturity_date,mat.min_maturity_date,pa.maturity_date) min_maturity_date
	,coalesce(mat_non_cal.max_maturity_date,mat.max_maturity_date,pa.maturity_date) max_maturity_date
	,pa.curve_as_of_date
into #curve_aod_mat  --   select * from #curve_aod_mat
from #price_curve_mat pa 
    outer apply
    (
        select max(as_of_date) as_of_date from  source_price_curve where source_curve_def_id=pa.curve_id
            and pa.fwd_set='s' and as_of_date<=pa.as_of_date
    ) s
    outer apply
    (
        select max(as_of_date) as_of_date from  source_price_curve where source_curve_def_id=pa.settlement_curve_id
            and pa.fwd_set='s'  and as_of_date<=pa.as_of_date
    ) s1
    outer apply
    (
        select max(as_of_date) as_of_date from  source_price_curve where source_curve_def_id=pa.proxy_curve_id
            and pa.fwd_set='f' and as_of_date=pa.curve_as_of_date and maturity_date>pa.curve_as_of_date
    ) s2
    outer apply
    (
        select max(hol_date) max_maturity_date,min(hol_date) min_maturity_date from holiday_group h
        where h.hol_group_value_id=pa.exp_calendar_id 
			and h.exp_date =case when pa.fwd_set='s' then coalesce(s1.as_of_date,s.as_of_date,pa.as_of_date) else pa.as_of_date end
            and pa.expiration_calendar=1 and hol_date>=pa.maturity_date
        --order by hol_date desc
    ) mat
    outer apply
    (
        SELECT max(maturity_date) max_maturity_date ,min(maturity_date) min_maturity_date  FROM source_price_curve
        WHERE source_curve_def_id = 
			CASE  WHEN pa.fwd_set = 's' THEN CASE WHEN s1.as_of_date IS NULL  THEN pa.curve_id  ELSE pa.settlement_curve_id  END
			ELSE CASE WHEN s2.as_of_date IS NULL  THEN pa.curve_id  ELSE pa.proxy_curve_id  END END
            AND as_of_date <= CASE WHEN pa.fwd_set = 's' THEN coalesce(s1.as_of_date, s.as_of_date, pa.as_of_date)  ELSE pa.curve_as_of_date END
            AND pa.expiration_calendar = 0 AND maturity_date >= pa.maturity_date
        --order by maturity_date desc
    ) mat_non_cal

create index indx_007 on #curve_aod_mat (curve_id,as_of_date,first_aod)

 select		-- * -- DISTINCT
	rowid=identity(int,1,1),
    pa.source_deal_detail_id,pa.curve_id
    --,coalesce(spc1.as_of_date,spc.as_of_date,spc2.as_of_date,spc3.as_of_date) as_of_date
    ,cam.set_as_of_date as_of_date
    ,coalesce(spc1.maturity_date,spc.maturity_date,spc2.maturity_date,spc3.maturity_date) maturity_date
    ,(coalesce(spc1.curve_value,spc.curve_value,spc2.curve_value,spc3.curve_value)) curve_value
    ,pa.deal_price_type_id,pa.price_type_id,isnull(pa.rounding,9) rounding,pa.pricing_month,pa.adder_currency
    ,pa.pricing_curve_currency,pa.uom_id,pa.price_multiplier,pa.price_adder,'n' is_formula,pa.shipment_id,pa.ticket_detail_id
    ,pa.first_aod fin_term_start  ,pa.price_adder price_adder_org
    ,coalesce(spc1.curve_value,spc.curve_value,spc2.curve_value,spc3.curve_value) curve_value_org
    ,'n' batch_insert
    ,cast(1 as float) fx_factor_price_multipler
    ,cast(1 as float) fx_factor_price_adder
	,pa.pricing_start , pa.pricing_end,	pa.pricing_period,pa.pricing_method,pa.market_value_desc,pa.curve_as_of_date
into #component_price_detail --  select * from #component_price_detail where curve_id=7264
from #pricing_aod pa -- select * from #pricing_aod where curve_id=7264
	inner join #curve_aod_mat cam on pa.curve_id=cam.curve_id and pa.as_of_date=cam.as_of_date and pa.first_aod=cam.first_aod
		-- and pa.curve_id=7264
    left JOIN source_price_curve spc on spc.source_curve_def_id=pa.curve_id
        and spc.as_of_date=cam.derived_as_of_date and spc.maturity_date=cam.max_maturity_date and pa.fwd_set='s'
    left JOIN source_price_curve spc1 on spc1.source_curve_def_id=pa.settlement_curve_id
        and spc1.as_of_date=cam.as_of_date and spc1.maturity_date=cam.max_maturity_date and pa.fwd_set='s'
    left JOIN source_price_curve spc2 on spc2.source_curve_def_id= pa.curve_id
        and spc2.as_of_date=pa.curve_as_of_date and spc2.maturity_date=cam.min_maturity_date and pa.fwd_set='f'
    left JOIN source_price_curve spc3 on spc3.source_curve_def_id=pa.proxy_curve_id and spc3.as_of_date=pa.curve_as_of_date
        and spc3.maturity_date=cam.min_maturity_date and pa.fwd_set='f'
where coalesce(spc1.curve_value,spc.curve_value,spc2.curve_value,spc3.curve_value,pa.price_adder,pa.price_multiplier) is not null

alter table #component_price_detail alter column pricing_curve_currency int null
alter table #component_price_detail alter column uom_id int null

update #component_price_detail 
set 
	as_of_date=src.as_of_date 
	,maturity_date=src.maturity_date
	,curve_value=src.curve_value
	,curve_value_org=src.curve_value_org
from  
(
	select source_deal_detail_id ,curve_id,shipment_id,ticket_detail_id,deal_price_type_id
		, max(as_of_date) as_of_date , max(maturity_date) maturity_date 
	 from #component_price_detail  where as_of_date is not null
	 group by source_deal_detail_id ,curve_id,shipment_id,ticket_detail_id,deal_price_type_id
 ) c
cross apply
(
	select top(1) cd.* from #component_price_detail cd
	  where c.source_deal_detail_id=cd.source_deal_detail_id and c.curve_id=cd.curve_id
	  and isnull(c.shipment_id,-1)=isnull(cd.shipment_id,-1) and isnull(c.ticket_detail_id,-1)=isnull(cd.ticket_detail_id,-1)
	  and c.deal_price_type_id=cd.deal_price_type_id
	  and cd.as_of_date=c.as_of_date and cd.maturity_date=c.maturity_date
) src
inner join #component_price_detail dst
	on dst.source_deal_detail_id=src.source_deal_detail_id and dst.curve_id=src.curve_id
		and isnull(dst.shipment_id,-1)=isnull(src.shipment_id,-1) and isnull(dst.ticket_detail_id,-1)=isnull(src.ticket_detail_id,-1)
		and dst.deal_price_type_id=src.deal_price_type_id
		and dst.as_of_date is null
where src.curve_value is not null

-- Deriving price  for 	103605:Custom Event, 103603:Standard Event, 103601:Indexed
----------------------------------------------------------------------------------------------------------

-- Deriving price for 103600:Fixed Price
insert into #component_price_detail(source_deal_detail_id,curve_id,curve_value,deal_price_type_id,price_type_id,rounding,adder_currency
	,pricing_curve_currency,uom_id,is_formula,as_of_date,maturity_date,shipment_id,ticket_detail_id,fin_term_start
	,curve_value_org,batch_insert,market_value_desc)
select td.source_deal_detail_id,-1,dpd.fixed_price,dpt.deal_price_type_id,dpt.price_type_id
	,isnull(dpd.rounding,9) rounding ,null adder_currency, dpd.currency pricing_curve_currency,dpd.pricing_uom uom_id,'m' is_formula
	,td.curve_as_of_date,td.term_start,td.shipment_id,td.ticket_detail_id, td.curve_as_of_date fin_term_start,dpd.fixed_price
	,'n' batch_insert,td.fx_conversion_market
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  
	inner join deal_price_deemed dpd on  dpd.deal_price_type_id=dpt.deal_price_type_id
		and dpt.price_type_id=103600 -- Fixed Price




--INSERT UNIQUE CURRENCIES FROM WHICH WE NEED CONVERSIONS
--CREATE TABLE select * from #fx_curve_ids (fx_currency_id INT, exp_curve_as_of_date DATETIME, source_system_id INT, func_cur_id INT)

--select * from source_currency where  source_currency_id in (1109,1126)



select distinct fixed_price_currency_id func_cur_id,exp_curve_as_of_date,source_system_id,fx_conversion_market
into #target_fx_ids
from #temp_deals WHERE fixed_price_currency_id is not null
union
select distinct func_cur_id,exp_curve_as_of_date, source_system_id,fx_conversion_market
from #temp_deals WHERE func_cur_id is not null
union
select distinct settlement_currency func_cur_id,exp_curve_as_of_date, source_system_id,fx_conversion_market
from #temp_deals WHERE settlement_currency is not null


select distinct curve_currency_id fx_currency_id ,exp_curve_as_of_date,source_system_id,fx_conversion_market
into #source_fx_ids -- select * from #source_fx_ids
from #temp_deals WHERE curve_currency_id is NOT NULL
UNION 
select distinct proxy_currency_id fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE proxy_currency_id is NOT NULL
UNION 
select distinct proxy_currency_id3 fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE proxy_currency_id3 is NOT NULL
UNION 
select distinct monthly_index_currency_id fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE monthly_index_currency_id is NOT NULL
UNION 
select distinct settlement_curve_currency_id fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE settlement_curve_currency_id is NOT NULL
UNION
select distinct fixed_cost_currency fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE fixed_cost_currency is NOT NULL
UNION
select distinct formula_currency fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE formula_currency is NOT NULL
UNION
select distinct price_adder_currency fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE price_adder_currency is NOT NULL
UNION
select distinct price_adder2_currency fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE price_adder2_currency is NOT NULL
UNION
select distinct trs.currency_id fx_currency_id,td.exp_curve_as_of_date,td.source_system_id,td.fx_conversion_market
FROM #temp_deals td
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	LEFT JOIN user_defined_deal_fields_template ud ON ud.template_id = sdh.template_id AND ud.field_id = 293432
	LEFT JOIN user_defined_fields_template udft ON udft.udf_template_id = ud.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)		
	LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id AND ud.udf_template_id = uddf.udf_template_id
	LEFT JOIN delivery_path dp ON dp.path_id =try_cast(uddf.udf_value as int)	
	LEFT JOIN contract_group cg ON cg.contract_id = td.contract_id
	LEFT JOIN counterparty_contract_rate_schedule ccrs ON ccrs.counterparty_id = dp.counterparty 
		AND ccrs.contract_id = cg.contract_id AND dp.path_id = ccrs.path_id
	LEFT JOIN user_defined_deal_fields_template ud1 ON ud1.template_id = sdh.template_id AND ud1.field_id = -5678
	LEFT JOIN user_defined_fields_template udft1 ON udft1.udf_template_id = ud1.udf_user_field_id and td.leg= ISNULL(udft1.leg,td.leg)	
	LEFT JOIN user_defined_deal_fields uddf1 ON uddf1.source_deal_header_id = td.source_deal_header_id AND ud1.udf_template_id = uddf1.udf_template_id
	--OUTER APPLY(
	--	SELECT rate_schedule_id,rate_type_id,MAX(effective_date) effective_date FROM transportation_rate_schedule trs2 
	--	WHERE rate_schedule_id = COALESCE(uddf1.udf_value,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
	--	GROUP BY rate_schedule_id,rate_type_id
	--) trs1
	LEFT JOIN transportation_rate_schedule trs ON trs.rate_schedule_id = try_cast(COALESCE(uddf1.udf_value,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule) as int)
		and td.term_start between isnull(trs.begin_date,'1900-01-01') and isnull(trs.end_date,'9999-01-01')
		--AND trs.rate_schedule_id = trs1.rate_schedule_id AND trs1.effective_date = trs.effective_date
		--AND trs.rate_type_id = trs1.rate_type_id
where trs.currency_id<>td.func_cur_id
UNION
select distinct vc.currency_id fx_currency_id ,td.exp_curve_as_of_date,td.source_system_id,td.fx_conversion_market
FROM	#temp_deals td
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	LEFT JOIN user_defined_deal_fields_template ud ON ud.template_id = sdh.template_id AND ud.field_id = 293432
	LEFT JOIN user_defined_fields_template udft ON udft.udf_template_id = ud.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)		
	LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id AND ud.udf_template_id = uddf.udf_template_id
	LEFT JOIN delivery_path dp ON dp.path_id =try_cast(uddf.udf_value as int)		
	LEFT JOIN contract_group cg ON cg.contract_id = td.contract_id
	LEFT JOIN counterparty_contract_rate_schedule ccrs ON ccrs.counterparty_id = dp.counterparty 
			AND ccrs.contract_id = cg.contract_id AND dp.path_id = ccrs.path_id
	LEFT JOIN user_defined_deal_fields_template ud1 ON ud1.template_id = sdh.template_id AND ud1.field_id = -5678
	LEFT JOIN user_defined_fields_template udft1 ON udft1.udf_template_id = ud1.udf_user_field_id and td.leg= ISNULL(udft1.leg,td.leg)	
	LEFT JOIN user_defined_deal_fields uddf1 ON uddf1.source_deal_header_id = td.source_deal_header_id AND ud1.udf_template_id = uddf1.udf_template_id
	LEFT JOIN variable_charge vc ON vc.rate_schedule_id = COALESCE(try_cast(uddf1.udf_value as int),ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
		and td.term_start between isnull(vc.begin_date,'1900-01-01') and isnull(vc.end_date,'9999-01-01')
where vc.currency_id<>td.func_cur_id
UNION 
select distinct settlement_currency fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE settlement_currency is not null
UNION 
select distinct fixed_price_currency_id fx_currency_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #temp_deals WHERE fixed_price_currency_id is not null
--union
--select func_cur_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #target_fx_ids
union
select  cp.pricing_curve_currency fx_currency_id,cp.as_of_date,td.source_system_id,td.fx_conversion_market
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id --
	left join #component_price_detail cp
		on td.source_deal_detail_id=cp.source_deal_detail_id AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1)	
		AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
			and cp.deal_price_type_id=dpt.deal_price_type_id and cp.price_type_id=dpt.price_type_id
where cp.pricing_curve_currency is not null

union
select  cp.adder_currency fx_currency_id,cp.as_of_date,td.source_system_id,td.fx_conversion_market
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id --
	left join #component_price_detail cp
		on td.source_deal_detail_id=cp.source_deal_detail_id AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1)	
		AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
			and cp.deal_price_type_id=dpt.deal_price_type_id and cp.price_type_id=dpt.price_type_id
where cp.adder_currency is not null

union

select  dpd.currency_id fx_currency_id,cp.as_of_date,td.source_system_id,td.fx_conversion_market
from #temp_deals td 
	inner join deal_price_type dpt on td.source_deal_detail_id=dpt.source_deal_detail_id  -- @deal_detail_id --
	left join #component_price_detail cp
		on td.source_deal_detail_id=cp.source_deal_detail_id AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1)	
		AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
			and cp.deal_price_type_id=dpt.deal_price_type_id and cp.price_type_id=dpt.price_type_id
	cross apply
	(
		select isnull(d.currency,CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) currency_id 
		from deal_price_deemed  d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where deal_price_type_id=dpt.deal_price_type_id
			and dpt.price_type_id in (103601) -- Indexed
			and isnull(d.currency,CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) is not null
		union all
		select d.currency  curve_currency_id 
		from deal_price_deemed  d
		where deal_price_type_id=dpt.deal_price_type_id
				and dpt.price_type_id in (103600) -- fixed

		union all
		select CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END curve_currency_id from deal_price_custom_event d
		inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
			where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103605 -- Custom Event
			and CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END is not null

		union all
		select CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END curve_currency_id 
		from  deal_price_std_event d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103603 --Standard Event	
			and CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END is not null
	
		union all
		select isnull(d.currency, CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) curve_currency_id from deal_price_custom_event d
		inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
			where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103605 -- Custom Event
			and isnull(d.currency, CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) is not null

		union all
		select isnull(d.currency, CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) curve_currency_id 
		from  deal_price_std_event d
			inner join source_price_curve_def spcd on spcd.source_curve_def_id=d.pricing_index
		where d.deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id=103603 --Standard Event	
			and isnull(d.currency, CASE WHEN (spcd.source_curve_type_value_id <> 576) THEN spcd.source_currency_id ELSE spcd.source_currency_to_id END) is not null

		union all
		select formula_currency from deal_price_deemed 
			where deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id in (103602) -- formula

		union all
		select fixed_cost_currency  from deal_price_deemed 
			where deal_price_type_id=dpt.deal_price_type_id and dpt.price_type_id in (103604) -- fixed_cost
	) dpd
where dpd.currency_id is not null


--union
-- select func_cur_id,exp_curve_as_of_date,source_system_id,fx_conversion_market from #target_fx_ids

 -- complex pricing logic: fx source currency could be meltiple as_of_date so generate multiple as_of_date for target currency
insert into #source_fx_ids(fx_currency_id ,exp_curve_as_of_date,source_system_id,fx_conversion_market)
select distinct t.func_cur_id,s.exp_curve_as_of_date,s.source_system_id,s.fx_conversion_market
from #target_fx_ids t
cross apply
(
	select distinct exp_curve_as_of_date,source_system_id,fx_conversion_market from #source_fx_ids 
	where fx_currency_id<>t.func_cur_id
)  s
--select fc.exp_curve_as_of_date,* from #source_fx_ids fc where fx_curve_id=7367

select distinct spcd.source_curve_def_id fx_curve_id ,s.exp_curve_as_of_date,t.source_system_id  source_system_id
	,s.fx_currency_id source_currency_id,t.fx_currency_id source_currency_to_ID,cast(0 as bit) fx_found
	,t.fx_conversion_market 
into #fx_curve_ids  -- select * from #fx_curve_ids  order by 2 where source_currency_id=1
from #source_fx_ids t
	cross join #source_fx_ids s
	left join dbo.source_price_curve_def spcd on spcd.source_system_id = t.source_system_id  
		and spcd.source_currency_id = s.fx_currency_id 
		AND spcd.source_currency_to_ID = t.fx_currency_id and ISNUMERIC(spcd.market_value_desc)=1
		and isnull(spcd.market_value_desc,'')=t.fx_conversion_market  
		-- and spcd.Granularity=case when @calc_type='s' then 981 else 980 end
	--left join dbo.source_price_curve_def spcd1 on spcd1.source_system_id = t.source_system_id  
	--	and spcd1.source_currency_id =t.func_cur_id  
	--	AND spcd1.source_currency_to_ID = s.fx_currency_id 
	--	and spcd1.market_value_desc=t.fx_conversion_market
	--	and spcd1.Granularity=case when 'm'='s' then 981 else 980 end 
	--	 and ISNUMERIC(spcd1.market_value_desc)=1
where s.fx_currency_id <> t.fx_currency_id --and spcd.source_curve_def_id is not null

CREATE index indx_exp_curve_as_of_date_curve_ids ON #fx_curve_ids ( exp_curve_as_of_date )

CREATE TABLE #fx_curves (fx_curve_id INT, fx_currency_id INT, func_cur_id INT, source_system_id INT
	, as_of_date DATETIME, maturity_date DATETIME, price_fx_conv_factor FLOAT,Granularity int,market_value_desc varchar(100) COLLATE DATABASE_DEFAULT ,forward_settle varchar(1) COLLATE DATABASE_DEFAULT )


if @calc_type<> 's'
	SET @sqlstmt = '
		INSERT INTO #fx_curves
		(fx_curve_id, fx_currency_id, func_cur_id, source_system_id, as_of_date, maturity_date, price_fx_conv_factor,Granularity,market_value_desc,forward_settle)
		SELECT p.source_curve_def_id, p.source_currency_id, p.source_currency_to_ID, fc.source_system_id
			,p.as_of_date,p.maturity_date,p.curve_value,p.Granularity,fc.fx_conversion_market,p.forward_settle
		from #fx_curve_ids fc 
			cross apply -- to prevent from duplication due to wrong datasetup
			( select spcd.source_curve_def_id, spcd.source_currency_id, spcd.source_currency_to_ID
				,spc.as_of_date,spc.maturity_date,max(spc.curve_value) curve_value,spcd.Granularity,max(spcd.forward_settle) forward_settle
			 from dbo.source_price_curve_def spcd 	
				inner JOIN '+CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE 'source_price_curve' END +' spc  ON	spc.source_curve_def_id =	spcd.source_curve_def_id AND spc.as_of_date = fc.exp_curve_as_of_date AND
				spc.curve_source_value_id = '+CAST(@curve_source_value_id AS VARCHAR)+'
		'+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END
			+' where spcd.source_curve_def_id = fc.fx_curve_id 
					and isnull(fc.fx_conversion_market,'''')=isnull(spcd.market_value_desc,'''')
			group by spcd.source_curve_def_id, spcd.source_currency_id, spcd.source_currency_to_ID
					,spc.as_of_date,spc.maturity_date,spcd.Granularity
		) p where p.curve_value is not null ' --do not take fx value that do not have entered value, so that it will be derived reverse value in below statement.
else -- only pick settle value for settlement calculation
	SET @sqlstmt = '
		INSERT INTO #fx_curves (fx_curve_id, fx_currency_id, func_cur_id, source_system_id, as_of_date
			, maturity_date, price_fx_conv_factor,Granularity,market_value_desc,forward_settle)
		SELECT p.source_curve_def_id, p.source_currency_id, p.source_currency_to_ID, fc.source_system_id
			,p.as_of_date,p.maturity_date,p.curve_value,p.Granularity,fc.fx_conversion_market,p.forward_settle
		from ( select distinct source_system_id,fx_curve_id,fx_conversion_market from #fx_curve_ids) fc
			cross apply 
			( select spcd.source_curve_def_id, spcd.source_currency_id, spcd.source_currency_to_ID
				,spc.as_of_date,spc.maturity_date,max(spc.curve_value) curve_value,spcd.Granularity,max(spcd.forward_settle) forward_settle
			 from dbo.source_price_curve_def spcd
			left join holiday_group hg ON hg.hol_group_value_id = spcd.exp_calendar_id
			LEFT JOIN '+CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE 'source_price_curve' END +' spc  ON	spc.source_curve_def_id = spcd.source_curve_def_id AND spc.as_of_date = case when hg.hol_group_value_id IS NULL then spc.maturity_date else hg.exp_date end 
		-- and isnull(hg.hol_date,spc.maturity_date) between '''+@term_start+''' and '''+case when @term_end >@as_of_date then @as_of_date else @term_end END +''' 
				AND spc.curve_source_value_id = '+CAST(@curve_source_value_id AS VARCHAR)
				+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END
		+'
			where spcd.source_curve_def_id = fc.fx_curve_id --and spcd.Granularity=981 
				and isnull(fc.fx_conversion_market,'''')=isnull(spcd.market_value_desc,'''') and spc.curve_value is not null
			group by spcd.source_curve_def_id, spcd.source_currency_id, spcd.source_currency_to_ID
				,spc.as_of_date,spc.maturity_date,spcd.Granularity
		) p where p.curve_value is not null' --do not take fx value that do not have entered value, so that it will be derived reverse value in below statement.

EXEC spa_print  @sqlstmt
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)

--update found_status to identify fx curve to derive reverse value in below statement.
update  fc set fx_found=1 
	from #fx_curve_ids fc 
	inner join #fx_curves fx on fc.source_system_id=fx.source_system_id and fc.source_currency_ID=fx.fx_currency_id 
		and fc.source_currency_to_ID =fx.func_cur_id
		and isnull(fx.market_value_desc,'')=isnull(fc.fx_conversion_market,'')

-- Derive reverse fx conversion
SET @sqlstmt = '
	INSERT INTO #fx_curves(fx_curve_id, fx_currency_id, func_cur_id, source_system_id, as_of_date, maturity_date, price_fx_conv_factor,granularity,market_value_desc,forward_settle)
	SELECT distinct null fx_curve_id, fx.func_cur_id fx_currency_id
		, fx.fx_currency_id func_cur_id, fc.source_system_id
		, fx.as_of_date, fx.maturity_date,1.00/NULLIF(fx.price_fx_conv_factor,0) price_fx_conv_factor,fx.Granularity
		,fx.market_value_desc,fx.forward_settle
	from #fx_curve_ids fc 
	Inner JOIN #fx_curves fx ON fx.source_system_id = fc.source_system_id  and fx.func_cur_id = fc.source_currency_id 
		AND fx.fx_currency_id = fc.source_currency_to_ID and fc.fx_found=0 
		and isnull(fx.market_value_desc,'''')=isnull(fc.fx_conversion_market,'''')
	left join #fx_curves fx1 ON fx1.source_system_id = fx.source_system_id  and fx1.func_cur_id = fx.func_cur_id 
		AND fx1.fx_currency_id = fx.fx_currency_id and fx.Granularity=fx1.Granularity 
		and isnull(fx1.market_value_desc,'''')=isnull(fc.fx_conversion_market,'''')
'
EXEC spa_print  @sqlstmt
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)

-- SELECT * FROM  #temp_deals

------------------------ START -----------------------------------------------------------------------
-- As taking both daily and monthly fx value, there could be duplicate data:
--??????????????????????????????????????????????????????????
--1. need to delete forward fx data in settle boundary if there are duplication (Mostly 1st day of the month.) table: fx_curves
--2. need to delete settled fx data in forward boundary if there are duplication (Mostly 1st day of the month.) table: fx_curves
--????????????????????????????????????????????????????????


select fx_currency_id, func_cur_id,as_of_date, maturity_date,market_value_desc ,count(1) no_rec
into #duplicate_fx -- select * from #duplicate_fx
from #fx_curves
group by fx_currency_id, func_cur_id,as_of_date, maturity_date,market_value_desc
having count(1)>1





--  select * from #fx_curves where fx_currency_id=1 and func_cur_id=1109 and as_of_date='2019-11-01 00:00:00.000' and maturity_date='2019-11-01 00:00:00.000'
--  select * from #fx_curves order by fx_currency_id,func_cur_id,fx_curve_id,as_of_date,maturity_date
--  select * from #fx_curves where fx_currency_id=1109 and func_cur_id=1 and as_of_date='2019-11-01 00:00:00.000' and maturity_date='2019-11-01 00:00:00.000'
--  select * from #fx_curves where fx_currency_id=1109 and func_cur_id=1 and as_of_date='2019-10-01 00:00:00.000' and maturity_date='2019-10-01 00:00:00.000'

--delete duplicate data cause settle & forward fx value( mostly duplicate in first day of month)
delete fx from #fx_curves fx 
	inner join #duplicate_fx dup on fx.fx_currency_id=dup.fx_currency_id
		and fx.func_cur_id=dup.func_cur_id 
		and fx.as_of_date=dup.as_of_date
		and fx.maturity_date=dup.maturity_date
		and fx.market_value_desc=dup.market_value_desc
		and fx.Granularity=case when fx.maturity_date<=@curve_as_of_date then 980 else 981 end


--NOW calcualte avg fx curves using lag curves
select  fixed_price_currency_id fx_currency_id, func_cur_id, source_system_id, exp_curve_as_of_date as_of_date,
		cast(year(term_start) as varchar) + '-' + cast(month(term_start) as varchar) + '-01' maturity_date,
		POWER(NULLIF( CASE WHEN pricing = 1602 THEN 
				dbo.FNAPartialAvgCurve(term_start,term_end,@curve_as_of_date,@curve_source_value_id,contract_id, fx_curve_id,NULL)
			WHEN pricing = 1601 AND @as_of_date < term_end THEN
				dbo.FNAPartialAvgCurve(term_start,@as_of_date,@curve_as_of_date,@curve_source_value_id,contract_id, fx_curve_id,NULL)
		 ELSE 
			dbo.FNARCLagcurve(term_start, @curve_as_of_date, @curve_source_value_id,contract_id, fx_curve_id, 0, 0, 0, 1, NULL, 0, 1, NULL, NULL,wif.curve_shift_val  ,wif.curve_shift_per) END, 0),
			opposite) price_fx_conv_factor,term_start, term_end
INTO #lag_curves_values_fx
from 
(
	select a.fixed_price_currency_id, a.exp_curve_as_of_date, a.source_system_id, max(a.func_cur_id) func_cur_id,
		MAX(ISNULL(spcd.source_curve_def_id, spcd2.source_curve_def_id)) fx_curve_id,
		a.term_start, MAX(a.contract_id) contract_id,
		MAX(CASE WHEN(spcd2.source_curve_def_id is not null) THEN -1 ELSE 1 END) opposite,
		MAX(a.pricing) pricing,a.term_end
	from #temp_deals a 
		LEFT JOIN source_price_curve_def spcd ON	spcd.source_system_id = a.source_system_id  and 
			spcd.source_currency_id = a.fixed_price_currency_id AND
			spcd.source_currency_to_ID = a.func_cur_id and spcd.Granularity=980
		LEFT JOIN source_price_curve_def spcd2 ON	spcd2.source_system_id = a.source_system_id  and 
			spcd2.source_currency_id = a.func_cur_id AND
			spcd2.source_currency_to_ID = a.fixed_price_currency_id	and spcd2.Granularity=980
	WHERE a.fixed_price_currency_id <> a.func_cur_id AND  a.fixed_price_currency_id is not null
		and a.pricing in (1600, 1601, 1602,1607) 
	group by a.fixed_price_currency_id, a.exp_curve_as_of_date, a.source_system_id, a.term_start, a.term_end
) X
left join #whatif_shift_mtm wif on x.fx_curve_id=wif.curve_id

create index indx_lag_curves_values_fx_1 on #lag_curves_values_fx (fx_currency_id,func_cur_id,source_system_id,as_of_date,term_start,term_end)

CREATE index indx_fx_curves ON #fx_curves (fx_currency_id, func_cur_id, source_system_id, as_of_date, maturity_date,market_value_desc)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** End of Collecting FX conversion factors to Functional Currency*****************************'	
END

-- SELECT * FROM #fx_curve_ids
-- select * from #temp_leg_mtm
-------------------------------END OF COLLECTION CONVERSION FACTORS (FX AND UOM)


--===================================================================================================
--------Pricing term logic : siplify complex formula logic---------------------------------------------------

	--103607	103600	Adjustment
	--103605	103600	Custom Event
	--103604	103600	Fixed Cost
	--103600	103600	Fixed Price
	--103602	103600	Formula
	--103601	103600	Indexed
	--103606	103600	Pre-defined Formula
	--103603	103600	Standard Event

-- select * from static_data_value where type_id=103600


/*
--Fixed Price
--UOM and FX
select pricing_uom,currency, * from deal_price_deemed where source_deal_detail_id=212941 and deal_price_deemed_id=30
--Indexed
--Adder Currency, Index Currency, rounding
select adder_currency, rounding,* from deal_price_deemed where source_deal_detail_id=212941 and deal_price_deemed_id=31
--Formula
--Formula Currency
select formula_currency, * from deal_price_deemed where source_deal_detail_id=212941 and deal_price_deemed_id=97
--Standard Event
--Index currency, adder currency, rounding
select currency, rounding, * from deal_price_std_event where source_deal_detail_id=212941
--Custom Event
--Index currency, adder currency, rounding
select currency, rounding, * from deal_price_custom_event where source_deal_detail_id=212941
--Fixed Cost
--Currency
select fixed_cost_currency, * from deal_price_deemed where source_deal_detail_id=212941 and deal_price_deemed_id=96
*/

----------------------------------------------------------------------------------------------
-- Derive price for 103607:Adjustment factor

if @calc_type='s' -- adjustment component is only for settlement 
begin
	SET @sql='
		CREATE TABLE '+@formula_table0+'(
			rowid int identity(1,1),
			counterparty_id INT,
			contract_id INT,
			curve_id INT,
			prod_date DATETIME,
			as_of_date DATETIME,
			volume FLOAT,
			onPeakVolume FLOAT,
			source_deal_detail_id INT,
			formula_id INT,
			invoice_Line_item_id INT,			
			invoice_line_item_seq_id INT,
			price FLOAT,			
			granularity INT,
			volume_uom_id INT,
			generator_id INT,
			[Hour] INT,
			commodity_id INT,
			meter_id INT,
			curve_source_value_id INT,
			[mins] INT,
			source_deal_header_id INT,
			ticket_detail_id int,
			shipment_id int
			,deal_price_type_id int
		)	'
		

	EXEC spa_print @sql
	EXEC(@sql)	

	SET @sql='
		INSERT INTO '+@formula_table0+'(formula_id,curve_source_value_id,prod_date, as_of_date,granularity,contract_id, source_deal_detail_id, source_deal_header_id,deal_price_type_id)
		SELECT 	 dpa.formula_id, ' + cast(@curve_source_value_id as varchar) + ', max(t.term_start) ,  max(t.curve_as_of_date), 980 granularity
		,MAX(t.contract_id),t.source_deal_detail_id, max(t.source_deal_header_id),dpt.deal_price_type_id
		from  #temp_deals t  
			inner join deal_price_type dpt on t.source_deal_detail_id=dpt.source_deal_detail_id
			inner join deal_price_adjustment dpa on dpa.deal_price_type_id=dpt.deal_price_type_id
		group by t.source_deal_detail_id, dpa.formula_id, dpt.deal_price_type_id
	'

	EXEC spa_print @sql
	EXEC(@sql)

	IF @@ROWCOUNT>0
	begin

		EXEC spa_calculate_formula	@curve_as_of_date, @formula_table0,@process_id,@calc_result_table output, @calc_result_table_breakdown output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'

		SET @sql='INSERT INTO #formula_value0 -- select * from #formula_value0
			select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_eval_value, 0) formula_value, 
	--		NULLIF(ROUND(crt.formula_eval_value, ISNULL(cfr.formula_rounding, 100)), 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,
			crt.source_deal_detail_id
			from ' +  @calc_result_table + ' crt ' 

		EXEC spa_print @sql
		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)

	end
end

-- Derive price for 103607:Adjustment factor
----------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------
-- Complex pricing: (103602:Formula, 103606:Pre-defined Formula) Note: formula in complex pricing is only handled here (t.pricing < 1603)

INSERT INTO #tx (
	as_of_date, term_start, formula_id, granularity,contract_id,source_deal_detail_id,
	volume,deal_price_type_id,price_type_id,rounding,pricing_curve_currency
)
select max(t.curve_as_of_date) as_of_date, t.term_start, isnull(t.formula_id,dpd.formula_id) formula_id
	, 980 granularity,MAX(t.contract_id), t.source_deal_detail_id ,SUM(t.deal_volume),dpt.deal_price_type_id	
	,max(dpt.price_type_id) price_type_id 
	,isnull(max(dpd.rounding),9) rounding, max(dpd.formula_currency) pricing_curve_currency
from #temp_deals t
	left join deal_price_type dpt on t.source_deal_detail_id=dpt.source_deal_detail_id
	outer apply
	(
		select formula_id,rounding,formula_currency from  deal_price_deemed where dpt.price_type_id=103602 and deal_price_type_id= dpt.deal_price_type_id
		union all
		select formula_id,9 rounding,null formula_currency from  deal_detail_formula_udf where dpt.price_type_id=103606 and deal_price_type_id= dpt.deal_price_type_id
	) dpd
WHERE isnull(t.formula_id,dpd.formula_id) is not null AND t.formula_curve_id IS NULL AND t.pricing < 1603 
group by t.term_start, isnull(t.formula_id,dpd.formula_id), t.source_deal_detail_id,dpt.deal_price_type_id


IF @@ROWCOUNT>0
begin

	SET @sql='
	CREATE TABLE '+@formula_table+'(
		rowid int ,
		counterparty_id INT,
		contract_id INT,
		curve_id INT,
		prod_date DATETIME,
		as_of_date DATETIME,
		volume FLOAT,
		onPeakVolume FLOAT,
		source_deal_detail_id INT,
		formula_id INT,
		invoice_Line_item_id INT,			
		invoice_line_item_seq_id INT,
		price FLOAT,			
		granularity INT,
		volume_uom_id INT,
		generator_id INT,
		[Hour] INT,
		commodity_id INT,
		meter_id INT,
		curve_source_value_id INT,
		[mins] INT,
		source_deal_header_id INT,
		ticket_detail_id int,
		shipment_id int
	)	'
		
	EXEC(@sql)	

	SET @sql=' INSERT INTO '+@formula_table+'(rowid,formula_id,curve_source_value_id,prod_date, as_of_date,granularity,contract_id, source_deal_detail_id, source_deal_header_id)
	SELECT 	tx.[ID], tx.formula_id, ' + cast(@curve_source_value_id as varchar) + ', tx.term_start, tx.as_of_date, tx.granularity,tx.contract_id, tx.source_deal_detail_id, sdd.source_deal_header_id
	FROM #tx tx INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tx.source_deal_detail_id
	'

	exec spa_print @sql
	EXEC(@sql)

	EXEC spa_calculate_formula	@curve_as_of_date, @formula_table,@process_id,@calc_result_table output, @calc_result_table_breakdown output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'

	SET @sql='INSERT INTO #formula_value
		select distinct crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			crt.formula_eval_value formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,t.source_deal_detail_id
		from ' +  @calc_result_table + ' crt 
			inner join #tx t on crt.source_id=t.id and t.deal_price_type_id is null
			inner join #temp_deals td on td.source_deal_detail_id=t.source_deal_detail_id
	' 

	exec dbo.spa_print @sql
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)

	SET @sql='insert into #component_price_detail(source_deal_detail_id,curve_id,curve_value,deal_price_type_id,price_type_id,rounding,adder_currency,pricing_curve_currency,uom_id,batch_insert,as_of_date,maturity_date,shipment_id,ticket_detail_id,fin_term_start,curve_value_org,is_formula)
	select t.source_deal_detail_id,t.formula_id,crt.formula_eval_value formula_value,t.deal_price_type_id,t.price_type_id
		,isnull(t.rounding,9) rounding,null adder_currency,t.pricing_curve_currency
		,null uom_id,''y'' batch_insert,'''+@curve_as_of_date+''',crt.prod_date,crt.shipment_id,crt.ticket_detail_id
		,'''+@curve_as_of_date+''',crt.formula_eval_value formula_value,''y'' is_formula
	from ' +  @calc_result_table + ' crt 
		inner join #tx t on crt.source_id=t.id and t.deal_price_type_id is not null
	' 

	exec dbo.spa_print @sql
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)

	create index indx_source_deal_detail_id_formula_value on #formula_value (source_deal_detail_id)
	create index indx_term_start_formula_value on #formula_value (term_start)
	--CREATE INDEX [IX_PT_formula_value_formula_value] ON [tempdb].[dbo].[#formula_value] ([formula_value]) INCLUDE ([term_start], [formula_id], [contract_expiration_date])

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************End of collecting unique FORMULA in Deals *****************************'	
	END
end

--select * from #fx_curves
--select * from #component_price cp

--return


update #component_price_detail set  curve_value=cp.curve_value *(1+fv.formula_value)
,curve_value_org=cp.curve_value_org *(1+fv.formula_value)
from #component_price_detail cp
	inner join #formula_value0 fv on cp.source_deal_detail_id=fv.source_deal_detail_id


---------------------------------------------------------
-- convert into invoice currency from deal currency
---------------------------------------------------------
/*
update select * from #temp_leg_mtm 
set
	market_value_inv=market_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	
from #temp_leg_mtm tlm
inner join #temp_deals a on a.source_deal_detail_id=tlm.source_deal_detail_id
outer apply
(	select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
		where fx_currency_id = a.fixed_price_currency_id AND 
		func_cur_id = a.settlement_currency AND source_system_id = a.source_system_id
			AND maturity_date between a.term_start and a.term_end
		--AND
		--( (a.fx_option<>104501 and  maturity_date between a.term_start and a.term_end)
		--	or ( @calc_type='s' and a.fx_option=104501 and maturity_date=dbo.FNAInvoiceDueDate(a.settlement_date,a.invoice_due_date,a.holiday_calendar_id,a.settlement_days)))
) fx
--left join #fx_conversion_values b on b.source_deal_detail_id=a.source_deal_detail_id

*/
--return

--  select * from #component_price_detail where as_of_date='2019-04-01 00:00:00.000'

-- Convert by FX currency & uom  to component price




select cp.rowid,
	 curve_value=round(curve_value*isnull(curve_uom_conv_factor,1),isnull(cp.rounding,9))
	,fx_factor_price_multipler=isnull(fx.price_fx_conv_factor,1)
into #component_price_detail_fx_value --  select * from #component_price_detail_fx_value
from #component_price_detail cp
	inner join #temp_deals td on td.source_deal_detail_id=cp.source_deal_detail_id AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1)	AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
	left join #curve_uom_conv_factor cucf on cucf.curve_uom_id=cp.uom_id and cucf.deal_volume_uom_id=td.deal_volume_uom_id
	outer apply (
		select max(as_of_date) as_of_date
		from  #fx_curves where fx_currency_id = cp.pricing_curve_currency AND func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id AND
			-- as_of_date<= case when cp.fin_term_start<=@curve_as_of_date then cp.fin_term_start else  cp.as_of_date end 
			 as_of_date<= case when cp.fin_term_start<=cp.curve_as_of_date then cp.fin_term_start else  cp.curve_as_of_date end 
			  -- and as_of_date= case when cp.fin_term_start<=@curve_as_of_date then maturity_date else  as_of_date end 
			and as_of_date= case when cp.fin_term_start<=cp.curve_as_of_date then maturity_date else cp.curve_as_of_date end 
			and market_value_desc=cp.market_value_desc
	) max_aod
	LEFT JOIN #fx_curves fx ON fx.fx_currency_id = cp.pricing_curve_currency AND 
		fx.func_cur_id = td.fixed_price_currency_id AND fx.source_system_id = td.source_system_id AND
		 fx.as_of_date= max_aod.as_of_date  -- fx.as_of_date= td.exp_curve_as_of_date 
		AND fx.maturity_date=case when cp.fin_term_start<=cp.curve_as_of_date then max_aod.as_of_date else  cp.maturity_date end  -- AND fx.maturity_date= td.monthly_maturity
		--and fx.as_of_date= case when cp.fin_term_start<=@curve_as_of_date then fx.maturity_date else  fx.as_of_date end
		and fx.as_of_date= case when cp.fin_term_start<=cp.curve_as_of_date then fx.maturity_date else cp.curve_as_of_date end
		and fx.market_value_desc=cp.market_value_desc
where 
	td.fixed_price_currency_id<>cp.pricing_curve_currency and not (cp.uom_id is null and cp.pricing_curve_currency is null)


-- Convert by FX currency component price_adder


select cp.rowid,
	price_adder=round(cp.price_adder*isnull(fx.price_fx_conv_factor,1),isnull(cp.rounding,9))
,fx_factor_price_adder=isnull(fx.price_fx_conv_factor,1)
into #component_price_detail_fx_value_adder --  select * from #component_price_detail_fx_value_adder
from #component_price_detail cp
	inner join #temp_deals td on td.source_deal_detail_id=cp.source_deal_detail_id AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1)	AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
	outer apply (
		select max(as_of_date) as_of_date
		from  #fx_curves where fx_currency_id = cp.adder_currency AND func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id AND
			 as_of_date<= case when cp.fin_term_start<=cp.curve_as_of_date then cp.fin_term_start else  cp.as_of_date end 
			 and market_value_desc=cp.market_value_desc
	) max_aod
	LEFT JOIN #fx_curves fx ON fx.fx_currency_id = cp.adder_currency AND 
		fx.func_cur_id = td.fixed_price_currency_id AND fx.source_system_id = td.source_system_id 
		AND fx.as_of_date= max_aod.as_of_date  -- fx.as_of_date= td.exp_curve_as_of_date 
		AND fx.maturity_date=case when cp.fin_term_start<=cp.curve_as_of_date then max_aod.as_of_date else  cp.maturity_date end  -- AND fx.maturity_date= td.monthly_maturity
		and fx.market_value_desc=cp.market_value_desc
where 
	td.fixed_price_currency_id<>cp.adder_currency and cp.pricing_curve_currency is not null


--return

-- select * from #component_price_detail
--select * from #formula_value0
--  select * from #fx_curves
--select fixed_price_currency_id,settlement_currency_id from  #temp_deals
-- select * from #component_price_detail where curve_id=7264 and source_deal_detail_id=102382 order by pricing_start
--update cp set curve_value=round(curve_value,isnull(cp.rounding,9)) from #component_price_detail cp


select trm.source_deal_detail_id,trm.curve_id
	,round(
		case when max(trm.pricing_method)=1600 then avg(trm.curve_value)*isnull(avg(trm.fx_factor_price_multipler),1) 
		else avg(trm.curve_value*isnull(trm.fx_factor_price_multipler,1)) end,isnull(max(trm.rounding),9)) curve_value
	,max(trm.deal_price_type_id) deal_price_type_id,max(trm.price_type_id) price_type_id
	,max(trm.rounding) rounding, max(trm.pricing_month) pricing_month, max(trm.adder_currency) adder_currency, max(trm.pricing_curve_currency) pricing_curve_currency
	,max(trm.uom_id) uom_id,max(trm.price_multiplier) price_multiplier,max(trm.price_adder) price_adder
	,trm.pricing_start, trm.pricing_end
into #component_price_deemed -- select * from #component_price_deemed where curve_id=7264 and source_deal_detail_id=102382 order by pricing_start
--,pa.pricing_start,pa.pricing_end
from (
	select pa.source_deal_detail_id,pa.curve_id,pa.maturity_date
		,nullif(avg((coalesce(v.curve_value,pa.curve_value,0)*isnull(pa.price_multiplier,1))+isnull(pa.price_adder,0)),0)  curve_value
		,avg(coalesce(v.fx_factor_price_multipler,pa.fx_factor_price_multipler,1)) fx_factor_price_multipler
	,max(pa.deal_price_type_id) deal_price_type_id,max(pa.price_type_id) price_type_id
	,max(pa.rounding) rounding, max(pa.pricing_month) pricing_month, max(pa.adder_currency) adder_currency, max(pa.pricing_curve_currency) pricing_curve_currency
		,max(pa.uom_id) uom_id,isnull(avg(pa.price_multiplier),1) price_multiplier,isnull(avg(isnull(a.price_adder,pa.price_adder)),0) price_adder
		,pa.pricing_start, pa.pricing_end,max(pa.pricing_method) pricing_method
from #component_price_detail pa -- select *  from #component_price_detail pa where pa.source_deal_detail_id=63290 and pa.pricing_start='2019-01-01' and pa.pricing_end='2019-01-31 00:00:00.000' order by 2,3
	left join #component_price_detail_fx_value v on pa.rowid=v.rowid
	left join #component_price_detail_fx_value_adder a on pa.rowid=a.rowid
where pa.pricing_period= 106608 --DEEMED
		--and pa.curve_id=7264 and pa.source_deal_detail_id=102382
	group by pa.source_deal_detail_id,pa.pricing_start,pa.pricing_end,pa.curve_id,pa.maturity_date
) trm
group by trm.source_deal_detail_id,trm.pricing_start,trm.pricing_end,trm.curve_id


select trm.source_deal_detail_id,trm.curve_id,trm.deal_price_type_id
	,round(
		case when max(trm.pricing_method)=1600 then avg(trm.curve_value)*isnull(avg(trm.fx_factor_price_multipler),1) 
		else avg(trm.curve_value*isnull(trm.fx_factor_price_multipler,1)) end,isnull(max(trm.rounding),9)) curve_value
	,max(trm.price_type_id) price_type_id
	,max(trm.rounding) rounding, max(trm.pricing_month) pricing_month, max(trm.adder_currency) adder_currency, max(trm.pricing_curve_currency) pricing_curve_currency
	,max(trm.uom_id) uom_id,max(trm.price_multiplier) price_multiplier,max(trm.price_adder) price_adder
into #component_price -- select * from #component_price
from (
	select pa.source_deal_detail_id,pa.curve_id--,pa.maturity_date
		,nullif(avg((coalesce(v.curve_value,pa.curve_value,0)*isnull(pa.price_multiplier,1))+isnull(pa.price_adder,0)),0)  curve_value
		,avg(coalesce(v.fx_factor_price_multipler,pa.fx_factor_price_multipler,1)) fx_factor_price_multipler
	,pa.deal_price_type_id,max(pa.price_type_id) price_type_id
	,max(pa.rounding) rounding, max(pa.pricing_month) pricing_month, max(pa.adder_currency) adder_currency, max(pa.pricing_curve_currency) pricing_curve_currency
		,max(pa.uom_id) uom_id,avg(pa.price_multiplier) price_multiplier,avg(pa.price_adder) price_adder,max(pa.pricing_method) pricing_method
from #component_price_detail pa
	left join #component_price_detail_fx_value v on pa.rowid=v.rowid
	left join #component_price_detail_fx_value_adder a on pa.rowid=a.rowid
where isnull(pa.pricing_period,-1)<> 106608
	group by pa.source_deal_detail_id,pa.curve_id,pa.deal_price_type_id,convert(varchar(7),pa.maturity_date,120)
) trm
group by trm.source_deal_detail_id,trm.curve_id,trm.deal_price_type_id

--select * from #component_price
--select * from #component_price_detail where source_deal_detail_id=82781

insert into #component_price
(
	source_deal_detail_id,curve_id,curve_value,deal_price_type_id
	,price_type_id,rounding,pricing_month,adder_currency
	,pricing_curve_currency,uom_id,price_multiplier,price_adder
)
select 
	source_deal_detail_id,max(curve_id),round(sum(curve_value),max(rounding)),max(deal_price_type_id)
	,max(price_type_id),max(rounding),max(pricing_month),max(adder_currency)
	,max(pricing_curve_currency),max(uom_id),max(price_multiplier),max(price_adder)
from #component_price_deemed
group by source_deal_detail_id,pricing_start,pricing_end



----------------------------------------------------------------	
---- convert into invoice currency  from deal currency
----------------------------------------------------------------

--update #component_price_detail 
--set
--	curve_value=f.curve_value *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1),
--	price_adder=f.price_adder *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
--from #component_price_detail f
--inner join #temp_deals a on a.source_deal_detail_id=f.source_deal_detail_id
--outer apply
--(	
--	select avg(price_fx_conv_factor)  price_fx_conv_factor from #fx_curves 
--	where fx_currency_id = a.fixed_price_currency_id 
--		AND func_cur_id = a.settlement_currency AND source_system_id = a.source_system_id
--		AND maturity_date between a.term_start and a.term_end
--) fx


	
if  exists (select * from #formula_value0) -- -- adjustment factor always will not exist data for mtm calc
begin	

	INSERT INTO #formula_value
	select max(fv.term_start), null formula_id ,null contract_expiration_date
		,case when isnull(max(sdd.pricing_type),'a')='a' then avg(cp.curve_value *(1+fv.formula_value)) else sum(cp.curve_value *(1+fv.formula_value)) end formula_value,null contract_id, fv.source_deal_detail_id
	from #component_price cp
		inner join #formula_value0 fv on cp.source_deal_detail_id=fv.source_deal_detail_id
		inner join source_deal_detail sdd on sdd.source_deal_detail_id=cp.source_deal_detail_id
	where cp.price_type_id <>103604 -- fixed_cost
	group by fv.source_deal_detail_id

end
else
begin

	INSERT INTO #formula_value -- select * from #formula_value
	select sdd.term_start prod_date, null formula_id ,null contract_expiration_date
		,ROUND(case when isnull(max(pricing_type),'a')='a' then avg(isnull(curve_value,0)) else sum(isnull(curve_value,0)) END,isnull(MAX(cp.rounding),9)) formula_value
		--,ROUND(case when isnull(max(pricing_type),'a')='a' then avg(isnull(curve_value,0)+isnull(cp.price_adder,0)) else sum(isnull(curve_value,0)+isnull(cp.price_adder,0)) END,isnull(MAX(cp.rounding),9)) formula_value
		,null contract_id, sdd.source_deal_detail_id
	from #component_price cp
		inner join source_deal_detail sdd on sdd.source_deal_detail_id=cp.source_deal_detail_id
	where cp.price_type_id <>103604 -- fixed_cost
	group by sdd.source_deal_detail_id,sdd.term_start

end


-------------------End pricing term logic siplify complex formula logic -------------------------------
--=====================================================================================================

-- Add price adder with fx conversion

update sdd set 
	price_adder=isnull(sdd.price_adder, 0) +isnull(dpbd.comp_adder, 0) 
	,price_multiplier=isnull(sdd.price_multiplier, 1)*isnull(dpbd.comp_multiplier, 1) 
from #temp_deals sdd 
outer apply 
(
	select round(sum(a.simple_for_adder*isnull(fx.price_fx_conv_factor,1)),isnull(max(cp.rounding),9)) comp_adder
		,round(EXP(SUM(LOG(abs(nullif(simple_for_multiplier,0)))))*case when max(simple_for_multiplier)<0 then -1 else 1 end,isnull(max(cp.rounding),9)) comp_multiplier
	from 
		(
			select  curve_id, max(simple_for_adder) simple_for_adder ,isnull(max(simple_for_multiplier),1) simple_for_multiplier 
			from  deal_position_break_down where source_deal_detail_id=sdd.source_deal_detail_id
			group by curve_id
		) a	
		outer apply
		(
			select max(adder_currency) adder_currency,max(rounding) rounding from #component_price 
			where source_deal_detail_id=sdd.source_deal_detail_id
				and curve_id=a.curve_id	and price_type_id in (103601,103605,103603)
		) cp
		LEFT OUTER JOIN #fx_curves fx ON fx.fx_currency_id = cp.adder_currency AND 
			fx.func_cur_id = sdd.fixed_price_currency_id AND fx.source_system_id = sdd.source_system_id AND
			fx.as_of_date= sdd.exp_curve_as_of_date AND fx.maturity_date= sdd.monthly_maturity
			and fx.market_value_desc=sdd.fx_conversion_market
) dpbd
left join deal_price_type dpt on sdd.source_deal_detail_id=dpt.source_deal_detail_id 
where dpt.source_deal_detail_id  is null

-- Add fixed cost from component
update sdd set 
	fixed_cost=isnull(sdd.fixed_cost, 0) +isnull(cp.curve_value, 0) 
from #temp_deals sdd
	outer apply
	(
		select round(sum(curve_value),isnull(MAX(rounding),9)) curve_value from #component_price 
		where source_deal_detail_id=sdd.source_deal_detail_id
			and price_type_id =103604 -- fixed_cost
	) cp
			

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print @pr_name+' Running..............'
end

insert into #calc_status
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
	'Formula evaluation failed for ' + dbo.FNAFNACurveNames(formula)  + ' due to missing prices as of date: ' + ' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar), 
		'Please review price curves.' 
from #formula_value fv INNER JOIN formula_editor fe ON fe.formula_id = fv.formula_id 
where fv.formula_value is null
group by formula, contract_expiration_date

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Evaulating FORMULA values in Deals and Logging Any Errors*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--create index indx_derived_curve_settled_temp_deals on #temp_deals (derived_curve,settled )
create index indx_curve_id_temp_deals on #temp_deals (curve_id )
create index indx_maturity_date_temp_deals on #temp_deals (maturity_date )
--create index indx_contract_expiration_date_temp_deals on #temp_deals (maturity_date )
create index indx_internal_deal_type_value_id_temp_deals on #temp_deals (internal_deal_type_value_id )
create index indx_contract_expiration_date_temp_deals on #temp_deals (contract_expiration_date )
create index indx_source_deal_header_id_temp_deals on #temp_deals (source_deal_header_id,term_end,Leg )
create index indx_curve_type_maturity_date_temp_deals on #temp_deals (curve_type_maturity_date )
--create index indx_term_start_temp_deals on #temp_deals (term_start )
create index indx_exp_curve_as_of_date_temp_deals on #temp_deals (exp_curve_as_of_date )

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** Indexing on #temp_deals*****************************'	
END

--Get price curves such that if expired and not found in current as of date, use the expired date price curves for settlement
If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


CREATE TABLE #cids (curve_id INT, maturity_date DATETIME, as_of_date DATETIME, pnl_as_of_date DATETIME, curve_granularity INT, factor FLOAT, derive_on_calculation varchar(1) COLLATE DATABASE_DEFAULT,effective_date_apply varchar(1) COLLATE DATABASE_DEFAULT,maturity_date_end DATETIME,block_define_id int )

set @sqlstmt = '
INSERT INTO #cids (curve_id, maturity_date, as_of_date, pnl_as_of_date, curve_granularity, factor, derive_on_calculation,maturity_date_end)
	select distinct curve_id, maturity_date,curve_as_of_date  as_of_date, curve_as_of_date pnl_as_of_date,
			curve_granularity, curve_factor,''n'' derive_on_calculation,convert(varchar(10),term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals  
	 where settled = 0 AND curve_id is NOT NULL AND pricing IN (1600,-1, 1603,1604,1605,1606,1607,1618,1619)
	UNION
	select distinct proxy_curve_id, maturity_date, curve_as_of_date as_of_date, curve_as_of_date  pnl_as_of_date,
		proxy_curve_granularity, proxy_curve_factor,''n'' derive_on_calculation,convert(varchar(10),term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals where --proxy_derived_curve = ''n''  and
	 settled = 0 AND curve_id is NOT NULL AND proxy_curve_id IS NOT NULL AND pricing IN (1600,-1, 1603,1604,1605,1606,1607,1618,1619)
	UNION
	select distinct proxy_curve_id3, maturity_date, curve_as_of_date  as_of_date,curve_as_of_date  pnl_as_of_date,
		proxy_curve_granularity3, proxy_curve_factor3,''n'' derive_on_calculation,convert(varchar(10),term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals where --proxy_derived_curve3 = ''n'' and 
		settled = 0 AND curve_id is NOT NULL AND proxy_curve_id3 IS NOT NULL AND pricing IN (1600,-1, 1603,1604,1605,1606,1607,1618,1619)
	UNION --ALL
	select distinct monthly_index, maturity_date, curve_as_of_date  as_of_date, curve_as_of_date pnl_as_of_date,
		monthly_index_granularity, monthly_index_factor,''n'' derive_on_calculation,convert(varchar(10),term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals where --monthly_index_derived_curve = ''n'' and 
		settled = 0 AND curve_id is NOT NULL AND monthly_index IS NOT NULL AND pricing IN (1600,-1, 1603,1604,1605,1606,1607,1618,1619)
	UNION
	select distinct formula_curve_id, maturity_date, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',''' + @curve_as_of_date + ''') as_of_date
	, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',''' + @curve_as_of_date + ''') pnl_as_of_date,
			s.granularity, ISNULL(su.factor, 1),''n'' derive_on_calculation,convert(varchar(10),a.term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals a inner join
		 source_price_curve_def s ON s.source_curve_def_id = a.formula_curve_id inner join
		 source_currency su on su.source_currency_id = s.source_currency_id
		 OUTER APPLY(SELECT hg.exp_date FROM holiday_group hg 
			WHERE hg.hol_group_value_id = s.exp_calendar_id  AND convert(varchar(10),a.term_end,120) BETWEEN hg.hol_date AND hg.hol_date_to) cexp
	UNION
	select distinct sp1.source_curve_def_id, maturity_date, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) as_of_date
	, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) pnl_as_of_date,
			sp1.granularity, ISNULL(su.factor, 1),''n'' derive_on_calculation,convert(varchar(10),a.term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals a inner join
		 source_price_curve_def s ON s.source_curve_def_id = a.formula_curve_id inner join
		 source_price_curve_def sp1 ON sp1.source_curve_def_id = s.proxy_source_curve_def_id inner join
		 source_currency su on su.source_currency_id = sp1.source_currency_id
		 OUTER APPLY(SELECT hg.exp_date FROM holiday_group hg 
			WHERE hg.hol_group_value_id = sp1.exp_calendar_id  AND convert(varchar(10),a.term_end,120) BETWEEN hg.hol_date AND hg.hol_date_to) cexp
	UNION	 	
	select distinct sp1.source_curve_def_id, maturity_date, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) as_of_date
	, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) pnl_as_of_date,
			sp1.granularity, ISNULL(su.factor, 1),''n'' derive_on_calculation,convert(varchar(10),a.term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals a inner join
		 source_price_curve_def s ON s.source_curve_def_id = a.formula_curve_id inner join
		 source_price_curve_def sp1 ON sp1.source_curve_def_id = s.monthly_index inner join
		 source_currency su on su.source_currency_id = sp1.source_currency_id
		 OUTER APPLY(SELECT hg.exp_date FROM holiday_group hg 
			WHERE hg.hol_group_value_id = sp1.exp_calendar_id  AND convert(varchar(10),a.term_end,120) BETWEEN hg.hol_date AND hg.hol_date_to) cexp
	UNION	 	
	select distinct sp1.source_curve_def_id, maturity_date, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) as_of_date
	, isnull('+case when @calc_type='s' then 'cexp.exp_date' else 'null' end +',a.curve_as_of_date) pnl_as_of_date,
		sp1.granularity, ISNULL(su.factor, 1),''n'' derive_on_calculation,convert(varchar(10),a.term_end,120) +'' 23:59:00'' maturity_date_end
	from #temp_deals a inner join
		source_price_curve_def s ON s.source_curve_def_id = a.formula_curve_id inner join
		source_price_curve_def sp1 ON sp1.source_curve_def_id = s.proxy_curve_id3 inner join
		source_currency su on su.source_currency_id = sp1.source_currency_id
	OUTER APPLY(SELECT hg.exp_date FROM holiday_group hg 
		WHERE hg.hol_group_value_id = sp1.exp_calendar_id  AND convert(varchar(10),a.term_end,120) BETWEEN hg.hol_date AND hg.hol_date_to) cexp
'

exec spa_print @sqlstmt
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)


	/* New Hourly-Monthly, TOU_Monthly and RTC Curve Logic Start*/
	--RTC Curve Logic
-- CASE WHEN spcd.Granularity = 10000290  THEN ci.term_start  else convert(varchar(8),ci.term_start),120) + '01' END

IF OBJECT_ID('tempdb..#rtc_curve_info') IS NOT NULL DROP TABLE #rtc_curve_info

-- rtc curves that directly used in source_deal_detail.curve_id is changed granularity as normal monthly and daily
update #cids set curve_granularity =case when curve_granularity=10000289 then 980 else 981 end where  curve_granularity in (10000289,10000290)

update #temp_deals set curve_granularity =case when curve_granularity=10000289 then 980 else 981 end where curve_granularity in (10000289,10000290)
update #temp_deals set proxy_curve_granularity =case when proxy_curve_granularity=10000289 then 980 else 981 end 
	where  proxy_curve_granularity in (10000289,10000290)
update #temp_deals set monthly_index_granularity =case when monthly_index_granularity=10000289 then 980 else 981 end 
	where  monthly_index_granularity in (10000289,10000290)
update #temp_deals set proxy_curve_granularity3 =case when proxy_curve_granularity3=10000289 then 980 else 981 end 
	where  proxy_curve_granularity3 in (10000289,10000290)
update #temp_deals set settlement_curve_granularity =case when settlement_curve_granularity=10000289 then 980 else 981 end 
	where  settlement_curve_granularity in (10000289,10000290)

------------------------------------------------------------------------------------------------------------------------------------------------------

-- RTC Mapped curve
SELECT distinct td.curve_id main_curve_id,td.child_curve_id,tbk.term_start ,tbk.term_end
	,CASE WHEN spcd.Granularity = 10000290  THEN tbk.term_start else convert(varchar(8),tbk.term_start,120) + '01' END maturity_date
	,spcd.block_define_id,spcd.granularity,td.curve_as_of_date as_of_date,ISNULL(su.factor, 1) curve_factor
INTO #rtc_curve_info -- select * from #rtc_curve_info
from (
	SELECT a.curve_id,a.term_start,a.term_end,rspc.rtc_curve child_curve_id,a.curve_as_of_date FROM #temp_deals a
		INNER JOIN rtc_source_price_curve rspc ON rspc.rtc_curve_def_id = a.curve_id
	UNION
	SELECT a.formula_curve_id,a.term_start,a.term_end,rspc.rtc_curve child_curve_id,a.curve_as_of_date FROM #temp_deals a
		INNER JOIN rtc_source_price_curve rspc ON rspc.rtc_curve_def_id = a.formula_curve_id
	 WHERE a.formula_curve_id IS NOT NULL
) td
INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = td.child_curve_id
inner join source_currency su on su.source_currency_id = spcd.source_currency_id
cross apply [FNATermBreakdown](case when spcd.granularity=10000290 then 'd' else 'm' end,td.term_start,td.term_end) tbk


INSERT INTO #cids (curve_id, maturity_date, as_of_date, pnl_as_of_date, curve_granularity, factor, derive_on_calculation,maturity_date_end,block_define_id)
select distinct child_curve_id, maturity_date, ci.as_of_date as_of_date, ci.as_of_date pnl_as_of_date,
	spcd.Granularity, ISNULL(su.factor, 1) curve_factor,'n' derive_on_calculation,convert(varchar(10),term_end,120) +' 23:59:00' maturity_date_end,spcd.block_define_id
from #rtc_curve_info ci 
	INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = ci.child_curve_id
	inner join source_currency su on su.source_currency_id = spcd.source_currency_id
UNION
select distinct spcd1.source_curve_def_id, 
	CASE WHEN spcd1.Granularity = 10000290  THEN ci.term_start else convert(varchar(8),ci.term_start,120) + '01' END maturity_date, ci.as_of_date as_of_date
	, ci.as_of_date pnl_as_of_date,spcd1.granularity, ISNULL(su.factor, 1) curve_factor
	,'n' derive_on_calculation,convert(varchar(10),ci.term_end,120) +' 23:59:00' maturity_date_end,spcd1.block_define_id
from #rtc_curve_info ci 
	INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = ci.child_curve_id
	INNER JOIN source_price_curve_def spcd1 ON spcd1.source_curve_def_id = spcd.proxy_source_curve_def_id
	inner join source_currency su on su.source_currency_id = spcd1.source_currency_id
where spcd1.source_curve_def_id is not null

update #cids set derive_on_calculation=isnull(spcd.derive_on_calculation,'n') 
	,effective_date_apply=isnull(spcd.effective_date,'n') 
from #cids s inner join source_price_curve_def spcd on s.curve_id=spcd.source_curve_def_id

/*
994	978	10Min
987	978	15Min
989	978	30Min
995	978	5Min

994,987,989,995
*/
CREATE INDEX idx_cids1 ON #cids(curve_id)
CREATE INDEX idx_cids2 ON #cids(maturity_date)
CREATE INDEX idx_cids3 ON #cids(pnl_as_of_date)

--Now insert hourly or daily settlment prices based on calendar required for settlement only - market side

--select isnull(td.settlement_curve_id, td.curve_id) curve_id
--	,max(md.maturity_date) maturity_date,max(md.pnl_as_of_date) pnl_as_of_date
--	,max(md.as_of_date) as_of_date
--	,max(spcd.Granularity) curve_granularity
--	,max(case when (td.settlement_curve_id is not null) then settlement_curve_factor else curve_factor end) curve_factor,max(ISNULL(su.factor,1)) factor 
--	--,max(case when td.settlement_curve_id is NOT NULL AND td.option_flag = 'y' --and  td.Pricing IN (1603,1604,1605) 
--	--	then td.curve_id else null end) deal_curve_id
--	,cast(null as int) deal_curve_id
--	,max(hg.hol_group_value_id) exp_calendar_id,max(spcd.ratio_option) ratio_option,max(isnull(spcd.derive_on_calculation,'n')) derive_on_calculation
--into  #s_cids -- select * from #s_cids
--from #temp_deals td 
--	INNER JOIN source_price_curve_def spcd on spcd.source_curve_def_id = isnull(td.settlement_curve_id, td.curve_id) 
--	LEFT JOIN holiday_group hg ON hg.hol_group_value_id = spcd.exp_calendar_id
--	LEFT JOIN source_currency su on su.source_currency_id = spcd.source_currency_id
--	outer apply (
--	select CASE WHEN hg.hol_group_value_id IS NOT NULL  then hol_date  ELSE 
--	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
--		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
--		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
--		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
--		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
--		WHEN spcd.Granularity in (981,987,989,982,994,995,997,10000289,10000290) then  NULL ---spc.as_of_date=spc.maturity_date
--		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
--	END 
--END maturity_date, CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
--	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
--		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
--		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
--		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
--		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
--		WHEN spcd.Granularity in (981,987,989,982,994,995,997,10000289,10000290) then  NULL ---spc.as_of_date=spc.maturity_date
--		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
--	END END pnl_as_of_date,
--	CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
--	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
--		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
--		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
--		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
--		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
--		WHEN  spcd.Granularity in (981,987,989,982,994,995,997,10000289,10000290) then  NULL ---spc.as_of_date=spc.maturity_date
--		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
--		END END as_of_date
--	) md	
--WHERE @calc_type  = 's' --AND spcd.Granularity IN (981, 982,980,987,997,10000289,10000290)
--                      AND  td.Pricing IN (1600, -1,1603,1604,1605,1606,1607,1601,1602) AND
--		(hg.hol_group_value_id IS NULL OR 
--		hol_date between @term_start and case when (@term_end > @as_of_date) then @as_of_date else @term_end end)  
--		--AND hourly_position_breakdown in(982,987,997,10000289,10000290)
--group by isnull(td.settlement_curve_id, td.curve_id)




select distinct isnull(td.settlement_curve_id, td.curve_id) curve_id
	,md.maturity_date,md.pnl_as_of_date
	,md.as_of_date
	,(spcd.Granularity) curve_granularity
	,(case when (td.settlement_curve_id is not null) then settlement_curve_factor else curve_factor end) curve_factor,(ISNULL(su.factor,1)) factor 
	--,max(case when td.settlement_curve_id is NOT NULL AND td.option_flag = 'y' --and  td.Pricing IN (1603,1604,1605) 
	--	then td.curve_id else null end) deal_curve_id
	,cast(null as int) deal_curve_id
	,(hg.hol_group_value_id) exp_calendar_id,(spcd.ratio_option) ratio_option,(isnull(spcd.derive_on_calculation,'n')) derive_on_calculation
into  #s_cids -- select * from #s_cids
from #temp_deals td 
	INNER JOIN source_price_curve_def spcd on spcd.source_curve_def_id = isnull(td.settlement_curve_id, td.curve_id) 
	LEFT JOIN holiday_group hg ON hg.hol_group_value_id = spcd.exp_calendar_id
		and td.term_start between hg.hol_date and isnull(hg.hol_date_to,'9999-01-01')
	LEFT JOIN source_currency su on su.source_currency_id = spcd.source_currency_id
	outer apply (
	select CASE WHEN hg.hol_group_value_id IS NOT NULL  then hol_date  ELSE 
	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN spcd.Granularity in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0) END 
	END maturity_date, CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN spcd.Granularity in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0) END 
	END pnl_as_of_date,
	CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
	CASE WHEN spcd.Granularity =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN spcd.Granularity =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN spcd.Granularity =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN spcd.Granularity =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN spcd.Granularity =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN  spcd.Granularity in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
		END END as_of_date
	) md	
WHERE @calc_type  = 's' --AND spcd.Granularity IN (981, 982,980,987,997)
          AND  td.Pricing IN (1600, -1,1603,1604,1605,1606,1607,1601,1602) 
		--AND (hg.hol_group_value_id IS NULL OR 
		--hol_date between @term_start and case when (@term_end > @as_of_date) then @as_of_date else @term_end end)  

		--select * from holiday_group

--group by isnull(td.settlement_curve_id, td.curve_id)


CREATE INDEX idx_s_cids1 ON #s_cids(curve_id)
CREATE INDEX idx_s_cids2 ON #s_cids(maturity_date)
CREATE INDEX idx_s_cids3 ON #s_cids(pnl_as_of_date)


--Now insert hourly or daily settlment prices based on calendar required for settlement only - contract side SIMPLE FORMULA

select DISTINCT ISNULL(spcd2.source_curve_def_id, spcd.source_curve_def_id) curve_id
,CASE WHEN hg.hol_group_value_id IS NOT NULL  then hol_date  ELSE 
	CASE WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN isnull(spcd2.Granularity, spcd.Granularity) in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
	END 
END maturity_date, CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
	CASE WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN isnull(spcd2.Granularity, spcd.Granularity) in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
	END END pnl_as_of_date,
	CASE WHEN hg.hol_group_value_id IS NOT NULL  then exp_date  ELSE 
	CASE WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =993 then dbo.FNAGetTermStartDate('a',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =992 then dbo.FNAGetTermStartDate('s',td.term_start ,0) 
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =991 then dbo.FNAGetTermStartDate('q',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =980 then dbo.FNAGetTermStartDate('m',td.term_start ,0)
		WHEN ISNULL(spcd2.Granularity,spcd.Granularity) =990 then dbo.FNAGetTermStartDate('w',td.term_start ,0)
		WHEN isnull(spcd2.Granularity, spcd.Granularity) in (981,987,989,982,994,995,997) then  NULL ---spc.as_of_date=spc.maturity_date
		ELSE dbo.FNAGetTermStartDate('m',td.term_start ,0)
	END END as_of_date, --td.contract_expiration_date as_of_date, 
		ISNULL(spcd2.Granularity,spcd.Granularity) curve_granularity, 
		--case when (td.settlement_curve_id is not null) then settlement_curve_factor else proxy_curve_factor end curve_factor 		 
		ISNULL(case when (spcd.settlement_curve_id is not null) then sc2.factor else sc1.factor end,1) curve_factor,ISNULL(su.factor,1) factor
		,hg.hol_group_value_id exp_calendar_id,isnull(spcd.derive_on_calculation,'n') derive_on_calculation
into #s_cids1 --  select * from #s_cids1
from #temp_deals td INNER JOIN
	 source_price_curve_def spcd on spcd.source_curve_def_id = td.formula_curve_id LEFT JOIN
	 source_price_curve_def spcd2 on spcd2.source_curve_def_id = spcd.settlement_curve_id 
	LEFT JOIN  holiday_group hg ON hg.hol_group_value_id = isnull(spcd2.exp_calendar_id, spcd.exp_calendar_id) 
	 		and td.term_start between hg.hol_date and isnull(hg.hol_date_to,'9999-01-01')

 LEFT JOIN source_currency sc1 ON sc1.source_currency_id = spcd.source_currency_id		
 LEFT JOIN source_currency sc2 ON sc2.source_currency_id = spcd2.source_currency_id 
 LEFT JOIN source_currency su on su.source_currency_id = spcd.source_currency_id 				
WHERE td.formula_curve_id IS NOT NULL AND td.curve_id <> td.formula_curve_id and @calc_type  = 's' AND 
	spcd.Granularity IN (981,987,989,982,994,995,980,997) AND  td.Pricing IN (1600, -1,1603,1604,1605,1606,1607,1601,1602) --(-1, 1603,1604,1605,1606,1607) 
		--AND (hg.hol_group_value_id IS NULL OR 
		--	hol_date between @term_start and case when @term_end >@as_of_date then @as_of_date else @term_end end) 
		--AND hourly_position_breakdown in(982,987,997)


CREATE INDEX idx_s_cids11 ON #s_cids1(curve_id)
CREATE INDEX idx_s_cids21 ON #s_cids1(maturity_date)
CREATE INDEX idx_s_cids31 ON #s_cids1(pnl_as_of_date)

select curve_id , maturity_date, as_of_date, pnl_as_of_date, curve_granularity , factor into #cids_derive_on_calculation from #cids where derive_on_calculation='y'
union
select curve_id , maturity_date, as_of_date, pnl_as_of_date, curve_granularity , factor  from #s_cids where derive_on_calculation='y'
union
select curve_id , maturity_date, as_of_date, pnl_as_of_date, curve_granularity , factor  from #s_cids1 where derive_on_calculation='y'

---remain taking curve id from deal detail that are not included in #cids_derive_on_calculation
set @derive_on_calculation='n'

insert into #cids_derive_on_calculation
(curve_id , maturity_date, as_of_date, pnl_as_of_date, curve_granularity , factor)
select DISTINCT spc.source_curve_def_id,spc.maturity_date, spc.as_of_date,  spc.as_of_date,a.curve_granularity ,1
from #temp_deals a inner join source_price_curve spc  ON a.curve_id = spc.source_curve_def_id and
		spc.as_of_date =a.curve_as_of_date  and spc.maturity_date= a.term_end and
		spc.assessment_curve_type_value_id = @assessment_curve_type_value_id and spc.curve_source_value_id = @curve_source_value_id 
	inner join source_price_curve_def spcd on spcd.source_curve_def_id =spc.source_curve_def_id
			 and isnull(spcd.derive_on_calculation,'n')='y' 
	left outer join #cids_derive_on_calculation tc ON tc.curve_id = spc.source_curve_def_id 
		and  tc.as_of_date = spc.as_of_date and tc.maturity_date = spc.maturity_date
where a.curve_id IS NOT NULL AND (a.internal_deal_type_value_id = 6 OR a.internal_deal_type_value_id = 7) AND
		tc.curve_id IS NULL 


SET @sql=' SELECT md.curve_id source_curve_def_id,min(maturity_date) term_start , max(maturity_date) term_end	
	into '+@formula_derive+'
	FROM #cids_derive_on_calculation md inner join source_price_curve_def spcd on md.curve_id=spcd.source_curve_def_id 
		and spcd.formula_id is not null
	Group by md.curve_id
			'	
exec spa_print @sql
EXEC (@sql)


if @@ROWCOUNT>0 
	set @derive_on_calculation='y'
	
		
if @derive_on_calculation='y'
	exec [dbo].[spa_derive_curve_value]
		@source_curve_def_id =null,
		@as_of_date_from =@curve_as_of_Date,
		@as_of_date_to =@curve_as_of_Date,
		@curve_source_value_id =@curve_source_value_id,
		@table_name = @calc_result_derive,
		@tenor_from  = NULL,
		@tenor_to= NULL,
		@curve_pracess_table = @formula_derive --input granularity level maturity_date process table for deriving curve value.

		--case when td.bid_n_ask_price=''y'' then case when td.buy_sale_flag=''b'' then spc.bid_value else spc.ask_value end else spc.curve_value end



SET @sqlstmt ='
	insert into #temp_curves_settlement (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,deal_curve_id,bid_value,ask_value,exp_calendar_id)
	select spc.~source_curve_def_id~, CASE WHEN curve_granularity = 980 THEN '''+@curve_as_of_date+''' ELSE spc.as_of_date END as_of_date
	, '+CAST(@assessment_curve_type_value_id as varchar)+', spc.curve_source_value_id,
			spc.~maturity_date~, spc.is_dst, spc.~curve_value~ * factor curve_value , spc.as_of_date, s_cids.curve_granularity,s_cids.deal_curve_id
		, spc.~bid_value~ * factor bid_value, spc.~ask_value~ * factor ask_value,s_cids.exp_calendar_id
	from #s_cids s_cids inner join
	'+CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE '~source_price_curve~' END +' spc  
		on spc.~source_curve_def_id~ = s_cids.curve_id AND s_cids.derive_on_calculation=''~derive_on_calculation~'' and
		spc.as_of_date = ISNULL(s_cids.pnl_as_of_date, spc.as_of_date)
		'+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END+ ' AND
		(
		(s_cids.exp_calendar_id IS NOT NULL AND 
		year(spc.~maturity_date~) = year(s_cids.maturity_date) AND month(spc.~maturity_date~) = month(s_cids.maturity_date) AND 
		day(spc.~maturity_date~) = day(s_cids.maturity_date)) OR
		--If calendar not defined assume daily and as of date equals maturity date
		(s_cids.exp_calendar_id IS NULL AND 
		convert(varchar(10),spc.~maturity_date~,120) =convert(varchar(10),spc.as_of_date,120)
		AND spc.~maturity_date~ BETWEEN '''+@term_start+''' and case when ('''+@term_end+''' > '''+@as_of_date+''') then '''+@as_of_date+' 23:59:59'' else '''+@term_end+' 23:59:59'' end
		)
		)	
		AND curve_source_value_id = '+CAST(@curve_source_value_id AS VARCHAR)+' 
	WHERE spc.~curve_value~ IS NOT NULL and isnull(s_cids.ratio_option,-1)<> 18800 ' --current month ratio
	
set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~','source_price_curve')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','n')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','maturity_date')
set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','curve_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','bid_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','ask_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','source_curve_def_id')
--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~','spc.Assessment_curve_type_value_id')
EXEC spa_print  @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)

if @derive_on_calculation='y'
begin
	set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@calc_result_derive)	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','y')	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','prod_date')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','curve_id')
	--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~',CAST(@assessment_curve_type_value_id as varchar))
	EXEC spa_print  @sqlstmt1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)
end 


--select * from static_data_value where type_id=75

SET @sqlstmt ='
	insert into #temp_curves_settlement (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,deal_curve_id,bid_value,ask_value,exp_calendar_id)
	select spc.~source_curve_def_id~,  '''+@curve_as_of_date+'''  as_of_date
	,'+CAST(@assessment_curve_type_value_id as varchar)+', spc.curve_source_value_id,
			spc.~maturity_date~, spc.is_dst, avg(spc.~curve_value~ * factor) curve_value ,'''+@curve_as_of_date+''' pnl_as_of_date, s_cids.curve_granularity,s_cids.deal_curve_id
			, avg(spc.~bid_value~ * factor) bid_value, avg(spc.~ask_value~ * factor) ask_value,max(s_cids.exp_calendar_id) exp_calendar_id
	from #s_cids s_cids inner join
	'+CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE '~source_price_curve~' END +' spc 
	 on spc.~source_curve_def_id~ = s_cids.curve_id AND  s_cids.derive_on_calculation=''~derive_on_calculation~'' and 
		spc.as_of_date = ISNULL(s_cids.pnl_as_of_date, spc.as_of_date)
			'+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END+ ' AND
		((s_cids.exp_calendar_id IS NOT NULL AND 
			year(spc.~maturity_date~) = year(s_cids.maturity_date) AND month(spc.~maturity_date~) = month(s_cids.maturity_date) AND 
			day(spc.~maturity_date~) = day(s_cids.maturity_date)) OR
			--If calendar not defined assume daily and as of date equals maturity date
			(s_cids.exp_calendar_id IS NULL AND convert(varchar(10),spc.~maturity_date~,120) =convert(varchar(10),spc.as_of_date,120) AND
				spc.~maturity_date~ BETWEEN '''+@term_start+''' and case when ('''+@term_end+''' > '''+@as_of_date+''') then '''+@as_of_date+' 23:59:59'' else '''+@term_end+' 23:59:59'' end
		))	AND curve_source_value_id = '+CAST(@curve_source_value_id AS VARCHAR)+' 
	WHERE spc.~curve_value~ IS NOT NULL and isnull(s_cids.ratio_option,-1)= 18800  --current month ratio
	GROUP BY spc.~source_curve_def_id~,  curve_granularity, spc.curve_source_value_id,
			spc.~maturity_date~, spc.is_dst , s_cids.curve_granularity,s_cids.deal_curve_id
'

set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~','source_price_curve')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','n')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','maturity_date')
set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','curve_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','bid_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','ask_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','source_curve_def_id')
--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~','spc.Assessment_curve_type_value_id')

EXEC spa_print  @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)

if @derive_on_calculation='y'
begin
	set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@calc_result_derive)	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','y')	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','prod_date')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','curve_id')
	--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~',CAST(@assessment_curve_type_value_id as varchar))
	EXEC spa_print  @sqlstmt1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)
end 

CREATE INDEX [IX_PT_temp_curves_source_curve_def_id_as_of_date_maturity_date] ON [#temp_curves] ([source_curve_def_id], [as_of_date], [maturity_date])
CREATE INDEX [IX_PT_temp_curves_as_of_date] ON [#temp_curves] ([as_of_date]) INCLUDE ([source_curve_def_id], [maturity_date])
CREATE INDEX [IX_PT_temp_curves_source_curve_def_id_maturity_date] ON [#temp_curves] ([source_curve_def_id],[maturity_date]) INCLUDE ([curve_value])

SET @sqlstmt ='
	insert into #temp_curves_settlement (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value,exp_calendar_id)
	select spc.~source_curve_def_id~, CASE WHEN s_cids.curve_granularity = 980 THEN '''+@curve_as_of_date+''' ELSE spc.as_of_date END as_of_date
	, '+CAST(@assessment_curve_type_value_id as varchar)+', spc.curve_source_value_id,
			spc.~maturity_date~, spc.is_dst, spc.~curve_value~*factor curve_value , spc.as_of_date, s_cids.curve_granularity
	,spc.~bid_value~*factor bid_value,spc.~ask_value~*factor ask_value,s_cids.exp_calendar_id
	from #s_cids1 s_cids inner join
	'+CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE '~source_price_curve~' END +' spc 
	 on spc.~source_curve_def_id~ = s_cids.curve_id AND  s_cids.derive_on_calculation=''~derive_on_calculation~'' and spc.as_of_date = ISNULL(s_cids.pnl_as_of_date, spc.as_of_date)
		'+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END+ ' AND
		((s_cids.exp_calendar_id IS NOT NULL AND 
			year(spc.~maturity_date~) = year(s_cids.maturity_date) AND month(spc.~maturity_date~) = month(s_cids.maturity_date) AND 
			day(spc.~maturity_date~) = day(s_cids.maturity_date)) OR
			--If calendar not defined assume daily and as of date equals maturity date
			(s_cids.exp_calendar_id IS NULL AND convert(varchar(10),spc.~maturity_date~,120) =convert(varchar(10),spc.as_of_date,120) AND
				spc.~maturity_date~ BETWEEN '''+@term_start+''' and case when ('''+@term_end+''' > '''+@as_of_date+''') then '''+@as_of_date+' 23:59:59'' else '''+@term_end+' 23:59:59'' end
		))	
		AND curve_source_value_id = '+CAST(@curve_source_value_id AS VARCHAR)+' 
	LEFT JOIN #temp_curves_settlement tc ON tc.source_curve_def_id = spc.~source_curve_def_id~ AND 
		convert(varchar(10),tc.maturity_date,120) = convert(varchar(10),spc.~maturity_date~,120) 
	WHERE tc.maturity_date IS NULL AND spc.~curve_value~ IS NOT NULL '


set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~','source_price_curve')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','n')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','maturity_date')
set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','curve_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','bid_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','ask_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','source_curve_def_id')

--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~','spc.Assessment_curve_type_value_id')
EXEC spa_print  @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)

if @derive_on_calculation='y'
begin
	set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@calc_result_derive)	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','y')	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','prod_date')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','curve_id')
	--set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~',CAST(@assessment_curve_type_value_id as varchar))
	EXEC spa_print  @sqlstmt1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)
end 

-- average the settlement price for curve_granularity monthly and having exp_calendar_id in curve
insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value,location_id,commodity_id)
select source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value,location_id,commodity_id
from #temp_curves_settlement
where exp_calendar_id is null or curve_granularity<>980

insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value,location_id,commodity_id)
select source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, avg(curve_value), max(pnl_as_of_date), max(curve_granularity), avg(bid_value), avg(ask_value) ,location_id,commodity_id
from #temp_curves_settlement
where exp_calendar_id is not null and curve_granularity=980
	group by source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst,location_id,commodity_id


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '**************** End of Collecting curve id maturity date and pnl as of date*****************************'	
END

--Only insert price curves that are not already picked up in #temp_curves
set @sqlstmt = '
	insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value)
	select	spc.source_curve_def_id, spc.as_of_date, spc.assessment_curve_type_value_id, spc.curve_source_value_id,
			spc.~maturity_date~, spc.is_dst, spc.curve_value, spc.pnl_as_of_date, spc.curve_granularity
			,spc.bid_value bid_value,spc.ask_value ask_value
	FROM
	(	
	select	cids.curve_id source_curve_def_id, 
			cids.as_of_date, '+CAST(@assessment_curve_type_value_id as varchar) +' assessment_curve_type_value_id , spc.curve_source_value_id, spc.~maturity_date~,isnull(spc.is_dst,0) is_dst,
			cids.factor * spc.~curve_value~  curve_value, 
			cids.pnl_as_of_date pnl_as_of_date, cids.curve_granularity
			,cids.factor * spc.~bid_value~ bid_value,cids.factor * spc.~ask_value~ ask_value
	from (
		select distinct as_of_date,pnl_as_of_date,curve_id, year(maturity_date) yr, curve_granularity, factor from #cids 
			where derive_on_calculation=''~derive_on_calculation~''  
		) cids  inner join --left outer join
	' + CASE WHEN @criteria_id<0 THEN 'source_price_curve_simulation' ELSE '~source_price_curve~' END  + ' spc  ON 
		cids.curve_id = spc.~source_curve_def_id~ AND
		year(spc.~maturity_date~)=cids.yr  AND
		cids.pnl_as_of_date = spc.as_of_date AND 
		~spc.assessment_curve_type_value_id~ = ' + cast(@assessment_curve_type_value_id as varchar) + '
		AND spc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' 
		'+CASE WHEN @criteria_id<0 THEN ' AND spc.run_date = '''+@run_date+'''' ELSE '' END+ '
	where spc.~curve_value~ IS NOT NULL
	) spc  
	left join #temp_curves tc ON tc.source_curve_def_id = spc.source_curve_def_id AND 
		convert(varchar(10),tc.maturity_date,120) = convert(varchar(10),spc.~maturity_date~,120) 
	WHERE tc.maturity_date IS NULL	AND spc.curve_value IS NOT NULL
'
	
set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~','source_price_curve')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','n')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','maturity_date')
set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','curve_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','bid_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','ask_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','source_curve_def_id')
set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~','spc.Assessment_curve_type_value_id')

EXEC spa_print  @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)


if @derive_on_calculation='y'
begin
	set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@calc_result_derive)	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','y')	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','prod_date')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','curve_id')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~',CAST(@assessment_curve_type_value_id as varchar))
	EXEC spa_print  @sqlstmt1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)
end

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Selecting price curves1*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--Intrest Rates/Bonds
set @sqlstmt = '
	insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value) 
	select DISTINCT spc.~source_curve_def_id~, spc.as_of_date,'+ CAST(@assessment_curve_type_value_id as varchar)+',spc.curve_source_value_id, spc.~maturity_date~,spc.is_dst, spc.~curve_value~,spc.as_of_date,a.curve_granularity ,spc.~bid_value~,spc.~ask_value~
	from #temp_deals a inner join ~source_price_curve~ spc  ON a.curve_id = spc.~source_curve_def_id~ and
			spc.as_of_date = a.curve_as_of_date and 
			spc.~maturity_date~= a.term_end and
			~spc.assessment_curve_type_value_id~ = ' + cast(@assessment_curve_type_value_id as varchar) + ' and
			spc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' 
		inner join source_price_curve_def spcd on spcd.source_curve_def_id =spc.~source_curve_def_id~ and isnull(spcd.derive_on_calculation,''n'')=''~derive_on_calculation~'' 
		left outer join #temp_curves tc ON tc.source_curve_def_id = spc.~source_curve_def_id~ and
			tc.as_of_date = spc.as_of_date and tc.maturity_date = spc.~maturity_date~
	where a.curve_id IS NOT NULL AND (a.internal_deal_type_value_id = 6 OR a.internal_deal_type_value_id = 7) AND
		tc.source_curve_def_id IS NULL --AND a.derived_curve = ''n''
'

set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@source_price_curve)	
set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','n')	
set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','maturity_date')
set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','curve_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','bid_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','ask_value')
set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','source_curve_def_id')
set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~','spc.Assessment_curve_type_value_id')
EXEC spa_print  @sqlstmt1
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)

if @derive_on_calculation='y'
begin
	set @sqlstmt1=REPLACE(@sqlstmt,'~source_price_curve~',@calc_result_derive)	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~derive_on_calculation~','y')	
	set @sqlstmt1=REPLACE(@sqlstmt1,'~maturity_date~','prod_date')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~curve_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~bid_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~ask_value~','formula_eval_value')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~source_curve_def_id~','curve_id')
	set @sqlstmt1=REPLACE(@sqlstmt1,'~spc.Assessment_curve_type_value_id~',CAST(@assessment_curve_type_value_id as varchar))
	EXEC spa_print  @sqlstmt1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt1)
end

-----------------------------------------------------------------------------------------------------
----- Start RTC hourly price population------------------------
	
--select *
--		from #temp_curves where curve_granularity in (10000289,10000290) and source_curve_def_id=11430 and maturity_date='2020-01-01'

--		select *
--		from #temp_curves where curve_granularity in (10000289,10000290) and source_curve_def_id=10073 and maturity_date='2020-01-02'


--return


-- copy price from proxy curve value
insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value,block_define_id)
select	cids.curve_id source_curve_def_id, cids.as_of_date
	,@assessment_curve_type_value_id assessment_curve_type_value_id 
	,spc1.curve_source_value_id 
	,cids.maturity_date,0 is_dst
	,cids.factor * spc1.curve_value curve_value
	,cids.pnl_as_of_date, spcd1.granularity
	,cids.factor * spc1.bid_value bid_value
	,cids.factor * spc1.ask_value ask_value
	,spcd1.block_define_id
--select spc1.* 
from  (
		select distinct as_of_date,pnl_as_of_date,curve_id, maturity_date,curve_granularity, factor,maturity_date_end 
		from #cids where curve_granularity in (10000289,10000290) --and curve_id=10073 and maturity_date='2020-01-03'
	) cids  
	left join #temp_curves tc on cids.curve_id = tc.source_curve_def_id AND tc.maturity_date =cids.maturity_date AND tc.as_of_date =cids.as_of_date
	INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = cids.curve_id and tc.source_curve_def_id is null
	left JOIN source_price_curve_def spcd1 ON spcd1.source_curve_def_id = spcd.proxy_source_curve_def_id
	left JOIN #temp_curves spc1 ON spc1.source_curve_def_id = spcd1.source_curve_def_id
		AND spc1.as_of_date = cids.as_of_date AND spc1.maturity_date = case when spcd1.granularity=10000289 then convert(varchar(8),cids.maturity_date,120)+'01' else cids.maturity_date end --(proxy is monthly granularity only)
where tc.source_curve_def_id is null  -- Takig price from proxy for missing price (proxy is monthly granularity only)
	and spc1.curve_value is not null


--	select * from #rtc_curve_info where main_curve_id=9386 and child_curve_id=10073


-- select @default_dst_group 102202

select distinct rci.block_define_id,term_date,hr1,hr2,hr3,hr4,hr5,hr6,hr7,hr8,hr9,hr10,hr11,hr12,hr13,hr14,hr15,hr16,hr17,hr18,hr19,hr20,hr21,hr22,hr23,hr24
into #rtc_hour_block_term
from (
	select  spcd.block_define_id,min(maturity_date) term_start,maX(maturity_date_end) term_end from #cids rtc
		inner join source_price_curve_def spcd on spcd.source_curve_def_id=rtc.curve_id and spcd.granularity in (10000289,10000290)
	group by spcd.block_define_id
) rci
	left join hour_block_term hb on hb.block_define_id=rci.block_define_id
		and term_date between rci.term_start and rci.term_end and hb.dst_group_value_id=102202

create index indx_rtc_hour_block_term_01 on #rtc_hour_block_term (block_define_id,term_date) include (hr1,hr2,hr3,hr4,hr5,hr6,hr7,hr8,hr9,hr10,hr11,hr12,hr13,hr14,hr15,hr16,hr17,hr18,hr19,hr20,hr21,hr22,hr23,hr24 )


select rci.main_curve_id curve_id,hb.term_date,max(rci.as_of_date) as_of_date
	,isnull(max(nullif(hr1,0) *tc_d.curve_value),max(nullif(hr1,0) *tc_m.curve_value)) [1]
	,isnull(max(nullif(hr2,0) *tc_d.curve_value),max(nullif(hr2,0) *tc_m.curve_value)) [2]
	,isnull(max(nullif(hr3,0) *tc_d.curve_value),max(nullif(hr3,0) *tc_m.curve_value)) [3]
	,isnull(max(nullif(hr4,0) *tc_d.curve_value),max(nullif(hr4,0) *tc_m.curve_value)) [4]
	,isnull(max(nullif(hr5,0) *tc_d.curve_value),max(nullif(hr5,0) *tc_m.curve_value)) [5]
	,isnull(max(nullif(hr6,0) *tc_d.curve_value),max(nullif(hr6,0) *tc_m.curve_value)) [6]
	,isnull(max(nullif(hr7,0) *tc_d.curve_value),max(nullif(hr7,0) *tc_m.curve_value)) [7]
	,isnull(max(nullif(hr8,0) *tc_d.curve_value),max(nullif(hr8,0) *tc_m.curve_value)) [8]
	,isnull(max(nullif(hr9,0) *tc_d.curve_value),max(nullif(hr9,0) *tc_m.curve_value)) [9]
	,isnull(max(nullif(hr10,0) *tc_d.curve_value),max(nullif(hr10,0) *tc_m.curve_value)) [10]
	,isnull(max(nullif(hr11,0) *tc_d.curve_value),max(nullif(hr11,0) *tc_m.curve_value)) [11]
	,isnull(max(nullif(hr12,0) *tc_d.curve_value),max(nullif(hr12,0) *tc_m.curve_value)) [12]
	,isnull(max(nullif(hr13,0) *tc_d.curve_value),max(nullif(hr13,0) *tc_m.curve_value)) [13]
	,isnull(max(nullif(hr14,0) *tc_d.curve_value),max(nullif(hr14,0) *tc_m.curve_value)) [14]
	,isnull(max(nullif(hr15,0) *tc_d.curve_value),max(nullif(hr15,0) *tc_m.curve_value)) [15]
	,isnull(max(nullif(hr16,0) *tc_d.curve_value),max(nullif(hr16,0) *tc_m.curve_value)) [16]
	,isnull(max(nullif(hr17,0) *tc_d.curve_value),max(nullif(hr17,0) *tc_m.curve_value)) [17]
	,isnull(max(nullif(hr18,0) *tc_d.curve_value),max(nullif(hr18,0) *tc_m.curve_value)) [18]
	,isnull(max(nullif(hr19,0) *tc_d.curve_value),max(nullif(hr19,0) *tc_m.curve_value)) [19]
	,isnull(max(nullif(hr20,0) *tc_d.curve_value),max(nullif(hr20,0) *tc_m.curve_value)) [20]
	,isnull(max(nullif(hr21,0) *tc_d.curve_value),max(nullif(hr21,0) *tc_m.curve_value)) [21]
	,isnull(max(nullif(hr22,0) *tc_d.curve_value),max(nullif(hr22,0) *tc_m.curve_value)) [22]
	,isnull(max(nullif(hr23,0) *tc_d.curve_value),max(nullif(hr23,0) *tc_m.curve_value)) [23]
	,isnull(max(nullif(hr24,0) *tc_d.curve_value),max(nullif(hr24,0) *tc_m.curve_value)) [24]

into #rtc_hourly_block_curve_value    -- select * from #rtc_hourly_block_curve_value order by 1,3
from (
		select main_curve_id,child_curve_id,block_define_id,maturity_date,min(term_start) term_start
			,max(term_end) term_end,max(as_of_date) as_of_date 
		from #rtc_curve_info --where main_curve_id=9386
		group by main_curve_id,child_curve_id,block_define_id,maturity_date
	) rci
	left join #temp_curves tc_d on tc_d.source_curve_def_id=rci.child_curve_id and tc_d.as_of_date=rci.as_of_date --'2019-10-21' --rtc.as_of_date
		and tc_d.maturity_date=rci.maturity_date and tc_d.curve_granularity=10000290
	left join #temp_curves tc_m on tc_m.source_curve_def_id=rci.child_curve_id and tc_m.as_of_date=rci.as_of_date --'2019-10-21' --rtc.as_of_date
		and tc_m.maturity_date=rci.maturity_date and tc_m.curve_granularity=10000289
	left join #rtc_hour_block_term hb on hb.block_define_id=coalesce(tc_d.block_define_id,tc_m.block_define_id,rci.block_define_id)
		and hb.term_date between rci.term_start and rci.term_end 
	left join #temp_curves tc on tc.source_curve_def_id=rci.main_curve_id and hb.term_date=convert(varchar(10),tc.maturity_date,120)
		and tc.as_of_date=case when @calc_type='s' then tc.as_of_date else rci.as_of_date end
where tc.source_curve_def_id is null
group by rci.main_curve_id,hb.term_date

select  curve_id,as_of_date,convert(varchar(10),unpvt.term_date,120) +' '+right('0'+cast([Hours]-1 as varchar),2) +':00:00.000' maturity_date,curve_value
INTO #rtc_temp_curves -- select distinct * from #rtc_temp_curves order by 1,3
from  #rtc_hourly_block_curve_value  p
UNPIVOT
(curve_value for [Hours] IN
	([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
) AS unpvt
where curve_value is not null

DELETE #temp_curves where curve_granularity in (10000289,10000290)

insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value)
select	rtc.curve_id source_curve_def_id, rtc.as_of_date
	,@assessment_curve_type_value_id assessment_curve_type_value_id 
	,4500 curve_source_value_id, rtc.maturity_date,null is_dst
	,rtc.curve_value curve_value
	,rtc.as_of_date pnl_as_of_date,982 curve_granularity
	,rtc.curve_value bid_value
	,rtc.curve_value ask_value
from #rtc_temp_curves rtc
	left join #temp_curves tc on rtc.curve_id=tc.source_curve_def_id and rtc.maturity_date=tc.maturity_date 
	and tc.as_of_date=case when @calc_type='s' then tc.as_of_date else rtc.as_of_date end
where tc.source_curve_def_id is null

-- End RTC hourly price population------------------------
-----------------------------------------------------------------------------------------------------

--Effective Date Apply: If price are not found in curve_as_date then take price of most recent available as_of_date
-----------------------------------------------------------------------------------------------------------------------------------
insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
	curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value)
select	cids.curve_id source_curve_def_id, cids.as_of_date
		, @assessment_curve_type_value_id assessment_curve_type_value_id 
		, spc.curve_source_value_id, spc.maturity_date,isnull(spc.is_dst,0) is_dst,
		cids.factor * spc.curve_value curve_value, 
		cids.pnl_as_of_date pnl_as_of_date, cids.curve_granularity
		,cids.factor * spc.bid_value bid_value,cids.factor * spc.ask_value ask_value
from  (
		select distinct as_of_date,pnl_as_of_date,curve_id, maturity_date --year(maturity_date) yr
		, curve_granularity, factor,maturity_date_end from #cids where derive_on_calculation='n'  and effective_date_apply='y'
	) cids  
	outer apply
	( 
		select top(1) as_of_date from #temp_curves tc where cids.curve_id = tc.source_curve_def_id AND tc.maturity_date =cids.maturity_date --AND year(tc.maturity_date) =cids.yr
	) ex 
	outer apply
	( 
		select max(as_of_date) as_of_date from source_price_curve  
		where source_curve_def_id=cids.curve_id 
			and maturity_date between  cids.maturity_date and cids.maturity_date_end
			AND as_of_date < cids.pnl_as_of_date
			--AND assessment_curve_type_value_id = @assessment_curve_type_value_id
			AND curve_source_value_id = @curve_source_value_id 
			and ex.as_of_date is null
	) max_aod
	inner join source_price_curve spc  ON cids.curve_id = spc.source_curve_def_id AND 
		spc.maturity_date between cids.maturity_date and cids.maturity_date_end AND spc.as_of_date =max_aod.as_of_date 
			--AND spc.assessment_curve_type_value_id = @assessment_curve_type_value_id
			AND spc.curve_source_value_id = @curve_source_value_id 
WHERE ex.as_of_date is null
	
--    select * from #temp_curves
--return
-------------------------------------------------------------------------------------------------------------------------------------	 

------------------------ taking price multiplier curve_value.
--------------------------------------------------------------------------------------------------------------------------------------
UPDATE tc
	SET tc.curve_value = tc.curve_value * spc.curve_value
--  select   spc.curve_value,tc.*
FROM #temp_curves tc 
	inner join source_price_curve_def spcd1  ON spcd1.source_curve_def_id = tc.source_curve_def_id
	inner join source_price_curve_def spcd  ON spcd.source_curve_def_id = spcd1.liquidation_multiplier
	cross apply(
		SELECT MAX(as_of_date) as_of_date FROM source_price_curve where source_curve_def_id = spcd.source_curve_def_id 
			AND curve_source_value_id=tc.curve_source_value_id
			AND 
			CASE WHEN (spcd.Granularity = 980) THEN convert(varchar(7),maturity_date,120)+'-01'
				WHEN (spcd.Granularity = 991) THEN convert(varchar(5),maturity_date,120)+right('0'+cast(CASE datepart(q,maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) ,2)+ '-01'
				WHEN (spcd.Granularity = 992) THEN convert(varchar(5),maturity_date,120)+ right('0'+cast(CASE datepart(q,maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar),2) + '-01' 
				WHEN (spcd.Granularity = 993) THEN convert(varchar(4),maturity_date,120) + '-01-01' 
				ELSE convert(varchar(10),maturity_date,120) 
			END	=CASE WHEN (spcd.Granularity = 980) THEN convert(varchar(7),tc.maturity_date,120)+'-01'
				WHEN (spcd.Granularity = 991) THEN convert(varchar(5),tc.maturity_date,120)+right('0'+cast(CASE datepart(q,tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) ,2)+ '-01'
				WHEN (spcd.Granularity = 992) THEN convert(varchar(5),tc.maturity_date,120)+ right('0'+cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar),2) + '-01' 
				WHEN (spcd.Granularity = 993) THEN convert(varchar(4),tc.maturity_date,120) + '-01-01' 
				ELSE convert(varchar(10),tc.maturity_date,120) 
			END AND as_of_date<=tc.as_of_date
	) aod
	inner join source_price_curve spc on spc.source_curve_def_id=spcd.source_curve_def_id 
		AND spc.curve_source_value_id=tc.curve_source_value_id
		AND spc.as_of_date = aod.as_of_date
		AND CASE WHEN (spcd.Granularity = 980) THEN convert(varchar(7),spc.maturity_date,120)+'-01'
			WHEN (spcd.Granularity = 991) THEN convert(varchar(5),spc.maturity_date,120)+right('0'+cast(CASE datepart(q, spc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) ,2)+ '-01'
			WHEN (spcd.Granularity = 992) THEN convert(varchar(5),spc.maturity_date,120)+ right('0'+cast(CASE datepart(q,spc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar),2) + '-01' 
			WHEN (spcd.Granularity = 993) THEN convert(varchar(4),spc.maturity_date,120) + '-01-01' 
			ELSE convert(varchar(10),spc.maturity_date,120) 
		end = CASE WHEN (spcd.Granularity = 980) THEN convert(varchar(7),tc.maturity_date,120)+'-01'
			WHEN (spcd.Granularity = 991) THEN convert(varchar(5),tc.maturity_date,120)+right('0'+cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) ,2)+ '-01'
			WHEN (spcd.Granularity = 992) THEN convert(varchar(5),tc.maturity_date,120)+ right('0'+cast(CASE datepart(q,tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar),2) + '-01' 
			WHEN (spcd.Granularity = 993) THEN convert(varchar(4),tc.maturity_date,120) + '-01-01' 
			ELSE convert(varchar(10),tc.maturity_date,120) 
		end
where spc.curve_value is not null

-------------------------------------------------------------------------------------------------------------------------
IF OBJECT_ID('tempdb..#vwDealTimezone') IS NOT NULL DROP TABLE #vwDealTimezone

select distinct td.source_deal_header_id,isnull(sdd.curve_id,-1) curve_id,isnull(td.formula_curve_id,-1) formula_curve_id,isnull(sdd.location_id,-1) location_id ,max(tz.dst_group_value_id) dst_group_value_id
into #vwDealTimezone -- select * from #vwDealTimezone
from source_deal_header sdh
INNER JOIN dbo.source_deal_detail td on td.source_deal_header_id=sdh.source_deal_header_id
--inner join #temp_deals td on td.source_deal_header_id = sdh.source_deal_header_id
cross apply
( 
select distinct location_id,curve_id from dbo.source_deal_detail where source_deal_detail_id=td.source_deal_detail_id
 union all
  select distinct null location_id,curve_id from dbo.deal_position_break_down where source_deal_detail_id=td.source_deal_detail_id
 union all
  select distinct location_id, curve_id from #temp_deals where source_deal_detail_id=td.source_deal_detail_id
) sdd 
left join dbo.source_minor_location sml (nolock) on sml.source_minor_location_id=sdd.location_id
left join dbo.source_price_curve_def spcd (nolock) on spcd.source_curve_def_id=sdd.curve_id
cross join 
(
	select var_value default_timezone_id from dbo.adiha_default_codes_values (nolock) WHERE instance_no = 1 AND default_code_id = 36 AND seq_no = 1
) df  
inner join dbo.time_zones tz (nolock) on tz.timezone_id = coalesce(sdh.timezone_id,sml.time_zone,spcd.time_zone,df.default_timezone_id)
group by td.source_deal_header_id,sdd.curve_id,sdd.location_id, td.formula_curve_id

create index indx_vwDealTimezone_001 on #vwDealTimezone (source_deal_header_id,curve_id,location_id) include (dst_group_value_id)

--select * from #temp_curves where source_curve_def_id=7226
--return
--For REC MTM Calculation
IF @calc_type <> 's'
BEGIN
	UPDATE pd SET pd.volume = (ISNULL(pd.volume, 0) + rnk.deal_volume) - (ISNULL(mhdi.assigned, 0))
	--SELECT pd.volume,rnk.deal_volume,pd1.vol,mhdi.assigned, pd.volume, rnk.curve_id
	--select ISNULL(pd.volume, 0), rnk.deal_volume, ISNULL(mhdi.assigned, 0)--,ISNULL(pd.volume, 0)
	FROM #temp_deals td
	INNER JOIN #product_detail pd ON pd.source_deal_detail_id = td.source_deal_detail_id
	INNER JOIN (
				SELECT td.source_deal_detail_id,
					td.curve_id,
					td.deal_volume,
					state_value_id,
					tier_value_id,
					rnk = ROW_NUMBER() OVER (PARTITION BY td.source_deal_detail_id ORDER BY curve_value),
					rnk1 = ROW_NUMBER() OVER (PARTITION BY td.source_deal_detail_id ORDER BY curve_value DESC)
				FROM #temp_deals td
				INNER JOIN #temp_curves tc ON tc.source_curve_def_id = td.curve_id
				AND ((YEAR(tc.maturity_date) = YEAR(td.term_start) AND tc.curve_granularity = 993) OR 
				tc.maturity_date = td.term_start)
				WHERE td.state_value_id IS NOT NULL) rnk ON 1 = CASE WHEN td.buy_sell_flag = 'b' THEN rnk1 ELSE rnk END
		AND rnk.source_deal_detail_id = td.source_deal_detail_id
		AND rnk.curve_id = td.curve_id
		AND rnk.state_value_id = td.state_value_id
		AND rnk.tier_value_id = td.tier_value_id
	OUTER APPLY(SELECT SUM(assigned_vol) assigned 
				FROM matching_header_detail_info mhdi 
				WHERE td.source_deal_detail_id = CASE WHEN td.buy_sell_flag = 'b' THEN 
													mhdi.source_deal_detail_id_from 
												ELSE mhdi.source_deal_detail_id END) mhdi
	WHERE pd.price_index = td.curve_id
	AND pd.state_value_id = td.state_value_id
	AND pd.tier_value_id = td.tier_value_id

	DELETE td 
	FROM #temp_deals td
	INNER JOIN #product_detail pd ON pd.source_deal_detail_id = td.source_deal_detail_id
	WHERE pd.price_index = td.curve_id
	AND pd.state_value_id = td.state_value_id
	AND pd.tier_value_id = td.tier_value_id
	AND pd.volume IS NULL

	;WITH dupIndex AS(
			SELECT *,
				ROW_NUMBER() OVER (PARTITION BY source_deal_header_id,
					source_deal_detail_id,
					state_value_id,
					tier_value_id
				ORDER BY source_deal_header_id,
					source_deal_detail_id,
					volume DESC) AS rnk
			FROM #product_detail
			)
	DELETE FROM dupIndex WHERE rnk > 1 AND volume IS NULL

	--UPDATE pd SET pd.volume = ISNULL(pd.volume, 0) + ISNULL(vol.volume, 0)
	--FROM #product_detail pd
	--INNER JOIN source_deal_detail sdd on sdd.source_deal_detail_id = pd.source_deal_detail_id
	--OUTER APPLY(SELECT SUM(assigned_vol) volume 
	--			FROM matching_header_detail_info mhdi
	--			WHERE mhdi.state_value_id = pd.state_value_id
	--			AND mhdi.tier_value_id = pd.tier_value_id
	--			AND pd.source_deal_detail_id = CASE WHEN sdd.buy_sell_flag = 's' THEN mhdi.source_deal_detail_id ELSE mhdi.source_deal_detail_id_from END
	--			) vol

	UPDATE td SET td.deal_volume = ISNULL(pd.volume, 0)
	FROM #temp_deals td
	LEFT JOIN #product_detail pd ON pd.source_deal_detail_id = td.source_deal_detail_id
		AND pd.price_index = td.curve_id
		AND pd.state_value_id = td.state_value_id
		AND pd.tier_value_id = td.tier_value_id
	WHERE td.state_value_id IS NOT NULL

	DELETE td 
	FROM #temp_deals td
	LEFT JOIN #product_detail pd ON pd.source_deal_detail_id = td.source_deal_detail_id
	WHERE ISNULL(td.deal_volume, 0) = 0 
	AND td.state_value_id IS NOT NULL
	AND pd.source_deal_detail_id IS NULL

END
/* New Hourly-Monthly, TOU_Monthly and RTC Curve Logic END*/

--New Shift Enhancement Start
--DT: 12-Aug-2015 - sbohara
IF OBJECT_ID('tempdb..#tmp_as_of_date') IS NOT NULL DROP TABLE #tmp_as_of_date
SELECT 
	spc.source_curve_def_id,
	MAX(spc.as_of_date) as_of_date
INTO #tmp_as_of_date	
FROM source_price_curve spc
INNER JOIN #whatif_shift_mtm_new wsmn ON spc.source_curve_def_id = wsmn.curve_shift_val
WHERE as_of_date <= @curve_as_of_date AND curve_source_value_id = @curve_source_value_id
GROUP BY spc.source_curve_def_id

IF OBJECT_ID('tempdb..#source_price_curve') IS NOT NULL DROP TABLE #source_price_curve
SELECT  
	DATEDIFF(MM, taod.as_of_date, maturity_date) id, 
	wsm.curve_id source_curve_def_id, 
	@as_of_date as_of_date, 
	spc.curve_source_value_id, 
	spc.maturity_date, 
	spc.curve_value,
	spc.bid_value,
	spc.ask_value,
	spcd.Granularity
INTO #source_price_curve	 
FROM source_price_curve spc
INNER JOIN #tmp_as_of_date taod ON taod.source_curve_def_id = spc.source_curve_def_id
	AND taod.as_of_date = spc.as_of_date
INNER JOIN source_price_curve_def spcd ON spc.source_curve_def_id = spcd.source_curve_def_id
	AND spcd.Granularity = 980
INNER JOIN #whatif_shift_mtm_new wsm ON spcd.source_curve_def_id = wsm.curve_shift_val
WHERE spc.curve_source_value_id	= 4500
	AND DATEDIFF(MM, taod.as_of_date, maturity_date) >= 0
ORDER BY spc.maturity_date	
	
IF OBJECT_ID('tempdb..#min_id') IS NOT NULL DROP TABLE #min_id	
SELECT
	source_curve_def_id, 
	MIN(id) min_id
INTO #min_id	
FROM #source_price_curve GROUP BY source_curve_def_id
	
IF OBJECT_ID('tempdb..#temp_curves_one') IS NOT NULL DROP TABLE #temp_curves_one
SELECT 
	CASE WHEN mi.min_id >= DATEDIFF(MM, tc.as_of_date, maturity_date) THEN mi.min_id ELSE DATEDIFF(MM, tc.as_of_date, maturity_date) END id, 
	tc.* 
INTO #temp_curves_one 
FROM #temp_curves tc
INNER JOIN #whatif_shift_mtm_new wsm ON tc.source_curve_def_id = wsm.curve_id
INNER JOIN #tmp_as_of_date taod ON taod.source_curve_def_id = wsm.curve_shift_val
	AND DATEDIFF(MM, tc.as_of_date, maturity_date) >= 0
LEFT JOIN #min_id mi ON tc.source_curve_def_id	= mi.source_curve_def_id
ORDER BY CONVERT(VARCHAR(7), tc.maturity_date, 120)

DELETE tc  FROM #temp_curves tc
INNER JOIN #whatif_shift_mtm_new wsm ON tc.source_curve_def_id = wsm.curve_id

UPDATE 
	tco SET curve_value = CASE wsm.shift_by WHEN 'c' THEN tco.curve_value*(1+spc.curve_value/100) ELSE tco.curve_value+spc.curve_value END
	,bid_value = CASE wsm.shift_by WHEN 'c' THEN tco.bid_value*(1+spc.bid_value/100) ELSE tco.bid_value+spc.bid_value END
	,ask_value = CASE wsm.shift_by WHEN 'c' THEN tco.ask_value*(1+spc.ask_value/100) ELSE tco.ask_value+spc.ask_value END
FROM #temp_curves_one tco
INNER JOIN #source_price_curve spc ON tco.id = spc.id
	AND tco.source_curve_def_id = spc.source_curve_def_id
INNER JOIN #whatif_shift_mtm_new wsm ON spc.source_curve_def_id = wsm.curve_id

--New Shift Enhancement End

IF EXISTS(SELECT 1 FROM #whatif_shift_mtm)
update #temp_curves 
set curve_value= curve_value * isnull(curve_shift_per,1)+isnull(curve_shift_val,0) 
	,bid_value= bid_value * isnull(curve_shift_per,1)+isnull(curve_shift_val,0) 
	,ask_value= ask_value * isnull(curve_shift_per,1)+isnull(curve_shift_val,0) 
from #temp_curves c left join #whatif_shift_mtm wif on c.source_curve_def_id=wif.curve_id
		  
INSERT INTO #temp_curves(source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,deal_curve_id,bid_value,ask_value)
SELECT source_curve_def_id, as_of_date, assessment_curve_type_value_id, curve_source_value_id, maturity_date, is_dst, curve_value
	, pnl_as_of_date, curve_granularity, deal_curve_id,bid_value,ask_value FROM #temp_curves_one 		  


--select * from #cids
-- select * from #temp_curves


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Selecting price curves2*****************************'	
END

If @@ERROR <> 0
BEGIN
	--**ERROR**
	INSERT INTO #calc_status
		Select @process_id,'Error','MTM Calc','Run MTM','Application Error',
	'Failed to Insert Price Curve','Please contact technical support'
	GOTO FinalStep
	Return
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

update tc set
	curve_value=isnull(1/nullif(curve_value,0),0)
	,bid_value=isnull(1/nullif(bid_value,0),0)
	,ask_value=isnull(1/nullif(ask_value,0),0)
 from #temp_curves tc inner join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	and spcd.source_curve_type_value_id=	576		--FX Curve

-- Deduct -7 hours for GAS-hour
select	source_commodity_id, [year], case when (source_commodity_id=-1) then DATEADD(DAY, -1, [date]) else [date] end [date],case when (source_commodity_id=-1) then [hour]+18 else [hour] end [hour],
		insert_delete  ,dst_group_value_id
into #mv90_dst -- select * from #mv90_dst where [year]=2020
from dbo.mv90_dst dst cross join dbo.source_commodity 

create index indx_mv90_dst on #mv90_dst (dst_group_value_id,[date],insert_delete,source_commodity_id)

-- taking next date from maturity date's price for supporting gas hour (commodity_id=-1)
select distinct tc.source_curve_def_id, tc.as_of_date, tc.Assessment_curve_type_value_id,
		tc.curve_source_value_id, cast(dateadd(day,1,tc.maturity_date) as date) maturity_date
		, tc.pnl_as_of_date, tc.curve_granularity
into #list_need_next_maturity_date_price --  select * from #list_need_next_maturity_date_price
from #temp_curves tc
  inner join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	and spcd.commodity_id=	-1 -- gas hour
	and spcd.granularity in (982,987,994,989,995)
left join #temp_curves tc1 on tc1.source_curve_def_id=tc.source_curve_def_id
	and tc1.as_of_date=case when @calc_type='s' then tc1.as_of_date else tc.as_of_date end
		AND   convert(varchar(10),tc.maturity_date,120)=convert(varchar(10),dateadd(day,-1,tc1.maturity_date),120)
where tc1.source_curve_def_id is null

insert into #temp_curves (source_curve_def_id, as_of_date, Assessment_curve_type_value_id,
		curve_source_value_id, maturity_date,is_dst, curve_value, pnl_as_of_date, curve_granularity,bid_value,ask_value)
select tc.source_curve_def_id, tc.as_of_date, tc.Assessment_curve_type_value_id,
		tc.curve_source_value_id,spc.maturity_date
		,spc.is_dst, spc.curve_value, tc.pnl_as_of_date, tc.curve_granularity,spc.bid_value,spc.ask_value

from #list_need_next_maturity_date_price tc
outer apply
(
	select max(as_of_date) as_of_date from source_price_curve where  source_curve_def_id=tc.source_curve_def_id
	and   cast(maturity_date as date)=tc.maturity_date
) aod
inner join source_price_curve spc on spc.as_of_date=case when @calc_type='s' then aod.as_of_date else tc.as_of_date end and spc.source_curve_def_id=tc.source_curve_def_id
	AND  cast(spc.maturity_date as date)=tc.maturity_date
	
update tc set maturity_date= dateadd(hour,-6,maturity_date)
 from #temp_curves tc inner join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	and spcd.commodity_id=	-1 -- gas hour
	and spcd.granularity in (982,987,994,989,995)

-----------------------------------------------------------



select	curve_id, term_start, contract_id, func_cur_id, Pricing,
		case when (curve_currency_id = func_cur_id) then NULL else func_cur_id end currency_id,
		MAX(curve_factor) factor, term_end
into #lag_curves
from #temp_deals where Pricing IN (1601 , 1602)
group by curve_id, term_start, contract_id, Pricing, func_cur_id,
			case when (curve_currency_id = func_cur_id) then NULL else func_cur_id end,
			term_end 


select	a.curve_id, a.term_start, a.term_end, 
		isnull(a.contract_id, -1) contract_id, isnull(a.func_cur_id, -1) func_cur_id,
		a.factor * 
		CASE WHEN pricing = 1602 THEN 
			dbo.FNAPartialAvgCurve(a.term_start,a.term_end, @curve_as_of_date, @curve_source_value_id,a.contract_id, a.curve_id,a.currency_id)
		WHEN pricing = 1601 AND  @curve_as_of_date < a.term_end THEN
			dbo.FNAPartialAvgCurve(a.term_start,@curve_as_of_date, @curve_as_of_date, @curve_source_value_id,a.contract_id, a.curve_id,a.currency_id)
		ELSE 
			dbo.FNARCLagcurve(a.term_start, @curve_as_of_date, @curve_source_value_id,a.contract_id, a.curve_id, 0, 0, 0, 1, a.currency_id, 0, 1, NULL, NULL,wif.curve_shift_val ,wif.curve_shift_per) 
		END	lag_curve_value
		,980 granularity
into #lag_curves_values
from #lag_curves a	LEFT JOIN #whatif_shift_mtm wif on a.curve_id=wif.curve_id	

create index indx_lag_curves_values_1 on #lag_curves_values (curve_id,contract_id,func_cur_id,term_start,term_end)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Selecting avg prices *****************************'	
END


--######################Neew Logic 2018-01-18 Update curve adder/multipler from location_price_index table

/* This block code degrade the performance, and is also not using now. So need to review the code ?????????????????????????????????
UPDATE tc
SET 
	tc.curve_value = tc.curve_value * ISNULL(lpi.multiplier,1)+ISNULL(lpi.adder,0)+ISNULL(spc2.curve_value,0)
FROM 
	location_price_index lpi
	INNER JOIN source_price_curve_def spcd  ON spcd.source_curve_def_id = lpi.curve_id
	LEFT JOIN source_price_curve_def spcd_p  ON spcd_p.source_curve_def_id = spcd.proxy_source_curve_def_id
	LEFT JOIN source_price_curve_def spcd_m  ON spcd_m.source_curve_def_id = spcd.monthly_index 
	LEFT JOIN source_price_curve_def spcd_s  ON spcd_s.source_curve_def_id = spcd.settlement_curve_id
	LEFT JOIN source_price_curve_def spcd_p3  ON spcd_p3.source_curve_def_id = spcd.proxy_curve_id3
	LEFT JOIN #temp_curves tc ON tc.location_id = lpi.location_id --AND tc.commodity_id=lpi.commodity_id 
	AND tc.source_curve_def_id = COALESCE(tc.source_curve_def_id, spcd_p.source_curve_def_id, spcd_m.source_curve_def_id, spcd_s.source_curve_def_id, spcd_p3.source_curve_def_id)
	OUTER APPLY(SELECT MAX(maturity_date) maturity_date,MAX(as_of_date) as_of_date FROM source_price_curve spc INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = spc.source_curve_def_id 
		WHERE spc.source_curve_def_id=lpi.adder_index_id
			AND spc.curve_source_value_id=tc.curve_source_value_id
			AND spc.maturity_date<=tc.maturity_date
			AND spc.as_of_date<=tc.as_of_date
	)spc1
	OUTER APPLY(
		SELECT curve_value FROM source_price_curve spc INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = spc.source_curve_def_id WHERE spc.source_curve_def_id=lpi.adder_index_id
			AND spc.curve_source_value_id=tc.curve_source_value_id
			AND spc.as_of_date = spc1.as_of_date
			AND spc.maturity_date = CASE WHEN spcd.granularity = 980 THEN CONVERT(VARCHAR(7),spc1.maturity_date,120)+'-01'
										 WHEN spcd.granularity = 981 THEN CONVERT(VARCHAR(10),spc1.maturity_date,120)
										 ELSE spc1.maturity_date END
		) spc2

--*/




--select * from source_price_curve where source_curve_def_id=7140
--update source_price_curve set as_of_date='2017-12-15'  where source_curve_def_id=7140 and as_of_date='2017-12-14'

--delete from source_price_curve where source_curve_def_id=7139




--################

-------------------------End of Step 4----------------------------------------
-- SELECT * FROM #temp_curves
-- SELECT * FROM #temp_leg_mtm

-- select * from  #temp_leg_mtm
-- select * from  #temp_deals
-- return

----------------------Step 5   calculate MTM. For each record in #temp_deals  ------------------------------
------------------------------------------------------------------------------------------------------------

DECLARE @lagging_deals_12 INT
declare @internal_deal_type_IR_6 INT
declare @internal_deal_type_Debt_7 INT

--Does lagging deals exist
If Exists (select top 1 1 from #temp_deals where  isnull(internal_deal_subtype_value_id, -1) = 12)
	SET @lagging_deals_12  = 1
else 
	SET @lagging_deals_12 = 0

--Does IR exist?
If Exists (select top 1 1 from #temp_deals where internal_deal_type_value_id = 6)
	SET @internal_deal_type_IR_6  = 1
else 
	SET @internal_deal_type_IR_6 = 0

--Does Debt exist?
If Exists (select top 1 1 from #temp_deals where internal_deal_type_value_id = 7)
	SET @internal_deal_type_Debt_7  = 1
else 
	SET @internal_deal_type_Debt_7 = 0



-- leg 2 curve_id put in formula curve_id as only taking price if difference is greater than 0 else 0 (Linear model option)

update td1 set formula_curve_id=td2.curve_id
FROM  #temp_deals td1 
inner join #temp_deals td2 on td1.source_deal_header_id=td2.source_deal_header_id 
	and td1.leg=1 and td2.leg=2 and td1.term_start=td2.term_start
where  td1.internal_deal_type_value_id=103 and td1.internal_deal_subtype_value_id=102 -- Linear model option'
and td1.formula_curve_id is null

if @@rowcount>0
delete   #temp_deals
where  leg=2 and internal_deal_type_value_id=103 and internal_deal_subtype_value_id=102 -- Linear model option'



--create temp table to save interim mtm calculation
CREATE TABLE #temp_leg_mtm (
	[source_deal_header_id] [int] NOT NULL ,
	[deal_id] varchar(200) COLLATE DATABASE_DEFAULT,
	[term_start] [datetime] NOT NULL ,
	[term_end] [datetime] NOT NULL ,
	[curve_id] [int] NULL ,
	[leg_mtm] [float] NULL,
	[leg_mtm_deal] [float] NULL,
	[leg_mtm_inv] [float] NULL,
	[leg_set] [float] NULL,
	[leg_set_deal] [float] NULL,
	[leg_set_inv] [float] NULL,
	[extrinsic_value_deal] [float] NULL,
	[accrued_interest] [float] NULL,
	[volume] [float] NULL,
	[leg] [int] NULL,
	[price_deal] [float] NULL,
	[discount_rate] [float] NULL,
	no_days_left [INT] NULL,
	days_year [INT] NULL,
	[discount_factor] [float] NULL,
	[expired_term] varchar(1) COLLATE DATABASE_DEFAULT NULL,
	[curve_as_of_date] datetime NULL,
	[internal_deal_type_value_id] INT  NULL,
	[internal_deal_subtype_value_id] INT  NULL,
	--new columns added to track part of source_deal_pnl_detail ub on 09/20/09
	curve_uom_conv_factor FLOAT NULL,
	curve_fx_conv_factor_deal FLOAT NULL,
	price_fx_conv_factor_deal FLOAT NULL,
    curve_value_deal FLOAT NULL,
	fixed_cost_deal float NULL,
	fixed_price_deal float NULL,
	formula_value_deal float NULL,
	price_adder_deal float NULL,
	price_multiplier float NULL,
	strike_price float NULL,
	buy_sell_flag varchar(1) COLLATE DATABASE_DEFAULT NULL,
	physical_financial_flag varchar(1) COLLATE DATABASE_DEFAULT NULL,
	fixed_cost_fx_conv_factor_deal float,
	formula_fx_conv_factor_deal float,
	price_adder1_fx_conv_factor_deal float,
	price_adder2_fx_conv_factor_deal float,
	volume_multiplier float,
	volume_multiplier2 float,
	price_adder2_deal float,
	pay_opposite varchar(1) COLLATE DATABASE_DEFAULT,
	error_deal INT,
	error_deal_reason varchar(500) COLLATE DATABASE_DEFAULT,
	curve_uom_id INT, 
	deal_volume_uom_id INT, 
	fixed_price_currency_id INT, 
	price_adder_currency INT, 
	price_adder2_currency INT, 
	func_cur_id INT, 
	formula_currency INT, 
	fixed_cost_currency INT,
	market_value FLOAT,
	market_value_deal FLOAT,
	market_value_inv FLOAT,
	contract_value FLOAT,
	contract_value_deal FLOAT,
	contract_value_inv FLOAT,
	simple_formula_curve_value float,
	simple_formula_curve_value_deal float,
	simple_formula_curve_value_inv float,
	formula_conv_factor FLOAT,
	formula_conv_factor_deal FLOAT,
	formula_conv_factor_inv FLOAT,
	formula_rounding INT,
	formula_id INT,
	contract_id INT,
	product_id INT,
	source_deal_detail_id INT,
	formula_curve_id INT,
	allocation_volume FLOAT,
	contract_price_deal FLOAT,
	market_price_deal FLOAT,
	deal_volume FLOAT,deal_cur_id int, inv_cur_id int

	,price FLOAT,extrinsic_value FLOAT,contract_price FLOAT,market_price FLOAT
	,price_inv FLOAT,extrinsic_value_inv FLOAT,contract_price_inv FLOAT, market_price_inv FLOAT

	,price_adder2_fx_conv_factor FLOAT,price_adder1_fx_conv_factor FLOAT
	,formula_fx_conv_factor FLOAT,fixed_cost_fx_conv_factor FLOAT
	,curve_fx_conv_factor FLOAT, price_fx_conv_factor FLOAT

	,price_adder2_fx_conv_factor_inv FLOAT,price_adder1_fx_conv_factor_inv FLOAT
	,formula_fx_conv_factor_inv FLOAT,fixed_cost_fx_conv_factor_inv FLOAT
	,curve_fx_conv_factor_inv FLOAT,price_fx_conv_factor_inv FLOAT

	,formula_value FLOAT,price_adder FLOAT
	,price_adder2 FLOAT,fixed_cost FLOAT
	,fixed_price FLOAT,curve_value FLOAT
	,formula_value_inv FLOAT,price_adder_inv FLOAT
	,price_adder2_inv FLOAT,fixed_cost_inv FLOAT
	,fixed_price_inv FLOAT,curve_value_inv FLOAT
	,must_run_volume numeric(18,6)
	,must_run_market_value numeric(18,6)
	,must_run_contract_value numeric(18,6)
	,dispatch_volume numeric(18,6)
	,dispatch_market_value numeric(18,6)
	,dispatch_contract_value numeric(18,6)	 			
	,tou_id int	
	,calc_mtm_at_tou_level varchar(1) COLLATE DATABASE_DEFAULT
	,shipment_id INT,
	ticket_detail_id INT,
	state_value_id INT,
	tier_value_id INT,
	mw_position FLOAT,
	match_info_id INT
) ON [PRIMARY]


select d.source_deal_header_id, d.leg,d.source_deal_detail_id, isnull(MAX(d.multiplier), 1) mult
INTO #simple_formula_multiplier -- select * from  #simple_formula_multiplier
from #temp_deals td INNER JOIN deal_position_break_down d ON td.source_deal_detail_id = d.source_deal_detail_id 
where td.formula_curve_id IS NOT NULL 
group by d.source_deal_header_id, d.leg,d.source_deal_detail_id


CREATE index indx_simple_formula_multiplier1 ON #simple_formula_multiplier (source_deal_detail_id,source_deal_header_id,leg)


select  d.source_deal_detail_id,d.source_deal_header_id, d.leg, d.formula_curve_id, d.contract_expiration_date,min(d.term_start) term_start
	, max(d.term_end) term_end, MAX(s.granularity) curve_granularity 
	,max(d.bid_n_ask_price) bid_n_ask_price,max(d.buy_sell_flag) buy_sell_flag,max(d.pay_opposite) pay_opposite
into #tmp_avg_curve_value -- select * from #tmp_avg_curve_value
from  #temp_deals d inner join source_price_curve_def s ON s.source_curve_def_id = d.formula_curve_id
where d.Pricing IN(1600,1607) AND formula_curve_id IS NOT NULL 
group by  d.source_deal_detail_id,d.source_deal_header_id,  d.leg,  d.formula_curve_id, d.contract_expiration_date

select	a.source_deal_detail_id,a.source_deal_header_id, a.leg, a.formula_curve_id curve_id, min(a.term_start) min_term_start, max(a.term_end) max_term_end
	,avg(
		case when isnull(a.bid_n_ask_price,'n')='n' then isnull(sett.curve_value,fw.curve_value)
		else  
			case when (a.buy_sell_flag='b' and a.pay_opposite='n') or (a.buy_sell_flag='s' and a.pay_opposite='y') then isnull(sett.curve_value_bid,fw.curve_value_bid)
			else isnull(sett.curve_value_ask,fw.curve_value_ask) end
		end) avg_curve_value
	, MAX(a.curve_granularity) curve_granularity
into #avg_temp_curves  -- select * from #avg_temp_curves 
from #tmp_avg_curve_value a
left join source_price_curve_def s ON s.source_curve_def_id = a.formula_curve_id 
outer apply (
	select 
		avg(coalesce(tc.curve_value,tc1.curve_value,tc2.curve_value,tc3.curve_value)) curve_value ,
		avg(coalesce(tc.bid_value,tc1.bid_value,tc2.bid_value,tc3.bid_value)) curve_value_bid ,
		avg(coalesce(tc.ask_value,tc1.ask_value,tc2.ask_value,tc3.ask_value)) curve_value_ask
	from  source_price_curve_def f 
		left join #temp_curves tc on tc.source_curve_def_id = a.formula_curve_id  
			AND tc.maturity_date >= a.term_start AND tc.maturity_date<a.term_end+1 and 
			tc.maturity_date >= case when a.curve_granularity in (981,987,989,982,994,995,997)  then dateadd(day,1,cast(@as_of_date as datetime)) else '1900-01-01' end
			and tc.as_of_date = case when (a.contract_expiration_date < @curve_as_of_date) then a.contract_expiration_date else @curve_as_of_date end
		left join #temp_curves tc1 ON tc1.source_curve_def_id = s.proxy_source_curve_def_id 
			AND tc1.maturity_date >= a.term_start AND tc1.maturity_date<a.term_end+1 
			and tc1.maturity_date >= case when a.curve_granularity in (981,987,989,982,994,995,997)  then dateadd(day,1,cast(@as_of_date as datetime)) else '1900-01-01' end
			and tc1.as_of_date = case when (a.contract_expiration_date < @curve_as_of_date) then a.contract_expiration_date else @curve_as_of_date end
		left join #temp_curves tc2 ON tc2.source_curve_def_id = s.monthly_index 
			AND tc2.maturity_date >= a.term_start AND tc2.maturity_date<a.term_end+1 
			and tc2.maturity_date >= case when a.curve_granularity in (981,987,989,982,994,995,997)  then dateadd(day,1,cast(@as_of_date as datetime)) else '1900-01-01' end
			and tc2.as_of_date = case when (a.contract_expiration_date < @curve_as_of_date) then a.contract_expiration_date else @curve_as_of_date end
		left join #temp_curves tc3 ON tc3.source_curve_def_id = s.proxy_curve_id3 
			AND tc3.maturity_date >= a.term_start AND tc3.maturity_date<a.term_end+1 
			and tc3.maturity_date >= case when a.curve_granularity in (981,987,989,982,994,995,997) then dateadd(day,1,cast(@as_of_date as datetime)) else '1900-01-01' end
			and tc3.as_of_date = case when (a.contract_expiration_date < @curve_as_of_date) then a.contract_expiration_date else @curve_as_of_date end
	where  s.source_curve_def_id = f.source_curve_def_id 
) fw
outer apply (
	select avg(tc4.curve_value) curve_value,avg(tc4.bid_value) curve_value_bid,avg(tc4.ask_value) curve_value_ask from #temp_curves tc4 where  @calc_type='s' and tc4.source_curve_def_id = isnull(s.settlement_curve_id,a.formula_curve_id) AND tc4.maturity_date >= a.term_start AND tc4.maturity_date<a.term_end+1 
		--and tc4.maturity_date >= case when a.curve_granularity in (981,982,987,997) then @as_of_date else '1900-01-01' end
		--and tc4.as_of_date = case when (a.contract_expiration_date < @curve_as_of_date) then a.contract_expiration_date else @curve_as_of_date END
) sett
LEFT JOIN #simple_formula_multiplier sfm ON sfm.source_deal_detail_id=a.source_deal_detail_id and sfm.source_deal_header_id = a.source_deal_header_id AND sfm.leg = a.leg
group by a.source_deal_detail_id,a.source_deal_header_id, a.leg, a.formula_curve_id


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Retrieving multiplier for simple formulas*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--select * from #temp_deals where settled = 1

--First calculate non-options deals and Non IR Swaps and Loan type instruments (REGULAR SWAP TYPE MODEL)


-- select * from #temp_deals 
--select * from #temp_leg_mtm where source_deal_header_id = 3515
--select * from #temp_curves where maturity_date = '2011-01-01'
---- select leg,formula_curve_id, * from #temp_deals
-- select * from  #tmp_hourly_price_vol
-- select * from #hrly_price_curves where month(maturity_date)=7 and curve_id in (23,76) order by curve_id, maturity_date



select  spcd.Granularity,td.source_deal_detail_id,td.location_id,pguc.term_hr,convert(varchar(10),pguc.term_hr,120) term_date 
	,hr=right('0'+cast(datepart(hour,pguc.term_hr)+1 as varchar),2)+':00'
	,pguc.long_short,isnull(pguc.must_run_indicator,0) must_run_indicator
into #process_generation_unit_cost
from  #temp_deals td
	inner join dbo.process_generation_unit_cost pguc  on pguc.location_id=td.location_id
	--	and pguc.fuel_curve_id=td.curve_id
		and pguc.term_hr between td.term_start and dateadd(hour,-1,td.term_end+1)
		and pguc.term_hr> dateadd(hour,-1,cast(@as_of_date as datetime)+1)
		and pguc.is_default=1 and td.leg=1 and pguc.long_short='ST'
		and pguc.outage=0
	inner join source_price_curve_def spcd on spcd.source_curve_def_id=td.curve_id 
where spcd.Granularity in (981,987,989,982,994,995,997)

select  spcd.Granularity,td.source_deal_detail_id,td.location_id,pguc.term_hr,convert(varchar(10),pguc.term_hr,120) term_date 
	,hr=right('0'+cast(datepart(hour,pguc.term_hr)+1 as varchar),2)+':00'
	,isnull(pguc.must_run_indicator,0) must_run_indicator
into #process_generation_unit_cost_LT
from  #temp_deals td
	inner join dbo.process_generation_unit_cost pguc  on pguc.location_id=td.location_id
	--	and pguc.fuel_curve_id=td.curve_id
		and pguc.term_hr between td.term_start and dateadd(hour,-1,td.term_end+1)
		and pguc.term_hr> dateadd(hour,-1,cast(@as_of_date as datetime)+1)
		and pguc.is_default=1 and td.leg=1 and pguc.long_short='LT'
		and pguc.outage=0
inner join source_price_curve_def spcd on spcd.source_curve_def_id=td.curve_id 
where spcd.Granularity in (981,987,989,982,994,995,997)

insert into #process_generation_unit_cost
(
	source_deal_detail_id,location_id,term_hr,term_date ,hr,long_short,must_run_indicator,Granularity
)
select  
	lt.source_deal_detail_id,lt.location_id,lt.term_hr,lt.term_date ,lt.hr ,'LT' long_short,lt.must_run_indicator,lt.Granularity
from #process_generation_unit_cost_LT lt
left join #process_generation_unit_cost st on lt.source_deal_detail_id=st.source_deal_detail_id
	and lt.term_hr=st.term_hr
where  st.source_deal_detail_id is null


--   select * from process_generation_unit_cost where location_id=1587

select curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity
	, maturity_date,period
	,min(as_of_date) as_of_date,
	max([0]) [0], 
	max([1]) [1], 
	max([2]) [2], 
	max([3]) [3], 
	max([4]) [4],
	max([5]) [5],
	max([6]) [6],
	max([7]) [7],
	max([8]) [8],
	max([9]) [9],
	max([10]) [10],
	max([11]) [11],
	max([12]) [12]
	,max([13]) [13]
	,max([14]) [14]
	,max([15]) [15]
	,max([16]) [16]
	,max([17]) [17]
	,max([18]) [18]
	,max([19]) [19]
	,max([20]) [20]
	,max([21]) [21]
	,max([22]) [22]
	,max([23]) [23]
	,max([24]) [24]
	
	into #hrly_price_curves -- select * from #hrly_price_curves
from (
	select tc.source_curve_def_id curve_id,tc.as_of_date,Assessment_curve_type_value_id,tc.curve_source_value_id,tc.curve_value,spcd.Granularity
	,convert(varchar(10),maturity_date,120) maturity_date
	,case when isnull(is_dst,0)=1 then 24 else datepart(hh,maturity_date) end  hr ,datepart(minute,maturity_date)  period 
	--,case when is_dst=1 then datepart(hh,maturity_date)+1 else 0 end  dst_hr 
	from #temp_curves tc left join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	--where spcd.Granularity in (981,987,989,982,994,995,997) --daily,hourly,15min
) AS SourceTable
Pivot 
(
max(curve_value) for hr
	in ([0], [1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
) pr
group by
curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity,maturity_date,period

select curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity
	, maturity_date,period
	,min(as_of_date) as_of_date,
	max([0]) [0], 
	max([1]) [1], 
	max([2]) [2], 
	max([3]) [3], 
	max([4]) [4],
	max([5]) [5],
	max([6]) [6],
	max([7]) [7],
	max([8]) [8],
	max([9]) [9],
	max([10]) [10],
	max([11]) [11],
	max([12]) [12]
	,max([13]) [13]
	,max([14]) [14]
	,max([15]) [15]
	,max([16]) [16]
	,max([17]) [17]
	,max([18]) [18]
	,max([19]) [19]
	,max([20]) [20]
	,max([21]) [21]
	,max([22]) [22]
	,max([23]) [23]
	,max([24]) [24]
	into #hrly_price_curves_bid
from (
	select tc.source_curve_def_id curve_id,tc.as_of_date,Assessment_curve_type_value_id,tc.curve_source_value_id,tc.bid_value,spcd.Granularity
	,convert(varchar(10),maturity_date,120) maturity_date
	,case when isnull(is_dst,0)=1 then 24 else datepart(hh,maturity_date) end  hr ,datepart(minute,maturity_date)  period 
	--,case when is_dst=1 then datepart(hh,maturity_date)+1 else 0 end  dst_hr 
	from #temp_curves tc left join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	--where spcd.Granularity in (981,987,989,982,994,995,997) --daily,hourly,15min
) AS SourceTable
Pivot 
(
sum(bid_value) for hr
	in ([0], [1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
) pr
group by
curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity,maturity_date,period

select curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity
	, maturity_date,period
	,min(as_of_date) as_of_date,
	max([0]) [0], 
	max([1]) [1], 
	max([2]) [2], 
	max([3]) [3], 
	max([4]) [4],
	max([5]) [5],
	max([6]) [6],
	max([7]) [7],
	max([8]) [8],
	max([9]) [9],
	max([10]) [10],
	max([11]) [11],
	max([12]) [12]
	,max([13]) [13]
	,max([14]) [14]
	,max([15]) [15]
	,max([16]) [16]
	,max([17]) [17]
	,max([18]) [18]
	,max([19]) [19]
	,max([20]) [20]
	,max([21]) [21]
	,max([22]) [22]
	,max([23]) [23]
	,max([24]) [24]
	into #hrly_price_curves_ask
from (
	select tc.source_curve_def_id curve_id,tc.as_of_date,Assessment_curve_type_value_id,tc.curve_source_value_id,tc.ask_value,spcd.Granularity
	,convert(varchar(10),maturity_date,120) maturity_date
	,case when isnull(is_dst,0)=1 then 24 else datepart(hh,maturity_date) end  hr ,datepart(minute,maturity_date)  period 
	--,case when is_dst=1 then datepart(hh,maturity_date)+1 else 0 end  dst_hr 
	from #temp_curves tc left join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
	--where spcd.Granularity in (981,987,989,982,994,995,997) --daily,hourly,15min
) AS SourceTable
Pivot 
(
sum(ask_value) for hr
	in ([0], [1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
) pr
group by
curve_id,Assessment_curve_type_value_id,curve_source_value_id,Granularity,maturity_date,period

select td.source_deal_detail_id
	,max(td.location_id) location_id 
	,max(td.term_start) term_start
	,sum(sddh.volume) Volume
	,must_run_volume=isnull(sum(pguc.must_run_indicator),0) 
	,must_run_market_value=sum(tc.curve_value*isnull(pguc.must_run_indicator,0))
	,must_run_contract_value=sum(sddh.price*isnull(pguc.must_run_indicator,0))
	,dispatch_volume=sum(case when tc.curve_value>sddh.price then sddh.volume-isnull(must_run_indicator,0) else 0 end )
	,dispatch_market_value=sum(case when tc.curve_value>sddh.price then tc.curve_value*(sddh.volume-isnull(pguc.must_run_indicator,0)) else 0 end)
	,dispatch_contract_value=sum(case when tc.curve_value>sddh.price then sddh.price *(sddh.volume-isnull(pguc.must_run_indicator,0)) else 0 end )
into  #must_run_volume --  select * from #must_run_volume
from  #temp_deals td
	inner join #process_generation_unit_cost pguc on td.source_deal_detail_id=pguc.source_deal_detail_id
	inner join source_deal_detail_hour sddh on sddh.source_deal_detail_id=td.source_deal_detail_id		
		and sddh.term_date=pguc.term_date and 
			sddh.hr=pguc.hr 
	left join #temp_curves tc on tc.source_curve_def_id=td.curve_id 
		--and case when spcd.Granularity=981 then convert(varchar(10),tc.maturity_date,120) else tc.maturity_date end 
		--=case when spcd.Granularity=981 then convert(varchar(10),pguc.term_hr,120) else pguc.term_hr end 
		and tc.maturity_date  
		=case when pguc.Granularity=981 then convert(varchar(10),pguc.term_hr,120) else pguc.term_hr end 
where isnull(sddh.volume,0)<>0		
group by td.source_deal_detail_id
		


--select * from #must_run_volume

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************End of collecting Prices for Hourly Market Value Calculation *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


CREATE INDEX indx_temp_deals1 ON #temp_deals (term_start)

--Find out if meter data needs to be allocated to mulitple deals .. find ratio then ... not sure if meter_id is required
CREATE TABLE #meter_data_allocation (source_deal_header_id INT, location_id INT, curve_id INT, meter_id INT, term_start DATETIME, 
		term_end DATETIME, per_alloc float)

select isnull(meter_Location.location_id,-1) location_id,  meter_location.curve_id, meter_Location.source_deal_header_id, ISNULL(td.meter_id, smlm.meter_id) meter_id, 
	   CASE  ISNULL(mi.allocation_type,20400) WHEN 20400 THEN syv WHEN 20401 THEN contract_vol END syv,
	   meter_Location.term_start, meter_Location.term_end 
into #profile_deals
from #temp_deals td 
			CROSS APPLY(select sdd.source_deal_header_id, location_id, curve_id, 
					term_start, term_end, SUM(CASE WHEN buy_sell_flag='b' THEN 1 ELSE -1 END * sdd.standard_yearly_volume) syv ,
					SUM(CASE WHEN buy_sell_flag='b' THEN 1 ELSE -1 END * sdd.deal_volume) contract_vol
					FROM source_deal_detail sdd INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 
					where sdd.source_deal_header_id=td.meter_deal_id 
				AND (td.location_id =-1 OR (td.location_id<>-1 AND leg = td.Leg)) 
				AND td.source_deal_detail_id = source_deal_detail_id
				AND sdh.deal_status <> @cancel_deal_status
				--AND td.meter_id IS NOT NULL
				GROUP BY sdd.source_deal_header_id, location_id, curve_id, term_start, term_end) meter_Location
			LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
			INNER JOIN meter_id mi ON mi.meter_id = ISNULL(td.meter_id, smlm.meter_id)
				AND ISNULL(mi.multiple_location,'n') = 'y'
WHERE @calc_type = 's'

CREATE index indx_profile_deals1aa ON #profile_deals ( meter_id, location_id,curve_id,term_start,term_end)

SELECT  p.meter_id, p.location_id, p.curve_id, p.term_start, p.term_end
into #temp_group_profile_deals FROM #profile_deals p 
GROUP BY  p.meter_id, p.location_id, p.curve_id, p.term_start, p.term_end

CREATE index indx_profile_deals1aa11 ON #temp_group_profile_deals ( meter_id)
CREATE index indx_profile_deals1aa12 ON #temp_group_profile_deals ( location_id,curve_id,term_start,term_end)

--select p.meter_id, p.location_id, p.curve_id, p.term_start, p.term_end
--, sum(CASE WHEN sdd.buy_sell_flag='b' THEN 1 ELSE -1 END * CASE  ISNULL(mi.allocation_type,20400) WHEN 20400 THEN sdd.standard_yearly_volume WHEN 20401 THEN sdd.deal_volume END) total_syv
--into #profile_total
--from #temp_group_profile_deals p 
--	left JOIN source_minor_location_meter smlm ON smlm.meter_id = p.meter_id 
--	left JOIN	source_deal_detail sdd ON sdd.location_id = smlm.source_minor_location_id AND
--							 sdd.curve_id = p.curve_id AND
--							 sdd.term_start = p.term_start AND
--							 sdd.term_end = p.term_end 
--	left JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 	
--	left JOIN meter_id mi ON mi.meter_id = p.meter_id 								 
--WHERE @calc_type = 's'	AND sdd.physical_financial_flag = 'p'
--	  AND sdh.deal_status <> @cancel_deal_status
--group by p.meter_id, p.location_id, p.curve_id, p.term_start, p.term_end


select p.meter_id, p.location_id, p.curve_id, p.term_start, p.term_end,syv.total_syv
into #profile_total -- select * from #profile_total
from #temp_group_profile_deals p 
cross apply 
(select sum(CASE WHEN sdd.buy_sell_flag='b' THEN 1 ELSE -1 END * CASE  ISNULL(mi.allocation_type,20400) WHEN 20400 THEN sdd.standard_yearly_volume WHEN 20401 THEN sdd.deal_volume END) total_syv
 from source_minor_location_meter smlm 
	left JOIN	source_deal_detail sdd ON sdd.location_id = smlm.source_minor_location_id AND
		sdd.curve_id = p.curve_id AND sdd.term_start = p.term_start AND sdd.term_end = p.term_end 
	left JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 	
	left JOIN meter_id mi ON mi.meter_id = p.meter_id 								 
WHERE @calc_type = 's'	AND sdd.physical_financial_flag = 'p'
	  AND sdh.deal_status <> @cancel_deal_status
	  and smlm.meter_id = p.meter_id 
) syv

CREATE index indx_profile_total1 ON #profile_total (meter_id,location_id,curve_id,term_start,term_end)

INSERT INTO #meter_data_allocation
select pd.source_deal_header_id,isnull(pt.location_id, -1), pd.curve_id, pd.meter_id, pd.term_start, pd.term_end, 
 cast(cast(pd.syv as numeric(20,8))/abs(ISNULL(NULLIF(cast(pt.total_syv as numeric(20,8)),0),1))  as   numeric(38,20)) per_alloc  
from #profile_deals pd inner join #profile_total pt ON pd.meter_id = pt.meter_id and pd.location_id = pt.location_id and pd.curve_id = pt.curve_id 
	and pd.term_start = pt.term_start and pd.term_end = pt.term_end	

CREATE index indx_meter_data_allocation1 ON #meter_data_allocation (source_deal_header_id,location_id,curve_id,term_start,term_end)

if object_id('tempdb..#meter_location') is not null
drop table #meter_location

select distinct sdd.source_deal_detail_id,sdd.location_id into #meter_location 
FROM source_deal_detail sdd 
	inner join #temp_deals td on sdd.source_deal_header_id=td.meter_deal_id 
		AND sdd.curve_id=td.curve_id and sdd.term_start=td.term_start
		AND (td.location_id=-1 OR (td.location_id<>-1 AND sdd.leg = td.Leg)) 
	inner join source_deal_type sdt on sdt.source_deal_type_id=td.source_deal_type_id 
		--and (sdt.deal_type_id like 'Physical%' OR sdt.deal_type_id like 'Generation%') -- include meter data for Physical and Generation deal type only
		--and td.calc_physical_financial_flag = 'p'

Create index indx_meter_location on  #meter_location (source_deal_detail_id)
create index indx_temp_deals000001 on  #temp_deals (source_deal_detail_id)
create index indx_temp_deals000002 on  #temp_deals (meter_id)

SELECT DISTINCT
	mv.meter_data_id,hbt.term_date
INTO
	#meter_mnth_brk	
FROM
	#temp_deals td 
		left join dbo.vwDealTimezoneContract tz on  td.source_deal_header_id=tz.source_deal_header_id
		and tz.curve_id=isnull(td.curve_id,-1)  and tz.location_id=isnull(td.location_id,-1)
		CROSS APPLY(select location_id FROM #meter_location where source_deal_detail_id=td.source_deal_detail_id  GROUP BY location_id) meter_Location
		LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
		LEFT JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
			AND YEAR(td.[term_start]) = YEAR(mv.from_date)
			AND MONTH(td.[term_start]) = MONTH(mv.from_date)
		LEFT JOIN mv90_data_hour mvh ON mvh.meter_data_id = mv.meter_data_id
		OUTER apply 
		(
			select term_date from  hour_block_term  h WHERE 
			h.dst_group_value_id=tz.dst_group_value_id and h.block_define_id = @baseload_block_definition AND h.term_date BETWEEN mv.from_date AND mv.to_date
		) hbt
WHERE
	@calc_type = 's' AND mvh.meter_data_id IS NULL
	
DELETE #meter_mnth_brk WHERE  meter_data_id IS NULL



SELECT mvh.prod_date,0 period,td.hourly_position_breakdown pos_granularity,td.source_deal_header_id,td.curve_id
,td.term_start,td.term_end,td.volume_multiplier,td.volume_multiplier2
,td.leg,td.buy_sell_flag,td.deal_volume_uom_id,mv.meter_id,mv.meter_data_id,mv.channel,isnull(meter_Location.location_id, -1) location_id
,mvh.[Hr1_15] hr1  ,mvh.[Hr2_15] hr2 ,mvh.[Hr3_15] hr3 ,mvh.[Hr4_15] hr4 ,mvh.[Hr5_15] hr5 ,mvh.[Hr6_15]  hr6,mvh.[Hr7_15] hr7 ,mvh.[Hr8_15] hr8 
,mvh.[Hr9_15] hr9,mvh.[Hr10_15]  hr10,mvh.[Hr11_15] hr11 ,mvh.[Hr12_15] hr12 ,mvh.[Hr13_15] hr13 ,mvh.[Hr14_15] Hr14 ,mvh.[Hr15_15] Hr15 ,mvh.[Hr16_15]  Hr16
,mvh.[Hr17_15] Hr17,mvh.[Hr18_15] Hr18 ,mvh.[Hr19_15]  Hr19,mvh.[Hr20_15] Hr20,mvh.[Hr21_15] Hr21,mvh.[Hr22_15] Hr22,mvh.[Hr23_15] Hr23,mvh.[Hr24_15] Hr24,mvh.[Hr25_15] Hr25
,mvh.recid
INTO #mv_data_15min_0 
FROM #temp_deals td 
	inner join #meter_location meter_Location on td.source_deal_detail_id=meter_Location.source_deal_detail_id
	LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
	LEFT JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
		AND td.term_start = mv.from_date
	LEFT JOIN  mv90_data_mins mvh ON mv.meter_data_id=mvh.meter_data_id
	left join source_deal_header sdh on sdh.source_deal_header_id=td.source_deal_header_id				
WHERE @calc_type = 's' and td.hourly_position_breakdown IN(987,989)
--AND ISNULL(mvh.prod_date,mv.from_date) BETWEEN @term_start and @term_end 
AND (isnull(td.volume_type, -1) =17301 OR td.meter_id IS NOT NULL or (isnull(td.volume_type, -1)=17302 and isnull(sdh.internal_portfolio_id,251)=251) )--only forecasted/meter and shaped (short term forecast)
AND ISNULL(td.variable_swap, 'n') = 'n' --  Do not take the variable fixation deals	
--AND mvh.recid IS NOT null	
--UNION ALL
SELECT mvh.prod_date,15 period,td.hourly_position_breakdown pos_granularity ,td.source_deal_header_id,td.curve_id,td.term_start,td.term_end,td.volume_multiplier,td.volume_multiplier2,
	td.leg,td.buy_sell_flag,td.deal_volume_uom_id,mv.meter_id,mv.meter_data_id,mv.channel,isnull(meter_Location.location_id, -1) location_id
	,mvh.[Hr1_30]  ,mvh.[Hr2_30]  ,mvh.[Hr3_30]  ,mvh.[Hr4_30]  ,mvh.[Hr5_30]  ,mvh.[Hr6_30]  ,mvh.[Hr7_30]  ,mvh.[Hr8_30]  
	,mvh.[Hr9_30]  ,mvh.[Hr10_30]  ,mvh.[Hr11_30]  ,mvh.[Hr12_30]  ,mvh.[Hr13_30]  ,mvh.[Hr14_30]  ,mvh.[Hr15_30]  ,mvh.[Hr16_30]  
	,mvh.[Hr17_30]  ,mvh.[Hr18_30]  ,mvh.[Hr19_30]  ,mvh.[Hr20_30]  ,mvh.[Hr21_30]  ,mvh.[Hr22_30]  ,mvh.[Hr23_30]  ,mvh.[Hr24_30]  ,mvh.[Hr25_30]
	,mvh.recid
INTO #mv_data_15min_15 
FROM #temp_deals td 
	inner join #meter_location meter_Location on td.source_deal_detail_id=meter_Location.source_deal_detail_id
	LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
	LEFT JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
		AND td.term_start = mv.from_date
	LEFT JOIN  mv90_data_mins mvh ON mv.meter_data_id=mvh.meter_data_id
	left join source_deal_header sdh on sdh.source_deal_header_id=td.source_deal_header_id				
WHERE @calc_type = 's' and td.hourly_position_breakdown IN(987)
--AND ISNULL(mvh.prod_date,mv.from_date) BETWEEN @term_start and @term_end 
AND (isnull(td.volume_type, -1) =17301 OR td.meter_id IS NOT NULL or (isnull(td.volume_type, -1)=17302  and isnull(sdh.internal_portfolio_id,251)=251 ) )--only forecasted/meter and shaped (short term forecast)
AND ISNULL(td.variable_swap, 'n') = 'n' --  Do not take the variable fixation deals	
--AND mvh.recid IS NOT null	

--UNION ALL
SELECT mvh.prod_date,30 period,td.hourly_position_breakdown pos_granularity ,td.source_deal_header_id,td.curve_id,td.term_start,td.term_end,td.volume_multiplier,td.volume_multiplier2,
	td.leg,td.buy_sell_flag,td.deal_volume_uom_id,mv.meter_id,mv.meter_data_id,mv.channel,isnull(meter_Location.location_id, -1) location_id
	,mvh.[Hr1_45]  ,mvh.[Hr2_45]  ,mvh.[Hr3_45]  ,mvh.[Hr4_45]  ,mvh.[Hr5_45]  ,mvh.[Hr6_45]  ,mvh.[Hr7_45]  ,mvh.[Hr8_45]  
	,mvh.[Hr9_45]  ,mvh.[Hr10_45]  ,mvh.[Hr11_45]  ,mvh.[Hr12_45]  ,mvh.[Hr13_45]  ,mvh.[Hr14_45]  ,mvh.[Hr15_45]  ,mvh.[Hr16_45]  
	,mvh.[Hr17_45]  ,mvh.[Hr18_45]  ,mvh.[Hr19_45]  ,mvh.[Hr20_45]  ,mvh.[Hr21_45]  ,mvh.[Hr22_45]  ,mvh.[Hr23_45]  ,mvh.[Hr24_45]  ,mvh.[Hr25_45]
	,mvh.recid
INTO #mv_data_15min_30
FROM #temp_deals td 
	inner join #meter_location meter_Location on td.source_deal_detail_id=meter_Location.source_deal_detail_id
	LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
	LEFT JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
		AND td.term_start = mv.from_date
	LEFT JOIN  mv90_data_mins mvh ON mv.meter_data_id=mvh.meter_data_id
	left join source_deal_header sdh on sdh.source_deal_header_id=td.source_deal_header_id				
WHERE @calc_type = 's' and td.hourly_position_breakdown IN(987,989)
--AND ISNULL(mvh.prod_date,mv.from_date) BETWEEN @term_start and @term_end 
AND (isnull(td.volume_type, -1) =17301 OR td.meter_id IS NOT NULL or (isnull(td.volume_type, -1)=17302  and isnull(sdh.internal_portfolio_id,251)=251 ) )--only forecasted/meter and shaped (short term forecast)
AND ISNULL(td.variable_swap, 'n') = 'n' --  Do not take the variable fixation deals	
--AND mvh.recid IS NOT null	

--UNION ALL
SELECT mvh.prod_date,45 period,td.hourly_position_breakdown pos_granularity ,td.source_deal_header_id,td.curve_id,td.term_start,td.term_end,td.volume_multiplier,td.volume_multiplier2,
	td.leg,td.buy_sell_flag,td.deal_volume_uom_id,mv.meter_id,mv.meter_data_id,mv.channel,isnull(meter_Location.location_id, -1) location_id
	,mvh.[Hr1_60]  ,mvh.[Hr2_60]  ,mvh.[Hr3_60]  ,mvh.[Hr4_60]  ,mvh.[Hr5_60]  ,mvh.[Hr6_60]  ,mvh.[Hr7_60]  ,mvh.[Hr8_60]  
	,mvh.[Hr9_60]  ,mvh.[Hr10_60]  ,mvh.[Hr11_60]  ,mvh.[Hr12_60]  ,mvh.[Hr13_60]  ,mvh.[Hr14_60]  ,mvh.[Hr15_60]  ,mvh.[Hr16_60]  
	,mvh.[Hr17_60]  ,mvh.[Hr18_60]  ,mvh.[Hr19_60]  ,mvh.[Hr20_60]  ,mvh.[Hr21_60]  ,mvh.[Hr22_60]  ,mvh.[Hr23_60]  ,mvh.[Hr24_60]  ,mvh.[Hr25_60]
	,mvh.recid
INTO #mv_data_15min_45
FROM #temp_deals td 
	inner join #meter_location meter_Location on td.source_deal_detail_id=meter_Location.source_deal_detail_id
	inner JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
	inner JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
		AND td.term_start = mv.from_date
	inner JOIN  mv90_data_mins mvh ON mv.meter_data_id=mvh.meter_data_id
	left join source_deal_header sdh on sdh.source_deal_header_id=td.source_deal_header_id				
WHERE @calc_type = 's' and td.hourly_position_breakdown IN(987)
--AND ISNULL(mvh.prod_date,mv.from_date) BETWEEN @term_start and dateadd(month,1,@term_end) 
	AND (isnull(td.volume_type, -1) =17301 OR td.meter_id IS NOT NULL or (isnull(td.volume_type, -1)=17302  and isnull(sdh.internal_portfolio_id,251)=251) )--only forecasted/meter and shaped (short term forecast)
	AND ISNULL(td.variable_swap, 'n') = 'n' --  Do not take the variable fixation deals	
--AND mvh.recid IS NOT null	

create index indx_mv_data_15min_30_0001 on #mv_data_15min_0 (recid,prod_date)
create index indx_mv_data_15min_30_0002 on #mv_data_15min_15 (recid,prod_date)
create index indx_mv_data_15min_30_0003 on #mv_data_15min_30 (recid,prod_date)
create index indx_mv_data_15min_30_0004 on #mv_data_15min_45 (recid,prod_date)

select * into #mv_data_15min from #mv_data_15min_0 where recid is not null
union all
select *  from #mv_data_15min_15 where recid is not null and prod_date >=@term_start and prod_date<=@term_end 
union all
select *  from #mv_data_15min_30 where recid is not null and prod_date >=@term_start and prod_date<=@term_end
union all
select *  from #mv_data_15min_45 where recid is not null and prod_date >=@term_start and prod_date<=@term_end

create index indx_mv_data_15min011 on #mv_data_15min (source_deal_header_id ,location_id,curve_id )
create index indx_mv_data_15min012 on #mv_data_15min (meter_data_id)
create index indx_mv_data_15min013 on #mv_data_15min (term_start,term_end)
create index indx_mv_data_15min014 on #mv_data_15min (meter_id,term_start)
create index indx_mv_data_15min015 on #mv_data_15min (channel)
create index indx_mv_data_15min016 on #mv_data_15min (prod_date)

create index indx_meter_mnth_brk_00001 on #meter_mnth_brk(meter_data_id)
create index indx_meter_mnth_brk_00002 on #meter_mnth_brk(term_date)


SELECT DISTINCT mvh.period,mvh.pos_granularity,
		mvh.location_id,
		mvh.leg,
		mvh.source_deal_header_id,
		ISNULL(mvh.prod_date,hbt.term_date) term_start,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.HR7 ELSE mvh.HR1 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR7 ELSE hbt.Hr1 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=1 THEN 2 ELSE 1 END mhr1,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr8 ELSE mvh.HR2 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR8 ELSE hbt.Hr2 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=2 THEN 2 ELSE 1 END mhr2,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.HR9 ELSE mvh.HR3 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR9 ELSE hbt.Hr3 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=3 THEN 2 ELSE 1 END mhr3,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.HR10 ELSE mvh.HR4 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR10 ELSE hbt.Hr4 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=4 THEN 2 ELSE 1 END mhr4,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr11 ELSE mvh.HR5 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR11 ELSE hbt.Hr5 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=5 THEN 2 ELSE 1 END mhr5,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.HR12 ELSE mvh.HR6 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR12 ELSE hbt.Hr6 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=6 THEN 2 ELSE 1 END mhr6,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr13 ELSE mvh.HR7 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR13 ELSE hbt.Hr7 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=7 THEN 2 ELSE 1 END mhr7,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr14 ELSE mvh.HR8 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR14 ELSE hbt.Hr8 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=8 THEN 2 ELSE 1 END mhr8,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr15 ELSE mvh.HR9 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR15 ELSE hbt.Hr9 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=9 THEN 2 ELSE 1 END mhr9,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr16 ELSE mvh.HR10 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR16 ELSE hbt.Hr10 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=10 THEN 2 ELSE 1 END mhr10,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr17 ELSE mvh.HR11 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR17 ELSE hbt.Hr11 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=11 THEN 2 ELSE 1 END mhr11,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr18 ELSE mvh.HR12 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR18 ELSE hbt.Hr12 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=12 THEN 2 ELSE 1 END mhr12,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr19 ELSE mvh.HR13 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR19 ELSE hbt.Hr13 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=13 THEN 2 ELSE 1 END mhr13,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr20 ELSE mvh.HR14 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR20 ELSE hbt.Hr14 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=14 THEN 2 ELSE 1 END mhr14,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr21 ELSE mvh.HR15 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR21 ELSE hbt.Hr15 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=15 THEN 2 ELSE 1 END mhr15,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr22 ELSE mvh.HR16 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR22 ELSE hbt.Hr16 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=16 THEN 2 ELSE 1 END mhr16,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr23 ELSE mvh.HR17 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR23 ELSE hbt.Hr17 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=17 THEN 2 ELSE 1 END mhr17,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr24 ELSE mvh.HR18 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR24 ELSE hbt.Hr18 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=18 THEN 2 ELSE 1 END mhr18,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr1,mvh1.Hr1) ELSE mvh.HR19 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR1 ELSE hbt.Hr19 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=19 THEN 2 ELSE 1 END mhr19,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr2,mvh1.Hr2) ELSE mvh.HR20 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR2 ELSE hbt.Hr20 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=20 THEN 2 ELSE 1 END mhr20,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr3,mvh1.Hr3) ELSE mvh.HR21 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR3 ELSE hbt.Hr21 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=21 THEN 2 ELSE 1 END mhr21,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr4,mvh1.Hr4) ELSE mvh.HR22 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR4 ELSE hbt.Hr22 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=22 THEN 2 ELSE 1 END mhr22,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr5,mvh1.Hr5) ELSE mvh.HR23 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR5 ELSE hbt.Hr23 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=23 THEN 2 ELSE 1 END mhr23,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr6,mvh1.Hr6) ELSE mvh.HR24 END*ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.Hr6 ELSE hbt.Hr24 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=24 THEN 2 ELSE 1 END mhr24,
		mvh.volume_multiplier * mvh.volume_multiplier2*
		CASE WHEN (mvh.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * CASE WHEN spcd.commodity_id=-1 THEN mvh2.HR25 ELSE mvh.HR25 END *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*CASE WHEN isnull(CASE WHEN spcd.commodity_id=-1 AND ISNULL(mvh2.prod_date,mvh1.prod_date) IS NOT NULL THEN hbt1.add_dst_hour ELSE hbt.add_dst_hour END,0)<=0 THEN 0 else 1 end mhr25
		,mvh.source_deal_header_id org_deal_id
INTO #meter_data_15min
FROM #mv_data_15min mvh
	left join dbo.vwDealTimezoneContract tz on  mvh.source_deal_header_id=tz.source_deal_header_id
			and tz.curve_id=mvh.curve_id and tz.location_id=mvh.location_id
	LEFT JOIN recorder_properties rp ON rp.meter_id=mvh.meter_id and rp.channel=mvh.channel
	LEFT JOIN rec_volume_unit_conversion conv ON rp.uom_id=conv.FROM_source_uom_id AND conv.to_source_uom_id=mvh.deal_volume_uom_id  
			AND conv.state_value_id is null AND conv.assignment_type_value_id is null AND conv.curve_id is null  
	LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = mvh.curve_id
	LEFT JOIN #meter_data_allocation mda ON mda.source_deal_header_id = mvh.source_deal_header_id AND
					mda.location_id = mvh.location_id and mda.curve_id = mvh.curve_id AND
					mda.term_start = mvh.term_start and mda.term_end = mvh.term_end 
	LEFT JOIN #mv_data_15min mvh1 ON mvh1.meter_id=mvh.meter_id and mvh.source_deal_header_id= mvh1.source_deal_header_id
		and mvh.period=mvh1.period and  mvh.curve_id=mvh1.curve_id
		AND DAY(mvh1.prod_date)=1	AND mvh1.term_start=DATEADD(m,1,mvh.term_start)
	LEFT JOIN #mv_data_15min mvh2 ON mvh2.meter_id=mvh.meter_id and mvh.source_deal_header_id= mvh2.source_deal_header_id
		and mvh.period=mvh2.period and  mvh.curve_id=mvh2.curve_id
		AND mvh2.prod_date-1=mvh.prod_date
	LEFT JOIN #meter_mnth_brk mmb ON mmb.meter_data_id = mvh.meter_data_id 
	LEFT JOIN hour_block_term hbt ON hbt.dst_group_value_id=tz.dst_group_value_id
			AND hbt.block_define_id=ISNULL(spcd.block_define_id,@baseload_block_definition)	
			AND hbt.term_date=ISNULL(mvh.prod_date,mmb.term_date)
			--AND ((hbt.term_date=mvh.prod_date  AND mvh.prod_date IS NOT NULL) OR (hbt.term_date BETWEEN mv.from_date AND mv.to_date AND mvh.prod_date IS NULL))
	LEFT JOIN hour_block_term hbt1 ON hbt1.dst_group_value_id=tz.dst_group_value_id
			AND hbt1.block_define_id=ISNULL(spcd.block_define_id,@baseload_block_definition)	
			AND hbt1.term_date=ISNULL(mvh2.prod_date,mvh1.prod_date)
	LEFT JOIN mv90_DST dst ON dst.dst_group_value_id=tz.dst_group_value_id and dst.[date]=ISNULL(mvh.prod_date,hbt.term_date)
		  AND dst.insert_delete = 'd'
	LEFT JOIN mv90_DST dst1 ON dst1.dst_group_value_id=tz.dst_group_value_id and dst1.[date]=ISNULL(mvh.prod_date,hbt.term_date)
		  AND dst1.insert_delete = 'i'				  							
	OUTER APPLY
	(
		SELECT SUM(volume_mult) no_hrs from hour_block_term WHERE dst_group_value_id=tz.dst_group_value_id and block_define_id=@baseload_block_definition
			AND term_date BETWEEN mvh.term_start AND mvh.term_end
	) hbt_term
	left join source_deal_header sdh on sdh.source_deal_header_id=mvh.source_deal_header_id				
WHERE @calc_type = 's' AND ISNULL(mvh.prod_date,mvh.term_start) BETWEEN @term_start and @term_end 

--SELECT distinct td.source_deal_header_id into #deal_id_missing_15min FROM #temp_deals td left join #meter_data_15min  m 
--	ON td.source_deal_header_id=m.source_deal_header_id WHERE m.source_deal_header_id IS NULL 

IF OBJECT_ID('tempdb..#minute_break') IS NULL
begin
	CREATE TABLE #minute_break (granularity int, factor numeric(12,10))  

	-- inserting factor for hourly value to break down into lower granularity.
	insert into #minute_break (granularity , factor ) 
	values
	(995,1.0/12.0000), --5min
	(994,1.0/6.0000), --10Min 
	(987,0.25), --15Min
	(989,0.5) --30Min
end


SELECT		
	DISTINCT  mvh.[period],mv.granularity pos_granularity,
		ISNULL(td.location_id,-1) location_id,
		td.leg,
		td.meter_deal_id source_deal_header_id,
		ISNULL(mvh.prod_date,hbt.term_date) term_start,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.HR7 ELSE mvh.HR1 END,(CASE WHEN dst.[Hour] = 1 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR7 ELSE hbt.Hr1 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=1 THEN 2 ELSE 1 END mhr1,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr8 ELSE mvh.HR2 END,(CASE WHEN dst.[Hour] = 2 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR8 ELSE hbt.Hr2 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=2 THEN 2 ELSE 1 END mhr2,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.HR9 ELSE mvh.HR3 END,(CASE WHEN dst.[Hour] = 3 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR9 ELSE hbt.Hr3 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=3 THEN 2 ELSE 1 END mhr3,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.HR10 ELSE mvh.HR4 END,(CASE WHEN dst.[Hour] = 4 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR10 ELSE hbt.Hr4 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=4 THEN 2 ELSE 1 END mhr4,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr11 ELSE mvh.HR5 END,(CASE WHEN dst.[Hour] = 5 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR11 ELSE hbt.Hr5 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=5 THEN 2 ELSE 1 END mhr5,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.HR12 ELSE mvh.HR6 END,(CASE WHEN dst.[Hour] = 6 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR12 ELSE hbt.Hr6 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=6 THEN 2 ELSE 1 END mhr6,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr13 ELSE mvh.HR7 END,(CASE WHEN dst.[Hour] = 7 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR13 ELSE hbt.Hr7 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=7 THEN 2 ELSE 1 END mhr7,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr14 ELSE mvh.HR8 END,(CASE WHEN dst.[Hour] = 8 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR14 ELSE hbt.Hr8 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=8 THEN 2 ELSE 1 END mhr8,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr15 ELSE mvh.HR9 END,(CASE WHEN dst.[Hour] = 9 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR15 ELSE hbt.Hr9 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=9 THEN 2 ELSE 1 END mhr9,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr16 ELSE mvh.HR10 END,(CASE WHEN dst.[Hour] = 10 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR16 ELSE hbt.Hr10 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=10 THEN 2 ELSE 1 END mhr10,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr17 ELSE mvh.HR11 END,(CASE WHEN dst.[Hour] = 11 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR17 ELSE hbt.Hr11 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=11 THEN 2 ELSE 1 END mhr11,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr18 ELSE mvh.HR12 END,(CASE WHEN dst.[Hour] = 12 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR18 ELSE hbt.Hr12 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=12 THEN 2 ELSE 1 END mhr12,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr19 ELSE mvh.HR13 END,(CASE WHEN dst.[Hour] = 13 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR19 ELSE hbt.Hr13 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=13 THEN 2 ELSE 1 END mhr13,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr20 ELSE mvh.HR14 END,(CASE WHEN dst.[Hour] = 14 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR20 ELSE hbt.Hr14 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=14 THEN 2 ELSE 1 END mhr14,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr21 ELSE mvh.HR15 END,(CASE WHEN dst.[Hour] = 15 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR21 ELSE hbt.Hr15 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=15 THEN 2 ELSE 1 END mhr15,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr22 ELSE mvh.HR16 END,(CASE WHEN dst.[Hour] = 16 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR22 ELSE hbt.Hr16 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=16 THEN 2 ELSE 1 END mhr16,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr23 ELSE mvh.HR17 END,(CASE WHEN dst.[Hour] = 17 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR23 ELSE hbt.Hr17 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=17 THEN 2 ELSE 1 END mhr17,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh.Hr24 ELSE mvh.HR18 END,(CASE WHEN dst.[Hour] = 18 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt.HR24 ELSE hbt.Hr18 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=18 THEN 2 ELSE 1 END mhr18,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr1,mvh1.Hr1) ELSE mvh.HR19 END,(CASE WHEN dst.[Hour] = 19 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR1 ELSE hbt.Hr19 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=19 THEN 2 ELSE 1 END mhr19,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr2,mvh1.Hr2) ELSE mvh.HR20 END,(CASE WHEN dst.[Hour] = 20 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR2 ELSE hbt.Hr20 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=20 THEN 2 ELSE 1 END mhr20,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr3,mvh1.Hr3) ELSE mvh.HR21 END,(CASE WHEN dst.[Hour] = 21 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR3 ELSE hbt.Hr21 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=21 THEN 2 ELSE 1 END mhr21,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr4,mvh1.Hr4) ELSE mvh.HR22 END,(CASE WHEN dst.[Hour] = 22 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR4 ELSE hbt.Hr22 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=22 THEN 2 ELSE 1 END mhr22,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr5,mvh1.Hr5) ELSE mvh.HR23 END,(CASE WHEN dst.[Hour] = 23 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.HR5 ELSE hbt.Hr23 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=23 THEN 2 ELSE 1 END mhr23,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
		CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN ISNULL(mvh2.Hr6,mvh1.Hr6) ELSE mvh.HR24 END,(CASE WHEN dst.[Hour] = 24 THEN 0 WHEN  mvh.prod_date IS NOT NULL THEN NULL ELSE mv.volume END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*ISNULL(CASE WHEN spcd.commodity_id=-1 THEN hbt1.Hr6 ELSE hbt.Hr24 END,1)*CASE WHEN mvh.prod_date IS NULL AND dst1.[Hour]=24 THEN 2 ELSE 1 END mhr24,
		volume_multiplier * volume_multiplier2*case when mi.source_uom_id=@mw_id or mi.source_uom_id=@kw_id then isnull(mw.factor,1.00) else 1.00 end*
	CASE WHEN (td.buy_sell_flag='s' AND mda.per_alloc IS NULL) THEN -1 ELSE 1 END * ISNULL(CASE WHEN spcd.commodity_id=-1 THEN mvh2.HR25 ELSE mvh.HR25 END,(CASE WHEN dst1.[Hour] IS NOT NULL THEN mv.volume ELSE 0 END/ISNULL(NULLIF(hbt_term.no_hrs,0),1))) *ISNULL(conv.conversion_factor,1) * ISNULL(mda.per_alloc,1)*CASE WHEN isnull(CASE WHEN spcd.commodity_id=-1 AND ISNULL(mvh2.prod_date,mvh1.prod_date) IS NOT NULL THEN hbt1.add_dst_hour ELSE hbt.add_dst_hour END,0)<=0 THEN 0 else 1 end mhr25,td.source_deal_header_id org_deal_id
INTO #meter_data --   select * from #meter_data
FROM
	#temp_deals td --INNER JOIN #deal_id_missing_15min fil ON td.source_deal_header_id=fil.source_deal_header_id
	inner join dbo.vwDealTimezoneContract tz on  td.source_deal_header_id=tz.source_deal_header_id	
		and tz.curve_id=isnull(td.curve_id,-1) and tz.location_id=isnull(td.location_id,-1)
	CROSS APPLY(select location_id FROM #meter_location where source_deal_detail_id=td.source_deal_detail_id 
		 GROUP BY location_id
	) meter_Location
	LEFT JOIN source_minor_location_meter smlm ON smlm.source_minor_location_id=meter_location.location_id
	LEFT JOIN mv90_data mv ON mv.meter_id=isnull(td.meter_id, smlm.meter_id)
		AND td.term_start = mv.from_date
	left join meter_id mi on mi.meter_id=mv.meter_id
	LEFT JOIN recorder_properties rp ON rp.meter_id=mv.meter_id and rp.channel=mv.channel
	LEFT JOIN  mv90_data_hour mvh ON mv.meter_data_id=mvh.meter_data_id
	LEFT JOIN rec_volume_unit_conversion conv ON rp.uom_id=conv.FROM_source_uom_id AND conv.to_source_uom_id=td.deal_volume_uom_id  
			AND conv.state_value_id is null AND conv.assignment_type_value_id is null AND conv.curve_id is null  
	LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = td.curve_id
	LEFT JOIN #meter_data_allocation mda ON mda.source_deal_header_id = td.source_deal_header_id AND
					mda.location_id = isnull(meter_Location.location_id, -1) and mda.curve_id = td.curve_id AND
					mda.term_start = td.term_start and mda.term_end = td.term_end 
	LEFT JOIN mv90_data mv1 ON mv1.meter_id=mv.meter_id
		AND mv1.from_date=DATEADD(m,1,mv.from_date)
	LEFT JOIN mv90_data_hour mvh1 ON mvh1.meter_data_id=mv1.meter_data_id
		AND DAY(mvh1.prod_date)=1	
	LEFT JOIN mv90_data_hour mvh2 ON mvh2.meter_data_id=mv.meter_data_id
		AND mvh2.prod_date-1=mvh.prod_date
	LEFT JOIN #meter_mnth_brk mmb ON mmb.meter_data_id = mv.meter_data_id 
	LEFT JOIN hour_block_term hbt ON hbt.dst_group_value_id=tz.dst_group_value_id 
			AND hbt.block_define_id=ISNULL(spcd.block_define_id,@baseload_block_definition)	
			AND hbt.term_date=ISNULL(mvh.prod_date,mmb.term_date)
			--AND ((hbt.term_date=mvh.prod_date  AND mvh.prod_date IS NOT NULL) OR (hbt.term_date BETWEEN mv.from_date AND mv.to_date AND mvh.prod_date IS NULL))
	LEFT JOIN hour_block_term hbt1 ON hbt1.dst_group_value_id=tz.dst_group_value_id
			AND hbt1.block_define_id=ISNULL(spcd.block_define_id,@baseload_block_definition)	
			AND hbt1.term_date=ISNULL(mvh2.prod_date,mvh1.prod_date)
	LEFT JOIN mv90_DST dst ON dst.[date]=ISNULL(mvh.prod_date,hbt.term_date) and dst.dst_group_value_id=tz.dst_group_value_id
		  AND dst.insert_delete = 'd'
	LEFT JOIN mv90_DST dst1 ON dst1.[date]=ISNULL(mvh.prod_date,hbt.term_date) and dst1.dst_group_value_id=tz.dst_group_value_id
		  AND dst1.insert_delete = 'i'				  							
	OUTER APPLY
	(
		SELECT SUM(volume_mult) no_hrs from hour_block_term WHERE dst_group_value_id=tz.dst_group_value_id and block_define_id=@baseload_block_definition 
			AND term_date BETWEEN mv.from_date AND mv.to_date
	) hbt_term
	left join source_deal_header sdh on sdh.source_deal_header_id=td.source_deal_header_id				
	left join #minute_break mw on mw.granularity=mv.granularity		
WHERE @calc_type = 's' and ISNULL(mvh.prod_date,mv.from_date) BETWEEN  @term_start and @term_end 
	AND (isnull(td.volume_type, -1) =17301 OR isnull(td.meter_id, smlm.meter_id) IS NOT NULL or (isnull(td.volume_type, -1)=17302 
	and isnull(sdh.internal_portfolio_id,251)=251) )--only forecasted/meter and shaped (short term forecast)
AND ISNULL(td.variable_swap, 'n') = 'n' --  Do not take the variable fixation deals	
--and td.hourly_position_breakdown not in (987,989)

INSERT into #meter_data SELECT * FROM  #meter_data_15min

CREATE index indx_md14 ON #meter_data (source_deal_header_id)
CREATE index indx_md16 ON #meter_data (org_deal_id,location_id,leg,term_start,period)


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************End of collecting Meter Data*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

DECLARE @position_table_name VARCHAR(100),@position_table_name1 VARCHAR(100),@position_table_name_final VARCHAR(100)
SET @position_table_name = dbo.FNAProcessTableName('hr1_pos', @user_id, @process_id)
SET @position_table_name1 = dbo.FNAProcessTableName('hr1_pos_1', @user_id, @process_id)
SET @position_table_name_final = dbo.FNAProcessTableName('hr1_pos_final', @user_id, @process_id)


select 
	[temp_deal_id] ,
	[source_deal_header_id],
	[source_deal_detail_id],
	[source_system_id] ,
	[deal_id],
	[deal_date],
	[ext_deal_id],
	[physical_financial_flag],
	[structured_deal_id],
	[counterparty_id],
	[entire_term_start],
	[entire_term_end],
	[source_deal_type_id],
	[deal_sub_type_type_id],
	[option_flag],
	[option_type],
	[option_excercise_type] ,
	[source_system_book_id1],
	[source_system_book_id2],
	[source_system_book_id3],
	[source_system_book_id4],
	[description1],
	[description2],
	[description3],
	[deal_category_value_id],
	[trader_id],
	[maturity_date] ,
	[term_start],
	[term_end] ,
	[Leg],
	[contract_expiration_date],
	[fixed_float_leg],
	[buy_sell_flag],
	isnull([curve_id],-1) [curve_id],
	[fixed_price],
	[fixed_price_currency_id],
	[option_strike_price],
	[deal_volume],
	[deal_volume_frequency] ,
	[deal_volume_uom_id],
	[block_description] ,
	[internal_deal_type_value_id]    , 
	[internal_deal_subtype_value_id] , 
	[deal_detail_description]  ,
	formula_id  ,
	[formula]  ,
	[formula_value]  ,
	[price_adder]  , 
	[price_multiplier]  ,
	[day_count_id]  ,
	[no_days]  ,
	[days_year]  ,
	[settlement_date]  ,
	[no_days_left]  ,
	[no_days_accrued]  ,
	[spot_price]  ,
	[func_cur_id]  ,
	[discount_curve_id]  ,
	[risk_free_curve_id]  ,
	pricing  , 
	contract_id  ,
	derived_curve ,
	fixed_cost ,
	curve_currency_id ,
	curve_uom_id ,
	settled ,
	leg_physical_financial_flag  ,
	fas_deal_type_value_id ,
	discount_factor ,
	contract_volume , 
	volume_multiplier ,
	volume_multiplier2 ,
	price_adder2 ,
	pay_opposite ,
	price_adder_currency ,
	price_adder2_currency ,
	formula_currency ,
	fixed_cost_currency ,
	exp_curve_as_of_date ,
	exp_maturity_date ,
	curve_type_maturity_date ,
	volume_type , 
	curve_granularity ,
	hourly_position_breakdown ,
	monthly_index ,
	isnull(location_id,-1) location_id,
	product_id ,
	option_settlement_date ,
	proxy_curve_id  ,
	proxy_curve_id3  ,
	settlement_curve_id ,
	formula_curve_id ,
	settlement_currency ,
	monthly_index_maturity ,
	proxy_curve_maturity ,
	proxy_curve_maturity3 ,
	settlement_curve_maturity , 
	monthly_index_granularity ,
	proxy_curve_granularity ,
	proxy_curve_granularity3 ,
	settlement_curve_granularity ,
	proxy_derived_curve ,
	proxy_derived_curve3 ,
	monthly_index_derived_curve , 
	settlement_derived_curve ,
	price_uom_id ,
	curve_factor , 
	proxy_curve_factor ,
	proxy_curve_factor3 ,
	monthly_index_factor ,
	settlement_curve_factor ,
	fixed_price_cur_factor ,
	fixed_cost_cur_factor , 
	adder1_cur_factor ,
	adder2_cur_factor ,
	formula_cur_factor ,
	proxy_currency_id ,
	proxy_currency_id3 ,
	monthly_index_currency_id , 
	settlement_curve_currency_id ,
	monthly_maturity ,
	original_formula_currency ,
	capacity ,
	meter_deal_id ,
	curve_tou ,
	volume_rounding ,
	original_fixed_price_currency_id ,
	meter_id ,isnull(variable_swap,'n') variable_swap ,save_mtm_at_calculation_granularity,timezone_id
	,filter_term_start,filter_term_end,
	actual_granularity,
	actualization_flag,
	actual_volume,
	schedule_volume,bid_n_ask_price,
	calc_mtm_at_tou_level,
	state_value_id,
	tier_value_id,
	match_info_id
	,commodity_id
	,calc_physical_financial_flag
into #temp_deals_filter 
from [#temp_deals] where hourly_position_breakdown in(982,987,989,997) and ISNULL(variable_swap, 'n') = 'n'
	

CREATE INDEX [IX_PT_temp_deals_term_0001212] ON [#temp_deals_filter] 
	([term_start],term_end,[source_deal_header_id],curve_id,location_id) 
	

if @calc_type='s'
	set @hr_columns	='
		,CAST(ISNULL(md.mhr1,hr1) AS NUMERIC(28,13)) hr1
		,CAST(ISNULL(md.mhr2,hr2) AS NUMERIC(28,13)) hr2
		,CAST(ISNULL(md.mhr3,hr3) AS NUMERIC(28,13)) hr3
		,CAST(ISNULL(md.mhr4,hr4) AS NUMERIC(28,13)) hr4
		,CAST(ISNULL(md.mhr5,hr5) AS NUMERIC(28,13)) hr5
		,CAST(ISNULL(md.mhr6,hr6) AS NUMERIC(28,13)) hr6
		,CAST(ISNULL(md.mhr7,hr7) AS NUMERIC(28,13)) hr7
		,CAST(ISNULL(md.mhr8,hr8) AS NUMERIC(28,13)) hr8
		,CAST(ISNULL(md.mhr9,hr9) AS NUMERIC(28,13)) hr9
		,CAST(ISNULL(md.mhr10,hr10) AS NUMERIC(28,13)) hr10
		,CAST(ISNULL(md.mhr11,hr11) AS NUMERIC(28,13)) hr11
		,CAST(ISNULL(md.mhr12,hr12) AS NUMERIC(28,13)) hr12
		,CAST(ISNULL(md.mhr13,hr13) AS NUMERIC(28,13)) hr13
		,CAST(ISNULL(md.mhr14,hr14) AS NUMERIC(28,13)) hr14
		,CAST(ISNULL(md.mhr15,hr15) AS NUMERIC(28,13)) hr15
		,CAST(ISNULL(md.mhr16,hr16) AS NUMERIC(28,13)) hr16
		,CAST(ISNULL(md.mhr17,hr17) AS NUMERIC(28,13)) hr17
		,CAST(ISNULL(md.mhr18,hr18) AS NUMERIC(28,13)) hr18
		,CAST(ISNULL(md.mhr19,hr19) AS NUMERIC(28,13)) hr19
		,CAST(ISNULL(md.mhr20,hr20) AS NUMERIC(28,13)) hr20
		,CAST(ISNULL(md.mhr21,hr21) AS NUMERIC(28,13)) hr21
		,CAST(ISNULL(md.mhr22,hr22) AS NUMERIC(28,13)) hr22
		,CAST(ISNULL(md.mhr23,hr23) AS NUMERIC(28,13)) hr23
		,CAST(ISNULL(md.mhr24,hr24) AS NUMERIC(28,13)) hr24
		,CAST(ISNULL(md.mhr25,hr25) AS NUMERIC(28,13)) hr25
		,CAST(md.mhr1 AS NUMERIC(28,13)) mhr1
		,CAST(md.mhr2 AS NUMERIC(28,13)) mhr2
		,CAST(md.mhr3 AS NUMERIC(28,13)) mhr3
		,CAST(md.mhr4 AS NUMERIC(28,13)) mhr4
		,CAST(md.mhr5 AS NUMERIC(28,13)) mhr5
		,CAST(md.mhr6 AS NUMERIC(28,13)) mhr6
		,CAST(md.mhr7 AS NUMERIC(28,13)) mhr7
		,CAST(md.mhr8 AS NUMERIC(28,13)) mhr8
		,CAST(md.mhr9 AS NUMERIC(28,13)) mhr9
		,CAST(md.mhr10 AS NUMERIC(28,13)) mhr10
		,CAST(md.mhr11 AS NUMERIC(28,13)) mhr11
		,CAST(md.mhr12 AS NUMERIC(28,13)) mhr12
		,CAST(md.mhr13 AS NUMERIC(28,13)) mhr13
		,CAST(md.mhr14 AS NUMERIC(28,13)) mhr14
		,CAST(md.mhr15 AS NUMERIC(28,13)) mhr15
		,CAST(md.mhr16 AS NUMERIC(28,13)) mhr16
		,CAST(md.mhr17 AS NUMERIC(28,13)) mhr17
		,CAST(md.mhr18 AS NUMERIC(28,13)) mhr18
		,CAST(md.mhr19 AS NUMERIC(28,13)) mhr19
		,CAST(md.mhr20 AS NUMERIC(28,13)) mhr20
		,CAST(md.mhr21 AS NUMERIC(28,13)) mhr21
		,CAST(md.mhr22 AS NUMERIC(28,13)) mhr22
		,CAST(md.mhr23 AS NUMERIC(28,13)) mhr23
		,CAST(md.mhr24 AS NUMERIC(28,13)) mhr24
		,CAST(md.mhr25 AS NUMERIC(28,13)) mhr25
	'
	
else 
	set @hr_columns	= '
		,CAST(hr1 AS NUMERIC(28,13)) hr1, 
		CAST(hr2 AS NUMERIC(28,13)) hr2,
		CAST(hr3 AS NUMERIC(28,13)) hr3,
		CAST(hr4 AS NUMERIC(28,13)) hr4,
		CAST(hr5 AS NUMERIC(28,13)) hr5,
		CAST(hr6 AS NUMERIC(28,13)) hr6,
		CAST(hr7 AS NUMERIC(28,13)) hr7,
		CAST(hr8 AS NUMERIC(28,13)) hr8,
		CAST(hr9 AS NUMERIC(28,13)) hr9,
		CAST(hr10 AS NUMERIC(28,13)) hr10,
		CAST(hr11 AS NUMERIC(28,13)) hr11,
		CAST(hr12 AS NUMERIC(28,13)) hr12,
		CAST(hr13 AS NUMERIC(28,13)) hr13,
		CAST(hr14 AS NUMERIC(28,13)) hr14,
		CAST(hr15 AS NUMERIC(28,13)) hr15,
		CAST(hr16 AS NUMERIC(28,13)) hr16,
		CAST(hr17 AS NUMERIC(28,13)) hr17,
		CAST(hr18 AS NUMERIC(28,13)) hr18,
		CAST(hr19 AS NUMERIC(28,13)) hr19,
		CAST(hr20 AS NUMERIC(28,13)) hr20,
		CAST(hr21 AS NUMERIC(28,13)) hr21,
		CAST(hr22 AS NUMERIC(28,13)) hr22,
		CAST(hr23 AS NUMERIC(28,13)) hr23,
		CAST(hr24 AS NUMERIC(28,13)) hr24,
		CAST(hr25 AS NUMERIC(28,13)) hr25'

	--set @hr_columns	=',hr1,hr2,hr3,hr4,hr5,hr6,hr7,hr8,hr9,hr10,hr11,hr12,hr13,hr14,hr15,hr16,hr17,hr18,hr19,hr20,hr21,hr22,hr23,hr24,hr25'


SET @sqlstmt= '
	select	isnull(td.location_id, -1) location_id, td.leg, rp.source_deal_header_id,td.curve_id, td.monthly_index, td.source_deal_detail_id,
		td.commodity_id, rp.term_start, td.curve_granularity, td.proxy_curve_id, td.proxy_curve_id3, td.settlement_curve_id, 
		td.formula_curve_id, -1 b_s_mult, --case when(td.buy_sell_flag=''s'') then 1 else -1 end b_s_mult,	
		CAST(CASE WHEN (td.curve_granularity = 980 OR td.pricing IN (1601,1602)) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.curve_granularity in (987,982,981,989,997) then rp.term_start
			 ELSE td.term_start 
		END AS DATETIME) curve_maturity,		 			
		CAST(CASE WHEN (td.proxy_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.proxy_curve_granularity in (987,982,981,989,997) then rp.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity,		 
		CAST(CASE WHEN (td.proxy_curve_granularity3 = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity3 = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.proxy_curve_granularity3 in (987,982,981,989,997) then rp.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity3,		 
		CAST(CASE WHEN (td.monthly_index_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.monthly_index_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.monthly_index_granularity in (987,982,981,989,997) then rp.term_start
			 ELSE td.term_start 
		END AS DATETIME) monthly_index_maturity,	
		CAST(CASE WHEN (td.settlement_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (td.settlement_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.settlement_curve_granularity in (987,982,981,989,997) then rp.term_start
		ELSE td.term_start 
		END AS DATETIME) set_maturity,		 		
		td.monthly_index_granularity, td.proxy_curve_granularity, td.proxy_curve_granularity3, 
		td.settlement_curve_granularity, ISNULL(td.func_cur_id, -1) func_cur_id, ISNULL(td.contract_id, -1) contract_id,
		cast(cast(year(rp.term_start) as varchar) + ''-'' + cast(MONTH(rp.term_start) as varchar) + ''-01'' as DATETIME) monthly_term, 
		td.term_start deal_term_start,td.term_end deal_term_end,
		td.meter_deal_id, td.volume_multiplier * td.volume_multiplier2 meter_mult, td.volume_rounding, td.formula_id, td.pricing, td.price_adder, td.price_multiplier,td.pay_opposite
		,case when rp.granularity IN(987,989) then coalesce('+case when @calc_type<>'s' then '' else 'md.period,' end +'rp.period,0) else 0 end period,rp.granularity pos_granularity'
		+@hr_columns+',td.save_mtm_at_calculation_granularity'+case when isnull(@reforecast_table_name,'')<>'' then ',rowid=identity(int,1,1)' else '' end +'
		,td.bid_n_ask_price,td.[buy_sell_flag],td.calc_mtm_at_tou_level,td.state_value_id, td.tier_value_id, td.match_info_id
	INTO '+case when isnull(@reforecast_table_name,'')<>'' then @position_table_name else ' #tmp_position_table_name_01 ' end +' 
	FROM '+CASE WHEN @reforecast_table_name IS NOT NULL THEN @reforecast_table_name ELSE ' report_hourly_position_profile_main ' END +' rp  
		inner join #temp_deals_filter td  on rp.term_start between td.term_start and td.term_end and rp.source_deal_detail_id=td.source_deal_detail_id
	'+case when @calc_type<>'s' then '
		left join source_price_curve_def spcd on  spcd.source_curve_def_id=td.curve_id 
		'	
	else ' 
		LEFT JOIN  #meter_data md ON md.org_deal_id = td.source_deal_header_id AND md.leg = td.leg AND rp.term_start = md.term_start 
			  AND td.location_id = md.location_id and md.period= case when rp.granularity IN(987,989) then isnull(rp.period,0) else md.period end '
	end+'		
		WHERE 1=1 '+
	case when @calc_type <> 's' then 
	' AND case when ISNULL(spcd.hourly_volume_allocation,17601) =17606  or rp.term_start<rp.expiration_date then rp.expiration_date  else rp.term_start end  between td.filter_term_start and td.filter_term_end and rp.expiration_date  > '''+@as_of_date+''''
	else
	case when  @cpt_type='b' THEN '' else case when isnull(@look_term,'d')='s' then ' 
		and case when td.calc_physical_financial_flag =''f'' then 
			case when isnull(td.internal_deal_subtype_value_id,-1)='+@phy_future+' then td.contract_expiration_date else rp.expiration_date end else rp.term_start end' 
	else ' and rp.term_start '  end +' BETWEEN '''+@term_start+''' and '''+@term_end+'''' end 
	 end +';'
			


	--INT '+@position_table_name+'
DECLARE @hr_act_columns VARCHAR(MAX)
IF @calc_type = 's'
	set @hr_act_columns	='
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL THEN ISNULL(actual_volume.[1],0) ELSE COALESCE(md.mhr1,actual_volume.[1],hr1) END AS NUMERIC(28,13)) hr1
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[2],0) ELSE COALESCE(md.mhr2,actual_volume.[2],hr2) END AS NUMERIC(28,13)) hr2
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[3],0) ELSE COALESCE(md.mhr3,actual_volume.[3],hr3) END AS NUMERIC(28,13)) hr3
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[3],0) ELSE COALESCE(md.mhr4,actual_volume.[4],hr4) END AS NUMERIC(28,13)) hr4
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[5],0) ELSE COALESCE(md.mhr5,actual_volume.[5],hr5) END AS NUMERIC(28,13)) hr5
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[6],0) ELSE COALESCE(md.mhr6,actual_volume.[6],hr6) END AS NUMERIC(28,13)) hr6
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[7],0) ELSE COALESCE(md.mhr7,actual_volume.[7],hr7) END AS NUMERIC(28,13)) hr7
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[8],0) ELSE COALESCE(md.mhr8,actual_volume.[8],hr8) END AS NUMERIC(28,13)) hr8
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[9],0) ELSE COALESCE(md.mhr9,actual_volume.[9],hr9) END AS NUMERIC(28,13)) hr9
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[10],0) ELSE COALESCE(md.mhr10,actual_volume.[10],hr10) END AS NUMERIC(28,13)) hr10
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[11],0) ELSE COALESCE(md.mhr11,actual_volume.[11],hr11) END AS NUMERIC(28,13)) hr11
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[12],0) ELSE COALESCE(md.mhr12,actual_volume.[12],hr12) END AS NUMERIC(28,13)) hr12
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[13],0) ELSE COALESCE(md.mhr13,actual_volume.[13],hr13) END AS NUMERIC(28,13)) hr13
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[14],0) ELSE COALESCE(md.mhr14,actual_volume.[14],hr14) END AS NUMERIC(28,13)) hr14
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[15],0) ELSE COALESCE(md.mhr15,actual_volume.[15],hr15) END AS NUMERIC(28,13)) hr15
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[16],0) ELSE COALESCE(md.mhr16,actual_volume.[16],hr16) END AS NUMERIC(28,13)) hr16
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[17],0) ELSE COALESCE(md.mhr17,actual_volume.[17],hr17) END AS NUMERIC(28,13)) hr17
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[18],0) ELSE COALESCE(md.mhr18,actual_volume.[18],hr18) END AS NUMERIC(28,13)) hr18
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[19],0) ELSE COALESCE(md.mhr19,actual_volume.[19],hr19) END AS NUMERIC(28,13)) hr19
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[20],0) ELSE COALESCE(md.mhr20,actual_volume.[20],hr20) END AS NUMERIC(28,13)) hr20
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[21],0) ELSE COALESCE(md.mhr21,actual_volume.[21],hr21) END AS NUMERIC(28,13)) hr21
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[22],0) ELSE COALESCE(md.mhr22,actual_volume.[22],hr22) END AS NUMERIC(28,13)) hr22
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[23],0) ELSE COALESCE(md.mhr23,actual_volume.[23],hr23) END AS NUMERIC(28,13)) hr23
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[24],0) ELSE COALESCE(md.mhr24,actual_volume.[24],hr24) END AS NUMERIC(28,13)) hr24
		,CAST(CASE WHEN td.actual_granularity=981 AND actual_volume.[1] IS NOT NULL  THEN ISNULL(actual_volume.[25],0) ELSE COALESCE(md.mhr25,actual_volume.[25],hr25) END AS NUMERIC(28,13)) hr25
		,md.mhr1 mhr1,md.mhr2 mhr2,md.mhr3 mhr3
		,md.mhr4 mhr4,md.mhr5 mhr5,md.mhr6 mhr6
		,md.mhr7 mhr7,md.mhr8 mhr8,md.mhr9 mhr9
		,md.mhr10 mhr10,md.mhr11 mhr11,md.mhr12 mhr12
		,md.mhr13 mhr13,md.mhr14 mhr14,md.mhr15 mhr15
		,md.mhr16 mhr16,md.mhr17 mhr17,md.mhr18 mhr18
		,md.mhr19 mhr19,md.mhr20 mhr20,md.mhr21 mhr21
		,md.mhr22 mhr22,md.mhr23 mhr23,md.mhr24 mhr24,md.mhr25 mhr25 '
	ELSE
		SET @hr_act_columns = @hr_columns		

SET @sqlstmt2= '-- UNION ALL
	select td.location_id, td.leg, rd.source_deal_header_id,td.curve_id, td.monthly_index, td.source_deal_detail_id,
		td.commodity_id, rd.term_start, td.curve_granularity, td.proxy_curve_id, td.proxy_curve_id3, td.settlement_curve_id, 
		td.formula_curve_id, -1 b_s_mult, --case when(td.buy_sell_flag=''s'') then 1 else -1 end b_s_mult,		
		CAST(CASE WHEN (td.curve_granularity = 980 OR td.pricing IN (1601,1602)) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.curve_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) curve_maturity,		 			
		CAST(CASE WHEN (td.proxy_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.proxy_curve_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity,		 
		CAST(CASE WHEN (td.proxy_curve_granularity3 = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity3 = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.proxy_curve_granularity3 in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity3,		 
		CAST(CASE WHEN (td.monthly_index_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.monthly_index_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		WHEN td.monthly_index_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) monthly_index_maturity,	
		CAST(CASE WHEN (td.settlement_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (td.settlement_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			WHEN td.settlement_curve_granularity in (987,982,981,989,997) then rd.term_start
		ELSE td.term_start 
		END AS DATETIME) set_maturity,		 		
		td.monthly_index_granularity, 
		td.proxy_curve_granularity, td.proxy_curve_granularity3, 
		td.settlement_curve_granularity, isnull(td.func_cur_id, -1) func_cur_id, ISNULL(td.contract_id, -1) contract_id,
		cast(cast(year(rd.term_start) as varchar) + ''-'' + cast(MONTH(rd.term_start) as varchar) + ''-01'' as DATETIME) monthly_term, 
		td.term_start deal_term_start,td.term_end deal_term_end,
		td.meter_deal_id, td.volume_multiplier * td.volume_multiplier2 meter_mult, td.volume_rounding, td.formula_id, td.pricing,
		 td.price_adder, td.price_multiplier,td.pay_opposite, case when rd.granularity IN(987,989) then coalesce('+case when @calc_type<>'s' then '' else 'md.period,' end +'rd.period,0) else 0 end period,rd.granularity pos_granularity'
		+@hr_act_columns +',td.save_mtm_at_calculation_granularity,td.bid_n_ask_price,td.[buy_sell_flag],td.calc_mtm_at_tou_level,td.state_value_id, td.tier_value_id, td.match_info_id
	INTO #tmp_position_table_name_02 
from report_hourly_position_deal_main rd  inner join #temp_deals_filter td on rd.term_start between td.term_start and td.term_end  
		and rd.source_deal_detail_id=td.source_deal_detail_id AND td.variable_swap = ''n'' 
	'+case when @calc_type<>'s' then '
		left join source_price_curve_def spcd on  spcd.source_curve_def_id=td.curve_id 
	'	
	else ' 
		LEFT JOIN  #meter_data md ON md.org_deal_id = td.source_deal_header_id AND md.leg = td.leg AND rd.term_start = md.term_start 
			  AND td.location_id = md.location_id and md.period=case when rd.granularity IN(987,989) then isnull(rd.period,0) else md.period end 
			  --AND ISNULL(td.actualization_flag,'''') = ''m'' '
	end+
	case when @calc_type = 's' then 
	'
	OUTER APPLY(SELECT	source_deal_detail_id,term_date--,is_dst
,period,[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25]
	FROM
		(
		SELECT source_deal_detail_id,term_date,CASE WHEN is_dst=1 THEN 25 ELSE case when td.actual_granularity IN(987,982,989,997) then cast(left(hr,2) AS INT) else 1 END END [Hr]--,[is_dst]
			,COALESCE(actual_volume,schedule_volume)*case when td.buy_sell_flag=''b'' then 1 else -1 end volume,CASE WHEN td.actual_granularity IN(987,982,989,997) THEN replace(right(hr,2),'':'',''0'') ELSE 0 END period
		FROM source_deal_detail_hour WHERE  source_deal_detail_id = td.source_deal_detail_id AND term_date = rd.term_start
			and rd.[period]=CASE WHEN td.actual_granularity IN(987,982,989,997) THEN replace(right(hr,2),'':'',''0'') ELSE 0 END
		) AS SourceTable
		PIVOT
			(SUM(volume) FOR [hr] IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25])
		) AS PivotTable
	) actual_volume  ' ELSE '' END
	+
	'
	WHERE 1=1 '+case when @calc_type = 's' then case when isnull(@look_term,'d')='s' then '
	 and case when td.calc_physical_financial_flag =''f'' then
	 case when isnull(td.internal_deal_subtype_value_id,-1)='+@phy_future+' then td.contract_expiration_date else rd.expiration_date end else rd.term_start end ' else ' and rd.term_start '  end 
		+' BETWEEN '''+@term_start+''' and '''+@term_end+'''-- AND ISNULL(td.actualization_flag,'''') <> ''d'' '
		  	else ' 
				 AND case when ISNULL(spcd.hourly_volume_allocation,17601) =17606 or rd.term_start<rd.expiration_date then rd.expiration_date  else rd.term_start end  between td.filter_term_start and td.filter_term_end 
				and rd.expiration_date > '''+@as_of_date+'''' end +';'
			
			
SET @sqlstmt3= ' --UNION ALL
	select td.location_id, td.leg, rd.source_deal_header_id, ISNULL(td.curve_id, -1) curve_id, 
		td.monthly_index, td.source_deal_detail_id,
		td.commodity_id, rd.term_start, td.curve_granularity, td.proxy_curve_id, td.proxy_curve_id3, td.settlement_curve_id, 
		td.formula_curve_id, -1 b_s_mult, --case when(td.buy_sell_flag=''s'') then 1 else -1 end b_s_mult,		
		CAST(CASE WHEN (td.curve_granularity = 980 OR td.pricing IN (1601,1602)) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.curve_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) curve_maturity,		 			
		CAST(CASE WHEN (td.proxy_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.proxy_curve_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity,		 
		CAST(CASE WHEN (td.proxy_curve_granularity3 = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity3 = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.proxy_curve_granularity3 in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity3,		 
		CAST(CASE WHEN (td.monthly_index_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.monthly_index_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.monthly_index_granularity in (987,982,981,989,997) then rd.term_start
			 ELSE td.term_start 
		END AS DATETIME) monthly_index_maturity,
		CAST(CASE WHEN (td.settlement_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (td.settlement_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			WHEN td.settlement_curve_granularity in (987,982,981,989,997) then rd.term_start
		ELSE td.term_start 
		END AS DATETIME) set_maturity,		 		
		td.monthly_index_granularity, 
		td.proxy_curve_granularity, td.proxy_curve_granularity3, 
		td.settlement_curve_granularity, isnull(td.func_cur_id, -1) func_cur_id, ISNULL(td.contract_id, -1) contract_id,
		cast(cast(year(rd.term_start) as varchar) + ''-'' + cast(MONTH(rd.term_start) as varchar) + ''-01'' as DATETIME) monthly_term, 
		td.term_start deal_term_start,td.term_end deal_term_end,
		td.meter_deal_id, td.volume_multiplier * td.volume_multiplier2 meter_mult, td.volume_rounding, td.formula_id, td.pricing, 
		td.price_adder, td.price_multiplier,td.pay_opposite, case when rd.granularity IN(987,989) then coalesce('+case when @calc_type<>'s' then '' else 'md.period,' end +'rd.period,0) else 0 end period,rd.granularity pos_granularity'
		+@hr_columns +',td.save_mtm_at_calculation_granularity,td.bid_n_ask_price,td.[buy_sell_flag],td.calc_mtm_at_tou_level,td.state_value_id, td.tier_value_id, td.match_info_id
	INTO #tmp_position_table_name_03 
	from report_hourly_position_fixed_main rd  inner join #temp_deals_filter td on rd.term_start between td.term_start and td.term_end  and rd.source_deal_detail_id=td.source_deal_detail_id 
	'+case when @calc_type<>'s' then ''	
	else ' 
		LEFT JOIN  #meter_data md ON md.org_deal_id = td.source_deal_header_id AND md.leg = td.leg AND rd.term_start = md.term_start 
			  AND td.location_id = md.location_id and md.period= case when rd.granularity IN(987,989) then isnull(rd.period,0) else md.period end  '
	end+'
	WHERE 1=1 '+case when @calc_type = 's' then case when isnull(@look_term,'d')='s' then '
	 and case when td.calc_physical_financial_flag =''f'' then 
	 case when isnull(td.internal_deal_subtype_value_id,-1)='+@phy_future+' then td.contract_expiration_date else rd.expiration_date end else rd.term_start end ' else ' and rd.term_start ' end 
		+' BETWEEN '''+@term_start+''' and '''+@term_end+'''' 
		else ' AND rd.term_start  between td.filter_term_start and td.filter_term_end and rd.expiration_date  > '''+@as_of_date+'''' end +';'
			
EXEC spa_print  @sqlstmt	

IF isnull(@reforecast_table_name,'')<>''
begin
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt )
end
ELSE
begin
	set @sqlstmt4='
		select * into '+@position_table_name+' from  #tmp_position_table_name_01
			union all 
		 select * from #tmp_position_table_name_02
			union all 
		 select * from #tmp_position_table_name_03
	 '
	EXEC spa_print  @sqlstmt2
	EXEC spa_print  @sqlstmt3	
	EXEC spa_print  @sqlstmt4
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt+@sqlstmt2+@sqlstmt3+@sqlstmt4)	
	exec('alter table '+@position_table_name+' add rowid int identity(1,1)')
END


SET @sqlstmt=  ' 
SELECT distinct source_deal_header_id into #tmp_list_deals FROM '+@position_table_name +';

INSERT INTO '+@position_table_name+'(location_id,leg,source_deal_header_id,curve_id,monthly_index,source_deal_detail_id,commodity_id
		,term_start,curve_granularity,proxy_curve_id,proxy_curve_id3,settlement_curve_id,formula_curve_id,b_s_mult,curve_maturity,proxy_curve_maturity
		,proxy_curve_maturity3,monthly_index_maturity,set_maturity,monthly_index_granularity,proxy_curve_granularity,proxy_curve_granularity3
		,settlement_curve_granularity,func_cur_id,contract_id,monthly_term,deal_term_start,deal_term_end,meter_deal_id,meter_mult,volume_rounding
		,formula_id,pricing,price_adder,price_multiplier,pay_opposite,period,pos_granularity,save_mtm_at_calculation_granularity,hr1,hr2,hr3,hr4,hr5
	,hr6,hr7,hr8,hr9,hr10,hr11,hr12,hr13,hr14,hr15,hr16,hr17,hr18,hr19,hr20,hr21,hr22,hr23,hr24,hr25,[buy_sell_flag],bid_n_ask_price
	,calc_mtm_at_tou_level,state_value_id, tier_value_id, match_info_id)
	select td.location_id, td.leg, td.source_deal_header_id, ISNULL(td.curve_id, -1) curve_id, td.monthly_index, td.source_deal_detail_id,
		sdh.commodity_id, td.term_start, td.curve_granularity, td.proxy_curve_id, td.proxy_curve_id3, td.settlement_curve_id, 
		td.formula_curve_id, -1 b_s_mult, --case when(td.buy_sell_flag=''s'') then 1 else -1 end b_s_mult,		
		CAST(CASE WHEN (td.curve_granularity = 980 OR td.pricing IN (1601,1602)) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 ELSE td.term_start 
		END AS DATETIME) curve_maturity,		 			
		CAST(CASE WHEN (td.proxy_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity,		 
		CAST(CASE WHEN (td.proxy_curve_granularity3 = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity3 = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 ELSE td.term_start 
		END AS DATETIME) proxy_curve_maturity3,		 
		CAST(CASE WHEN (td.monthly_index_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.monthly_index_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 ELSE td.term_start 
		END AS DATETIME) monthly_index_maturity,
		CAST(CASE WHEN (td.settlement_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (td.settlement_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
		ELSE td.term_start 
		END AS DATETIME) set_maturity,		 		
		td.monthly_index_granularity, 
		td.proxy_curve_granularity, td.proxy_curve_granularity3, 
		td.settlement_curve_granularity, isnull(td.func_cur_id, -1) func_cur_id, ISNULL(td.contract_id, -1) contract_id,
		cast(cast(year(td.term_start) as varchar) + ''-'' + cast(MONTH(td.term_start) as varchar) + ''-01'' as DATETIME) monthly_term, 
		td.term_start deal_term_start,td.term_end deal_term_end,
		td.meter_deal_id, td.volume_multiplier * td.volume_multiplier2 meter_mult, td.volume_rounding, td.formula_id, td.pricing, 
		td.price_adder, td.price_multiplier,td.pay_opposite,  0  period,td.hourly_position_breakdown pos_granularity,
		td.save_mtm_at_calculation_granularity,CASE WHEN td.buy_sell_flag = ''s'' THEN -1 ELSE 1 END *td.deal_volume
		,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,td.[buy_sell_flag],td.bid_n_ask_price,td.calc_mtm_at_tou_level,td.state_value_id, td.tier_value_id, td.match_info_id
	FROM  #temp_deals td INNER JOIN source_deal_header sdh On td.source_deal_header_id = sdh.source_deal_header_id
		left join #tmp_list_deals ptn on ptn.source_deal_header_id = td.source_deal_header_id
	WHERE  ptn.source_deal_header_id IS NULL AND '+case when @calc_type = 's' then  ' ISNULL(settlement_date,td.term_start) BETWEEN '''+@term_start+''' and '''+@term_end+''' 
	--AND ISNULL(td.actualization_flag,'''') = ''d'''
			else ' td.term_start between td.filter_term_start and td.filter_term_end ' end +' AND ISNULL(td.variable_swap, ''n'') = ''n'''	

EXEC spa_print  @sqlstmt

EXEC(@sqlstmt)



--It supports only in Enterprise Edition
EXEC spa_print  'creating cluster index on adiha_process table '
--exec ('CREATE  INDEX [indx_sdh] ON ' + @position_table_name + '
--(
--	source_deal_detail_id ,rowid , [source_deal_header_id] , term_start, location_id,curve_id, proxy_curve_id,curve_maturity
--)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON ps_sdh(source_deal_detail_id)
--')
	
----EXEC('
----	create clustered index ix_pt_1 on '+@position_table_name+' (rowid)
----	--CREATE index indx_kk1d ON '+@position_table_name+' (source_deal_header_id,curve_id,monthly_term)
----	--CREATE index indx_kk1d11 ON '+@position_table_name+' (source_deal_header_id,leg,location_id,term_start)
----	')		

--EXEC ('CREATE INDEX [IX_PT_temp_pos_test_curve_id_source_deal_detail_id] ON ' + @position_table_name + ' ([curve_id], [source_deal_detail_id]) INCLUDE ([deal_term_start], [deal_term_end], [pricing]) ON ps_sdh(source_deal_detail_id)')
--EXEC ('CREATE INDEX [IX_PT_temp_pos_test_source_deal_detail_id_term_start] ON ' + @position_table_name + ' ([source_deal_detail_id],[term_start]) INCLUDE ([commodity_id], [curve_maturity], [proxy_curve_maturity], [proxy_curve_maturity3], [monthly_index_maturity], [pricing], [period], [hr1], [hr2], [hr3], [hr4], [hr5], [hr6], [hr7], [hr8], [hr9], [hr10], [hr11], [hr12], [hr13], [hr14], [hr15], [hr16], [hr17], [hr18], [hr19], [hr20], [hr21], [hr22], [hr23], [hr24], [hr25]) ON ps_sdh(source_deal_detail_id)')

--if @calc_type='s'
--	set @hr_columns	='
--		,sum(ISNULL(md.mhr1,hr1)*ISNULL(td.volume_multiplier,1)) hr1,sum(ISNULL(md.mhr2,hr2)*ISNULL(td.volume_multiplier,1)) hr2,sum(ISNULL(md.mhr3,hr3)*ISNULL(td.volume_multiplier,1)) hr3
--		,sum(ISNULL(md.mhr4,hr4)*ISNULL(td.volume_multiplier,1)) hr4,sum(ISNULL(md.mhr5,hr5)*ISNULL(td.volume_multiplier,1)) hr5,sum(ISNULL(md.mhr6,hr6)*ISNULL(td.volume_multiplier,1)) hr6
--		,sum(ISNULL(md.mhr7,hr7)*ISNULL(td.volume_multiplier,1)) hr7,sum(ISNULL(md.mhr8,hr8)*ISNULL(td.volume_multiplier,1)) hr8,sum(ISNULL(md.mhr9,hr9)*ISNULL(td.volume_multiplier,1)) hr9
--		,sum(ISNULL(md.mhr10,hr10)*ISNULL(td.volume_multiplier,1)) hr10,sum(ISNULL(md.mhr11,hr11)*ISNULL(td.volume_multiplier,1)) hr11,sum(ISNULL(md.mhr12,hr12)*ISNULL(td.volume_multiplier,1)) hr12
--		,sum(ISNULL(md.mhr13,hr13)*ISNULL(td.volume_multiplier,1)) hr13,sum(ISNULL(md.mhr14,hr14)*ISNULL(td.volume_multiplier,1)) hr14,sum(ISNULL(md.mhr15,hr15)*ISNULL(td.volume_multiplier,1)) hr15
--		,sum(ISNULL(md.mhr16,hr16)*ISNULL(td.volume_multiplier,1)) hr16,sum(ISNULL(md.mhr17,hr17)*ISNULL(td.volume_multiplier,1)) hr17,sum(ISNULL(md.mhr18,hr18)*ISNULL(td.volume_multiplier,1)) hr18
--		,sum(ISNULL(md.mhr19,hr19)*ISNULL(td.volume_multiplier,1)) hr19,sum(ISNULL(md.mhr20,hr20)*ISNULL(td.volume_multiplier,1)) hr20,sum(ISNULL(md.mhr21,hr21)*ISNULL(td.volume_multiplier,1)) hr21
--		,sum(ISNULL(md.mhr22,hr22)*ISNULL(td.volume_multiplier,1)) hr22,sum(ISNULL(md.mhr23,hr23)*ISNULL(td.volume_multiplier,1)) hr23,sum(ISNULL(md.mhr24,hr24)*ISNULL(td.volume_multiplier,1))hr24,sum(ISNULL(md.mhr25,hr25)*ISNULL(td.volume_multiplier,1)) hr25
--	'
--else 
set @hr_columns	=',sum(hr1*ISNULL(td.volume_multiplier,1)) hr1,sum(hr2*ISNULL(td.volume_multiplier,1)) hr2,sum(hr3*ISNULL(td.volume_multiplier,1)) hr3
	,sum(hr4*ISNULL(td.volume_multiplier,1)) hr4,sum(hr5*ISNULL(td.volume_multiplier,1)) hr5,sum(hr6*ISNULL(td.volume_multiplier,1)) hr6
	,sum(hr7*ISNULL(td.volume_multiplier,1)) hr7,sum(hr8*ISNULL(td.volume_multiplier,1)) hr8,sum(hr9*ISNULL(td.volume_multiplier,1)) hr9
	,sum(hr10*ISNULL(td.volume_multiplier,1)) hr10,sum(hr11*ISNULL(td.volume_multiplier,1)) hr11,sum(hr12*ISNULL(td.volume_multiplier,1)) hr12
	,sum(hr13*ISNULL(td.volume_multiplier,1)) hr13,sum(hr14*ISNULL(td.volume_multiplier,1)) hr14,sum(hr15*ISNULL(td.volume_multiplier,1)) hr15
	,sum(hr16*ISNULL(td.volume_multiplier,1)) hr16,sum(hr17*ISNULL(td.volume_multiplier,1)) hr17,sum(hr18*ISNULL(td.volume_multiplier,1)) hr18
	,sum(hr19*ISNULL(td.volume_multiplier,1)) hr19,sum(hr20*ISNULL(td.volume_multiplier,1)) hr20,sum(hr21*ISNULL(td.volume_multiplier,1)) hr21
	,sum(hr22*ISNULL(td.volume_multiplier,1)) hr22,sum(hr23*ISNULL(td.volume_multiplier,1)) hr23,sum(hr24*ISNULL(td.volume_multiplier,1)) hr24
	,sum(hr25*ISNULL(td.volume_multiplier,1)) hr25 '

+case when  @calc_type='s' then '
	,null mhr1,null mhr2,null mhr3,null mhr4,null mhr5,null mhr6,null mhr7,null mhr8,null mhr9
	,null mhr10,null mhr11,null mhr12,null mhr13,null mhr14,null mhr15,null mhr16,null mhr17,null mhr18
	,null mhr19,null mhr20,null mhr21,null mhr22,null mhr23,null hr24,null mhr25'
end



--###### Save the Hourly Position For variable fixation deals. New Logic added on April 26th 2012
SET @sqlstmt= 'insert into '+@position_table_name+' WITH (TABLOCK)
	SELECT max(td.location_id) location_id, max(td.leg) leg, max(td.source_deal_header_id) source_deal_header_id,max(td.curve_id) curve_id
		, max(hp.monthly_index) monthly_index, td.source_deal_detail_id,max(hp.commodity_id) commodity_id, hp.term_start, max(td.curve_granularity) curve_granularity
		, max(td.proxy_curve_id) proxy_curve_id, max(td.proxy_curve_id3) proxy_curve_id3, max(td.settlement_curve_id) settlement_curve_id, 
			td.formula_curve_id, -1 b_s_multr,
		MAX(CAST(CASE WHEN (td.curve_granularity = 980 OR td.pricing IN (1601,1602)) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.curve_granularity in (987,982,981,989,997) then hp.term_start
			 ELSE td.term_start 
		END AS DATETIME)) curve_maturity,		 			
		MAX(CAST(CASE WHEN (td.proxy_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.proxy_curve_granularity in (987,982,981,989,997) then hp.term_start
			 ELSE td.term_start 
		END AS DATETIME)) proxy_curve_maturity,		 
		MAX(CAST(CASE WHEN (td.proxy_curve_granularity3 = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.proxy_curve_granularity3 = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.proxy_curve_granularity3 = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.proxy_curve_granularity3 in (987,982,981,989,997) then hp.term_start
			 ELSE td.term_start 
		END AS DATETIME)) proxy_curve_maturity3,		 
		MAX(CAST(CASE WHEN (td.monthly_index_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (td.monthly_index_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (td.monthly_index_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			 WHEN td.monthly_index_granularity in (987,982,981,989,997) then hp.term_start
			 ELSE td.term_start 
		END AS DATETIME)) monthly_index_maturity,
		max(CAST(CASE WHEN (td.settlement_curve_granularity = 980) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			WHEN (td.settlement_curve_granularity = 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (td.settlement_curve_granularity = 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			WHEN td.settlement_curve_granularity in (987,982,981,989,997) then hp.term_start
		ELSE td.term_start 
		END AS DATETIME)) set_maturity,		 		
		MAX(td.monthly_index_granularity) monthly_index_granularity, 
		MAX(td.proxy_curve_granularity) proxy_curve_granularity, MAX(td.proxy_curve_granularity3) proxy_curve_granularity3, 
		MAX(td.settlement_curve_granularity) settlement_curve_granularity, MAX(isnull(td.func_cur_id, -1)) func_cur_id, MAX(ISNULL(td.contract_id, -1)) contract_id,
		MAX(cast(cast(year(hp.term_start) as varchar) + ''-'' + cast(MONTH(hp.term_start) as varchar) + ''-01'' as DATETIME)) monthly_term, 
		MAX(td.term_start) deal_term_start,MAX(td.term_end) deal_term_end,td.meter_deal_id, MAX(td.volume_multiplier * td.volume_multiplier2) meter_mult, 
		MAX(td.volume_rounding)volume_rounding, MAX(td.formula_id)formula_id,MAX(td.pricing)pricing,MAX(td.price_adder)price_adder
		,MAX(td.price_multiplier) price_multiplier,max(td.pay_opposite) pay_opposite,hp.period,max(hp.pos_granularity)'
		+@hr_columns+',max(td.save_mtm_at_calculation_granularity) save_mtm_at_calculation_granularity,max(td.[buy_sell_flag]) buy_sell_flag,max(td.bid_n_ask_price) bid_n_ask_price
		,max(td.calc_mtm_at_tou_level) calc_mtm_at_tou_level,td.state_value_id, td.tier_value_id, td.match_info_id
	--INTO '+@position_table_name1+'
	FROM '+@position_table_name+' hp
		INNER JOIN #temp_deals td ON hp.source_deal_header_id = td.meter_deal_id
			AND hp.curve_id=td.curve_id
			AND td.term_start = hp.monthly_term
	WHERE td.variable_swap = ''y''	
	GROUP BY td.source_deal_detail_id, hp.term_start,td.formula_curve_id,td.meter_deal_id,hp.period,td.state_value_id, td.tier_value_id, td.match_info_id '
exec spa_print @sqlstmt


EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt )		

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Saving Hourly Position and creating index for Market Value*****************************'	
END


	
EXEC spa_print  'START PERFORMANCE TUNING FOR MARKET VALUE CALCULATION'

if OBJECT_ID('tempdb..#tou_hour') is not null
drop table #tou_hour
	


--select * from #tou_hour		order by 2,1

create index indx_hrly_price_curves1 on #hrly_price_curves (curve_id,maturity_date,period)
create index indx_hrly_price_curves1_bid on #hrly_price_curves_bid (curve_id,maturity_date,period)
create index indx_hrly_price_curves1_ask on #hrly_price_curves_ask (curve_id,maturity_date,period)

create index indx_temp_curves1 on #temp_curves (source_curve_def_id,maturity_date,as_of_date)

--select ROW_NUMBER() over(order by hourly_block_id) ,hourly_block_id from block_type_group
declare @tou1 varchar(8),@tou2 varchar(8),@tou3 varchar(8),@tou4  varchar(8),@tou5  varchar(8),@tou6  varchar(8)
	,@qry60 varchar(max)
	,@qry60a varchar(max)
	,@qry60b varchar(max)
	,@qry60c varchar(max)
	,@qry60d varchar(max)
	,@qry60e varchar(max)
	,@qry60f varchar(max)
	,@qry60g varchar(max)
	,@qry_update varchar(max)
	,@qry1 varchar(max)
	,@qry2 varchar(max)
	,@qry3 varchar(max)
	,@qry4 varchar(max)
	,@qry5 varchar(max)
	,@qry6 varchar(max)
	,@qry7 varchar(max)
	,@qry8 varchar(max)
	,@qry1a varchar(max)
	,@qry2a varchar(max)
	,@qry3a varchar(max)
	,@qry4a varchar(max)
	,@qry5a varchar(max)
	,@qry6a varchar(max)
	,@qry7a varchar(max)
	,@qry8a varchar(max)
	,@qry9a varchar(max)
	,@qry1b varchar(max)
	,@qry2b varchar(max)
	,@qry3b varchar(max)
	,@qry4b varchar(max)
	,@qry5b varchar(max)
	,@qry6b varchar(max)
	,@qry7b varchar(max)
	,@qry8b varchar(max)
	,@qry9b varchar(max)
	,@qry1c varchar(max)
	,@qry2c varchar(max)
	,@qry3c varchar(max)
	,@qry4c varchar(max)
	,@qry5c varchar(max)
	,@qry6c varchar(max)
	,@qry7c varchar(max)
	,@qry8c varchar(max)
	,@qry1d varchar(max)
	,@qry2d varchar(max)
	,@qry3d varchar(max)
	,@qry4d varchar(max)
	,@qry5d varchar(max)
	,@qry6d varchar(max)
	,@qry7d varchar(max)
	,@qry8d varchar(max)
	,@qry1e varchar(max)
	,@qry2e varchar(max)
	,@qry3e varchar(max)
	,@qry4e varchar(max)
	,@qry5e varchar(max)
	,@qry6e varchar(max)
	,@qry7e varchar(max)
	,@qry8e varchar(max)
	,@qry1f varchar(max)
	,@qry2f varchar(max)
	,@qry3f varchar(max)
	,@qry4f varchar(max)
	,@qry5f varchar(max)
	,@qry6f varchar(max)
	,@qry7f varchar(max)
	,@qry8f varchar(max)
	,@qry1g varchar(max)
	,@qry2g varchar(max)
	,@qry3g varchar(max)
	,@qry4g varchar(max)
	,@qry5g varchar(max)
	,@qry6g varchar(max)
	,@qry7g varchar(max)
	,@qry8g varchar(max)
	
select 
	@tou1=max(tou1),
	@tou2=max(tou2),
	@tou3=max(tou3),
	@tou4=max(tou4),
	@tou5=max(tou5),
	@tou6=max(tou6)
from 
(
	select 
	ROW_NUMBER() over(order by hourly_block_id) v,
		case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=1 then  1 else null end tou1,
		(case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=2 then  2 else null end) tou2,
		(case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=3 then  3 else null end) tou3,
		(case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=4 then  4 else null end) tou4,
		(case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=5 then  5 else null end) tou5,
		(case when (ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id))=6 then  6 else null end) tou6
	from block_type_group
) a
--select @tou1 ,@tou2 ,@tou3 ,@tou4 ,@tou5 ,@tou6
--return
--if @calc_explain_type='p' 
--begin
--	if @calc_tou_level='y' 
--		select @tou1=null,@tou2=null,@tou3=null,@tou4=null,@tou5=null,@tou6=null
--end
--else 
--begin
--	select @tou1=null,@tou2=null,@tou3=null,@tou4=null,@tou5=null,@tou6=null
--	set @calc_tou_level='y' 
--END

/*
if @calc_tou_level<>'y' 
	select @tou1=null,@tou2=null,@tou3=null,@tou4=null,@tou5=null,@tou6=null
*/
declare @sql_price varchar(max),@sql_price1 varchar(max),@sql_price2 varchar(max)

create table #tmp_hourly_price_only (
	rowid int,granularity_c int,granularity int,
	hr1 float,hr2 float,hr3 float,hr4 float,hr5 float,hr6 float,hr7 float,hr8 float,
	hr9 float,hr10 float,hr11 float,hr12 float,hr13 float,hr14 float,hr15 float,
	hr16 float,hr17 float,hr18 float,hr19 float,
	hr20 float,hr21 float,hr22 float,hr23 float,hr24 float,hr25 float
	,hr1_c float,hr2_c float,hr3_c float,hr4_c float,hr5_c float,hr6_c float,hr7_c float,hr8_c float,
	hr9_c float,hr10_c float,hr11_c float,hr12_c float,hr13_c float,hr14_c float,hr15_c float,
	hr16_c float,hr17_c float,hr18_c float,hr19_c float,
	hr20_c float,hr21_c float,hr22_c float,hr23_c float,hr24_c float,hr25_c float

)	


		
--select * into #hrly_price_curves1 from #hrly_price_curves
--select * into #hrly_price_curves2 from #hrly_price_curves
--select * into #hrly_price_curves3 from #hrly_price_curves
--select * into #temp_curves1 from #temp_curves
--select * into #temp_curves2 from #temp_curves
--select * into #temp_curves3 from #temp_curves
--select * into #temp_curves4 from #temp_curves
create index ix_pt_hrly1 on #hrly_price_curves (curve_id, granularity, as_of_date, period) include([0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
--create index ix_pt_hrly2 on #hrly_price_curves1 (curve_id, granularity, as_of_date, period) include([0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
--create index ix_pt_hrly3 on #hrly_price_curves2 (curve_id, granularity, as_of_date, period) include([0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
--create index ix_pt_hrly4 on #hrly_price_curves3 (curve_id, granularity, as_of_date, period) include([0],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
create index ix_pt_tmp_curve on #temp_curves (source_curve_def_id,maturity_date) include (curve_value, as_of_date)
--create index ix_pt_tmp_curve1 on #temp_curves1 (source_curve_def_id,maturity_date) include (curve_value, as_of_date)
--create index ix_pt_tmp_curve2 on #temp_curves2 (source_curve_def_id,maturity_date) include (curve_value, as_of_date)
--create index ix_pt_tmp_curve3 on #temp_curves3 (source_curve_def_id,maturity_date) include (curve_value, as_of_date)
--create index ix_pt_tmp_curve4 on #temp_curves4 (source_curve_def_id,maturity_date) include (curve_value, as_of_date)
create index ix_pt_lcv on #lag_curves_values(curve_id,contract_id) include (term_start,term_end,func_cur_id,lag_curve_value)		

set @sql_price=' 
select vol.rowid
,coalesce('+case when @calc_type='s' then 'pr5_c.granularity,' else '' end +' pr1_c.granularity,pr2_c.granularity, pr3_c.granularity, pr4_c.granularity) granularity_c
,coalesce(lcv.granularity, pr1.granularity, pr2.granularity, pr3.granularity, pr3b.granularity) granularity,
	coalesce(lcv.lag_curve_value,pr_set.~curve_value~, pr1.[0], pr2.[0], pr3.[0], pr3b.[0]) hr1,
	coalesce(lcv.lag_curve_value, pr1.[1], pr2.[1], pr3.[1], pr3b.[1]) hr2,
	coalesce(lcv.lag_curve_value, pr1.[2], pr2.[2], pr3.[2], pr3b.[2],0) hr3, 
	coalesce(lcv.lag_curve_value, pr1.[3], pr2.[3], pr3.[3], pr3b.[3]) hr4,
	coalesce(lcv.lag_curve_value, pr1.[4], pr2.[4], pr3.[4], pr3b.[4]) hr5,
	coalesce(lcv.lag_curve_value, pr1.[5], pr2.[5], pr3.[5], pr3b.[5]) hr6,
	coalesce(lcv.lag_curve_value, pr1.[6], pr2.[6], pr3.[6], pr3b.[6]) hr7,
	coalesce(lcv.lag_curve_value, pr1.[7], pr2.[7], pr3.[7], pr3b.[7]) hr8,
	coalesce(lcv.lag_curve_value, pr1.[8], pr2.[8], pr3.[8], pr3b.[8]) hr9,
	coalesce(lcv.lag_curve_value, pr1.[9], pr2.[9], pr3.[9], pr3b.[9]) hr10,
	coalesce(lcv.lag_curve_value, pr1.[10], pr2.[10], pr3.[10], pr3b.[10]) hr11,
	coalesce(lcv.lag_curve_value, pr1.[11], pr2.[11], pr3.[11], pr3b.[11]) hr12,
	coalesce(lcv.lag_curve_value, pr1.[12], pr2.[12], pr3.[12], pr3b.[12]) hr13,
	coalesce(lcv.lag_curve_value, pr1.[13], pr2.[13], pr3.[13], pr3b.[13]) hr14,
	coalesce(lcv.lag_curve_value, pr1.[14], pr2.[14], pr3.[14], pr3b.[14]) hr15,
	coalesce(lcv.lag_curve_value, pr1.[15], pr2.[15], pr3.[15], pr3b.[15]) hr16,
	coalesce(lcv.lag_curve_value, pr1.[16], pr2.[16], pr3.[16], pr3b.[16]) hr17,
	coalesce(lcv.lag_curve_value, pr1.[17], pr2.[17], pr3.[17], pr3b.[17]) hr18,
	coalesce(lcv.lag_curve_value, pr1.[18], pr2.[18], pr3.[18], pr3b.[18]) hr19, 
	coalesce(lcv.lag_curve_value, pr1.[19], pr2.[19], pr3.[19], pr3b.[19]) hr20,
	coalesce(lcv.lag_curve_value, pr1.[20], pr2.[20], pr3.[20], pr3b.[20],0) hr21,
	coalesce(lcv.lag_curve_value, pr1.[21], pr2.[21], pr3.[21], pr3b.[21]) hr22,
	coalesce(lcv.lag_curve_value, pr1.[22], pr2.[22], pr3.[22], pr3b.[22]) hr23,
	coalesce(lcv.lag_curve_value, pr1.[23], pr2.[23], pr3.[23], pr3b.[23]) hr24,
	coalesce(lcv.lag_curve_value, pr1.[24], pr2.[24], pr3.[24], pr3b.[24]) hr25,
	coalesce(pr5_c.[0], pr1_c.[0],pr2_c.[0], pr3_c.[0], pr4_c.[0]) hr1_c,
	coalesce(pr5_c.[1], pr1_c.[1],pr2_c.[1], pr3_c.[1], pr4_c.[1]) hr2_c,
	coalesce(pr5_c.[2], pr1_c.[2],pr2_c.[2], pr3_c.[2], pr4_c.[2],0) hr3_c, 
	coalesce(pr5_c.[3], pr1_c.[3],pr2_c.[3], pr3_c.[3], pr4_c.[3]) hr4_c,
	coalesce(pr5_c.[4], pr1_c.[4],pr2_c.[4], pr3_c.[4], pr4_c.[4]) hr5_c,
	coalesce(pr5_c.[5], pr1_c.[5],pr2_c.[5], pr3_c.[5], pr4_c.[5]) hr6_c,
	coalesce(pr5_c.[6], pr1_c.[6],pr2_c.[6], pr3_c.[6], pr4_c.[6]) hr7_c,
	coalesce(pr5_c.[7], pr1_c.[7],pr2_c.[7], pr3_c.[7], pr4_c.[7]) hr8_c,
	coalesce(pr5_c.[8], pr1_c.[8],pr2_c.[8], pr3_c.[8], pr4_c.[8]) hr9_c,
	coalesce(pr5_c.[9], pr1_c.[9],pr2_c.[9], pr3_c.[9], pr4_c.[9]) hr10_c,
	coalesce(pr5_c.[10], pr1_c.[10],pr2_c.[10], pr3_c.[10], pr4_c.[10]) hr11_c,
	coalesce(pr5_c.[11], pr1_c.[11],pr2_c.[11], pr3_c.[11], pr4_c.[11]) hr12_c,
	coalesce(pr5_c.[12], pr1_c.[12],pr2_c.[12], pr3_c.[12], pr4_c.[12]) hr13_c,
	coalesce(pr5_c.[13], pr1_c.[13],pr2_c.[13], pr3_c.[13], pr4_c.[13]) hr14_c,
	coalesce(pr5_c.[14], pr1_c.[14],pr2_c.[14], pr3_c.[14], pr4_c.[14]) hr15_c,
	coalesce(pr5_c.[15], pr1_c.[15],pr2_c.[15], pr3_c.[15], pr4_c.[15]) hr16_c,
	coalesce(pr5_c.[16], pr1_c.[16],pr2_c.[16], pr3_c.[16], pr4_c.[16]) hr17_c,
	coalesce(pr5_c.[17], pr1_c.[17],pr2_c.[17], pr3_c.[17], pr4_c.[17]) hr18_c,
	coalesce(pr5_c.[18], pr1_c.[18],pr2_c.[18], pr3_c.[18], pr4_c.[18]) hr19_c, 
	coalesce(pr5_c.[19], pr1_c.[19],pr2_c.[19], pr3_c.[19], pr4_c.[19]) hr20_c,
	coalesce(pr5_c.[20], pr1_c.[20],pr2_c.[20], pr3_c.[20], pr4_c.[20],0) hr21_c,
	coalesce(pr5_c.[21], pr1_c.[21],pr2_c.[21], pr3_c.[21], pr4_c.[21]) hr22_c,
	coalesce(pr5_c.[22], pr1_c.[22],pr2_c.[22], pr3_c.[22], pr4_c.[22]) hr23_c,
	coalesce(pr5_c.[23], pr1_c.[23],pr2_c.[23], pr3_c.[23], pr4_c.[23]) hr24_c,
	coalesce(pr5_c.[24], pr1_c.[24],pr2_c.[24], pr3_c.[24], pr4_c.[24]) hr25_c
'


SET @sql_price1= ' 
	into ~#tmp_hourly_price_only~
FROM '+@position_table_name+' vol with (NOLOCK)
	LEFT JOIN  ~#hrly_price_curves~ pr1 with (NOLOCK) ON pr1.curve_id='+case when @calc_type ='s' THEN 'isnull(vol.settlement_curve_id,vol.curve_id)' ELSE 'vol.curve_id' END +' and pr1.maturity_date=CASE '+case when @calc_type='s' then 'isnull(vol.settlement_curve_granularity,vol.curve_granularity)' else 'vol.curve_granularity' end +' WHEN 980 then convert(varchar(8),vol.term_start,120) + ''01'' 
			 WHEN 991 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN  992 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN 993 THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 ELSE vol.term_start 
		END  AND vol.period=case when '+case when @calc_type='s' then 'isnull(vol.settlement_curve_granularity,vol.curve_granularity)' else 'vol.curve_granularity' end +' in (994,987,989,995) then pr1.period else vol.period end --primary
	LEFT JOIN -- original curve
	~#hrly_price_curves~ pr2 with (NOLOCK) ON pr2.curve_id=vol.proxy_curve_id 
	and pr2.maturity_date=CASE vol.proxy_curve_granularity WHEN 980 then convert(varchar(8),vol.term_start,120) + ''01'' 
			 WHEN 991 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN  992 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN 993 THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 ELSE vol.term_start 
		END  AND vol.period=case when vol.proxy_curve_granularity in (994,987,989,995) then pr2.period else vol.period end   -- proxy curve 
	LEFT JOIN 
	~#hrly_price_curves~ pr3 with (NOLOCK) ON pr3.curve_id=vol.monthly_index 
		and pr3.maturity_date=CASE vol.monthly_index_granularity WHEN 980 then convert(varchar(8),vol.term_start,120) + ''01'' 
			 WHEN 991 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN  992 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN 993 THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 ELSE vol.term_start 
		END AND vol.period=case when vol.monthly_index_granularity in (994,987,989,995) then pr3.period else vol.period end -- monthly index curve	
	LEFT JOIN 
	~#hrly_price_curves~ pr3b with (NOLOCK) ON pr3b.curve_id=vol.proxy_curve_id3 
	and pr3b.maturity_date=CASE vol.proxy_curve_granularity3 WHEN 980 then convert(varchar(8),vol.term_start,120) + ''01'' 
			 WHEN 991 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN  992 THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN 993 THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 ELSE vol.term_start 
		END AND vol.period=case when vol.proxy_curve_granularity3 in (994,987,989,995) then pr3b.period else vol.period end --proxy3
	LEFT JOIN 
		#lag_curves_values lcv with (NOLOCK) ON lcv.curve_id = vol.curve_id AND
		lcv.contract_id =  vol.contract_id AND lcv.func_cur_id = vol.func_cur_id AND --lcv.term_start = vol.curve_maturity AND 
		lcv.term_start = vol.deal_term_start AND lcv.term_end = vol.deal_term_end 
	left join #temp_curves pr_set  with (NOLOCK) ON pr_set.maturity_date=vol.set_maturity  AND 
		pr_set.source_curve_def_id = vol.settlement_curve_id AND  ''' +@calc_type+'''=''s'' 
	left join source_price_curve_def spcd ON spcd.source_curve_def_id = vol.formula_curve_id 
	left join source_price_curve_def spcd_p ON spcd_p.source_curve_def_id = spcd.proxy_source_curve_def_id 
	left join source_price_curve_def spcd_p3 ON spcd_p3.source_curve_def_id = spcd.proxy_curve_id3 
	left join source_price_curve_def spcd_m ON spcd_m.source_curve_def_id = spcd.monthly_index 
	left join source_price_curve_def spcd_set ON spcd_set.source_curve_def_id = spcd.settlement_curve_id  and '''+ @calc_type+''' = ''s'' 
'

set @sql_price2='
	LEFT JOIN  ~#hrly_price_curves~ pr1_c with (NOLOCK) ON pr1_c.curve_id=spcd.source_curve_def_id
		and pr1_c.maturity_date=CASE WHEN (spcd.granularity = 980 OR vol.pricing IN (1601,1602)) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(Month(vol.term_start) as varchar) + ''-01'' 
			 WHEN (spcd.granularity = 991) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (spcd.granularity = 992) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (spcd.granularity = 993) THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 WHEN spcd.granularity in (987,982,981,989,997) then vol.term_start
			 ELSE vol.term_start 
		END  AND vol.period=case when spcd.granularity in (994,987,989,995) then pr1_c.period else vol.period end
	LEFT JOIN  ~#hrly_price_curves~ pr2_c with (NOLOCK) ON pr2_c.curve_id=spcd_p.source_curve_def_id
		and pr2_c.maturity_date=CASE WHEN (spcd_p.granularity = 980 OR vol.pricing IN (1601,1602)) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(Month(vol.term_start) as varchar) + ''-01'' 
			 WHEN (spcd_p.granularity = 991) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (spcd_p.granularity = 992) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (spcd_p.granularity = 993) THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 WHEN spcd_p.granularity in (987,982,981,989,997) then vol.term_start
			 ELSE vol.term_start 
		END  AND vol.period=case when spcd_p.granularity in (994,987,989,995) then pr2_c.period else vol.period end
	LEFT JOIN  ~#hrly_price_curves~ pr3_c with (NOLOCK) ON pr3_c.curve_id=spcd_p3.source_curve_def_id
		and pr3_c.maturity_date=CASE WHEN (spcd_p3.granularity = 980 OR vol.pricing IN (1601,1602)) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(Month(vol.term_start) as varchar) + ''-01'' 
			 WHEN (spcd_p3.granularity = 991) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (spcd_p3.granularity = 992) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (spcd_p3.granularity = 993) THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 WHEN spcd_p3.granularity in (987,982,981,989,997) then vol.term_start
			 ELSE vol.term_start 
		END  AND vol.period=case when spcd_p3.granularity in (994,987,989,995) then pr3_c.period else vol.period end
	LEFT JOIN  ~#hrly_price_curves~ pr4_c with (NOLOCK) ON pr4_c.curve_id=spcd_m.source_curve_def_id
		and pr4_c.maturity_date=CASE WHEN (spcd_m.granularity = 980 OR vol.pricing IN (1601,1602)) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(Month(vol.term_start) as varchar) + ''-01'' 
			 WHEN (spcd_m.granularity = 991) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (spcd_m.granularity = 992) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (spcd_m.granularity = 993) THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 WHEN spcd_m.granularity in (987,982,981,989,997) then vol.term_start
			 ELSE vol.term_start 
		END  AND vol.period=case when spcd_m.granularity in (994,987,989,995) then pr4_c.period else vol.period end 
	LEFT JOIN  ~#hrly_price_curves~ pr5_c with (NOLOCK) ON pr5_c.curve_id=spcd_set.source_curve_def_id
		and pr5_c.maturity_date=CASE WHEN (spcd_set.granularity = 980 OR vol.pricing IN (1601,1602)) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(Month(vol.term_start) as varchar) + ''-01'' 
			 WHEN (spcd_set.granularity = 991) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01'' 
			 WHEN (spcd_set.granularity = 992) THEN cast(Year(vol.term_start) as varchar) + ''-'' + cast(CASE datepart(q, vol.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			 WHEN (spcd_set.granularity = 993) THEN cast(Year(vol.term_start) as varchar) + ''-01-01'' 
			 WHEN spcd_set.granularity in (987,982,981,989,997) then vol.term_start
			 ELSE vol.term_start 
		END  AND vol.period=case when spcd_set.granularity in (994,987,989,995) then pr5_c.period else vol.period end AND  ''' +@calc_type+'''=''s'' 
'


--select * from #hrly_price_curves
--select * from #tmp_hourly_price_only 

set @sqlstmt='
	insert into #tmp_hourly_price_only (
		rowid ,granularity_c,granularity,hr1  ,hr2  ,hr3  ,hr4  ,hr5  ,hr6  ,hr7  ,hr8  ,hr9  ,hr10  ,hr11  ,hr12  ,hr13  ,hr14  ,hr15  ,
		hr16  ,hr17  ,hr18  ,hr19  ,hr20  ,hr21  ,hr22  ,hr23  ,hr24  ,hr25 
		,hr1_c  ,hr2_c  ,hr3_c  ,hr4_c  ,hr5_c  ,hr6_c  ,hr7_c  ,hr8_c  ,hr9_c  ,hr10_c  ,hr11_c  ,hr12_c  ,hr13_c  ,hr14_c  ,hr15_c  ,
		hr16_c  ,hr17_c  ,hr18_c  ,hr19_c  ,hr20_c  ,hr21_c  ,hr22_c  ,hr23_c  ,hr24_c  ,hr25_c  
	)	
	select * from #tmp_hourly_price_only_mid
	union all
	select * from #tmp_hourly_price_only_bid
	union all
	select * from #tmp_hourly_price_only_ask
'

set @qry1=REPLACE(@sql_price,'~curve_value~','curve_value')
set @qry2=REPLACE(@sql_price,'~curve_value~','bid_value')
set @qry3=REPLACE(@sql_price,'~curve_value~','ask_value')

set @qry4=REPLACE(REPLACE(REPLACE(@sql_price1+@sql_price2,'~#tmp_hourly_price_only~','#tmp_hourly_price_only_mid')	,'~#hrly_price_curves~','#hrly_price_curves'),'~curve_value~','curve_value')
		+ ' where isnull(vol.bid_n_ask_price,''n'')=''n'''

set @qry5=REPLACE(REPLACE(REPLACE(@sql_price1+@sql_price2,'~#tmp_hourly_price_only~','#tmp_hourly_price_only_bid')	,'~#hrly_price_curves~','#hrly_price_curves_bid'),'~curve_value~','bid_value')
		+ ' where isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''b'''

set @qry6=REPLACE(REPLACE(REPLACE(@sql_price1+@sql_price2,'~#tmp_hourly_price_only~','#tmp_hourly_price_only_ask')	,'~#hrly_price_curves~','#hrly_price_curves_ask'),'~curve_value~','ask_value')
		+ ' where isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''s'''


EXEC spa_print  '################################################## Mid ############################################################'
EXEC spa_print  @qry1
EXEC spa_print  @qry4

EXEC spa_print  '#################################################### Bid ##########################################################'
EXEC spa_print  @qry2
EXEC spa_print  @qry5

EXEC spa_print  '##################################################### Ask #########################################################'
EXEC spa_print  @qry3
EXEC spa_print  @qry6
EXEC spa_print  @sqlstmt
EXEC spa_print  '##############################################################################################################'



EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@qry1+@qry4+@qry2+@qry5+@qry3+@qry6+@sqlstmt)


if object_id('tempdb..#block_type_group') is not null
	drop table #block_type_group

select ROW_NUMBER() over(partition by block_type_group_id order by hourly_block_id) row_id ,a.* into #block_type_group from  block_type_group a

select term_date,grp.block_type_group_id,
	max(case when hr1=1 then grp.row_id else -1 end) hr1,
	max(case when hr2=1 then grp.row_id else -1 end) hr2,
	max(case when hr3=1 then grp.row_id else -1 end) hr3,
	max(case when hr4=1 then grp.row_id else -1 end) hr4,
	max(case when hr5=1 then grp.row_id else -1 end) hr5,
	max(case when hr6=1 then grp.row_id else -1 end) hr6,
	max(case when hr7=1 then grp.row_id else -1 end) hr7,
	max(case when hr8=1 then grp.row_id else -1 end) hr8,
	max(case when hr9=1 then grp.row_id else -1 end) hr9,
	max(case when hr10=1 then grp.row_id else -1 end) hr10,
	max(case when hr11=1 then grp.row_id else -1 end) hr11,
	max(case when hr12=1 then grp.row_id else -1 end) hr12,
	max(case when hr13=1 then grp.row_id else -1 end) hr13,
	max(case when hr14=1 then grp.row_id else -1 end) hr14,
	max(case when hr15=1 then grp.row_id else -1 end) hr15,
	max(case when hr16=1 then grp.row_id else -1 end) hr16,
	max(case when hr17=1 then grp.row_id else -1 end) hr17,
	max(case when hr18=1 then grp.row_id else -1 end) hr18,
	max(case when hr19=1 then grp.row_id else -1 end) hr19,
	max(case when hr20=1 then grp.row_id else -1 end) hr20,
	max(case when hr21=1 then grp.row_id else -1 end) hr21,
	max(case when hr22=1 then grp.row_id else -1 end) hr22,
	max(case when hr23=1 then grp.row_id else -1 end) hr23,
	max(case when hr24=1 then grp.row_id else -1 end) hr24
	,dst_group_value_id
into #tou_hour -- select * from #tou_hour
FROM #block_type_group grp	
inner join  hour_block_term hb  ON hb.block_define_id=grp.hourly_block_id   
--and 1=case when @calc_tou_level='y' then 1 else 2 end
group by  dst_group_value_id,grp.block_type_group_id,term_date

select sddh.source_deal_detail_id ,sddh.term_date,
	sum(case when hr=1 then sddh.price else 0 end) hr1,
	sum(case when hr=2 then sddh.price else 0 end) hr2,
	sum(case when hr=3 then sddh.price else 0 end) hr3,
	sum(case when hr=4 then sddh.price else 0 end) hr4,
	sum(case when hr=5 then sddh.price else 0 end) hr5,
	sum(case when hr=6 then sddh.price else 0 end) hr6,
	sum(case when hr=7 then sddh.price else 0 end) hr7,
	sum(case when hr=8 then sddh.price else 0 end) hr8,
	sum(case when hr=9 then sddh.price else 0 end) hr9,
	sum(case when hr=10 then sddh.price else 0 end) hr10,
	sum(case when hr=11 then sddh.price else 0 end) hr11,
	sum(case when hr=12 then sddh.price else 0 end) hr12,
	sum(case when hr=13 then sddh.price else 0 end) hr13,
	sum(case when hr=14 then sddh.price else 0 end) hr14,
	sum(case when hr=15 then sddh.price else 0 end) hr15,
	sum(case when hr=16 then sddh.price else 0 end) hr16,
	sum(case when hr=17 then sddh.price else 0 end) hr17,
	sum(case when hr=18 then sddh.price else 0 end) hr18,
	sum(case when hr=19 then sddh.price else 0 end) hr19,
	sum(case when hr=20 then sddh.price else 0 end) hr20,
	sum(case when hr=21 then sddh.price else 0 end) hr21,
	sum(case when hr=22 then sddh.price else 0 end) hr22,
	sum(case when hr=23 then sddh.price else 0 end) hr23,
	sum(case when hr=24 then sddh.price else 0 end) hr24,
	sum(case when hr=25 then sddh.price else 0 end) hr25

into #sddh
FROM 
(
select sddh.source_deal_detail_id ,sddh.term_date ,case when is_dst=1 then 25 else cast(left(sddh.hr,2) as int) end hr, avg(price) price
from source_deal_detail_hour sddh
inner join #temp_deals a  on sddh.source_deal_detail_id=a.source_deal_detail_id
	and sddh.term_date between a.term_start and a.term_end
	--and a.calc_mtm_at_tou_level='y' 
	group by sddh.source_deal_detail_id ,sddh.term_date ,case when is_dst=1 then 25 else cast(left(sddh.hr,2) as int) end
) sddh
where sddh.price is not null
group by sddh.source_deal_detail_id ,sddh.term_date

create index indx_tou_hour111 on  #tou_hour (dst_group_value_id,block_type_group_id ,term_date)	


create index indx_tmp_hourly_price_only on #tmp_hourly_price_only(rowid)	
--EXEC ('CREATE clustered INDEX [IX_PT_indx_tmp_hourly_price_only] ON ' + @tmp_hourly_price_only_pt + ' (rowid)')


set @qry1=',sum(case when coalesce(t.granularity,vol.curve_granularity,vol.proxy_curve_granularity,vol.monthly_index_granularity,vol.proxy_curve_granularity3) in (982,987,989,997) then --hourly/15/30 min
		case when isnull(hb.hr1,-1)=9999  then t.hr1* vol.hr1 else 0 end + 
		case when isnull(hb.hr2,-1)=9999  then case when dst1.hour=2 then 0 else t.hr2 end*(vol.hr2-case when dst.hour=2 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr3,-1)=9999  then  case when dst1.hour=3 then 0 else t.hr3 end* (vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr4,-1)=9999  then  t.hr4*vol.hr4 else 0 end +case when isnull(hb.hr5,-1)=9999  then  t.hr5*vol.hr5 else 0 end +
		case when isnull(hb.hr6,-1)=9999  then  t.hr6*vol.hr6 else 0 end +
		case when isnull(hb.hr7,-1)=9999  then  t.hr7*vol.hr7 else 0 end + 
		case when isnull(hb.hr8,-1)=9999  then  t.hr8*vol.hr8 else 0 end +
		case when isnull(hb.hr9,-1)=9999  then  t.hr9*vol.hr9 else 0 end + 
		case when isnull(hb.hr10,-1)=9999 then  t.hr10*vol.hr10 else 0 end +
		case when isnull(hb.hr11,-1)=9999 then  t.hr11*vol.hr11 else 0 end + 
		case when isnull(hb.hr12,-1)=9999 then  t.hr12*vol.hr12 else 0 end +
		case when isnull(hb.hr13,-1)=9999 then  t.hr13*vol.hr13 else 0 end + 
		case when isnull(hb.hr14,-1)=9999 then  t.hr14*vol.hr14 else 0 end +
		case when isnull(hb.hr15,-1)=9999 then  t.hr15*vol.hr15 else 0 end +
		case when isnull(hb.hr16,-1)=9999 then  t.hr16*vol.hr16 else 0 end +
		case when isnull(hb.hr17,-1)=9999 then  t.hr17*vol.hr17 else 0 end + 
		case when isnull(hb.hr18,-1)=9999 then  t.hr18*vol.hr18 else 0 end +
		case when isnull(hb.hr19,-1)=9999 then  t.hr19*vol.hr19 else 0 end + 
		case when isnull(hb.hr20,-1)=9999 then  case when dst1.hour=20 then 0 else t.hr20 end*(vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr21,-1)=9999 then  case when dst1.hour=21 then 0 else t.hr21 end*(vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr22,-1)=9999 then  t.hr22*vol.hr22 else 0 end +
		case when isnull(hb.hr23,-1)=9999 then  t.hr23*vol.hr23 else 0 end + 
		case when isnull(hb.hr24,-1)=9999 then  t.hr24*vol.hr24  else 0 end+
		case when (isnull(hb.hr3,-1)=9999 or isnull(hb.hr2,-1)=9999 ) and isnull(dst.[hour],0)<>0  then isnull(t.hr25,case when isnull(dst.[hour],0)=2 then t.hr2 else t.hr3 end)*isnull(vol.hr25,0) else 0 end
	else --daily
		t.hr1*
		(case when isnull(hb.hr1,-1)=9999 then vol.hr1 else 0 end+ case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
		+case when isnull(hb.hr3,-1)=9999 then  vol.hr3  else 0 end  + case when isnull(hb.hr4,-1)=9999 then coalesce(vol.hr4,0) else 0 end
		+case when isnull(hb.hr5,-1)=9999 then  vol.hr5 else 0 end+ case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
		+case when isnull(hb.hr7,-1)=9999 then  vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
		+case when isnull(hb.hr9,-1)=9999 then  vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
		+case when isnull(hb.hr11,-1)=9999 then  vol.hr11 else 0 end+ case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
		+case when isnull(hb.hr13,-1)=9999 then  vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
		+case when isnull(hb.hr15,-1)=9999 then  vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
		+case when isnull(hb.hr17,-1)=9999 then  vol.hr17 else 0 end + case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
		+case when isnull(hb.hr19,-1)=9999 then  vol.hr19 else 0 end + case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
		+case when isnull(hb.hr21,-1)=9999 then  vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
		+case when isnull(hb.hr23,-1)=9999 then  vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end
		)
	end) market_value_9999,
'
	
set @qry2='
-1*sum(case when t.granularity_c in (982,987,989,997) then --hourly/15/30 min
		case when isnull(hb.hr1,-1)=9999  then t.hr1_c* vol.hr1 else 0 end + 
		case when isnull(hb.hr2,-1)=9999  then case when dst1.hour=2 then 0 else t.hr2_c end*(vol.hr2-case when dst.hour=2 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr3,-1)=9999  then  case when dst1.hour=3 then 0 else t.hr3_c end* (vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr4,-1)=9999  then  t.hr4_c*vol.hr4 else 0 end +case when isnull(hb.hr5,-1)=9999  then  t.hr5_c*vol.hr5 else 0 end +
		case when isnull(hb.hr6,-1)=9999  then  t.hr6_c*vol.hr6 else 0 end +
		case when isnull(hb.hr7,-1)=9999  then  t.hr7_c*vol.hr7 else 0 end + 
		case when isnull(hb.hr8,-1)=9999  then  t.hr8_c*vol.hr8 else 0 end +
		case when isnull(hb.hr9,-1)=9999  then  t.hr9_c*vol.hr9 else 0 end + 
		case when isnull(hb.hr10,-1)=9999 then  t.hr10_c*vol.hr10 else 0 end +
		case when isnull(hb.hr11,-1)=9999 then  t.hr11_c*vol.hr11 else 0 end + 
		case when isnull(hb.hr12,-1)=9999 then  t.hr12_c*vol.hr12 else 0 end +
		case when isnull(hb.hr13,-1)=9999 then  t.hr13_c*vol.hr13 else 0 end + 
		case when isnull(hb.hr14,-1)=9999 then  t.hr14_c*vol.hr14 else 0 end +
		case when isnull(hb.hr15,-1)=9999 then  t.hr15_c*vol.hr15 else 0 end +
		case when isnull(hb.hr16,-1)=9999 then  t.hr16_c*vol.hr16 else 0 end +
		case when isnull(hb.hr17,-1)=9999 then  t.hr17_c*vol.hr17 else 0 end + 
		case when isnull(hb.hr18,-1)=9999 then  t.hr18_c*vol.hr18 else 0 end +
		case when isnull(hb.hr19,-1)=9999 then  t.hr19_c*vol.hr19 else 0 end + 
		case when isnull(hb.hr20,-1)=9999 then  case when dst1.hour=20 then 0 else t.hr20_c end*(vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr21,-1)=9999 then  case when dst1.hour=21 then 0 else t.hr21_c end*(vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr22,-1)=9999 then  t.hr22_c*vol.hr22 else 0 end +
		case when isnull(hb.hr23,-1)=9999 then  t.hr23_c*vol.hr23 else 0 end + 
		case when isnull(hb.hr24,-1)=9999 then  t.hr24_c*vol.hr24  else 0 end+
		case when (isnull(hb.hr3,-1)=9999 or isnull(hb.hr2,-1)=9999 ) and isnull(dst.[hour],0)<>0  then isnull(t.hr25_c,case when isnull(dst.[hour],0)=2 then t.hr2_c else t.hr3_c end)*isnull(vol.hr25,0) else 0 end
	else --daily
		t.hr1_c*
		(case when isnull(hb.hr1,-1)=9999 then vol.hr1 else 0 end+ case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
		+case when isnull(hb.hr3,-1)=9999 then  vol.hr3  else 0 end  + case when isnull(hb.hr4,-1)=9999 then coalesce(vol.hr4,0) else 0 end
		+case when isnull(hb.hr5,-1)=9999 then  vol.hr5 else 0 end+ case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
		+case when isnull(hb.hr7,-1)=9999 then  vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
		+case when isnull(hb.hr9,-1)=9999 then  vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
		+case when isnull(hb.hr11,-1)=9999 then  vol.hr11 else 0 end+ case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
		+case when isnull(hb.hr13,-1)=9999 then  vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
		+case when isnull(hb.hr15,-1)=9999 then  vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
		+case when isnull(hb.hr17,-1)=9999 then  vol.hr17 else 0 end + case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
		+case when isnull(hb.hr19,-1)=9999 then  vol.hr19 else 0 end + case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
		+case when isnull(hb.hr21,-1)=9999 then  vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
		+case when isnull(hb.hr23,-1)=9999 then  vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end
		)
	end) contract_value_9999,'

set @qry3='
	sum(case when coalesce(t.granularity,vol.curve_granularity,vol.proxy_curve_granularity,vol.monthly_index_granularity,vol.proxy_curve_granularity3) in (982,987,989,997) then --hourly/15/30 min
		case when isnull(hb.hr1,-1)=9999  then t.hr1* vol.hr1 else 0 end + 
		case when isnull(hb.hr2,-1)=9999  then case when dst1.hour=2 then 0 else t.hr2 end*(vol.hr2-case when dst.hour=2 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr3,-1)=9999  then  case when dst1.hour=3 then 0 else t.hr3 end* (vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr4,-1)=9999  then  t.hr4*vol.hr4 else 0 end +
		case when isnull(hb.hr5,-1)=9999  then  t.hr5*vol.hr5 else 0 end +
		case when isnull(hb.hr6,-1)=9999  then  t.hr6*vol.hr6 else 0 end +
		case when isnull(hb.hr7,-1)=9999  then  t.hr7*vol.hr7 else 0 end + 
		case when isnull(hb.hr8,-1)=9999  then  t.hr8*vol.hr8 else 0 end +
		case when isnull(hb.hr9,-1)=9999  then  t.hr9*vol.hr9 else 0 end + 
		case when isnull(hb.hr10,-1)=9999 then  t.hr10*vol.hr10 else 0 end +
		case when isnull(hb.hr11,-1)=9999 then  t.hr11*vol.hr11 else 0 end + 
		case when isnull(hb.hr12,-1)=9999 then  t.hr12*vol.hr12 else 0 end +
		case when isnull(hb.hr13,-1)=9999 then  t.hr13*vol.hr13 else 0 end + 
		case when isnull(hb.hr14,-1)=9999 then  t.hr14*vol.hr14 else 0 end +
		case when isnull(hb.hr15,-1)=9999 then  t.hr15*vol.hr15 else 0 end +
		case when isnull(hb.hr16,-1)=9999 then  t.hr16*vol.hr16 else 0 end +
		case when isnull(hb.hr17,-1)=9999 then  t.hr17*vol.hr17 else 0 end + 
		case when isnull(hb.hr18,-1)=9999 then  t.hr18*vol.hr18 else 0 end +
		case when isnull(hb.hr19,-1)=9999 then  t.hr19*vol.hr19 else 0 end + 
		case when isnull(hb.hr20,-1)=9999 then  case when dst1.hour=20 then 0 else t.hr20 end*(vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr21,-1)=9999 then  case when dst1.hour=21 then 0 else t.hr21 end*(vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr22,-1)=9999 then  t.hr22*vol.hr22 else 0 end +
		case when isnull(hb.hr23,-1)=9999 then  t.hr23*vol.hr23 else 0 end + 
		case when isnull(hb.hr24,-1)=9999 then  t.hr24*vol.hr24  else 0 end+
		case when (isnull(hb.hr3,-1)=9999 or isnull(hb.hr2,-1)=9999) and isnull(dst.[hour],0)<>0  then isnull(t.hr25,case when isnull(dst.[hour],0)=2 then t.hr2 else t.hr3 end)*isnull(vol.hr25,0) else 0 end
	else --daily
		t.hr1*
		(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end + case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3 else 0 end + case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5 else 0 end + case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11 else 0 end + case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17 else 0 end +case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end)
	end)/isnull(nullif(sum(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end + case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3 else 0 end + case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5 else 0 end + case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11  else 0 end+ case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17 else 0 end +case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end),0),1) curve_value_9999,
'


set @qry4='	
sum(case when t.granularity_c in (982,987,989,997) then --hourly/15/30 min
		case when isnull(hb.hr1,-1)=9999  then t.hr1_c* vol.hr1 else 0 end + 
		case when isnull(hb.hr2,-1)=9999  then case when dst1.hour=2 then 0 else t.hr2_c end*(vol.hr2-case when dst.hour=2 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr3,-1)=9999  then  case when dst1.hour=3 then 0 else t.hr3_c end* (vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr4,-1)=9999  then  t.hr4_c*vol.hr4 else 0 end +
		case when isnull(hb.hr5,-1)=9999  then  t.hr5_c*vol.hr5 else 0 end +
		case when isnull(hb.hr6,-1)=9999  then  t.hr6_c*vol.hr6 else 0 end +
		case when isnull(hb.hr7,-1)=9999  then  t.hr7_c*vol.hr7 else 0 end + 
		case when isnull(hb.hr8,-1)=9999  then  t.hr8_c*vol.hr8 else 0 end +
		case when isnull(hb.hr9,-1)=9999  then  t.hr9_c*vol.hr9 else 0 end + 
		case when isnull(hb.hr10,-1)=9999 then  t.hr10_c*vol.hr10 else 0 end +
		case when isnull(hb.hr11,-1)=9999 then  t.hr11_c*vol.hr11 else 0 end + 
		case when isnull(hb.hr12,-1)=9999 then  t.hr12_c*vol.hr12 else 0 end +
		case when isnull(hb.hr13,-1)=9999 then  t.hr13_c*vol.hr13 else 0 end + 
		case when isnull(hb.hr14,-1)=9999 then  t.hr14_c*vol.hr14 else 0 end +
		case when isnull(hb.hr15,-1)=9999 then  t.hr15_c*vol.hr15 else 0 end +
		case when isnull(hb.hr16,-1)=9999 then  t.hr16_c*vol.hr16 else 0 end +
		case when isnull(hb.hr17,-1)=9999 then  t.hr17_c*vol.hr17 else 0 end + 
		case when isnull(hb.hr18,-1)=9999 then  t.hr18_c*vol.hr18 else 0 end +
		case when isnull(hb.hr19,-1)=9999 then  t.hr19_c*vol.hr19 else 0 end + 
		case when isnull(hb.hr20,-1)=9999 then  case when dst1.hour=20 then 0 else t.hr20_c end*(vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr21,-1)=9999 then  case when dst1.hour=21 then 0 else t.hr21_c end*(vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr22,-1)=9999 then  t.hr22_c*vol.hr22 else 0 end +
		case when isnull(hb.hr23,-1)=9999 then  t.hr23_c*vol.hr23 else 0 end + 
		case when isnull(hb.hr24,-1)=9999 then  t.hr24_c*vol.hr24  else 0 end+
		case when (isnull(hb.hr3,-1)=9999 or isnull(hb.hr2,-1)=9999) and isnull(dst.[hour],0)<>0  then isnull(t.hr25_c,case when isnull(dst.[hour],0)=2 then t.hr2_c else t.hr3_c end)*isnull(vol.hr25,0) else 0 end
	else --daily
		t.hr1_c*
		(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end + case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3 else 0 end + case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5 else 0 end + case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11 else 0 end + case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17 else 0 end +case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end)
	end)/isnull(nullif(sum(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end + case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3 else 0 end + case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5 else 0 end + case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11  else 0 end+ case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17 else 0 end +case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end),0),1) curve_value_c_9999,
		sum(
		case when isnull(hb.hr1,-1)=9999  then sddh.hr1 * vol.hr1 else 0 end + 
		case when isnull(hb.hr2,-1)=9999  then case when dst1.hour=2 then 0 else sddh.hr2  end*(vol.hr2-case when dst.hour=2 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr3,-1)=9999  then  case when dst1.hour=3 then 0 else sddh.hr3  end* (vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr4,-1)=9999  then  sddh.hr4 *vol.hr4 else 0 end +
		case when isnull(hb.hr5,-1)=9999  then  sddh.hr5 *vol.hr5 else 0 end +
		case when isnull(hb.hr6,-1)=9999  then  sddh.hr6 *vol.hr6 else 0 end +
		case when isnull(hb.hr7,-1)=9999  then  sddh.hr7 *vol.hr7 else 0 end + 
		case when isnull(hb.hr8,-1)=9999  then  sddh.hr8 *vol.hr8 else 0 end +
		case when isnull(hb.hr9,-1)=9999  then  sddh.hr9 *vol.hr9 else 0 end + 
		case when isnull(hb.hr10,-1)=9999 then  sddh.hr10 *vol.hr10 else 0 end +
		case when isnull(hb.hr11,-1)=9999 then  sddh.hr11 *vol.hr11 else 0 end + 
		case when isnull(hb.hr12,-1)=9999 then  sddh.hr12 *vol.hr12 else 0 end +
		case when isnull(hb.hr13,-1)=9999 then  sddh.hr13 *vol.hr13 else 0 end + 
		case when isnull(hb.hr14,-1)=9999 then  sddh.hr14 *vol.hr14 else 0 end +
		case when isnull(hb.hr15,-1)=9999 then  sddh.hr15 *vol.hr15 else 0 end +
		case when isnull(hb.hr16,-1)=9999 then  sddh.hr16 *vol.hr16 else 0 end +
		case when isnull(hb.hr17,-1)=9999 then  sddh.hr17 *vol.hr17 else 0 end + 
		case when isnull(hb.hr18,-1)=9999 then  sddh.hr18 *vol.hr18 else 0 end +
		case when isnull(hb.hr19,-1)=9999 then  sddh.hr19 *vol.hr19 else 0 end + 
		case when isnull(hb.hr20,-1)=9999 then  case when dst1.hour=20 then 0 else sddh.hr20  end*(vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end) else 0 end +
		case when isnull(hb.hr21,-1)=9999 then  case when dst1.hour=21 then 0 else sddh.hr21  end*(vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end) else 0 end + 
		case when isnull(hb.hr22,-1)=9999 then  sddh.hr22 *vol.hr22 else 0 end +
		case when isnull(hb.hr23,-1)=9999 then  sddh.hr23 *vol.hr23 else 0 end + 
		case when isnull(hb.hr24,-1)=9999 then  sddh.hr24 *vol.hr24  else 0 end+
		case when (isnull(hb.hr3,-1)=9999 or isnull(hb.hr2,-1)=9999) and isnull(dst.[hour],0)<>0  then sddh.hr25 *isnull(vol.hr25,0) else 0 end)
	/isnull(nullif(sum(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end + case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3 else 0 end + case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5 else 0 end + case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11  else 0 end+ case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15 else 0 end + case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17 else 0 end +case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21 else 0 end + case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23 else 0 end + case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end),0),1) fixed_price_9999,			
	'


set @qry5='
	sum(case when coalesce(t.granularity,vol.curve_granularity,vol.proxy_curve_granularity,vol.monthly_index_granularity,vol.proxy_curve_granularity3) in (982,987,989,997) then --hourly/15/30 min
			case when isnull(hb.hr1,-1)=9999 then t.hr1 else 0 end + 
			case when isnull(hb.hr2,-1)=9999 then t.hr2 else 0 end + 
			case when isnull(hb.hr3,-1)=9999 then t.hr3 else 0 end + 
			case when isnull(hb.hr4,-1)=9999 then t.hr4 else 0 end + 
			case when isnull(hb.hr5,-1)=9999 then t.hr5 else 0 end + 
			case when isnull(hb.hr6,-1)=9999 then t.hr6 else 0 end + 
			case when isnull(hb.hr7,-1)=9999 then t.hr7 else 0 end + 
			case when isnull(hb.hr8,-1)=9999 then t.hr8 else 0 end + 
			case when isnull(hb.hr9,-1)=9999 then t.hr9 else 0 end + 
			case when isnull(hb.hr10,-1)=9999 then t.hr10  else 0 end + 
			case when isnull(hb.hr11,-1)=9999 then t.hr11 else 0 end + 
			case when isnull(hb.hr12,-1)=9999 then t.hr12 else 0 end + 
			case when isnull(hb.hr13,-1)=9999 then  t.hr13 else 0 end + 
			case when isnull(hb.hr14,-1)=9999 then  t.hr14 else 0 end + 
			case when isnull(hb.hr15,-1)=9999 then t.hr15 else 0 end + 
			case when isnull(hb.hr16,-1)=9999 then  t.hr16 else 0 end + 
			case when isnull(hb.hr17,-1)=9999 then  t.hr17 else 0 end + 
			case when isnull(hb.hr18,-1)=9999 then  t.hr18 else 0 end + 
			case when isnull(hb.hr19,-1)=9999 then  t.hr19 else 0 end + 
			case when isnull(hb.hr20,-1)=9999 then  t.hr20 else 0 end +  
			case when isnull(hb.hr21,-1)=9999 then  t.hr21 else 0 end +  
			case when isnull(hb.hr22,-1)=9999 then t.hr22 else 0 end + 
			case when isnull(hb.hr23,-1)=9999 then t.hr23 else 0 end + 
			case when isnull(hb.hr24,-1)=9999 then t.hr24 else 0 end + 
			case when isnull(hb.hr3,-1)=9999 then t.hr25  else 0 end
		else --daily
			case when isnull(hb.hr1,-1)=9999 then t.hr1 else 0 end  
		end) /isnull(nullif(round(sum(case when coalesce(vol.curve_granularity,vol.proxy_curve_granularity,vol.monthly_index_granularity,vol.proxy_curve_granularity3) in (982,987,989,997) then
			case when isnull(hb.hr1,-1)=9999 then  1 ELSE 0 END + case when isnull(hb.hr2,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr3,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr4,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr5,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr6,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr7,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr8,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr9,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr10,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr11,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr12,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr13,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr14,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr15,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr16,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr17,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr18,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr19,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr20,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr21,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr22,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr23,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr24,-1)=9999 then 1 ELSE 0 END+ 
			case when dst.hour in(2,3) then case when isnull(hb.hr3,-1)=9999 then 1 ELSE 0 END else 0 end
		else 1 end
		), max(volume_rounding)), 0),1)   avg_curve_value_9999,
'

set @qry6='	
sum(case when t.granularity_c in (982,987,989,997) then --hourly/15/30 min
			case when isnull(hb.hr1,-1)=9999 then t.hr1_c else 0 end + 
			case when isnull(hb.hr2,-1)=9999 then t.hr2_c else 0 end + 
			case when isnull(hb.hr3,-1)=9999 then t.hr3_c else 0 end + 
			case when isnull(hb.hr4,-1)=9999 then t.hr4_c else 0 end + 
			case when isnull(hb.hr5,-1)=9999 then t.hr5_c else 0 end + 
			case when isnull(hb.hr6,-1)=9999 then t.hr6_c else 0 end + 
			case when isnull(hb.hr7,-1)=9999 then t.hr7_c else 0 end + 
			case when isnull(hb.hr8,-1)=9999 then t.hr8_c else 0 end + 
			case when isnull(hb.hr9,-1)=9999 then t.hr9_c else 0 end + 
			case when isnull(hb.hr10,-1)=9999 then t.hr10_c  else 0 end + 
			case when isnull(hb.hr11,-1)=9999 then t.hr11_c else 0 end + 
			case when isnull(hb.hr12,-1)=9999 then t.hr12_c else 0 end + 
			case when isnull(hb.hr13,-1)=9999 then  t.hr13_c else 0 end + 
			case when isnull(hb.hr14,-1)=9999 then  t.hr14_c else 0 end + 
			case when isnull(hb.hr15,-1)=9999 then t.hr15_c else 0 end + 
			case when isnull(hb.hr16,-1)=9999 then  t.hr16_c else 0 end + 
			case when isnull(hb.hr17,-1)=9999 then  t.hr17_c else 0 end + 
			case when isnull(hb.hr18,-1)=9999 then  t.hr18_c else 0 end + 
			case when isnull(hb.hr19,-1)=9999 then  t.hr19_c else 0 end + 
			case when isnull(hb.hr20,-1)=9999 then  t.hr20_c else 0 end +  
			case when isnull(hb.hr21,-1)=9999 then  t.hr21_c else 0 end +  
			case when isnull(hb.hr22,-1)=9999 then t.hr22_c else 0 end + 
			case when isnull(hb.hr23,-1)=9999 then t.hr23_c else 0 end + 
			case when isnull(hb.hr24,-1)=9999 then t.hr24_c else 0 end + 
			case when isnull(hb.hr3,-1)=9999 then t.hr25_c  else 0 end
		else --daily
			case when isnull(hb.hr1,-1)=9999 then t.hr1_c else 0 end  
		end) /isnull(nullif(round(sum(case when coalesce(t.granularity,vol.curve_granularity,vol.proxy_curve_granularity,vol.monthly_index_granularity,vol.proxy_curve_granularity3) in (982,987,989,997) then
			case when isnull(hb.hr1,-1)=9999 then  1 ELSE 0 END + case when isnull(hb.hr2,-1)=9999 then 1 ELSE 0 END  + 
			case when isnull(hb.hr3,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr4,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr5,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr6,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr7,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr8,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr9,-1)=9999 then  1 ELSE 0 END+  case when isnull(hb.hr10,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr11,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr12,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr13,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr14,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr15,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr16,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr17,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr18,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr19,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr20,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr21,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr22,-1)=9999 then 1 ELSE 0 END+ 
			case when isnull(hb.hr23,-1)=9999 then 1 ELSE 0 END+  case when isnull(hb.hr24,-1)=9999 then 1 ELSE 0 END+ 
			case when dst.hour in(2,3) then case when isnull(hb.hr3,-1)=9999 then 1 ELSE 0 END else 0 end
		else 1 end
		), max(volume_rounding)), 0),1) avg_curve_value_c_9999,

'

SET  @exclude_zero_position_query = IIF(@exclude_zero_position = 1, '<> 0', 'IS NOT NULL')
set @qry7=
	case when  @calc_type='s' then '
		sum(case when isnull(hb.hr1,-1)=9999 then isnull(vol.mhr1,0)  else 0 end + case when isnull(hb.hr2,-1)=9999 then isnull(vol.mhr2,0)   else 0 end+ case when isnull(hb.hr3,-1)=9999 then isnull(vol.mhr3,0)   else 0 end + case when isnull(hb.hr4,-1)=9999 then isnull(vol.mhr4,0)   else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then isnull(vol.mhr5,0)   else 0 end + case when isnull(hb.hr6,-1)=9999 then isnull(vol.mhr6,0)   else 0 end+ case when isnull(hb.hr7,-1)=9999 then isnull(vol.mhr7,0)   else 0 end + case when isnull(hb.hr8,-1)=9999 then isnull(vol.mhr8,0)   else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then isnull(vol.mhr9,0)   else 0 end + case when isnull(hb.hr10,-1)=9999 then isnull(vol.mhr10,0)   else 0 end+ case when isnull(hb.hr11,-1)=9999 then isnull(vol.mhr11,0)   else 0 end + case when isnull(hb.hr12,-1)=9999 then isnull(vol.mhr12,0)   else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then isnull(vol.mhr13,0)   else 0 end + case when isnull(hb.hr14,-1)=9999 then isnull(vol.mhr14,0)   else 0 end+ case when isnull(hb.hr15,-1)=9999 then isnull(vol.mhr15,0)   else 0 end + case when isnull(hb.hr16,-1)=9999 then isnull(vol.mhr16,0)   else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then isnull(vol.mhr17,0)   else 0 end + case when isnull(hb.hr18,-1)=9999 then isnull(vol.mhr18,0)   else 0 end+ case when isnull(hb.hr19,-1)=9999 then isnull(vol.mhr19,0)   else 0 end + case when isnull(hb.hr20,-1)=9999 then isnull(vol.mhr20,0)   else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then isnull(vol.mhr21,0)   else 0 end + case when isnull(hb.hr22,-1)=9999 then isnull(vol.mhr22,0)   else 0 end+ case when isnull(hb.hr23,-1)=9999 then isnull(vol.mhr23,0)   else 0 end + case when isnull(hb.hr24,-1)=9999 then isnull(vol.mhr24,0)   else 0 end
			)'
	else ' null ' end +' allocation_volume_9999,	
	round(sum(case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end  + case when isnull(hb.hr2,-1)=9999 then vol.hr2  else 0 end 
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3  else 0 end  + case when isnull(hb.hr4,-1)=9999 then vol.hr4  else 0 end 
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5  else 0 end  + case when isnull(hb.hr6,-1)=9999 then vol.hr6  else 0 end 
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7  else 0 end + case when isnull(hb.hr8,-1)=9999 then vol.hr8  else 0 end 
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9  else 0 end + case when isnull(hb.hr10,-1)=9999 then vol.hr10  else 0 end 
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11  else 0 end  + case when isnull(hb.hr12,-1)=9999 then vol.hr12  else 0 end 
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13  else 0 end + case when isnull(hb.hr14,-1)=9999 then vol.hr14  else 0 end 
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15  else 0 end  + case when isnull(hb.hr16,-1)=9999 then vol.hr16  else 0 end 
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17  else 0 end  + case when isnull(hb.hr18,-1)=9999 then vol.hr18  else 0 end 
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19  else 0 end + case when isnull(hb.hr20,-1)=9999 then vol.hr20  else 0 end 
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21  else 0 end  + case when isnull(hb.hr22,-1)=9999 then vol.hr22  else 0 end 
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23  else 0 end  + case when isnull(hb.hr24,-1)=9999 then vol.hr24  else 0 end 
			), max(volume_rounding)) volume_9999,
'
set @qry8='
		CAST(sum(
		case when isnull(hb.hr1,-1)=9999 and vol.hr1 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr2,-1)=9999 and vol.hr2 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr3,-1)=9999 and vol.hr3 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr4,-1)=9999 and vol.hr4 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr5,-1)=9999 and vol.hr5 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr6,-1)=9999 and vol.hr6 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr7,-1)=9999 and vol.hr7 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr8,-1)=9999 and vol.hr8 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr9,-1)=9999 and vol.hr9 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr10,-1)=9999 and vol.hr10 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr11,-1)=9999 and vol.hr11 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr12,-1)=9999 and vol.hr12 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr13,-1)=9999 and vol.hr13 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr14,-1)=9999 and vol.hr14 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr15,-1)=9999 and vol.hr15 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr16,-1)=9999 and vol.hr16 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr17,-1)=9999 and vol.hr17 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr18,-1)=9999 and vol.hr18 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr19,-1)=9999 and vol.hr19 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr20,-1)=9999 and vol.hr20 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr21,-1)=9999 and vol.hr21 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr22,-1)=9999 and vol.hr22 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr23,-1)=9999 and vol.hr23 ' + @exclude_zero_position_query + ' then 1 else 0 end +
		case when isnull(hb.hr24,-1)=9999 and vol.hr24 ' + @exclude_zero_position_query + ' then 1 else 0 end + '
		+ CASE WHEN @exclude_zero_position = 1 THEN
			'case when (isnull(hb.hr2,-1)=9999 OR isnull(hb.hr3,-1)=9999) and vol.hr25 <> 0 then 1 else 0 end)'
		ELSE
			'case when dst.hour in(2,3) then case when isnull(hb.hr3,-1)=9999 then 1 ELSE 0 END else 0 end)'
		END + ' AS FLOAT) no_hrs_9999,

	-1*round(sum(
			  case when isnull(hb.hr1,-1)=9999 then vol.hr1  else 0 end+ case when isnull(hb.hr2,-1)=9999 then vol.hr2 else 0 end
			+ case when isnull(hb.hr3,-1)=9999 then vol.hr3  else 0 end+ case when isnull(hb.hr4,-1)=9999 then vol.hr4 else 0 end
			+ case when isnull(hb.hr5,-1)=9999 then vol.hr5  else 0 end+ case when isnull(hb.hr6,-1)=9999 then vol.hr6 else 0 end
			+ case when isnull(hb.hr7,-1)=9999 then vol.hr7 else 0 end+ case when isnull(hb.hr8,-1)=9999 then vol.hr8 else 0 end
			+ case when isnull(hb.hr9,-1)=9999 then vol.hr9 else 0 end+ case when isnull(hb.hr10,-1)=9999 then vol.hr10 else 0 end
			+ case when isnull(hb.hr11,-1)=9999 then vol.hr11 else 0 end + case when isnull(hb.hr12,-1)=9999 then vol.hr12 else 0 end
			+ case when isnull(hb.hr13,-1)=9999 then vol.hr13 else 0 end+ case when isnull(hb.hr14,-1)=9999 then vol.hr14 else 0 end
			+ case when isnull(hb.hr15,-1)=9999 then vol.hr15  else 0 end+ case when isnull(hb.hr16,-1)=9999 then vol.hr16 else 0 end
			+ case when isnull(hb.hr17,-1)=9999 then vol.hr17  else 0 end+ case when isnull(hb.hr18,-1)=9999 then vol.hr18 else 0 end
			+ case when isnull(hb.hr19,-1)=9999 then vol.hr19 else 0 end+ case when isnull(hb.hr20,-1)=9999 then vol.hr20 else 0 end
			+ case when isnull(hb.hr21,-1)=9999 then vol.hr21  else 0 end+ case when isnull(hb.hr22,-1)=9999 then vol.hr22 else 0 end
			+ case when isnull(hb.hr23,-1)=9999 then vol.hr23  else 0 end+ case when isnull(hb.hr24,-1)=9999 then vol.hr24 else 0 end
			), max(volume_rounding)) volume_c_9999
'

set @qry1a=replace(@qry1,'=9999','=-1')
set @qry2a=replace(@qry2,'=9999','=-1')
set @qry3a=replace(@qry3,'=9999','=-1')
set @qry4a=replace(@qry4,'=9999','=-1')
set @qry5a=replace(@qry5,'=9999','=-1')
set @qry6a=replace(@qry6,'=9999','=-1')
--set @qry60a=replace(@qry60,'=9999',' is null ')
set @qry7a=replace(@qry7,'=9999','=-1')
set @qry8a=replace(@qry8,'=9999','=-1')


if @tou2 is not null
begin
	set @qry1b= replace(@qry1,'9999',@tou2)
	set @qry2b= replace(@qry2,'9999',@tou2)
	set @qry3b= replace(@qry3,'9999',@tou2)
	set @qry4b= replace(@qry4,'9999',@tou2)
	set @qry5b= replace(@qry5,'9999',@tou2)
	set @qry6b= replace(@qry6,'9999',@tou2)
	--set @qry60b= replace(@qry60,'9999',@tou2)
	set @qry7b= replace(@qry7,'9999',@tou2)
	set @qry8b= replace(@qry8,'9999',@tou2)
end
else
begin
	set @qry1b= ''
	set @qry2b= ''
	set @qry3b= ''
	set @qry4b= ''
	set @qry5b= ''
	set @qry6b= ''
	--set @qry60b= ''
	set @qry7b= ''
	set @qry8b= ''
end 


if @tou3 is not null
begin
	set @qry1c= replace(@qry1,'9999',@tou3)
	set @qry2c= replace(@qry2,'9999',@tou3)
	set @qry3c= replace(@qry3,'9999',@tou3)
	set @qry4c= replace(@qry4,'9999',@tou3)
	set @qry5c= replace(@qry5,'9999',@tou3)
	set @qry6c= replace(@qry6,'9999',@tou3)
	--set @qry60c= replace(@qry60,'9999',@tou3)
	set @qry7c= replace(@qry7,'9999',@tou3)
	set @qry8c= replace(@qry8,'9999',@tou3)
end
else 
begin
	set @qry1c=''
	set @qry2c=''
	set @qry3c=''
	set @qry4c=''
	set @qry5c=''
	--set @qry60c=''
	set @qry7c=''
	set @qry8c=''
end

if @tou4 is not null
begin
	set @qry1d= replace(@qry1,'9999',@tou4)
	set @qry2d= replace(@qry2,'9999',@tou4)
	set @qry3d= replace(@qry3,'9999',@tou4)
	set @qry4d= replace(@qry4,'9999',@tou4)
	set @qry5d= replace(@qry5,'9999',@tou4)
	set @qry6d= replace(@qry6,'9999',@tou4)
	--set @qry60d= replace(@qry60,'9999',@tou4)
	set @qry7d= replace(@qry7,'9999',@tou4)
	set @qry8d= replace(@qry8,'9999',@tou4)
end
else 
begin
	set @qry1d=''
	set @qry2d=''
	set @qry3d=''
	set @qry4d=''
	set @qry5d=''
	set @qry6d=''
	--set @qry60d=''
	set @qry7d=''
	set @qry8d=''
end

if @tou5 is not null
begin
	set @qry1e= replace(@qry1,'9999',@tou5)
	set @qry2e= replace(@qry2,'9999',@tou5)
	set @qry3e= replace(@qry3,'9999',@tou5)
	set @qry4e= replace(@qry4,'9999',@tou5)
	set @qry5e= replace(@qry5,'9999',@tou5)
	set @qry6e= replace(@qry6,'9999',@tou5)
	--set @qry60e= replace(@qry60,'9999',@tou5)
	set @qry7e= replace(@qry7,'9999',@tou5)
	set @qry8e= replace(@qry8,'9999',@tou5)
end
else 
begin
	set @qry1e=''
	set @qry2e=''
	set @qry3e=''
	set @qry4e=''
	set @qry5e=''
	set @qry6e=''
	--set @qry60e=''
	set @qry7e=''
	set @qry8e=''
end

if @tou6 is not null
begin
	set @qry1f= replace(@qry1,'9999',@tou6)
	set @qry2f= replace(@qry2,'9999',@tou6)
	set @qry3f= replace(@qry3,'9999',@tou6)
	set @qry4f= replace(@qry4,'9999',@tou6)
	set @qry5f= replace(@qry5,'9999',@tou6)
	set @qry6f= replace(@qry6,'9999',@tou6)
	--set @qry60f= replace(@qry60,'9999',@tou6)
	set @qry7f= replace(@qry7,'9999',@tou6)
	set @qry8f= replace(@qry8,'9999',@tou6)
end
else 
begin
	set @qry1f=''
	set @qry2f=''
	set @qry3f=''
	set @qry4f=''
	set @qry5f=''
	set @qry6f=''
	--set @qry60f=''
	set @qry7f=''
	set @qry8f=''
end

if @tou1 is not null
begin
	set @qry1= replace(@qry1,'9999',@tou1)
	set @qry2= replace(@qry2,'9999',@tou1)
	set @qry3= replace(@qry3,'9999',@tou1)
	set @qry4= replace(@qry4,'9999',@tou1)
	set @qry5= replace(@qry5,'9999',@tou1)
	set @qry6= replace(@qry6,'9999',@tou1)
	--set @qry60= replace(@qry60,'9999',@tou1)
	set @qry7= replace(@qry7,'9999',@tou1)
	set @qry8= replace(@qry8,'9999',@tou1)
end
else 
begin
	set @qry1=''
	set @qry2=''
	set @qry3=''
	set @qry4=''
	set @qry5=''
	set @qry6=''
	--set @qry60=''
	set @qry7=''
	set @qry8=''
end

set @qry1g= replace(@qry1a,'_9999','')
set @qry2g= replace(@qry2a,'_9999','')
set @qry3g= replace(@qry3a,'_9999','')
set @qry4g= replace(@qry4a,'_9999','')
set @qry5g= replace(@qry5a,'_9999','')
set @qry6g= replace(@qry6a,'_9999','')
--set @qry60g= replace(@qry60a,'_9999','')
set @qry7g= replace(@qry7a,'_9999','')
set @qry8g= replace(@qry8a,'_9999','')

set @group_by_clms='vol.source_deal_detail_id'

SET @select_clms='select '+@group_by_clms+' , cast(-1 as int) tou_id, max(vol.monthly_term) monthly_term , max(vol.source_deal_header_id) source_deal_header_id, max(vol.leg) leg
	, max(vol.location_id) location_id, max(vol.curve_id) curve_id,max(vol.deal_term_start) deal_term_start, MAX(vol.term_start) monthly_term_end
	, max(vol.formula_curve_id) formula_curve_id, max(vol.b_s_mult) b_s_mult,MAX(vol.price_adder) price_adder,MAX(vol.price_multiplier) price_multiplier,MAX(vol.pay_opposite) pay_opposite,max(vol.pricing) pricing,max(vol.calc_mtm_at_tou_level) calc_mtm_at_tou_level
	,vol.state_value_id, vol.tier_value_id,max(vol.formula_id) formula_id,max(vol.contract_id) contract_id ,max(vol.commodity_id) commodity_id, vol.match_info_id '


SET @sql= ' into ' + @tmp_hourly_price_vol_fee + '
	FROM ' + @position_table_name + ' vol 
		inner join #vwDealTimezone tz on  vol.source_deal_header_id=tz.source_deal_header_id
			and tz.curve_id=vol.curve_id  and tz.location_id=vol.location_id 
		left join #sddh sddh on sddh.source_deal_detail_id=vol.source_deal_detail_id and sddh.term_date=vol.term_start
		left join source_price_curve_def spcd on spcd.source_curve_def_id=vol.curve_id  and vol.calc_mtm_at_tou_level=''y''
		left join #tou_hour hb  ON hb.dst_group_value_id=tz.dst_group_value_id and spcd.udf_block_group_id=hb.block_type_group_id  
			and vol.term_start=hb.term_date	 and vol.calc_mtm_at_tou_level=''y''
		LEFT JOIN #tmp_hourly_price_only t on t.rowid=vol.rowid
		LEFT JOIN #mv90_dst dst on dst.date = vol.term_start and dst.insert_delete = ''i'' 
			and dst.source_commodity_id = vol.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
		LEFT JOIN #mv90_dst dst1 on dst1.date = vol.term_start and dst1.insert_delete = ''d'' 
			and dst1.source_commodity_id = vol.commodity_id and dst1.dst_group_value_id=tz.dst_group_value_id
	group by '+@group_by_clms+',
	CASE WHEN vol.state_value_id IS NOT NULL THEN vol.curve_id else '''' END, vol.state_value_id, vol.tier_value_id, vol.match_info_id '

--EXEC spa_print  @sql_price
--EXEC spa_print  @sql_price1



exec spa_print @select_clms
exec spa_print @qry1g
exec spa_print @qry2g
exec spa_print @qry3g
exec spa_print @qry4g
exec spa_print @qry5g
exec spa_print @qry6g
--exec spa_print @qry60g
exec spa_print @qry7g
exec spa_print @qry8g

exec spa_print @qry1
exec spa_print @qry2
exec spa_print @qry3
exec spa_print @qry4
exec spa_print @qry5
exec spa_print @qry6
--exec spa_print @qry60
exec spa_print @qry7
exec spa_print @qry8

exec spa_print @qry1b
exec spa_print @qry2b
exec spa_print @qry3b
exec spa_print @qry4b
exec spa_print @qry5b
exec spa_print @qry6b
--exec spa_print @qry60b
exec spa_print @qry7b
exec spa_print @qry8b

exec spa_print @qry1c
exec spa_print @qry2c
exec spa_print @qry3c
exec spa_print @qry4c
exec spa_print @qry5c
exec spa_print @qry6c
--exec spa_print @qry60c
exec spa_print @qry7c
exec spa_print @qry8c

exec spa_print @qry1d
exec spa_print @qry2d
exec spa_print @qry3d
exec spa_print @qry4d
exec spa_print @qry5d
exec spa_print @qry6d
--exec spa_print @qry60d
exec spa_print @qry7d
exec spa_print @qry8d

exec spa_print @qry1e
exec spa_print @qry2e
exec spa_print @qry3e
exec spa_print @qry4e
exec spa_print @qry5e
exec spa_print @qry6e
--exec spa_print @qry60e
exec spa_print @qry7e
exec spa_print @qry8e

exec spa_print @qry1f
exec spa_print @qry2f
exec spa_print @qry3f
exec spa_print @qry4f
exec spa_print @qry5f
exec spa_print @qry6f
--exec spa_print @qry60f
exec spa_print @qry7f
exec spa_print @qry8f
EXEC spa_print  'lllllllllllllllllllllll'
exec spa_print @sql





EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+
@select_clms
+@qry1g
+@qry2g
+@qry3g
+@qry4g
+@qry5g
+@qry6g
--+@qry60g
+@qry7g
+@qry8g

+@qry1
+@qry2
+@qry3
+@qry4
+@qry5
+@qry6
--+@qry60
+@qry7
+@qry8

+@qry1b
+@qry2b
+@qry3b
+@qry4b
+@qry5b
+@qry6b
--+@qry60b
+@qry7b
+@qry8b

+@qry1c
+@qry2c
+@qry3c
+@qry4c
+@qry5c
+@qry6c
--+@qry60c
+@qry7c
+@qry8c

+@qry1d
+@qry2d
+@qry3d
+@qry4d
+@qry5d
+@qry6d
--+@qry60d
+@qry7d
+@qry8d

+@qry1e
+@qry2e
+@qry3e
+@qry4e
+@qry5e
+@qry6e
--+@qry60e
+@qry7e
+@qry8e

+@qry1f
+@qry2f
+@qry3f
+@qry4f
+@qry5f
+@qry6f
--+@qry60f
+@qry7f
+@qry8f
+@sql
)

--Update statement shifted here from just above to store original volume for fee calculation before update
-- Checking in money for linear option model deals
--td.buy_sell_flag=''b''
set @qry_update='update vol set 
		hr1 = iif(isnull(t.hr1,0)+isnull(vfa.fee_amt,0)<isnull(t.hr1_c,0),vol.hr1,0),
		hr2 = iif(isnull(t.hr2,0)+isnull(vfa.fee_amt,0)<isnull(t.hr2_c,0),vol.hr2,iif(t.granularity in (982,987,994,989,995),0,vol.hr2)),
		hr3 = iif(isnull(t.hr3,0)+isnull(vfa.fee_amt,0)<isnull(t.hr3_c,0),vol.hr3,iif(t.granularity in (982,987,994,989,995),0,vol.hr3)),
		hr4 = iif(isnull(t.hr4,0)+isnull(vfa.fee_amt,0)<isnull(t.hr4_c,0),vol.hr4,iif(t.granularity in (982,987,994,989,995),0,vol.hr4)),
		hr5 = iif(isnull(t.hr5,0)+isnull(vfa.fee_amt,0)<isnull(t.hr5_c,0),vol.hr5,iif(t.granularity in (982,987,994,989,995),0,vol.hr5)),
		hr6 = iif(isnull(t.hr6,0)+isnull(vfa.fee_amt,0)<isnull(t.hr6_c,0),vol.hr6,iif(t.granularity in (982,987,994,989,995),0,vol.hr6)),
		hr7 = iif(isnull(t.hr7,0)+isnull(vfa.fee_amt,0)<isnull(t.hr7_c,0),vol.hr7,iif(t.granularity in (982,987,994,989,995),0,vol.hr7)),
		hr8 = iif(isnull(t.hr8,0)+isnull(vfa.fee_amt,0)<isnull(t.hr8_c,0),vol.hr8,iif(t.granularity in (982,987,994,989,995),0,vol.hr8)),
		hr9 = iif(isnull(t.hr9,0)+isnull(vfa.fee_amt,0)<isnull(t.hr9_c,0),vol.hr9,iif(t.granularity in (982,987,994,989,995),0,vol.hr9)),
		hr10 = iif(isnull(t.hr10,0)+isnull(vfa.fee_amt,0)<isnull(t.hr10_c,0),vol.hr10,iif(t.granularity in (982,987,994,989,995),0,vol.hr10)),
		hr11 = iif(isnull(t.hr11,0)+isnull(vfa.fee_amt,0)<isnull(t.hr11_c,0),vol.hr11,iif(t.granularity in (982,987,994,989,995),0,vol.hr11)),
		hr12 = iif(isnull(t.hr12,0)+isnull(vfa.fee_amt,0)<isnull(t.hr12_c,0),vol.hr12,iif(t.granularity in (982,987,994,989,995),0,vol.hr12)),
		hr13 = iif(isnull(t.hr13,0)+isnull(vfa.fee_amt,0)<isnull(t.hr13_c,0),vol.hr13,iif(t.granularity in (982,987,994,989,995),0,vol.hr13)),
		hr14 = iif(isnull(t.hr14,0)+isnull(vfa.fee_amt,0)<isnull(t.hr14_c,0),vol.hr14,iif(t.granularity in (982,987,994,989,995),0,vol.hr14)),
		hr15 = iif(isnull(t.hr15,0)+isnull(vfa.fee_amt,0)<isnull(t.hr15_c,0),vol.hr15,iif(t.granularity in (982,987,994,989,995),0,vol.hr15)),
		hr16 = iif(isnull(t.hr16,0)+isnull(vfa.fee_amt,0)<isnull(t.hr16_c,0),vol.hr16,iif(t.granularity in (982,987,994,989,995),0,vol.hr16)),
		hr17 = iif(isnull(t.hr17,0)+isnull(vfa.fee_amt,0)<isnull(t.hr17_c,0),vol.hr17,iif(t.granularity in (982,987,994,989,995),0,vol.hr17)),
		hr18 = iif(isnull(t.hr18,0)+isnull(vfa.fee_amt,0)<isnull(t.hr18_c,0),vol.hr18,iif(t.granularity in (982,987,994,989,995),0,vol.hr18)),
		hr19 = iif(isnull(t.hr19,0)+isnull(vfa.fee_amt,0)<isnull(t.hr19_c,0),vol.hr19,iif(t.granularity in (982,987,994,989,995),0,vol.hr19)),
		hr20 = iif(isnull(t.hr20,0)+isnull(vfa.fee_amt,0)<isnull(t.hr20_c,0),vol.hr20,iif(t.granularity in (982,987,994,989,995),0,vol.hr20)),
		hr21 = iif(isnull(t.hr21,0)+isnull(vfa.fee_amt,0)<isnull(t.hr21_c,0),vol.hr21,iif(t.granularity in (982,987,994,989,995),0,vol.hr21)),
		hr22 = iif(isnull(t.hr22,0)+isnull(vfa.fee_amt,0)<isnull(t.hr22_c,0),vol.hr22,iif(t.granularity in (982,987,994,989,995),0,vol.hr22)),
		hr23 = iif(isnull(t.hr23,0)+isnull(vfa.fee_amt,0)<isnull(t.hr23_c,0),vol.hr23,iif(t.granularity in (982,987,994,989,995),0,vol.hr23)),
		hr24 = iif(isnull(t.hr24,0)+isnull(vfa.fee_amt,0)<isnull(t.hr24_c,0),vol.hr24,iif(t.granularity in (982,987,994,989,995),0,vol.hr24)),
		hr25 = iif(isnull(t.hr25,0)+isnull(vfa.fee_amt,0)<isnull(t.hr25_c,0),vol.hr25,iif(t.granularity in (982,987,994,989,995),0,vol.hr25))
FROM '+@position_table_name+' vol inner join #temp_deals td on vol.source_deal_detail_id=td.source_deal_detail_id
	inner join #tmp_hourly_price_only t on t.rowid=vol.rowid
	left join #var_fee_amount vfa on vfa.source_deal_header_id=vol.source_deal_header_id
where td.header_buy_sell_flag=''b'' 
and td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102 -- Linear model option'

EXEC spa_print  @qry_update
exec(@qry_update)

--td.buy_sell_flag=''s''
set @qry_update='update vol set 
		hr1 = iif(isnull(t.hr1,0)+isnull(vfa.fee_amt,0)>isnull(t.hr1_c,0),vol.hr1,0),
		hr2 = iif(isnull(t.hr2,0)+isnull(vfa.fee_amt,0)>isnull(t.hr2_c,0),vol.hr2,iif(t.granularity in (982,987,994,989,995),0,vol.hr2)),
		hr3 = iif(isnull(t.hr3,0)+isnull(vfa.fee_amt,0)>isnull(t.hr3_c,0),vol.hr3,iif(t.granularity in (982,987,994,989,995),0,vol.hr3)),
		hr4 = iif(isnull(t.hr4,0)+isnull(vfa.fee_amt,0)>isnull(t.hr4_c,0),vol.hr4,iif(t.granularity in (982,987,994,989,995),0,vol.hr4)),
		hr5 = iif(isnull(t.hr5,0)+isnull(vfa.fee_amt,0)>isnull(t.hr5_c,0),vol.hr5,iif(t.granularity in (982,987,994,989,995),0,vol.hr5)),
		hr6 = iif(isnull(t.hr6,0)+isnull(vfa.fee_amt,0)>isnull(t.hr6_c,0),vol.hr6,iif(t.granularity in (982,987,994,989,995),0,vol.hr6)),
		hr7 = iif(isnull(t.hr7,0)+isnull(vfa.fee_amt,0)>isnull(t.hr7_c,0),vol.hr7,iif(t.granularity in (982,987,994,989,995),0,vol.hr7)),
		hr8 = iif(isnull(t.hr8,0)+isnull(vfa.fee_amt,0)>isnull(t.hr8_c,0),vol.hr8,iif(t.granularity in (982,987,994,989,995),0,vol.hr8)),
		hr9 = iif(isnull(t.hr9,0)+isnull(vfa.fee_amt,0)>isnull(t.hr9_c,0),vol.hr9,iif(t.granularity in (982,987,994,989,995),0,vol.hr9)),
		hr10 = iif(isnull(t.hr10,0)+isnull(vfa.fee_amt,0)>isnull(t.hr10_c,0),vol.hr10,iif(t.granularity in (982,987,994,989,995),0,vol.hr10)),
		hr11 = iif(isnull(t.hr11,0)+isnull(vfa.fee_amt,0)>isnull(t.hr11_c,0),vol.hr11,iif(t.granularity in (982,987,994,989,995),0,vol.hr11)),
		hr12 = iif(isnull(t.hr12,0)+isnull(vfa.fee_amt,0)>isnull(t.hr12_c,0),vol.hr12,iif(t.granularity in (982,987,994,989,995),0,vol.hr12)),
		hr13 = iif(isnull(t.hr13,0)+isnull(vfa.fee_amt,0)>isnull(t.hr13_c,0),vol.hr13,iif(t.granularity in (982,987,994,989,995),0,vol.hr13)),
		hr14 = iif(isnull(t.hr14,0)+isnull(vfa.fee_amt,0)>isnull(t.hr14_c,0),vol.hr14,iif(t.granularity in (982,987,994,989,995),0,vol.hr14)),
		hr15 = iif(isnull(t.hr15,0)+isnull(vfa.fee_amt,0)>isnull(t.hr15_c,0),vol.hr15,iif(t.granularity in (982,987,994,989,995),0,vol.hr15)),
		hr16 = iif(isnull(t.hr16,0)+isnull(vfa.fee_amt,0)>isnull(t.hr16_c,0),vol.hr16,iif(t.granularity in (982,987,994,989,995),0,vol.hr16)),
		hr17 = iif(isnull(t.hr17,0)+isnull(vfa.fee_amt,0)>isnull(t.hr17_c,0),vol.hr17,iif(t.granularity in (982,987,994,989,995),0,vol.hr17)),
		hr18 = iif(isnull(t.hr18,0)+isnull(vfa.fee_amt,0)>isnull(t.hr18_c,0),vol.hr18,iif(t.granularity in (982,987,994,989,995),0,vol.hr18)),
		hr19 = iif(isnull(t.hr19,0)+isnull(vfa.fee_amt,0)>isnull(t.hr19_c,0),vol.hr19,iif(t.granularity in (982,987,994,989,995),0,vol.hr19)),
		hr20 = iif(isnull(t.hr20,0)+isnull(vfa.fee_amt,0)>isnull(t.hr20_c,0),vol.hr20,iif(t.granularity in (982,987,994,989,995),0,vol.hr20)),
		hr21 = iif(isnull(t.hr21,0)+isnull(vfa.fee_amt,0)>isnull(t.hr21_c,0),vol.hr21,iif(t.granularity in (982,987,994,989,995),0,vol.hr21)),
		hr22 = iif(isnull(t.hr22,0)+isnull(vfa.fee_amt,0)>isnull(t.hr22_c,0),vol.hr22,iif(t.granularity in (982,987,994,989,995),0,vol.hr22)),
		hr23 = iif(isnull(t.hr23,0)+isnull(vfa.fee_amt,0)>isnull(t.hr23_c,0),vol.hr23,iif(t.granularity in (982,987,994,989,995),0,vol.hr23)),
		hr24 = iif(isnull(t.hr24,0)+isnull(vfa.fee_amt,0)>isnull(t.hr24_c,0),vol.hr24,iif(t.granularity in (982,987,994,989,995),0,vol.hr24)),
		hr25 = iif(isnull(t.hr25,0)+isnull(vfa.fee_amt,0)>isnull(t.hr25_c,0),vol.hr25,iif(t.granularity in (982,987,994,989,995),0,vol.hr25))
FROM '+@position_table_name+' vol inner join #temp_deals td on vol.source_deal_detail_id=td.source_deal_detail_id
	inner join #tmp_hourly_price_only t on t.rowid=vol.rowid
	left join #var_fee_amount vfa on vfa.source_deal_header_id=vol.source_deal_header_id
where td.header_buy_sell_flag=''s'' and td.internal_deal_type_value_id=103 
	and td.internal_deal_subtype_value_id=102 -- Linear model option'

EXEC spa_print  @qry_update
exec(@qry_update)

--td.buy_sell_flag=''b''
set @qry_update='update t set 
		hr1 = iif(isnull(t.hr1,0)+isnull(vfa.fee_amt,0)<isnull(t.hr1_c,0),-1*(isnull(t.hr1,0)-isnull(t.hr1_c,0)),0),
		hr2 = iif(isnull(t.hr2,0)+isnull(vfa.fee_amt,0)<isnull(t.hr2_c,0),-1*(isnull(t.hr2,0)-isnull(t.hr2_c,0)),0),
		hr3 = iif(isnull(t.hr3,0)+isnull(vfa.fee_amt,0)<isnull(t.hr3_c,0),-1*(isnull(t.hr3,0)-isnull(t.hr3_c,0)),0),
		hr4 = iif(isnull(t.hr4,0)+isnull(vfa.fee_amt,0)<isnull(t.hr4_c,0),-1*(isnull(t.hr4,0)-isnull(t.hr4_c,0)),0),
		hr5 = iif(isnull(t.hr5,0)+isnull(vfa.fee_amt,0)<isnull(t.hr5_c,0),-1*(isnull(t.hr5,0)-isnull(t.hr5_c,0)),0),
		hr6 = iif(isnull(t.hr6,0)+isnull(vfa.fee_amt,0)<isnull(t.hr6_c,0),-1*(isnull(t.hr6,0)-isnull(t.hr6_c,0)),0),
		hr7 = iif(isnull(t.hr7,0)+isnull(vfa.fee_amt,0)<isnull(t.hr7_c,0),-1*(isnull(t.hr7,0)-isnull(t.hr7_c,0)),0),
		hr8 = iif(isnull(t.hr8,0)+isnull(vfa.fee_amt,0)<isnull(t.hr8_c,0),-1*(isnull(t.hr8,0)-isnull(t.hr8_c,0)),0),
		hr9 = iif(isnull(t.hr9,0)+isnull(vfa.fee_amt,0)<isnull(t.hr9_c,0),-1*(isnull(t.hr9,0)-isnull(t.hr9_c,0)),0),
		hr10 = iif(isnull(t.hr10,0)+isnull(vfa.fee_amt,0)<isnull(t.hr10_c,0),-1*(isnull(t.hr10,0)-isnull(t.hr10_c,0)),0),
		hr11 = iif(isnull(t.hr11,0)+isnull(vfa.fee_amt,0)<isnull(t.hr11_c,0),-1*(isnull(t.hr11,0)-isnull(t.hr11_c,0)),0),
		hr12 = iif(isnull(t.hr12,0)+isnull(vfa.fee_amt,0)<isnull(t.hr12_c,0),-1*(isnull(t.hr12,0)-isnull(t.hr12_c,0)),0),
		hr13 = iif(isnull(t.hr13,0)+isnull(vfa.fee_amt,0)<isnull(t.hr13_c,0),-1*(isnull(t.hr13,0)-isnull(t.hr13_c,0)),0),
		hr14 = iif(isnull(t.hr14,0)+isnull(vfa.fee_amt,0)<isnull(t.hr14_c,0),-1*(isnull(t.hr14,0)-isnull(t.hr14_c,0)),0),
		hr15 = iif(isnull(t.hr15,0)+isnull(vfa.fee_amt,0)<isnull(t.hr15_c,0),-1*(isnull(t.hr15,0)-isnull(t.hr15_c,0)),0),
		hr16 = iif(isnull(t.hr16,0)+isnull(vfa.fee_amt,0)<isnull(t.hr16_c,0),-1*(isnull(t.hr16,0)-isnull(t.hr16_c,0)),0),
		hr17 = iif(isnull(t.hr17,0)+isnull(vfa.fee_amt,0)<isnull(t.hr17_c,0),-1*(isnull(t.hr17,0)-isnull(t.hr17_c,0)),0),
		hr18 = iif(isnull(t.hr18,0)+isnull(vfa.fee_amt,0)<isnull(t.hr18_c,0),-1*(isnull(t.hr18,0)-isnull(t.hr18_c,0)),0),
		hr19 = iif(isnull(t.hr19,0)+isnull(vfa.fee_amt,0)<isnull(t.hr19_c,0),-1*(isnull(t.hr19,0)-isnull(t.hr19_c,0)),0),
		hr20 = iif(isnull(t.hr20,0)+isnull(vfa.fee_amt,0)<isnull(t.hr20_c,0),-1*(isnull(t.hr20,0)-isnull(t.hr20_c,0)),0),
		hr21 = iif(isnull(t.hr21,0)+isnull(vfa.fee_amt,0)<isnull(t.hr21_c,0),-1*(isnull(t.hr21,0)-isnull(t.hr21_c,0)),0),
		hr22 = iif(isnull(t.hr22,0)+isnull(vfa.fee_amt,0)<isnull(t.hr22_c,0),-1*(isnull(t.hr22,0)-isnull(t.hr22_c,0)),0),
		hr23 = iif(isnull(t.hr23,0)+isnull(vfa.fee_amt,0)<isnull(t.hr23_c,0),-1*(isnull(t.hr23,0)-isnull(t.hr23_c,0)),0),
		hr24 = iif(isnull(t.hr24,0)+isnull(vfa.fee_amt,0)<isnull(t.hr24_c,0),-1*(isnull(t.hr24,0)-isnull(t.hr24_c,0)),0),
		hr25 = iif(isnull(t.hr25,0)+isnull(vfa.fee_amt,0)<isnull(t.hr25_c,0),-1*(isnull(t.hr25,0)-isnull(t.hr25_c,0)),0)
FROM '+@position_table_name+' vol inner join #temp_deals td on vol.source_deal_detail_id=td.source_deal_detail_id
	inner join #tmp_hourly_price_only t on t.rowid=vol.rowid
	left join #var_fee_amount vfa on vfa.source_deal_header_id=vol.source_deal_header_id
where td.header_buy_sell_flag=''b'' and td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102 -- Linear model option'

EXEC spa_print  @qry_update
exec(@qry_update)

--td.buy_sell_flag=''s''
set @qry_update='update t set 
		hr1 = iif(isnull(t.hr1,0)+isnull(vfa.fee_amt,0)>isnull(t.hr1_c,0),-1*(isnull(t.hr1,0)-isnull(t.hr1_c,0)),0),
		hr2 = iif(isnull(t.hr2,0)+isnull(vfa.fee_amt,0)>isnull(t.hr2_c,0),-1*(isnull(t.hr2,0)-isnull(t.hr2_c,0)),0),
		hr3 = iif(isnull(t.hr3,0)+isnull(vfa.fee_amt,0)>isnull(t.hr3_c,0),-1*(isnull(t.hr3,0)-isnull(t.hr3_c,0)),0),
		hr4 = iif(isnull(t.hr4,0)+isnull(vfa.fee_amt,0)>isnull(t.hr4_c,0),-1*(isnull(t.hr4,0)-isnull(t.hr4_c,0)),0),
		hr5 = iif(isnull(t.hr5,0)+isnull(vfa.fee_amt,0)>isnull(t.hr5_c,0),-1*(isnull(t.hr5,0)-isnull(t.hr5_c,0)),0),
		hr6 = iif(isnull(t.hr6,0)+isnull(vfa.fee_amt,0)>isnull(t.hr6_c,0),-1*(isnull(t.hr6,0)-isnull(t.hr6_c,0)),0),
		hr7 = iif(isnull(t.hr7,0)+isnull(vfa.fee_amt,0)>isnull(t.hr7_c,0),-1*(isnull(t.hr7,0)-isnull(t.hr7_c,0)),0),
		hr8 = iif(isnull(t.hr8,0)+isnull(vfa.fee_amt,0)>isnull(t.hr8_c,0),-1*(isnull(t.hr8,0)-isnull(t.hr8_c,0)),0),
		hr9 = iif(isnull(t.hr9,0)+isnull(vfa.fee_amt,0)>isnull(t.hr9_c,0),-1*(isnull(t.hr9,0)-isnull(t.hr9_c,0)),0),
		hr10 = iif(isnull(t.hr10,0)+isnull(vfa.fee_amt,0)>isnull(t.hr10_c,0),-1*(isnull(t.hr10,0)-isnull(t.hr10_c,0)),0),
		hr11 = iif(isnull(t.hr11,0)+isnull(vfa.fee_amt,0)>isnull(t.hr11_c,0),-1*(isnull(t.hr11,0)-isnull(t.hr11_c,0)),0),
		hr12 = iif(isnull(t.hr12,0)+isnull(vfa.fee_amt,0)>isnull(t.hr12_c,0),-1*(isnull(t.hr12,0)-isnull(t.hr12_c,0)),0),
		hr13 = iif(isnull(t.hr13,0)+isnull(vfa.fee_amt,0)>isnull(t.hr13_c,0),-1*(isnull(t.hr13,0)-isnull(t.hr13_c,0)),0),
		hr14 = iif(isnull(t.hr14,0)+isnull(vfa.fee_amt,0)>isnull(t.hr14_c,0),-1*(isnull(t.hr14,0)-isnull(t.hr14_c,0)),0),
		hr15 = iif(isnull(t.hr15,0)+isnull(vfa.fee_amt,0)>isnull(t.hr15_c,0),-1*(isnull(t.hr15,0)-isnull(t.hr15_c,0)),0),
		hr16 = iif(isnull(t.hr16,0)+isnull(vfa.fee_amt,0)>isnull(t.hr16_c,0),-1*(isnull(t.hr16,0)-isnull(t.hr16_c,0)),0),
		hr17 = iif(isnull(t.hr17,0)+isnull(vfa.fee_amt,0)>isnull(t.hr17_c,0),-1*(isnull(t.hr17,0)-isnull(t.hr17_c,0)),0),
		hr18 = iif(isnull(t.hr18,0)+isnull(vfa.fee_amt,0)>isnull(t.hr18_c,0),-1*(isnull(t.hr18,0)-isnull(t.hr18_c,0)),0),
		hr19 = iif(isnull(t.hr19,0)+isnull(vfa.fee_amt,0)>isnull(t.hr19_c,0),-1*(isnull(t.hr19,0)-isnull(t.hr19_c,0)),0),
		hr20 = iif(isnull(t.hr20,0)+isnull(vfa.fee_amt,0)>isnull(t.hr20_c,0),-1*(isnull(t.hr20,0)-isnull(t.hr20_c,0)),0),
		hr21 = iif(isnull(t.hr21,0)+isnull(vfa.fee_amt,0)>isnull(t.hr21_c,0),-1*(isnull(t.hr21,0)-isnull(t.hr21_c,0)),0),
		hr22 = iif(isnull(t.hr22,0)+isnull(vfa.fee_amt,0)>isnull(t.hr22_c,0),-1*(isnull(t.hr22,0)-isnull(t.hr22_c,0)),0),
		hr23 = iif(isnull(t.hr23,0)+isnull(vfa.fee_amt,0)>isnull(t.hr23_c,0),-1*(isnull(t.hr23,0)-isnull(t.hr23_c,0)),0),
		hr24 = iif(isnull(t.hr24,0)+isnull(vfa.fee_amt,0)>isnull(t.hr24_c,0),-1*(isnull(t.hr24,0)-isnull(t.hr24_c,0)),0),
		hr25 = iif(isnull(t.hr25,0)+isnull(vfa.fee_amt,0)>isnull(t.hr25_c,0),-1*(isnull(t.hr25,0)-isnull(t.hr25_c,0)),0)
FROM '+@position_table_name+' vol inner join #temp_deals td on vol.source_deal_detail_id=td.source_deal_detail_id
	inner join #tmp_hourly_price_only t on t.rowid=vol.rowid
	left join #var_fee_amount vfa on vfa.source_deal_header_id=vol.source_deal_header_id
where td.header_buy_sell_flag=''s'' and td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102 -- Linear model option'

EXEC spa_print  @qry_update
exec(@qry_update)

set @qry_update=' update t set 
		hr1_c = 0,
		hr2_c = 0,
		hr3_c = 0,
		hr4_c = 0,
		hr5_c = 0,
		hr6_c = 0,
		hr7_c = 0,
		hr8_c = 0,
		hr9_c = 0,
		hr10_c = 0,
		hr11_c = 0,
		hr12_c = 0,
		hr13_c = 0,
		hr14_c = 0,
		hr15_c = 0,
		hr16_c = 0,
		hr17_c = 0,
		hr18_c = 0,
		hr19_c = 0,
		hr20_c = 0,
		hr21_c = 0,
		hr22_c = 0,
		hr23_c = 0,
		hr24_c = 0,
		hr25_c = 0
FROM '+@position_table_name+' vol inner join #temp_deals td on vol.source_deal_detail_id=td.source_deal_detail_id
	inner join #tmp_hourly_price_only t on t.rowid=vol.rowid
where td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102 -- Linear model option'

EXEC spa_print  @qry_update
exec(@qry_update)

SET @sql= ' into ' + @tmp_hourly_price_vol + '
	FROM ' + @position_table_name + ' vol 
		inner join #vwDealTimezone tz on  vol.source_deal_header_id=tz.source_deal_header_id
			and tz.curve_id=vol.curve_id  and tz.location_id=vol.location_id 
		left join #sddh sddh on sddh.source_deal_detail_id=vol.source_deal_detail_id and sddh.term_date=vol.term_start
		left join source_price_curve_def spcd on spcd.source_curve_def_id=vol.curve_id  and vol.calc_mtm_at_tou_level=''y''
		left join #tou_hour hb  ON hb.dst_group_value_id=tz.dst_group_value_id and spcd.udf_block_group_id=hb.block_type_group_id  
			and vol.term_start=hb.term_date	 and vol.calc_mtm_at_tou_level=''y''
		LEFT JOIN #tmp_hourly_price_only t on t.rowid=vol.rowid
		LEFT JOIN #mv90_dst dst on dst.date = vol.term_start and dst.insert_delete = ''i'' 
			and dst.source_commodity_id = vol.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
		LEFT JOIN #mv90_dst dst1 on dst1.date = vol.term_start and dst1.insert_delete = ''d'' 
			and dst1.source_commodity_id = vol.commodity_id and dst1.dst_group_value_id=tz.dst_group_value_id
	group by '+@group_by_clms+',
	CASE WHEN vol.state_value_id IS NOT NULL THEN vol.curve_id else '''' END, vol.state_value_id, vol.tier_value_id, vol.match_info_id '

--PRINT(@sql) RETURN

EXEC spa_print  @select_clms
EXEC spa_print  @qry1g
EXEC spa_print  @qry2g
EXEC spa_print  @qry3g
EXEC spa_print  @qry4g
EXEC spa_print  @qry5g
EXEC spa_print  @qry6g
EXEC spa_print  @qry7g
EXEC spa_print  @qry8g
EXEC spa_print  @qry1
EXEC spa_print  @qry2
EXEC spa_print  @qry3
EXEC spa_print  @qry4
EXEC spa_print  @qry5
EXEC spa_print  @qry6
EXEC spa_print  @qry7
EXEC spa_print  @qry8
EXEC spa_print  @qry1b
EXEC spa_print  @qry2b
EXEC spa_print  @qry3b
EXEC spa_print  @qry4b
EXEC spa_print  @qry5b
EXEC spa_print  @qry6b
EXEC spa_print  @qry7b
EXEC spa_print  @qry8b
EXEC spa_print  @qry1c
EXEC spa_print  @qry2c
EXEC spa_print  @qry3c
EXEC spa_print  @qry4c
EXEC spa_print  @qry5c
EXEC spa_print  @qry6c
EXEC spa_print  @qry7c
EXEC spa_print  @qry8c
EXEC spa_print  @qry1d
EXEC spa_print  @qry2d
EXEC spa_print  @qry3d
EXEC spa_print  @qry4d
EXEC spa_print  @qry5d
EXEC spa_print  @qry6d
EXEC spa_print  @qry7d
EXEC spa_print  @qry8d
EXEC spa_print  @qry1e
EXEC spa_print  @qry2e
EXEC spa_print  @qry3e
EXEC spa_print  @qry4e
EXEC spa_print  @qry5e
EXEC spa_print  @qry6e
EXEC spa_print  @qry7e
EXEC spa_print  @qry8e
EXEC spa_print  @qry1f
EXEC spa_print  @qry2f
EXEC spa_print  @qry3f
EXEC spa_print  @qry4f
EXEC spa_print  @qry5f
EXEC spa_print  @qry6f
EXEC spa_print  @qry7f
EXEC spa_print  @qry8f
EXEC spa_print  @sql


EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+
@select_clms
+@qry1g
+@qry2g
+@qry3g
+@qry4g
+@qry5g
+@qry6g
--+@qry60g
+@qry7g
+@qry8g

+@qry1
+@qry2
+@qry3
+@qry4
+@qry5
+@qry6
--+@qry60
+@qry7
+@qry8

+@qry1b
+@qry2b
+@qry3b
+@qry4b
+@qry5b
+@qry6b
--+@qry60b
+@qry7b
+@qry8b

+@qry1c
+@qry2c
+@qry3c
+@qry4c
+@qry5c
+@qry6c
--+@qry60c
+@qry7c
+@qry8c

+@qry1d
+@qry2d
+@qry3d
+@qry4d
+@qry5d
+@qry6d
--+@qry60d
+@qry7d
+@qry8d

+@qry1e
+@qry2e
+@qry3e
+@qry4e
+@qry5e
+@qry6e
--+@qry60e
+@qry7e
+@qry8e

+@qry1f
+@qry2f
+@qry3f
+@qry4f
+@qry5f
+@qry6f
--+@qry60f
+@qry7f
+@qry8f
+@sql)

--exec('select * from ' + @tmp_hourly_price_vol) 
--return



--For Positive/Negative Commodity Charges
IF OBJECT_ID('tempdb..#tmp_deal_info') IS NOT NULL DROP TABLE #tmp_deal_info

SELECT DISTINCT td.source_deal_header_id, sdh.template_id --, td.source_deal_detail_id
INTO #tmp_deal_info
FROM source_deal_header sdh
INNER JOIN #temp_deals td ON td.source_deal_header_id = sdh.source_deal_header_id
	AND sdh.pricing_type IN (46700,46701)
	AND td.calc_physical_financial_flag = 'p'
INNER JOIN source_deal_header_template sdht ON sdht.template_id = sdh.template_id
	AND ISNULL(split_positive_and_negative_commodity, 'n') = 'y'
WHERE @calc_type = 's' 
AND EXISTS(SELECT 1 FROM #udft WHERE internal_field_type IN (18742,18743))

--SELECT * FROM #uddft WHERE field_id IN (-10000369, -10000368)internal_field_type IN (18742,18743) RETURN
--SELECT * FROM #udft WHERE internal_field_type IN (18742,18743) 
--SELECT * FROM #tmp_deal_info
--RETURN
--SELECT * FROM #uddft WHERE internal_field_type IN (18742,18743)
--SELECT * FROM source_deal_header_template WHERE ISNULL(split_positive_and_negative_commodity, 'n') = 'y'
IF EXISTS(SELECT * FROM #tmp_deal_info)
BEGIN
	--Inersted UDF information to make the condition true in the logic because now onwards for positive/negative commodity value calculaiton UDF will not be mapped and it's calculated based on the internal type and split_positive_and_negative_commodity column value equal to 'y' of source_deal_header_template table.
	INSERT INTO #uddft(udf_template_id, template_id, field_name, field_label, field_id, udf_user_field_id)
	SELECT DISTINCT t.udf_template_id, tdi.template_id, t.field_name, t.field_label, t.field_id, t.udf_template_id
	FROM #udft t 
	CROSS APPLY(
		SELECT DISTINCT template_id
		FROM #tmp_deal_info
	) tdi
	WHERE t.internal_field_type IN (18742,18743)
END

IF OBJECT_ID('tempdb..#sddh1') IS NOT NULL DROP TABLE #sddh1

SELECT sddh.source_deal_detail_id ,sddh.term_date,
	SUM(CASE WHEN hr=1 THEN sddh.price ELSE 0 END) hr1,
	SUM(CASE WHEN hr=2 THEN sddh.price ELSE 0 END) hr2,
	SUM(CASE WHEN hr=3 THEN sddh.price ELSE 0 END) hr3,
	SUM(CASE WHEN hr=4 THEN sddh.price ELSE 0 END) hr4,
	SUM(CASE WHEN hr=5 THEN sddh.price ELSE 0 END) hr5,
	SUM(CASE WHEN hr=6 THEN sddh.price ELSE 0 END) hr6,
	SUM(CASE WHEN hr=7 THEN sddh.price ELSE 0 END) hr7,
	SUM(CASE WHEN hr=8 THEN sddh.price ELSE 0 END) hr8,
	SUM(CASE WHEN hr=9 THEN sddh.price ELSE 0 END) hr9,
	SUM(CASE WHEN hr=10 THEN sddh.price ELSE 0 END) hr10,
	SUM(CASE WHEN hr=11 THEN sddh.price ELSE 0 END) hr11,
	SUM(CASE WHEN hr=12 THEN sddh.price ELSE 0 END) hr12,
	SUM(CASE WHEN hr=13 THEN sddh.price ELSE 0 END) hr13,
	SUM(CASE WHEN hr=14 THEN sddh.price ELSE 0 END) hr14,
	SUM(CASE WHEN hr=15 THEN sddh.price ELSE 0 END) hr15,
	SUM(CASE WHEN hr=16 THEN sddh.price ELSE 0 END) hr16,
	SUM(CASE WHEN hr=17 THEN sddh.price ELSE 0 END) hr17,
	SUM(CASE WHEN hr=18 THEN sddh.price ELSE 0 END) hr18,
	SUM(CASE WHEN hr=19 THEN sddh.price ELSE 0 END) hr19,
	SUM(CASE WHEN hr=20 THEN sddh.price ELSE 0 END) hr20,
	SUM(CASE WHEN hr=21 THEN sddh.price ELSE 0 END) hr21,
	SUM(CASE WHEN hr=22 THEN sddh.price ELSE 0 END) hr22,
	SUM(CASE WHEN hr=23 THEN sddh.price ELSE 0 END) hr23,
	SUM(CASE WHEN hr=24 THEN sddh.price ELSE 0 END) hr24,
	SUM(CASE WHEN hr=25 THEN sddh.price ELSE 0 END) hr25,
	sddh.[period]
INTO #sddh1
FROM 
(
select sddh.source_deal_detail_id,
	sddh.term_date,
	case when is_dst=1 then 25 else cast(left(sddh.hr,2) as int) end hr, 
	price,
	CAST(RIGHT(hr, 2) AS INT) [period]
	from #tmp_deal_info tdi
	inner join #temp_deals a on a.source_deal_header_id = tdi.source_deal_header_id
	inner join source_deal_detail_hour sddh ON sddh.source_deal_detail_id=a.source_deal_detail_id
		and sddh.term_date between a.term_start and a.term_end
	group by sddh.source_deal_detail_id,sddh.term_date,case when is_dst=1 then 25 else cast(left(sddh.hr,2) as int) end, price, CAST(RIGHT(hr, 2) AS INT)
	) sddh
where sddh.price is not null
group by sddh.source_deal_detail_id,sddh.term_date, sddh.[period]

SET @sql= ' SELECT 
	source_deal_header_id,
	source_deal_detail_id,
	SUM(CASE WHEN ISNULL(NULLIF(price, 0), fixed_price) < 0 THEN 
		(CASE WHEN buy_sell_flag = ''s'' THEN ABS(volume) ELSE volume END*ISNULL(NULLIF(price, 0), fixed_price)) 
	ELSE 0 END*CASE WHEN buy_sell_flag = ''b'' THEN -1 ELSE 1 END) negative_vol,
	SUM(CASE WHEN ISNULL(NULLIF(price, 0), fixed_price) >= 0 THEN 
		(CASE WHEN buy_sell_flag = ''s'' THEN ABS(volume) ELSE volume END*ISNULL(NULLIF(price, 0), fixed_price)) 
	ELSE 0 END*CASE WHEN buy_sell_flag = ''b'' THEN -1 ELSE 1 END) positive_vol,
	SUM(CASE WHEN ISNULL(NULLIF(price, 0), fixed_price) < 0 THEN volume ELSE 0 END) negative_volume,
	SUM(CASE WHEN ISNULL(NULLIF(price, 0), fixed_price) >= 0 THEN volume ELSE 0 END) positive_volume,
	SUM(volume*ISNULL(NULLIF(price, 0), fixed_price)) vol

INTO ' + @tmp_pos_neg_price_vol + '
FROM(
	SELECT vol.source_deal_header_id,
		vol.source_deal_detail_id,
		vol.term_start,
		td.buy_sell_flag,
		ISNULL(CASE WHEN sddh.hr1 <> 0 THEN sddh.hr1 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN t.hr1_c ELSE t.hr1 END END, 0) hr1,
		ISNULL(CASE WHEN sddh.hr2 <> 0 THEN sddh.hr2 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr2_c) ELSE ISNULL(pr.price, t.hr2) END END, 0) hr2,
		ISNULL(CASE WHEN sddh.hr3 <> 0 THEN sddh.hr3 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr3_c) ELSE ISNULL(pr.price, t.hr3) END END, 0) hr3,
		ISNULL(CASE WHEN sddh.hr4 <> 0 THEN sddh.hr4 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr4_c) ELSE ISNULL(pr.price, t.hr4) END END, 0) hr4,
		ISNULL(CASE WHEN sddh.hr5 <> 0 THEN sddh.hr5 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr5_c) ELSE ISNULL(pr.price, t.hr5) END END, 0) hr5,
		ISNULL(CASE WHEN sddh.hr6 <> 0 THEN sddh.hr6 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr6_c) ELSE ISNULL(pr.price, t.hr6) END END, 0) hr6,
		ISNULL(CASE WHEN sddh.hr7 <> 0 THEN sddh.hr7 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr7_c) ELSE ISNULL(pr.price, t.hr7) END END, 0) hr7,
		ISNULL(CASE WHEN sddh.hr8 <> 0 THEN sddh.hr8 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr8_c) ELSE ISNULL(pr.price, t.hr8) END END, 0) hr8,
		ISNULL(CASE WHEN sddh.hr9 <> 0 THEN sddh.hr9 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr9_c) ELSE ISNULL(pr.price, t.hr9) END END, 0) hr9,
		ISNULL(CASE WHEN sddh.hr10 <> 0 THEN sddh.hr10 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr10_c) ELSE ISNULL(pr.price, t.hr10) END END, 0) hr10,
		ISNULL(CASE WHEN sddh.hr11 <> 0 THEN sddh.hr11 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr11_c) ELSE ISNULL(pr.price, t.hr11) END END, 0) hr11,
		ISNULL(CASE WHEN sddh.hr12 <> 0 THEN sddh.hr12 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr12_c) ELSE ISNULL(pr.price, t.hr12) END END, 0) hr12,
		ISNULL(CASE WHEN sddh.hr13 <> 0 THEN sddh.hr13 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr13_c) ELSE ISNULL(pr.price, t.hr13) END END, 0) hr13,
		ISNULL(CASE WHEN sddh.hr14 <> 0 THEN sddh.hr14 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr14_c) ELSE ISNULL(pr.price, t.hr14) END END, 0) hr14,
		ISNULL(CASE WHEN sddh.hr15 <> 0 THEN sddh.hr15 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr15_c) ELSE ISNULL(pr.price, t.hr15) END END, 0) hr15,
		ISNULL(CASE WHEN sddh.hr16 <> 0 THEN sddh.hr16 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr16_c) ELSE ISNULL(pr.price, t.hr16) END END, 0) hr16,
		ISNULL(CASE WHEN sddh.hr17 <> 0 THEN sddh.hr17 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr17_c) ELSE ISNULL(pr.price, t.hr17) END END, 0) hr17,
		ISNULL(CASE WHEN sddh.hr18 <> 0 THEN sddh.hr18 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr18_c) ELSE ISNULL(pr.price, t.hr18) END END, 0) hr18,
		ISNULL(CASE WHEN sddh.hr19 <> 0 THEN sddh.hr19 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr19_c) ELSE ISNULL(pr.price, t.hr19) END END, 0) hr19,
		ISNULL(CASE WHEN sddh.hr20 <> 0 THEN sddh.hr20 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr20_c) ELSE ISNULL(pr.price, t.hr20) END END, 0) hr20,
		ISNULL(CASE WHEN sddh.hr21 <> 0 THEN sddh.hr21 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr21_c) ELSE ISNULL(pr.price, t.hr21) END END, 0) hr21,
		ISNULL(CASE WHEN sddh.hr22 <> 0 THEN sddh.hr22 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr22_c) ELSE ISNULL(pr.price, t.hr22) END END, 0) hr22,
		ISNULL(CASE WHEN sddh.hr23 <> 0 THEN sddh.hr23 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr23_c) ELSE ISNULL(pr.price, t.hr23) END END, 0) hr23,
		ISNULL(CASE WHEN sddh.hr24 <> 0 THEN sddh.hr24 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr24_c) ELSE ISNULL(pr.price, t.hr24) END END, 0) hr24,
		ISNULL(CASE WHEN sddh.hr25 <> 0 THEN sddh.hr25 ELSE CASE WHEN td.calc_physical_financial_flag = ''p'' THEN ISNULL(pr.price, t.hr25_c) ELSE ISNULL(pr.price, t.hr25) END END, 0) hr25,
		vol.hr1   vol1,
		vol.hr2   vol2,
		CAST((vol.hr3-case when td.commodity_id<>-1 and isnull(vol.hr25,0)<>0 then isnull(vol.hr25,0) else 0 end) AS NUMERIC(28,13))   vol3,
		vol.hr4   vol4,
		vol.hr5   vol5,
		vol.hr6   vol6,
		vol.hr7   vol7,
		vol.hr8   vol8,
		vol.hr9   vol9,
		vol.hr10  vol10,
		vol.hr11  vol11,
		vol.hr12  vol12,
		vol.hr13  vol13,
		vol.hr14  vol14,
		vol.hr15  vol15,
		vol.hr16  vol16,
		vol.hr17  vol17,
		vol.hr18  vol18,
		vol.hr19  vol19,
		vol.hr20  vol20,
		CAST((vol.hr21-case when td.commodity_id=-1 and isnull(vol.hr25,0)<>0 then isnull(vol.hr25,0) else 0 end) AS NUMERIC(28,13)) vol21,
		vol.hr22  vol22,
		vol.hr23  vol23,
		vol.hr24  vol24,
		vol.hr25  vol25,
		td.fixed_price
	FROM #tmp_deal_info tdi
	INNER JOIN #temp_deals td ON td.source_deal_header_id = tdi.source_deal_header_id
	INNER JOIN '+@position_table_name+' vol ON vol.source_deal_detail_id = td.source_deal_detail_id
	inner join #vwDealTimezone tz on  vol.source_deal_header_id=tz.source_deal_header_id
		and tz.curve_id=vol.curve_id  and tz.location_id=vol.location_id 
	left join #sddh1 sddh on sddh.source_deal_detail_id=vol.source_deal_detail_id 
		and sddh.term_date=vol.term_start
		and sddh.period = ISNULL(vol.period, 0)
	LEFT JOIN #tmp_hourly_price_only t on t.rowid=vol.rowid
	OUTER APPLY(SELECT CASE WHEN td.calc_physical_financial_flag = ''p'' THEN t.hr1_c ELSE t.hr1 END price
				WHERE 1 = 1
				AND ((td.calc_physical_financial_flag = ''p'' AND t.granularity_c IN (980,981)) OR
						(td.calc_physical_financial_flag <> ''p'' AND t.granularity IN (980,981)))
				) pr
		) v
UNPIVOT(
	price for hr in (hr1,hr2,hr3,hr4,hr5,hr6,hr7,hr8,hr9,hr10,hr11,hr12,hr13,hr14,hr15,hr16,hr17,hr18,hr19,hr20,hr21,hr22,hr23,hr24,hr25)
) u 
UNPIVOT(
	volume for vol in (vol1,vol2,vol3,vol4,vol5,vol6,vol7,vol8,vol9,vol10,vol11,vol12,vol13,vol14,vol15,vol16,vol17,vol18,vol19,vol20,vol21,vol22,vol23,vol24,vol25)
) t
WHERE RIGHT(hr, CASE WHEN len(hr) = 3 THEN 1 ELSE 2 END) = RIGHT(vol, CASE WHEN len(vol) = 4 THEN 1 ELSE 2 END)
GROUP BY source_deal_header_id, source_deal_detail_id'

EXEC spa_print @sql
EXEC(@sql)

set @group_by_clms='vol.save_mtm_at_calculation_granularity,vol.source_deal_detail_id,vol.term_start,isnull(vol.period,-1)'


SET @select_clms='select '+@group_by_clms+'  period, cast(-1 as int) tou_id, max(vol.monthly_term) monthly_term , max(vol.source_deal_header_id) source_deal_header_id
	, max(vol.leg) leg
	, max(vol.location_id) location_id, max(vol.curve_id) curve_id,max(vol.deal_term_start) deal_term_start, MAX(vol.term_start) monthly_term_end,max(vol.commodity_id) commodity_id
	, max(vol.formula_curve_id) formula_curve_id, max(vol.b_s_mult) b_s_mult,MAX(vol.price_adder) price_adder,MAX(vol.price_multiplier) price_multiplier
	,MAX(vol.pay_opposite) pay_opposite,max(vol.pricing) pricing,max(vol.curve_granularity) curve_granularity,max(vol.formula_id) formula_id,max(vol.contract_id) contract_id
	'

set @qry1='
	,sum(case when vol.curve_granularity in (982,987,989,997) then --hourly/15/30 min 
		vol.hr1
	else         
		(vol.hr1+ vol.hr2+vol.hr3 + vol.hr4+vol.hr5 + vol.hr6+ vol.hr7 + vol.hr8+ vol.hr9 + vol.hr10+vol.hr11+ vol.hr12
		+vol.hr13+ vol.hr14+vol.hr15+ vol.hr16+vol.hr17+ vol.hr18+vol.hr19+ vol.hr20+vol.hr21+ vol.hr22+vol.hr23+ vol.hr24
	) end) [1],   
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr2-case when dst.hour=2 then isnull(vol.hr25,0) else 0 end else 0 end) [2]
	,sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr3-case when dst.hour=3 then  isnull(vol.hr25,0) else 0 end else 0 end) [3], 
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr4 else 0 end) [4],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr5 else 0 end) [5],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr6 else 0 end) [6],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr7 else 0 end) [7], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr8 else 0 end) [8],
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr9 else 0 end) [9],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr10 else 0 end) [10],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr11 else 0 end) [11], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr12 else 0 end) [12],
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr13 else 0 end) [13], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr14 else 0 end) [14],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr15 else 0 end) [15],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr16 else 0 end) [16],
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr17 else 0 end) [17], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr18 else 0 end) [18],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr19 else 0 end) [19], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr20-case when dst.hour=20 then  isnull(vol.hr25,0) else 0 end else 0 end) [20],
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr21-case when dst.hour=21 then  isnull(vol.hr25,0) else 0 end else 0 end) [21], 
	sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr22 else 0 end) [22],sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr23 else 0 end) [23], sum(case when vol.curve_granularity in (982,987,989,997) then vol.hr24 else 0 end) [24],
	sum(case when vol.curve_granularity in (982,987,989,997) then case when isnull(dst.[hour],0)<>0  then isnull(vol.hr25,0) else 0 end else 0 end) [25],
	avg(t.hr1) [p1],  avg(t.hr2) [p2],avg(t.hr3) [p3], 
	avg(t.hr4) [p4],avg(t.hr5) [p5],avg(t.hr6) [p6],avg(t.hr7) [p7], avg(t.hr8) [p8],
	avg(t.hr9) [p9],avg(t.hr10) [p10],avg(t.hr11) [p11], avg(t.hr12) [p12],
	avg(t.hr13) [p13], avg(t.hr14) [p14],avg(t.hr15) [p15],avg(t.hr16) [p16],
	avg(t.hr17) [p17], avg(t.hr18) [p18],avg(t.hr19) [p19], avg(t.hr20) [p20],
	avg(t.hr21) [p21], avg(t.hr22) [p22],avg(t.hr23) [p23], avg(t.hr24) [p24],
	avg(case when isnull(dst.[hour],0)<>0  then isnull(t.hr25,case when isnull(dst.[hour],0)=2 then t.hr2 else t.hr3 end) else 0 end) [p25],
	avg(t.hr1_c) [p1_c], avg(t.hr2_c) [p2_c],avg(t.hr3_c) [p3_c], 
	avg(t.hr4_c) [p4_c],avg(t.hr5_c) [p5_c],avg(t.hr6_c) [p6_c],avg(t.hr7_c) [p7_c], avg(t.hr8_c) [p8_c],
	avg(t.hr9_c) [p9_c],avg(t.hr10_c) [p10_c],avg(t.hr11_c) [p11_c], avg(t.hr12_c) [p12_c],
	avg(t.hr13_c) [p13_c], avg(t.hr14_c) [p14_c],avg(t.hr15_c) [p15_c],avg(t.hr16_c) [p16_c],
	avg(t.hr17_c) [p17_c], avg(t.hr18_c) [p18_c],avg(t.hr19_c) [p19_c], avg(t.hr20_c) [p20_c],
	avg(t.hr21_c) [p21_c], avg(t.hr22_c) [p22_c],avg(t.hr23_c) [p23_c], avg(t.hr24_c) [p24_c],
	avg(case when isnull(dst.[hour],0)<>0  then isnull(t.hr25_c,case when isnull(dst.[hour],0)=2 then t.hr2_c else t.hr3_c end) else 0 end) [p25_c]
	'+	case when  @calc_type='s' THEN
		',sum(case when vol.curve_granularity in (982,987,989,997) then --hourly/15/30 min 
			vol.mhr1
		else         
			(vol.mhr1+ vol.mhr2+vol.mhr3 + vol.mhr4+vol.mhr5 + vol.mhr6+ vol.mhr7 + vol.mhr8+ vol.mhr9 + vol.mhr10+vol.mhr11+ vol.mhr12+vol.mhr13+ vol.mhr14+vol.mhr15+ vol.mhr16+vol.mhr17+ vol.mhr18+vol.mhr19+ vol.mhr20+vol.mhr21+ vol.mhr22+vol.mhr23+ vol.mhr24
		) end) [m1],   
		sum(vol.mhr2-case when dst.hour=2 then isnull(vol.mhr25,0) else 0 end) [m2],sum(vol.mhr3-case when dst.hour=3 then  isnull(vol.mhr25,0) else 0 end) [m3], 
		sum(vol.mhr4) [m4],sum(vol.mhr5) [m5],sum(vol.mhr6) [m6],sum(vol.mhr7) [m7], sum(vol.mhr8) [m8],
		sum(vol.mhr9) [m9],sum(vol.mhr10) [m10],sum(vol.mhr11) [m11], sum(vol.mhr12) [m12],
		sum(vol.mhr13) [m13], sum(vol.mhr14) [m14],sum(vol.mhr15) [m15],sum(vol.mhr16) [m16],
		sum(vol.mhr17) [m17], sum(vol.mhr18) [m18],sum(vol.mhr19) [m19], sum(vol.mhr20-case when dst.hour=20 then  isnull(vol.mhr25,0) else 0 end) [m20],
		sum(vol.mhr21-case when dst.hour=21 then  isnull(vol.mhr25,0) else 0 end) [m21], 
		sum(vol.mhr22) [m22],sum(vol.mhr23) [m23], sum(vol.mhr24) [m24],
		sum(case when isnull(dst.[hour],0)<>0  then isnull(vol.mhr25,0) else 0 end) [m25]
	'
	ELSE
		' ,null [m1],  null [m2],null [m3], 
		null [m4],null [m5],null [m6],null [m7],null [m8],
		null [m9],null [m10],null [m11],null [m12],
		null [m13], null [m14],null [m15],null [m16],
		null [m17], null [m18],null [m19], null [m20],
		null [m21], null [m22],null [m23], null [m24],null [m25]'
	END 

SET @sql= ' into  '+@tmp_hourly_price_vol_at_low+'
	FROM '+@position_table_name+' vol  with (NOLOCK)
	inner join #vwDealTimezone tz on  vol.source_deal_header_id=tz.source_deal_header_id and tz.curve_id=vol.curve_id and tz.location_id=vol.location_id
	left join source_price_curve_def spcd with (NOLOCK) on spcd.source_curve_def_id=vol.curve_id and vol.calc_mtm_at_tou_level=''y''
	left join  #tou_hour hb  ON spcd.udf_block_group_id=hb.block_type_group_id  and hb.dst_group_value_id=tz.dst_group_value_id
		and vol.term_start=hb.term_date	 and vol.calc_mtm_at_tou_level=''y''
	LEFT JOIN  #tmp_hourly_price_only t on t.rowid=vol.rowid
	LEFT JOIN #mv90_dst dst on dst.date = vol.term_start and insert_delete = ''i'' and dst.source_commodity_id = vol.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
     where vol.save_mtm_at_calculation_granularity=''y''
	group by '+@group_by_clms+' 
'

exec spa_print @select_clms
exec spa_print @qry1
exec spa_print @sql

EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@select_clms+@qry1+@sql)

create table #tmp_hour_list (hr tinyint)

insert into #tmp_hour_list (hr) values (1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25)

SET @sql= '
select [ID]=IDENTITY(int,1,1),source_deal_detail_id,term_start,period,tou_id,monthly_term ,vol.source_deal_header_id,vol.leg
	,vol.location_id,vol.curve_id,vol.deal_term_start,vol.monthly_term_end,vol.formula_curve_id,b_s_mult
	,price_adder,price_multiplier,pay_opposite,pricing,	case when hr.hr=25 then dst.[hour] else hr.hr end [Hours]
	,case when hr.hr=25 then 1 else 0 end is_dst,save_mtm_at_calculation_granularity
	,market_value.market_value,volume.volume ,volume_c.volume_c,curve_value.curve_value,avg_curve_value.avg_curve_value
	,allocation_volume.allocation_volume,-1*contract_value.contract_value contract_value,formula_id,curve_value_c.curve_value_c,avg_curve_value_c.avg_curve_value_c,vol.contract_id,vol.commodity_id, null fixed_price
INTO  '+@hourly_price_vol_at_low+' 
FROM '+@tmp_hourly_price_vol_at_low+' vol
inner join #vwDealTimezone tz on  vol.source_deal_header_id=tz.source_deal_header_id
	and tz.curve_id=vol.curve_id and tz.location_id=vol.location_id
left join #mv90_dst dst on dst.[date] = vol.term_start and dst.insert_delete = ''i'' and dst.source_commodity_id = vol.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
CROSS JOIN #tmp_hour_list hr 
cross apply
(
	select market_value=case when save_mtm_at_calculation_granularity=''y'' then case  hr.hr WHEN 1 THEN [1]*[p1] WHEN 2 THEN  [2]*[p2] WHEN 3 THEN [3]*[p3]
		WHEN 4 THEN [4]*[p4]
		WHEN 5 THEN [5]*[p5]
		WHEN 6 THEN [6]*[p6]
		WHEN 7 THEN [7]*[p7]
		WHEN 8 THEN [8]*[p8]
		WHEN 9 THEN [9]*[p9]
		WHEN 10 THEN [10]*[p10]
		WHEN 11 THEN [11]*[p11]
		WHEN 12 THEN [12]*[p12]
		WHEN 13 THEN [13]*[p13]
		WHEN 14 THEN [14]*[p14]
		WHEN 15 THEN [15]*[p15]
		WHEN 16 THEN [16]*[p16]
		WHEN 17 THEN [17]*[p17]
		WHEN 18 THEN [18]*[p18]
		WHEN 19 THEN [19]*[p19]
		WHEN 20 THEN [20]*[p20]
		WHEN 21 THEN [21]*[p21]
		WHEN 22 THEN [22]*[p22]
		WHEN 23 THEN [23]*[p23]
		WHEN 24 THEN [24]*[p24]
		WHEN 25 THEN [25]*[p25]
	ELSE 0 END else 0 end)	market_value
cross apply(
	select contract_value=case when save_mtm_at_calculation_granularity=''y'' then case  hr.hr WHEN 1 THEN [1]*[p1_c] WHEN 2 THEN  [2]*[p2_c] WHEN 3 THEN [3]*[p3_c]
		WHEN 4 THEN [4]*[p4_c]
		WHEN 5 THEN [5]*[p5_c]
		WHEN 6 THEN [6]*[p6_c]
		WHEN 7 THEN [7]*[p7_c]
		WHEN 8 THEN [8]*[p8_c]
		WHEN 9 THEN [9]*[p9_c]
		WHEN 10 THEN [10]*[p10_c]
		WHEN 11 THEN [11]*[p11_c]
		WHEN 12 THEN [12]*[p12_c]
		WHEN 13 THEN [13]*[p13_c]
		WHEN 14 THEN [14]*[p14_c]
		WHEN 15 THEN [15]*[p15_c]
		WHEN 16 THEN [16]*[p16_c]
		WHEN 17 THEN [17]*[p17_c]
		WHEN 18 THEN [18]*[p18_c]
		WHEN 19 THEN [19]*[p19_c]
		WHEN 20 THEN [20]*[p20_c]
		WHEN 21 THEN [21]*[p21_c]
		WHEN 22 THEN [22]*[p22_c]
		WHEN 23 THEN [23]*[p23_c]
		WHEN 24 THEN [24]*[p24_c]
		WHEN 25 THEN [25]*[p25_c]
	ELSE 0 END else 0 end)	contract_value
cross apply (
		select volume= case  hr.hr WHEN 1 THEN [1]
		WHEN 2 THEN  [2]
		WHEN 3 THEN [3]
		WHEN 4 THEN [4]
		WHEN 5 THEN [5]
		WHEN 6 THEN [6]
		WHEN 7 THEN [7]
		WHEN 8 THEN [8]
		WHEN 9 THEN [9]
		WHEN 10 THEN [10]
		WHEN 11 THEN [11]
		WHEN 12 THEN [12]
		WHEN 13 THEN [13]
		WHEN 14 THEN [14]
		WHEN 15 THEN [15]
		WHEN 16 THEN [16]
		WHEN 17 THEN [17]
		WHEN 18 THEN [18]
		WHEN 19 THEN [19]
		WHEN 20 THEN [20]
		WHEN 21 THEN [21]
		WHEN 22 THEN [22]
		WHEN 23 THEN [23]
		WHEN 24 THEN [24]
		WHEN 25 THEN [25]
		ELSE 0 END ) volume
cross apply (
		select volume_c= -1*case  hr.hr WHEN 1 THEN [1]
		WHEN 2 THEN  [2]
		WHEN 3 THEN [3]
		WHEN 4 THEN [4]
		WHEN 5 THEN [5]
		WHEN 6 THEN [6]
		WHEN 7 THEN [7]
		WHEN 8 THEN [8]
		WHEN 9 THEN [9]
		WHEN 10 THEN [10]
		WHEN 11 THEN [11]
		WHEN 12 THEN [12]
		WHEN 13 THEN [13]
		WHEN 14 THEN [14]
		WHEN 15 THEN [15]
		WHEN 16 THEN [16]
		WHEN 17 THEN [17]
		WHEN 18 THEN [18]
		WHEN 19 THEN [19]
		WHEN 20 THEN [20]
		WHEN 21 THEN [21]
		WHEN 22 THEN [22]
		WHEN 23 THEN [23]
		WHEN 24 THEN [24]
		WHEN 25 THEN [25]
		ELSE 0 END ) volume_c
 cross apply
	 (select  curve_value=case  hr.hr WHEN 1 THEN [p1]
		WHEN 2 THEN  [p2]
		WHEN 3 THEN [p3]
		WHEN 4 THEN [p4]
		WHEN 5 THEN [p5]
		WHEN 6 THEN [p6]
		WHEN 7 THEN [p7]
		WHEN 8 THEN [p8]
		WHEN 9 THEN [p9]
		WHEN 10 THEN [p10]
		WHEN 11 THEN [p11]
		WHEN 12 THEN [p12]
		WHEN 13 THEN [p13]
		WHEN 14 THEN [p14]
		WHEN 15 THEN [p15]
		WHEN 16 THEN [p16]
		WHEN 17 THEN [p17]
		WHEN 18 THEN [p18]
		WHEN 19 THEN [p19]
		WHEN 20 THEN [p20]
		WHEN 21 THEN [p21]
		WHEN 22 THEN [p22]
		WHEN 23 THEN [p23]
		WHEN 24 THEN [p24]
		WHEN 25 THEN [p25]
		ELSE 0 END ) curve_value
cross apply
	(select  avg_curve_value=case  hr.hr WHEN 1 THEN [p1]
		WHEN 2 THEN  [p2]
		WHEN 3 THEN [p3]
		WHEN 4 THEN [p4]
		WHEN 5 THEN [p5]
		WHEN 6 THEN [p6]
		WHEN 7 THEN [p7]
		WHEN 8 THEN [p8]
		WHEN 9 THEN [p9]
		WHEN 10 THEN [p10]
		WHEN 11 THEN [p11]
		WHEN 12 THEN [p12]
		WHEN 13 THEN [p13]
		WHEN 14 THEN [p14]
		WHEN 15 THEN [p15]
		WHEN 16 THEN [p16]
		WHEN 17 THEN [p17]
		WHEN 18 THEN [p18]
		WHEN 19 THEN [p19]
		WHEN 20 THEN [p20]
		WHEN 21 THEN [p21]
		WHEN 22 THEN [p22]
		WHEN 23 THEN [p23]
		WHEN 24 THEN [p24]
		WHEN 25 THEN [p25]
		ELSE 0 END) avg_curve_value
cross apply
	(	select allocation_volume=case  hr.hr WHEN 1 THEN [m1]
		WHEN 2 THEN  [m2]
		WHEN 3 THEN [m3]
		WHEN 4 THEN [m4]
		WHEN 5 THEN [m5]
		WHEN 6 THEN [m6]
		WHEN 7 THEN [m7]
		WHEN 8 THEN [m8]
		WHEN 9 THEN [m9]
		WHEN 10 THEN [m10]
		WHEN 11 THEN [m11]
		WHEN 12 THEN [m12]
		WHEN 13 THEN [m13]
		WHEN 14 THEN [m14]
		WHEN 15 THEN [m15]
		WHEN 16 THEN [m16]
		WHEN 17 THEN [m17]
		WHEN 18 THEN [m18]
		WHEN 19 THEN [m19]
		WHEN 20 THEN [m20]
		WHEN 21 THEN [m21]
		WHEN 22 THEN [m22]
		WHEN 23 THEN [m23]
		WHEN 24 THEN [m24]
		WHEN 25 THEN [m25]
		ELSE 0 END) allocation_volume
cross apply
	 (select  curve_value_c=case  hr.hr WHEN 1 THEN [p1_c]
		WHEN 2 THEN [p2_c]
		WHEN 3 THEN [p3_c]
		WHEN 4 THEN [p4_c]
		WHEN 5 THEN [p5_c]
		WHEN 6 THEN [p6_c]
		WHEN 7 THEN [p7_c]
		WHEN 8 THEN [p8_c]
		WHEN 9 THEN [p9_c]
		WHEN 10 THEN [p10_c]
		WHEN 11 THEN [p11_c]
		WHEN 12 THEN [p12_c]
		WHEN 13 THEN [p13_c]
		WHEN 14 THEN [p14_c]
		WHEN 15 THEN [p15_c]
		WHEN 16 THEN [p16_c]
		WHEN 17 THEN [p17_c]
		WHEN 18 THEN [p18_c]
		WHEN 19 THEN [p19_c]
		WHEN 20 THEN [p20_c]
		WHEN 21 THEN [p21_c]
		WHEN 22 THEN [p22_c]
		WHEN 23 THEN [p23_c]
		WHEN 24 THEN [p24_c]
		WHEN 25 THEN [p25_c]
		ELSE 0 END ) curve_value_c
cross apply
		(select  avg_curve_value_c=case  hr.hr WHEN 1 THEN [p1_c]
		WHEN 2 THEN [p2_c]
		WHEN 3 THEN [p3_c]
		WHEN 4 THEN [p4_c]
		WHEN 5 THEN [p5_c]
		WHEN 6 THEN [p6_c]
		WHEN 7 THEN [p7_c]
		WHEN 8 THEN [p8_c]
		WHEN 9 THEN [p9_c]
		WHEN 10 THEN [p10_c]
		WHEN 11 THEN [p11_c]
		WHEN 12 THEN [p12_c]
		WHEN 13 THEN [p13_c]
		WHEN 14 THEN [p14_c]
		WHEN 15 THEN [p15_c]
		WHEN 16 THEN [p16_c]
		WHEN 17 THEN [p17_c]
		WHEN 18 THEN [p18_c]
		WHEN 19 THEN [p19_c]
		WHEN 20 THEN [p20_c]
		WHEN 21 THEN [p21_c]
		WHEN 22 THEN [p22_c]
		WHEN 23 THEN [p23_c]
		WHEN 24 THEN [p24_c]
		WHEN 25 THEN [p25_c]
		ELSE 0 END) avg_curve_value_c
--left join	#mv90_dst dst1 on dst1.[date] = vol.term_start and dst1.insert_delete = ''d'' and dst1.source_commodity_id = vol.commodity_id and dst1.[hour] = hr.hr
where (hr.hr<25  or (hr.hr=25 and dst.[hour] is not null)) and (market_value.market_value<>0 or volume.volume <>0 or volume_c.volume_c<>0
 or curve_value.curve_value<>0 or avg_curve_value.avg_curve_value<>0 or isnull(allocation_volume.allocation_volume,0)<>0)
'

exec spa_print @sql
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)
--exec('create index indx__hourly_price_volly_price_vol_'+@process_id+' on  '+ @hourly_price_vol_at_low +'(source_deal_header_id,formula_curve_id,deal_term_start)')
--exec('create index indx__hourly_price_volly_price_vol_1'+@process_id+' on  '+ @hourly_price_vol_at_low +'(source_deal_detail_id,term_start,Hours,period)')

--exec('create index IX_PT_tmp_hourly_price_vol_pricing'+@process_id+' on  '+ @hourly_price_vol_at_low +'([pricing]) INCLUDE ([source_deal_detail_id], [tou_id], [monthly_term], [source_deal_header_id], [leg], [location_id], [curve_id], [deal_term_start], [monthly_term_end], [formula_curve_id], [b_s_mult], [market_value], [curve_value], [avg_curve_value], [allocation_volume], [volume])')
exec('create index IX_PT_tmp_hourly_price_vol_11'+@process_id+' on  '+ @hourly_price_vol_at_low +'([source_deal_header_id], [leg], [curve_id], [deal_term_start]) INCLUDE ([volume])')

	--not tou level calculation
if not (@tou1 is null and @tou2 is null and @tou3 is null and @tou4 is null and @tou5 is null and @tou6 is null ) 
begin
	set @sql='
	insert into '+ @tmp_hourly_price_vol +' 
	(
		source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,tou_id ,source_deal_detail_id
		,market_value ,curve_value ,volume ,avg_curve_value  ,allocation_volume ,volume_c ,calc_mtm_at_tou_level
		,contract_value,formula_id,curve_value_c,avg_curve_value_c,contract_id,commodity_id,fixed_price,no_hrs
	)' 
	+ case when  @tou1 is  null then '' else '
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou1+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou1+case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou1+' ,volume_'+@tou1+' ,avg_curve_value_'+@tou1+'  ,allocation_volume_'+@tou1+' ,volume_c_'+@tou1+',calc_mtm_at_tou_level ,isnull(contract_value_'+@tou1+',0),formula_id,isnull(curve_value_c_'+@tou1+',0),isnull(avg_curve_value_c_'+@tou1+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou1+',0) fixed_price, volume_'+@tou1+'/NULLIF(no_hrs_'+@tou1+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou1+',0) <>0'
	end
	+ case when  @tou2 is  null then '' else ' union all
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou2+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou2+case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou2+' ,volume_'+@tou2+' ,avg_curve_value_'+@tou2+'  ,allocation_volume_'+@tou2+' ,volume_c_'+@tou2+' ,calc_mtm_at_tou_level,isnull(contract_value_'+@tou2+',0),formula_id,isnull(curve_value_c_'+@tou2+',0),isnull(avg_curve_value_c_'+@tou2+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou2+',0) fixed_price, volume_'+@tou2+'/NULLIF(no_hrs_'+@tou2+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou2+',0) <>0'
	end
	+ case when  @tou3 is  null then '' else ' union all
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou3+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou3+case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou3+' ,volume_'+@tou3+' ,avg_curve_value_'+@tou3+'  ,allocation_volume_'+@tou3+' ,volume_c_'+@tou3+' ,calc_mtm_at_tou_level,isnull(contract_value_'+@tou3+',0),formula_id,isnull(curve_value_c_'+@tou3+',0),isnull(avg_curve_value_c_'+@tou3+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou3+',0) fixed_price, volume_'+@tou3+'/NULLIF(no_hrs_'+@tou3+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou3+',0) <>0'
	end
	+ case when  @tou4 is  null then '' else ' union all
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou4+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou4 +case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou4+' ,volume_'+@tou4+' ,avg_curve_value_'+@tou4+'  ,allocation_volume_'+@tou4+' ,volume_c_'+@tou4+' ,calc_mtm_at_tou_level,isnull(contract_value_'+@tou4+',0),formula_id,isnull(curve_value_c_'+@tou4+',0),isnull(avg_curve_value_c_'+@tou4+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou4+',0) fixed_price, volume_'+@tou4+'/NULLIF(no_hrs_'+@tou4+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou4+',0) <>0'
	end
	+ case when  @tou5 is  null then '' else ' union all
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou5+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou5+case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou5+' ,volume_'+@tou5+' ,avg_curve_value_'+@tou5+'  ,allocation_volume_'+@tou5+' ,volume_c_'+@tou5+' ,calc_mtm_at_tou_level,isnull(contract_value_'+@tou5+',0),formula_id,isnull(curve_value_c_'+@tou5+',0),isnull(avg_curve_value_c_'+@tou5+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou5+',0) fixed_price, volume_'+@tou5+'/NULLIF(no_hrs_'+@tou5+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou5+',0) <>0'
	end
	+ case when  @tou6 is  null then '' else ' union all
		select source_deal_header_id ,leg ,location_id ,curve_id ,monthly_term ,deal_term_start ,monthly_term_end ,
		formula_curve_id ,b_s_mult ,price_adder ,price_multiplier,pay_opposite,pricing ,'+@tou6+' tou_id ,source_deal_detail_id
		,isnull(market_value_'+@tou6+case when @calc_type='s' then ',0' else ',null' end +') ,curve_value_'+@tou6+' ,volume_'+@tou6+' ,avg_curve_value_'+@tou6+'  ,allocation_volume_'+@tou6+' ,volume_c_'+@tou6+' ,calc_mtm_at_tou_level,isnull(contract_value_'+@tou6+',0),formula_id,isnull(curve_value_c_'+@tou6+',0),isnull(avg_curve_value_c_'+@tou6+',0),contract_id,commodity_id,nullif(fixed_price_'+@tou6+',0) fixed_price, volume_'+@tou6+'/NULLIF(no_hrs_'+@tou6+', 0) mw_position
		from '+ @tmp_hourly_price_vol +' where isnull(volume_'+@tou6+',0) <>0'
	end

	exec spa_print @sql
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)
	
	set @sql='delete  '+ @tmp_hourly_price_vol +' where isnull(tou_id,-1)=-1 and volume=0 and curve_value is null and isnull(curve_value_c,0)=0 and ( volume_'+@tou1+' is not null '
		+ case when @tou2 is not null then ' or volume_'+@tou2+' is not null ' else '' end
		+ case when @tou3 is not null then ' or volume_'+@tou3+' is not null ' else '' end
		+ case when @tou4 is not null then ' or volume_'+@tou4+' is not null ' else '' end
		+ case when @tou5 is not null then ' or volume_'+@tou5+' is not null ' else '' end
		+ case when @tou6 is not null then ' or volume_'+@tou6+' is not null ' else '' end
	+')'

	exec spa_print @sql
	
	exec(@sql)
end


set @sql='
	update '+ @tmp_hourly_price_vol +' 
	set 
		contract_value= isnull(contract_value,0)
		,curve_value_c=isnull(curve_value_c,0)
		,avg_curve_value_c=isnull(avg_curve_value_c,0)
	where contract_value is null or curve_value_c is null or avg_curve_value_c is null 
	' 
exec spa_print @sql
exec(@sql)
EXEC spa_print  'END PERFORMANCE TUNING FOR MARKET VALUE CALCULATION'

exec('create index indx_tm_price_hoully_price_vol_'+@process_id+' on  '+ @tmp_hourly_price_vol +'(source_deal_detail_id,source_deal_header_id,curve_id,deal_term_start)')




set @sql='
update hv set volume=volume* -1,volume_c=volume_c* -1,market_value=market_value*-1,contract_value=contract_value*-1
from #temp_deals a 
inner join '+ @tmp_hourly_price_vol +' hv on
	hv.source_deal_header_id=a.source_deal_header_id and hv.curve_id=ISNULL(a.curve_id, -1) and hv.deal_term_start=a.term_start and	hv.leg = a.leg
	and isnull(hv.state_value_id, -1) = isnull(a.state_value_id, -1) 
	and isnull(hv.tier_value_id, -1) = isnull(a.tier_value_id, -1)
	and isnull(hv.match_info_id, -1) = isnull(a.match_info_id, -1)
	and a.internal_deal_type_value_id=103 and a.internal_deal_subtype_value_id=102
'
exec spa_print @sql
exec(@sql)

BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************End of Calculating Hourly Market Values*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '*****Saving Hourly Position and creating index for Contract Value*****************************'	
END

-------------Weighted Avg Contract Price for formula on the contract side ---------------------
-- If pricing is 1603 which is Daily Wght Avg
-- If pricing is 1604 which is Hourly Wght Avg (Not implemented now but for the future - needs to be added to static data value if required)


CREATE TABLE #tx2([ID] INT IDENTITY, as_of_date DATETIME, term_start DATETIME, formula_id INT, granularity INT, contract_id INT, source_deal_detail_id INT, volume FLOAT)

INSERT INTO #formula_value_at_low
(term_start, formula_id , contract_expiration_date, formula_value,contract_id, source_deal_detail_id ,hr ,period,is_dst )
select term_start, formula_id , contract_expiration_date, formula_value,contract_id, source_deal_detail_id,null hr,0 period,0 is_dst
from #formula_value 


/* not found using this temp table..
CREATE TABLE #formula_value_daily_wght_avg
(term_start datetime, formula_id INT, contract_expiration_date datetime, formula_value float,contract_id INT, source_deal_detail_id INT,round_value INT)
*/

SET @sql='
    select  rowid=identity(int,1,1), '''+@curve_as_of_date+''' as_of_date,' + cast(@curve_source_value_id as varchar) + ' curve_source_value_id
     ,vol.term_start prod_date
        , max(vol.formula_id) formula_id, 981 granularity, MAX(vol.contract_id) contract_id, vol.source_deal_detail_id,
            -1*SUM(hr1+hr2+hr3+hr4+hr5+hr6+hr7+hr8+hr9+hr10+hr11+hr12+hr13+hr14+hr15+hr16+hr17+hr18+hr19+hr20+hr21+hr22+hr23+hr24) volume 
			,cast(null as int)	counterparty_id ,
			cast(null as int)	curve_id,
			cast(null as int) onPeakVolume,
			cast(null as int) invoice_Line_item_id,			
			cast(null as int) invoice_line_item_seq_id,
			cast(null as float)	price,			
			cast(null as int) volume_uom_id,
			cast(null as int) generator_id,
			cast(null as int) [Hour],
			cast(null as int) commodity_id,
			cast(null as int) meter_id,
			cast(null as int) [mins]	
	into '+@formula_table2+'	 
    from   '+@position_table_name+' vol 
    WHERE   vol.formula_id is not null AND vol.formula_curve_id IS NULL AND vol.pricing IN (1603) -- Weighted  Daily pricing 
    group by vol.source_deal_detail_id,vol.term_start 

'
exec spa_print @sql
Exec(@sql)



if @@rowcount>0
begin


	EXEC spa_calculate_formula	@curve_as_of_date, @formula_table2, @process_id2, @calc_result_table2 output, @calc_result_table_breakdown2 output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'

	SET @sql='INSERT INTO #formula_value
		select td.term_start, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id
		from #temp_deals td
			outer apply
			(
				select max(contract_id) contract_id,max(formula_id) formula_id
					,sum(formula_eval_value*volume)/nullif(sum(volume),0) formula_value
				from ' +  @calc_result_table2 + ' where source_deal_detail_id=td.source_deal_detail_id
				group by source_deal_detail_id
			) crt ' 

	exec spa_print @sql
	exec(@sql)

	SET @sql='INSERT INTO #formula_value_at_low
		(term_start, formula_id , contract_expiration_date, formula_value,contract_id, source_deal_detail_id ,hr ,period,is_dst )
		select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id,-1 hr,0 period,0 is_dst
		from #temp_deals td
		inner join ' +  @calc_result_table2 + ' crt on crt.source_deal_detail_id=td.source_deal_detail_id
			and td.save_mtm_at_calculation_granularity=''y''
		'
	exec spa_print @sql
	exec (@sql)


	/*
	--### Annal - 10-10-2012 Logic to apply rounding to CURVED - individual formula component

	SET @sql='INSERT INTO #formula_value_daily_wght_avg
			select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(d.eval_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,
			crt.source_deal_detail_id,
			cfro.index_round_value
			from ' +  @calc_result_table2 + ' crt 
			INNER JOIN '+@calc_result_table_breakdown2+' d ON crt.source_id = d.source_id
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = crt.source_deal_detail_id AND td.pricing in( 1603)
			INNER JOIN contract_formula_rounding_options cfro on cfro.contract_id = td.contract_id
				AND cfro.formula_type = ''CurveD'' AND cfro.curve_id = d.curve_id'
				
	exec spa_print @sql
	exec (@sql)
	*/
	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Calculated weighted average daily price on formula on contract side..*****************************'	
	END
end


SET @sql='
	select  [ID]=IDENTITY(int,1,1),'''+@curve_as_of_date +''' as_of_date,unpvt.term_start, unpvt.formula_id, 982 granularity,
		 unpvt.contract_id, unpvt.source_deal_detail_id,case when [Hours]=25 then dst.[hour] else [Hours] end [Hours]
		 ,case when [Hours]=25 then 1 else 0 end is_dst,-1*Volume Volume,unpvt.source_deal_header_id 
	INTO #tx3 
	from (
		select  t.term_start, t.formula_id, 982 granularity, MAX(t.contract_id) contract_id, t.source_deal_detail_id
			,max(t.commodity_id) commodity_id
				,SUM(hr1) [1],SUM(hr2) [2],SUM(hr3) [3],SUM(hr4) [4],SUM(hr5) [5],SUM(hr6) [6],SUM(hr7) [7],SUM(hr8) [8]
				,SUM(hr9) [9],SUM(hr10) [10],SUM(hr11) [11],SUM(hr12) [12],SUM(hr13) [13],SUM(hr14) [14],SUM(hr15) [15],SUM(hr16) [16]
			,SUM(hr17) [17],SUM(hr18) [18],SUM(hr19) [19],SUM(hr20) [20],SUM(hr21) [21],SUM(hr22) [22],SUM(hr23) [23],SUM(hr24) [24]
			,SUM(hr25) [25],max(t.source_deal_header_id) source_deal_header_id,isnull(max(t.curve_id),-1) curve_id
			, isnull(max(t.location_id),-1) location_id	  		 
		from	'+@position_table_name+' t
		WHERE   t.formula_id is not null AND t.formula_curve_id IS NULL AND t.pricing IN (1604) -- Weighted Hourly pricing 
		group by t.source_deal_detail_id, t.formula_id,t.term_start 
	) p
	UNPIVOT
		(Volume for [Hours] IN
			([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25])
		) AS unpvt
	inner join #vwDealTimezone tz on  unpvt.source_deal_header_id=tz.source_deal_header_id
		 and tz.curve_id=unpvt.curve_id  and tz.location_id=unpvt.location_id 
	left join #mv90_dst dst on dst.[date] = term_start and dst.insert_delete = ''i'' and dst.source_commodity_id = unpvt.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
	where [Hours]<25  or ([Hours]=25 and dst.[hour] is not null);

	select  rowid=identity(int,1,1), t.as_of_date,' + cast(@curve_source_value_id as varchar) + ' curve_source_value_id, t.term_start prod_date
		,t.formula_id, granularity, t.contract_id, t.source_deal_detail_id,[Hours] [Hour],is_dst, volume
			,cast(null as int)	counterparty_id ,
			cast(null as int)	curve_id,
			cast(null as int) onPeakVolume,
			cast(null as int) invoice_Line_item_id,			
			cast(null as int) invoice_line_item_seq_id,
			cast(null as float)	price,			
			cast(null as int) volume_uom_id,
			cast(null as int) generator_id,
			cast(null as int) commodity_id,
			cast(null as int) meter_id,
			cast(null as int) [mins],source_deal_header_id	
	into '+@formula_table3+'	 
	from	#tx3  t
'
exec spa_print @sql
Exec(@sql)

if @@rowcount>0
begin
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end
	

	EXEC spa_calculate_formula	@curve_as_of_date, @formula_table3, @process_id3, @calc_result_table3 output, @calc_result_table_breakdown3 output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'

	--CREATE TABLE #formula_value3
	--(term_start datetime, formula_id INT, contract_expiration_date datetime, formula_value float,contract_id INT, source_deal_detail_id INT,[hour] int,is_dst int)

	SET @sql='INSERT INTO #formula_value
		select td.term_start, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id
		from #temp_deals td
			outer apply
			(
				select max(contract_id) contract_id,max(formula_id) formula_id
					,sum(formula_eval_value*volume)/nullif(sum(volume),0) formula_value
				from ' +  @calc_result_table3 + ' where source_deal_detail_id=td.source_deal_detail_id
				group by source_deal_detail_id
			) crt ' 

	exec spa_print @sql
	exec (@sql)


	SET @sql='INSERT INTO #formula_value_at_low
		(term_start, formula_id , contract_expiration_date, formula_value,contract_id, source_deal_detail_id ,hr ,period,is_dst )
		select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_eval_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id,[Hour] hr,0 period,crt.is_dst
		from #temp_deals td
		inner join ' +  @calc_result_table3 + ' crt on crt.source_deal_detail_id=td.source_deal_detail_id
			and td.save_mtm_at_calculation_granularity=''y''
		'
	exec spa_print @sql
	exec (@sql)



	--set @sql='update h set curve_value_c=f.formula_eval_value,avg_curve_value_c=f.formula_eval_value,contract_value=f.formula_eval_value*h.volume
	--from '+ @hourly_price_vol_at_low+' h 
	--inner join '+@calc_result_table3+' f on  f.source_deal_detail_id=h.source_deal_detail_id
	--	and h.hours=f.[Hour] --and f.period=h.period 
	--	and h.formula_curve_id is null
	--	--and h.save_mtm_at_calculation_granularity=''y'''

	--exec spa_print @sql
	--exec(@sql)


	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Calculated weighted average hourly price on formula on contract side..*****************************'	
	END

end


SET @sql='
	select  [ID]=IDENTITY(int,1,1),'''+@curve_as_of_date+''' as_of_date,unpvt.term_start, unpvt.formula_id, pos_granularity granularity,unpvt.contract_id, unpvt.source_deal_detail_id
		,case when [Hours]=25 then dst.[hour] else [Hours] end [Hours],case when [Hours]=25 then 1 else 0 end is_dst,case when pos_granularity=987 then 15 when pos_granularity=989 THEN 30 else 0 end +period period,pos_granularity,Volume,unpvt.source_deal_header_id
	INTO #tx4 
	from (
		select  t.term_start, t.formula_id, 982 granularity, MAX(t.contract_id) contract_id, t.source_deal_detail_id
			,max(t.commodity_id) commodity_id,t.period,max(t.pos_granularity) pos_granularity
				,SUM(hr1) [1],SUM(hr2) [2],SUM(hr3) [3],SUM(hr4) [4],SUM(hr5) [5],SUM(hr6) [6],SUM(hr7) [7],SUM(hr8) [8]
				,SUM(hr9) [9],SUM(hr10) [10],SUM(hr11) [11],SUM(hr12) [12],SUM(hr13) [13],SUM(hr14) [14],SUM(hr15) [15],SUM(hr16) [16]
			,SUM(hr17) [17],SUM(hr18) [18],SUM(hr19) [19],SUM(hr20) [20],SUM(hr21) [21],SUM(hr22) [22],SUM(hr23) [23],SUM(hr24) [24]
			,SUM(hr25) [25],max( t.source_deal_header_id) source_deal_header_id,isnull(max( t.curve_id),-1) curve_id
			,isnull(max(t.location_id),-1) location_id	  		 
		from	'+@position_table_name+' t
		WHERE   t.formula_id is not null AND t.formula_curve_id IS NULL AND t.pricing IN (1605) -- Weighted 15 minute pricing 
		group by t.source_deal_detail_id, t.formula_id,t.term_start ,t.period			
	) p
	UNPIVOT
		(Volume for [Hours] IN
			([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25])
		) AS unpvt
	inner join #vwDealTimezone tz on  unpvt.source_deal_header_id=tz.source_deal_header_id
		 and tz.curve_id=unpvt.curve_id  and tz.location_id=unpvt.location_id 
	left join #mv90_dst dst on dst.[date] = term_start and insert_delete = ''i'' and dst.source_commodity_id = unpvt.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
	where [Hours]<25  or ([Hours]=25 and dst.[hour] is not null);

	select  rowid=identity(int,1,1), t.as_of_date,' + cast(@curve_source_value_id as varchar) + ' curve_source_value_id, t.term_start prod_date
		, t.formula_id, granularity, t.contract_id, t.source_deal_detail_id,[Hours],is_dst,[period] [mins], volume
			,cast(null as int)	counterparty_id ,
			cast(null as int)	curve_id,
			cast(null as int) onPeakVolume,
			cast(null as int) invoice_Line_item_id,			
			cast(null as int) invoice_line_item_seq_id,
			cast(null as float)	price,			
			cast(null as int) volume_uom_id,
			cast(null as int) generator_id,
			cast(null as int) commodity_id,
			cast(null as int) meter_id,source_deal_header_id
		into '+@formula_table4+'	 
	from	#tx4  t
'
exec spa_print @sql
Exec(@sql)

if @@rowcount>0
begin
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	EXEC spa_calculate_formula	@curve_as_of_date, @formula_table4, @process_id4, @calc_result_table4 output, @calc_result_table_breakdown4 output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'


	SET @sql='INSERT INTO #formula_value
		select td.term_start, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id
		from #temp_deals td
			outer apply
			(
				select max(contract_id) contract_id,max(formula_id) formula_id
					,sum(formula_eval_value*volume)/nullif(sum(volume),0) formula_value
				from ' +  @calc_result_table4 + ' where source_deal_detail_id=td.source_deal_detail_id
				group by source_deal_detail_id
			) crt ' 

	exec spa_print @sql
	exec(@sql)


	SET @sql='INSERT INTO #formula_value_at_low
		(term_start, formula_id , contract_expiration_date, formula_value,contract_id, source_deal_detail_id ,hr ,period,is_dst )
		select td.term_start, crt.formula_id, NULL contract_expiration_date, 
			nullif(crt.formula_eval_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,td.source_deal_detail_id,[Hour] hr,mins period,crt.is_dst
		from #temp_deals td
		inner join ' +  @calc_result_table4 + ' crt on crt.source_deal_detail_id=td.source_deal_detail_id
			and td.save_mtm_at_calculation_granularity=''y''
		'
	exec spa_print @sql
	exec (@sql)

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Calculated weighted average 15 minute price on formula on contract side..*****************************'	
	END
end

/* Not found using this temp table
CREATE TABLE #formula_value_hour_min_wght_avg
(
	term_start datetime, formula_id INT, contract_expiration_date datetime, 
	formula_value float,contract_id INT, source_deal_detail_id INT,round_value INT,period int 
	,[1] float, [2] float, [3] float, [4] float,[5] float,[6] float,[7] float,[8] float,[9] float,[10] float
	,[11] float,[12] float,[13] float,[14] float,[15] float,[16] float,[17] float,[18] float,[19] float
	,[20] float,[21] float,[22] float,[23] float,[24] float,[25] float
 )


if object_id(@calc_result_table3) is not null or object_id(@calc_result_table4) is not null
begin

	SET @sql='INSERT INTO #formula_value_hour_min_wght_avg(
		term_start, formula_id, contract_expiration_date,contract_id, source_deal_detail_id,round_value,period 
		,[1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25] )
	select 	prod_date, formula_id, contract_expiration_date, contract_id, source_deal_detail_id,index_round_value,period 
		,[1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25]
	from ('+
	case when object_id(@calc_result_table3) is null then '' else '
			select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(d.eval_value, 0) formula_value, 
			ISNULL(crt.contract_id,-1) contract_id,
			crt.source_deal_detail_id,
			isnull(cfro.index_round_value,100) index_round_value,case when crt.is_dst=1 then 25 else crt.[hour] end [hour],0 [period]
			from ' +  @calc_result_table3 + ' crt 
			INNER JOIN '+@calc_result_table_breakdown3+' d ON crt.source_id = d.source_id
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = crt.source_deal_detail_id AND td.pricing = 1604
			left JOIN contract_formula_rounding_options cfro on cfro.contract_id = td.contract_id
				AND cfro.formula_type = ''CurveH'' AND cfro.curve_id = d.curve_id'
	end 
	+case when object_id(@calc_result_table4) is null then '' else 
			case when object_id(@calc_result_table3) is null then '' else ' union ' end+
	'			
		select crt.prod_date, crt.formula_id, NULL contract_expiration_date, 
			nullif(d.eval_value, 0) formula_value, ISNULL(crt.contract_id,-1) contract_id,crt.source_deal_detail_id,
			isnull(cfro.index_round_value,100) index_round_value,case when crt.is_dst=1 then 25 else crt.[hour] end [hour],crt.[mins] [period]
		from ' +  @calc_result_table4 + ' crt 
			INNER JOIN '+@calc_result_table_breakdown4+' d ON crt.source_id = d.source_id
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = crt.source_deal_detail_id AND td.pricing = 1605
			left JOIN contract_formula_rounding_options cfro on cfro.contract_id = td.contract_id
				AND cfro.formula_type = ''Curve15'' AND cfro.curve_id = d.curve_id
				'
	end +
	'
	) AS SourceTable
	Pivot 
	(
		sum(formula_value) for [hour]
		in ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25])
	) pr

	'
			
	exec spa_print @sql
	exec (@sql)

	set @sql='update #formula_value_hour_min_wght_avg set period=f1.period-case when vol.pricing=1605 then 15 else 0 end
	FROM '+@tmp_hourly_price_vol+' vol 
		LEFT JOIN #formula_value_hour_min_wght_avg f1 ON vol.source_deal_detail_id = f1.source_deal_detail_id AND vol.term_start = f1.term_start
	'
	
	exec spa_print @sql
	exec (@sql)

end
 */

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end



--------------------- end calculate at low granularity



If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************End of Calculating Hourly Contract Values*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Replicating Contract Values from Market Values*****************************'	
END



-- select * from #temp_leg_mtm 
-- select * from #lag_curves_values
-- select * from #temp_Deals
-- select * from #tmp_hourly_price_vol_c
-- select * from #calc_status
-- select * from #fees_breakdown

-- select * from report_hourly_position_fixed where source_deal_header_id = 9512 order by curve_id, term_start
-- select * from #temp_leg_mtm
-- select * from #tmp_hourly_price_vol
-- select * from #temp_Curves
-- select * from #formula_value
-- select * from #formula_value2



create table #source_deal_detail_hour (source_deal_detail_id int,term_date datetime,hr int,is_dst int,period int, price float)

if @calc_explain_type='p'
begin
	set @qry1g='
	 Select a.source_deal_header_id, a.deal_id, a.term_start, a.term_end,  a.leg,a.curve_id,hv.tou_id tou_id,
	 cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
			WHEN (a.product_id=4101) THEN
				CASE WHEN (a.calc_physical_financial_flag=''p'' and '''+ @calc_type+'''=''s'') THEN 0 ELSE 1 END *
				CASE when isnull(hv.curve_id,-1)=-1 then
					case when --a.pay_opposite = ''y'' and 
					a.buy_sell_flag=''s'' then -1 else 1 end *	a.deal_volume 
				ELSE
					CASE WHEN a.pricing in (1606,1607)  THEN hv.volume * ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) ELSE hv.market_value end
			END *	
				CASE when  a.curve_id is not NULL and a.fixed_float_leg=''t'' then 
					CASE when isnull(hv.curve_id,-1)=-1 then
						case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
						else  market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) end
					ELSE
						case when (a.Pricing not in (1601,1602)) then isnull(cfcf.price_fx_conv_factor, 1)  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)																				
					END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
				ELSE 0 END 
			ELSE
				case when (a.buy_sell_flag=''b'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
				(	
					case when(a.pricing  not in (1603,1604,1605)) then	
						ABS(hv.volume) * 
						round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1) * isnull(cucfP.curve_uom_conv_factor, 1)
					else
						ABS((ISNULL(case when a.pricing in (1606,1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
							* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1)  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1)+isnull(a.price_adder, 0))) 		
					end

				)	
		END  as	 numeric(38,18)) market_value,
		cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN
			(	--Contract Value		
				CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END *ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * isnull(fcucf.price_fx_conv_factor, 1) +
				(CASE WHEN isnull(,-1)=-1 THEN case when (a.pay_opposite = ''y'' and a.buy_sell_flag=''b'') then -1 else 1 end * a.deal_volume ELSE
					CASE WHEN a.pay_opposite =''n'' THEN hv.volume ELSE (hv.volume_c) END 
				END *  
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, pfcf.price_fx_conv_factor, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*isnull(pa1ucf.price_fx_conv_factor, 1)) + 
				(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*isnull(pa2ucf.price_fx_conv_factor, 1)) + 
				(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1))) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
				+ ((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
					* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1)  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
			)	
		 ELSE
			case when (a.buy_sell_flag=''s'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
			( -- contract value	
				ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * isnull(fcucf.price_fx_conv_factor, 1) +
				(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN a.deal_volume   ELSE
					ABS(hv.volume) 
				END * 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, pfcf.price_fx_conv_factor, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*isnull(pa1ucf.price_fx_conv_factor, 1)) + 
				(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*isnull(pa2ucf.price_fx_conv_factor, 1))) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
			)
		END  as numeric(38,18)) as contract_value,a.func_cur_id,'

   set  @qry2g='
		ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
			WHEN (a.product_id=4101) THEN
				(				
						--Contract Side		
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, pfcf.price_fx_conv_factor, 1)*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*isnull(pa1ucf.price_fx_conv_factor, 1)) + 
					(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*isnull(pa2ucf.price_fx_conv_factor, 1)) + 
					(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1)))	* isnull(cucfP.curve_uom_conv_factor, 1)			
					+ (ISNULL(hv.curve_value_c, 0)*case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1)  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))		
				)
			ELSE
				( -- contract value	
					ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * isnull(fcucf.price_fx_conv_factor, 1) +
					( 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, pfcf.price_fx_conv_factor, 1)*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*isnull(pa1ucf.price_fx_conv_factor, 1)) + 
					(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*isnull(pa2ucf.price_fx_conv_factor, 1))) * isnull(cucfP.curve_uom_conv_factor, 1)
					)
				) 				
			END as numeric(38,18))) contract_price,'
  
	set @qry3g='
		ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
			WHEN (a.product_id=4101) THEN
				(				
					( --Market Side
						CASE WHEN('''+ @calc_type+'''=''s'' AND a.calc_physical_financial_flag=''p'') THEN 0 ELSE 1 END * 
					CASE when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
							case when isnull(hv.curve_id,-1)=-1 then
								case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
								else  market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) end
							ELSE
								case when(a.buy_sell_flag=''s'') then -1 else 1 end *
								case when a.pricing in (1606,1607) then ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) else ISNULL(hv.curve_value,0) end * 
								case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*isnull(cfcf.price_fx_conv_factor, 1)  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)		
						END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
						ELSE 0 END 
					)
				)
			ELSE
				(	--Market Value		
					round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*ISNULL(formula_cur_factor, 1)*isnull(foucf.price_fx_conv_factor, 1) * isnull(cucfP.curve_uom_conv_factor, 1)
				)				
			END as numeric(38,18))) market_price,hv.volume_c volume,ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0) contract_value1'

	set @qry4g='
		into ' +@table_name+'
		from #temp_deals a 
			 left outer join '+ @tmp_hourly_price_vol +' hv on
			hv.source_deal_header_id=a.source_deal_header_id and a.curve_id=isnull(hv.curve_id,a.curve_id) and hv.deal_term_start=a.term_start and	hv.leg = a.leg 
		left join #source_deal_detail_hour fixp on fixp.source_deal_detail_id=a.source_deal_detail_id
		left join 	#temp_curves tc ON tc.source_curve_def_id = '+case when @calc_type='s' then 'isnull(a.settlement_curve_id, a.curve_id)' else 'a.curve_id' END +' AND 
				 tc.maturity_date = a.curve_type_maturity_date AND
				 tc.as_of_date = a.exp_curve_as_of_date LEFT OUTER JOIN	 
			#temp_curves tc_p ON tc_p.source_curve_def_id = a.proxy_curve_id AND 
				 tc_p.maturity_date = a.proxy_curve_maturity AND
			 tc_p.as_of_date = a.curve_as_of_date  LEFT OUTER JOIN
			#temp_curves tc_m ON tc_m.source_curve_def_id = a.monthly_index AND 
				 tc_m.maturity_date = a.monthly_index_maturity AND
			 tc_m.as_of_date = a.curve_as_of_date LEFT OUTER JOIN		 		 		 
			#temp_curves tc_p3 ON tc_p3.source_curve_def_id = a.proxy_curve_id3 AND 
				 tc_p3.maturity_date = a.proxy_curve_maturity3 AND
			 tc_p3.as_of_date = a.curve_as_of_date
		outer apply
		(
			select case when isnull(vol.bid_n_ask_price,''n'')=''n'' then  coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value)
				when isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''b'' then coalesce(tc.bid_value, tc_p.bid_value, tc_m.bid_value, tc_p3.bid_value)
				when isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''s'' then coalesce(tc.ask_value, tc_p.ask_value, tc_m.ask_value, tc_p3.ask_value)
				else coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value) end curve_value
		) market
		LEFT OUTER JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND
						atc.leg = a.leg  and a.source_deal_detail_id=atc.source_deal_detail_id '
						
	set	@qry5g='		
		LEFT OUTER JOIN #lag_curves_values lcv ON lcv.curve_id = a.curve_id AND --lcv.term_start = a.term_start AND 
							lcv.term_start = a.term_start AND lcv.term_end = a.term_end AND
							lcv.contract_id = isnull(a.contract_id, -1) AND lcv.func_cur_id = ISNULL(a.func_cur_id, -1)	
		LEFT OUTER JOIN #curve_uom_conv_factor cucf ON  
				cucf.deal_volume_uom_id = a.deal_volume_uom_id and cucf.curve_uom_id  = a.curve_uom_id
		LEFT OUTER JOIN #curve_uom_conv_factor cucfP ON  
				cucfP.deal_volume_uom_id = a.deal_volume_uom_id and cucfP.curve_uom_id  = a.price_uom_id
		LEFT OUTER JOIN #fx_curves pfcf ON pfcf.fx_currency_id = a.fixed_price_currency_id AND 
				pfcf.func_cur_id = a.func_cur_id AND pfcf.source_system_id = a.source_system_id AND
				pfcf.as_of_date= a.exp_curve_as_of_date AND pfcf.maturity_date= a.monthly_maturity
				and pfcf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves cfcf ON cfcf.fx_currency_id = a.curve_currency_id AND 
				cfcf.func_cur_id = a.func_cur_id AND cfcf.source_system_id = a.source_system_id AND
				cfcf.as_of_date= a.exp_curve_as_of_date AND cfcf.maturity_date= a.monthly_maturity
				and cfcf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves fcucf ON fcucf.fx_currency_id = a.fixed_cost_currency AND 
				fcucf.func_cur_id = a.func_cur_id AND fcucf.source_system_id = a.source_system_id AND
				fcucf.as_of_date= a.exp_curve_as_of_date AND fcucf.maturity_date= a.monthly_maturity
				and fcucf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves foucf ON foucf.fx_currency_id = a.formula_currency AND 
				foucf.func_cur_id = a.func_cur_id AND foucf.source_system_id = a.source_system_id AND
				foucf.as_of_date= a.exp_curve_as_of_date AND foucf.maturity_date= a.monthly_maturity
				and foucf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves pa1ucf ON pa1ucf.fx_currency_id = a.price_adder_currency AND 
				pa1ucf.func_cur_id = a.func_cur_id AND pa1ucf.source_system_id = a.source_system_id AND
				pa1ucf.as_of_date= a.exp_curve_as_of_date AND pa1ucf.maturity_date= a.monthly_maturity
				and pa1ucf.market_value_desc=a.fx_conversion_market
			'
				
	set @qry6g='
		LEFT OUTER JOIN #fx_curves pa2ucf ON pa2ucf.fx_currency_id = a.price_adder2_currency AND 
				pa2ucf.func_cur_id = a.func_cur_id AND pa2ucf.source_system_id = a.source_system_id AND
				pa2ucf.as_of_date= a.exp_curve_as_of_date AND pa2ucf.maturity_date= a.monthly_maturity
				and pa2ucf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #formula_value f ON a.source_deal_detail_id = f.source_deal_detail_id AND
				a.term_start = f.term_start
		LEFT OUTER JOIN #lag_curves_values_fx lfx ON lfx.fx_currency_id = a.fixed_price_currency_id AND 
				lfx.func_cur_id = a.func_cur_id AND lfx.source_system_id = a.source_system_id AND
				lfx.as_of_date= a.exp_curve_as_of_date AND --lfx.maturity_date= a.monthly_maturity AND
				lfx.term_start = a.term_start AND lfx.term_end = a.term_end AND
				(a.pricing=1600 OR a.pricing=1601 OR a.pricing=1602 OR a.pricing=1607)
		LEFT OUTER JOIN contract_formula_rounding_options cr on cr.contract_id = a.contract_id and cr.curve_id = a.curve_id	and
				a.pricing <> 1601 and a.pricing <> 1602	
		LEFT OUTER JOIN contract_formula_rounding_options pr on pr.contract_id = a.contract_id and pr.curve_id = a.fixed_price_currency_id		
		LEFT OUTER JOIN contract_formula_rounding cfr on cfr.contract_id = a.contract_id AND cfr.formula_currency = a.original_formula_currency
		where ISNULL(a.option_flag, ''n'') = ''n'' AND a.internal_deal_type_value_id <> 6 AND a.internal_deal_type_value_id <> 7 
			  AND (a.hourly_position_breakdown not in(982,987,989,997) OR (a.hourly_position_breakdown in(982,987,989,997) AND hv.curve_id IS NOT NULL)
				or  a.source_deal_header_id<0 )
			 '

	EXEC spa_print   @qry1g
	EXEC spa_print   @qry2g
	EXEC spa_print   @qry3g
	EXEC spa_print   @qry4g
	EXEC spa_print   @qry5g
	EXEC spa_print   @qry6g

	exec( 'SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+ @qry1g+@qry2g+@qry3g+@qry4g+@qry5g+@qry6g)
	
	GOTO CleanUp_Process_Tables
end

 --select * from source_deal_detail_hour


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

 --  select * from #fx_conversion_values


 -- select * from  #fx_curves

update #temp_deals set curve_currency_id=isnull(curve_currency_id,fixed_price_currency_id)
	,fixed_cost_currency=isnull(fixed_cost_currency,fixed_price_currency_id)
	,formula_currency=isnull(formula_currency,fixed_price_currency_id)
	,price_adder_currency=isnull(price_adder_currency,fixed_price_currency_id)
	,price_adder2_currency=isnull(price_adder2_currency,fixed_price_currency_id)


select distinct a.source_deal_detail_id,a.func_cur_id,
	ISNULL(coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency), 1) deal_cur_id
	,a.settlement_currency inv_cur_id
	,ISNULL(pfcf_deal.price_fx_conv_factor, 1) pfcf_price_fx_conv_factor_deal
	,ISNULL(fcucf_deal.price_fx_conv_factor, 1) fcucf_price_fx_conv_factor_deal
	,ISNULL(foucf_deal.price_fx_conv_factor, 1) foucf_price_fx_conv_factor_deal
	,ISNULL(pa1ucf_deal.price_fx_conv_factor, 1) pa1ucf_price_fx_conv_factor_deal
	,ISNULL(pa2ucf_deal.price_fx_conv_factor, 1) pa2ucf_price_fx_conv_factor_deal
	,ISNULL(cfcf_deal.price_fx_conv_factor, 1) cfcf_price_fx_conv_factor_deal

	--,fx_market_deal.price_fx_conv_factor fx_market_deal
	--,cfcf_deal.price_fx_conv_factor fx_market_sub

/* 
select * from #fx_curves where fx_currency_id=1109  and func_cur_id=1 order by maturity_date
	
	 select fixed_price_currency_id,settlement_curve_currency_id,curve_currency_id , curve_currency_id,fixed_cost_currency,formula_currency,price_adder_currency,price_adder2_currency,* from #temp_deals
*/
into #fx_conversion_values --  select * from #fx_conversion_values
--select a.settlement_date,a.holiday_calendar_id,a.settlement_days 
--select a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency
from #temp_deals a 
outer apply
(
	select  1 price_fx_conv_factor

) pfcf_deal
outer apply
(
	select  
		case when coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency)=case when @calc_type='s' then coalesce(a.settlement_curve_currency_id,a.curve_currency_id) else a.curve_currency_id END 
		then 1 else round(avg(price_fx_conv_factor),a.fx_rounding) end price_fx_conv_factor from #fx_curves  
	where fx_currency_id =case when @calc_type='s' then coalesce(a.settlement_curve_currency_id,a.curve_currency_id) else a.curve_currency_id END 
		AND func_cur_id = coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency)
		AND source_system_id = a.source_system_id 
		AND as_of_date>= case when @calc_type='s' then @term_start else @curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else @curve_as_of_date end 
		AND maturity_date between a.term_start and a.term_end
		and market_value_desc=a.fx_conversion_market
		and isnull(forward_settle, case when @calc_type='s' then 's' else 'f' end)= case when @calc_type='s' then 's' else 'f' end
) cfcf_deal
outer apply
(
	select  case when a.fixed_cost_currency= coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency)
	then 1 else round(avg(price_fx_conv_factor),a.fx_rounding) end price_fx_conv_factor from #fx_curves  
	where fx_currency_id =a.fixed_cost_currency AND func_cur_id = coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency)
		AND source_system_id = a.source_system_id 
		AND as_of_date>= case when @calc_type='s' then @term_start else @curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else @curve_as_of_date end 
		AND maturity_date between a.term_start and a.term_end
		and market_value_desc=a.fx_conversion_market
		and isnull(forward_settle, case when @calc_type='s' then 's' else 'f' end)= case when @calc_type='s' then 's' else 'f' end

) fcucf_deal
outer apply
(
	select 
	case when a.formula_currency=coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency)
	then 1 else round(avg(price_fx_conv_factor),a.fx_rounding) end price_fx_conv_factor from #fx_curves  
	where fx_currency_id = a.formula_currency  AND func_cur_id =coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency)
		AND source_system_id = a.source_system_id -- AND as_of_date= a.exp_curve_as_of_date 
		AND as_of_date>= case when @calc_type='s' then @term_start else @curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else @curve_as_of_date end 
		AND maturity_date between a.term_start and a.term_end
		and market_value_desc=a.fx_conversion_market
		and isnull(forward_settle, case when @calc_type='s' then 's' else 'f' end)= case when @calc_type='s' then 's' else 'f' end
) foucf_deal
outer apply
(
	select case when a.price_adder_currency= coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency)
	then 1 else round(avg(price_fx_conv_factor),a.fx_rounding) end price_fx_conv_factor from #fx_curves 
	where fx_currency_id = a.price_adder_currency AND func_cur_id = coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency)
		AND source_system_id = a.source_system_id -- AND as_of_date= a.exp_curve_as_of_date 
		AND as_of_date>= case when @calc_type='s' then @term_start else @curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else @curve_as_of_date end 
		AND maturity_date between a.term_start and a.term_end
		and market_value_desc=a.fx_conversion_market
		and isnull(forward_settle, case when @calc_type='s' then 's' else 'f' end)= case when @calc_type='s' then 's' else 'f' end
) pa1ucf_deal
outer apply
(
	select case when a.price_adder2_currency = coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency) 
	then 1 else round(avg(price_fx_conv_factor),a.fx_rounding) end price_fx_conv_factor from #fx_curves pfcf_deal 
	where fx_currency_id = a.price_adder2_currency AND func_cur_id = coalesce(a.fixed_price_currency_id ,a.curve_currency_id,a.formula_currency)
		AND source_system_id = a.source_system_id -- AND as_of_date= a.exp_curve_as_of_date 
		AND as_of_date>= case when @calc_type='s' then @term_start else @curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else @curve_as_of_date end 
		AND maturity_date between a.term_start and a.term_end and market_value_desc=a.fx_conversion_market
		and isnull(forward_settle, case when @calc_type='s' then 's' else 'f' end)= case when @calc_type='s' then 's' else 'f' end
) pa2ucf_deal

--Changed option flag to 'n' to process the option deal linearly
UPDATE #temp_deals SET option_flag = 'n' WHERE internal_deal_type_value_id IN (103) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y'


IF exists(select 1 from #temp_deals where option_flag = 'n' or (internal_deal_type_value_id IN (103) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y'))
BEGIN

	set @mtm_value_01='
		Select 	a.source_deal_header_id, a.deal_id, a.term_start, a.term_end, a.curve_id,'

	set @mtm_value_04='
			cast(0.00 as float) leg_mtm,
			cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
			WHEN (a.product_id=4101) THEN
				(								
					( --Market Value
						CASE WHEN  '''+ @calc_type+'''=''m'' or ('''+ @calc_type+'''=''s'' and  a.calc_physical_financial_flag =''f'') THEN 1 ELSE 0 END * 
						case when isnull(hv.curve_id,-1)=-1 then
							case when a.buy_sell_flag=''s'' then -1 else 1 end *					
							isnull(a.deal_volume,0)   --total_volume already has multiplier
						ELSE
							case when a.pricing in (1606,1607) then hv.volume *hv.avg_curve_value else hv.market_value end -- market value is already negative if sell deal
						END *	
						case when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
							case when isnull(hv.curve_id,-1)=-1 then
								case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
								else  market.curve_value * isnull(cucf.curve_uom_conv_factor,1)* b.cfcf_price_fx_conv_factor_deal end
							ELSE
								case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor,1)							
							END * case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
						else 0 end 
					) + 
					(	--Contract Value		
						CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END *
					   ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
					(
						CASE WHEN isnull(hv.curve_id,-1)=-1 THEN 
							case when (a.pay_opposite = ''y'' and a.buy_sell_flag=''b'') then -1 else 1 end * isnull(a.deal_volume,0) 
						ELSE
							CASE WHEN a.pay_opposite =''n'' THEN hv.volume ELSE (hv.volume_c) END 
						END * 	 
						((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal)*isnull(a.price_multiplier, 1)) + 
						(isnull(a.price_adder, 0)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
						(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
						(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
					)
  				   + (( 
  				   		ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
  				   		* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
					))
			ELSE
				case when (a.buy_sell_flag=''s'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
				( -- contract value	
					ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
					(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN isnull(a.deal_volume,0)  ELSE ABS(hv.volume) END * 	
						((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal)*isnull(a.price_multiplier, 1)) + 
						(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
						(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
					)
				) 	+
				case when (a.buy_sell_flag=''b'') then 1 else -1 end *					
				(	
					case when(a.pricing not in (1603,1604,1605)) then	
						ABS(hv.volume) * 
						round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1)
					else
						ABS((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0) 
						* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
					end
				)				
			END as numeric(38,18)) as leg_mtm_deal,cast(0.00 as float) leg_mtm_inv,
			'
			
	set @mtm_value_05='
		cast(0.00 as float) leg_set,
		round(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN			
			(	
				case when a.calc_physical_financial_flag =''f'' THEN  
				( --Market Value
					case when isnull(hv.curve_id,-1)=-1 then
						case when --a.pay_opposite = ''y'' and 
							a.buy_sell_flag=''s'' then -1 else 1 end *					
						isnull(a.deal_volume,0)   --total_volume already has multiplier
					ELSE
						CASE WHEN a.pricing in (1606,1607) THEN hv.volume * ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) ELSE  -- and @calc_type=''s''
								hv.market_value 
						END
					END *	
					case when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
						case when isnull(hv.curve_id,-1)=-1 then
							case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
							else  market.curve_value * isnull(cucf.curve_uom_conv_factor,1) * b.cfcf_price_fx_conv_factor_deal end
						ELSE
							case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor,1)																			
						END 	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
					else 0 end 
				)  ELSE 0 END ---end
				+		
				(	--Contract Value		
					CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END
						* ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
					(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN case when (a.pay_opposite = ''y'' and a.buy_sell_flag=''b'') then -1 else 1 end *	a.deal_volume ELSE
						CASE WHEN a.pay_opposite =''n'' THEN hv.volume ELSE (hv.volume_c) END 
					END * 	
					((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
					(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
					(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
					)
  				+ ((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
  					* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
				))) 
		ELSE
			case when (a.buy_sell_flag=''s'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
			( -- contract value	
				ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
				(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN isnull(a.deal_volume,0)  ELSE
					ABS(hv.volume) 
				END * 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
			) +
			case when (a.buy_sell_flag=''b'') then 1 else -1 end *					
			(	case when(a.pricing not in (1603,1604,1605)) then	
					ABS(hv.volume) * 
					round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1)
				else
					ABS((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
						* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
				end
			)				
		END as numeric(38,18)), ISNULL(r.rounding, 100)) as leg_set_deal,cast(0.00 as float) leg_set_inv,
			'
		
	set @mtm_value_08='
		case when (a.internal_deal_type_value_id <> 8) then 0 
		else 
			a.deal_volume * 
			case when a.buy_sell_flag=''s'' then -1 else 1 end *					
			(	
				case when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' THEN
					isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal 
					* case when isnull(hv.curve_id,-1)=-1 then market.curve_value ELSE 1 END
				else 0 end +
				case when (a.pay_opposite = ''y'') then 	-1 else 1 end *		
					((isnull(a.spot_price, 0) * coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
					(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
					(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
			) 
		end as extrinsic_value_deal, NULL accrued_interest,
		CASE when isnull(hv.curve_id,-1)=-1 OR pd.source_deal_detail_id IS NOT NULL THEN 
			isnull(a.deal_volume,0) * case when a.buy_sell_flag=''s'' then -1 else 1 end 
		ELSE hv.volume END  volume, a.leg, 
		ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN
			(				
				( --Market Side
					case when '''+ @calc_type+'''=''m'' or ('''+ @calc_type+'''=''s'' and  a.calc_physical_financial_flag =''f'') THEN 1 ELSE 0 END * 
					CASE when isnull(hv.curve_id,-1)=-1 then
						case when a.buy_sell_flag=''s'' then -1 else 1 end 					
					ELSE 1 END *	
					CASE when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
						case when isnull(hv.curve_id,-1)=-1 then
							case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
							else  market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal end
						ELSE
							case when(a.buy_sell_flag=''s'') then -1 else 1 end *
							case when a.Pricing in (1606,1607) then ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) else ISNULL(hv.curve_value,0) end * 
							case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)		
						END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
					ELSE 0 END 
				)
				+
				CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END *	--Contract Side		
				(((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
				(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal))	* isnull(cucfP.curve_uom_conv_factor, 1)			
				+ (ISNULL(hv.curve_value_c, 0)*case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))		
			))'
	
			
	set @mtm_value_09='
		ELSE
			case when (a.buy_sell_flag=''s'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
			( -- contract value	
				ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
				( 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
			) +
			case when (a.buy_sell_flag=''b'') then 1 else -1 end *					
			(	--Market Value		
				round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1) * isnull(cucfP.curve_uom_conv_factor, 1)
			)
		END as numeric(38,18))) price_deal,
		NULL discount_rate, NULL no_days_left, NULL days_year, isnull(a.discount_factor, 1) discount_factor,
		case when (a.settled = 1) then ''y'' else ''n'' end expired_term,
		a.exp_curve_as_of_date curve_as_of_date,
		a.internal_deal_type_value_id,
		a.internal_deal_subtype_value_id,
		CASE WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL ELSE isnull(cucf.curve_uom_conv_factor, 1) END curve_uom_conv_factor,
		CASE WHEN (a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE b.cfcf_price_fx_conv_factor_deal END curve_fx_conv_factor_deal,
		CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND b.pfcf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1) END price_fx_conv_factor_deal,
		CASE WHEN (a.curve_id IS NULL) THEN 0 ELSE 
			case when isnull(hv.curve_id,-1)=-1 then
				coalesce(lcv.lag_curve_value, atc.avg_curve_value,market.curve_value) * isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal			
			ELSE
				case when (( '''+ @calc_type+'''<>''s'' OR a.calc_physical_financial_flag=''f'') AND hv.volume <> 0 AND isnull(hv.market_value,0) = 0 and hv.curve_value is null) then NULL
					 when a.Pricing in (1606,1607) then ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) else hv.curve_value end *
				case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)
			END	
		END curve_value_deal,
		 CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END *
		ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal fixed_cost_deal,
		coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1) * coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1) * isnull(cucfP.curve_uom_conv_factor, 1) fixed_price_deal,
		round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1) *isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1) + 
			(ISNULL(hv.curve_value_c, 0)*case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1)) formula_value_deal,
		isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal price_adder_deal,
		isnull(a.price_multiplier, 1) price_multiplier,
		NULL strike_price,
		a.buy_sell_flag, a.leg_physical_financial_flag,
		CASE WHEN (a.fixed_cost_currency IS NOT NULL AND a.func_cur_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE b.fcucf_price_fx_conv_factor_deal END fixed_cost_fx_conv_factor_deal,
		CASE WHEN (a.formula_currency IS NOT NULL AND a.func_cur_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE b.foucf_price_fx_conv_factor_deal END formula_fx_conv_factor_deal,
		CASE WHEN (a.price_adder_currency IS NOT NULL AND a.func_cur_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE b.pa1ucf_price_fx_conv_factor_deal END price_adder1_fx_conv_factor_deal,
		CASE WHEN (a.price_adder2_currency IS NOT NULL AND a.func_cur_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE b.pa2ucf_price_fx_conv_factor_deal END price_adder2_fx_conv_factor_deal,
		isnull(a.volume_multiplier, 1) volume_multiplier,isnull(a.volume_multiplier2, 1) volume_multiplier2,
		isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal price_adder2_deal,a.pay_opposite,
		'
		
	set @mtm_value_10='
	case when a.exception_handle=1 then
		CASE WHEN (( '''+ @calc_type+'''<>''s'' OR a.calc_physical_financial_flag=''f'') AND a.product_id=4101 AND ISNULL(hv.volume, a.deal_volume) <> 0 AND a.curve_id IS NOT NULL AND (coalesce(hv.curve_value,market.curve_value, NULL) IS NULL OR
			(hv.volume IS NOT NULL AND isnull(hv.market_value,0) = 0 '+case when @calc_type='s' then ' AND hv.curve_value<>0 ' else ' AND hv.curve_value is null ' end + ' ))) THEN NULL 
				WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL
				WHEN (a.price_uom_id IS NOT NULL AND a.price_uom_id <> a.deal_volume_uom_id AND cucfP.curve_uom_conv_factor IS NULL) THEN NULL
		WHEN (a.pricing NOT IN (1600, 1601, 1602,1607) AND ((a.calc_physical_financial_flag=''p'' and  '''+ @calc_type+'''<>''s'') OR (a.calc_physical_financial_flag=''f'' AND a.product_id=4101) OR
						 (a.calc_physical_financial_flag=''f'' AND a.product_id=4100 AND a.formula_id IS NULL)) AND
			a.curve_currency_id IS NOT NULL AND a.fixed_price_currency_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL)  THEN NULL
		WHEN (a.fixed_price_currency_id IS NOT NULL AND a.fixed_price_currency_id <> a.fixed_price_currency_id AND ISNULL(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal) IS NULL) THEN NULL
		WHEN (a.fixed_cost_currency IS NOT NULL AND a.fixed_price_currency_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN NULL
		WHEN (a.formula_currency IS NOT NULL AND a.fixed_price_currency_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN NULL
		WHEN (a.price_adder_currency IS NOT NULL AND a.fixed_price_currency_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN NULL
		WHEN (a.price_adder2_currency IS NOT NULL AND a.fixed_price_currency_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN NULL
				WHEN (a.formula_id IS NOT NULL AND a.formula_curve_id IS NULL AND (f.formula_value IS NULL AND hv.contract_value IS NULL)) THEN NULL
	--	WHEN a.formula_curve_id IS NOT NULL AND coalesce(atc.avg_curve_value, hv.avg_curve_value_c,hv.contract_value,hv.market_value) is null and '''+@calc_type+'''=''s'' THEN NULL  
		ELSE 0 END 
	else 0 end error_deal,
	case when a.exception_handle=1 then
		CASE	WHEN (( '''+ @calc_type+'''<>''s'' OR a.calc_physical_financial_flag=''f'') AND a.product_id=4101 AND ISNULL(hv.volume, a.deal_volume) <> 0 AND a.curve_id IS NOT NULL AND 
			(coalesce(hv.curve_value, market.curve_value, NULL) IS NULL OR (hv.volume IS NOT NULL AND hv.market_value = 0))) THEN '' Price Curve'' ELSE '''' END +
		CASE	WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN '', UOM conversion'' ELSE '''' END +
		CASE	WHEN (a.price_uom_id IS NOT NULL AND a.price_uom_id <> a.deal_volume_uom_id AND cucfP.curve_uom_conv_factor IS NULL) THEN '', Price UOM conversion'' ELSE '''' END +
		CASE	WHEN (a.pricing NOT IN (1600, 1601, 1602,1607) AND 
			((a.calc_physical_financial_flag=''p'' and '''+ @calc_type+'''<>''s'') OR (a.calc_physical_financial_flag=''f'' AND a.product_id=4101) OR (a.calc_physical_financial_flag=''f'' AND a.product_id=4100 AND a.formula_id IS NULL)) AND 
			a.curve_currency_id IS NOT NULL AND a.fixed_price_currency_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL) 	THEN '', Price FX conversion'' ELSE '''' END +
		CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.fixed_price_currency_id <> a.fixed_price_currency_id AND ISNULL(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal) IS NULL) THEN '', Fixed Price FX conversion'' ELSE '''' END +CASE	WHEN (a.fixed_cost_currency IS NOT NULL AND a.fixed_price_currency_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN '', Fixed Cost FX conversion'' ELSE '''' END +
		CASE WHEN (a.formula_currency IS NOT NULL AND a.fixed_price_currency_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN '', Formula FX conversion'' ELSE '''' END +
		CASE WHEN (a.price_adder_currency IS NOT NULL AND a.fixed_price_currency_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN '', PriceAdder FX conversion'' ELSE '''' END +
		CASE WHEN (a.price_adder2_currency IS NOT NULL AND a.fixed_price_currency_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN '', PriceAdder2 FX conversion'' ELSE '''' END +
		CASE	WHEN (a.formula_id IS NOT NULL AND a.formula_curve_id IS NULL AND (f.formula_value IS NULL and hv.contract_value IS NULL)) THEN '', Formula Value'' ELSE '''' END  
--		+CASE WHEN a.formula_curve_id IS NOT NULL AND coalesce(atc.avg_curve_value, hv.avg_curve_value_c,hv.contract_value) is null and '''+@calc_type+'''=''s'' THEN '' Price Curve'' ELSE '''' END
	else '''' end	  error_deal_reason,
		'
	set @mtm_value_11='
		a.curve_uom_id, a.deal_volume_uom_id, a.fixed_price_currency_id, a.price_adder_currency, a.price_adder2_currency, a.func_cur_id, a.formula_currency, a.fixed_cost_currency '
		
	set @mtm_value_13='
		,cast(0.00 as float) market_value,
		cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
			WHEN (a.product_id=4101) THEN
				case when '''+ @calc_type+'''=''m'' or ('''+ @calc_type+'''=''s'' and  a.calc_physical_financial_flag =''f'') THEN 1 ELSE 0 END *
				CASE when isnull(hv.curve_id,-1)=-1 then
					case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume 
				ELSE
					CASE WHEN a.pricing in (1606,1607)  then hv.volume * ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) ELSE hv.market_value end					
				END *	
				CASE when  a.curve_id is not NULL and a.fixed_float_leg=''t'' then 
					CASE when isnull(hv.curve_id,-1)=-1 then
						case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
						else  market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal end
					ELSE
						case when (a.Pricing not in (1601,1602)) then b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)																		END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
				ELSE 0 END 
			ELSE
				case when (a.buy_sell_flag=''b'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
				(	case when(a.pricing  not in (1603,1604,1605)) then	ABS(hv.volume) * 
						round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1)
					else
						ABS((ISNULL(case when a.pricing in (1606,1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
							* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1)+isnull(a.price_adder, 0))) 		
					end
				)	
		END  as	 numeric(38,18)) market_value_deal,cast(0.00 as float) market_value_inv,cast(0.00 as float) contract_value,
		cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN
			(	--Contract Value		
				CASE WHEN a.buy_sell_flag=''b'' THEN 1 ELSE -1 END * CASE WHEN a.pay_opposite = ''y'' THEN -1 ELSE 1 END *ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
				(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN case when (a.pay_opposite = ''y'' and a.buy_sell_flag=''b'') then -1 else 1 end * isnull(a.deal_volume,0) ELSE
					CASE WHEN a.pay_opposite =''n'' THEN hv.volume ELSE (hv.volume_c) END 
				END *  
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
				(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
				+ ((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
					* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 		
			)	
		 ELSE
			case when (a.buy_sell_flag=''s'') then -1 else 1 end *	case when (a.pay_opposite=''y'') then -1 else 1 end *				
			( -- contract value	
				ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
				(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN isnull(a.deal_volume,0)   ELSE ABS(hv.volume) END * 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
					(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
			)
		END  as numeric(38,18)) as contract_value_deal,cast(0.00 as float) contract_value_inv,cast(0.00 as float) simple_formula_curve_value,
		cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN a.product_id=4101 THEN
				((ISNULL(case when a.pricing in (1607) then hv.volume_c *hv.avg_curve_value_c else hv.contract_value end, 0)
					* case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))) 	
		 ELSE 
			 ( -- contract value	
					(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN a.deal_volume   ELSE ABS(hv.volume) END * 	
					((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) 
					) * isnull(cucfP.curve_uom_conv_factor, 1))
			) 
		END  as numeric(38,18)) simple_formula_curve_value_deal,cast(0 as float) simple_formula_curve_value_inv, --this is contrat value without adder and fixed cost for fees breakdown (simple curve vale)	
		cast(0 as float) formula_conv_factor,ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1) formula_conv_factor_deal
		,cast(0.00 as float) formula_conv_factor_inv,
	'
		
	set @mtm_value_15='
		cfr.formula_rounding,
		a.formula_id,
		a.contract_id,
		a.product_id,
		a.source_deal_detail_id,
		a.formula_curve_id,
		hv.allocation_volume,
		ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN
			(				
					--Contract Side		
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
				(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal))	* isnull(cucfP.curve_uom_conv_factor, 1)			
				+ (ISNULL(hv.curve_value_c, 0)*case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))		
			)
		ELSE
			( -- contract value	
				ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
				( 	
				((coalesce(hv.fixed_price,fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
				(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
				(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
				)
		) END as numeric(38,18))) contract_price_deal,
		ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
		WHEN (a.product_id=4101) THEN
			(				
				( --Market Side
					case when '''+ @calc_type+'''=''m'' or ('''+ @calc_type+'''=''s'' and  a.calc_physical_financial_flag =''f'') THEN 1 ELSE 0 END * 
					CASE when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
						case when isnull(hv.curve_id,-1)=-1 then
							case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
							else market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal end
						ELSE
							case when(a.buy_sell_flag=''s'') then -1 else 1 end *
							case when a.Pricing in (1606,1607) then ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) else ISNULL(hv.curve_value,0) end * 
							case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)		
						END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
					ELSE 0 END 
				)
			)
		ELSE
			(	--Market Value		
				round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1)
			)				
		END as numeric(38,18))) market_price_deal,a.[deal_volume]
	,b.deal_cur_id, b.inv_cur_id
	,cast(0 as float) price,cast(0 as float) extrinsic_value,cast(0 as float) contract_price,cast(0 as float) market_price 
	,cast(0 as float) price_inv,cast(0 as float) extrinsic_value_inv,cast(0 as float) contract_price_inv,cast(0 as float) market_price_inv
	,cast(0 as float) price_adder2_fx_conv_factor,cast(0 as float) price_adder1_fx_conv_factor 
	,cast(0 as float) formula_fx_conv_factor,cast(0 as float) fixed_cost_fx_conv_factor 
	,cast(0 as float) curve_fx_conv_factor,cast(0 as float) price_fx_conv_factor 
	,cast(0 as float) price_adder2_fx_conv_factor_inv ,cast(0 as float) price_adder1_fx_conv_factor_inv 
	,cast(0 as float) formula_fx_conv_factor_inv ,cast(0 as float) fixed_cost_fx_conv_factor_inv 
	,cast(0 as float) curve_fx_conv_factor_inv ,cast(0 as float) price_fx_conv_factor_inv 
	,cast(0 as float) formula_value,cast(0 as float) price_adder
	,cast(0 as float) price_adder2,cast(0 as float) fixed_cost
	,cast(0 as float) fixed_price,cast(0 as float) curve_value
	,cast(0 as float) formula_value_inv,cast(0 as float) price_adder_inv
	,cast(0 as float) price_adder2_inv,cast(0 as float) fixed_cost_inv
	,cast(0 as float) fixed_price_inv,cast(0 as float) curve_value_inv
	,null must_run_volume,null must_run_market_value
	,null must_run_contract_value,null dispatch_volume
	,null dispatch_market_value,null dispatch_contract_value
'

set @sql_col = ',hv.tou_id,a.calc_mtm_at_tou_level,-1 shipment_id,-1 ticket_detail_id,a.state_value_id, a.tier_value_id, hv.no_hrs, a.match_info_id '
set @mtm_value_16='
	  from #temp_deals a 
		left outer join '+ @tmp_hourly_price_vol +' hv on
			hv.source_deal_header_id=a.source_deal_header_id and hv.curve_id=ISNULL(a.curve_id, -1) and hv.deal_term_start=a.term_start and	hv.leg = a.leg
			and isnull(hv.state_value_id, -1) = isnull(a.state_value_id, -1) 
			and isnull(hv.tier_value_id, -1) = isnull(a.tier_value_id, -1)
			and isnull(hv.match_info_id, -1) = isnull(a.match_info_id, -1)
		left join #source_deal_detail_hour fixp on fixp.source_deal_detail_id=a.source_deal_detail_id
		left join #product_detail pd ON pd.source_deal_detail_id = a.source_deal_detail_id
			and pd.state_value_id = a.state_value_id
			and pd.tier_value_id = a.tier_value_id
	'

set @mtm_value_17='
	left join 	#temp_curves tc on tc.source_curve_def_id = '+case when @calc_type='s' then 'isnull(a.settlement_curve_id, a.curve_id)' else 'a.curve_id' END +' AND 
		tc.maturity_date = a.curve_type_maturity_date AND tc.as_of_date = a.exp_curve_as_of_date 
	LEFT OUTER JOIN	 #temp_curves tc_p ON tc_p.source_curve_def_id = a.proxy_curve_id AND 
		tc_p.maturity_date = a.proxy_curve_maturity AND tc_p.as_of_date =a.curve_as_of_date  
	LEFT OUTER JOIN #temp_curves tc_m ON tc_m.source_curve_def_id = a.monthly_index AND 
		tc_m.maturity_date = a.monthly_index_maturity AND tc_m.as_of_date =a.curve_as_of_date 
	LEFT OUTER JOIN	#temp_curves tc_p3 ON tc_p3.source_curve_def_id = a.proxy_curve_id3 AND 
		tc_p3.maturity_date = a.proxy_curve_maturity3 AND tc_p3.as_of_date = a.curve_as_of_date 
	outer apply
	(
		select case when isnull(a.bid_n_ask_price,''n'')=''n'' then  coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value)
			when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''b'' then coalesce(tc.bid_value, tc_p.bid_value, tc_m.bid_value, tc_p3.bid_value)
			when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''s'' then coalesce(tc.ask_value, tc_p.ask_value, tc_m.ask_value, tc_p3.ask_value)
			else coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value) end curve_value
	) market
	LEFT OUTER JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND
			atc.leg = a.leg  and a.source_deal_detail_id=atc.source_deal_detail_id 
	LEFT OUTER JOIN #lag_curves_values lcv ON lcv.curve_id = a.curve_id AND --lcv.term_start = a.term_start AND 
			lcv.term_start = a.term_start AND lcv.term_end = a.term_end AND
			lcv.contract_id = isnull(a.contract_id, -1) AND lcv.func_cur_id = ISNULL(a.func_cur_id, -1)	
	LEFT OUTER JOIN #curve_uom_conv_factor cucf ON  
			cucf.deal_volume_uom_id = a.deal_volume_uom_id and cucf.curve_uom_id  = a.curve_uom_id
	LEFT OUTER JOIN #curve_uom_conv_factor cucfP ON  
			cucfP.deal_volume_uom_id = a.deal_volume_uom_id and cucfP.curve_uom_id  = a.price_uom_id
	LEFT OUTER JOIN #formula_value f ON a.source_deal_detail_id = f.source_deal_detail_id AND
			a.term_start = f.term_start
	LEFT OUTER JOIN #lag_curves_values_fx lfx ON lfx.fx_currency_id = a.fixed_price_currency_id AND 
			lfx.func_cur_id = a.func_cur_id AND lfx.source_system_id = a.source_system_id AND
			lfx.as_of_date= a.exp_curve_as_of_date AND --lfx.maturity_date= a.monthly_maturity AND
			lfx.term_start = a.term_start AND lfx.term_end = a.term_end AND
			(a.pricing=1600 OR a.pricing=1601 OR a.pricing=1602 OR a.pricing=1607)
	LEFT OUTER JOIN contract_formula_rounding_options cr on cr.contract_id = a.contract_id and cr.curve_id = a.curve_id	and
			a.pricing <> 1601 and a.pricing <> 1602	
	LEFT OUTER JOIN contract_formula_rounding_options pr on pr.contract_id = a.contract_id and pr.curve_id = a.fixed_price_currency_id		
	LEFT OUTER JOIN contract_formula_rounding cfr on cfr.contract_id = a.contract_id AND cfr.formula_currency = a.original_formula_currency
	LEFT OUTER JOIN vol_value_rounding r ON r.contract_id = a.contract_id AND r.item_type = ''c'' AND r.field_id = -1
	left join #fx_conversion_values b on b.source_deal_detail_id=a.source_deal_detail_id
	'
set @mtm_value_18=' 
	where (ISNULL(a.option_flag, ''n'') = ''n'' or (a.internal_deal_type_value_id IN (103) AND a.internal_deal_subtype_value_id = 102 AND '''+@process_linear_options_delta+''' = ''y'')) AND a.internal_deal_type_value_id <> 6 AND a.internal_deal_type_value_id <> 7 
		AND (a.hourly_position_breakdown not in(982,987,989,997) OR (a.hourly_position_breakdown in(982,987,989,997) AND hv.curve_id IS NOT NULL)
		or  a.source_deal_header_id<0 )
	'  + ' AND '''+@cpt_type+'''<>''b'''
	
	EXEC spa_print  '	INSERT INTO  #temp_leg_mtm'
	EXEC spa_print  @mtm_value_01
	EXEC spa_print  @mtm_value_04
	EXEC spa_print  @mtm_value_05
	EXEC spa_print  @mtm_value_08
	EXEC spa_print  @mtm_value_09
	EXEC spa_print  @mtm_value_10
	EXEC spa_print  @mtm_value_11
	EXEC spa_print  @mtm_value_13
	EXEC spa_print  @mtm_value_15
	EXEC spa_print  @sql_col
	EXEC spa_print  @mtm_value_16
	EXEC spa_print  @mtm_value_17
	EXEC spa_print  @mtm_value_18

	exec('INSERT INTO #temp_leg_mtm '+ @mtm_value_01+@mtm_value_04+@mtm_value_05
		+@mtm_value_08+@mtm_value_09+@mtm_value_10+@mtm_value_11
		+@mtm_value_13+@mtm_value_15+@sql_col+@mtm_value_16+@mtm_value_17+@mtm_value_18
	)

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************#temp_leg_mtm: First calculate non-options deals and Non IR Swaps and Loan type instruments*****************************'	
	END
END

-- select fixed_price_deal,* from #temp_leg_mtm
--   select * from adiha_process.dbo.tmp_hourly_price_vol_c_farrms_admin_06074375_D695_429D_8633_CCDA0395905D


--CREATE INDEX [IX_PT_temp_leg_mtm_curve_value_curve_id_volume_expired_term] ON [#temp_leg_mtm] ([curve_value],[curve_id], [volume], [expired_term])
CREATE INDEX [IX_PT_temp_leg_mtm_expired_term_curve_value_curve_id_volume] ON [#temp_leg_mtm] ([expired_term], [curve_value],[curve_id], [volume])
CREATE INDEX [IX_PT_temp_leg_mtm_curve_value_curve_id_volume_expired_term] ON [#temp_leg_mtm] ([curve_value],[curve_id], [volume], [expired_term])
CREATE INDEX [IX_PT_temp_leg_mtm_expired_term] ON [#temp_leg_mtm] ([expired_term]) INCLUDE ([source_deal_header_id], [deal_id], [error_deal_reason])
CREATE INDEX [IX_PT_temp_leg_mtm_error_deal_volume] ON [#temp_leg_mtm] ([error_deal],[volume]) INCLUDE ([source_deal_detail_id])
CREATE INDEX [IX_PT_temp_leg_mtm_volume] ON [#temp_leg_mtm] ([volume]) INCLUDE ([source_deal_header_id], [term_start], [term_end], [leg], [buy_sell_flag], [func_cur_id], [market_value], [contract_value], [formula_rounding], [formula_conv_factor], [product_id], [source_deal_detail_id], [deal_volume])



If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	--print @pr_name+' Running..............'
end



If @print_diagnostic = 1
BEGIN
	print @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	print '****************Index building for #fees_brealdown *****************************'	
END


--Save correlation values for spread type options

UPDATE #temp_deals SET option_flag = 'y' WHERE internal_deal_type_value_id IN (11, 165) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y'

select @include_options = count(*) from #temp_deals where @process_linear_options_delta = 'y' AND option_flag = 'y'





--Save correlation values for spread type options

--UPDATE #temp_deals SET option_flag = 'y' WHERE internal_deal_type_value_id IN (11, 165, 103) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y'

select @include_options = count(*) from #temp_deals where (@process_linear_options_delta = 'y' AND option_flag = 'y') and not (internal_deal_type_value_id IN (103) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y')

CREATE TABLE [dbo].#source_deal_pnl_detail_options(
	[source_deal_header_id] [int] NOT NULL,
	[term_start] [datetime] NOT NULL,
	[days_expiry] [float] NULL,
	[as_of_date] [varchar](100) NULL,
	[curve_1] [int] NULL,
	[curve_2] [int] NULL,
	[option_premium] [float] NULL,
	[option_type] [char](1) NULL,
	[excercise_type] [char](1) NULL,
	[source_deal_type_id] [int] NULL,
	[deal_sub_type_type_id] [int] NULL,
	[internal_deal_type_value_id] [varchar](50) NULL,
	[internal_deal_subtype_value_id] [varchar](50) NULL,
	[deal_volume] [float] NULL,
	[deal_volume_frequency] [char](1) NULL,
	[deal_volume_uom_id] [int] NULL,
	[correlation] [float] NULL,
	[volatility_2] [float] NULL,
	[deal_volume2] [float] NULL,
	[total_deal_volume] [float] NULL,
	[curve_uom_conv_factor] [float] NULL,
	[curve_fx_conv_factor] [float] NULL,
	[price_fx_conv_factor] [float] NULL,
	[strike_price] [float] NULL,
	[spot_price_1] [float] NULL,
	[volatility_1] [float] NULL,
	[discount_rate] [float] NULL,
	[spot_price_2] [float] NULL,
	[PREMIUM] [float] NULL,
	[DELTA] [float] NULL,
	[GAMMA] [float] NULL,
	[VEGA] [float] NULL,
	[THETA] [float] NULL,
	[RHO] [float] NULL,
	[DELTA2] [float] NULL,
	[GAMMA2] [float] NULL,
	[VEGA2] [float] NULL,
	[RHO2] [float] NULL,
	[THETA2] [float] NULL,
	[method] [INT] NULL,
	[attribute_type] [VARCHAR](1)   NULL
) ON [PRIMARY]


CREATE TABLE #option_param(
		source_deal_detail_id int, term_day datetime,curve_id int, hr int,period int,volume numeric(32,8),volume2 numeric(32,8),
		[as_of_date] [varchar](100) COLLATE DATABASE_DEFAULT NULL,
		[source_deal_header_id] [int] NOT NULL,
		[term_start] [datetime] NOT NULL,
		[curve_1] [int] NULL,
		[curve_2] [int] NULL,
		[option_premium] [float] NULL,
		[strike_price] [float] NULL,
		[spot_price_1] [float] NULL,
		[days_expiry] [float] NULL,
		[volatility_1] [float] NULL,
		[discount_rate] [float] NULL,
		[option_type] [char](1) COLLATE DATABASE_DEFAULT NULL,
		[excercise_type] [char](1) COLLATE DATABASE_DEFAULT NULL,
		[source_deal_type_id] [int] NULL,
		[deal_sub_type_type_id] [int] NULL,
		[internal_deal_type_value_id] [varchar](50) COLLATE DATABASE_DEFAULT NULL,
		[internal_deal_subtype_value_id] [varchar](50) COLLATE DATABASE_DEFAULT NULL,
		[deal_volume] [float] NULL,
		[deal_volume_frequency] [char](1) COLLATE DATABASE_DEFAULT NULL,
		[deal_volume_uom_id] [int] NULL,
		[correlation] [float] NULL,
		[volatility_2] [float] NULL,
		[spot_price_2] [float] NULL,
		[deal_volume2] [float] NULL,
		[total_deal_volume] [float] NULL,
		curve_uom_conv_factor float, 
		curve_fx_conv_factor float, 
		price_fx_conv_factor float,save_mtm_at_calculation_granularity VARCHAR(1) COLLATE DATABASE_DEFAULT,
		is_dst int,
		rowid int identity(1,1)
		,Method VARCHAR(100) COLLATE DATABASE_DEFAULT
		,Attribute_type VARCHAR(1) COLLATE DATABASE_DEFAULT
		,time_to_maturity FLOAT NULL
		,[org_strike_price] [float] NULL
	)

---Proces Options for Greeks First...
IF @include_options > 0
BEGIN


--Optimized : only necessary value taken and used below in join
	--instead of whole data with original table
	--shushil bohara
	--Begin

	CREATE TABLE #tmp_position_table(
		source_deal_detail_id INT, 
		curve_id INT, 
		deal_term_start DATETIME, 
		deal_term_end DATETIME, 
		pricing INT
	)

	create table #option_leg2
	(
		source_deal_detail_id int, term_day datetime,curve_id int
		,hr int,is_dst int,period int,volume2 numeric(32,8),
		[source_deal_header_id] [int],
		[term_start] [datetime],
		[strike_curve_id] [int],
		[strike_curve_value] [float],
		[strike_price] [float],
		[curve2_value] [float],
		[premium] [float],
		[volatility] [float],
		[vol_leg2_as_of_date] [datetime],
		[deal_volume] [float],
		[fixed_cost] [float],
		curve_uom_conv_factor_leg2 float, 
		curve_fx_conv_factor_leg2 float, 
		price_fx_conv_factor_leg2 float
		,multiplier float
	)


	SET @sqlstmt = 'INSERT INTO #tmp_position_table 
	SELECT DISTINCT
		source_deal_detail_id, 
		curve_id, 
		deal_term_start, 
		deal_term_end, 
		pricing
	FROM ' + @position_table_name

	EXEC(@sqlstmt)
	--End

	create table #pivot_price_curves (curve_id int,as_of_date datetime,Assessment_curve_type_value_id int,curve_source_value_id int,Granularity int
		,deal_curve_id int ,maturity_date datetime,[period] int ,
		 [25] float, [1] float, [2] float, [3] float, [4] float,[5] float,[6] float,[7] float,[8] float,[9] float, [10] float,[11] float,[12] float
		 ,[13] float,[14] float,[15] float, [16] float,[17] float,[18] float,[19] float,[20] float,[21] float,[22] float,[23] float,[24] float
	 )


	set @qry1g='
		select  curve_id,as_of_date,Assessment_curve_type_value_id,curve_source_value_id,Granularity,deal_curve_id,maturity_date,period ,
			 isnull([25],0) [25], isnull([1],0) [1], isnull([2],0) [2], isnull([3],0) [3], isnull([4],0) [4],isnull([5],0) [5],isnull([6],0) [6]
			 ,isnull([7],0) [7],isnull([8],0) [8],isnull([9],0) [9],isnull([10],0) [10],isnull([11],0) [11],isnull([12],0) [12]
			 ,isnull([13],0) [13],isnull([14],0) [14],isnull([15],0) [15],isnull([16],0) [16],isnull([17],0) [17],isnull([18],0) [18]
			 ,isnull([19],0) [19],isnull([20],0) [20],isnull([21],0) [21],isnull([22],0) [22],isnull([23],0) [23],isnull([24],0) [24]
		 into ~#price_curves~
		from (
			select tc.source_curve_def_id curve_id,tc.as_of_date,tc.Assessment_curve_type_value_id,tc.curve_source_value_id,tc.deal_curve_id
			,coalesce(tc.~curve_value~,tc1.~curve_value~,tc2.~curve_value~,tc3.~curve_value~,0) curve_value 
			,coalesce(spcd.Granularity,spcd1.Granularity,spcd2.Granularity,spcd3.Granularity) Granularity
			,convert(varchar(10),tc.maturity_date,120) maturity_date
			,case when isnull(tc.is_dst,0)=1 then 24 else datepart(hh,tc.maturity_date) END+1  hr ,datepart(minute,tc.maturity_date)  period
		from #temp_curves tc left join source_price_curve_def spcd on tc.source_curve_def_id=spcd.source_curve_def_id
		LEFT  JOIN source_price_curve_def spcd1 ON spcd.proxy_source_curve_def_id=spcd1.source_curve_def_id
		LEFT  JOIN source_price_curve_def spcd2 ON spcd.monthly_index=spcd2.source_curve_def_id
		LEFT  JOIN source_price_curve_def spcd3 ON spcd.proxy_curve_id3=spcd3.source_curve_def_id
		LEFT JOIN #temp_curves tc1 ON spcd1.source_curve_def_id=tc1.source_curve_def_id
			AND tc1.curve_Source_value_id=tc.curve_Source_value_id
			and tc1.as_of_date=tc.as_of_date
			and tc1.Assessment_curve_type_value_id=tc.Assessment_curve_type_value_id
			and tc1.curve_source_value_id= tc.curve_source_value_id			
			and tc1.maturity_date=
			 CAST(CASE WHEN (spcd1.granularity = 980 ) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(Month(tc.maturity_date) as varchar) + ''-01'' 
				 WHEN (spcd1.granularity = 991) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
				 WHEN (spcd1.granularity = 992) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
				 WHEN (spcd1.granularity = 993) THEN cast(Year(tc.maturity_date) as varchar) + ''-01-01'' 
				 ELSE tc.maturity_date END AS DATETIME)
		LEFT JOIN #temp_curves tc2 ON spcd2.source_curve_def_id=tc2.source_curve_def_id
			AND tc2.curve_Source_value_id=tc.curve_Source_value_id
			and tc2.as_of_date=tc.as_of_date
			and tc2.Assessment_curve_type_value_id=tc.Assessment_curve_type_value_id
			and tc2.curve_source_value_id= tc.curve_source_value_id			
			and tc2.maturity_date=
				CAST(CASE WHEN (spcd2.granularity = 980 ) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(Month(tc.maturity_date) as varchar) + ''-01'' 
					WHEN (spcd2.granularity = 991) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
					WHEN (spcd2.granularity = 992) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
					WHEN (spcd2.granularity = 993) THEN cast(Year(tc.maturity_date) as varchar) + ''-01-01'' 
					ELSE tc.maturity_date END AS DATETIME)
		LEFT JOIN #temp_curves tc3 ON spcd3.source_curve_def_id=tc3.source_curve_def_id
				AND tc3.curve_Source_value_id=tc.curve_Source_value_id
				and tc3.as_of_date=tc.as_of_date
				and tc3.Assessment_curve_type_value_id=tc.Assessment_curve_type_value_id
				and tc3.curve_source_value_id= tc.curve_source_value_id			
				and tc3.maturity_date=
				 CAST(CASE WHEN (spcd3.granularity = 980 ) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(Month(tc.maturity_date) as varchar) + ''-01'' 
					 WHEN (spcd3.granularity = 991) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
					 WHEN (spcd3.granularity = 992) THEN cast(Year(tc.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, tc.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
					 WHEN (spcd3.granularity = 993) THEN cast(Year(tc.maturity_date) as varchar) + ''-01-01'' 
					 ELSE tc.maturity_date END AS DATETIME)				 		
		--	where spcd.Granularity in(981,982,987,989,997) --daily,hourly,15min
		) AS SourceTable
		Pivot 
		(
		sum(curve_value) for hr
			in ([25], [1], [2], [3], [4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24])
		) pr;
'
		
		
	set @sqlstmt = '
		select td.source_deal_detail_id,td.curve_id,term_start deal_term_start,COALESCE(vol_term_start,price_term_start,td.term_start) term_start
		,td.pricing,vol.*,price.*
	'
		
	set @sqlstmt1 = '	from #temp_deals td with (nolock)
		cross apply
		(
			select a.commodity_id, case when a.pricing in( 1603,1604, 1605) then a.term_start else null end vol_term_start,
				case when a.pricing in ( 1605) then a.period else 0 end vol_period,
				sum(case when a.pricing in (1604,1605) then hr1 else hr1+hr2+hr3+hr4+hr5+hr6+hr7+hr8+hr9+hr10+hr11+hr12+hr13+hr14+hr15+hr16+hr17+hr18+hr19+hr20+hr21+hr22+hr23+hr24 end) hr1,
				sum(case when a.pricing in (1604,1605) then hr2 else 0 end) hr2 ,
				sum(case when a.pricing in (1604,1605) then hr3 else 0 end) hr3 ,
				sum(case when a.pricing in (1604,1605) then hr4 else 0 end) hr4 ,
				sum(case when a.pricing in (1604,1605) then hr5 else 0 end) hr5 ,
				sum(case when a.pricing in (1604,1605) then hr6 else 0 end) hr6 ,
				sum(case when a.pricing in (1604,1605) then hr7 else 0 end) hr7 ,
				sum(case when a.pricing in (1604,1605) then hr8 else 0 end) hr8 ,
				sum(case when a.pricing in (1604,1605) then hr9 else 0 end) hr9 ,
				sum(case when a.pricing in (1604,1605) then hr10 else 0 end) hr10,
				sum(case when a.pricing in (1604,1605) then hr11 else 0 end) hr11,
				sum(case when a.pricing in (1604,1605) then hr12 else 0 end) hr12,
				sum(case when a.pricing in (1604,1605) then hr13 else 0 end) hr13,
				sum(case when a.pricing in (1604,1605) then hr14 else 0 end) hr14,
				sum(case when a.pricing in (1604,1605) then hr15 else 0 end) hr15,
				sum(case when a.pricing in (1604,1605) then hr16 else 0 end) hr16,
				sum(case when a.pricing in (1604,1605) then hr17 else 0 end) hr17,
				sum(case when a.pricing in (1604,1605) then hr18 else 0 end) hr18,
				sum(case when a.pricing in (1604,1605) then hr19 else 0 end) hr19,
				sum(case when a.pricing in (1604,1605) then hr20 else 0 end) hr20,
				sum(case when a.pricing in (1604,1605) then hr21 else 0 end) hr21,
				sum(case when a.pricing in (1604,1605) then hr22 else 0 end) hr22,
				sum(case when a.pricing in (1604,1605) then hr23 else 0 end) hr23,
				sum(case when a.pricing in (1604,1605) then hr24 else 0 end) hr24,
				sum(case when a.pricing in (1604,1605) then hr25 else 0 end) hr25,
				MAX(a.curve_maturity) curve_maturity, a.proxy_curve_maturity,a.monthly_index_maturity,a.proxy_curve_maturity3
				,max(a.bid_n_ask_price) bid_n_ask_price,max(a.buy_sell_flag) buy_sell_flag
			from '+@position_table_name+' a with (NOLOCK)
			where source_deal_detail_id=td.source_deal_detail_id and term_start between td.term_start and td.term_end
			group by a.commodity_id,case when a.pricing in( 1603,1604, 1605) then term_start else null end ,
					case when a.pricing in (1605) then period else 0 end ,
					--a.curve_maturity, 
					a.proxy_curve_maturity,a.monthly_index_maturity,a.proxy_curve_maturity3
		) vol '

	set @sqlstmt2 = '
		outer apply
		(
			select max(COALESCE(hpc.Granularity,hpc1.Granularity,hpc2.Granularity,hpc3.Granularity)) Granularity,case when b.pricing in( 1603,1604, 1605) then COALESCE(hpc.maturity_date,hpc1.maturity_date,hpc2.maturity_date,hpc3.maturity_date) else null end price_term_start,
			case when b.pricing in ( 1605) then COALESCE(hpc.period,hpc1.period,hpc2.period,hpc3.period) else 0 end price_period,
			avg(
			case when b.pricing in (1604,1605) then COALESCE(hpc.[1],hpc1.[1],hpc2.[1],hpc3.[1]) else 
			(COALESCE(hpc.[1],hpc1.[1],hpc2.[1],hpc3.[1])+COALESCE(hpc.[2],hpc1.[2],hpc2.[2],hpc3.[2])+COALESCE(hpc.[3],hpc1.[3],hpc2.[3],hpc3.[3])+
			COALESCE(hpc.[4],hpc1.[4],hpc2.[4],hpc3.[4])+COALESCE(hpc.[5],hpc1.[5],hpc2.[5],hpc3.[5])+COALESCE(hpc.[6],hpc1.[6],hpc2.[6],hpc3.[6])+
			COALESCE(hpc.[7],hpc1.[7],hpc2.[7],hpc3.[7])+COALESCE(hpc.[8],hpc1.[8],hpc2.[8],hpc3.[8])+COALESCE(hpc.[9],hpc1.[9],hpc2.[9],hpc3.[9])+
			COALESCE(hpc.[10],hpc1.[10],hpc2.[10],hpc3.[10])+COALESCE(hpc.[11],hpc1.[11],hpc2.[11],hpc3.[11])+COALESCE(hpc.[12],hpc1.[12],hpc2.[12],hpc3.[12])+
			COALESCE(hpc.[13],hpc1.[13],hpc2.[13],hpc3.[13])+COALESCE(hpc.[14],hpc1.[14],hpc2.[14],hpc3.[14])+COALESCE(hpc.[15],hpc1.[15],hpc2.[15],hpc3.[15])+
			COALESCE(hpc.[16],hpc1.[16],hpc2.[16],hpc3.[16])+COALESCE(hpc.[17],hpc1.[17],hpc2.[17],hpc3.[17])+COALESCE(hpc.[18],hpc1.[18],hpc2.[18],hpc3.[18])+
			COALESCE(hpc.[19],hpc1.[19],hpc2.[19],hpc3.[19])+COALESCE(hpc.[20],hpc1.[20],hpc2.[20],hpc3.[20])+COALESCE(hpc.[21],hpc1.[21],hpc2.[21],hpc3.[21])+
			COALESCE(hpc.[22],hpc1.[22],hpc2.[22],hpc3.[22])+COALESCE(hpc.[23],hpc1.[23],hpc2.[23],hpc3.[23])+COALESCE(hpc.[24],hpc1.[24],hpc2.[24],hpc3.[24]))
			/nullif(( 
				case when COALESCE(hpc.[1],hpc1.[1],hpc2.[1],hpc3.[1],0)=0 then 0 else 1 end+case when COALESCE(hpc.[2],hpc1.[2],hpc2.[2],hpc3.[2],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[3],hpc1.[3],hpc2.[3],hpc3.[3],0)=0 then 0 else 1 end+case when COALESCE(hpc.[4],hpc1.[4],hpc2.[4],hpc3.[4],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[5],hpc1.[5],hpc2.[5],hpc3.[5],0)=0 then 0 else 1 end+case when COALESCE(hpc.[6],hpc1.[6],hpc2.[6],hpc3.[6],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[7],hpc1.[7],hpc2.[7],hpc3.[7],0)=0 then 0 else 1 end+case when COALESCE(hpc.[8],hpc1.[8],hpc2.[8],hpc3.[8],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[9],hpc1.[9],hpc2.[9],hpc3.[9],0)=0 then 0 else 1 end+case when COALESCE(hpc.[10],hpc1.[10],hpc2.[10],hpc3.[10],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[11],hpc1.[11],hpc2.[11],hpc3.[11],0)=0 then 0 else 1 end+case when COALESCE(hpc.[12],hpc1.[12],hpc2.[12],hpc3.[12],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[13],hpc1.[13],hpc2.[13],hpc3.[13],0)=0 then 0 else 1 end+case when COALESCE(hpc.[14],hpc1.[14],hpc2.[14],hpc3.[14],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[15],hpc1.[15],hpc2.[15],hpc3.[15],0)=0 then 0 else 1 end+case when COALESCE(hpc.[16],hpc1.[16],hpc2.[16],hpc3.[16],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[17],hpc1.[17],hpc2.[17],hpc3.[17],0)=0 then 0 else 1 end+case when COALESCE(hpc.[18],hpc1.[18],hpc2.[18],hpc3.[18],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[19],hpc1.[19],hpc2.[19],hpc3.[19],0)=0 then 0 else 1 end+case when COALESCE(hpc.[20],hpc1.[20],hpc2.[20],hpc3.[20],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[21],hpc1.[21],hpc2.[21],hpc3.[21],0)=0 then 0 else 1 end+case when COALESCE(hpc.[22],hpc1.[22],hpc2.[22],hpc3.[22],0)=0 then 0 else 1 end+
				case when COALESCE(hpc.[23],hpc1.[23],hpc2.[23],hpc3.[23],0)=0 then 0 else 1 end+case when COALESCE(hpc.[24],hpc1.[24],hpc2.[24],hpc3.[24],0)=0 then 0 else 1 end
				)	,0)				
				end) [1],
			 '

	set @sqlstmt3 = 'avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[2],hpc1.[2],hpc2.[2],hpc3.[2]) else 0 end) [2],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[3],hpc1.[3],hpc2.[3],hpc3.[3]) else 0 end) [3],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[4],hpc1.[4],hpc2.[4],hpc3.[4]) else 0 end) [4],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[5],hpc1.[5],hpc2.[5],hpc3.[5]) else 0 end) [5],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[6],hpc1.[6],hpc2.[6],hpc3.[6]) else 0 end) [6],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[7],hpc1.[7],hpc2.[7],hpc3.[7]) else 0 end) [7],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[8],hpc1.[8],hpc2.[8],hpc3.[8]) else 0 end) [8],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[9],hpc1.[9],hpc2.[9],hpc3.[9]) else 0 end) [9],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[10],hpc1.[10],hpc2.[10],hpc3.[10]) else 0 end) [10],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[11],hpc1.[11],hpc2.[11],hpc3.[11]) else 0 end) [11],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[12],hpc1.[12],hpc2.[12],hpc3.[12]) else 0 end) [12],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[13],hpc1.[13],hpc2.[13],hpc3.[13]) else 0 end) [13],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[14],hpc1.[14],hpc2.[14],hpc3.[14]) else 0 end) [14],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[15],hpc1.[15],hpc2.[15],hpc3.[15]) else 0 end) [15],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[16],hpc1.[16],hpc2.[16],hpc3.[16]) else 0 end) [16],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[17],hpc1.[17],hpc2.[17],hpc3.[17]) else 0 end) [17],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[18],hpc1.[18],hpc2.[18],hpc3.[18]) else 0 end) [18],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[19],hpc1.[19],hpc2.[19],hpc3.[19]) else 0 end) [19],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[20],hpc1.[20],hpc2.[20],hpc3.[20]) else 0 end) [20],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[21],hpc1.[21],hpc2.[21],hpc3.[21]) else 0 end) [21],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[22],hpc1.[22],hpc2.[22],hpc3.[22]) else 0 end) [22],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[23],hpc1.[23],hpc2.[23],hpc3.[23]) else 0 end) [23],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[24],hpc1.[24],hpc2.[24],hpc3.[24]) else 0 end) [24],
			avg(case when b.pricing in (1604,1605) then COALESCE(hpc.[25],hpc1.[25],hpc2.[25],hpc3.[25]) else 0 end) [25]
			'
	
	set @sqlstmt4 = '
		from #tmp_position_table b with (NOLOCK)
			inner join source_price_curve_def spcd on b.curve_id=spcd.source_curve_def_id
			left join ~#pivot_price_curves~ hpc with (NOLOCK) on isnull(hpc.deal_curve_id,hpc.curve_id)=spcd.source_curve_def_id
				and hpc.maturity_date between b.deal_term_start and b.deal_term_end 
				and hpc.maturity_date=vol.curve_maturity
				--case when hpc.Granularity in(987,982,981,989,997) then isnull(vol.vol_term_start,hpc.maturity_date)
				--	else dbo.FNAGetTermStartDate(case  hpc.Granularity when 980 then ''m''
				--									when 991 then ''q'' when 992 then ''s'' when 990 then ''w'' when 993 then ''a'' else ''m'' end
				--								,isnull(vol.vol_term_start,hpc.maturity_date),0) end
				and hpc.period=isnull(vol.vol_period,hpc.period)'+case WHEN @calc_type='s' THEN '' ELSE ' and hpc.as_of_date=td.exp_curve_as_of_date' END +'
			left join ~#pivot_price_curves~ hpc1 with (NOLOCK) on isnull(hpc1.deal_curve_id,hpc1.curve_id)=spcd.proxy_source_curve_def_id
				and hpc1.maturity_date between b.deal_term_start and b.deal_term_end 
				and hpc1.maturity_date=vol.proxy_curve_maturity
				--case when hpc1.Granularity in(987,982,981,989,997) then isnull(vol.vol_term_start,hpc1.maturity_date)
				--	else dbo.FNAGetTermStartDate(case  hpc1.Granularity when 980 then ''m''
				--									when 991 then ''q'' when 992 then ''s'' when 990 then ''w'' when 993 then ''a'' else ''m'' end
				--								,isnull(vol.vol_term_start,hpc1.maturity_date),0) end
			and hpc1.period=isnull(vol.vol_period,hpc1.period)'+case WHEN @calc_type='s' THEN '' ELSE ' and hpc1.as_of_date=td.exp_curve_as_of_date' END +'
		left join ~#pivot_price_curves~ hpc2 with (NOLOCK) on isnull(hpc2.deal_curve_id,hpc2.curve_id)=spcd.monthly_index
				and hpc2.maturity_date between b.deal_term_start and b.deal_term_end 
				and hpc2.maturity_date= vol.monthly_index_maturity
				--case when hpc2.Granularity in(987,982,981,989,997) then isnull(vol.vol_term_start,hpc2.maturity_date)
				--	else dbo.FNAGetTermStartDate(case  hpc2.Granularity when 980 then ''m''
				--									when 991 then ''q'' when 992 then ''s'' when 990 then ''w'' when 993 then ''a'' else ''m'' end
				--								,isnull(vol.vol_term_start,hpc2.maturity_date),0) end
			and hpc2.period=isnull(vol.vol_period,hpc2.period)'+case WHEN @calc_type='s' THEN '' ELSE ' and hpc2.as_of_date=td.exp_curve_as_of_date' END +'
		left join ~#pivot_price_curves~ hpc3 with (NOLOCK) on isnull(hpc3.deal_curve_id,hpc3.curve_id)=spcd.proxy_curve_id3
				and hpc3.maturity_date between b.deal_term_start and b.deal_term_end 
				and hpc3.maturity_date=vol.proxy_curve_maturity3
				--case when hpc3.Granularity in(987,982,981,989,997) then isnull(vol.vol_term_start,hpc3.maturity_date)
				--	else dbo.FNAGetTermStartDate(case  hpc3.Granularity when 980 then ''m''
				--									when 991 then ''q'' when 992 then ''s'' when 990 then ''w'' when 993 then ''a'' else ''m'' end
				--								,isnull(vol.vol_term_start,hpc3.maturity_date),0) end
			and hpc3.period=isnull(vol.vol_period,hpc3.period)'+case WHEN @calc_type='s' THEN '' ELSE ' and hpc3.as_of_date=td.exp_curve_as_of_date' END +'
		where td.source_deal_detail_id=b.source_deal_detail_id
			and td.curve_id=b.curve_id 
		group by case when b.pricing in( 1603,1604, 1605) then COALESCE(hpc.maturity_date,hpc1.maturity_date,hpc2.maturity_date,hpc3.maturity_date)  else null end,case when b.pricing in (1605) then COALESCE(hpc.period,hpc1.period,hpc2.period,hpc3.period) else 0 end
		) price
		where td.option_flag = ''y''
'
	
	set @qry1d= replace(replace(@qry1g,'~curve_value~','curve_value'),'~#price_curves~','#price_curves_mid')
	set @qry2d= replace(replace(@qry1g,'~curve_value~','bid_value'),'~#price_curves~','#price_curves_bid')
	set @qry3d= replace(replace(@qry1g,'~curve_value~','ask_value'),'~#price_curves~','#price_curves_ask')
		+'
			CREATE  INDEX ix_pt_pivot_price_curves1a ON #price_curves_mid(granularity);
			CREATE  INDEX ix_pt_pivot_price_curves11b ON #price_curves_mid(maturity_date);
			CREATE  INDEX ix_pt_pivot_price_curves1c ON #price_curves_bid(granularity);
			CREATE  INDEX ix_pt_pivot_price_curves11d ON #price_curves_bid(maturity_date);
			CREATE  INDEX ix_pt_pivot_price_curves1e ON #price_curves_ask(granularity);
			CREATE  INDEX ix_pt_pivot_price_curves11f ON #price_curves_ask(maturity_date);
		'

	set @qry4d=@sqlstmt+
		' into #avg_pricing_mid
		'+ @sqlstmt1
	
	set @qry5d=replace(@sqlstmt4,'~#pivot_price_curves~','#price_curves_mid')
		+' and isnull(vol.bid_n_ask_price,''n'')=''n'';'


	set @qry6d=@sqlstmt+
		' into #avg_pricing_bid
		'+ @sqlstmt1
	
	set @qry7d=replace(@sqlstmt4,'~#pivot_price_curves~','#price_curves_bid')
		+' and isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''b'';'

	set @qry8d=@sqlstmt+
		' into #avg_pricing_ask
		'+ @sqlstmt1
	
	set @qry1e=replace(@sqlstmt4,'~#pivot_price_curves~','#price_curves_ask')
		+' and isnull(vol.bid_n_ask_price,''n'')=''y'' and vol.buy_sell_flag=''s'';'


	set @qry2e='
		select * into '+@avg_pricing_curve_value+' from #avg_pricing_mid
		union all
		select * from #avg_pricing_bid
		union all
		select * from #avg_pricing_ask
	'

	exec spa_print @qry1d
	exec spa_print @qry2d
	exec spa_print @qry3d
	exec spa_print @qry4d
	exec spa_print @sqlstmt2
	exec spa_print @sqlstmt3
	exec spa_print @qry5d
	exec spa_print @qry6d
	exec spa_print @sqlstmt2
	exec spa_print @sqlstmt3
	exec spa_print @qry7d
	exec spa_print @qry8d
	exec spa_print @sqlstmt2
	exec spa_print @sqlstmt3
	exec spa_print @qry1e
	exec spa_print @qry2e


	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+
	 @qry1d+@qry2d+@qry3d+@qry4d+@sqlstmt2+@sqlstmt3+@qry5d+@qry6d+@sqlstmt2+@sqlstmt3+@qry7d+@qry8d+@sqlstmt2+@sqlstmt3+@qry1e+@qry2e
	)
	

--------We need correlation for spread options deals... --
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	CREATE TABLE #deal_corr (
		[source_deal_header_id] [int] NOT NULL ,
		[term_start] [datetime] NOT NULL ,
		[corr_value] [float] NULL 
	) 

	--Assumes that only one month is supported in a calendar spread options deal. 

	select d.source_deal_header_id, 
		max(case when d.leg = 1 then term_start  else NULL end) term_start,
		max(case when d.leg = 2 then term_start  else NULL end) term_start2 ,	
		max(case when d.leg = 1 then  coalesce(spcd.risk_bucket_id,d.curve_id)  else NULL end) curve_id,
		max(case when d.leg = 2 then coalesce(spcd.risk_bucket_id,d.curve_id)  else NULL end) curve_id2  		
	INTO #calendar_options
	from #temp_deals d
		left join source_price_curve_def spcd on spcd.source_curve_def_id=d.curve_id
	 where d.option_flag = 'y' group by d.source_deal_header_id
	having
		max(case when d.leg = 1 then term_start  else NULL end) <> max(case when d.leg = 2 then d.term_start  else NULL end) and	
		max(case when d.leg = 1 then  d.curve_id  else NULL end) =max(case when d.leg = 2 then d.curve_id  else NULL end)
	
	
	insert into #deal_corr
	select sdh.source_deal_header_id, isnull(co.term_start, cor_curves.term_start) term_strart, 
		coalesce(cc1.value, cc2.value) corr_value 
	FROM (select DISTINCT source_deal_header_id from #temp_deals where option_flag = 'y') sdh LEFT JOIN
	(
		select source_deal_header_id, 
		term_start,
		max(case when leg = 1 then  coalesce(spcd.risk_bucket_id,d.curve_id)  else NULL end) curve_id,
		max(case when leg = 2 then  coalesce(spcd.risk_bucket_id,d.curve_id)  else NULL end) curve_id2  
		from #temp_deals d 
			left join source_price_curve_def spcd on spcd.source_curve_def_id=d.curve_id
		WHERE d.option_flag = 'y'
			AND (d.internal_deal_type_value_id = 3 OR d.internal_deal_type_value_id = 18)
			and d.curve_id is not null
		group  by source_deal_header_id,term_start
		HAVING max(case when leg = 1 then  d.curve_id  else NULL end) IS  NOT NULL AND
			   max(case when leg = 2 then  d.curve_id  else NULL end) IS NOT NULL

	) cor_curves on cor_curves.source_deal_header_id = sdh.source_deal_header_id 
	LEFT OUTER JOIN #calendar_options co ON co.source_deal_header_id = sdh.source_deal_header_id 
	left join source_price_curve_def spcd1 on spcd1.source_curve_def_id=co.curve_id
	left join source_price_curve_def spcd_g1 on spcd_g1.source_curve_def_id= cor_curves.curve_id
	left join source_price_curve_def spcd_g2 on spcd_g2.source_curve_def_id=cor_curves.curve_id2
	outer apply
	(
		select top(1) VALUE from curve_correlation
		where as_of_date <=@as_of_date 
			and curve_id_from=COALESCE(spcd1.risk_bucket_id,co.curve_id,spcd_g1.risk_bucket_id,cor_curves.curve_id)
			and curve_id_to=COALESCE(spcd1.risk_bucket_id,co.curve_id,spcd_g2.risk_bucket_id,cor_curves.curve_id2)
			and term1=
				CAST(
					 CASE WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 980 THEN convert(varchar(7), isnull(co.term_start, cor_curves.term_start),120) + '-01' 
					 WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 991 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120) + '-' + cast(CASE datepart(q, isnull(co.term_start, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
					 WHEN isnull(spcd1.granularity,spcd_g1.granularity)= 992 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120)  + '-' + cast(CASE datepart(q, isnull(co.term_start, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
					 WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 993 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120) + '-01-01' 
					 ELSE isnull(co.term_start, cor_curves.term_start) 	END AS DATETIME
				)
			and term2=
				CAST(
					 CASE WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 980 THEN convert(varchar(7), isnull(co.term_start2, cor_curves.term_start),120) + '-01' 
					 WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 991 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120) + '-' + cast(CASE datepart(q, isnull(co.term_start, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
					 WHEN isnull(spcd1.granularity,spcd_g2.granularity)= 992 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120)  + '-' + cast(CASE datepart(q, isnull(co.term_start2, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
					 WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 993 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120) + '-01-01' 
					 ELSE isnull(co.term_start2, cor_curves.term_start)	END AS DATETIME
				)
			and curve_source_value_id=@curve_source_value_id
		order by 	as_of_date desc
	)	cc1
	
	outer apply
	(
		select top(1) VALUE from curve_correlation
		where as_of_date <=@as_of_date 
			and curve_id_to=COALESCE(spcd1.risk_bucket_id,co.curve_id,spcd_g1.risk_bucket_id,cor_curves.curve_id)
			and curve_id_from=COALESCE(spcd1.risk_bucket_id,co.curve_id,spcd_g2.risk_bucket_id,cor_curves.curve_id2)
			and term2=
			CAST(
				 CASE WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 980 THEN convert(varchar(7), isnull(co.term_start, cor_curves.term_start),120) + '-01' 
				 WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 991 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120) + '-' + cast(CASE datepart(q, isnull(co.term_start, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
				 WHEN isnull(spcd1.granularity,spcd_g1.granularity)= 992 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120)  + '-' + cast(CASE datepart(q, isnull(co.term_start, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
				 WHEN isnull(spcd1.granularity,spcd_g1.granularity) = 993 THEN convert(varchar(4), isnull(co.term_start, cor_curves.term_start),120) + '-01-01' 
				 ELSE isnull(co.term_start, cor_curves.term_start) 	END AS DATETIME
			)
			and term1=
			CAST(
				 CASE WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 980 THEN convert(varchar(7), isnull(co.term_start2, cor_curves.term_start),120) + '-01' 
				 WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 991 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120) + '-' + cast(CASE datepart(q, isnull(co.term_start2, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
				 WHEN isnull(spcd1.granularity,spcd_g2.granularity)= 992 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120)  + '-' + cast(CASE datepart(q, isnull(co.term_start2, cor_curves.term_start)) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
				 WHEN isnull(spcd1.granularity,spcd_g2.granularity) = 993 THEN convert(varchar(4), isnull(co.term_start2, cor_curves.term_start),120) + '-01-01' 
				 ELSE isnull(co.term_start2, cor_curves.term_start) 	END AS DATETIME
			)
			and curve_source_value_id=@curve_source_value_id
		order by 	as_of_date desc
	)	cc2
	WHERE coalesce(cc1.value, cc2.value) IS NOT NULL


	---- get max date for volatility
	create table #t_max_vol_date ( curve_id int, term datetime, max_as_of_date datetime )
	
	insert into #t_max_vol_date(curve_id , term, max_as_of_date)
	select	distinct a.risk_bucket_id, a.term_start 
		,	isnull(cv2.as_of_date, cv.as_of_date)  
	from (
		select distinct curve_as_of_date,isnull(spcd.risk_bucket_id,d.curve_id) risk_bucket_id,d.curve_id, d.term_start, d.option_strike_price from #temp_deals d 
		left join source_price_curve_def spcd on spcd.source_curve_def_id=d.curve_id
		where d.option_flag = 'y'
	) a LEFT JOIN source_price_curve_def spcd on spcd.source_curve_def_id=a.risk_bucket_id
	OUTER APPLY
	(
		select top(1) cast(as_of_date AS DATETIME) as_of_date,value  from curve_volatility  where  curve_id = a.risk_bucket_id 
			and term=
					CAST(
						 CASE WHEN spcd.granularity = 980 THEN convert(varchar(7), a.term_start,120) + '-01' 
						 WHEN spcd.granularity = 991 THEN convert(varchar(4), a.term_start,120) + '-' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
						 WHEN spcd.granularity= 992 THEN convert(varchar(4),a.term_start,120)  + '-' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
						 WHEN spcd.granularity = 993 THEN convert(varchar(4), a.term_start,120) + '-01-01' 
						 ELSE a.term_start 	END AS DATETIME
					)
					
					and curve_source_value_id=4500	 and as_of_date <= a.curve_as_of_date
				order by 	as_of_date desc	
	) cv 
	OUTER APPLY
	(
		select top(1) cast(as_of_date AS DATETIME) as_of_date,value  from curve_volatility  where curve_id = a.risk_bucket_id 	
		and term=CAST(
						 CASE WHEN spcd.granularity = 980 THEN convert(varchar(7), a.term_start,120) + '-01' 
						 WHEN spcd.granularity = 991 THEN convert(varchar(4), a.term_start,120) + '-' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + '-01' 
						 WHEN spcd.granularity= 992 THEN convert(varchar(4),a.term_start,120)  + '-' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + '-01'
						 WHEN spcd.granularity = 993 THEN convert(varchar(4), a.term_start,120) + '-01-01' 
						 ELSE a.term_start 	END AS DATETIME
					)
					
					and curve_source_value_id=@curve_source_value_id and as_of_date <= a.curve_as_of_date
					and strike_price = a.option_strike_price
				order by 	as_of_date desc	
			
	) cv2
	where ISNULL(cv2.value, cv.value) is not null 

	create table #wght_curve_value (source_deal_detail_id int, deal_term_start datetime,whgt_price float,vol numeric(32,8))

	set @sqlstmt = 'insert into #wght_curve_value (source_deal_detail_id , deal_term_start ,whgt_price ,vol)
		select source_deal_detail_id,deal_term_start
			,sum((hr1*[1]+hr2*[2] +hr3*[3] +hr4*[4] +hr5*[5] +hr6*[6] +hr7*[7] +hr8*[8] +hr9*[9] +hr10*[10] +hr11*[11] +hr12*[12] 
			+hr13*[13] +hr14*[14] +hr15*[15] +hr16*[16] +hr17*[17] +hr18*[18] +hr19*[19] +hr20*[20] +hr21*[21] +hr22*[22] +hr23*[23] +hr24*[24]
			))/nullif(sum(
			(hr1+hr2+hr3+hr4+hr5+hr6+hr7+hr8+hr9+hr10+hr11+hr12+hr13+hr14+hr15+hr16+hr17+hr18+hr19+hr20+hr21+hr22+hr23+hr24)
			),0) whgt_price,sum(hr1+hr2+hr3+hr4+hr5+hr6+hr7+hr8+hr9+hr10+hr11+hr12+hr13+hr14+hr15+hr16+hr17+hr18+hr19+hr20+hr21+hr22+hr23+hr24) vol
		from '+@avg_pricing_curve_value+'
		group by source_deal_detail_id,deal_term_start
	'

	EXEC spa_print  @sqlstmt
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)
	
	create table #avg_pricing_curve_value (source_deal_detail_id int,curve_id int, term_day datetime,hr int,period int,price float,volume numeric(32,8), is_dst int)
		
	set @sqlstmt = '
		SELECT source_deal_detail_id,curve_id,term_start, Prices hr,period,avg(Price) Price,pricing
		into #temp_price_unpivot
		FROM 
		( 
			SELECT source_deal_detail_id,term_start,curve_id,price_period period,pricing,
			[1] ,case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [2] else [1] end   else 0 end [2] ,
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [3] else [1] end  else 0 end [3] ,case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [4] else [1] end   else 0 end [4] ,
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [5] else [1] end  else 0 end [5] ,case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [6] else [1] end   else 0 end [6] ,
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [7] else [1] end  else 0 end [7] ,case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [8] else [1] end   else 0 end [8] ,'

	set @sqlstmt1 = '
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [9] else [1] end  else 0 end [9] ,case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [10] else [1] end   else 0 end [10],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [11] else [1] end  else 0 end [11],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [12] else [1] end   else 0 end [12],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [13] else [1] end  else 0 end [13],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [14] else [1] end   else 0 end [14],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [15] else [1] end  else 0 end [15],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [16] else [1] end   else 0 end [16],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [17] else [1] end  else 0 end [17],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [18] else [1] end   else 0 end [18],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [19] else [1] end  else 0 end [19],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [20] else [1] end   else 0 end [20],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [21] else [1] end  else 0 end [21],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [22] else [1] end   else 0 end [22],
			case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [23] else [1] end  else 0 end [23],case when pricing in (1604,1605) then  case when Granularity in (982,987,989,997) then [24] else [1] end   else 0 end [24]			
			,case when pricing in (1604,1605) then case when Granularity in (982,987,989,997) then [25] else [1] end  else 0 end [25]	
			from '+@avg_pricing_curve_value+'
		) Main
		UNPIVOT 
		( 
			Price For Prices IN ([25],[1],[2] ,[3] ,[4] ,[5] ,[6] ,[7] ,[8] ,[9] ,[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24]) 
		) p where (pricing not in (1604,1605) and Prices=1) or (pricing in (1604,1605))
		group by source_deal_detail_id,curve_id,term_start, Prices,period,pricing
		 ;
		'

		
	set @sqlstmt2 = '
		SELECT source_deal_detail_id,curve_id,term_start, Volumes hr,period ,sum(Volume) Volume ,pricing,commodity_id,dst_25
			into #temp_vol_unpivot
		FROM 
		( 
			SELECT source_deal_detail_id,term_start,curve_id,vol_period period,pricing,commodity_id,
			hr25 [25],hr1 [1],hr2 [2],hr3 [3],hr4 [4],hr5 [5],hr6 [6],hr7 [7],hr8 [8],hr9 [9],hr10 [10],hr11 [11],hr12 [12],hr13 [13]
			,hr14 [14],hr15 [15],hr16 [16],hr17 [17],hr18 [18],hr19 [19],hr20 [20],hr21 [21],hr22 [22],hr23 [23],hr24 [24],hr25 [dst_25]
			from '+@avg_pricing_curve_value+'
		) Main
		UNPIVOT 
		( 
			Volume FOR Volumes IN ([25],[1],[2] ,[3] ,[4] ,[5] ,[6] ,[7] ,[8] ,[9] ,[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24]) 
		) v where (pricing not in (1604,1605) and Volumes=1) or (pricing in (1604,1605))
		group by source_deal_detail_id,curve_id,term_start, Volumes,period ,pricing,commodity_id,dst_25
		;
				
	create index index_price_tttt on  #temp_price_unpivot (source_deal_detail_id,curve_id,term_start, hr,period	);
	create index index_vol_tttt on  #temp_vol_unpivot (source_deal_detail_id,curve_id,term_start, hr,period	);	
		
	insert into #avg_pricing_curve_value (source_deal_detail_id,curve_id, term_day,hr,period,price,volume,is_dst)
	SELECT v.source_deal_detail_id,v.curve_id,v.term_start, case when v.hr=25 then dst.[hour] else v.hr end hr
		,v.period,p.Price,v.volume - case when dst.[hour] is not null and v.hr=dst.[hour] then isnull(v.dst_25,0) else 0 end volume	,case when v.hr=25 then 1 else 0 end is_dst
	from #temp_vol_unpivot v inner join #temp_price_unpivot p on
			v.source_deal_detail_id =p.source_deal_detail_id and v.term_start=p.term_start
			 and v.hr=p.hr and v.period=p.period 
		inner join #temp_deals td on td.source_deal_detail_id=v.source_deal_detail_id
		inner join #vwDealTimezone tz on  tz.source_deal_header_id=td.source_deal_header_id
			 and tz.curve_id=td.curve_id  and tz.location_id=td.location_id 
		left join #mv90_dst dst on dst.[date] = v.term_start and dst.insert_delete = ''i'' and dst.source_commodity_id = v.commodity_id and dst.dst_group_value_id=tz.dst_group_value_id
--left join	#mv90_dst dst1 on dst1.[date] = v.term_start and dst1.insert_delete = ''d'' and dst1.source_commodity_id = v.commodity_id and dst1.[hour] = v.hr
	where v.hr<25  or (v.hr=25 and dst.[hour] is not null)
	'

	EXEC spa_print  @sqlstmt
	EXEC spa_print  @sqlstmt1
	EXEC spa_print  @sqlstmt2
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt+@sqlstmt1+@sqlstmt2)


	CREATE INDEX [IX_PT_avg_pricing_curve_value_source_deal_detail_id_term_day] ON [#avg_pricing_curve_value] ([source_deal_detail_id],[term_day]) INCLUDE ([curve_id], [hr], [period], [price], [volume], [is_dst])

	set @sqlstmt = 'INSERT INTO #option_leg2
			select wcv.source_deal_detail_id, wcv.term_day,wcv.curve_id ,wcv.hr,wcv.is_dst,wcv.period,wcv.volume volume2,
			 a.source_deal_header_id, sdh.term_start, a.curve_id strike_curve_id, 
			isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) 
			* wcv.price strike_curve_value,
			case when (internal_deal_type_value_id = 2) then 
					isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) * isnull(wcv.price, 0) + 
						isnull(pfcf.price_fx_conv_factor, 1) * isnull(a.option_strike_price, 0)  
				 when (internal_deal_type_value_id = 3 OR internal_deal_type_value_id = 18) then 
					isnull(pfcf.price_fx_conv_factor, 1) * isnull(a.option_strike_price, 0)
				 else 0 
			end strike_price, 				
			(isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) * isnull(atc.avg_curve_value, wcv.price) * isnull(a.price_multiplier, 1) 
				+ isnull(pfcf.price_fx_conv_factor, 1) * isnull(a.option_strike_price, 0) + 
				isnull(pa1ucf.price_fx_conv_factor, 1) * isnull(a.price_adder, 0)) curve2_value, 
			isnull(pfcf.price_fx_conv_factor, 1) * a.fixed_price option_premium,
			case when (ISNULL(dc_strike.granularity, dc.granularity) is NULL OR ISNULL(dc_strike.granularity, dc.granularity) = 700) then
					ISNULL(dc_strike.value, dc.value) * Sqrt(' + cast(@trading_days as varchar) + ') 
				when ISNULL(dc_strike.granularity, dc.granularity) =703 then 
					ISNULL(dc_strike.value, dc.value) * Sqrt(12)
				when ISNULL(dc_strike.granularity, dc.granularity) =704 then 
					ISNULL(dc_strike.value, dc.value) * Sqrt(4)
				when ISNULL(dc_strike.granularity, dc.granularity) =705 then 
					ISNULL(dc_strike.value, dc.value) * Sqrt(2)
				when ISNULL(dc_strike.granularity, dc.granularity) =701 then 
					ISNULL(dc_strike.value, dc.value) * Sqrt(52)
				 else
					ISNULL(dc_strike.value, dc.value)
			end volatility, 
			dc_max.max_as_of_date vol_leg2_as_of_date,
			a.deal_volume,
			case when (a.buy_sell_flag=''s'') then -1 else 1 end * case when (a.pay_opposite=''y'') then 	-1 else 1 end *
			ISNULL(a.fixed_cost, 0) * isnull(pfcf.price_fx_conv_factor, 1),  
			CASE WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL ELSE isnull(cucf.curve_uom_conv_factor, 1) END curve_uom_conv_factor_leg2,
			CASE WHEN (a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND cfcf.price_fx_conv_factor IS NULL) THEN NULL ELSE isnull(cfcf.price_fx_conv_factor, 1) END curve_fx_conv_factor_leg2,
			CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND pfcf.price_fx_conv_factor IS NULL) THEN NULL ELSE isnull(pfcf.price_fx_conv_factor, 1) END price_fx_conv_factor_leg2
			,a.volume_multiplier
		from #temp_deals a with (NOLOCK)
		'

	set @sqlstmt1='
		left join source_price_curve_Def spcd with (NOLOCK) on spcd.source_curve_def_id=a.curve_id
		left join #avg_pricing_curve_value wcv with (NOLOCK) on wcv.source_deal_detail_id=a.source_deal_detail_id 
		and wcv.term_day between a.term_start and a.term_end
		left join source_price_curve_def risk_bucket with (NOLOCK) on risk_bucket.source_curve_def_id=spcd.risk_bucket_id
	  LEFT OUTER JOIN  (select source_deal_header_id,curve_id, term_start from #temp_deals where option_flag=''y'' and leg=1 
		   group by source_deal_header_id,curve_id, term_start) sdh ON sdh.source_deal_header_id = a.source_deal_header_id and sdh.term_start = case when a.curve_id=sdh.curve_id then sdh.term_start else a.term_start end
		LEFT OUTER JOIN #t_max_vol_date dc_max ON
			  dc_max.curve_id = isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			  dc_max.term =CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
		 WHEN (risk_bucket.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
		 WHEN (risk_bucket.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
		 WHEN (risk_bucket.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
		 ELSE a.term_start END AS DATETIME)'
			
	set	@sqlstmt2='
		LEFT OUTER JOIN curve_volatility dc with (NOLOCK) on  dc.curve_id = isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			dc.term =CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
				 WHEN (spcd.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
				 WHEN (spcd.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
				 WHEN (spcd.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
				 ELSE a.term_start END AS DATETIME)
			and dc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and dc.as_of_date = dc_max.max_as_of_date	and isnull(dc.strike_price, 0) = 0 						  
		LEFT OUTER JOIN curve_volatility dc_strike with (NOLOCK) on  dc_strike.curve_id = isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			dc_strike.term =CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
				 WHEN (risk_bucket.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
				 WHEN (risk_bucket.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
				 WHEN (risk_bucket.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
				 ELSE a.term_start END AS DATETIME)
			and dc_strike.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and dc_strike.as_of_date = dc_max.max_as_of_date	
			and dc_strike.strike_price = a.option_strike_price
		LEFT OUTER JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND
						atc.leg = a.leg and a.source_deal_detail_id=atc.source_deal_detail_id
		LEFT OUTER JOIN #curve_uom_conv_factor cucf with (NOLOCK) ON cucf.deal_volume_uom_id  = a.deal_volume_uom_id AND 
						cucf.curve_uom_id = a.curve_uom_id
		LEFT OUTER JOIN #fx_curves pfcf with (NOLOCK) ON pfcf.fx_currency_id = a.fixed_price_currency_id AND 
						pfcf.func_cur_id = a.func_cur_id AND pfcf.source_system_id = a.source_system_id AND
						pfcf.as_of_date= a.exp_curve_as_of_date AND pfcf.maturity_date= a.maturity_date
				and pfcf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves cfcf with (NOLOCK) ON cfcf.fx_currency_id = a.curve_currency_id AND 
						cfcf.func_cur_id = a.func_cur_id AND cfcf.source_system_id = a.source_system_id AND
						cfcf.as_of_date= a.exp_curve_as_of_date AND cfcf.maturity_date= a.maturity_date
				and cfcf.market_value_desc=a.fx_conversion_market
		LEFT OUTER JOIN #fx_curves pa1ucf with (NOLOCK) ON pa1ucf.fx_currency_id = a.price_adder_currency AND 
						pa1ucf.func_cur_id = a.func_cur_id AND pa1ucf.source_system_id = a.source_system_id AND
						pa1ucf.as_of_date= a.exp_curve_as_of_date AND pa1ucf.maturity_date= a.maturity_date
					and pa1ucf.market_value_desc=a.fx_conversion_market
		where option_flag = ''y'' and a.leg = 2
			'
	exec spa_print @sqlstmt
	exec spa_print @sqlstmt1
	exec spa_print @sqlstmt2
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt+@sqlstmt1+@sqlstmt2 )


	--select * from #option_leg2
	--select * from #option_param
	--select * from #temp_leg_mtm


	create index indx_option_leg2_2 on   #option_leg2 (source_deal_header_id,curve_id,term_day,period,hr,is_dst)

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Collecting leg 2 option variable strike price *****************************'	
	END

/*	
706	700	Annually
700	700	Daily
703	700	Monthly
704	700	Quarterly
705	700	Semi-annually
707	700	Term
701	700	Weekly
*/
	
	
	

	if OBJECT_ID('tempdb..#curve_volatility') is not null drop table #curve_volatility
	SELECT * INTO #curve_volatility FROM curve_volatility
	
	SET @sqlstmt = 'INSERT INTO #option_param
		Select a.source_deal_detail_id, wcv.term_day,wcv.curve_id ,wcv.hr,wcv.period,sum(wcv.volume) volume,max(ol.volume2) volume2,
		''' + @as_of_date + ''' as_of_date, max(a.source_deal_header_id) source_deal_header_id, 
			max(a.term_start) term_start, 
			MAX(a.curve_id) curve_1,
			MAX(ISNULL(ol.curve_id,a.formula_curve_id)) curve_2,  			
			avg(isnull(pfcf.price_fx_conv_factor, 1) * isnull(a.fixed_price, 0)) as option_premium,
			avg(isnull(pfcf.price_fx_conv_factor, 1) * isnull(a.option_strike_price,0) + isnull(ol.strike_price, 0) + isnull(a.price_adder, 0)) +sum(isnull(fcid.formula_curve_id_value,0)) as strike_price,			
			max(isnull(cucf.curve_uom_conv_factor, 1) * isnull(cfcf.price_fx_conv_factor, 1) * 
				isnull(atc.avg_curve_value,wcv.price )) spot_price_1,
			--max(datediff (dd, ''' + @as_of_date + ''', wcv.term_day))/cast(max(days_year) as float) days_expiry, --yearly value
			NULLIF(max(CASE WHEN a.option_excercise_type = ''s'' THEN exp.tot
				ELSE
					datediff (dd, ''' + @as_of_date + ''', CASE WHEN a.pricing IN(1604,1605,1603) THEN wcv.term_day ELSE a.contract_expiration_date END)
				END	
				)/cast(max(days_year) as float),0) days_expiry, --yearly value
			max(
				case when (ISNULL(dc_strike.granularity, dc.granularity) is NULL OR ISNULL(dc_strike.granularity, dc.granularity) = 700) then
						ISNULL(dc_strike.value, dc.value) * Sqrt(' + cast(@trading_days as varchar) + ') 
					when ISNULL(dc_strike.granularity, dc.granularity) =703 then 
						ISNULL(dc_strike.value, dc.value) * Sqrt(12)
					when ISNULL(dc_strike.granularity, dc.granularity) =704 then 
						ISNULL(dc_strike.value, dc.value) * Sqrt(4)
					when ISNULL(dc_strike.granularity, dc.granularity) =705 then 
						ISNULL(dc_strike.value, dc.value) * Sqrt(2)
					when ISNULL(dc_strike.granularity, dc.granularity) =701 then 
						ISNULL(dc_strike.value, dc.value) * Sqrt(52)
					 else
						ISNULL(dc_strike.value, dc.value)
				end 
			) volatility_1, -- convert to annual
			max(isnull(case when a.bid_n_ask_price=''y'' then case when a.buy_sell_flag=''b'' then dr.bid_value else dr.ask_value end else dr.curve_value end, 0)) as discount_rate, -- this should be annual
			max(a.option_type) option_type,
			max(a.option_excercise_type) excercise_type,
			max(a.source_deal_type_id) as source_deal_type_id,
			max(a.deal_sub_type_type_id) as deal_sub_type_type_id,
			max(a.internal_deal_type_value_id) as internal_deal_type_value_id,
			max(a.internal_deal_subtype_value_id) as internal_deal_subtype_value_id,
			max(a.deal_volume) deal_volume, 
			max(a.deal_volume_frequency) deal_volume_frequency,
			max(a.deal_volume_uom_id) deal_volume_uom_id,
			max(dcor.corr_value) correlation,
			max(ol.volatility) volatility2,
			case when  max(a.internal_deal_type_value_id)=2 then null else max(ol.curve2_value*ol.multiplier) end [spot_price_2],
			max(ol.deal_volume) deal_volume2,
			max(a.deal_volume) total_deal_volume,
			max(CASE WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL ELSE isnull(cucf.curve_uom_conv_factor, 1) END) curve_uom_conv_factor,
			max(CASE WHEN (a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND cfcf.price_fx_conv_factor IS NULL) THEN NULL ELSE isnull(cfcf.price_fx_conv_factor, 1) END) curve_fx_conv_factor,
			max(CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND pfcf.price_fx_conv_factor IS NULL) THEN NULL ELSE isnull(pfcf.price_fx_conv_factor, 1) END) price_fx_conv_factor
			,max(a.save_mtm_at_calculation_granularity) save_mtm_at_calculation_granularity,wcv.is_dst,a.options_calc_method,a.attribute_type
			,CASE WHEN MAX(CAST(DATEDIFF(d,'''+@as_of_date+''',a.entire_term_start) AS FLOAT)/cast(days_year as float)) < 0 THEN 
				0 
			ELSE
				MAX(CAST(DATEDIFF(d,'''+@as_of_date+''',a.entire_term_start) AS FLOAT)/cast(days_year as float)) 
			END time_to_maturity,
			NULL
		from #temp_deals a 	 with (NOLOCK)
		inner join #avg_pricing_curve_value wcv on wcv.source_deal_detail_id=a.source_deal_detail_id and wcv.term_day between a.term_start and a.term_end
		left join source_price_curve_Def spcd on spcd.source_curve_def_id=a.curve_id
		left join source_price_curve_def risk_bucket on risk_bucket.source_curve_def_id=spcd.risk_bucket_id
		LEFT OUTER JOIN #t_max_vol_date dc_max with (NOLOCK) ON dc_max.curve_id =  isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			dc_max.term = CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
			WHEN (risk_bucket.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
			WHEN (risk_bucket.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (risk_bucket.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
			ELSE a.term_start END AS DATETIME)
		LEFT OUTER JOIN curve_volatility dc with (NOLOCK) on  dc.curve_id = isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			dc.term =CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
				WHEN (spcd.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
				WHEN (spcd.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
				WHEN (spcd.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
				ELSE a.term_start END AS DATETIME)
			and dc.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and dc.as_of_date = dc_max.max_as_of_date	and isnull(dc.strike_price, 0) = 0 						  
		LEFT OUTER JOIN #curve_volatility dc_strike WITH (NOLOCK) on  dc_strike.curve_id = isnull(risk_bucket.source_curve_def_id,a.curve_id) and
			dc_strike.term =CAST(CASE WHEN (risk_bucket.granularity = 980 ) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(Month(a.term_start) as varchar) + ''-01'' 
					WHEN (risk_bucket.granularity = 991) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
					WHEN (risk_bucket.granularity = 992) THEN cast(Year(a.term_start) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
					WHEN (risk_bucket.granularity = 993) THEN cast(Year(a.term_start) as varchar) + ''-01-01''
					ELSE a.term_start END AS DATETIME)
			and dc_strike.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and dc_strike.as_of_date = dc_max.max_as_of_date	
			and dc_strike.strike_price = a.option_strike_price 
		OUTER APPLY(
				SELECT COUNT(*) tot
				FROM date_details dd
				INNER JOIN application_users au ON dd.region_id = au.region_id
					AND au.user_login_id = dbo.FNADBUser()
				WHERE dd.sql_date_value BETWEEN ''' + @as_of_date + ''' AND CASE WHEN a.pricing IN(1604,1605,1603) THEN 
						wcv.term_day
					ELSE a.contract_expiration_date END
				AND is_weekday = 1) exp		
		'					    

	set @sqlstmt2='
		LEFT OUTER JOIN -- get risk free rate
		source_price_curve_Def spcd_dr WITH (NOLOCK) on spcd_dr.source_curve_def_id=a.risk_free_curve_id
		left join	' + @source_price_curve + ' dr  on  dr.source_curve_def_id = a.risk_free_curve_id  and
			 dr.maturity_date =
			 CAST(CASE WHEN (spcd_dr.granularity = 980 ) THEN cast(Year(a.maturity_date) as varchar) + ''-'' + cast(Month(a.maturity_date) as varchar) + ''-01'' 
				 WHEN (spcd_dr.granularity = 991) THEN cast(Year(a.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, a.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
				 WHEN (spcd_dr.granularity = 992) THEN cast(Year(a.maturity_date) as varchar) + ''-'' + cast(CASE datepart(q, a.maturity_date) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
				 WHEN (spcd_dr.granularity = 993) THEN cast(Year(a.maturity_date) as varchar) + ''-01-01'' 
				 ELSE a.maturity_date END AS DATETIME) and
						  dr.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' and
						  dr.as_of_date = a.curve_as_of_date
			outer apply (
					select 
						volume2, curve_id, strike_price, volatility, curve2_value, deal_volume 	,isnull(multiplier,1) multiplier
					from #option_leg2 WITH (NOLOCK) where source_deal_header_id = a.source_deal_header_id 
						and curve_id<>a.curve_id
						AND term_day =wcv.term_day 
						and wcv.hr=hr 
						and wcv.period= period 
						and wcv.is_dst= is_dst 
					union all
					select 
						volume2, curve_id, strike_price, volatility, curve2_value, deal_volume 	   ,isnull(multiplier,1) multiplier
					from #option_leg2 WITH (NOLOCK) where source_deal_header_id = a.source_deal_header_id 
						and curve_id=a.curve_id
					) ol			  						  
    		LEFT OUTER JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND
						atc.leg = a.leg and a.source_deal_detail_id=atc.source_deal_detail_id
			LEFT OUTER JOIN #deal_corr dcor ON
				dcor.source_deal_header_id = a.source_deal_header_id AND dcor.term_start = a.term_start
			LEFT OUTER JOIN #curve_uom_conv_factor cucf ON cucf.deal_volume_uom_id  = a.curve_uom_id AND 
							cucf.curve_uom_id = a.deal_volume_uom_id
			LEFT OUTER JOIN #fx_curves pfcf ON pfcf.fx_currency_id = a.fixed_price_currency_id AND 
							pfcf.func_cur_id = a.func_cur_id AND pfcf.source_system_id = a.source_system_id AND
							pfcf.as_of_date= a.exp_curve_as_of_date AND pfcf.maturity_date= a.maturity_date
					and pfcf.market_value_desc=a.fx_conversion_market
			LEFT OUTER JOIN #fx_curves cfcf ON cfcf.fx_currency_id = a.curve_currency_id AND 
							cfcf.func_cur_id = a.func_cur_id AND cfcf.source_system_id = a.source_system_id AND
							cfcf.as_of_date= a.exp_curve_as_of_date AND cfcf.maturity_date= a.maturity_date
					and cfcf.market_value_desc=a.fx_conversion_market
			LEFT JOIN (
				select a.source_deal_header_id, a.term_start, a.term_end, max(isnull(tc.curve_value, tc1.curve_value)) formula_curve_id_value
	from #temp_deals a LEFT JOIN
	#temp_curves tc on tc.source_curve_def_id=a.formula_curve_id 
		and tc.as_of_date = a.curve_as_of_date and tc.maturity_date=a.term_start
	LEFT  JOIN source_price_curve_def spcd ON spcd.source_curve_def_id=a.formula_curve_id
	LEFT  JOIN source_price_curve_def spcd1 ON spcd.proxy_source_curve_def_id=spcd1.source_curve_def_id
	LEFT JOIN #temp_curves tc1 ON spcd1.source_curve_def_id=tc1.source_curve_def_id
		and tc1.as_of_date = a.curve_as_of_date
		and tc1.maturity_date=a.term_start
	WHERE a.option_flag = ''y'' and not (a.internal_deal_type_value_id IN (103) AND a.internal_deal_subtype_value_id = 102 
		AND '''+@process_linear_options_delta+''' = ''y'')
	GROUP BY a.source_deal_header_id, a.term_start, a.term_end
			) fcid ON fcid.source_deal_header_id = a.source_deal_header_id and fcid.term_start = a.term_start and 
			fcid.term_end = a.term_end
	where a.option_flag = ''y'' AND a.leg = 1 '+case when @calc_type ='s' then '' else ' AND a.contract_expiration_date >a.curve_as_of_date' END +'
	group by a.source_deal_detail_id, wcv.term_day,wcv.curve_id ,wcv.hr,wcv.period ,wcv.is_dst,a.options_calc_method,a.attribute_type'

	EXEC spa_print  @sqlstmt
	EXEC spa_print  @sqlstmt2
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt+@sqlstmt2 )
	
--select *  from #avg_temp_curves
--select *  from #avg_pricing_curve_value

	UPDATE #option_param SET time_to_maturity = CASE WHEN (days_expiry - @T2) < 0 THEN 0 ELSE (days_expiry - @T2) END


	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************End of retrieving Deal Correlation*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

----LOG ALL ERRORS FOR OPTIONS DEALS WHERE INPUT ARE MISSING FOR BLACK SCHOLES MODEL
--/*	
	insert into #calc_status 	
	select distinct @process_id, 'Error', 'MTM Calc', 'Run MTM', 'Data Error',
		'Curve or required data is missing for Deal ID: '''+ dbo.FNAHyperLinkText(10131000, cast(op.source_deal_header_id as varchar), op.source_deal_header_id) 
		+''' for as of date: '+
		CONVERT(varchar(10),@curve_as_of_date,120) + ' for contract month: ' + CONVERT(varchar(10),op.term_start,120) +
		'<i>' + 
		': ' --+ case when (op.forward_price_1 is null) then 'Forward Price' else '' end + ', ' + 
		+ case when (op.spot_price_1 is null) then ' ->Spot/Current Price' else '' end + 
		--+ case when (op.discount_rate is null) then ' ->Discount Rate' else '' end + 
		+ case when (op.volatility_1 is null) then ' ->Volatility' else '' end +
		+ case when (op.strike_price = 0 AND op.internal_deal_type_value_id = 2) then ' ->Strike Price is 0.' else '' end +
		+ case when ((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.correlation is null) then ' ->Correlation.' else '' end +
		+ case when ((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.volatility_2 is null) then ' ->Volatility2.' else '' end +
		+ case when ((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.spot_price_2 is null) then ' ->Spot/Current Price2.' else '' end
		+ '</I>' [description], 'Please import Price Curve'	next_step

	--select op.spot_price_1,op.volatility_1,op.strike_price ,op.internal_deal_type_value_id,a.contract_expiration_date, *
	from #temp_deals a left outer join #option_param op on 	op.source_deal_header_id = a.source_deal_header_id and op.term_start = a.term_start
	where a.leg = 1 and ISNULL(a.option_flag, 'n') = 'y' AND
		(--op.forward_price_1 is null OR 
		op.spot_price_1 is null OR --op.discount_rate is null OR
		(op.volatility_1 is null and a.internal_deal_subtype_value_id<>102) OR 
		(op.strike_price = 0 AND op.internal_deal_type_value_id = 2) OR
		((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.correlation is null  and a.internal_deal_subtype_value_id<>102) OR
		((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.volatility_2 is null and a.internal_deal_subtype_value_id<>102) OR
		((op.internal_deal_type_value_id = 3 OR op.internal_deal_type_value_id = 18) AND op.spot_price_2 is null)) AND
		a.contract_expiration_date > a.curve_as_of_date
	AND op.source_deal_header_id IS NOT NULL 
--*/
	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Missing Price Curves: Inserting into #calc_status 1*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--Replaced this function FNACalcOptionsPrem with spa_calc_option_param
	--Because it was doing row wise calculation but now whole data calculates once using SP
	--Shushil Bohara
	--Begin
	IF OBJECT_ID('tempdb..#Options_Prem_detail') IS NOT NULL
		DROP TABLE #Options_Prem_detail

	IF OBJECT_ID(@options_prem_detail) IS NOT NULL 
		EXEC ('DROP TABLE ' + @options_prem_detail)

	EXEC('CREATE TABLE ' + @options_prem_detail + '(
		rowid INT
		, PREMIUM FLOAT
		, DELTA FLOAT
		, GAMMA FLOAT
		, VEGA FLOAT
		, THETA FLOAT
		, RHO FLOAT
		, DELTA2 FLOAT
		, GAMMA2 FLOAT
		, VEGA2 FLOAT
		, RHO2 FLOAT
		, THETA2 FLOAT
		, Method INT
		,attribute_type VARCHAR(1)  NULL
		,option_excercise_type VARCHAR(1)  NULL
		,idt INT
		)')

	CREATE TABLE #Options_Prem_detail(
		rowid INT
		, PREMIUM FLOAT
		, DELTA FLOAT
		, GAMMA FLOAT
		, VEGA FLOAT
		, THETA FLOAT
		, RHO FLOAT
		, DELTA2 FLOAT
		, GAMMA2 FLOAT
		, VEGA2 FLOAT
		, RHO2 FLOAT
		, THETA2 FLOAT
		,METHOD INT
		,attribute_type VARCHAR(1) COLLATE DATABASE_DEFAULT NULL
		,option_excercise_type VARCHAR(1) COLLATE DATABASE_DEFAULT NULL
		,IDT INT)

	UPDATE op SET op.org_strike_price =
		CASE WHEN (@T2-op.days_expiry) > 0 AND td.option_excercise_type = 's' THEN
			CASE WHEN ((@T2 / op.days_expiry) * op.strike_price - ((@T2-op.days_expiry) / op.days_expiry) * op.spot_price_1) < 0 THEN
				op.strike_price
			ELSE
				((@T2/op.days_expiry)*op.strike_price-((@T2-op.days_expiry)/op.days_expiry)*op.spot_price_1)
			END
		ELSE op.strike_price
		END
	FROM #option_param op
		INNER JOIN #temp_deals td ON td.source_deal_detail_id = op.source_deal_detail_id
	--WHERE td.option_excercise_type = 's'

	SET @sql = '
		SELECT 
			op.rowid row_id 
			, op.option_type CallPutFlag
			, op.internal_deal_type_value_id IDT
			, op.spot_price_1 S1
			, op.spot_price_2 S2
			, CASE op.internal_deal_type_value_id WHEN 2 THEN op.org_strike_price WHEN 18 THEN op.spot_price_2 ELSE op.strike_price END X
			, op.strike_price X1
			, op.days_expiry T
			, op.discount_rate R
			, CASE WHEN a.option_excercise_type = ''s'' THEN SQRT(LOG((2*EXP((POWER(op.volatility_1,2))*op.days_expiry)-2*EXP((POWER(op.volatility_1,2))*op.time_to_maturity)*(1+(POWER(op.volatility_1,2))*(op.days_expiry-op.time_to_maturity)))/((POWER(op.volatility_1,4))*POWER(op.days_expiry-op.time_to_maturity,2)))/op.days_expiry) ELSE op.volatility_1 END V1
			, CASE WHEN a.option_excercise_type = ''s'' THEN SQRT(LOG((2*EXP((POWER(op.volatility_2,2))*op.days_expiry)-2*EXP((POWER(op.volatility_2,2))*op.time_to_maturity)*(1+(POWER(op.volatility_2,2))*(op.days_expiry-op.time_to_maturity)))/((POWER(op.volatility_2,4))*POWER(op.days_expiry-op.time_to_maturity,2)))/op.days_expiry) ELSE op.volatility_2 END V2
			, op.correlation C
			, a.options_calc_method AS [Method]
			,op.attribute_type
			,a.option_excercise_type 
		INTO ' + @option_param + '
		FROM #option_param op WITH (NOLOCK) 
		INNER JOIN #temp_deals a WITH (NOLOCK) on op.source_deal_header_id = a.source_deal_header_id 
			AND op.term_start = a.term_start
			AND a.leg = 1 and ISNULL(a.option_flag, ''n'') = ''y'' 
			AND a.contract_expiration_date > ''' + @as_of_date + ''' --AND hr<>24
			AND ''' + @calc_type + '''<>''s'' 
			AND a.internal_deal_subtype_value_id <> 102 
			AND op.days_expiry > 0
		WHERE op.spot_price_1 IS NOT NULL 
			AND op.discount_rate IS NOT NULL 
			AND op.volatility_1 IS NOT NULL 
			AND op.spot_price_1 <> 0'
 
	exec spa_print @sql
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)

	-- EXEC('SELECT * INTO '+@option_param_table+' FROM #option_param' )
	
	 EXEC spa_calculate_options_using_R @option_param, @options_prem_detail
	
	EXEC spa_calc_options_prem_detail @option_param, @options_prem_detail

	EXEC('INSERT INTO #Options_Prem_detail SELECT * FROM '+ @options_prem_detail)

	UPDATE opd SET opd.PREMIUM =  
		CASE WHEN (@T2-op.days_expiry) > 0 AND td.option_excercise_type = 's' THEN
			CASE WHEN ((@T2 / op.days_expiry) * op.strike_price - ((@T2-op.days_expiry) / op.days_expiry) * op.spot_price_1) < 0 THEN
				CASE WHEN td.option_type = 'c' THEN
					(CASE WHEN ((op.spot_price_1*(@T2-op.days_expiry) / @T2 + spc.curve_value * op.days_expiry / @T2) - op.strike_price) < 0 THEN 0 ELSE ((op.spot_price_1*(@T2-op.days_expiry) / @T2 + spc.curve_value * op.days_expiry / @T2) - op.strike_price) END * EXP(-op.discount_rate*op.days_expiry))
				ELSE 0 END
			ELSE (opd.PREMIUM*op.days_expiry/@T2) END
		ELSE opd.PREMIUM END
	FROM #option_param op
	INNER JOIN #Options_Prem_detail opd ON opd.rowid = op.rowid
	INNER JOIN #temp_deals td ON td.source_deal_detail_id = op.source_deal_detail_id
	INNER JOIN source_price_curve spc ON spc.source_curve_def_id = op.curve_id
		AND spc.maturity_date = td.maturity_date
		AND spc.as_of_date = op.as_of_date
	

/*
-- Find if options calculation is already done using other methods
*/		
	SELECT DISTINCT method INTO #options_calc_method FROM	#Options_Prem_detail
--##############

	INSERT INTO #Options_Prem_detail (
	rowid
	,DELTA
	,DELTA2
	,method
	)
	SELECT op.rowid
		,CASE 
			WHEN (
					CASE 
						WHEN a.option_type = 'c'
							THEN 1
						ELSE - 1
						END * (
						isnull(op.spot_price_1, 0) * CASE 
							WHEN a.buy_sell_flag = 'b'
								THEN 1
							ELSE - 1
							END + isnull(op.spot_price_2, 0) * CASE 
							WHEN op.volume2 > 0
								THEN 1
							ELSE - 1
							END - isnull(op.strike_price, 0)
						)
					) > 0
				THEN 1
			ELSE 0
			END delta
		,CASE 
			WHEN (
					CASE 
						WHEN a.option_type = 'c'
							THEN 1
						ELSE - 1
						END * (
						isnull(op.spot_price_1, 0) * CASE 
							WHEN a.buy_sell_flag = 'b'
								THEN 1
							ELSE - 1
							END + isnull(op.spot_price_2, 0) * CASE 
							WHEN op.volume2 > 0
								THEN 1
							ELSE - 1
							END - isnull(op.strike_price, 0)
						)
					) > 0
				THEN 1
			ELSE 0
			END delta2,
			op.Method
	FROM #option_param op
	INNER JOIN #temp_deals a ON op.source_deal_header_id = a.source_deal_header_id
		AND op.term_start = a.term_start
		AND a.leg = 1
		AND ISNULL(a.option_flag, 'n') = 'y'
		AND a.contract_expiration_date > @as_of_date
		AND @calc_type <> 's'
	--	AND a.internal_deal_subtype_value_id = 102
		AND ISNULL(op.Method,'') = ISNULL(a.options_calc_method,'')
		 LEFT JOIN #options_calc_method ocm ON ocm.method = ISNULL(a.options_calc_method,'')	
		WHERE op.spot_price_1 IS NOT NULL AND (op.Method is not null OR a.internal_deal_subtype_value_id = 102)
			  AND ocm.method IS NULL
	
	insert into #source_deal_pnl_detail_options
	SELECT op.[source_deal_header_id]
		,op.[term_start]
		,AVG(op.[days_expiry]) [days_expiry]
		,MAX(op.[as_of_date]) [as_of_date]
		,MAX(op.[curve_1]) [curve_1]
		,MAX(op.[curve_2]) [curve_2]
		,MAX(op.[option_premium]) [option_premium]
		,MAX(op.[option_type]) [option_type]
		,MAX(op.[excercise_type]) [excercise_type]
		,max(op.[source_deal_type_id]) [source_deal_type_id]
		,MAX(op.[deal_sub_type_type_id]) [deal_sub_type_type_id]
		,MAX(op.[internal_deal_type_value_id]) [internal_deal_type_value_id]
		,MAX(op.[internal_deal_subtype_value_id]) [internal_deal_subtype_value_id]
		,MAX(op.[deal_volume]) [deal_volume]
		,max(op.[deal_volume_frequency] ) [deal_volume_frequency]
		,MAX(op.[deal_volume_uom_id]) [deal_volume_uom_id]
		,MAX(op.[correlation]) [correlation]
		,MAX(op.[volatility_2]) [volatility_2]
		,MAX(op.[deal_volume2]) [deal_volume2]
		,MAX(op.[total_deal_volume]) [total_deal_volume]
		,MAX(op.curve_uom_conv_factor) curve_uom_conv_factor
		,MAX(op.curve_fx_conv_factor) curve_fx_conv_factor
		,MAX(op.price_fx_conv_factor) price_fx_conv_factor
		,sum(op.[strike_price]*op.volume)/nullif(sum(op.volume),0) [strike_price]
		,sum(op.[spot_price_1]*op.volume)/nullif(sum(op.volume),0) [spot_price_1]
		,sum(op.[volatility_1]*op.volume)/nullif(sum(op.volume),0) [volatility_1]
		,SUM(op.[discount_rate] * op.volume) / NULLIF(SUM(op.volume), 0) [discount_rate]
		,SUM(op.[spot_price_2] * op.volume2) / NULLIF(SUM(op.volume2), 0) [spot_price_2]
		,SUM(PREMIUM * op.volume) / NULLIF(SUM(op.volume), 0) PREMIUM
		,SUM(opd.DELTA * op.volume) / NULLIF(SUM(op.volume), 0) DELTA
		,SUM(GAMMA * op.volume) / NULLIF(SUM(op.volume), 0) GAMMA
		,SUM(VEGA * op.volume) / NULLIF(SUM(op.volume), 0) VEGA
		,SUM(THETA * op.volume) / NULLIF(SUM(op.volume), 0) THETA
		,SUM(RHO * op.volume) / NULLIF(SUM(op.volume), 0) RHO
		,SUM(opd.DELTA2 * op.volume) / NULLIF(SUM(op.volume), 0) DELTA2
		,SUM(GAMMA2 * op.volume2) / NULLIF(SUM(op.volume2), 0) GAMMA2
		,SUM(VEGA2 * op.volume2) / NULLIF(SUM(op.volume2), 0) VEGA2
		,sum(RHO2*op.volume2)/nullif(sum(op.volume2),0) RHO2
		,sum(THETA2*op.volume2)/nullif(sum(op.volume2),0) THETA2
		,opd.Method
		,op.Attribute_type
	 from #option_param op  
		left join #Options_Prem_detail opd on op.rowid=opd.rowid
	AND ISNULL(op.method,'') = ISNULL(opd.method,'')
	GROUP BY op.[source_deal_header_id]
		,op.[term_start],opd.Method,op.Attribute_type
	
	---- test 
	

	
	CREATE INDEX IX_PT_OP_test1 on #option_param(rowid)
	CREATE INDEX IX_PT_OPD_test2 on #Options_Prem_detail(rowid)

	SELECT op.rowid
		,op.[source_deal_header_id]
		,op.[term_start]
		,(op.[days_expiry]) [days_expiry]
		,(op.[as_of_date]) [as_of_date]
		,(op.[curve_1]) [curve_1]
		,(op.[curve_2]) [curve_2]
		,(op.[option_premium]) [option_premium]
		,(op.[option_type]) [option_type]
		,(op.[excercise_type]) [excercise_type]
		,(op.[source_deal_type_id]) [source_deal_type_id]
		,(op.[deal_sub_type_type_id]) [deal_sub_type_type_id]
		,(op.[internal_deal_type_value_id]) [internal_deal_type_value_id]
		,(op.[internal_deal_subtype_value_id]) [internal_deal_subtype_value_id]
		,(op.[deal_volume]) [deal_volume]
		,(op.[deal_volume_frequency] ) [deal_volume_frequency]
		,(op.[deal_volume_uom_id]) [deal_volume_uom_id]
		,(op.[correlation]) [correlation]
		,(op.[volatility_2]) [volatility_2]
		,(op.[deal_volume2]) [deal_volume2]
		,(op.[total_deal_volume]) [total_deal_volume]
		,(op.curve_uom_conv_factor) curve_uom_conv_factor
		,(op.curve_fx_conv_factor) curve_fx_conv_factor
		,(op.price_fx_conv_factor) price_fx_conv_factor
		,(op.[strike_price]*op.volume)/nullif(op.volume,0) [strike_price]
		,(op.[spot_price_1]*op.volume)/nullif(op.volume,0) [spot_price_1]
		,(op.[volatility_1]*op.volume)/nullif(op.volume,0) [volatility_1]
		,(op.[discount_rate] * op.volume) / nullif(op.volume, 0) [discount_rate]
		,(op.[spot_price_2] * op.volume2) / nullif(op.volume2, 0) [spot_price_2]
		,(PREMIUM * op.volume) / nullif(op.volume, 0) PREMIUM
		,(opd.DELTA * op.volume) / nullif(op.volume, 0) DELTA
		,(GAMMA * op.volume) / nullif(op.volume, 0) GAMMA
		,(VEGA * op.volume) / nullif(op.volume, 0) VEGA
		,(THETA * op.volume) / nullif(op.volume, 0) THETA
		,(RHO * op.volume) / nullif(op.volume, 0) RHO
		,(opd.DELTA2 * op.volume) / nullif(op.volume, 0) DELTA2
		,(GAMMA2 * op.volume2) / nullif(op.volume2, 0) GAMMA2
		,(VEGA2 * op.volume2) / nullif(op.volume2, 0) VEGA2
		,(RHO2*op.volume2)/nullif(op.volume2,0) RHO2
		,(THETA2*op.volume2)/nullif(op.volume2,0) THETA2
		,opd.method
		,op.Attribute_type
		into #source_deal_pnl_detail_options_at_low
	 from #option_param op  
	LEFT JOIN #Options_Prem_detail opd ON op.rowid = opd.rowid
		AND op.save_mtm_at_calculation_granularity = 'y'
	

	DELETE s
		FROM [dbo].[source_option_greeks_detail] s
		INNER JOIN #option_param t ON s.[as_of_date] = t.[as_of_date]
			and s.[source_deal_header_id]=t.[source_deal_header_id]
			and s.[term_start]=t.[term_day]
			and s.[hr]=t.[hr]
			and s.period=t.period
			AND s.is_dst=t.is_dst
			and s.pnl_source_value_id=@pnl_source_value_id
		inner join #Options_Prem_detail opd on t.rowid=opd.rowid
		OPTION (
			MAXRECURSION 32767
			,MAXDOP 8
			)
		
	insert into [dbo].[source_option_greeks_detail](
		[as_of_date]
		,[source_deal_header_id]
		,[term_start]
		,[hr]
		,period
		,[pnl_source_value_id]
		,[PREMIUM]
		,[DELTA]
		,[GAMMA]
		,[VEGA]
		,[THETA]
		,[RHO]
		,[DELTA2]
		,[GAMMA2]
		,[VEGA2]
		,[RHO2]
		,[THETA2]
		,[create_user]
		,[create_ts]
		,is_dst
		)
	SELECT [as_of_date]
		,[source_deal_header_id]
		,op.term_day [term_start]
		,[hr]
		,period
		,@pnl_source_value_id [pnl_source_value_id]
		,[PREMIUM]
		,[DELTA]
		,[GAMMA]
		,[VEGA]
		,[THETA]
		,[RHO]
		,[DELTA2]
		,[GAMMA2]
		,[VEGA2]
		,[RHO2]
		,[THETA2]
		,@user_id
		,getdate()
		,op.is_dst
	 from  #option_param op  
		inner join #Options_Prem_detail opd on op.rowid=opd.rowid
	AND op.method = opd.method
	OPTION (
		MAXRECURSION 32767
		,MAXDOP 8
		)

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Calculating Options Greeks: Inserting into #source_deal_pnl_detail_options *****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	If @calc_type = 'm'
		delete source_deal_pnl_detail_options
		from source_deal_pnl_detail_options sdpo INNER JOIN
		#source_deal_pnl_detail_options op ON op.as_of_date = sdpo.as_of_date AND
						op.source_deal_header_id = sdpo.source_deal_header_id AND
						sdpo.pnl_source_value_id = @pnl_source_value_id
	Else
		delete source_deal_pnl_detail_options_WhatIf
		from source_deal_pnl_detail_options_WhatIf sdpo INNER JOIN
		#source_deal_pnl_detail_options op ON op.as_of_date = sdpo.as_of_date AND
						op.source_deal_header_id = sdpo.source_deal_header_id AND
						sdpo.pnl_source_value_id = @pnl_source_value_id
		WHERE sdpo.criteria_id = @criteria_id
	

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Deleting Options Detail: Deleting from source_deal_pnl_detail_options*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	If @calc_type = 'm'
		INSERT INTO source_deal_pnl_detail_options (
			as_of_date
			,source_deal_header_id
			,term_start
			,curve_1
			,curve_2
			,option_premium
			,strike_price
			,spot_price_1
			,days_expiry
			,volatility_1
			,discount_rate
			,option_type
			,excercise_type
			,source_deal_type_id
			,deal_sub_type_type_id
			,internal_deal_type_value_id
			,internal_deal_subtype_value_id
			,deal_volume
			,deal_volume_frequency
			,deal_volume_uom_id
			,correlation
			,volatility_2
			,spot_price_2
			,deal_volume2
			,total_deal_volume
			,PREMIUM
			,DELTA
			,GAMMA
			,VEGA
			,THETA
			,RHO
			,DELTA2
			,create_user
			,create_ts
			,pnl_source_value_id
			,GAMMA2
			,VEGA2
			,RHO2
			,THETA2
			,Method
			,attribute_type
			)
		SELECT as_of_date
			,source_deal_header_id
			,term_start
			,curve_1
			,curve_2
			,option_premium
			,strike_price
			,spot_price_1
			,days_expiry
			,volatility_1
			,discount_rate
			,option_type
			,excercise_type
			,source_deal_type_id
			,deal_sub_type_type_id
			,internal_deal_type_value_id
			,internal_deal_subtype_value_id
			,deal_volume
			,deal_volume_frequency
			,deal_volume_uom_id
			,correlation
			,volatility_2
			,spot_price_2
			,deal_volume2
			,total_deal_volume
			,PREMIUM
			,DELTA
			,GAMMA
			,VEGA
			,THETA
			,RHO
			,DELTA2
			,@user_id
			,getdate()
			,@pnl_source_value_id
			,GAMMA2
			,VEGA2
			,RHO2
			,THETA2
			,ISNULL(Method,1)
			,attribute_type
		 from   #source_deal_pnl_detail_options
		 WHERE 1 = CASE WHEN internal_deal_subtype_value_id = 102 THEN 
						CASE WHEN @process_linear_options_delta = 'y' THEN 1 ELSE 0 END
					ELSE 1 END
	Else
		insert into source_deal_pnl_detail_options_WhatIf
						  (criteria_id, as_of_date, source_deal_header_id, term_start, curve_1, curve_2, option_premium, strike_price, spot_price_1, days_expiry, volatility_1, 
						  discount_rate, option_type, excercise_type, source_deal_type_id, deal_sub_type_type_id, internal_deal_type_value_id, 
						  internal_deal_subtype_value_id, deal_volume, deal_volume_frequency, deal_volume_uom_id, correlation, volatility_2, spot_price_2, deal_volume2, 
						  total_deal_volume, PREMIUM, DELTA, GAMMA, VEGA, THETA, RHO, DELTA2,
						  create_user, create_ts, pnl_source_value_id, GAMMA2 , VEGA2 , RHO2 , THETA2)
		 SELECT @criteria_id, 
				as_of_date,
				source_deal_header_id,
				term_start,
				curve_1,
				curve_2,
				option_premium,
				strike_price,
				spot_price_1,
				days_expiry,
				volatility_1,
				discount_rate,
				option_type,
				excercise_type,
				source_deal_type_id,
				deal_sub_type_type_id,
				internal_deal_type_value_id,
				internal_deal_subtype_value_id,
				deal_volume,
				deal_volume_frequency,
				deal_volume_uom_id,
				correlation,
				volatility_2,
				spot_price_2,
				deal_volume2,
				total_deal_volume,
				PREMIUM,
				DELTA,
				GAMMA,
				VEGA,
				THETA,
				RHO,
				DELTA2,
				@user_id,
				getdate(),
				@pnl_source_value_id, GAMMA2 , VEGA2 , RHO2 , THETA2
		 from   #source_deal_pnl_detail_options


	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Inserting Options Detail: Inserting into source_deal_pnl_detail_options*****************************'	
	END

	If @options_only = 'y'
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Options only: Exiting after calculating only Options *****************************'	
		GOTO CleanUp_Process_Tables
	END

---------------------------------------------------------------------------------------------------------------------------------------------


	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	-- select * from #temp_curves
	--SELECT * FROM #temp_leg_mtm
	

	-- Calc for option deal 
	SET @mtm_value_01_opt = '
		Select a.source_deal_header_id, a.deal_id, a.term_start,a.term_end,a.curve_id,
				'
	set @mtm_value_02_opt='
		cast(0 as float) leg_mtm,
				CASE WHEN (a.leg) <> 1 THEN 0 ELSE
 					case when isnull(a.internal_deal_subtype_value_id,-1)<>102  then 
						(case when (a.buy_sell_flag=''s'') then -1 else 1 end * ISNULL(a.fixed_cost, 0) * b.fcucf_price_fx_conv_factor_deal) +
						ISNULL(ol.fixed_cost, 0) +(a.[deal_volume] *(market_price.market_price_deal+contract_price.contract_price_deal)) 
					else 
						isnull(opd1.leg_set,0)--- (isnull(op.option_premium,0) * isnull(opd1.[tot_volume],0)   *case when a.header_buy_sell_flag = ''b''  then 1 else -1 end)
					end	
		END as leg_mtm_deal,cast(0 as float) leg_mtm_inv
		,cast(0 as float) leg_set,
		case when a.calc_physical_financial_flag = ''f'' then isnull(opd1.leg_set,0) else 0 end leg_set_deal,cast(0 as float) leg_set_inv, '
				
	SET @mtm_value_03_opt = '
		CASE WHEN (a.leg) <> 1 THEN 0 ELSE
				case when isnull(a.internal_deal_subtype_value_id,-1)<>102 then
				--mtm
				((case when (a.buy_sell_flag=''s'') then -1 else 1 end * ISNULL(a.fixed_cost, 0) * b.fcucf_price_fx_conv_factor_deal) +
				ISNULL(ol.fixed_cost, 0) +(a.[deal_volume] *(market_price.market_price_deal+contract_price.contract_price_deal)))
						- 
						-- The following is intrinsic value
						case when (a.internal_deal_type_value_id = 2) then
								case when (a.buy_sell_flag = ''s'') then -1 else 1 end * 
									dbo.FNAMax(0, case when (a.option_type = ''c'') then op.spot_price_1 - op.strike_price else op.strike_price - op.spot_price_1 end)
							 when (a.internal_deal_type_value_id = 18) then
								case when (a.buy_sell_flag = ''s'') then -1 else 1 end * 
									dbo.FNAMax(0, case when (a.option_type = ''c'') then op.spot_price_1 - op.spot_price_2 else op.strike_price - op.spot_price_2 end)
							 else   ---- a.internal_deal_type_value_id = 3
								--case when (a.buy_sell_flag = ''s'') then -1 else 1 end * 
									dbo.FNAMax(0, case when (a.option_type = ''c'') then (op.spot_price_2 - op.spot_price_1) - op.strike_price else op.strike_price - (op.spot_price_1-op.spot_price_2 )  end)
				end *a.[deal_volume]
			else 
				0
						end 
		END extrinsic_value_deal, 
				NULL accrued_interest,
				a.[deal_volume]	--* CASE WHEN (a.leg = 1) THEN DELTA WHEN (a.leg=2) THEN DELTA2 ELSE 0 END 
				*case when a.buy_sell_flag=''s'' then -1 else 1 end volume,
				a.leg,
			'

	set @mtm_value_04_opt = '
		market_price.market_price_deal+contract_price.contract_price_deal   price_deal,
		NULL discount_rate, NULL no_days_left, NULL days_year, 1 discount_factor,
		case when (a.settled = 1) then ''y'' else ''n'' end expired_term,
		a.exp_curve_as_of_date curve_as_of_date,
		a.internal_deal_type_value_id,
		a.internal_deal_subtype_value_id,
		CASE WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL ELSE isnull(cucf.curve_uom_conv_factor, 1) END curve_uom_conv_factor,
		CASE WHEN (a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.cfcf_price_fx_conv_factor_deal, 1) END curve_fx_conv_factor_deal, 
		CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND b.pfcf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.pfcf_price_fx_conv_factor_deal, 1) END price_fx_conv_factor_deal,
		CASE WHEN (a.leg) <> 1 THEN 0 ELSE 
			case when isnull(a.internal_deal_subtype_value_id,-1)<>102 then			
				case when (a.contract_expiration_date >a.curve_as_of_date) then op.PREMIUM else coalesce(atc.avg_curve_value, market.curve_value)  end 
			else
				isnull(opd1.leg_set,0)/nullif(opd1.[tot_volume],0) --isnull(op.spot_price_1,0) - isnull(op.spot_price_2,0)
			end
		END curve_value,
		ISNULL(a.fixed_cost, 0) fixed_cost,
		isnull(a.fixed_price, 0)  fixed_price,
		isnull(f.formula_value, 0) formula_value,
		isnull(a.price_adder, 0) price_adder,
		isnull(a.price_multiplier, 1) price_multiplier,
		CASE WHEN (a.leg) <> 1 THEN 0 ELSE isnull(a.option_strike_price, 0) + isnull(ol.strike_price, 0) END strike_price,a.buy_sell_flag, a.leg_physical_financial_flag,
		CASE WHEN (a.fixed_cost_currency IS NOT NULL AND a.func_cur_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.fcucf_price_fx_conv_factor_deal, 1) END fixed_cost_fx_conv_factor_deal, 
		CASE WHEN (a.formula_currency IS NOT NULL AND a.func_cur_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.foucf_price_fx_conv_factor_deal, 1) END formula_fx_conv_factor_deal,
		CASE WHEN (a.price_adder_currency IS NOT NULL AND a.func_cur_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.pa1ucf_price_fx_conv_factor_deal, 1) END price_adder1_fx_conv_factor_deal,
		CASE WHEN (a.price_adder2_currency IS NOT NULL AND a.func_cur_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN NULL ELSE isnull(b.pa2ucf_price_fx_conv_factor_deal, 1) END price_adder2_fx_conv_factor_deal,
				isnull(a.volume_multiplier, 1) volume_multiplier,isnull(a.volume_multiplier2, 1) volume_multiplier2,isnull(a.price_adder2, 0) price_adder2,	a.pay_opposite,
				'

	set @mtm_value_05_opt = case when @calc_type ='s' then '
			0 error_deal,'''' error_deal_reason, '
	else
	'
	case when a.exception_handle=1 then
		CASE WHEN ( a.curve_id IS NOT NULL AND market.curve_value  IS NULL) THEN NULL 
					WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id<>a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN NULL
			WHEN (a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL) THEN NULL
			WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND b.pfcf_price_fx_conv_factor_deal IS NULL) THEN NULL
			WHEN (a.fixed_cost_currency IS NOT NULL AND a.func_cur_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN NULL
			WHEN (a.formula_currency IS NOT NULL AND a.func_cur_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN NULL
			WHEN (a.price_adder_currency IS NOT NULL AND a.func_cur_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN NULL
			WHEN (a.price_adder2_currency IS NOT NULL AND a.func_cur_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN NULL
		ELSE 0 END 
	else 0 end	error_deal,
	case when a.exception_handle=1 then
		CASE WHEN (a.product_id=4101 AND a.curve_id IS NOT NULL AND market.curve_value  IS NULL) THEN '' Price Curve'' ELSE '''' END +
				CASE WHEN (a.curve_uom_id IS NOT NULL AND a.curve_uom_id <> a.deal_volume_uom_id AND cucf.curve_uom_conv_factor IS NULL) THEN '', UOM conversion'' ELSE '''' END +
		CASE WHEN (a.pricing not in (1601,1602) AND a.curve_currency_id IS NOT NULL AND a.func_cur_id <> a.curve_currency_id AND b.cfcf_price_fx_conv_factor_deal IS NULL) THEN '', Price FX conversion'' ELSE '''' END +
		CASE WHEN (a.fixed_price_currency_id IS NOT NULL AND a.func_cur_id <> a.fixed_price_currency_id AND b.pfcf_price_fx_conv_factor_deal IS NULL) THEN '', Fixed Price FX conversion'' ELSE '''' END +
		CASE WHEN (a.fixed_cost_currency IS NOT NULL AND a.func_cur_id <> a.fixed_cost_currency AND b.fcucf_price_fx_conv_factor_deal IS NULL) THEN '', Fixed Cost FX conversion'' ELSE '''' END +
		CASE WHEN (a.formula_currency IS NOT NULL AND a.func_cur_id <> a.formula_currency AND b.foucf_price_fx_conv_factor_deal IS NULL) THEN '', Formula FX conversion'' ELSE '''' END +
		CASE WHEN (a.price_adder_currency IS NOT NULL AND a.func_cur_id <> a.price_adder_currency AND b.pa1ucf_price_fx_conv_factor_deal IS NULL) THEN '', PriceAdder FX conversion'' ELSE '''' END +
		CASE WHEN (a.price_adder2_currency IS NOT NULL AND a.func_cur_id <> a.price_adder2_currency AND b.pa2ucf_price_fx_conv_factor_deal IS NULL) THEN '', PriceAdder2 FX conversion'' ELSE '''' END 
	else '''' end error_deal_reason ,'
	end		
	set @mtm_value_06_opt='
		a.curve_uom_id,a.deal_volume_uom_id,a.fixed_price_currency_id, a.price_adder_currency, a.price_adder2_currency, a.func_cur_id, 
		a.formula_currency, a.fixed_cost_currency,cast(0 as float) market_value,
		market_price.market_price_deal*a.[deal_volume]	market_value_deal,cast(0 as float) market_value_inv,cast(0 as float) contract_value,
		 contract_price.contract_price_deal*a.[deal_volume] contract_value_deal,cast(0 as float) contract_value_inv	,
		cast(0 as float) simple_formula_curve_value,cast(0 as float) simple_formula_curve_value_deal,cast(0 as float) simple_formula_curve_value_inv,
		cast(0 as float) formula_conv_factor,cast(0 as float) formula_conv_factor_deal,cast(0 as float) formula_conv_factor_inv
	'

	set @mtm_value_07_opt='
		,NULL formula_rounding,	NULL formula_id,NULL contract_id,NULL product_id,a.source_deal_detail_id,a.formula_curve_id,	NULL,
		contract_price.contract_price_deal,market_price.market_price_deal,a.[deal_volume] , b.deal_cur_id, b.inv_cur_id				
		,cast(0 as float) price,cast(0 as float) extrinsic_value,cast(0 as float) contract_price,cast(0 as float) market_price 
		,cast(0 as float) price_inv,cast(0 as float) extrinsic_value_inv,cast(0 as float) contract_price_inv,cast(0 as float) market_price_inv
		,cast(0 as float) price_adder2_fx_conv_factor,cast(0 as float) price_adder1_fx_conv_factor 
		,cast(0 as float) formula_fx_conv_factor,cast(0 as float) fixed_cost_fx_conv_factor 
		,cast(0 as float) curve_fx_conv_factor,cast(0 as float) price_fx_conv_factor 
		,cast(0 as float) price_adder2_fx_conv_factor_inv ,cast(0 as float) price_adder1_fx_conv_factor_inv 
		,cast(0 as float) formula_fx_conv_factor_inv ,cast(0 as float) fixed_cost_fx_conv_factor_inv 
		,cast(0 as float) curve_fx_conv_factor_inv ,cast(0 as float) price_fx_conv_factor_inv 
		,cast(0 as float) formula_value,cast(0 as float) price_adder
		,cast(0 as float) price_adder2,cast(0 as float) fixed_cost
		,cast(0 as float) fixed_price,cast(0 as float) curve_value
		,cast(0 as float) formula_value_inv,cast(0 as float) price_adder_inv
		,cast(0 as float) price_adder2_inv,cast(0 as float) fixed_cost_inv
		,cast(0 as float) fixed_price_inv,cast(0 as float) curve_value_inv,null,null,null,null,null,null
	'
	set @sql_col = ',null tou,null,-1 shipment_id,-1 ticket_detail_id,a.state_value_id, a.tier_value_id, null mw_position,null match_info_id'	



 	set @mtm_value_08_opt = '	
 		from #temp_deals a 
			LEFT  JOIN #source_deal_pnl_detail_options op on op.source_deal_header_id = a.source_deal_header_id and op.term_start = a.term_start 
			outer apply ( 
				select sum( 
						dbo.FNAMax(
							case when b.option_type = ''c'' then 
							(isnull(opd.spot_price_2* abs(opd.volume2),0)-isnull(opd.spot_price_1* abs(opd.volume),0)) - isnull(opd.strike_price* abs(opd.volume),0)
							else isnull(opd.strike_price* abs(opd.volume),0)-
								(isnull(opd.spot_price_1* abs(opd.volume),0)-isnull(opd.spot_price_2* abs(opd.volume2),0)) 
							end,0)
					) leg_set,abs(sum(opd.volume)) tot_volume from #option_param opd
			 inner JOIN #temp_deals b ON  opd.source_deal_header_id = b.source_deal_header_id and opd.term_start = b.term_start AND  b.leg=1
			  and opd.source_deal_header_id = a.source_deal_header_id and opd.term_start = a.term_start and a.leg=1
			) opd1 '
			
	set @mtm_value_09_opt = '			
		left join #temp_curves tc on tc.source_curve_def_id = a.curve_id AND 
					 tc.maturity_date = a.curve_type_maturity_date AND 	tc.as_of_date = a.exp_curve_as_of_date
		LEFT OUTER JOIN	#temp_curves tc_p ON tc_p.source_curve_def_id = a.proxy_curve_id AND 
					tc_p.maturity_date = a.proxy_curve_maturity AND
					tc_p.as_of_date = a.curve_as_of_date
		LEFT OUTER JOIN	#temp_curves tc_m ON tc_m.source_curve_def_id = a.monthly_index AND 
					tc_m.maturity_date = a.monthly_index_maturity AND
					tc_m.as_of_date =a.curve_as_of_date 
		LEFT OUTER JOIN	#temp_curves tc_p3 ON tc_p3.source_curve_def_id = a.proxy_curve_id3 AND 
					tc_p3.maturity_date = a.proxy_curve_maturity3 AND
					tc_p3.as_of_date =a.curve_as_of_date
		outer apply
		(
			select case when isnull(a.bid_n_ask_price,''n'')=''n'' then  coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value)
				when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''b'' then coalesce(tc.bid_value, tc_p.bid_value, tc_m.bid_value, tc_p3.bid_value)
				when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''s'' then coalesce(tc.ask_value, tc_p.ask_value, tc_m.ask_value, tc_p3.ask_value)
				else coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value) end curve_value
		) market
		LEFT JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND atc.leg = a.leg  
		and a.source_deal_detail_id=atc.source_deal_detail_id
		LEFT JOIN #curve_uom_conv_factor cucf ON cucf.deal_volume_uom_id  =  a.deal_volume_uom_id AND 	cucf.curve_uom_id =a.curve_uom_id
		left join #fx_conversion_values b on b.source_deal_detail_id=a.source_deal_detail_id
		LEFT  JOIN #formula_value f ON a.term_start = f.term_start and	a.formula_id = f.formula_id
		outer apply (
			select sum(strike_price*volume2)/nullif(sum(volume2),0) strike_price,max(deal_volume) deal_volume,max(volatility) volatility
			,sum(curve2_value*volume2)/nullif(sum(volume2),0) curve2_value,max(fixed_cost) fixed_cost from #option_leg2 
			where source_deal_header_id = a.source_deal_header_id AND term_day between a.term_start and a.term_end
		) ol '

	set @mtm_value_10_opt = '	
		outer apply ( select
			CASE WHEN (a.leg) <> 1 THEN 0 ELSE 
					case when isnull(a.internal_deal_subtype_value_id,-1)<>102  then						
					case when (a.contract_expiration_date >a.curve_as_of_date) then	--forward months		
					case when a.internal_deal_type_value_id = 3 then case when a.buy_sell_flag=''b'' then 1 else -1 end else case when a.buy_sell_flag=''b'' then -1 else 1 end end *
						--case when a.buy_sell_flag=''b'' then -1 else 1 end *
					((isnull(b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.fixed_price, 0) * isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(b.pa1ucf_price_fx_conv_factor_deal, 1)) + (isnull(a.price_adder2, 0)*isnull(b.pa2ucf_price_fx_conv_factor_deal, 1)) + 
					(coalesce(atc.avg_curve_value,f.formula_value, 0)*isnull(a.price_multiplier, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)))
					else
						case when (a.calc_physical_financial_flag = ''f'') then
					case when (a.option_type = ''c'' AND a.buy_sell_flag = ''s'') then dbo.FNAMax((isnull(b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.option_strike_price, 0)+ isnull(ol.strike_price, 0)), 0)
							when (a.option_type = ''c'' AND a.buy_sell_flag = ''b'') then -1 * (isnull(b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.option_strike_price, 0)+ isnull(ol.strike_price, 0))
							when (a.option_type = ''p'' AND a.buy_sell_flag = ''b'') then dbo.FNAMax(isnull(cucf.curve_uom_conv_factor, 1) * isnull(b.cfcf_price_fx_conv_factor_deal, 1) * market.curve_value , 0) 
							else -1 *(isnull(cucf.curve_uom_conv_factor, 1) * isnull(b.cfcf_price_fx_conv_factor_deal, 1) * market.curve_value )
							end
						else 0 end 
					end
					else
						0 --isnull(op.option_premium,0) --isnull(op.strike_price,0)
					end 
			END contract_price_deal) contract_price
		outer apply ( select
			CASE WHEN (a.leg) <> 1 THEN 0 ELSE 
				case when isnull(a.internal_deal_subtype_value_id,-1)<>102 then		
					case when (a.contract_expiration_date > a.curve_as_of_date) then	--forward months				
						case when a.internal_deal_type_value_id = 3 then 1 else case when a.buy_sell_flag=''s'' then -1 else 1 end end*op.PREMIUM 
					else
						case when (a.calc_physical_financial_flag = ''f'') then
					case when (a.option_type = ''c'' AND a.buy_sell_flag = ''b'') then dbo.FNAMax(isnull(cucf.curve_uom_conv_factor, 1) * isnull(b.cfcf_price_fx_conv_factor_deal, 1) * market.curve_value , 0)
							when (a.option_type = ''c'' AND a.buy_sell_flag = ''s'') then (isnull(cucf.curve_uom_conv_factor, 1) * isnull(b.cfcf_price_fx_conv_factor_deal, 1) * market.curve_value )
							when (a.option_type = ''p'' AND a.buy_sell_flag = ''b'') then dbo.FNAMax((isnull(b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.option_strike_price, 0)+ isnull(ol.strike_price, 0)) , 0) 
							else   ((isnull(b.pfcf_price_fx_conv_factor_deal, 1) * isnull(a.option_strike_price, 0) + isnull(ol.strike_price, 0)))
							end
						else 0	end 
					end
				else 
					isnull(opd1.leg_set,0)/nullif(opd1.[tot_volume],0) --- isnull(op.spot_price_2,0)
				end
			END market_price_deal
		) market_price
		where ISNULL(a.option_flag, ''n'') = ''y'' and not (a.internal_deal_type_value_id IN (103) AND a.internal_deal_subtype_value_id = 102 AND '''+@process_linear_options_delta+''' = ''y'')
		--AND a.internal_deal_type_value_id <> 103 AND a.internal_deal_subtype_value_id <> 102  --and isnull(a.internal_deal_subtype_value_id,-1)<>102  --and a.leg = 1
 	'
	EXEC spa_print 'INSERT INTO #temp_leg_mtm '
	EXEC spa_print @mtm_value_01_opt
	EXEC spa_print @mtm_value_02_opt
	EXEC spa_print @mtm_value_03_opt
	EXEC spa_print @mtm_value_04_opt
	EXEC spa_print @mtm_value_05_opt
	EXEC spa_print @mtm_value_06_opt
	EXEC spa_print @mtm_value_07_opt
	EXEC spa_print @sql_col
	EXEC spa_print @mtm_value_08_opt
	EXEC spa_print @mtm_value_09_opt
	EXEC spa_print @mtm_value_10_opt

	--To revert the non-option deal again to process as non-option deals
	UPDATE #temp_deals SET option_flag = 'n' WHERE internal_deal_type_value_id IN (11, 165) AND internal_deal_subtype_value_id = 102 AND @process_linear_options_delta = 'y'

	EXEC('
		INSERT INTO #temp_leg_mtm '+@mtm_value_01_opt+@mtm_value_02_opt+@mtm_value_03_opt
		+@mtm_value_04_opt +@mtm_value_05_opt
		+@mtm_value_06_opt+@mtm_value_07_opt+@sql_col
		+@mtm_value_08_opt+@mtm_value_09_opt+@mtm_value_10_opt
	)

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************#temp_leg_mtm: Calculate for Options Deals*****************************'	
	END



END

if @calc_type='s'
begin
	update #temp_deals 
		set invoice_fx_rate=fx.price_fx_conv_factor
	from #temp_deals a
	outer apply
	(	
		select 
			round(avg(COALESCE(spc.curve_value, 1/NULLIF(spc2.curve_value,0))),a.fx_rounding) price_fx_conv_factor 
		from source_price_curve_def spcd 
			inner join source_price_curve spc on spc.source_curve_def_id=spcd.source_curve_def_id
				AND spc.curve_source_value_id =@curve_source_value_id
				and spc.maturity_date=spc.as_of_date and spc.maturity_date=a.invoice_date

			LEFT JOIN source_price_curve_def spcd2 ON	spcd2.source_system_id = spcd.source_system_id  
					and spcd2.source_currency_id = spcd.source_currency_to_ID 
					AND	spcd2.source_currency_to_ID = spcd.source_currency_ID	
					and	spcd2.Granularity=981

			left join source_price_curve spc2 on spc2.source_curve_def_id=spcd2.source_curve_def_id
				AND spc2.curve_source_value_id =@curve_source_value_id
				and spc2.maturity_date=spc2.as_of_date and spc2.maturity_date=a.invoice_date
		where 
			spcd.source_currency_id = a.fixed_price_currency_id
			AND spcd.source_currency_to_ID = a.settlement_currency and a.fx_option=104501 
			AND spcd.source_system_id = a.source_system_id and	spcd.Granularity=981
			and COALESCE(spc.maturity_date, spc2.maturity_date) IS NOT NULL
	) fx
	where a.fx_option=104501 and a.invoice_fx_rate is null

end


---------------------------------------------------------
-- convert into invoice currency from deal currency
---------------------------------------------------------

update #temp_leg_mtm 
set
	market_value_inv=market_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,contract_value_inv=contract_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,simple_formula_curve_value_inv=simple_formula_curve_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,formula_conv_factor_inv=formula_conv_factor_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,leg_mtm_inv=leg_mtm_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,leg_set_inv=leg_set_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	
	,price_inv=price_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,extrinsic_value_inv=extrinsic_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1) 
	,contract_price_inv=contract_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,market_price_inv=market_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)

	,price_adder2_fx_conv_factor_inv=price_adder2_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,price_adder1_fx_conv_factor_inv=price_adder1_fx_conv_factor_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,formula_fx_conv_factor_inv=formula_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,fixed_cost_fx_conv_factor_inv=fixed_cost_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,curve_fx_conv_factor_inv=curve_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,price_fx_conv_factor_inv=price_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	
	,formula_value_inv=formula_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,price_adder_inv=price_adder_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,price_adder2_inv=price_adder2_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,fixed_cost_inv=fixed_cost_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,fixed_price_inv=fixed_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	,curve_value_inv=curve_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
from #temp_leg_mtm tlm
inner join #temp_deals a on a.source_deal_detail_id=tlm.source_deal_detail_id
outer apply
(	select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
		where fx_currency_id =  coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency) AND 
		func_cur_id = a.settlement_currency AND source_system_id = a.source_system_id
			AND maturity_date between a.term_start and a.term_end
			and market_value_desc=a.fx_conversion_market
			AND as_of_date>= case when @calc_type='s' then @term_start else a.curve_as_of_date end 
			AND as_of_date<= case when @calc_type='s' then @term_end else a.curve_as_of_date end 


		--	and fx_conversion_market=a.fx_conversion_market
		--AND
		--( (a.fx_option<>104501 and  maturity_date between a.term_start and a.term_end)
		--	or ( @calc_type='s' and a.fx_option=104501 and maturity_date=dbo.FNAInvoiceDueDate(a.settlement_date,a.invoice_due_date,a.holiday_calendar_id,a.settlement_days)))
) fx
--left join #fx_conversion_values b on b.source_deal_detail_id=a.source_deal_detail_id

--------------------------------------------------------------	
-- convert into functional currency from  deal currency
--------------------------------------------------------------

update #temp_leg_mtm set
	market_value=market_value_deal *isnull(fx.price_fx_conv_factor,1)
	,contract_value=contract_value_deal *isnull(fx.price_fx_conv_factor,1)
	,simple_formula_curve_value=simple_formula_curve_value_deal *isnull(fx.price_fx_conv_factor,1)
	,formula_conv_factor=formula_conv_factor_deal *isnull(fx.price_fx_conv_factor,1)
	,leg_mtm=leg_mtm_deal *isnull(fx.price_fx_conv_factor,1)
	,leg_set=leg_set_deal *isnull(fx.price_fx_conv_factor,1)
	,price=price_deal *isnull(fx.price_fx_conv_factor,1)
	,extrinsic_value=extrinsic_value_deal*isnull(fx.price_fx_conv_factor,1) 
	,contract_price=contract_price_deal*isnull(fx.price_fx_conv_factor,1)
	,market_price=market_price_deal*isnull(fx.price_fx_conv_factor,1)
	,price_adder2_fx_conv_factor=price_adder2_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
	,price_adder1_fx_conv_factor=price_adder1_fx_conv_factor_deal *isnull(fx.price_fx_conv_factor,1)
	,formula_fx_conv_factor=formula_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
	,fixed_cost_fx_conv_factor=fixed_cost_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
	,curve_fx_conv_factor=curve_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
	,price_fx_conv_factor=price_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
	,formula_value=formula_value_deal*isnull(fx.price_fx_conv_factor,1)
	,price_adder=price_adder_deal *isnull(fx.price_fx_conv_factor,1)
	,price_adder2=price_adder2_deal*isnull(fx.price_fx_conv_factor,1)
	,fixed_cost=fixed_cost_deal *isnull(fx.price_fx_conv_factor,1)
	,fixed_price=fixed_price_deal*isnull(fx.price_fx_conv_factor,1)
	,curve_value=curve_value_deal*isnull(fx.price_fx_conv_factor,1)

from #temp_leg_mtm tlm
	inner join #temp_deals a on a.source_deal_detail_id=tlm.source_deal_detail_id
	outer apply
	(	
		select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
		where fx_currency_id =  coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency) 
			AND func_cur_id = a.func_cur_id AND source_system_id = a.source_system_id
			AND maturity_date between a.term_start and a.term_end
			and market_value_desc=a.fx_conversion_market
			AND as_of_date>= case when @calc_type='s' then @term_start else a.curve_as_of_date end 
			AND as_of_date<= case when @calc_type='s' then @term_end else a.curve_as_of_date end 
	) fx

--------------------------------------------------------------------------------------
	IF OBJECT_ID('tempdb..#tmp_economical_deals_detail') IS NOT NULL
	DROP TABLE #tmp_economical_deals_detail

	SELECT tlm1.*
	INTO #tmp_economical_deals_detail
	FROM #temp_leg_mtm tlm
	OUTER APPLY(
				SELECT TOP 1 * FROM (
				SELECT tlm1.curve_as_of_date,
					tlm1.source_deal_header_id,
					tlm1.source_deal_detail_id,
					(tlm1.leg_mtm+(ISNULL(sdd.option_strike_price,0)*tlm1.volume)) val,
					tlm1.leg,
					tlm1.term_start,
					tlm1.volume 
				FROM #temp_leg_mtm tlm1
				INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tlm1.source_deal_detail_id
				WHERE tlm1.source_deal_header_id = tlm.source_deal_header_id
				AND tlm1.curve_as_of_date = tlm.curve_as_of_date
				AND tlm1.term_start = tlm.term_start) tlm1 ORDER BY val DESC) tlm1
	WHERE tlm1.source_deal_header_id = tlm.source_deal_header_id
	AND tlm1.curve_as_of_date = tlm.curve_as_of_date
	AND tlm1.source_deal_detail_id = tlm.source_deal_detail_id
	AND tlm1.term_start = tlm.term_start
	AND tlm.internal_deal_type_value_id = 165
	AND tlm.internal_deal_subtype_value_id = 102

	DELETE tlm
	FROM #temp_leg_mtm tlm
	INNER JOIN #tmp_economical_deals_detail tedd ON tedd.source_deal_header_id = tlm.source_deal_header_id
	AND tedd.curve_as_of_date = tlm.curve_as_of_date
	AND tedd.term_start = tlm.term_start
	AND tedd.leg <> tlm.leg
	AND tlm.internal_deal_type_value_id = 165
	AND tlm.internal_deal_subtype_value_id = 102

 
-- for explain reforecast, update the volume to zero
if @calc_explain_type = 'f'
	update #temp_deals set deal_volume=0,contract_volume=0,capacity=0

 
-- CALCULATE FEES AND INDEX CONTRACT VALUE BREAKDOWN
IF @calc_type = 'm'
BEGIN

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end


	if @calc_result_table is not null
	begin
		set @sqlstmt='CASE WHEN (t.product_id=4101) THEN CASE WHEN (t.buy_sell_flag=''b'') THEN -1 ELSE 1 END
						ELSE CASE WHEN (t.buy_sell_flag=''b'') THEN 1 ELSE -1 END END 
					* ABS(t.volume) *  CASE WHEN t.deal_volume < 0 AND t.buy_sell_flag=''b'' THEN -1 ELSE 1 END 
					* round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100))'

		SET @sqlstmt1 = '
		insert into #fees_breakdown 
		(
			as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
			field_id ,field_name ,
			price_deal ,price ,price_inv ,
			total_price_deal ,total_price ,total_price_inv ,
			volume ,value_deal,[value],value_inv ,
			deal_cur_id ,inv_cur_id ,
			contract_value_deal ,contract_value ,contract_value_inv ,
			internal_type ,tab_group_name ,udf_group_name ,
			[sequence] ,fee_currency_id ,currency_id ,
			contract_mkt_flag,source_deal_detail_id 
			,counterparty_id,contract_id
		)
		SELECT	''' + @as_of_date + ''' as_of_date, 
			t.source_deal_header_id,t.leg, 	t.term_start, t.term_end,
			-1*d.curve_id field_id, --Contract value
			spcd.curve_name field_name,
			round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor price_deal,
			round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor price, --in position and functional uom
			round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor price_inv
				,ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END)/ABS(t.volume) total_price_deal,
			ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value ELSE t.market_value END)/ABS(t.volume) total_price
			,ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value_inv ELSE t.market_value_inv END)/ABS(t.volume) total_price_inv,
			CASE WHEN t.buy_sell_flag=''s'' THEN 1 ELSE -1 END * 
			ABS(t.volume) volume,
			'+@sqlstmt+' * t.formula_conv_factor_deal value_deal,
			'+@sqlstmt+' * t.formula_conv_factor value,
			'+@sqlstmt+' * t.formula_conv_factor_inv value_inv,
				t.deal_cur_id, t.inv_cur_id,
			CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END contract_value_deal,
			CASE WHEN (t.product_id=4101) THEN t.contract_value ELSE t.market_value END contract_value,
			CASE WHEN (t.product_id=4101) THEN t.contract_value_inv ELSE t.market_value_inv END contract_value_inv,
			-1 internal_type, -- contract value break down
			NULL tab_group_name,
			NULL udf_group_name,
			d.seq_number sequence, 		
			t.func_cur_id fee_currency_id,
			t.func_cur_id currency_id,
			case when (ISNULL(t.product_id,4101) = 4101) then ''c'' else ''m'' end contract_mkt_flag,t.source_deal_detail_id
			,td.counterparty_id,td.contract_id
		FROM ' + @calc_result_table + ' h INNER JOIN ' + @calc_result_table_breakdown + ' d ON 
			h.source_id = d.source_id INNER JOIN
			source_price_curve_def spcd ON spcd.source_curve_def_id = d.curve_id 
		cross apply
		(
			select source_deal_header_id,source_deal_detail_id,leg, term_start, term_end
				,max(formula_rounding) formula_rounding, max(product_id) product_id,max(buy_sell_flag) buy_sell_flag
				,max(formula_conv_factor) formula_conv_factor,max(formula_conv_factor_deal) formula_conv_factor_deal
				,max(formula_conv_factor_inv) formula_conv_factor_inv
				,max( deal_cur_id) deal_cur_id, max(inv_cur_id) inv_cur_id,max(func_cur_id) func_cur_id
				,sum(volume) volume
				,sum(deal_volume) deal_volume
				,sum(contract_value_deal) contract_value_deal,sum(market_value_deal) market_value_deal
				,sum(contract_value) contract_value, sum(market_value) market_value
				,sum(contract_value_inv) contract_value_inv, sum(market_value_inv ) market_value_inv
			from #temp_leg_mtm  where source_deal_detail_id = h.source_deal_detail_id
			group by source_deal_header_id,source_deal_detail_id,leg, term_start, term_end
		) t
		left join #component_price cp on cp.source_deal_detail_id = h.source_deal_detail_id
		left join #temp_deals td on td.source_deal_detail_id = h.source_deal_detail_id -- 	,counterparty_id,contract_id
		WHERE t.volume <> 0 AND isnumeric(d.eval_value) = 1 and cp.source_deal_detail_id is null;
		'
		EXEC spa_print  @sqlstmt1
		exec(@sqlstmt1)
	end


	if @calc_result_table2 is not null
	begin
		set @sqlstmt='CASE WHEN (t.product_id=4101) THEN CASE WHEN (t.buy_sell_flag=''b'') THEN -1 ELSE 1 END
							ELSE CASE WHEN (t.buy_sell_flag=''b'') THEN 1 ELSE -1 END END
						*ABS(h.volume) * CASE WHEN t.deal_volume < 0 AND t.buy_sell_flag=''b'' THEN -1 ELSE 1 END 
						*round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100))'

		SET @sqlstmt2 = '
		insert into #fees_breakdown 
		(
			as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
			field_id ,field_name ,
			price_deal ,price ,price_inv ,
			total_price_deal ,total_price ,total_price_inv ,
			volume ,value_deal,[value],value_inv ,
			deal_cur_id ,inv_cur_id ,
			contract_value_deal ,contract_value ,contract_value_inv ,
			internal_type ,tab_group_name ,udf_group_name ,
			[sequence] ,fee_currency_id ,currency_id ,
			contract_mkt_flag,source_deal_detail_id ,counterparty_id,contract_id
		)
		SELECT	''' + @as_of_date + ''' as_of_date, t.source_deal_header_id,t.leg, 
				t.term_start term_start, t.term_end term_end,
				-1*d.curve_id field_id, --Contract value
			MAX(spcd.curve_name) field_name
			,SUM((round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor) * ABS(h.volume))/NULLIF(SUM(ABS(h.volume)), 0) price_deal,		
			SUM((round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor) * ABS(h.volume))/NULLIF(SUM(ABS(h.volume)), 0) price, --in position and functional uom
			SUM((round(isnull(d.eval_value, 0), isnull(t.formula_rounding, 100)) * formula_conv_factor) * ABS(h.volume))/NULLIF(SUM(ABS(h.volume)), 0) price_inv
			,MAX(ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END)/NULLIF(ABS(t.volume), 0)) total_price_deal,
			MAX(ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value ELSE t.market_value END)/NULLIF(ABS(t.volume), 0)) total_price
			,MAX(ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value_inv ELSE t.market_value_inv END)/NULLIF(ABS(t.volume), 0)) total_price_inv,		
			SUM(CASE WHEN t.buy_sell_flag=''s'' THEN 1 ELSE -1 END * ABS(h.volume)) volume,
				SUM('+@sqlstmt +'* formula_conv_factor_deal)  value_deal,
				SUM('+@sqlstmt +'* formula_conv_factor)  value,
				SUM('+@sqlstmt +'* formula_conv_factor_inv)  value_inv,
				max(t.deal_cur_id) deal_cur_id, max(t.inv_cur_id) inv_cur_id,
				max(CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END) contract_value_deal,			max(CASE WHEN (t.product_id=4101) THEN t.contract_value ELSE t.market_value END) contract_value, 
				max(CASE WHEN (t.product_id=4101) THEN t.contract_value_inv ELSE t.market_value_inv END) contract_value_inv,			
				-1 internal_type, -- contract value break down
				NULL tab_group_name,
				NULL udf_group_name,
				MIN(d.seq_number) sequence, 		
				MIN(t.func_cur_id) fee_currency_id,
				MIN(t.func_cur_id) currency_id,
				MAX(case when (ISNULL(t.product_id,4101) = 4101) then ''c'' else ''m'' end)  contract_mkt_flag
				,max(t.source_deal_detail_id)  source_deal_detail_id,max(td.counterparty_id),max(td.contract_id)
	--	into #fees_breakdown_002
		FROM ' + @calc_result_table2 + ' h  INNER JOIN  ' + @calc_result_table_breakdown2 + ' d ON 
			h.source_id = d.source_id INNER JOIN
			source_price_curve_def spcd ON spcd.source_curve_def_id = d.curve_id 
		cross apply
		(
			select source_deal_header_id,source_deal_detail_id, leg, term_start, term_end
				,max(formula_rounding) formula_rounding, max(product_id) product_id,max(buy_sell_flag) buy_sell_flag
				,max(formula_conv_factor) formula_conv_factor,max(formula_conv_factor_deal) formula_conv_factor_deal
				,max(formula_conv_factor_inv) formula_conv_factor_inv
				,max( deal_cur_id) deal_cur_id, max(inv_cur_id) inv_cur_id,max(func_cur_id) func_cur_id
				,sum(volume) volume
				,sum(deal_volume) deal_volume
				,sum(contract_value_deal) contract_value_deal,sum(market_value_deal) market_value_deal
				,sum(contract_value) contract_value, sum(market_value) market_value
				,sum(contract_value_inv) contract_value_inv, sum(market_value_inv ) market_value_inv
			from #temp_leg_mtm  where source_deal_detail_id = h.source_deal_detail_id
			group by source_deal_header_id,source_deal_detail_id,leg, term_start, term_end
		) t
		left join #temp_deals td on td.source_deal_detail_id = h.source_deal_detail_id -- 	,counterparty_id,contract_id
		WHERE t.volume <> 0 AND isnumeric(d.eval_value) = 1
		GROUP BY t.source_deal_header_id, t.leg, d.curve_id, t.term_start, t.term_end;
		'

		EXEC spa_print  @sqlstmt2
		exec(@sqlstmt2)
	end
	IF OBJECT_ID('tempdb..#temp_leg_mtm_summary') IS NOT NULL DROP TABLE #temp_leg_mtm_summary
	
	SELECT 
		mtm.source_deal_header_id, 
		mtm.leg, 
		mtm.term_start,
		mtm.term_end,
		mtm.deal_cur_id,
		mtm.inv_cur_id,
		mtm.func_cur_id,
		mtm.source_deal_detail_id,
		mtm.shipment_id,
		mtm.ticket_detail_id,
		mtm.product_id,
		mtm.price_adder, 
		mtm.buy_sell_flag,
		mtm.formula_id,
		mtm.formula_curve_id,
		MAX(mtm.curve_id) curve_id,
		SUM(mtm.contract_value_deal) AS contract_value_deal,
		SUM(mtm.volume) AS volume,
		SUM(mtm.contract_value_inv) AS contract_value_inv,
		SUM(mtm.contract_value) AS contract_value,
		SUM(mtm.market_value) AS market_value,
		SUM(mtm.market_value_inv) AS market_value_inv,
		SUM(mtm.market_value_deal) AS market_value_deal, 
		SUM(mtm.simple_formula_curve_value_deal) AS simple_formula_curve_value_deal, 
		SUM(mtm.simple_formula_curve_value) AS simple_formula_curve_value, 
		SUM(mtm.simple_formula_curve_value_inv) AS simple_formula_curve_value_inv,
		mtm.match_info_id,max(td.counterparty_id) counterparty_id,max(td.contract_id) contract_id
	INTO #temp_leg_mtm_summary -- select * from #temp_leg_mtm_summary
	FROM #temp_leg_mtm mtm
	left join #temp_deals td on td.source_deal_detail_id = mtm.source_deal_detail_id -- 	,counterparty_id,contract_id
	GROUP BY mtm.source_deal_header_id, 
		mtm.leg, 
		mtm.term_start,
		mtm.term_end,
		mtm.deal_cur_id,
		mtm.inv_cur_id,
		mtm.func_cur_id,
		mtm.source_deal_detail_id,
		mtm.shipment_id,
		mtm.ticket_detail_id,
		mtm.product_id,
		mtm.price_adder, 
		mtm.buy_sell_flag,
		mtm.formula_id,
		mtm.formula_curve_id,
		mtm.match_info_id

	--Display break down for simple formula
	insert into #fees_breakdown 
	(
		as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
		field_id ,field_name ,
		price_deal ,price ,price_inv ,
		total_price_deal ,total_price ,total_price_inv ,
		volume ,value_deal,[value],value_inv ,
		deal_cur_id ,inv_cur_id ,
		contract_value_deal ,contract_value ,contract_value_inv ,
		internal_type ,tab_group_name ,udf_group_name ,
		[sequence] ,fee_currency_id ,currency_id,
		contract_mkt_flag,source_deal_detail_id ,shipment_id ,ticket_detail_id, match_info_id ,counterparty_id,contract_id
	)
	select @as_of_date as_of_date, source_deal_header_id, leg, term_start, term_end, 
		   -1 * max(t.formula_curve_id) field_id, 
		   max(s.curve_name) field_name,
		   max(case when(t.product_id=4101) then t.contract_value_deal else t.market_value_deal end)/ max(abs(volume)) - max(t.price_adder) * case when max(t.buy_sell_flag)='s' then 1 else -1 end price_deal,
		   max(case when(t.product_id=4101) then t.contract_value else t.market_value end)/ max(abs(volume)) - max(t.price_adder) * case when max(t.buy_sell_flag)='s' then 1 else -1 end price, --deduct price adder from formula value component
		    max(case when(t.product_id=4101) then t.contract_value_inv else t.market_value_inv end)/ max(abs(volume)) - max(t.price_adder) * case when max(t.buy_sell_flag)='s' then 1 else -1 end price_inv
			, max(case when(t.product_id=4101) then t.contract_value_deal else t.market_value_deal end)/ max(abs(volume)) total_price_deal,
		   max(case when(t.product_id=4101) then t.contract_value else t.market_value end)/ max(abs(volume)) total_price,
		  max(case when(t.product_id=4101) then t.contract_value_inv else t.market_value_inv end)/ max(abs(volume)) total_price_inv,
		   max(abs(volume)) volume, 
		   max(case when(t.product_id=4101) then t.simple_formula_curve_value_deal else  t.market_value_deal end) value_deal,
		   max(case when(t.product_id=4101) then t.simple_formula_curve_value else  t.market_value end) value,
		   max(case when(t.product_id=4101) then t.simple_formula_curve_value_inv else  t.market_value_inv end) value_inv,
		   max(t.deal_cur_id) deal_cur_id, max(t.inv_cur_id) inv_cur_id,
		   max(case when(t.product_id=4101) then t.contract_value_deal else t.market_value_deal end) contract_value_deal, 	
		   max(case when(t.product_id=4101) then t.contract_value else t.market_value end) contract_value, 		
		  max(case when(t.product_id=4101) then t.contract_value_inv else t.market_value_inv end) contract_value_inv, 			
		   -1 internal_type, -- contract value break down
		   NULL tab_group_name,
		   NULL udf_group_name,
		   1 sequence, 		
		   max(t.func_cur_id) fee_currency_id,
		   max(t.func_cur_id) currency_id,
		   MAX(case when (ISNULL(t.product_id,4101) = 4101) then 'c' else 'm' end)  contract_mkt_flag,max(t.source_deal_detail_id)
		   ,t.shipment_id ,t.ticket_detail_id, t.match_info_id,max(t.counterparty_id),max(t.contract_id)
	from #temp_leg_mtm_summary t 
		inner join source_price_curve_def s ON s.source_curve_def_id = t.formula_curve_id
	WHERE
		t.formula_id IS NOT NULL or t.formula_curve_id IS NOT NULL
	group by source_deal_header_id, leg, term_start, term_end,t.shipment_id,t.ticket_detail_id, t.match_info_id 
	having MAX(abs(volume)) <> 0 AND ABS(max(case when(t.product_id=4101) then t.contract_value else t.market_value end)) > 0.001

	insert into #fees_breakdown 
		(
			as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
			field_id ,field_name ,
			price_deal ,price ,price_inv ,
			total_price_deal ,total_price ,total_price_inv ,
			volume ,value_deal,[value],value_inv ,
			deal_cur_id ,inv_cur_id ,
			contract_value_deal ,contract_value ,contract_value_inv ,
			internal_type ,tab_group_name ,udf_group_name ,
			[sequence] ,fee_currency_id ,currency_id ,
			contract_mkt_flag,source_deal_detail_id ,shipment_id ,ticket_detail_id, match_info_id ,counterparty_id,contract_id
		)	
		select t.as_of_date, t.source_deal_header_id, t.leg, t.term_start, t.term_end, -1 field_id, 
		   'Fixed' field_name,MAX(t.total_price_deal) - sum(price_deal) price_deal,
		   MAX(t.total_price) - sum(price) price, null price_inv,null total_price_deal,
		   MAX(t.total_price) total_price,null total_price_inv,
		   max(t.volume) volume, 
		   max(t.contract_value_deal) - sum(value_deal) value_deal,
		   max(t.contract_value) - sum(value) value,
		   max(t.contract_value_inv) - sum(value_inv) value_inv,
		   max(t.deal_cur_id) deal_cur_id, max(inv_cur_id) inv_cur_id,
			max(t.contract_value_deal) contract_value_deal, 	
		   max(t.contract_value) contract_value, 		
		   max(t.contract_value_inv) contract_value_inv, 	
		   -1 internal_type, -- contract value break down
		   NULL tab_group_name,
		   NULL udf_group_name,
		   max(t.sequence)+1 sequence, 		
		   max(t.fee_currency_id) fee_currency_id,
		   max(t.currency_id) currency_id,
		   'c' contract_mkt_flag,max(t.source_deal_detail_id)
		   ,t.shipment_id ,t.ticket_detail_id, t.match_info_id ,max(t.counterparty_id),max(t.contract_id)
	from #fees_breakdown t
		left join #component_price cp on cp.source_deal_detail_id=t.source_deal_detail_id
	where cp.source_deal_detail_id is null
	group by t.as_of_date, t.source_deal_header_id, t.leg, t.term_start, t.term_end,shipment_id ,t.ticket_detail_id, t.match_info_id
	having MAX(t.volume) <> 0 AND ABS(max(t.contract_value) - sum(value)) > 0.001

--- If no formula is defined, then insert the fixed side
	insert into #fees_breakdown 
		(
			as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
			field_id ,field_name ,
			price_deal ,price ,price_inv ,
			total_price_deal ,total_price ,total_price_inv ,
			volume ,value_deal,[value],value_inv ,
			deal_cur_id ,inv_cur_id ,
			contract_value_deal ,contract_value ,contract_value_inv ,
			internal_type ,tab_group_name ,udf_group_name ,
			[sequence] ,fee_currency_id ,currency_id ,
			contract_mkt_flag,source_deal_detail_id ,shipment_id ,ticket_detail_id, match_info_id ,counterparty_id,contract_id
		)		
	SELECT @as_of_date as_of_date, 
		t.source_deal_header_id, 
		t.leg, 
		t.term_start, 
		t.term_end, 
		-1 field_id, 
		'Fixed' field_name,
		max(t.contract_value_deal)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) price_deal,
		max(t.contract_value)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) price,
		max(t.contract_value_inv)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) price_inv,
		max(t.contract_value_deal)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) total_price_deal,
		max(t.contract_value)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) total_price,
		max(t.contract_value_inv)/ max(abs(case when (t.volume = 0) then 1 else t.volume end)) total_price_inv,
		max(abs(t.volume)) volume, 
		MAX(t.contract_value_deal) value_deal,
		MAX(t.contract_value) value,
		MAX(t.contract_value_inv) value_inv,
		max(t.deal_cur_id) deal_cur_id, 
		max(t.inv_cur_id) inv_cur_id,
		MAX(t.contract_value_deal) contract_value_deal, 
		MAX(t.contract_value) contract_value, 		
		MAX(t.contract_value_inv) contract_value_inv, 	
		-1 internal_type, -- contract value break down
		NULL tab_group_name,
		NULL udf_group_name,
		1 sequence, 		
		max(t.func_cur_id) fee_currency_id,
		max(t.func_cur_id) currency_id,
		'c' contract_mkt_flag,
		MAX(t.source_deal_detail_id),
		t.shipment_id,
		t.ticket_detail_id, 
		t.match_info_id,max(t.counterparty_id) counterparty_id,max(t.contract_id) contract_id
	FROM #temp_leg_mtm_summary t
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = t.source_deal_detail_id
				--AND ISNULL(t.state_value_id, -1) = ISNULL(td.state_value_id, -1)
				--AND ISNULL(t.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
				and td.mtm_sett_calc=1
	LEFT JOIN #fees_breakdown fe On fe.source_deal_header_id = t.source_deal_header_id
		AND fe.leg = t.leg
		AND fe.term_start = t.term_start
		AND fe.contract_mkt_flag = 'c'
		--AND fe.field_id = -1 
	left join #component_price cp on cp.source_deal_detail_id=t.source_deal_detail_id
	WHERE fe.source_deal_header_id IS NULL 
		and cp.source_deal_detail_id is null			
	GROUP BY t.source_deal_header_id, 
		t.leg, 
		t.term_start, 
		t.term_end,
		t.shipment_id,
		t.ticket_detail_id,
		t.match_info_id
	HAVING ABS(MAX(t.contract_value)) > 0.001

	--- Insert the the Fee value for Market Side
	insert into #fees_breakdown(
		as_of_date,
		source_deal_header_id,
		leg,
		term_start,
		term_end ,
		field_id,
		field_name,
		price_deal,
		price,
		price_inv,
		total_price_deal,
		total_price,
		total_price_inv,
		volume,
		value_deal,
		[value],
		value_inv,
		deal_cur_id,
		inv_cur_id,
		contract_value_deal,
		contract_value,
		contract_value_inv,
		internal_type,
		tab_group_name,
		udf_group_name,
		[sequence],
		fee_currency_id,
		currency_id,
		contract_mkt_flag,
		source_deal_detail_id,
		shipment_id,
		ticket_detail_id,
		match_info_id,counterparty_id,contract_id)	
	SELECT @as_of_date as_of_date, 
		t.source_deal_header_id, 
		t.leg, 
		t.term_start, 
		t.term_end, 
		-1 * max(t.curve_id) field_id, 
		max(s.curve_name) field_name,
		max(t.market_value_deal)/ max(abs(t.volume)) price_deal,
		max(t.market_value)/ max(abs(t.volume)) price,
		max(t.market_value_inv)/ max(abs(t.volume)) price_inv,
		max(t.market_value_deal)/ max(abs(t.volume)) total_price_deal,
		max(t.market_value)/ max(abs(t.volume)) total_price,
		max(t.market_value_inv)/ max(abs(t.volume)) total_price_inv,
		max(abs(t.volume)) volume, 
		max(t.market_value_deal) value_deal,
		max(t.market_value) value,
		max(t.market_value_inv) value_inv,
		max(t.deal_cur_id) deal_cur_id, 
		max(t.inv_cur_id) inv_cur_id, 
		0 contract_value_deal, 
		0 contract_value, 		
		0 contract_value_inv, 	 		
		-1 internal_type, -- contract value break down
		NULL tab_group_name,
		NULL udf_group_name,
		1 sequence, 		
		max(t.func_cur_id) fee_currency_id,
		max(t.func_cur_id) currency_id,
		'm' contract_mkt_flag,
		MAX(t.source_deal_detail_id),
		t.shipment_id,
		t.ticket_detail_id,
		t.match_info_id,max(t.counterparty_id) counterparty_id,max(t.contract_id) contract_id
	from #temp_leg_mtm_summary t
	inner join source_price_curve_def s ON s.source_curve_def_id = t.curve_id
	WHERE ISNULL(t.product_id, 4101) <> 4100
	GROUP BY t.source_deal_header_id, 
		t.leg, 
		t.term_start, 
		t.term_end,
		t.shipment_id,
		t.ticket_detail_id,
		t.match_info_id
	HAVING MAX(abs(t.volume)) <> 0 AND ABS(MAX(t.market_value)) > 0.001		 

	-- exclude fees other than premium in simple options
	delete f FROM #fees_breakdown f inner join #temp_deals td on f.source_deal_header_id=td.source_deal_header_id
		and isnull(td.option_flag,'n')='y' and td.internal_deal_type_value_id in (1,2) and td.internal_deal_subtype_value_id in (1,2)
		and f.field_id<0


	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************INDEX contract value breakdown *****************************'	
	END

END


if @calc_type='s'
begin
	--- Insert the the Fee value for Market Side
	insert into #fees_breakdown 
	(
		as_of_date ,source_deal_header_id ,leg ,term_start ,term_end ,
		field_id ,field_name ,
		price_deal ,price ,price_inv ,
		total_price_deal ,total_price ,total_price_inv ,
		volume ,value_deal,[value],value_inv ,
		deal_cur_id ,inv_cur_id ,
		contract_value_deal ,contract_value ,contract_value_inv ,
		internal_type ,tab_group_name ,udf_group_name ,
		[sequence] ,fee_currency_id ,currency_id ,
		contract_mkt_flag,source_deal_detail_id ,shipment_id ,ticket_detail_id, match_info_id ,counterparty_id,contract_id
	)	
	select @as_of_date as_of_date, t.source_deal_header_id, t.leg, t.term_start, t.term_end, 
		-1 * max(t.curve_id) field_id, 
		max(s.curve_name) field_name,max(t.market_value_deal)/ max(abs(t.volume)) price_deal,
		max(t.market_value)/ max(abs(t.volume)) price,max(t.market_value_inv)/ max(abs(t.volume)) price_inv
		,max(t.market_value_deal)/ max(abs(t.volume)) total_price_deal,
		max(t.market_value)/ max(abs(t.volume)) total_price,max(t.market_value_inv)/ max(abs(t.volume)) total_price_inv,
		--max(abs(t.volume)) volume, 
		max(t.volume) volume, 
		max(t.market_value_deal) value_deal,
		max(t.market_value) value,
		max(t.market_value_inv) value_inv,
		max(t.deal_cur_id) deal_cur_id, max(t.inv_cur_id) inv_cur_id, 
		0 contract_value_deal, 
		0 contract_value, 		
		0 contract_value_inv, 	 		
		-1 internal_type, -- contract value break down
		NULL tab_group_name,
		NULL udf_group_name,
		1 sequence, 		
		max(t.func_cur_id) fee_currency_id,
		max(t.func_cur_id) currency_id,
		'm' contract_mkt_flag,MAX(t.source_deal_detail_id),t.shipment_id ,t.ticket_detail_id, t.match_info_id ,max(td.counterparty_id),max(td.contract_id)
	from #temp_leg_mtm t inner join
		 source_price_curve_def s ON s.source_curve_def_id = t.curve_id
	inner join (select distinct source_deal_detail_id from #component_price) cp 
		on cp.source_deal_detail_id=t.source_deal_detail_id
	left join #temp_deals td on td.source_deal_detail_id = t.source_deal_detail_id -- 	,counterparty_id,contract_id
	WHERE ISNULL(t.product_id, 4101) <> 4100 and td.calc_physical_financial_flag='f'
	GROUP BY t.source_deal_header_id, t.leg, t.term_start, t.term_end,t.shipment_id ,t.ticket_detail_id, t.match_info_id 	 
		having MAX(abs(t.volume)) <> 0 AND ABS(MAX(t.market_value)) > 0.001		
end


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Index building for #fees_brealdown *****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

----###### Evaluate formula defined in UDF

DECLARE  @formula_table5 VARCHAR(100),@calc_result_table5 VARCHAR(100),@calc_result_table_breakdown5 VARCHAR(100)
SET @formula_table5 = dbo.FNAProcessTableName('udf_formula', @user_login_id, @process_id)

SET @sql='
	CREATE TABLE '+@formula_table5+'(
		rowid int identity(1,1) ,
		counterparty_id INT,
		contract_id INT,
		curve_id INT,
		prod_date DATETIME,
		as_of_date DATETIME,
		volume FLOAT,
		onPeakVolume FLOAT,
		source_deal_header_id INT,
		source_deal_detail_id INT,
		formula_id varchar(30),
		invoice_Line_item_id INT,			
		invoice_line_item_seq_id INT,
		price FLOAT,			
		granularity INT,
		volume_uom_id INT,
		generator_id INT,
		[Hour] INT,
		commodity_id INT,
		meter_id INT,
		curve_source_value_id INT,
		[mins] INT,is_dst int,
		calc_aggregation INT,
		internal_field_type INT,
		sequence_order INT,
		udf_template_id int
	)
'
	
EXEC(@sql)	

-- select * from adiha_process.dbo.hourly_price_vol_at_low_farrms_admin_4BA9E933_38A5_49FF_BA76_6D33C62C2497 

/* This code is for calculating fees hourly level, hence using table @hourly_price_vol_at_low and this logic need to be checked .

SET @sql=' 
	INSERT INTO '+@formula_table5+'
		(
		rowid,formula_id,curve_source_value_id,prod_date, as_of_date,granularity,contract_id, source_deal_detail_id,[Hour],is_dst, volume
		)
	SELECT 	
		uddft.udf_template_id,uddf.udf_value formula_id, ' + cast(@curve_source_value_id as varchar) + ',
		 CAST(CASE WHEN (isnull(uddft.calc_granularity ,980)= 980 ) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (isnull(uddft.calc_granularity ,980)= 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
			WHEN (isnull(uddft.calc_granularity ,980)= 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (isnull(uddft.calc_granularity ,980)= 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			ELSE td.term_start END AS DATETIME) term_start, '''+@as_of_date+''', isnull(max(uddft.calc_granularity),980),max(sdh.contract_id), td.source_deal_detail_id,
			CASE WHEN isnull(uddft.calc_granularity ,980)in ( 982,989,987,997 ) THEN td.[Hours] else 0 end [hour]
		,CASE WHEN isnull(uddft.calc_granularity ,980)in ( 982,989,987,997 ) THEN td.is_dst else 0 end, sum(td.volume) volume
	FROM '+@hourly_price_vol_at_low+' td 
		--INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = td.source_deal_detail_id
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
		INNER JOIN user_defined_deal_fields_template uddft ON uddft.template_id=sdh.template_id	and isnull(uddft.leg,td.leg)=td.leg	
		and uddft.udf_type=''h''
		LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id  
				AND uddf.udf_template_id = uddft.udf_template_id
		--LEFT JOIN user_defined_deal_detail_fields udddf ON udddf.udf_template_id = uddft.udf_template_id
		--		AND udddf.source_deal_detail_id = td.source_deal_detail_id
	WHERE uddft.internal_field_type IS NOT NULL 
		AND uddf.udf_value IS NOT NULL  and uddft.field_type=''w''
	group by uddft.udf_template_id,uddf.udf_value, td.source_deal_detail_id,
	 CAST(CASE WHEN (isnull(uddft.calc_granularity ,980)= 980 ) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(Month(td.term_start) as varchar) + ''-01'' 
			WHEN (isnull(uddft.calc_granularity ,980)= 991) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 4 when 3 then 7 when 4 then 10 END as varchar) + ''-01''
			WHEN (isnull(uddft.calc_granularity ,980)= 992) THEN cast(Year(td.term_start) as varchar) + ''-'' + cast(CASE datepart(q, td.term_start) WHEN 1 THEN 1 WHEN 2 THEN 1 ELSE 7 END as varchar) + ''-01''
			WHEN (isnull(uddft.calc_granularity ,980)= 993) THEN cast(Year(td.term_start) as varchar) + ''-01-01'' 
			ELSE td.term_start END AS DATETIME),CASE WHEN isnull(uddft.calc_granularity ,980)in ( 982,989,987,997 ) THEN td.[Hours] else 0 end,CASE WHEN isnull(uddft.calc_granularity ,980)in ( 982,989,987,997 ) THEN td.is_dst else 0 end
		'

exec spa_print @sql)
EXEC(@sql)


--*/
--/* monthly level calculation


SET @sql=' 
	INSERT INTO '+@formula_table5+'
		(formula_id,curve_source_value_id,prod_date, as_of_date,granularity,contract_id,source_deal_header_id,source_deal_detail_id,volume,counterparty_id,calc_aggregation,internal_field_type,sequence_order,udf_template_id)
	SELECT 	
		ISNULL(uddf.udf_value,udft.default_value) formula_id, ' + cast(@curve_source_value_id as varchar) + ', td.term_start, '''+@as_of_date+'''
		, 980 granularity,td.contract_id,td.source_deal_header_id,td.source_deal_detail_id,td.[deal_volume],td.counterparty_id,19002,uddft.internal_field_type,CASE uddft.internal_field_type WHEN 18744 THEN 9999 ELSE 1 END,uddft.udf_template_id [ID]
	FROM	
		#temp_deals td 
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
		INNER JOIN user_defined_deal_fields_template uddft ON uddft.template_id=sdh.template_id	
		AND uddft.udf_type=''h''
		INNER JOIN user_defined_fields_template udft on uddft.field_id=udft.field_id
			AND isnull(udft.leg,td.leg)=td.leg
		INNER JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id  
				AND uddf.udf_template_id = uddft.udf_template_id
	WHERE uddft.internal_field_type IS NOT NULL 
		AND ISNULL(uddf.udf_value,udft.default_value) IS NOT NULL  and uddft.field_type=''w'''

exec spa_print @sql
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql )

--*/

SET @sql=' 
	INSERT INTO '+@formula_table5+'
		(formula_id,curve_source_value_id,prod_date, as_of_date,granularity,contract_id,source_deal_header_id,source_deal_detail_id,volume,counterparty_id,calc_aggregation,internal_field_type,sequence_order,udf_template_id)
	SELECT 	
		try_cast(ISNULL(udddf.udf_value,uddft.default_value) as int) formula_id, ' + cast(@curve_source_value_id as varchar) + ', td.term_start, '''+@as_of_date+'''
		, 980 granularity,td.contract_id,td.source_deal_header_id,td.source_deal_detail_id,td.[deal_volume],td.counterparty_id,19002,uddft.internal_field_type,CASE uddft.internal_field_type WHEN 18744 THEN 9999 ELSE 1 END,uddft.udf_template_id [ID]
	FROM #temp_deals td 
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
		INNER JOIN user_defined_deal_fields_template uddft ON uddft.template_id=sdh.template_id	and isnull(uddft.leg,td.leg)=td.leg	
		AND uddft.udf_type=''d''
		--LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id  
		--		AND uddf.udf_template_id = uddft.udf_template_id
		INNER JOIN user_defined_deal_detail_fields udddf ON udddf.udf_template_id = uddft.udf_template_id
				AND udddf.source_deal_detail_id = td.source_deal_detail_id
	WHERE uddft.internal_field_type IS NOT NULL 
		AND ISNULL(udddf.udf_value,uddft.default_value) IS NOT NULL  and uddft.field_type=''w'''

exec spa_print @sql
EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)




--EXEC('select 1 temp into #check_existance_record_mtm from '+@formula_table5)
--IF @@ROWCOUNT>0
--BEGIN
	

--- Tax should be calculated seperately
SET @sql  = 'SELECT * INTO '+REPLACE(@formula_table5,'udf_formula','udf_formula_tax')+' FROM '+@formula_table5+' WHERE internal_field_type IN(18744,18745)'
EXEC(@sql)
	
SET @sql  = 'DELETE FROM '+@formula_table5+' WHERE internal_field_type IN(18744,18745)'
EXEC(@sql)

EXEC spa_calculate_formula	@as_of_date, @formula_table5,@process_id,@calc_result_table5 output, @calc_result_table_breakdown5 output,'n','n',@calc_type,@criteria_id,NULL,@calc_type,'y'

--print 'kkkkkkkkk'
--print 'select * from '+@calc_result_table5

--exec('select * from '+@calc_result_table5)
--return
--SELECT * FROM index_fees_breakdown ifb WHERE ifb.internal_type <>-1
--select * into #uddft from user_defined_deal_fields_template
--select udf_deal_id,source_deal_header_id,udf_template_id,NULLIF(udf_value,'') udf_value,create_user,create_ts,update_user,update_ts,currency_id,uom_id,counterparty_id into #uddf from user_defined_deal_fields
--select udf_deal_id,source_deal_detail_id,udf_template_id,NULLIF(udf_value,'') udf_value,create_user,create_ts,update_user,update_ts,currency_id,uom_id,counterparty_id into #udddf from user_defined_deal_detail_fields 
--SELECT * INTO #uddft 
--FROM 
--	user_defined_deal_fields_template uddft 
--WHERE template_id IN(SELECT template_id FROM #temp_deals td INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id UNION ALL SELECT template_id FROM #temp_deals_broker td INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id)



SELECT DISTINCT uddf.udf_deal_id,uddf.source_deal_header_id,uddf.udf_template_id,try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4)) udf_value,uddf.create_user,uddf.create_ts,uddf.update_user,uddf.update_ts,uddf.currency_id,uddf.uom_id,uddf.counterparty_id 
,seq_no
,contract_id
,receive_pay
INTO #uddf 
FROM 
	user_defined_deal_fields uddf WHERE uddf.source_deal_header_id IN(SELECT source_deal_header_id FROM #temp_deals UNION ALL SELECT source_deal_header_id FROM #temp_deals_broker)
and try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4)) is not null

SELECT DISTINCT uddf.udf_deal_id,uddf.source_deal_detail_id,uddf.udf_template_id,try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4))udf_value,uddf.create_user,uddf.create_ts,uddf.update_user,uddf.update_ts,uddf.currency_id,uddf.uom_id,uddf.counterparty_id 
,seq_no
,contract_id
,receive_pay
INTO #udddf 
FROM user_defined_deal_detail_fields uddf  WHERE uddf.source_deal_detail_id IN(SELECT source_deal_detail_id FROM #temp_deals UNION ALL SELECT source_deal_detail_id FROM #temp_deals_broker)
and try_cast(NULLIF(uddf.udf_value,'') as numeric(20,4)) is not null


--create index ix_pt_1 on #uddft(template_id) include(leg,field_id,udf_template_id)
--create index ix_pt_2 on #uddf(source_deal_header_id,udf_template_id) include(udf_value)
--create index ix_pt_3 on #uddft(internal_field_type)
CREATE INDEX [IX_PT_temp_deals_pricing_contract_id] ON [#temp_deals] ([pricing], [contract_id]) INCLUDE ([source_deal_detail_id])
CREATE INDEX [IX_PT_temp_deals_pricing] ON [#temp_deals] ([pricing]) INCLUDE ([source_deal_detail_id], [contract_id])


/*####
Gyan Koju/Annal shrestha -2019-07-26
To fix performance issue removed the join with price curve and created a temporary table. this table is only populated if the UDF of type "fuel based variable charge" is used in the deal
*/


SELECT  
	td.location_id,td.term_start,max(spc.curve_value) curve_value
 INTO #fuel_based_variable_charge 
FROM #temp_deals td
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	INNER JOIN source_minor_location sml ON sml.source_minor_location_id = td.location_id 
	INNER JOIN source_price_curve_def spcd1 ON spcd1.source_curve_def_id = sml.term_pricing_index
	INNER JOIN source_price_curve spc ON spc.source_curve_def_id = isnull(spcd1.settlement_curve_id,td.curve_id) AND spc.as_of_date =td.term_start  
		AND spc.maturity_date = td.term_start AND spc.curve_source_value_id=4500
	CROSS APPLY(SELECT top 1 udft.internal_field_type FROM  #uddft uddft 
				INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg) AND udft.internal_field_type = 	18725	
				LEFT JOIN #uddf uddf ON uddf.source_deal_header_id = td.source_deal_header_id 
							AND uddf.udf_template_id = uddft.udf_template_id AND uddft.field_type<>'w'
				LEFT JOIN #udddf udddf ON udddf.udf_template_id = uddft.udf_template_id
							AND udddf.source_deal_detail_id = td.source_deal_detail_id AND uddft.field_type<>'w'
				WHERE  uddft.template_id=sdh.template_id AND td.leg= ISNULL(uddft.leg,td.leg)	 		  
			) a
  WHERE a.internal_field_type IS NOT NULL
  GROUP BY td.location_id,td.term_start


/*
Added logic for Tiered based fees calculations
*/
CREATE TABLE #tmp_fees(
		[id] INT identity(1,1),
		source_deal_detail_id INT,
		leg INT,
		term_start DATETIME,
		term_end DATETIME,
		index_market INT,
		field_id INT,
		field_name NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		price FLOAT,
		volume FLOAT,
		[value] FLOAT,
		minimum_value FLOAT,
		maximum_value FLOAT,
		from_volume FLOAT,
		to_volume FLOAT,
		vol_slot FLOAT
		,counterparty_id int, contract_id int,
		rec_pay CHAR(1) COLLATE DATABASE_DEFAULT
	)


SET @qry8a='
	INSERT INTO #tmp_fees(source_deal_detail_id,leg,term_start,term_end,index_market,field_id,field_name,price,volume,[value],minimum_value,maximum_value,from_volume,to_volume,vol_slot,counterparty_id, contract_id ,rec_pay)
	SELECT	 
			td.source_deal_detail_id,
			td.leg,
			CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME) term_start, 
			DATEADD(m,1,CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME))-1 term_end,		
			sfv.index_market,
			uddft.field_name field_id, 
			uddft.field_label field_name, 
			COALESCE(spc.curve_value, sfv2.value, sfv.value) price,
			abs(td.total_volume) volume,
			COALESCE(spc.curve_value,sfv2.value, sfv.value) value,		
			ISNULL(sfv2.minimum_value, sfv.minimum_value) minimum_value,
			ISNULL(sfv2.maximum_value, sfv.maximum_value) maximum_value,
			ISNULL(sfv.from_volume,0),
			ISNULL(sfv.to_volume,999999999),
			CASE WHEN sfv.type=3 then sfv.to_volume - sfv.from_volume+1 ELSE abs(td.total_volume) END vol_slot
			,isnull(udddf.counterparty_id,uddf.counterparty_id) counterparty_id,isnull(udddf.contract_id,uddf.contract_id) contract_id,
			sfv.rec_pay
	FROM	(
			SELECT 
				source_deal_header_id,
				source_deal_detail_id,
				leg,
				total_volume,
				broker_id,
				fas_sub_id,
				buy_sell_flag,
				source_deal_type_id,
				location_id,
				term_start,
				''b'' calc_for
			FROM #temp_deals_broker 
			UNION 
			SELECT 
				source_deal_header_id,
				source_deal_detail_id,
				leg,
				deal_volume,
				broker_id,
				fas_sub_id,
				buy_sell_flag,
				source_deal_type_id,
				location_id,
				term_start,
				''o'' calc_for
			FROM #temp_deals
		) td 
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
	INNER JOIN #uddft uddft ON uddft.template_id=sdh.template_id	and td.leg= ISNULL(uddft.leg,td.leg)	
	INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)		
	LEFT JOIN #uddf uddf ON uddf.source_deal_header_id = td.source_deal_header_id  
		AND uddf.udf_template_id = uddft.udf_template_id
	LEFT JOIN #udddf udddf ON udddf.udf_template_id = uddft.udf_template_id
		AND udddf.source_deal_detail_id = td.source_deal_detail_id
	OUTER APPLY(
		SELECT MAX(case when udddft.field_id=-5604 then try_cast(uddf.udf_value as int) else null end) broker 
		, MAX(case when udddft.field_id=-5658 then try_cast(uddf.udf_value as int) else null end) counterparty
		,MAX(case when udddft.field_id=-10000261 then try_cast(uddf.udf_value as int) else null end) contract
		FROM #uddf uddf 
		INNER JOIN #uddft udddft ON uddf.udf_template_id=udddft.udf_template_id 
		WHERE uddf.source_deal_header_id=td.source_deal_header_id 
		AND udddft.template_id = sdh.template_id and udddft.field_id IN (-5604,-5658,-10000261)) udf
	
		LEFT JOIN #uddft udsa ON udsa.template_id = sdh.template_id
		AND udsa.field_id = -10000329  --Initiator/Aggressor
		LEFT JOIN #uddf uddfsa on uddfsa.udf_template_id = udsa.udf_template_id 
		AND uddfsa.source_deal_header_id = td.source_deal_header_id
	LEFT JOIN source_fee sf On sf.fees=CAST(uddft.field_id AS VARCHAR) 
		AND ((sf.counterparty = td.broker_id AND calc_for = CASE WHEN udft.internal_field_type IN (18723,18724,18733,18737) THEN ''b'' WHEN udft.internal_field_type = 18739 THEN ''o'' ELSE ''t'' END)
			OR (calc_for = ''o'' AND udft.internal_field_type NOT IN(18723,18724,18733,18737,18739,18740,18741)) 
			OR (sf.counterparty = udf.counterparty AND udft.internal_field_type IN(18741))
			OR (sf.counterparty = udf.counterparty AND udft.internal_field_type IN(18740) AND calc_for =''b''))
		and ((ISNULL(try_CAST(sf.contract AS int),udf.broker) = udf.broker AND calc_for = CASE WHEN udft.internal_field_type IN (18723,18724,18733,18737) THEN ''b'' WHEN udft.internal_field_type = 18739 THEN ''o'' ELSE ''t'' END) 
			OR (calc_for = ''o'' AND udft.internal_field_type NOT IN(18723,18724,18733,18737,18739,18740,18741)) 
			OR ISNULL(TRY_CAST(sf.contract AS int),udf.contract) = udf.contract)
	OUTER APPLY(SELECT MAX(ISNULL(effective_date,''1900-01-01'')) effective_date FROM source_fee_volume WHERE  source_fee_id=sf.source_fee_id 	
		AND ISNULL(subsidiary,td.fas_sub_id) = td.fas_sub_id AND	ISNULL(deal_type,td.source_deal_type_id) = td.source_deal_type_id AND	ISNULL(buy_sell,td.buy_sell_flag) = td.buy_sell_flag
		AND	COALESCE(commodity,sdh.commodity_id,-1) = ISNULL(sdh.commodity_id,-1) AND	COALESCE(location,td.location_id,-1) = ISNULL(td.location_id,-1)
		AND effective_date <= CASE WHEN udft.internal_field_type IN (18739,18741) THEN td.term_start ELSE sdh.deal_date END
		'+case when @calc_type='s' then 
	' AND COALESCE(sdh.reporting_jurisdiction_id,sdh.state_value_id,-1)=COALESCE(jurisdiction,sdh.reporting_jurisdiction_id,sdh.state_value_id,-1) and COALESCE(sdh.reporting_tier_id,sdh.tier_value_id,-1)=COALESCE(tier,sdh.reporting_tier_id,sdh.tier_value_id,-1) '
	else '' end	+'  AND ISNULL(aggressor_initiator,'''') = CASE  uddfsa.udf_value WHEN 1 THEN ''i'' WHEN 0 THEN ''a'' ELSE '''' END) sfv1
		LEFT JOIN source_fee_volume sfv ON 	sfv.source_fee_id = sf.source_fee_id AND ISNULL(sfv.effective_date,''1900-01-01'') = sfv1.effective_date AND ISNULL(sfv.subsidiary,td.fas_sub_id) = td.fas_sub_id AND	ISNULL(sfv.deal_type,td.source_deal_type_id) = td.source_deal_type_id AND	ISNULL(sfv.buy_sell,td.buy_sell_flag) = td.buy_sell_flag
			AND	COALESCE(sfv.commodity,sdh.commodity_id,-1) = ISNULL(sdh.commodity_id,-1) AND	COALESCE(sfv.location,td.location_id,-1) = ISNULL(td.location_id,-1)
			AND ISNULL(sfv.aggressor_initiator,'''') = CASE  uddfsa.udf_value WHEN 1 THEN ''i'' WHEN 0 THEN ''a'' ELSE '''' END
	'+case when @calc_type='s' then 
	' AND COALESCE(sdh.reporting_jurisdiction_id,sdh.state_value_id,-1)=COALESCE(sfv.jurisdiction,sdh.reporting_jurisdiction_id,sdh.state_value_id,-1) and COALESCE(sdh.reporting_tier_id,sdh.tier_value_id,-1)=COALESCE(sfv.tier,sdh.reporting_tier_id,sdh.tier_value_id,-1)'
	else '' end	+'
	OUTER APPLY(SELECT MAX(as_of_date) as_of_date FROM source_price_curve WHERE source_curve_def_id = sfv.index_market AND maturity_date = td.term_start) spc1
	LEFT JOIN source_price_curve spc on spc.source_curve_def_id = sfv.index_market AND spc.as_of_date = spc1.as_of_date  AND spc.maturity_date = td.term_start

	--------------Checking condition for Sleeve, Spread AND Initiator/Aggressor--------------
	LEFT JOIN user_defined_deal_fields_template uds ON uds.template_id = sdh.template_id
		AND uds.field_id = -10000335  --Sleeve
	LEFT JOIN user_defined_deal_fields uddfs on uddfs.udf_template_id = uds.udf_template_id 
		AND uddfs.source_deal_header_id = td.source_deal_header_id
	LEFT JOIN user_defined_deal_fields_template uds1 on uds1.template_id = sdh.template_id
		AND uds1.field_id= -10000336	 --Spread	
	LEFT JOIN user_defined_deal_fields uddfs1 on uddfs1.udf_template_id = uds1.udf_template_id 
		AND uddfs1.source_deal_header_id = td.source_deal_header_id
	OUTER APPLY(SELECT sfv.[value]  * 
				CASE WHEN uddfs.udf_value = ''y'' THEN 0 WHEN uddfs1.udf_value = ''y'' THEN 0.5 ELSE 1 END [value],
				sfv.[minimum_value]  * 
				CASE WHEN uddfs.udf_value = ''y'' THEN 0 WHEN uddfs1.udf_value = ''y'' THEN 0.5 ELSE 1 END [minimum_value],
				sfv.[maximum_value]  * 
				CASE WHEN uddfs.udf_value = ''y'' THEN 0 WHEN uddfs1.udf_value = ''y'' THEN 0.5 ELSE 1 END [maximum_value]
				WHERE udft.internal_field_type IN (18723,18739,18740,18741)) sfv2
	WHERE 1 = 1 --	udft.internal_field_type IN(18723,18724,18733,18737)			
	AND ISNUMERIC(ISNULL(sfv2.value, sfv.value)) = 1
	ORDER BY sfv.from_volume'
exec spa_print @qry8a
EXEC(@qry8a)

	;WITH CTE AS (
		SELECT [id],
			source_deal_detail_id,
			leg,
			term_start,
			term_end,
			index_market,
			field_id,
			field_name,
			price,
			volume,
			[value],
			minimum_value,
			maximum_value,
			from_volume,
			to_volume,
			vol_slot,
			vol_slot running_total,
			CAST(0 AS FLOAT) pre_total 
			,counterparty_id,contract_id,rec_pay
		FROM #tmp_fees
		UNION ALL
		SELECT tmp.id,
			tmp.source_deal_detail_id,
			tmp.leg,
			tmp.term_start,
			tmp.term_end,
			tmp.index_market,
			tmp.field_id,
			tmp.field_name,
			tmp.price,
			tmp.volume,
			tmp.[value],
			tmp.minimum_value,
			tmp.maximum_value,
			tmp.from_volume,
			tmp.to_volume,
			tmp.vol_slot,
			tmp.vol_slot+CTE.running_total running_total,
			CTE.vol_slot+CTE.pre_total pre_total 
			,CTE.counterparty_id,CTE.contract_id,CTE.rec_pay
		FROM #tmp_fees tmp 
		INNER JOIN CTE on CTE.id+1 = tmp.id 
		AND tmp.source_deal_detail_id = CTE.source_deal_detail_id
		AND CTE.running_total<tmp.[volume]
	)
	SELECT c.source_deal_detail_id,
		c.leg,
		c.term_start,
		c.term_end,
		MAX(c.index_market) index_market,
		c.field_id,
		c.field_name,
		MAX(c.volume) volume,
		SUM(CASE WHEN c.[volume]-c.running_total<0 THEN 
				ABS(c.[volume]-c.pre_total) 
			ELSE c.vol_slot  END * c.[value])/nullif(MAX(c.volume),0) [value],
		MIN(c.minimum_value) minimum_value,
		MAX(c.maximum_value) maximum_value
		,max(c.counterparty_id) counterparty_id,max(c.contract_id) contract_id,MAX(c.rec_pay) rec_pay
	INTO #tmp_source_fees
	FROM CTE c
	GROUP BY c.source_deal_detail_id,
		c.leg,
		c.term_start,
		c.term_end,
		c.field_id,
		c.field_name

	CREATE INDEX idx_tmp_source on #tmp_source_fees (source_deal_detail_id,field_id);

--####################################
-- End Tiered based logic

set @sqlstmt='
select distinct sdh.source_deal_header_id,sdh.option_settlement_date,sdh.deal_date,sdh.template_id
,sdd.total_volume,sdh.commodity_id,sdh.header_buy_sell_flag
	,sdd.settlement_currency,sdd.fixed_price_currency_id
into #temp_deal_header -- select * from #temp_deal_header     drop table #temp_deal_header
from source_deal_header sdh
	inner join (select distinct source_deal_header_id from #temp_deals --where option_flag=''y''
	) td on td.source_deal_header_id=sdh.source_deal_header_id
	INNER JOIN #uddft uddft ON uddft.template_id=sdh.template_id	
	INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id 
		and udft.internal_field_type = 18722
cross apply
(
	select sum(total_volume) total_volume,max(settlement_currency) settlement_currency,max(fixed_price_currency_id) fixed_price_currency_id 
	from source_deal_detail where source_deal_header_id=sdh.source_deal_header_id
) sdd
where sdd.total_volume is not null and  isnull(sdh.option_settlement_date,sdh.deal_date) '+ case when @calc_type='s' then '<=''' else '>''' end +@as_of_date+''';


SELECT	'''+ @as_of_date+''' as_of_date, sdh.source_deal_header_id,1 leg,
	convert(varchar(8),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''01'' term_start, 
	eomonth(ISNULL(sdh.option_settlement_date,sdh.deal_date)) term_end,	
	uddft.field_name field_id, 
	uddft.field_label field_name, 
	try_cast(uddf.udf_value as float) total_price_deal,try_cast(uddf.udf_value as float) total_price,try_cast(uddf.udf_value as float) total_price_inv,
	sdh.total_volume volume
	,try_cast(uddf.udf_value as float) price_deal,try_cast(uddf.udf_value as float) price,try_cast(uddf.udf_value as float) price_inv,
	sgn.sgn *sdh.total_volume * try_cast(uddf.udf_value as float) value_deal
	,sgn.sgn *sdh.total_volume * try_cast(uddf.udf_value as float) value
	,sgn.sgn *sdh.total_volume * try_cast(uddf.udf_value as float) value_inv,sdh.fixed_price_currency_id deal_cur_id,
	sdh.settlement_currency inv_cur_id,NULL contract_value,NULL contract_value_deal,NULL contract_value_inv,
	udft.internal_field_type internal_type,uddft.udf_tabgroup tab_group_name, uddft.udf_group udf_group_name,
	uddft.sequence,sdh.fixed_price_currency_id fee_currency_id
	,sdh.fixed_price_currency_id currency_id,NULL contract_mkt_flag,
	null source_deal_detail_id,isnumeric(try_cast(uddf.udf_value as float)) f_value,
	null  capacity,
	1 filter1,null minimum_value,null maximum_value
	,uddf.counterparty_id,uddf.contract_id
into  #tmp_fees_breakdown --  select * from  #tmp_fees_breakdown 
FROM #temp_deal_header sdh 
	INNER JOIN #uddft uddft ON uddft.template_id=sdh.template_id 	
	INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id 
	LEFT JOIN #uddf uddf ON uddf.source_deal_header_id = sdh.source_deal_header_id 
		AND uddf.udf_template_id = uddft.udf_template_id AND uddft.field_type<>''w''
outer apply
( select case when isnull(uddf.receive_pay,case when header_buy_sell_flag=''b'' then ''p'' else ''r'' end)=''r'' then 1 else -1 end sgn
)sgn
WHERE udft.internal_field_type IS NOT NULL AND try_cast(uddf.udf_value as float) is not null 
	and udft.internal_field_type = 18722 ;
'

set @qry1b='
SELECT	'''+ @as_of_date+''' as_of_date, td.source_deal_header_id,td.leg,
	CASE WHEN '''+@cpt_type+'''=''b'' THEN CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME)
		WHEN --op.source_deal_header_id IS NOT NULL and 
			uddft.internal_field_type IN (18722) THEN 
				case when COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) is not null or ''s''=''' +@calc_type+''' then 
				--CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME) 
				ISNULL(sdh.option_settlement_date,sdh.deal_date) 
				else td.term_start  end 
		WHEN uddft.internal_field_type IN(18723,18724) THEN CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME) 
		ELSE td.term_start END term_start, 
	CASE WHEN '''+@cpt_type+'''=''b'' THEN DATEADD(m,1,CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME))-1
		WHEN --op.source_deal_header_id IS NOT NULL and 
			uddft.internal_field_type IN (18722) THEN 
				case when COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) is not null or ''s''=''' +@calc_type+''' then
				-- DATEADD(m,1,CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME))-1 
				 ISNULL(sdh.option_settlement_date,sdh.deal_date)
				else td.term_end  end 
		WHEN uddft.internal_field_type IN(18723,18724) THEN DATEADD(m,1,CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME))-1 ELSE td.term_end END term_end,	
	uddft.field_name field_id, 
	uddft.field_label field_name, 
	--CASE WHEN ISNUMERIC(uddf.udf_value)=1 THEN cast(uddf.udf_value as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) price,
	--CASE WHEN ISNUMERIC(uddf.udf_value)=1 THEN cast(uddf.udf_value as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) total_price,
		--volume should be + if sell - if buy as fee cashflow should be opposite
		MAX(CASE WHEN udft.internal_field_type IN(18705) THEN --Capacity based fee 18713 OffPeak
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
				CASE WHEN ISNUMERIC( COALESCE(sfv.value,udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value))=1 THEN cast( COALESCE(sfv.value,udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)				
			ELSE 0 END 
			WHEN udft.internal_field_type IN(18710) THEN 
			CASE WHEN (td.curve_tou=18901) THEN --ONPEAK
				CASE WHEN ISNUMERIC( COALESCE(sfv.value,udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value))=1 THEN cast( COALESCE(sfv.value,udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
			ELSE 0 END 
			WHEN udft.internal_field_type IN(18739,18741) THEN sfv.value
		END) total_price_deal,cast(0 as float) total_price,cast(0 as float) total_price_inv,
		SUM( 
		CASE WHEN (udft.internal_field_type IN (18702, 18703)) THEN ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))
				WHEN (udft.internal_field_type IN (18701, 18704)) THEN ABS(td.contract_volume)
				WHEN udft.internal_field_type = 18742 THEN sddh.positive_volume 
				WHEN udft.internal_field_type = 18743 THEN sddh.negative_volume
		ELSE			
			CASE WHEN isnull(hv.curve_id,-1)=-1 THEN td.deal_volume  ELSE ABS(hv.volume) END 
	END) volume
	,sum(CASE WHEN udft.internal_field_type IN(18705) THEN --Capacity based fee 18713 OffPeak
		CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
			CASE WHEN ISNUMERIC( COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value))=1 THEN cast( COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)				
		ELSE 0 END 
		WHEN udft.internal_field_type IN(18710) THEN 
		CASE WHEN (td.curve_tou=18901) THEN --ONPEAK
			CASE WHEN ISNUMERIC( COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value))=1 THEN cast( COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
		ELSE 0 END
		WHEN udft.internal_field_type IN(18739,18741) THEN sfv.value
	END) price_deal,cast(0 as float) price,cast(0 as float) price_inv,
	sum(CASE udft.internal_field_type 			
		WHEN 18700 THEN --Position based fee  BaseLoad Applies to All
			round(CASE WHEN isnull(hv.curve_id,-1)=-1 or (uddft.udf_category=101900 and 
			 td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102
			) THEN  td.deal_volume  ELSE abs(hv.volume) END * udfvalue.udfvalue, ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
		WHEN 18731 THEN --Injection based Fee
			round(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN  td.deal_volume  ELSE abs(hv.volume) END  * udfvalue.udfvalue, ISNULL(r.rounding, 100))* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
			'

set @qry2b='
		WHEN 18705 THEN --Position based fee  18705 OnPeak 
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
				round(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN   td.deal_volume  ELSE abs(hv.volume) END * udfvalue.udfvalue, ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
			ELSE 0 END 
		WHEN 18710 THEN --Position based fee  18710 OffPeak
			CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
	round(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN  td.deal_volume  ELSE abs(hv.volume) END  * udfvalue.udfvalue, ISNULL(r.rounding, 100))* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) ELSE 0 END 
		WHEN 18701 THEN --Deal Volume monthly based fee BaseLoad Applies to All
			round(ABS(td.contract_volume) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		WHEN 18706 THEN --Deal Volume monthly based fee 18706 OnPeak 
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
			round(ABS(td.contract_volume) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
					ELSE 0 END 
		WHEN 18711 THEN --Deal Volume monthly based fee 18711 OffPeak
			CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
			round(ABS(td.contract_volume) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
			ELSE 0 END 
		WHEN 18704 THEN --Deal Volume Annual based fee BaseLoad Applies to All
	round(ABS(td.contract_volume)/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100))* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		WHEN 18709 THEN --Deal Volume Annual based fee 18709 OnPeak 
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
	round(ABS(td.contract_volume)/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
			ELSE 0 END 
		WHEN 18714 THEN --Deal Volume Annual based fee 18714 OffPeak
			CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
			round(ABS(td.contract_volume)/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
					ELSE 0 END 
		'

set @qry3b='
		WHEN 18702 THEN --Capacity based Annual fee BaseLoad Applies to All
		round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		WHEN 18707 THEN --Capacity based Annual fee 18707 OnPeak 
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
			round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
					ELSE 0 END 
		WHEN 18712 THEN --Capacity based Annual fee 18712 OffPeak
			CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
			round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		ELSE 0 END 
		WHEN 18703 THEN --Capacity based fee BaseLoad Applies to All
		round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * udfvalue.udfvalue, ISNULL(r.rounding, 100))* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		WHEN 18708 THEN --Capacity based fee 18708 OnPeak 
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
		round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
			ELSE 0 END 
		WHEN 18713 THEN --Capacity based fee 18713 OffPeak
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
			round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
					ELSE 0 END 
		WHEN 18715 THEN -- Lump sum Annual Applies to All
			round(udfvalue.udfvalue/12, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/nullif(totalhours,0),1)
		WHEN 18716 THEN -- Lump sum Monthly Applies to All
			round(udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
				* case when td.term_frequency=''d'' then cast(1.0 as float)/day(eomonth(td.term_start)) else ISNULL(partialhours/nullif(totalhours,0),1) end 
				WHEN 18717 THEN --Capacity based on Term Fee
		round((ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))*CAST((DATEDIFF(d,td.term_start,td.term_end)+1) AS FLOAT)/CAST((DATEDIFF(d,td.entire_term_start,td.entire_term_end)+1) AS FLOAT)) * cast (uddf.udf_value as float), ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1) 
		WHEN 18732 THEN-- Lump Sum Fixed
			ROUND(udfvalue.udfvalue, ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
		WHEN 18737 THEN --Percentage - Fixed 
		((udfvalue.udfvalue * tlm.contract_value)/100) /ISNULL(fx.price_fx_conv_factor,1)
'
set @qry4b='
		WHEN 18719 THEN --Deal Volume based daily fee 
		round(ABS(td.contract_volume) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1)
				WHEN 18720 THEN --Capacity based Daily fee BaseLoad Applies to All
		round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * udfvalue.udfvalue, ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1)
		WHEN 18721 THEN -- Lump sum Daily Fee
			round(udfvalue.udfvalue, ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1) 
		WHEN 18725 THEN 
			CASE WHEN '''+@calc_type+'''= ''s'' AND td.internal_deal_type_value_id = 11 THEN 0 ELSE udfvalue.udfvalue * fbvc.curve_value * ABS(hv.volume) END
		WHEN 18726 THEN 
			CASE WHEN '''+@calc_type+'''= ''s'' AND td.internal_deal_type_value_id = 11 THEN 0 ELSE udfvalue.udfvalue  * ABS(hv.volume) END
		WHEN 18727 THEN 
			CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE udfvalue.udfvalue * ABS(hv.volume) *(CAST(12 AS FLOAT)/cast(365 AS Float)) END 
	'
set @qry5b='
		WHEN 18728 THEN 
			CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE udfvalue.udfvalue* ABS(hv.volume) END
		WHEN 18729 THEN 
			CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE udfvalue.udfvalue* ABS(hv.volume) * (ISNULL(24/partialhours,1)) END
		WHEN 18739 THEN
			 td.deal_volume * sfv.value
		WHEN 18741 THEN
			 td.deal_volume * sfv.value
		WHEN 18742 THEN
				sddh.positive_vol
		WHEN 18743 THEN
				sddh.negative_vol
	ELSE NULL END) value_deal,cast(0 as float) value,cast(0 as float) value_inv,MAX(td.fixed_price_currency_id) deal_cur_id,
	MAX(td.settlement_currency) inv_cur_id,NULL contract_value,NULL contract_value_deal,NULL contract_value_inv,
	MAX(udft.internal_field_type) internal_type,MAX(uddft.udf_tabgroup) tab_group_name, MAX(uddft.udf_group) udf_group_name,
	MAX(uddft.sequence) sequence,MAX(td.func_cur_id) fee_currency_id,MAX(td.func_cur_id) currency_id,NULL contract_mkt_flag,
	MAX(td.source_deal_detail_id) source_deal_detail_id,MAX(ISNUMERIC(COALESCE(udddf.udf_value,uddf.udf_value,udf_formula.formula_eval_value,sfv.value,sddh.vol))) f_value,
			SUM(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)))  capacity,
	SUM(CASE WHEN (uddft.internal_field_type IN (18702, 18703,18717)) THEN ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) ELSE 1 END) filter1,
	MAX(sfv.minimum_value*udfvalue.sgn) minimum_value,MAX(sfv.maximum_value*udfvalue.sgn) maximum_value,
	MAX(isnull(udddf.counterparty_id,uddf.counterparty_id)) counterparty_id,
	MAX(isnull(udddf.contract_id,uddf.contract_id)) contract_id
	into  #tmp_fees_breakdown_000 --  select * from  #tmp_fees_breakdown 
	FROM	#temp_deals td 
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
		INNER JOIN #uddft uddft ON uddft.template_id=sdh.template_id	and td.leg= ISNULL(uddft.leg,td.leg)	
		INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)
		LEFT JOIN #uddf uddf ON uddf.source_deal_header_id = td.source_deal_header_id 
				AND uddf.udf_template_id = uddft.udf_template_id AND uddft.field_type<>''w''
		LEFT JOIN #udddf udddf ON udddf.udf_template_id = uddft.udf_template_id
				AND udddf.source_deal_detail_id = td.source_deal_detail_id AND uddft.field_type<>''w''
	LEFT JOIN ' + @tmp_pos_neg_price_vol + ' sddh ON sddh.source_deal_detail_id = td.source_deal_detail_id
		AND udft.internal_field_type IN (18742,18743)
		outer apply
		( 
			select max(curve_id) curve_id, sum(volume) volume from '+@tmp_hourly_price_vol_fee+' 
			where source_deal_header_id=td.source_deal_header_id AND curve_id=td.curve_id AND deal_term_start=td.term_start AND leg = td.leg 	
		) hv
		LEFT JOIN vol_value_rounding r ON r.contract_id = td.contract_id AND r.item_type = ''f'' AND r.field_id = uddft.field_id LEFT JOIN
			source_currency sc ON sc.source_currency_id = coalesce(CAST(uddft.currency_field_id AS INT), td.original_fixed_price_currency_id)
		LEFT JOIN #fx_curves fx ON fx.fx_currency_id = COALESCE(sc.currency_id_to, sc.source_currency_id) AND 
 			fx.func_cur_id = td.func_cur_id AND fx.source_system_id = td.source_system_id AND
 			fx.as_of_date= td.exp_curve_as_of_date AND fx.maturity_date= td.monthly_maturity 
			and fx.market_value_desc=td.fx_conversion_market
'

set @qry6b='
	outer apply
	( select avg(price_fx_conv_factor) price_fx_conv_factor
		from #fx_curves  where fx_currency_id = ISNULL(sc.currency_id_to, sc.source_currency_id) AND 
			func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id 
		--  AND fx_deal.as_of_date= td.exp_curve_as_of_date 
			AND  maturity_date between td.term_start and td.term_end
		and market_value_desc=td.fx_conversion_market'+
		case when @calc_type='s' then ' and as_of_date between ''' +@term_start+''' and ''' +@term_end+'''' else ' and as_of_date=td.curve_as_of_date' end 
		+'
	) fx_deal
	LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = td.curve_id	
	outer apply 
	( 
		select source_deal_header_id,max(option_premium) option_premium 
		from  #option_param where source_deal_header_id = td.source_deal_header_id
			and td.term_start=term_start AND udft.internal_field_type = 18722 
		group by source_deal_header_id
	)op 
	outer apply 
	(
		select source_deal_header_id, count( distinct source_deal_detail_id) count from #temp_deals 
		WHERE source_deal_header_id = td.source_deal_header_id GROUP BY source_deal_header_id 
	) count
	'

set @qry7b='
	LEFT JOIN '+@calc_result_table5+' udf_formula ON udf_formula.source_deal_detail_id = td.source_deal_detail_id
		and uddft.udf_template_id=udf_formula.udf_template_id AND udf_formula.is_final_result = ''y'' 	
	left join #fuel_based_variable_charge fbvc on fbvc.location_id=td.location_id and fbvc.term_start=td.term_start
	LEFT JOIN #tmp_source_fees sfv ON sfv.source_deal_detail_id=td.source_deal_detail_id AND sfv.field_id=uddft.field_name
	OUTER APPLY(
		SELECT ISNULL(NULLIF(SUM(CAST(volume_mult AS FLOAT)),0),1) AS totalhours, 
		ISNULL(NULLIF(SUM(CASE WHEN '''+ @calc_type+''' =''s'' AND term_date <= '''+@as_of_date+''' THEN CAST(volume_mult AS FLOAT)
					WHEN '''+ @calc_type+''' <>''s'' AND '''+isnull(@calc_explain_type,'')+''' = ''d'' AND term_date > '''+@as_of_date +''' AND term_date<='''+isnull(@next_business_day,'') +''' THEN CAST(volume_mult AS FLOAT)
			WHEN '''+ @calc_type+'''<>''s'' AND '''+isnull(@calc_explain_type,'') +'''='''' AND term_date >'''+ @as_of_date+''' THEN CAST(volume_mult AS FLOAT)
		ELSE 0 END),0)
	,1) partialhours
		FROM hour_block_term
		WHERE block_type = case when udft.internal_field_type =18702 then 12000 else ISNULL(spcd.block_type,12000) end
			AND block_define_id = case when udft.internal_field_type =18702 then '+cast(@baseload_block_definition as varchar) +' else ISNULL(spcd.block_define_id,'+cast(@baseload_block_definition as varchar)+') end 
			AND term_date BETWEEN td.term_start AND td.term_end
	) hbt
	LEFT JOIN contract_group cg ON cg.contract_id = td.contract_id
	outer apply (select top(1) storage_capacity,CASE WHEN ownership_type=45301 THEN ''s'' ELSE ''b'' END st_buy_sell_flag  from  general_assest_info_virtual_storage
			where agreement = td.contract_id
		) gaivs 		
	outer apply
	(
		select source_deal_header_id,source_deal_detail_id,leg, term_start, term_end
			,max(formula_rounding) formula_rounding, max(product_id) product_id,max(buy_sell_flag) buy_sell_flag
			,max(formula_conv_factor) formula_conv_factor,max(formula_conv_factor_deal) formula_conv_factor_deal
			,max(formula_conv_factor_inv) formula_conv_factor_inv
			,max( deal_cur_id) deal_cur_id, max(inv_cur_id) inv_cur_id,max(func_cur_id) func_cur_id
			,sum(volume) volume
			,sum(deal_volume) deal_volume
			,sum(contract_value_deal) contract_value_deal,sum(market_value_deal) market_value_deal
			,sum(contract_value) contract_value, sum(market_value) market_value
			,sum(contract_value_inv) contract_value_inv, sum(market_value_inv ) market_value_inv
		from #temp_leg_mtm  where source_deal_detail_id = td.source_deal_detail_id
		AND ISNULL(shipment_id, -1) = ISNULL(td.shipment_id, -1) AND ISNULL(ticket_detail_id, -1) = ISNULL(td.ticket_detail_id, -1)
		group by source_deal_header_id,source_deal_detail_id,leg, term_start, term_end
	) tlm	
	outer apply ( 
		SELECT try_cast(isnull(abs(try_cast(COALESCE(udddf.udf_value,uddf.udf_value,sfv.value) as float))*
			CASE WHEN COALESCE(sfv.rec_pay,udddf.receive_pay,uddf.receive_pay,case when ISNULL(gaivs.st_buy_sell_flag,td.buy_sell_flag)=''b'' then ''p'' else ''r'' end)=''r''
				THEN 1 ELSE -1 END * CASE WHEN udft.internal_field_type = 18743 THEN -1 ELSE 1 END
			,udf_formula.formula_eval_value) as float) udfvalue
			,CASE WHEN COALESCE(sfv.rec_pay,udddf.receive_pay,uddf.receive_pay,case when ISNULL(gaivs.st_buy_sell_flag,td.buy_sell_flag)=''b'' then ''p'' else ''r'' end)=''r''
				THEN 1 ELSE -1 END  sgn
	) udfvalue
		 '		

set @qry8b=	' 
	WHERE isnull(udft.internal_field_type,-1) not IN(18722,18723,18724,18733,18744,18745) and	udft.internal_field_type IS NOT NULL AND COALESCE(sfv.value,udddf.udf_value,uddf.udf_value,cast(udf_formula.formula_eval_value as varchar), sddh.vol) is not null and
		(( udft.internal_field_type <> 18722 AND ISNUMERIC(COALESCE(sfv.value,udddf.udf_value,uddf.udf_value,cast(udf_formula.formula_eval_value as varchar), sddh.vol)) = 1) OR udft.internal_field_type = 18722)
			AND	udft.internal_field_type<>18718 and 
		CASE WHEN (udft.internal_field_type IN (18702, 18703,18717)) THEN ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))
		ELSE			
			--CASE WHEN isnull(hv.curve_id,-1)=-1 THEN td.deal_volume  ELSE ABS(hv.volume) END 
			1
	END <> 0 and ((op.source_deal_header_id is not null and td.leg = 1) or op.source_deal_header_id is null)
	GROUP BY  
			td.source_deal_header_id,td.leg,
			CASE WHEN '''+@cpt_type+'''=''b'' THEN CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME)
		WHEN --op.source_deal_header_id IS NOT NULL and 
			uddft.internal_field_type IN (18722) THEN 
				case when COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) is not null or ''s''=''' +@calc_type+''' then 
				--CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME) 
				ISNULL(sdh.option_settlement_date,sdh.deal_date) 
				else td.term_start  end 
		WHEN uddft.internal_field_type IN(18723,18724) THEN CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME) 
		ELSE td.term_start END, 
	CASE WHEN '''+@cpt_type+'''=''b'' THEN DATEADD(m,1,CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME))-1
		WHEN --op.source_deal_header_id IS NOT NULL and 
			uddft.internal_field_type IN (18722) THEN 
				case when COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value) is not null or ''s''=''' +@calc_type+''' then
				-- DATEADD(m,1,CAST(CONVERT(VARCHAR(7),ISNULL(sdh.option_settlement_date,sdh.deal_date),120)+''-01'' AS DATETIME))-1 
				 ISNULL(sdh.option_settlement_date,sdh.deal_date)
				else td.term_end  end 
		WHEN uddft.internal_field_type IN(18723,18724) THEN DATEADD(m,1,CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME))-1 ELSE td.term_end END ,		
	uddft.field_name , uddft.field_label '+CASE WHEN @cpt_type ='b' THEN '' ELSE ',td.source_deal_detail_id' END 

--END
-- Insert fees for transportation fees
set @qry1a='
SELECT	'''+@as_of_date+''' as_of_date, 
	td.source_deal_header_id,
	td.leg,
	td.term_start, td.term_end,		
	uddft.field_name field_id, 
	uddft.field_label field_name, 
	--volume should be + if sell - if buy as fee cashflow should be opposite
	sgn.sgn*abs(CASE WHEN uddft.internal_field_type IN(18705) THEN --Capacity based fee 18713 OffPeak
				CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
		CASE WHEN ISNUMERIC(uddft.rate_deal)=1 THEN cast(uddft.rate_deal as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)	ELSE 0 END 
			 WHEN uddft.internal_field_type IN(18710) THEN 
				CASE WHEN (td.curve_tou=18901) THEN --ONPEAK
			CASE WHEN ISNUMERIC(uddft.rate_deal)=1 THEN cast(uddft.rate_deal as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
				ELSE 0 END 
	END) total_price_deal,
	cast(0 as float) total_price,cast(0 as float) total_price_inv,
		sgn.sgn*abs(CASE WHEN (uddft.internal_field_type IN (18702, 18703)) THEN ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))
			 WHEN (uddft.internal_field_type IN (18701, 18704)) THEN ABS(td.contract_volume)
			 when uddft.internal_field_type IN (18731) THEN isnull(CASE WHEN CAST(udddf2.udf_value AS FLOAT)-CAST(udddf3.udf_value AS FLOAT)=0  THEN 0 WHEN CAST(udddf2.udf_value AS FLOAT)-CAST(udddf3.udf_value AS FLOAT)>0 THEN CAST(udddf2.udf_value AS FLOAT) ELSE CAST(udddf3.udf_value AS FLOAT) END ,0)
		ELSE			
			CASE WHEN isnull(hv.curve_id,-1)=-1 THEN td.deal_volume  ELSE ABS(hv.volume) END 
		END) volume,
	CASE WHEN uddft.internal_field_type IN(18705) THEN --Capacity based fee 18713 OffPeak
			CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
			CASE WHEN ISNUMERIC(uddft.rate_deal)=1 THEN cast(uddft.rate_deal as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) ELSE 0 END 
			WHEN uddft.internal_field_type IN(18710) THEN 
			CASE WHEN (td.curve_tou=18901) THEN --ONPEAK
			CASE WHEN ISNUMERIC(uddft.rate_deal)=1 THEN cast(uddft.rate_deal as float) ELSE NULL END * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
			ELSE 0 END 
	END price_deal,cast(0 as float) price,cast(0 as float) price_inv,
		'
set @qry2a='
	sgn.sgn*abs(CASE uddft.internal_field_type 			
	WHEN 18700 THEN --Position based fee  BaseLoad Applies to All
		round(CASE WHEN isnull(hv.curve_id,-1)=-1 or (uddft.udf_category=101900 and 
			 td.internal_deal_type_value_id=103 and td.internal_deal_subtype_value_id=102
			) THEN  td.deal_volume  ELSE (hv.volume) END * -1 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) * ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
	WHEN 18731 THEN --Position based fee  BaseLoad Applies to All
			round(isnull(CASE WHEN CAST(udddf2.udf_value AS FLOAT)-CAST(udddf3.udf_value AS FLOAT)=0  THEN 0 WHEN CAST(udddf2.udf_value AS FLOAT)-CAST(udddf3.udf_value AS FLOAT)>0 THEN CAST(udddf2.udf_value as float) ELSE CAST(udddf3.udf_value as float) END ,0)  * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
	WHEN 18705 THEN --Position based fee  18705 OnPeak 
		CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
		round(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN   td.deal_volume  ELSE (hv.volume) END * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
		ELSE 0 END 
	WHEN 18710 THEN --Position based fee  18710 OffPeak
		CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
		round(CASE WHEN isnull(hv.curve_id,-1)=-1 THEN  td.deal_volume  ELSE (hv.volume) END * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1)
		ELSE 0 END 
	WHEN 18701 THEN --Deal Volume monthly based fee BaseLoad Applies to All
		round(ABS(td.contract_volume) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
	WHEN 18706 THEN --Deal Volume monthly based fee 18706 OnPeak 
		CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
		round(ABS(td.contract_volume) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		ELSE 0 END 
	WHEN 18711 THEN --Deal Volume monthly based fee 18711 OffPeak
		CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
		round(ABS(td.contract_volume) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		ELSE 0 END 
	WHEN 18704 THEN --Deal Volume Annual based fee BaseLoad Applies to All
		round(ABS(td.contract_volume)/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
	WHEN 18709 THEN --Deal Volume Annual based fee 18709 OnPeak 
		CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
		round(ABS(td.contract_volume)/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		ELSE 0 END 
	WHEN 18714 THEN --Deal Volume Annual based fee 18714 OffPeak
		CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
		round(ABS(td.contract_volume)/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		ELSE 0 END '

set @qry3a='
	WHEN 18702 THEN --Capacity based Annual fee BaseLoad Applies to All
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
			WHEN 18707 THEN --Capacity based Annual fee 18707 OnPeak 
				CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
				ELSE 0 END 
			WHEN 18712 THEN --Capacity based Annual fee 18712 OffPeak
				CASE WHEN (td.curve_tou=18901) THEN --OFFPEAK
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))/12 * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
				ELSE 0 END 
			WHEN 18703 THEN --Capacity based fee BaseLoad Applies to All
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
			WHEN 18708 THEN --Capacity based fee 18708 OnPeak 
				CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
				ELSE 0 END 
			WHEN 18713 THEN --Capacity based fee 18713 OffPeak
				CASE WHEN (td.curve_tou=18900) THEN --ONPEAK
				round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
					* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
				ELSE 0 END 
			WHEN 18715 THEN -- Lump sum Annual Applies to All
		CASE WHEN(td.leg=1) THEN
		round(cast (uddft.rate_deal as float)/12, ISNULL(r.rounding, 100)) 
		* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		ELSE 0 END 
	'
set @qry4a='
		WHEN 18716 THEN -- Lump sum Monthly Applies to All
				CASE WHEN(td.leg=1) THEN
				round(cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) 
				* case when td.term_frequency=''d'' then cast(1.0 as float)/day(eomonth(td.term_start)) else ISNULL(partialhours/nullif(totalhours,0),1) end
				ELSE 0 END
		WHEN 18717 THEN --Capacity based on Term Fee
			round((ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))*CAST((DATEDIFF(d,td.term_start,td.term_end)+1) AS FLOAT)/CAST((DATEDIFF(d,td.entire_term_start,td.entire_term_end)+1) AS FLOAT)) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(partialhours/totalhours,1)
		WHEN 18719 THEN --Deal Volume based daily fee 
			round(ABS(td.contract_volume) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1)
		WHEN 18720 THEN --Capacity based Daily fee BaseLoad Applies to All
			round(ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity)) * cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
				* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1)
		WHEN 18721 THEN -- Lump sum Daily Fee
			CASE WHEN(td.leg=1) THEN
			round(cast (uddft.rate_deal as float), ISNULL(r.rounding, 100)) 
			* ISNULL(sc.factor, 1) * ISNULL(fx_deal.price_fx_conv_factor, 1) * ISNULL(24/totalhours,1)
			ELSE 0 END 						
		WHEN 18725 THEN 
				CASE WHEN ('''+@calc_type+'''= ''s'' AND td.internal_deal_type_value_id = 11) THEN 0 ELSE uddft.rate_deal * ISNULL(spc.curve_value,1) * ABS(hv.volume) END 
		WHEN 18726 THEN 
				CASE WHEN ('''+@calc_type+'''= ''s'' AND td.internal_deal_type_value_id = 11) THEN 0 ELSE uddft.rate_deal  * ABS(hv.volume) END 
		WHEN 18727 THEN 
				CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE uddft.rate_deal  * ABS(hv.volume) *(CAST(12 AS FLOAT)/cast(365 AS Float)) END
		WHEN 18728 THEN 
				CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE uddft.rate_deal  * ABS(hv.volume) END
		WHEN 18729 THEN 
				CASE WHEN td.internal_deal_type_value_id = 13 THEN 0 ELSE uddft.rate_deal * ABS(hv.volume)* (ISNULL(24/partialhours,1)) END
	ELSE NULL END) value_deal,cast(0 as float) value,cast(0 as float) value_inv,	
	td.fixed_price_currency_id deal_cur_id,td.settlement_currency inv_cur_id, 
	NULL contract_value,
	NULL contract_value_deal,
	NULL contract_value_inv,
	uddft.internal_field_type internal_type,
	uddft.udf_tabgroup tab_group_name, 
	uddft.udf_group udf_group_name,
	uddft.sequence,
	td.func_cur_id fee_currency_id,
	td.func_cur_id currency_id,
	NULL contract_mkt_flag,td.source_deal_detail_id
	,uddf.counterparty_id,uddf.contract_id

	'
set @qry5a='
into #tmp_fees_breakdown_001
	FROM	#temp_deals td
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
		LEFT JOIN user_defined_deal_fields_template ud ON ud.template_id = sdh.template_id AND ud.field_id = 293432
		LEFT JOIN user_defined_fields_template udft ON udft.udf_template_id = ud.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)		
		LEFT JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = td.source_deal_header_id AND ud.udf_template_id = uddf.udf_template_id
		LEFT JOIN delivery_path dp ON dp.path_id = try_cast(uddf.udf_value as int)	
		LEFT JOIN contract_group cg ON cg.contract_id = td.contract_id
	outer apply (select top(1) storage_capacity,CASE WHEN ownership_type=45301 THEN ''s'' ELSE ''b'' END st_buy_sell_flag from  general_assest_info_virtual_storage where agreement = td.contract_id
		) gaivs  
		LEFT JOIN counterparty_contract_rate_schedule ccrs ON ccrs.counterparty_id = dp.counterparty 
				AND ccrs.contract_id = cg.contract_id AND dp.path_id = ccrs.path_id
		LEFT JOIN user_defined_deal_fields_template ud1 ON ud1.template_id = sdh.template_id AND ud1.field_id = -5678
		LEFT JOIN user_defined_fields_template udft1 ON udft1.udf_template_id = ud1.udf_user_field_id and td.leg= ISNULL(udft1.leg,td.leg)	
		LEFT JOIN user_defined_deal_fields uddf1 ON uddf1.source_deal_header_id = td.source_deal_header_id AND ud1.udf_template_id = uddf1.udf_template_id
		LEFT JOIN user_defined_deal_fields_template ud2 ON ud2.template_id = sdh.template_id AND ud2.field_id = -10000046 --injection volume
		LEFT JOIN user_defined_fields_template udft2 ON udft2.udf_template_id = ud2.udf_user_field_id and td.leg= ISNULL(udft2.leg,td.leg)	
		LEFT JOIN user_defined_deal_fields uddf2 ON uddf2.source_deal_header_id = td.source_deal_header_id AND ud2.udf_template_id = uddf2.udf_template_id
		LEFT JOIN user_defined_deal_detail_fields udddf2 ON udddf2.udf_template_id = ud2.udf_template_id
			AND udddf2.source_deal_detail_id = td.source_deal_detail_id
		LEFT JOIN user_defined_deal_fields_template ud3 ON ud3.template_id = sdh.template_id AND ud3.field_id = -10000047 --withdrawal volume
		LEFT JOIN user_defined_fields_template udft3 ON udft3.udf_template_id = ud3.udf_user_field_id and td.leg= ISNULL(udft3.leg,td.leg)	
		LEFT JOIN user_defined_deal_fields uddf3 ON uddf3.source_deal_header_id = td.source_deal_header_id AND ud3.udf_template_id = uddf3.udf_template_id
		LEFT JOIN user_defined_deal_detail_fields udddf3 ON udddf3.udf_template_id = ud3.udf_template_id
		AND udddf3.source_deal_detail_id = td.source_deal_detail_id'

set @qry6a='
		outer apply
		(
		select uddft_t.*,trs.rec_pay, trs.rate* case when trs.rate_granularity=106202 then cast(1.0 as float)/(datediff(month,trs.begin_date,trs.end_date)+1) else 1 end *isnull(fx_t_deal.price_fx_conv_factor, 1)*ISNULL(conv_t.conversion_factor,1) rate_deal
		--from (
		--	SELECT rate_schedule_id,rate_type_id,MAX(effective_date) effective_date FROM transportation_rate_schedule trs2 
		--		WHERE rate_schedule_id = COALESCE(uddf1.udf_value,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
		--	GROUP BY rate_schedule_id,rate_type_id
		--) trs1
		from transportation_rate_schedule trs 
		inner join user_defined_fields_template uddft_t 
				on uddft_t.field_id = trs.rate_type_id AND  td.leg= isnull(uddft_t.leg,td.leg)
			and trs.rate_schedule_id = COALESCE(uddf1.udf_value,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
			--AND trs.rate_schedule_id = trs1.rate_schedule_id AND trs1.effective_date = trs.effective_date
			--AND trs.rate_type_id = trs1.rate_type_id
				and td.term_start between isnull(trs.begin_date,''1900-01-01'') and isnull(trs.end_date,''9999-01-01'')
		LEFT JOIN rec_volume_unit_conversion conv_t ON trs.uom_id=conv_t.FROM_source_uom_id AND conv_t.to_source_uom_id=td.deal_volume_uom_id  
				AND conv_t.state_value_id is null AND conv_t.assignment_type_value_id is null AND conv_t.curve_id is null  
		outer apply
		( select avg(price_fx_conv_factor) price_fx_conv_factor
			from #fx_curves  where fx_currency_id = trs.currency_id AND 
				func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id 
			--  AND fx_deal.as_of_date= td.exp_curve_as_of_date 
				AND  maturity_date between td.term_start and td.term_end
			and market_value_desc=td.fx_conversion_market'+
			case when @calc_type='s' then ' and as_of_date between ''' +@term_start+''' and ''' +@term_end+'''' else ' and as_of_date=td.curve_as_of_date' end 
		+'
		) fx_t_deal		
		union all
		select uddft_v.*,vc.rec_pay
			, vc.rate *isnull(fx_v_deal.price_fx_conv_factor, 1)*ISNULL(conv_v.conversion_factor,1) rate_deal
		from variable_charge vc 
			inner join user_defined_fields_template uddft_v on uddft_v.field_id = vc.rate_type_id AND  td.leg= isnull(uddft_v.leg,td.leg) and vc.rate_schedule_id = COALESCE(uddf1.udf_value,ccrs.rate_schedule_id,dp.rateSchedule,cg.maintain_rate_schedule)
			and td.term_start between isnull(vc.begin_date,''1900-01-01'') and isnull(vc.end_date,''9999-01-01'')
			LEFT JOIN rec_volume_unit_conversion conv_v ON vc.uom_id=conv_v.FROM_source_uom_id AND conv_v.to_source_uom_id=td.deal_volume_uom_id  
				AND conv_v.state_value_id is null AND conv_v.assignment_type_value_id is null AND conv_v.curve_id is null  
		outer apply
		( select avg(price_fx_conv_factor) price_fx_conv_factor
			from #fx_curves  where fx_currency_id = vc.currency_id AND 
				func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id 
				AND  maturity_date between td.term_start and td.term_end
				and market_value_desc=td.fx_conversion_market'+
		case when @calc_type='s' then ' and as_of_date between ''' +@term_start+''' and ''' +@term_end+'''' else ' and as_of_date=td.curve_as_of_date' end 
		+'
		) fx_v_deal		
		) uddft  '
set @qry7a='
	outer apply
	( 
		select max(curve_id) curve_id, sum(volume) volume from '+@tmp_hourly_price_vol+' 
		where source_deal_header_id=td.source_deal_header_id AND curve_id=td.curve_id AND deal_term_start=td.term_start AND leg = td.leg 	
	) hv
	LEFT JOIN vol_value_rounding r ON r.contract_id = td.contract_id AND r.item_type = ''f'' AND r.field_id = uddft.field_id 
	LEFT JOIN source_currency sc ON sc.source_currency_id = coalesce(CAST(uddft.currency_field_id AS INT), td.original_fixed_price_currency_id)
	outer apply
		( select avg(price_fx_conv_factor) price_fx_conv_factor
			from #fx_curves  where fx_currency_id = ISNULL(sc.currency_id_to, sc.source_currency_id) AND 
				func_cur_id = td.fixed_price_currency_id AND source_system_id = td.source_system_id 
				AND  maturity_date between td.term_start and td.term_end
			and market_value_desc=td.fx_conversion_market'+
		case when @calc_type='s' then ' and as_of_date between ''' +@term_start+''' and ''' +@term_end+'''' else ' and as_of_date=td.curve_as_of_date' end 
		+'
		) fx_deal		
		LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = td.curve_id	
		LEFT JOIN source_minor_location sml on sml.source_minor_location_id = td.location_id
		LEFT JOIN source_price_curve_def spcd1 ON spcd1.source_curve_def_id = sml.term_pricing_index
		LEFT JOIN source_price_curve spc on spc.source_curve_def_id = isnull(spcd1.settlement_curve_id,td.curve_id) AND spc.as_of_date =td.term_start  AND spc.maturity_date = td.term_start AND spc.curve_source_value_id='+CAST(@curve_source_value_id AS VARCHAR)+'
		OUTER APPLY(
			SELECT ISNULL(NULLIF(SUM(CAST(volume_mult AS FLOAT)),0),1) AS totalhours, 
			ISNULL(NULLIF(SUM(CASE WHEN '''+@calc_type+''' =''s'' AND term_date <= '''+@as_of_date+''' THEN CAST(volume_mult AS FLOAT)
								   WHEN '''+@calc_type+''' <> ''s'' AND '''+isnull(@calc_explain_type,'')+''' = ''d'' AND term_date >  '''+@as_of_date+''' AND term_date<='''+isnull(@next_business_day,'')+''' THEN CAST(volume_mult AS FLOAT)
								   WHEN '''+@calc_type+''' <> ''s'' AND '''+isnull(@calc_explain_type,'')+''' ='''' AND term_date > '''+@as_of_date+''' THEN CAST(volume_mult AS FLOAT)
								ELSE 0 END),0),1) partialhours
			FROM hour_block_term
			WHERE block_type = case when uddft.internal_field_type =18702 then 12000 else ISNULL(spcd.block_type,12000) end
				AND block_define_id = case when uddft.internal_field_type =18702 then '+cast(@baseload_block_definition as varchar)+' else ISNULL(spcd.block_define_id,'+cast(@baseload_block_definition as varchar)+') end 
				AND term_date BETWEEN td.term_start AND td.term_end	
		) hbt	
		LEFT JOIN #tmp_fees_breakdown fb ON fb.source_deal_header_id = td.source_deal_header_id AND fb.leg = td.leg AND fb.term_start = td.term_start AND fb.field_id = uddft.field_name
		outer apply ( select case when COALESCE(uddft.rec_pay,case when ISNULL(gaivs.st_buy_sell_flag,td.buy_sell_flag)=''b'' then ''p'' else ''r'' end)=''r'' then 1 else -1 end sgn ) sgn
	WHERE	isnull(udft.internal_field_type,-1) not IN(18722,18723,18724,18733) and fb.source_deal_header_id IS NULL
			AND uddft.internal_field_type IS NOT NULL AND
		ISNUMERIC(uddft.rate_deal) = 1 AND	uddft.internal_field_type<>18718 and 
			CASE WHEN (uddft.internal_field_type IN (18702, 18703,18717)) THEN ABS(coalesce(td.capacity, cg.mdq,gaivs.storage_capacity))
				ELSE 1 END <> 0	;
'


set @qry8a='
	SELECT	'''+ @as_of_date+''' as_of_date, 
			td.source_deal_header_id,
			td.leg,
			CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME) term_start, 
			DATEADD(m,1,CAST(CONVERT(VARCHAR(7),sdh.deal_date,120)+''-01'' AS DATETIME))-1 term_end,		
			uddft.field_name field_id, 
			uddft.field_label field_name, 
			case when udft.internal_field_type =18733 then null else 
				COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value, sfv.value) 
			end price,
			abs(td.total_volume) volume,
			sgn.sgn*abs(CASE udft.internal_field_type 			
				WHEN 18723 THEN
					td.total_volume * COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value, sfv.value)
				WHEN 18724 THEN 	
					CASE WHEN isnull(hv.curve_id,-1)=-1 THEN  td.deal_volume  ELSE (hv.volume) END * COALESCE(sfv.value, udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value)	
				WHEN 18733 THEN
					COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value, sfv.value)
				WHEN 18737 THEN --Percentage - Fixed
 					COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value, sfv.value) * sds1.settlement_amount
				WHEN 18740 THEN
					td.total_volume * COALESCE(udf_formula.formula_eval_value,udddf.udf_value,uddf.udf_value, sfv.value)
				ELSE NULL END) value,		
			NULL contract_value,
			(udft.internal_field_type) internal_type,
			(uddft.udf_tabgroup) tab_group_name, 
			(uddft.udf_group) udf_group_name,
			(uddft.sequence) sequence,
			(td.func_cur_id) fee_currency_id,
			(td.func_cur_id) currency_id,
			 NULL contract_mkt_flag,td.source_deal_detail_id,
			(ISNUMERIC(COALESCE(sfv.value, udddf.udf_value,uddf.udf_value,udf_formula.formula_eval_value))) f_value,
			NULL capacity,
			1 filter1,
			(sfv.minimum_value*sgn.sgn) minimum_value,
			(sfv.maximum_value*sgn.sgn) maximum_value
			,isnull(udddf.counterparty_id,uddf.counterparty_id) counterparty_id,isnull(udddf.contract_id,uddf.contract_id) contract_id

	into  #tmp_fees_breakdown_002
	FROM	#temp_deals_broker td 
			INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = td.source_deal_header_id
			INNER JOIN #uddft uddft ON uddft.template_id=sdh.template_id	and td.leg= ISNULL(uddft.leg,td.leg)	
			INNER JOIN #udft udft ON udft.udf_template_id = uddft.udf_user_field_id and td.leg= ISNULL(udft.leg,td.leg)		
			LEFT JOIN #uddf uddf ON uddf.source_deal_header_id = td.source_deal_header_id  
					AND uddf.udf_template_id = uddft.udf_template_id
			LEFT JOIN #udddf udddf ON udddf.udf_template_id = uddft.udf_template_id
					AND udddf.source_deal_detail_id = td.source_deal_detail_id
			outer apply
			( 
				select max(curve_id) curve_id, sum(volume) volume from '+@tmp_hourly_price_vol+' 
				where source_deal_header_id=td.source_deal_header_id AND curve_id=td.curve_id AND deal_term_start=td.term_start AND leg = td.leg 	
			) hv
			LEFT JOIN vol_value_rounding r ON r.contract_id = td.contract_id AND r.item_type = ''f'' AND r.field_id = uddft.field_id 
			LEFT JOIN source_currency sc ON sc.source_currency_id = CAST(uddft.currency_field_id AS INT)
		LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = td.curve_id	
		outer apply ( select source_deal_header_id,max(option_premium) option_premium from  #option_param where source_deal_header_id = td.source_deal_header_id
				and td.term_start=term_start AND udft.internal_field_type = 18722 
				group by source_deal_header_id)op 
		LEFT JOIN '+@calc_result_table5+' udf_formula ON udf_formula.source_deal_detail_id = td.source_deal_detail_id
				and uddft.udf_template_id=udf_formula.udf_template_id AND udf_formula.is_final_result = ''y'' 	
		LEFT JOIN user_defined_deal_fields_template ud ON ud.template_id = sdh.template_id
			AND ud.field_id = 305013
		LEFT JOIN user_defined_deal_fields_template ud1 on ud1.template_id = sdh.template_id
			AND ud1.field_id= 308062
		LEFT JOIN user_defined_deal_fields uddf1 on uddf1.udf_template_id = ud1.udf_template_id 
			AND uddf1.source_deal_header_id = td.source_deal_header_id
		LEFT JOIN user_defined_deal_fields uddf2 on uddf2.udf_template_id = ud.udf_template_id 
			AND uddf2.source_deal_header_id = td.source_deal_header_id
		--------#############--------------------
		OUTER APPLY(SELECT try_cast(uddf.udf_value as int)	udf_value FROM user_defined_deal_fields uddf INNER JOIN user_defined_deal_fields_template udddft ON uddf.udf_template_id=udddft.udf_template_id WHERE uddf.source_deal_header_id=td.source_deal_header_id and udddft.field_id=-5604) uddf_broker
		LEFT JOIN #tmp_source_fees sfv ON sfv.source_deal_detail_id=td.source_deal_detail_id AND sfv.field_id=uddft.field_name
		OUTER APPLY
			(
				SELECT MAX(as_of_date) as_of_date
				FROM source_deal_settlement  where source_deal_header_id = td.source_deal_header_id
			) sds
		OUTER APPLY(SELECT SUM(settlement_amount) settlement_amount FROM source_deal_settlement WHERE source_deal_header_id = td.source_deal_header_id AND as_of_date = sds.as_of_date) sds1
		outer apply ( select case when COALESCE(sfv.rec_pay,udddf.receive_pay,uddf.receive_pay,case when td.buy_sell_flag=''b'' then ''p'' else ''r'' end)=''r'' then 1 else -1 end sgn ) sgn		--------#############--------------------
	WHERE	udft.internal_field_type IN(18723,18724,18733,18737,18740)			
			 AND ISNUMERIC(COALESCE(sfv.value, udddf.udf_value,uddf.udf_value,cast(udf_formula.formula_eval_value as varchar))) = 1
			 AND ((op.source_deal_header_id is not null and td.leg = 1) or op.source_deal_header_id is null) '

set @qry9a='
	--create index indx_tmp_fees_breakdown_001 on #tmp_fees_breakdown_001 (internal_type,filter1);
	create index indx_tmp_fees_breakdown on #tmp_fees_breakdown (internal_type,f_value,filter1);

	INSERT INTO #fees_breakdown(
		as_of_date, source_deal_header_id,leg,term_start, term_end,		
		field_id, field_name, price_deal,price,price_inv, total_price_deal,total_price
		,total_price_inv,volume,value,value_deal,value_inv,deal_cur_id,inv_cur_id
		,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name
		,udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
		,counterparty_id,contract_id
		--,shipment_id,ticket_detail_id
	)  
	SELECT	 as_of_date, source_deal_header_id,leg,term_start, term_end,		
		field_id, field_name, price_deal,price,price_inv, total_price_deal,total_price
		,total_price_inv,volume,value,
		CASE WHEN minimum_value IS NOT NULL AND ABS(value_deal) < ABS(minimum_value) THEN minimum_value
			 WHEN maximum_value IS NOT NULL AND ABS(value_deal) > ABS(maximum_value) THEN maximum_value
			 ELSE value_deal
		END value_deal
		,value_inv,deal_cur_id,inv_cur_id
		,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name
		,udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
		,counterparty_id,contract_id
		--,shipment_id,ticket_detail_id
	 from #tmp_fees_breakdown 
	 where internal_type IS NOT NULL AND (( internal_type <> 18722 AND f_value = 1) OR internal_type = 18722)
			AND	internal_type<>18718 and filter1 <> 0 AND value_deal IS NOT NULL
	union all		
		SELECT	 as_of_date, source_deal_header_id,leg,term_start, term_end,		
		field_id, field_name, price_deal,price,price_inv, total_price_deal,total_price
		,total_price_inv,volume,value,
		CASE WHEN minimum_value IS NOT NULL AND ABS(value_deal) < ABS(minimum_value) THEN minimum_value
			 WHEN maximum_value IS NOT NULL AND ABS(value_deal) > ABS(maximum_value) THEN maximum_value
			 ELSE value_deal
		END value_deal
		,value_inv,deal_cur_id,inv_cur_id
		,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name
		,udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
		,counterparty_id,contract_id
		--,shipment_id,ticket_detail_id
	 from #tmp_fees_breakdown_000 
	 where internal_type IS NOT NULL AND (( internal_type <> 18722 AND f_value = 1) OR internal_type = 18722)
			AND	internal_type<>18718 and filter1 <> 0 AND value_deal IS NOT NULL
	union all				
	SELECT	 as_of_date, source_deal_header_id,leg,term_start, term_end,field_id,field_name,price_deal,price,price_inv,total_price_deal,total_price,total_price_inv,volume,value,value_deal,value_inv,deal_cur_id,inv_cur_id,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name,udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id,counterparty_id,contract_id
	 from #tmp_fees_breakdown_001 ;
	
	INSERT INTO #fees_breakdown(
		as_of_date, source_deal_header_id,leg,term_start, term_end,		
		field_id, field_name , price_deal,price,price_inv, total_price_deal,total_price
		,total_price_inv ,volume,value,value_deal,value_inv ,deal_cur_id,inv_cur_id
		,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name,udf_group_name
		,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
			,counterparty_id,contract_id

		--,shipment_id,ticket_detail_id
	)  

	SELECT	 as_of_date, source_deal_header_id,leg,term_start, term_end, field_id, field_name
		,tfb.price price_deal,tfb.price price,tfb.price price_inv, tfb.price total_price_deal
		, tfb.price total_price,tfb.price total_price_inv ,volume,
		CASE WHEN tfb1.minimum_value IS NOT NULL AND ABS(tfb1.value) < ABS(tfb1.minimum_value) THEN (tfb1.minimum_value/tfb1.total)
				WHEN tfb1.maximum_value IS NOT NULL AND ABS(tfb1.value) > ABS(tfb1.maximum_value) THEN (tfb1.maximum_value/tfb1.total)
				ELSE tfb.value
		END AS value,
		CASE WHEN tfb1.minimum_value IS NOT NULL AND ABS(tfb1.value) < ABS(tfb1.minimum_value) THEN (tfb1.minimum_value/tfb1.total)
				WHEN tfb1.maximum_value IS NOT NULL AND ABS(tfb1.value) > ABS(tfb1.maximum_value) THEN (tfb1.maximum_value/tfb1.total)
				ELSE tfb.value
		END AS value_deal,
		CASE WHEN tfb1.minimum_value IS NOT NULL AND ABS(tfb1.value) < ABS(tfb1.minimum_value) THEN (tfb1.minimum_value/tfb1.total)
				WHEN tfb1.maximum_value IS NOT NULL AND ABS(tfb1.value) > ABS(tfb1.maximum_value) THEN (tfb1.maximum_value/tfb1.total)
				ELSE tfb.value
		END AS value_inv,null deal_cur_id,null inv_cur_id,
		contract_value,contract_value contract_value_deal,contract_value contract_value_inv,
		internal_type,tab_group_name, udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
		,tfb.counterparty_id,tfb.contract_id
	from #tmp_fees_breakdown_002 tfb
		OUTER APPLY (
		SELECT SUM(value) value, MAX(minimum_value) minimum_value,MAX(maximum_value) maximum_value,COUNT(*) total
			FROM #tmp_fees_breakdown_002 tfb1 WHERE tfb1.source_deal_header_id = tfb.source_deal_header_id
		) tfb1
	where internal_type IS NOT NULL AND (( internal_type <> 18722 AND f_value = 1) OR internal_type = 18722)
		AND	internal_type<>18718 and filter1 <> 0  AND tfb1.value  IS NOT NULL
				'

exec spa_print @sqlstmt

exec spa_print @qry1b
exec spa_print @qry2b
exec spa_print @qry3b
exec spa_print @qry4b
exec spa_print @qry5b
exec spa_print @qry6b
exec spa_print @qry7b
exec spa_print @qry8b

exec spa_print @qry1a
exec spa_print @qry2a
exec spa_print @qry3a
exec spa_print @qry4a
exec spa_print @qry5a
exec spa_print @qry6a
exec spa_print @qry7a
exec spa_print @qry8a
exec spa_print @qry9a

exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'
	+@sqlstmt+@qry1b+@qry2b+@qry3b+@qry4b+@qry5b+@qry6b+@qry7b+@qry8b+@qry1a
	+@qry2a+@qry3a+@qry4a+@qry5a+@qry6a+@qry7a+@qry8a+@qry9a
)



IF ((SELECT COUNT(*) FROM #fees_breakdown) = 0 AND @calc_type = 's'
	AND (SELECT COUNT(*) FROM #temp_deals) = 0
	AND (SELECT COUNT(*) FROM #temp_deals_broker) > 0)
BEGIN
	--**ERROR**
		INSERT INTO #calc_status
		SELECT @process_id,
			'Warning',
			CASE WHEN @calc_settlement_adjustment = 1 THEN 'Settlement Adjustments' ELSE 'Deal Settlement Calc' END,
			'Deal Settlement Calc',
			'Warning',
			'Deal Settlement calculation could not completed for as of date: ' + ISNULL(dbo.FNADateFormat(@as_of_date), @as_of_date) + '.',
			'Please check your input.'
	
	GOTO FinalStep
	RETURN
END

-----------pricing term logic: siplify complex formula logic -------------------------------


if exists(select * from #component_price)
begin


	INSERT INTO #fees_breakdown(
		as_of_date, source_deal_header_id,leg,term_start, term_end,		
		field_id, field_name, price_deal,price,price_inv, total_price_deal,total_price
		,total_price_inv,volume,value,value_deal,value_inv,deal_cur_id,inv_cur_id
		,contract_value,contract_value_deal,contract_value_inv,internal_type,tab_group_name
		,udf_group_name,sequence,fee_currency_id,currency_id,contract_mkt_flag,source_deal_detail_id
		,shipment_id,ticket_detail_id,match_info_id,counterparty_id,contract_id
	)
	
	SELECT	@as_of_date as_of_date,  	
		t.source_deal_header_id,
		t.leg, 
		t.term_start, t.term_end,
		-1*abs(d.curve_id) field_id, --Contract value
		case when d.curve_id=-1 then 'Fixed Price' else 
			coalesce(spcd.curve_name,nullif(fe.formula_name,''),fe.formula)
		 end field_name,
		 round(isnull(d.curve_value, 0) , isnull(t.formula_rounding, 100))  price_deal,
		 null  price,
		null  price_inv, --in position and functional uom
		ABS(CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END)/ABS(t.volume) total_price_deal,
		null total_price,
		null total_price_inv,
		--CASE WHEN t.buy_sell_flag='s' THEN 1 ELSE -1 END * ABS(t.volume) volume,
		t.volume volume,
		null value,
		CASE WHEN (t.product_id=4101) THEN 
			CASE WHEN (t.buy_sell_flag='b') THEN -1 ELSE 1 END
		ELSE 
			CASE WHEN (t.buy_sell_flag='b') THEN 1 ELSE -1 END 
		END *
		ABS(t.volume) *  CASE WHEN t.deal_volume < 0 AND t.buy_sell_flag='b' THEN -1 ELSE 1 END *
		round(isnull(d.curve_value, 0) , isnull(t.formula_rounding, 100))  value_deal,
		null value_inv,
		t.deal_cur_id, t.inv_cur_id, 
		CASE WHEN (t.product_id=4101) THEN t.contract_value ELSE t.market_value END contract_value,
		CASE WHEN (t.product_id=4101) THEN t.contract_value_deal ELSE t.market_value_deal END contract_value_deal, 
		CASE WHEN (t.product_id=4101) THEN t.contract_value_inv ELSE t.market_value_inv END contract_value_inv, 
		-1 internal_type, -- contract value break down
		NULL tab_group_name,
		NULL udf_group_name,
		ROW_NUMBER() over(order by t.source_deal_detail_id,d.curve_id ) sequence, 		
		t.func_cur_id fee_currency_id,t.func_cur_id currency_id,
		'c' contract_mkt_flag,t.source_deal_detail_id,t.shipment_id,t.ticket_detail_id, t.match_info_id,td.counterparty_id,td.contract_id
	FROM #temp_leg_mtm t
		cross apply
		( select curve_id, -- avg((isnull(curve_value, 0) *isnull(price_multiplier,1))+isnull(price_adder,0)) curve_value
				--avg(isnull(curve_value, 0) +isnull(price_adder,0)) curve_value
				avg(isnull(curve_value, 0)) curve_value
			from  #component_price  where source_deal_detail_id = t.source_deal_detail_id
				and curve_value is not null
				and price_type_id not in (103602,103606)
			group by curve_id
		) d
		left JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = d.curve_id  
		left join #temp_deals td on td.source_deal_detail_id = t.source_deal_detail_id -- 	,counterparty_id,contract_id

		--outer apply 
		--(
		-- select avg(price_fx_conv_factor) price_fx_conv_factor from #fx_curves  
		--	 where fx_currency_id = d.pricing_curve_currency
		--		AND func_cur_id = t.deal_cur_id --AND source_system_id = a.source_system_id
		--		AND maturity_date between t.term_start and t.term_end
		--) fx
		left join formula_editor fe on fe.formula_id=d.curve_id
	WHERE t.volume <> 0 ;


--	select formula_conv_factor_deal,formula_conv_factor_inv,formula_conv_factor,* from #temp_leg_mtm
	--select * from #temp_leg_mtm
	--select * from #formula_value
	--  select * from #fees_breakdown


	--select * from deal_position_break_down where source_deal_header_id=197

end

--select * from #fx_curves 
--return

--select * from #fees_breakdown
---------------------------------------------------------
-- convert into invoice currency from deal currency
-----------------------------------------------------
update #fees_breakdown 
set
	value_inv=value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1),
	price_inv=price_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1),
	total_price_inv=total_price_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
from #fees_breakdown f
inner join #temp_deals a on a.source_deal_detail_id=f.source_deal_detail_id
outer apply
(	
	select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
		where fx_currency_id = a.fixed_price_currency_id 
			AND func_cur_id = a.settlement_currency AND source_system_id = a.source_system_id
			 AND maturity_date between a.term_start and a.term_end
			AND as_of_date>= case when @calc_type='s' then @term_start else a.curve_as_of_date end 
		AND as_of_date<= case when @calc_type='s' then @term_end else a.curve_as_of_date end 

			-- and fx_conversion_market=a.fx_conversion_market
			--AND
			--( (a.fx_option<>104501 and  maturity_date between a.term_start and a.term_end)
			--	or ( @calc_type='s' and a.fx_option=104501 and maturity_date=dbo.FNAInvoiceDueDate(a.settlement_date,a.invoice_due_date,a.holiday_calendar_id,a.settlement_days)))
) fx



--------------------------------------------------------------	
-- convert into functional currency from invoice currency 
--------------------------------------------------------------

update #fees_breakdown set
	value=value_deal *isnull(fx.price_fx_conv_factor,1),
	price=price_deal*isnull(fx.price_fx_conv_factor,1),
	total_price=total_price_deal*isnull(fx.price_fx_conv_factor,1)
from #fees_breakdown f
inner join #temp_deals a on a.source_deal_detail_id=f.source_deal_detail_id
outer apply
(	select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
		where fx_currency_id = a.fixed_price_currency_id AND 
		func_cur_id = a.func_cur_id AND source_system_id = a.source_system_id
			 AND maturity_date between a.term_start and a.term_end
			and market_value_desc=a.fx_conversion_market
			AND as_of_date>= case when @calc_type='s' then @term_start else a.curve_as_of_date end 
			AND as_of_date<= case when @calc_type='s' then @term_end else a.curve_as_of_date end 
) fx

--------------------------------------------------------------------------------------

create index index_fees_breakdown111 on  #fees_breakdown(source_deal_header_id,source_deal_detail_id)
create index index_fees_breakdown112 on  #fees_breakdown(source_deal_header_id,term_start,term_end)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Fees/Premium Calcualtions*****************************'	
END

IF @calc_type = 's'
BEGIN

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	DECLARE @total_set_count INT
	DECLARE @total_error_count INT
	DECLARE @total_set_insert INT
	
	-- select * from #calc_status
	-- select * from #temp_Deals

	-- FInd the Last business day of that month
	DECLARE @last_day_in_Month VARCHAR(20)
	SET @last_day_in_Month = CONVERT(VARCHAR(10),DATEADD(m,1,dbo.FNAGetContractMonth(@as_of_date)),120)
	SET @last_business_day = dbo.FNAGetBusinessDay ('p',@last_day_in_Month,@default_holiday_id)

	IF @as_of_date = @last_business_day
		SET @last_business_day =  CONVERT(VARCHAR(10),CAST(@last_day_in_Month AS DATETIME)-1,120)
	ELSE
		SET @last_business_day = @as_of_date
			
		--DELETING FEES SETTLEMENT AND INSERTING IT
		--###################### Change for as of date logic
	/*
	 * Added Condition for Settlement Adjustment (From Settlement Checkout Screen).
	 * Dont Need to delete existing data in case of adjustment calculation.
	 */

-- Implement to delete all old data that less than day(@as_of_date) of current month(@as_of_date) only
	IF @calc_settlement_adjustment = 0 and @calc_type='s'
	BEGIN
/*
		SET @sql = 
		'DELETE  top(100000) sc
			from ' + dbo.FNAGetProcessTableName(@as_of_date, 'index_fees_breakdown_settlement') +  ' i 
			INNER JOIN stmt_checkout sc ON sc.index_fees_id = i.index_fees_id AND sc.type = ''Cost'' AND sc.accrual_or_final = ''f''
			inner join #fees_breakdown f ON 
					i.source_deal_header_id=f.source_deal_header_id
					AND ISNULL(f.ticket_detail_id, -1) = coalesce(i.ticket_detail_id, f.ticket_detail_id,-1) 
					and i.term_start=f.term_start and i.term_end=f.term_end
				--	AND ISNULL(f.internal_type,1) = ISNULL(i.internal_type,1)
					AND DATEADD(m,1,CAST(CAST(YEAR(i.term_end) AS VARCHAR)+''-''+CAST(MONTH(i.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1<= '''+@last_business_day+''''
		+
		--CASE WHEN @cpt_type='b' THEN ' AND f.internal_type IN(18723)' ELSE ' AND f.internal_type NOT IN(18723)' END + 

		'
		
		DELETE  top(100000) index_fees_breakdown_settlement
			from ' + dbo.FNAGetProcessTableName(@as_of_date, 'index_fees_breakdown_settlement') +  ' i 
			inner join #fees_breakdown f ON  i.source_deal_header_id=f.source_deal_header_id
					AND ISNULL(f.ticket_detail_id, -1) = coalesce(i.ticket_detail_id, f.ticket_detail_id,-1) 
				and ((i.term_start=f.term_start and i.term_end=f.term_end) or (i.internal_type=18722 and i.term_start between '''+@term_start+''' and '''+@term_end+'''))
					AND DATEADD(m,1,CAST(CAST(YEAR(i.term_end) AS VARCHAR)+''-''+CAST(MONTH(i.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1<= '''+@last_business_day+''' and	f.value IS NOT NULL '
			
		exec spa_print @sql
					
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)
			IF @@rowcount < 100000 BREAK;
		END
*/

		SET @sql = 
		'DELETE  top(100000) sc
			from ' + dbo.FNAGetProcessTableName(@as_of_date, 'index_fees_breakdown_settlement') +  ' i 
			INNER JOIN stmt_checkout sc ON sc.index_fees_id = i.index_fees_id AND sc.type = ''Cost'' AND sc.accrual_or_final = ''f''
			inner join #fees_breakdown f ON i.source_deal_header_id=f.source_deal_header_id
				AND ISNULL(f.ticket_detail_id, -1) = coalesce(i.ticket_detail_id, f.ticket_detail_id,-1) 
				and i.term_start=f.term_start and i.term_end=f.term_end
				AND DATEADD(m,1,CAST(CAST(YEAR(i.term_end) AS VARCHAR)+''-''+CAST(MONTH(i.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1 > '''+@as_of_date+''' AND i.as_of_date = '''+@as_of_date+''''
		
		exec spa_print @sql
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)
			IF @@rowcount < 100000 BREAK;
		END
		
		SET @sql =
        'DELETE  top(100000) index_fees_breakdown_settlement
            from ' + dbo.FNAGetProcessTableName(@as_of_date, 'index_fees_breakdown_settlement') +  ' i
            INNER JOIN (select distinct source_deal_header_id from #fees_breakdown) s on s.source_deal_header_id = i.source_deal_header_id
                and convert(varchar(7),i.as_of_date,120)='''+convert(varchar(7),@as_of_date,120)+'''
                and convert(varchar(10),i.term_start,120) >= CASE WHEN i.internal_type = 18722 THEN convert(varchar(10),i.term_start,120) ELSE '''+convert(varchar(10),@term_start,120)+''' END
                and convert(varchar(10),i.term_end,120) <= CASE WHEN i.internal_type = 18722 THEN convert(varchar(10),i.term_end,120) ELSE EOMONTH('''+ convert(varchar(10),@term_end,120)+''') END
                and  ' 
			+ CASE @save_settlement_data WHEN 209 THEN  
				' convert(varchar(10),i.as_of_date,120)='''+convert(varchar(10),@as_of_date,120)+''''
			
			WHEN 211 THEN
			' convert(varchar(10),i.as_of_date,120) <= ''' + @as_of_date + ''' AND EOMONTH(i.as_of_date) = ''' + CONVERT(VARCHAR(10), EOMONTH(@as_of_date), 120) + ''''
			ELSE 
				' convert(varchar(10),i.as_of_date,120)' +
				CASE WHEN @as_of_date = EOMONTH(@as_of_date) THEN '<=' ELSE ' = ' END 
				+''''+ CONVERT(VARCHAR(10),@as_of_date,120) + '''' 
			END

		exec spa_print @sql

		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql)
			IF @@rowcount < 100000 BREAK;
		END
	END
	if @calc_type='s'
	begin
	/*
	 * Added Condition for Settlement Adjustment (From Settlement Checkout Screen).
	 * In case of adjustment calc - the output is inserted into process table instead of inserting into direct index_fees_breakdown table.
	 * The output process table is used in spa_stmt_adjustments to find out delte
	 */
	SET @sql=
		CASE WHEN @calc_settlement_adjustment = 0 THEN 
				'INSERT INTO '+@index_fees_settlement_table+'
				(
					as_of_date,
					source_deal_header_id,
					leg,
					term_start,
					term_end,
					field_id,
					field_name,
					price,
					total_price,
					volume,
					value,
					contract_value,
					internal_type,
					tab_group_name,
					udf_group_name,
					sequence,
					fee_currency_id,
					currency_id,
					create_user,
					create_ts,
					set_type,
					contract_mkt_flag,
					value_deal,
					value_inv,
					deal_cur_id,
					inv_cur_id,
					shipment_id,
					ticket_detail_id,
					match_info_id,counterparty_id,contract_id
				) ' 
			ELSE '' END +
			'SELECT f.as_of_date, 
					f.source_deal_header_id, 
					f.leg, 
					f.term_start, 
					f.term_end, 
					f.field_id, 
					f.field_name, 
					sum(f.price) price,
					sum(f.total_price) total_price, 
					sum(f.volume) volume, 
					sum(f.value) value, 
					sum(f.contract_value) contract_value, 
					f.internal_type, 
					f.tab_group_name, 
					f.udf_group_name,
					max(f.sequence) sequence, 
					max(f.fee_currency_id) fee_currency_id, 
					max(f.currency_id) currency_id,
					'''+@user_login_id+''' create_user, 
					GETDATE() create_ts,
					CASE WHEN f.term_end <= '''+@as_of_date+''' THEN ''s'' ELSE ''f'' END [set_type],
					f.contract_mkt_flag,
					sum(value_deal) [value_deal],
					sum(value_inv) [value_inv],
					max(deal_cur_id) [deal_cur_id],
					max(inv_cur_id) [inv_cur_id],
					NULLIF(f.shipment_id,-1) shipment_id,
					NULLIF(f.ticket_detail_id,-1) ticket_detail_id,
					f.match_info_id,max(f.counterparty_id) counterparty_id,max(f.contract_id) contract_id
				'+CASE WHEN @calc_settlement_adjustment = 1 THEN ' INTO '+@index_fees_settlement_table ELSE '' END +'
			FROM  #fees_breakdown f 
						--LEFT JOIN index_fees_breakdown_settlement ifbs ON
						--f.source_deal_header_id = ifbs.source_deal_header_id and
						--f.term_start = ifbs.term_start and f.term_end = ifbs.term_end
						--AND (DATEADD(m,1,CAST(CAST(YEAR(f.term_end) AS VARCHAR)+''-''+CAST(MONTH(f.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1 <= '''+@as_of_date+''' OR 
						--	(DATEADD(m,1,CAST(CAST(YEAR(f.term_end) AS VARCHAR)+''-''+CAST(MONTH(f.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1 > '''+@as_of_date+''' AND ifbs.as_of_date = '''+@as_of_date+'''))
				WHERE
					--ifbs.source_deal_header_id IS NULL	AND
					f.value IS NOT NULL					
			GROUP BY f.as_of_date, f.source_deal_header_id, f.leg, f.term_start, f.term_end, f.field_id, f.field_name,
					 f.internal_type, f.tab_group_name, f.udf_group_name,f.contract_mkt_flag,f.shipment_id,f.ticket_detail_id, f.match_info_id
						OPTION (MAXRECURSION 32767, MAXDOP 8 )	'

		exec spa_print @sql
		EXEC(@sql)	
		
		insert into #calc_status 	
		select @process_id,'Error',CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlemet Adjustment' ELSE 'Deal Settlement' END +'  Calc',CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlemet Adjustment' ELSE 'Deal Settlement' END +'  Calc','Data Error',		
		' Settlement calculation for deal failed due to missing settlement prices for Deal ID ' + CAST(source_deal_header_id as varchar)  + ' ( ' + max(deal_id) + ') ' +
			' Run as of date: ' + 
			cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Term ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_end)) as varchar) + '-' + cast(month(max(term_end)) as varchar) + '-' + cast(day(max(term_end)) as varchar) + 
		isnull(' (Missing: ' + max(error_deal_reason) + ')', '') [description],
		'Please import/define missing price curves/factors' 
		 FROM #temp_leg_mtm where (error_deal is null OR leg_set IS NULL) AND volume <> 0 
		group by source_deal_header_id, curve_as_of_Date
		OPTION (MAXRECURSION 32767, MAXDOP 8 ) 


		SET @total_error_count = @@ROWCOUNT 
	end

		--Capture premiums which will be part of the contract ampount
		select f.source_deal_header_id, f.leg, f.term_start, f.term_end, sum(f.price) premium_price, SUM(f.value) premium_value
		into #premium
		from #fees_breakdown f inner join
			 static_data_value s ON s.value_id = f.field_id			 
		where s.category_id = @premium_id
			  AND f.value IS NOT NULL					
		group by f.source_deal_header_id, f.leg, f.term_start, f.term_end
		OPTION (MAXRECURSION 32767, MAXDOP 8 )
					
		select  --td.curve_as_of_date as_of_date,
				case when td.calc_physical_financial_flag='f' then td.curve_as_of_date else @as_of_date end   as_of_date,
				CASE WHEN t.match_info_id IS NOT NULL THEN MAX(td.settlement_date) ELSE 
				MAX(COALESCE(s.delivery_date,  s.expiration_date,td.curve_as_of_date)) END settlement_date,
				NULL payment_Date, 
				t.source_deal_header_id, 
				s.term_start,
				s.term_end, 
				--SUM(case when(t.calc_physical_financial_flag='p') then volume else 0 end) volume, 				
				SUM(volume) volume, 
				avg(ABS(price) + ISNULL(p.premium_price, 0)) net_price, 
				SUM(leg_set + ISNULL(p.premium_value, 0))  settlement_amount, 
				MAX(t.func_cur_id) settlement_currency_id,
				GETDATE() create_ts,
			--	@user_id create_user,
				MAX(t.deal_volume_uom_id) volume_uom,
				SUM(case when(td.calc_physical_financial_flag='f') then t.volume else 0 end) fin_volume,
				MAX(case when(td.calc_physical_financial_flag='f') then t.deal_volume_uom_id else NULL end) fin_volume_uom, 
				sum(
				case when  @calc_type='m' or (@calc_type='s' and td.calc_physical_financial_flag ='f') THEN
				ABS(market_price) ELSE 0 END*volume)/nullif(sum(volume),0) float_Price,
				sum((ABS(contract_price) + ISNULL(p.premium_price, 0))*volume)/nullif(sum(volume),0) deal_Price,
				MAX(t.func_cur_id) price_currency,
				t.leg,
				--CASE WHEN (t.calc_physical_financial_flag='p') THEN t.leg ELSE 1 END leg				
				sum(t.market_value) market_value,
				sum(t.contract_value) contract_value,
				SUM(t.allocation_volume) allocation_volume
			,SUM(leg_set_deal + ISNULL(p.premium_value, 0)) settlement_amount_deal
			,SUM(leg_set_inv + ISNULL(p.premium_value, 0)) settlement_amount_inv
			,max(t.deal_cur_id) deal_cur_id,max(t.inv_cur_id) inv_cur_id,t.shipment_id, t.ticket_detail_id
			,max(dst_group_value_id) dst_group_value_id,
			t.match_info_id
	into #source_deal_settlement --- select * from #source_deal_settlement
	from #temp_leg_mtm t 
		inner join #temp_deals td on td.source_deal_header_id = t.source_deal_header_id 
			and td.term_start = t.term_start 
			and td.term_end = t.term_end 
			AND td.leg = t.leg 	and td.mtm_sett_calc=1
			AND ISNULL(td.match_info_id, -1) = ISNULL(t.match_info_id, -1)
		inner join #tmp_deals_settled s on t.source_deal_header_id = s.source_deal_header_id and
			t.term_start = s.term_start and t.term_end = s.term_end left join
			#premium p ON	p.source_deal_header_id = t.source_deal_header_id and 
					p.term_start = t.term_start and p.term_end = t.term_end AND p.leg = t.leg
		left join #vwDealTimezone tz on  tz.source_deal_header_id=td.source_deal_header_id
			and tz.curve_id=td.curve_id  and tz.location_id=td.location_id 
	where error_deal=0 and leg_set is not null 
	--	and isnull(td.option_flag,'n')='n'
	group by td.curve_as_of_date, t.source_deal_header_id, s.term_start, s.term_end, 
				t.leg, td.calc_physical_financial_flag,t.shipment_id, t.ticket_detail_id, t.match_info_id

	select  --td.curve_as_of_date as_of_date,
			case when td.calc_physical_financial_flag='f' then td.curve_as_of_date else @as_of_date end   as_of_date,
			MAX( isnull(s.expiration_date,td.curve_as_of_date)) settlement_date, --expiration_date 
			NULL payment_Date, 
			t.source_deal_header_id, s.term_start, s.term_end, 
			--SUM(case when(t.calc_physical_financial_flag='p') then volume else 0 end) volume, 				
			SUM(volume) volume, 
			avg(ABS(price) + ISNULL(p.premium_price, 0)) net_price, 
			SUM(leg_set + ISNULL(p.premium_value, 0))  settlement_amount, 
			MAX(t.func_cur_id) settlement_currency_id,
			GETDATE() create_ts,
		--	@user_id create_user,
			MAX(t.deal_volume_uom_id) volume_uom,
			SUM(case when(td.calc_physical_financial_flag='f') then t.volume else 0 end) fin_volume,
			MAX(case when(td.calc_physical_financial_flag='f') then t.deal_volume_uom_id else NULL end) fin_volume_uom, 
			sum(case when @calc_type='m' or (@calc_type='s' and  td.calc_physical_financial_flag ='f') THEN
				ABS(market_price) ELSE 0 END*volume)/nullif(sum(volume),0) float_Price,
			sum((ABS(contract_price) + ISNULL(p.premium_price, 0))*volume)/nullif(sum(volume),0) deal_Price,
			MAX(t.func_cur_id) price_currency,
			t.leg,
			--CASE WHEN (t.calc_physical_financial_flag='p') THEN t.leg ELSE 1 END leg				
			sum(t.market_value) market_value,
			max(t.contract_value) contract_value,
			SUM(t.allocation_volume) allocation_volume
		,SUM(leg_set_deal + ISNULL(p.premium_value, 0)) settlement_amount_deal
		,SUM(leg_set_inv + ISNULL(p.premium_value, 0)) settlement_amount_inv
		,max(t.deal_cur_id) deal_cur_id,max(t.inv_cur_id) inv_cur_id,t.shipment_id, t.ticket_detail_id
		,max(dst_group_value_id) dst_group_value_id,
		t.match_info_id
	into #source_deal_settlement1 --- select * from #source_deal_settlement1
	from #temp_leg_mtm t 
		inner join #temp_deals td on td.source_deal_header_id = t.source_deal_header_id 
			and td.term_start = t.term_start 
			and td.term_end = t.term_end 
			AND td.leg = t.leg AND ISNULL(td.match_info_id, -1) = ISNULL(t.match_info_id, -1)
		inner join #tmp_deals_settled s on t.source_deal_header_id = s.source_deal_header_id and
			t.term_start = s.term_start and t.term_end = s.term_end left join
			#premium p ON	p.source_deal_header_id = t.source_deal_header_id and 
				p.term_start = t.term_start and p.term_end = t.term_end AND p.leg = t.leg
		left join #vwDealTimezone tz on  tz.source_deal_header_id=td.source_deal_header_id
			and tz.curve_id=td.curve_id  and tz.location_id=td.location_id 
	where error_deal=0 and leg_set is not null and isnull(td.option_flag,'n')='y'
		--and not ( isnull(t.internal_deal_subtype_value_id,1) in (1,2)  and isnull(t.internal_deal_type_value_id,1) in (1,2))
	group by td.curve_as_of_date, t.source_deal_header_id, s.term_start, s.term_end, 
		t.leg, td.calc_physical_financial_flag,t.shipment_id, t.ticket_detail_id, t.match_info_id


		 
				 --CASE WHEN (t.calc_physical_financial_flag='p') THEN t.leg ELSE 1 END
	SET @total_set_count = @total_error_count
	select @total_set_count=@total_set_count+isnull(count(1),0) from #source_deal_settlement1
	select @total_set_count=@total_set_count+isnull(count(1),0) from #source_deal_settlement




		
--select * from #calc_status
--select * from #premium
-- select * from #source_deal_settlement
--select * from #temp_leg_mtm


	-- DELETE FROM source_deal_settlement if nomination /atual is available instead of schedule
	DELETE sds FROM  #temp_deals td
	INNER JOIN source_deal_header sdh ON td.source_deal_header_id=sdh.source_deal_header_id
		AND td.internal_deal_type_value_id IN(19,20)
	INNER JOIN source_deal_settlement sds ON sds.source_deal_header_id=sdh.close_reference_id
		AND YEAR(td.term_start)=YEAR(sds.term_start)
		AND MONTH(td.term_start)=MONTH(sds.term_start)
		OPTION (MAXRECURSION 32767, MAXDOP 8 )

		--Delete from settlement table for non lagging deals
		-- #### Delete completely settled months for all as of dates

	
	--###################### Change for as of date logic

	/*
	 * Added Condition for Settlement Adjustment (From Settlement Checkout Screen).
	 * Dont Need to delete existing data in case of adjustment calculation.
	 */
	IF @calc_settlement_adjustment = 0
	BEGIN

-- Implement to delete all old data that less than day(@as_of_date) of current month(@as_of_date) only
/*
		set @sql = 
			'
			DELETE top(100000) sc 
			from source_Deal_settlement sds 
			INNER JOIN stmt_checkout sc ON sc.index_fees_id = sds.source_deal_settlement_id AND sc.Type = ''Commodity Charge'' AND sc.accrual_or_final = ''f''
			INNER JOIN #source_deal_settlement s ON
						s.source_deal_header_id=sds.source_deal_header_id
						--AND ISNULL(s.shipment_id, -1) = coalesce(sds.shipment_id,s.shipment_id, -1)
						AND ISNULL(s.ticket_detail_id, -1) = coalesce(sds.ticket_detail_id, s.ticket_detail_id,-1) 
						AND YEAR(s.term_start)=YEAR(sds.term_start)
						AND MONTH(s.term_start)=MONTH(sds.term_start) 
						--AND DATEADD(m,1,CAST(CAST(YEAR(sds.term_end) AS VARCHAR)+''-''+CAST(MONTH(sds.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1<= '''+@last_business_day+'''
						AND sds.term_end<= '''+@last_business_day+'''
			
			DELETE top(100000) source_deal_settlement 
			from source_Deal_settlement sds 
			INNER JOIN #source_deal_settlement s ON
						s.source_deal_header_id=sds.source_deal_header_id
						--AND ISNULL(s.shipment_id, -1) = coalesce(sds.shipment_id,s.shipment_id, -1)
						AND ISNULL(s.ticket_detail_id, -1) = coalesce(sds.ticket_detail_id, s.ticket_detail_id,-1) 
						AND YEAR(s.term_start)=YEAR(sds.term_start)
						AND MONTH(s.term_start)=MONTH(sds.term_start) 
						--AND DATEADD(m,1,CAST(CAST(YEAR(sds.term_end) AS VARCHAR)+''-''+CAST(MONTH(sds.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1<= '''+@last_business_day+'''
						AND sds.term_end<= '''+@last_business_day+''''

		exec spa_print @sql
			WHILE 1 = 1
			BEGIN
				exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql )
				IF @@rowcount < 100000 BREAK;
			END
*/


		
		SET @sql = 
			'DELETE top(100000) sc from source_Deal_settlement sds 
			INNER JOIN stmt_checkout sc ON sc.index_fees_id = sds.source_deal_settlement_id AND sc.Type = ''Commodity Charge'' 
				AND sc.accrual_or_final = ''f''
			INNER JOIN #source_deal_settlement s ON s.source_deal_header_id=sds.source_deal_header_id
						AND ISNULL(s.ticket_detail_id, -1) = coalesce(sds.ticket_detail_id, s.ticket_detail_id,-1) 
						AND YEAR(s.term_start)=YEAR(sds.term_start)
						AND MONTH(s.term_start)=MONTH(sds.term_start) 
						AND sds.term_end > '''+@as_of_date+'''
					AND sds.as_of_date <= '''+@as_of_date+''''

		exec spa_print @sql
			WHILE 1 = 1
			BEGIN
				exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql )
				IF @@rowcount < 100000 BREAK;
			END	
		
		SET @sql = 
		'DELETE top(100000) sds 
		from source_Deal_settlement sds 
			INNER JOIN (select distinct source_deal_header_id,term_start,term_end,internal_deal_subtype_value_id from #temp_leg_mtm) s on s.source_deal_header_id = sds.source_deal_header_id 
				AND convert(varchar(10),sds.term_start,120)>=convert(varchar(10),s.term_start,120)
			    AND convert(varchar(10),sds.term_start,120)<=convert(varchar(10),s.term_end,120)
				AND '
		+ CASE @save_settlement_data WHEN 209 THEN 
				' CAST(sds.as_of_date AS DATE) = ''' + @as_of_date + ''''
			WHEN 211 THEN
				' CAST(sds.as_of_date AS DATE) <= ''' + @as_of_date + ''' AND EOMONTH(sds.as_of_date) = ''' + CONVERT(VARCHAR(10), EOMONTH(@as_of_date), 120) + ''''
		ELSE 
						CASE WHEN @as_of_date = EOMONTH(@as_of_date) THEN ' sds.as_of_date <= ''' ELSE ' sds.as_of_date = ''' END + CONVERT(VARCHAR(10),@as_of_date,120) + '''' END

			exec spa_print @sql
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql )
			IF @@rowcount < 100000 BREAK;
		END	
		DECLARE @st5 VARCHAR(MAX)
		set @st5 = 
		'DELETE  TOP(100000) tou
		FROM ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_settlement_tou') +  ' tou 
		INNER JOIN (select distinct source_deal_header_id,term_start,term_end from #temp_leg_mtm) s on s.source_deal_header_id = tou.source_deal_header_id 
			AND convert(varchar(10),tou.term_start,120)>=convert(varchar(10),s.term_start,120)
			AND convert(varchar(10),tou.term_start,120)<=convert(varchar(10),s.term_end,120)
			AND '+
			 CASE @save_settlement_data WHEN 209 THEN 
			' CAST(tou.as_of_date AS DATE) = ''' + @as_of_date + ''''
			WHEN 211 THEN
			' CAST(tou.as_of_date AS DATE) <= ''' + @as_of_date + ''' AND EOMONTH(tou.as_of_date) = ''' + CONVERT(VARCHAR(10), EOMONTH(@as_of_date), 120) + ''''
			ELSE CASE WHEN @as_of_date = EOMONTH(@as_of_date) THEN ' tou.as_of_date <= ''' ELSE ' tou.as_of_date = ''' END + CONVERT(VARCHAR(10),@as_of_date,120) + '''' END

		EXEC spa_print  @st5
		
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st5 )
			IF @@rowcount < 100000 BREAK;
		END

		INSERT INTO source_deal_settlement_tou -- select * from source_deal_settlement_tou where source_deal_header_id=1184
		(
			as_of_date, settlement_date, payment_date, source_deal_header_id, 
			term_start, term_end, volume, net_price, settlement_amount, settlement_currency_id, create_ts, create_user,
			volume_uom, fin_volume, fin_volume_uom, float_Price, deal_Price, price_currency, leg, market_value, contract_value
			,set_type,allocation_volume,settlement_amount_deal,settlement_amount_inv,deal_cur_id,inv_cur_id,tou_id,mw_position,
			match_info_id
		) 							 
		
		select  td.curve_as_of_date as_of_date,
			 isnull(s.expiration_date,td.curve_as_of_date) settlement_date, --expiration_date 
			NULL payment_Date, 
			t.source_deal_header_id, s.term_start, s.term_end, 
			--SUM(case when(t.calc_physical_financial_flag='p') then volume else 0 end) volume, 				
			t.volume volume, 
			ABS(price + ISNULL(p.premium_price, 0)) net_price, 
			CASE WHEN ((sds.settlement_amount + ISNULL(p.premium_value, 0)) < 0 AND td.internal_deal_type_value_id = 103 AND td.internal_deal_subtype_value_id <> 102) THEN 0 
			ELSE 
				(leg_set + ISNULL(p.premium_value, 0))
			END AS settlement_amount, 
			--leg_set + ISNULL(p.premium_value, 0) settlement_amount, 
			t.func_cur_id settlement_currency_id,
			GETDATE() create_ts,
			@user_id create_user,
			t.deal_volume_uom_id volume_uom,
			case when td.calc_physical_financial_flag='f' then t.volume else 0 end fin_volume,
			case when td.calc_physical_financial_flag='f' then t.deal_volume_uom_id else NULL end fin_volume_uom, 
			case when @calc_type='m' or (@calc_type='s' and td.calc_physical_financial_flag ='f') THEN
				ABS(market_price) ELSE 0 END float_Price,
			ABS(contract_price + ISNULL(p.premium_price, 0)) deal_Price,
			t.func_cur_id price_currency,t.leg,
			t.market_value,
			t.contract_value,CASE WHEN t.term_end <= @as_of_date THEN 's' ELSE 'f' END set_type,
			t.allocation_volume,
			CASE WHEN ((sds.settlement_amount_deal + ISNULL(p.premium_value, 0)) < 0 AND td.internal_deal_type_value_id = 103 AND td.internal_deal_subtype_value_id <> 102) THEN 
				0 
			ELSE 
				(leg_set_deal + ISNULL(p.premium_value, 0))
			END AS settlement_amount_deal, 

			CASE WHEN ((sds.settlement_amount_inv + ISNULL(p.premium_value, 0)) < 0 AND td.internal_deal_type_value_id = 103 AND td.internal_deal_subtype_value_id <> 102) THEN 
				0 
			ELSE 
				(leg_set_inv + ISNULL(p.premium_value, 0))
			END AS settlement_amount_inv,
			t.deal_cur_id,t.inv_cur_id,btg.hourly_block_id, t.mw_position, t.match_info_id
			--t.volume/mul.volume_mult mw_position 
		 FROM #temp_leg_mtm t inner join #tmp_deals_settled s on t.source_deal_header_id = s.source_deal_header_id and
				t.term_start = s.term_start and t.term_end = s.term_end 
			inner join #temp_deals td on td.source_deal_header_id = t.source_deal_header_id 
				and td.term_start = t.term_start 
				and td.term_end = t.term_end 
				and td.leg = t.leg  
				AND ISNULL(td.match_info_id, -1) = ISNULL(t.match_info_id, -1)
			left join #premium p ON	p.source_deal_header_id = t.source_deal_header_id and 
				p.term_start = t.term_start and p.term_end = t.term_end AND p.leg = t.leg
			left join source_price_curve_def spcd on spcd.source_curve_def_id=t.curve_id
			left join #block_type_group btg on btg.block_type_group_id=spcd.udf_block_group_id and btg.row_id=t.tou_id
			left join #vwDealTimezone tz on  tz.source_deal_header_id=td.source_deal_header_id
				and tz.curve_id=td.curve_id  and tz.location_id=td.location_id 
			OUTER APPLY(
				SELECT NULLIF(SUM(volume_mult), 0) volume_mult FROM hour_block_term 
				WHERE block_define_id =isnull(btg.hourly_block_id,@baseload_block_definition)
					AND dst_group_value_id = ISNULL(tz.dst_group_value_id, @default_dst_group)
					AND term_date BETWEEN td.term_start AND  case when @as_of_date between td.term_start and td.term_end then @as_of_date else td.term_end end
			) mul
			OUTER APPLY (
				SELECT SUM(settlement_amount) settlement_amount,
					SUM(settlement_amount_deal) settlement_amount_deal,
					SUM(settlement_amount_inv) settlement_amount_inv
				FROM #source_deal_settlement sds
				WHERE sds.source_deal_header_id = t.source_deal_header_id
					AND sds.term_start = t.term_start
					AND sds.leg = t.leg
			) sds
		WHERE error_deal=0 and leg_set is not null AND t.calc_mtm_at_tou_level='y'
	END




if @calc_type='s'
begin
	/*
	 * Added Condition for Settlement Adjustment (From Settlement Checkout Screen).
	 * In case of adjustment calc - the output is inserted into process table instead of inserting into direct source_deal_settlement table.
	 * The output process table is used in spa_stmt_adjustments to find out delte
	 */		
	SET @sql = 	
		CASE WHEN @calc_settlement_adjustment = 0 THEN 
		'INSERT INTO '+@deal_settlement_table+' 
			(
					as_of_date, 
					settlement_date, 
					payment_date, 
					source_deal_header_id, 
					term_start, 
					term_end, 
					volume, 
					net_price, 
					settlement_amount, 
					settlement_currency_id, 
					create_ts, 
					create_user,
					volume_uom, 
					fin_volume, 
					fin_volume_uom, 
					float_Price, 
					deal_Price, 
					price_currency, 
					leg, 
					market_value, 
					contract_value,
					set_type,
					allocation_volume,
					settlement_amount_deal,
					settlement_amount_inv,
					deal_cur_id,
					inv_cur_id,
					mw_position,
					shipment_id, 
					ticket_detail_id,
					match_info_id
				)' 
			ELSE '' END + '								 
			SELECT	sds.as_of_date, 
					sds.settlement_date, 
					sds.payment_date, 
					sds.source_deal_header_id, 
					sds.term_start, 
					sds.term_end, 
					sds.volume, 
					sds.net_price, 
					--sds.settlement_amount/ISNULL(NULLIF(sds.volume,0),1) net_price,
					CASE WHEN (sds.settlement_amount < 0 AND inal.idtvi = 103 AND inal.idsvi <>102) THEN 
						0 
					ELSE 
						sds.settlement_amount 
					END AS settlement_amount, 
					sds.settlement_currency_id, 
					sds.create_ts, 
					'''+@user_login_id+''' [create_user],
					sds.volume_uom, 
					sds.fin_volume, 
					sds.fin_volume_uom, 
					sds.float_Price, 
					sds.deal_Price, 
					sds.price_currency, 
					sds.leg, 
					sds.market_value, 
					sds.contract_value,
					CASE WHEN sds.term_end <= '''+@as_of_date+''' THEN ''s'' ELSE ''f'' END [set_type],
					sds.allocation_volume,
					CASE WHEN (sds.settlement_amount_deal < 0 AND inal.idtvi = 103 AND inal.idsvi <> 102) THEN 
						0 
					ELSE 
						sds.settlement_amount_deal 
					END AS settlement_amount_deal,

					CASE WHEN (sds.settlement_amount_inv < 0 AND inal.idtvi = 103 AND inal.idsvi <> 102) THEN 
						0 
					ELSE 
						sds.settlement_amount_inv 
					END AS settlement_amount_inv,
					sds.deal_cur_id,
					sds.inv_cur_id,
					sds.volume/mul.volume_mult mw_position,
					NULLIF(sds.shipment_id,-1) shipment_id, 
					NULLIF(sds.ticket_detail_id,-1) ticket_detail_id,
					sds.match_info_id
			'+CASE WHEN @calc_settlement_adjustment = 1 THEN ' INTO '+@deal_settlement_table+' ' ELSE '' END +'
			FROM #source_deal_settlement sds 
			--LEFT OUTER JOIN source_deal_settlement sett ON 
			--		sett.source_deal_header_id = sds.source_deal_header_id 
			--		AND sett.term_start = sds.term_start 
			--		AND sett.term_end = sds.term_end
			--		AND ISNULL(sds.shipment_id, -1) = ISNULL(sett.shipment_id, -1)
			--		AND ISNULL(sds.ticket_detail_id, -1) = ISNULL(sett.ticket_detail_id, -1)
			--		AND ISNULL(sds.match_info_id, -1) = ISNULL(sett.match_info_id, -1)
			--		AND (
			--			DATEADD(m,1,CAST(CAST(YEAR(sds.term_end) AS VARCHAR)+''-''+CAST(MONTH(sds.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1 <= '''+@as_of_date+''' 
			--			OR 
			--				(
			--				DATEADD(m,1,CAST(CAST(YEAR(sds.term_end) AS VARCHAR)+''-''+CAST(MONTH(sds.term_end) AS VARCHAR)+''-01'' AS DATETIME))-1 > '''+@as_of_date+''' AND sett.as_of_date = '''+@as_of_date+'''
			--				)
			--		)
				OUTER APPLY(
					SELECT NULLIF(SUM(volume_mult), 0) volume_mult FROM hour_block_term 
						WHERE block_define_id ='+cast(@baseload_block_definition as varchar)+'
							AND dst_group_value_id = ISNULL(sds.dst_group_value_id,'+ @default_dst_group+')
					AND term_date BETWEEN sds.term_start AND  case when '''+@as_of_date+''' between sds.term_start and sds.term_end then+'''+ @as_of_date +''' else sds.term_end end
				) mul
				OUTER APPLY(SELECT DISTINCT
						internal_deal_type_value_id idtvi,
						internal_deal_subtype_value_id idsvi
					FROM #temp_deals td WHERE td.source_deal_header_id = sds.source_deal_header_id) inal
			--where 1=1 '+CASE WHEN @calc_settlement_adjustment = 0 THEN ' AND sett.term_start IS NULL ' ELSE '' END + '
			--OPTION (MAXRECURSION 32767, MAXDOP 8 ) 
				'


	exec spa_print @sql
	EXEC(@sql)
	select @total_set_insert = @@rowcount


	--select @as_of_date,
	--		@term_start,
	--		 @term_end,
	--		 @criteria_id,
	--		@tmp_hourly_price_vol,
	--	@process_id

		
	--Calling spa_calculate_fee for calculating VAT/TAX
	IF @calc_settlement_adjustment = 0
		EXEC spa_calculate_fee @as_of_date = @as_of_date,
			@term_start = @term_start,
			@term_end = @term_end,
			@criteria_id = @criteria_id,
			@tmp_hourly_price_vol = @tmp_hourly_price_vol,
			@process_id = @process_id


	-- Logic to run contract settlement
	IF @calc_type = 's'
	BEGIN
		DECLARE @cs_sql_statement VARCHAR(MAX), @cs_job_name VARCHAR(100)
		DECLARE @cs_process_id VARCHAR(100) = dbo.FNAGetNewID()

		SET @cs_sql_statement = ' spa_stmt_contract_calculation
					@as_of_date = ''' + CAST(@as_of_date AS VARCHAR) + ''',
					@term_start = ''' + CAST(@term_start AS VARCHAR) + ''',
					@term_end = ''' + CAST(@term_end AS VARCHAR) + ''',
					@sub_id = ''' + ISNULL(@sub_id,'NULL') + ''',
					@strategy_id = ''' + ISNULL(@strategy_id,'NULL') + ''',
					@book_id = ''' + ISNULL(@book_id,'NULL') + ''',
					@source_book_mapping_id =NULL,
					@counterparty_id = ''' + ISNULL(@counterparty_id,'NULL') + ''''

		SET @cs_job_name = 'Contract_Settlement_' + @cs_process_id
		EXEC spa_run_sp_as_job @cs_job_name, @cs_sql_statement, @cs_job_name, @user_name,NULL, NULL, NULL
	END

END


		set @desc=CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlemet Adjustment' ELSE 'Deal Settlement' END +' Calculation done for as of date: '+ ISNULL(dbo.FNADateFormat(@as_of_date), @as_of_date) +
			'  <b>Total Deals Processed Count</b>: (' + cast(@total_set_count as varchar) + ')  <b>Saved Count</b>: (' +
			 cast(@total_set_insert as varchar)  + ') <b>Error Count</b>: (' + cast(@total_error_count as varchar) + ')'  


		insert into #calc_status values(@process_id, 'Success',
		'Deal Settlement Calc','Deal Settlement Calc','Results', --'Successful',
		@desc,'')

		INSERT INTO #ok_deals
		select t.source_deal_header_id, t.term_start, t.term_end, max(t.expired_term) expired_term, sum(t.error_deal) error_deal,t.source_deal_detail_id,td.mtm_sett_calc
		from #temp_leg_mtm t 
		INNER JOIN #temp_deals td ON td.source_deal_detail_id = t.source_deal_detail_id
				AND ISNULL(t.state_value_id, -1) = ISNULL(td.state_value_id, -1)
				AND ISNULL(t.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
		left join 
			(select * from #temp_leg_mtm where error_deal is null AND volume <> 0) ed on 
			t.source_deal_detail_id = ed.source_deal_detail_id
		where ed.source_deal_detail_id is NULL
		GROUP BY t.source_deal_header_id, t.term_start, t.term_end,t.source_deal_detail_id,td.mtm_sett_calc


		insert into MTM_TEST_RUN_LOG(process_id,code,module,source,type,[description],nextsteps)  
		select * from #calc_status --where process_id=@process_id
	
		SET @user_name = @user_id
		--SET @desc = 'Assessment process completed for run date ' + @run_date 

		SET @url_desc = 'Detail...'
		SET @url = './dev/spa_html.php?__user_name__=' + @user_name + 
			'&spa=exec spa_get_mtm_test_run_log ''' + CASE WHEN @calc_type = 'w' THEN @original_process_id ELSE  @process_id END  + ''''
		
		SET @urlP = './dev/spa_perform_process.php?as_of_date= ' + dbo.FNADateFormat(@as_of_date) + 
			'&process_id=115&process_attachment=Run Assessment ran on ' +
			dbo.FNAUserDateTimeFormat(getdate(), 1, @user_id) +
			'&spa=exec spa_get_mtm_test_run_log ''' + CASE WHEN @calc_type = 'w' THEN @original_process_id ELSE  @process_id END  + '''' +
			'&__user_name__=' + @user_id
		
		SET @url_desc = '<a target="_blank" href="' + @urlP + '">' + 
			'Processed...' +
			'</a>'
		
		DECLARE @error_count_s int
		DECLARE @type_s char
		
		SELECT  @error_count_s =   COUNT(*) 
		FROM   mtm_test_run_log
		WHERE process_id = @process_id AND code = 'Error'
		
		If @error_count_s > 0 
			SET @type_s = 'e'
		Else
			SET @type_s = 's'
		
		DECLARE @warning_count_s INT
		
		SELECT @warning_count_s = COUNT(*)
		FROM   mtm_test_run_log
		WHERE  process_id     = @process_id
		       AND code       = 'Warning'
		       
		IF @warning_count_s > 0 
			SET @type_s = 'w'
		
		declare @e_time_s int
		declare @e_time_text_s varchar(100)
		set @e_time_s = datediff(ss,@begin_time,getdate())
		set @e_time_text_s = cast(cast(@e_time_s/60 as int) as varchar) + ' Mins ' + cast(@e_time_s - cast(@e_time_s/60 as int) * 60 as varchar) + ' Secs'
	
		SET @desc = '<a target="_blank" href="' + @url + '">' + 
				CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlemet Adjustment' ELSE 'Deal Settlement' END +' calculation process completed for run date ' + ISNULL(dbo.FNADateFormat(@as_of_date), @as_of_date) + 
				CASE 
				     WHEN (@type_s = 'e') THEN ' (ERRORS found)'
				     WHEN (@type_s = 'w') THEN ' (Warning found)'
				     ELSE ''
				END +
				' [Elapse time: ' + @e_time_text_s + ']' + 
				'.</a>'
	
		SET @run_type = CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlemet Adjustment' ELSE 'Deal Settlement' END
		EXEC spa_message_board 'u',
		@user_name,
		NULL,
		@run_type,
		@desc,
		'',
		'',
		@type_s,
		@job_name,
		NULL,
		@batch_process_id,
		NULL,
		'n',
		@temptablequery,
		'y' 
	if @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Final Insert for Settlement Completed*****************************'	
	END


	EXEC spa_ErrorHandler 0
			, 'spa_calc_mtm_job' -- Name the tables used in the query.
			, 'spa_calc_mtm_job' -- Name the stored proc.
			, 'Success' -- Operations status.
			, 'Success' -- Success message.
			,  NULL -- The reference of the data deleted.	


	GOTO save_mtm_at_low_granularity
	--RETURN	 -- EXIT FROM PROC
END 	


-- select * from #temp_leg_mtm


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


CREATE TABLE #ir_no_days_left (source_deal_header_id INT, term_end DATETIME, no_days_left INT)

--Calculate for IR Swaps
--First calculate total no of days left for each time leg
IF @internal_deal_type_IR_6 =1  OR @internal_deal_type_Debt_7 = 1
BEGIN
	SELECT DISTINCT  source_deal_header_id, term_end into #temp_dis_deals from #temp_deals
	INSERT INTO #ir_no_days_left
	select b.source_deal_header_id, b.term_end, sum(a.no_days_left) no_days_left
	from #temp_deals a INNER JOIN
	#temp_dis_deals b ON  a.source_deal_header_id = b.source_deal_header_id 
		and  a.term_end <= b.term_end and a.leg =1
	where a.internal_deal_type_value_id = 6 OR a.internal_deal_type_value_id = 7
	group by b.source_deal_header_id, b.term_end
END

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************IR Swaps: calculate total no of days left for each time leg*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--select 'The following is settled value of IR.. ''f'' is final and ''a'' is accrued'
CREATE TABLE #interest_expense(
	as_of_date VARCHAR(20) COLLATE DATABASE_DEFAULT,
	source_deal_header_id INT,
	term_start DATETIME,
	term_end DATETIME,
	interst_type CHAR(1) COLLATE DATABASE_DEFAULT,
	leg_mtm FLOAT
)


SET @sqlstmt = '
INSERT INTO #interest_expense	
Select 	''' + @as_of_date + ''' as_of_date, a.source_deal_header_id,a.term_start,a.term_end, 
			case when (a.term_end < ''' + @as_of_date + ''') then ''f'' else ''a'' end interst_type,
			SUM(		
			a.deal_volume	*
			(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
			cast(a.no_days_accrued as float)/nullif((a.no_days_left + a.no_days_accrued), 0) *
			case when a.buy_sell_flag=''s'' then -1 else 1 end *					
			(	
				case when  a.curve_id is not NULL then tc_s.curve_value * isnull(a.price_multiplier, 1) else 0 end +
				case when (a.pay_opposite=''y'') then 	-1 else 1 end *					
					 (isnull(a.fixed_price, 0) * isnull(a.price_multiplier, 1)) + isnull(a.price_adder, 0) + isnull(f.formula_value, 0)
			)) as leg_mtm 
		from #temp_deals a left outer join
			#temp_curves tc_s ON tc_s.source_curve_def_id = a.curve_id and 
							tc_s.maturity_date = a.term_end and 
							tc_s.as_of_date = a.term_end 
			LEFT OUTER JOIN #formula_value f ON a.term_start = f.term_start and
					--a.exp_curve_as_of_date = f.contract_expiration_date and
					a.formula_id = f.formula_id

			where a.internal_deal_type_value_id = 6 and a.term_start < ''' + @as_of_date + '''
			group by a.source_deal_header_id,a.term_start,a.term_end, 
				case when (a.term_end < ''' + @as_of_date + ''') then ''f'' else ''a'' end '

If @internal_deal_type_IR_6 = 1 
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)

If @print_diagnostic = 1			   
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************IR Swaps: calculate Settled Values final and accrued*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--select 'The following is settled value of Debt.. ''f'' is final and ''a'' is accrued'
SET @sqlstmt = '
	insert into #interest_expense
	Select 	''' + @as_of_date + ''' as_of_date, 
			a.source_deal_header_id,a.term_start,a.term_end, 
			case when (a.term_end < ''' + @as_of_date + ''') then ''f'' else ''a'' end interst_type,
			SUM(		
			a.deal_volume	*
			(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
			cast(a.no_days_accrued as float)/nullif((a.no_days_left + a.no_days_accrued), 0) *
			case when a.buy_sell_flag=''s'' then -1 else 1 end *					
			(	
				case when  a.curve_id is not NULL then tc_s.curve_value * isnull(a.price_multiplier, 1) else 0 end +
				(isnull(a.fixed_price, 0) * isnull(a.price_multiplier, 1)) + isnull(a.price_adder, 0) + isnull(f.formula_value, 0)
			)) + 
			max(case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end *	a.deal_volume else 0 end)
			as leg_mtm 
			
			from #temp_deals a left outer join
			#temp_curves tc_s ON tc_s.source_curve_def_id = a.curve_id and 
							tc_s.maturity_date = a.term_end and 
							tc_s.as_of_date = a.term_end 
			LEFT OUTER JOIN #formula_value f ON a.term_start = f.term_start and
					--a.exp_curve_as_of_date = f.contract_expiration_date and
					a.formula_id = f.formula_id

			where a.internal_deal_type_value_id = 7 and a.term_start < ''' + @as_of_date + '''
			group by a.source_deal_header_id,a.term_start,a.term_end, 
				case when (a.term_end < ''' + @as_of_date + ''') then ''f'' else ''a'' end '

If @internal_deal_type_Debt_7 = 1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Debts: calculate Settled Values final and accrued*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--select 'The following is forward value of IR'
SET @sqlstmt = '
INSERT INTO  	#temp_leg_mtm 
Select 	a.source_deal_header_id, a.deal_id,
		case when (a.internal_deal_type_value_id IN (6,7)) THEN a.term_end ELSE a.term_start END term_start, 
		a.term_end,a.curve_id,
		1/nullif(power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year), 0) * --Discount the cash flow
		a.deal_volume	*
		(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
		cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
		case when a.buy_sell_flag=''s'' then -1 else 1 end *					
		(	
			case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
			else 0 end +
			case when (a.pay_opposite = ''y'') then 	-1 else 1 end *		
					(isnull(a.fixed_price, 0) + isnull(f.formula_value, 0)) -- Price Adder and Multiplier are used as credit risk spread			
		) as leg_mtm, 
		case when (a.settled = 0) then 0 
		else
			1/nullif(power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year), 0) * --Discount the cash flow
			a.deal_volume	*
			(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
			cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
			case when a.buy_sell_flag=''s'' then -1 else 1 end *					
			(	
				case when  a.curve_id is not NULL then 
					case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
				else 0 end +
				case when (a.pay_opposite = ''y'') then 	-1 else 1 end *		
						(isnull(a.fixed_price, 0) + isnull(f.formula_value, 0)) -- Price Adder and Multiplier are used as credit risk spread			
			) 
		end as leg_set, 
		null leg_mtm_deal,
		null leg_set_deal,
		null leg_mtm_inv,
		null leg_set_inv,
		NULL extrinsic_value, case when (leg = 1) then ie.accrued_interest else 0 end accrued_interest,
		case when a.buy_sell_flag=''s'' then -1 else 1 end * isnull(a.price_multiplier, 1) * 
			a.deal_volume volume,
		a.leg, 
		case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
		else 0 end +
		case when (a.pay_opposite = ''y'') then 	-1 else 1 end *		
					(isnull(a.fixed_price, 0) + isnull(f.formula_value, 0)) price,
		spc_di.CURVE_VALUE discount_rate, nodl.no_days_left, a.days_year,
		1/nullif(power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year), 0) discount_factor,
		case when (a.settled = 1) then ''y'' else ''n'' end expired_term,
		a.exp_curve_as_of_date curve_as_of_date,
		a.internal_deal_type_value_id,
		a.internal_deal_subtype_value_id,
		1 curve_uom_conv_factor,
		1 curve_fx_conv_factor,
		1 price_fx_conv_factor,
		case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
			else 0 end curve_value,
		ISNULL(a.fixed_cost, 0) fixed_cost,
		isnull(a.fixed_price, 0) fixed_price,
		isnull(f.formula_value, 0) formula_value,
		isnull(a.price_adder, 0) price_adder,
		isnull(a.price_multiplier, 1) price_multiplier,
		NULL strike_price,
		a.buy_sell_flag, a.leg_physical_financial_flag,
		1 fixed_cost_fx_conv_factor,
		1 formula_fx_conv_factor,
		1 price_adder1_fx_conv_factor,
		1 price_adder2_fx_conv_factor,
		1 volume_multiplier,
		1 volume_multiplier2,
		0 price_adder2,
		a.pay_opposite,
		0 error_deal, NULL error_deal_reason,
		a.curve_uom_id, a.deal_volume_uom_id, a.fixed_price_currency_id, a.price_adder_currency, a.price_adder2_currency, a.func_cur_id, 
		a.formula_currency, a.fixed_cost_currency 
		,null market_value		
		,null contract_vale
		,0 simple_formula_curve_value
		,NULL formula_conv_factor
		,null market_value_deal
		,null contract_vale_deal
		,0 simple_formula_curve_value_deal
		,NULL formula_conv_factor_deal
		,null market_value_inv		
		,null contract_vale_inv
		,0 simple_formula_curve_value_inv
		,NULL formula_conv_factor_inv
		,NULL formula_rounding,
		NULL formula_id,
		NULL contract_id,
		NULL product_id,
		a.source_deal_detail_id,
		a.formula_curve_id,
		NULL,
	NULL,NULL,a.deal_volume	,a.fixed_price_currency_id,a.settlement_currency,null tou
		from #temp_deals a inner join
		#ir_no_days_left nodl ON nodl.source_deal_header_id = a.source_deal_header_id and
					nodl.term_end = a.term_end	LEFT OUTER JOIN
		#temp_curves tc_s ON tc_s.source_curve_def_id = a.curve_id and 
						tc_s.maturity_date = a.term_end and 
						tc_s.as_of_date = a.term_end left outer join
		#temp_curves tc_f ON tc_f.source_curve_def_id = a.curve_id and 
						tc_f.maturity_date = a.term_end and 
						tc_f.as_of_date <> a.term_end  left outer join
		' + @source_price_curve + ' spc_di  ON spc_di.source_curve_def_id = a.discount_curve_id and 
			spc_di.as_of_date = a.curve_as_of_date and
			spc_di.maturity_date = a.term_end and
			spc_di.assessment_curve_type_value_id = ' + cast(@assessment_curve_type_value_id as varchar) + ' and 
			spc_di.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' left outer join

		(select source_deal_header_id, term_start, term_end, sum(leg_mtm) accrued_interest 
			from #interest_expense ie where interst_type = ''a'' group by source_deal_header_id, term_start, term_end) ie ON 
				ie.source_deal_header_id = a.source_deal_header_id AND 
				ie.term_start = a.term_start and ie.term_end = a.term_end
		LEFT OUTER JOIN #formula_value f ON a.term_start = f.term_start and
					--a.exp_curve_as_of_date = f.contract_expiration_date and
					a.formula_id = f.formula_id

		where a.internal_deal_type_value_id = 6 and a.term_end > ''' +@as_of_date + ''''


If @internal_deal_type_IR_6 = 1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************#temp_leg_mtm: calculate Forward MTM for IR swaps*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--select 'The following is forward value of Debt'
SET @sqlstmt = '
INSERT INTO  	#temp_leg_mtm 
Select 	
		a.source_deal_header_id, a.deal_id,
		case when (a.internal_deal_type_value_id IN (6,7)) THEN a.term_end ELSE a.term_start END term_start, 
		a.term_end, a.curve_id,
		(
		1/nullif(power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year), 0) * --Discount the cash flow
		a.deal_volume	*
		(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
		cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
		case when a.buy_sell_flag=''s'' then -1 else 1 end *					
		(	
			case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
			else 0 end +
				(isnull(a.fixed_price, 0) + isnull(f.formula_value, 0))				
		)  

		+ case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end
			* 1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year)
		)
		- case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end
		as leg_mtm, 
		case when (a.settled = 0) then 0 
		else
			(
			1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year) * --Discount the cash flow
			a.deal_volume	*
			(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
			cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
			case when a.buy_sell_flag=''s'' then -1 else 1 end *					
			(	
				case when  a.curve_id is not NULL then 
					case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
				else 0 end +
					(isnull(a.fixed_price, 0) + isnull(f.formula_value, 0))				
			)  

			+ case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end
				* 1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year)
			)
			- case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end		
		end as leg_set, 
		null leg_mtm_deal,
		null leg_set_deal,
		null leg_mtm_inv,
		null leg_set_inv,
		NULL extrinsic_value, case when (leg = 1) then ie.accrued_interest else 0 end accrued_interest,
		case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume volume,
		a.leg, 
		case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
				else 0 end + (isnull(a.fixed_price, 0) + isnull(f.formula_value, 0)) price,
		spc_di.CURVE_VALUE discount_rate, nodl.no_days_left, a.days_year, 
		1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year) discount_factor,
		case when (a.settled = 1) then ''y'' else ''n'' end expired_term,
		a.exp_curve_as_of_date curve_as_of_date,
		a.internal_deal_type_value_id,
		a.internal_deal_subtype_value_id,
		1 curve_uom_conv_factor,
		1 curve_fx_conv_factor,
		1 price_fx_conv_factor,
		case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then tc_s.curve_value else tc_f.curve_value end 
		else 0 end curve_value,
		ISNULL(a.fixed_cost, 0) fixed_cost,
		isnull(a.fixed_price, 0) fixed_price,
		isnull(f.formula_value, 0) formula_value,
		isnull(a.price_adder, 0) price_adder,
		isnull(a.price_multiplier, 1) price_multiplier,
		NULL strike_price,
		a.buy_sell_flag, a.leg_physical_financial_flag,
		1 fixed_cost_fx_conv_factor,
		1 formula_fx_conv_factor,
		1 price_adder1_fx_conv_factor,
		1 price_adder2_fx_conv_factor,
		1 volume_multiplier,
		1 volume_multiplier2,
		0 price_adder2,
		a.pay_opposite,
		0 error_deal, NULL error_deal_reason, 
		a.curve_uom_id, a.deal_volume_uom_id, a.fixed_price_currency_id, a.price_adder_currency, a.price_adder2_currency, a.func_cur_id, 
		a.formula_currency, a.fixed_cost_currency 		
		,null market_value		
		,null contract_vale
		,0 simple_formula_curve_value
		,NULL formula_conv_factor
		,null market_value_deal
		,null contract_vale_deal
		,0 simple_formula_curve_value_deal
		,NULL formula_conv_factor_deal
		,null market_value_inv
		,null contract_vale_inv
		,0 simple_formula_curve_value_inv
		,NULL formula_conv_factor_inv
		,NULL formula_rounding,
		NULL formula_id,
		NULL contract_id,
		NULL product_id,
		a.source_deal_detail_id,
		a.formula_curve_id,
		NULL,NULL,NULL,a.deal_volume,a.fixed_price_currency_id,a.settlement_currency,null tou
		from #temp_deals a inner join
		#ir_no_days_left nodl ON nodl.source_deal_header_id = a.source_deal_header_id and
					nodl.term_end = a.term_end	LEFT OUTER JOIN
		#temp_curves tc_s ON tc_s.source_curve_def_id = a.curve_id and 
						tc_s.maturity_date = a.term_end and 
						tc_s.as_of_date = a.term_end left outer join
		#temp_curves tc_f ON tc_f.source_curve_def_id = a.curve_id and 
						tc_f.maturity_date = a.term_end and 
						tc_f.as_of_date <> a.term_end  left outer join
		' + @source_price_curve + ' spc_di  ON spc_di.source_curve_def_id = a.discount_curve_id and 
			spc_di.as_of_date =a.curve_as_of_date and
			spc_di.maturity_date = a.term_end and
			spc_di.assessment_curve_type_value_id = ' + cast(@assessment_curve_type_value_id as varchar) + ' and 
			spc_di.curve_source_value_id = ' + cast(@curve_source_value_id as varchar) + ' left outer join
		(select source_deal_header_id, term_start, term_end, sum(leg_mtm) accrued_interest 
			from #interest_expense ie where interst_type = ''a'' group by source_deal_header_id, term_start, term_end) ie ON 
				ie.source_deal_header_id = a.source_deal_header_id AND 
				ie.term_start = a.term_start and ie.term_end = a.term_end	LEFT OUTER JOIN
		(
		select fld.source_deal_header_id source_deal_header_id1 from fas_link_detail fld INNER JOIN
		fas_link_header flh on flh.link_id = fld.link_id INNER JOIN
		source_deal_header sdh on sdh.source_deal_header_id = fld.source_deal_header_id 
		WHERE flh.perfect_hedge = ''y'' and sdh.internal_deal_type_value_id = 7 and hedge_or_item = ''i''
		) no_calc_short_cut_method ON no_calc_short_cut_method.source_deal_header_id1 = a.source_deal_header_id 
		LEFT OUTER JOIN #formula_value f ON a.term_start = f.term_start and
					--a.exp_curve_as_of_date = f.contract_expiration_date and
					a.formula_id = f.formula_id
		where a.internal_deal_type_value_id = 7 and a.term_end > ' + @as_of_date + ' AND no_calc_short_cut_method.source_deal_header_id1 IS NULL
'
	
If @internal_deal_type_Debt_7 = 1
	EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sqlstmt)


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************#temp_leg_mtm: calculate Forward value of debt*****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--Of Perfect hedge which means short cut method for Debt then replicate the hedge mtm value
If @internal_deal_type_Debt_7 = 1
BEGIN

	select fld.*  into #temp_fld from fas_link_detail fld INNER JOIN
		fas_link_header flh on flh.link_id = fld.link_id INNER JOIN
		source_deal_header sdh on sdh.source_deal_header_id = fld.source_deal_header_id 
		WHERE flh.perfect_hedge = 'y' and sdh.internal_deal_type_value_id = 7 and hedge_or_item = 'i'
		
	select source_deal_header_id, term_start, term_end, sum(leg_mtm) accrued_interest 
		into #temp_int		from #interest_expense ie where interst_type = 'a' 
	group by source_deal_header_id, term_start, term_end
	
	select * into #temp_fld_1 from fas_link_detail where hedge_or_item = 'h'
	
	insert into #temp_leg_mtm
	select i.source_deal_header_id, NULL deal_id, tlm.term_start, tlm.term_end, tlm.curve_id curve_id
		, -1*tlm.leg_mtm, -1*tlm.leg_mtm
		, -1*tlm.leg_mtm_deal, -1*tlm.leg_mtm_deal
		, -1*tlm.leg_mtm_inv, -1*tlm.leg_mtm_inv
		, -1*tlm.extrinsic_value,
	case when (tlm.leg = 1) then ie.accrued_interest else 0 end accrued_interest, tlm.volume, tlm.leg, tlm.price, 
	tlm.discount_rate, tlm.no_days_left, tlm.days_year, tlm.discount_factor,
	tlm.expired_term,
	tlm.curve_as_of_date,
	tlm.internal_deal_type_value_id,
	tlm.internal_deal_subtype_value_id,
	tlm.curve_uom_conv_factor,
	tlm.curve_fx_conv_factor,
	tlm.price_fx_conv_factor,
	tlm.curve_value,
	tlm.fixed_cost,
	tlm.fixed_price,
	tlm.formula_value,
	tlm.price_adder,
	tlm.price_multiplier,
	tlm.strike_price,
	tlm.buy_sell_flag, tlm.physical_financial_flag,
	tlm.fixed_cost_fx_conv_factor,
	tlm.formula_fx_conv_factor,
	tlm.price_adder1_fx_conv_factor,
	tlm.price_adder2_fx_conv_factor,
	tlm.volume_multiplier,
	tlm.volume_multiplier2,
	tlm.price_adder2,
	tlm.pay_opposite,
	tlm.error_deal, NULL error_deal_reason, 
	tlm.curve_uom_id, tlm.deal_volume_uom_id, tlm.fixed_price_currency_id, tlm.price_adder_currency, tlm.price_adder2_currency, tlm.func_cur_id, 
	tlm.formula_currency, tlm.fixed_cost_currency 
	,null market_value		
	,null contract_vale,
	NULL formula_conv_factor,
		0 simple_formula_curve_value,
			null market_value_deal		
		,null contract_vale_deal,
		NULL formula_conv_factor_deal,
		0 simple_formula_curve_value_deal,
		null market_value_inv	
		,null contract_vale_inv,
		NULL formula_conv_factor_inv,
		0 simple_formula_curve_value_inv,
			NULL formula_rounding,
	NULL formula_id,
	NULL contract_id,
	NULL product_id,
	tlm.source_deal_detail_id,
	tlm.formula_curve_id,
		NULL,NULL,NULL,NULL,tlm.deal_cur_id , tlm.inv_cur_id,null tou
	FROM 	#temp_fld	 i INNER JOIN #temp_fld_1 h ON h.link_id = i.link_id INNER JOIN
	#temp_leg_mtm tlm on tlm.source_deal_header_id = h.source_deal_header_id LEFT OUTER JOIN
	#temp_int ie ON 
					ie.source_deal_header_id = i.source_deal_header_id AND 
					ie.term_start = tlm.term_start and ie.term_end = tlm.term_end
END

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************#temp_leg_mtm: Perfect hedge which means short cut method for Debt then replicate the hedge mtm value*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

CREATE TABLE #basis_adjustments(
	[as_of_date] [varchar](100) COLLATE DATABASE_DEFAULT NULL,
	[source_deal_header_id] [int] NOT NULL,
	[change_value] [float] NULL,
	[PMT] [float] NULL,
	[period_left] [int] NULL,
	[frequency] [int] NULL,
	[irate] [float] NULL) 

--select 'The following is Basis Adjustments of Debt'
SET @sqlstmt = '
INSERT INTO #basis_adjustments
Select 	''' + @as_of_date + ''' as_of_date, a.source_deal_header_id, 
		sum(
		1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year) * --Discount the cash flow
		a.deal_volume	*
		(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
		cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
		case when a.buy_sell_flag=''s'' then -1 else 1 end *					
		(	
			case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then spc_di.curve_value else tc_f.curve_value end 
			else 0 end +
				 (isnull(a.fixed_price, 0) + isnull(f.formula_value, 0))		
		) + 
		case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end
		) -
		max(case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume) change_value
		,		
		dbo.FNAPmt (sum(
		1/power((1+spc_di.CURVE_VALUE), nodl.no_days_left/a.days_year) * --Discount the cash flow
		a.deal_volume	*
		(cast(datediff(dd, a.term_start, a.term_end) as float)/28)/12 * --find rate for frequency i.e., quarter would be 3/12
		cast(nodl.no_days_left as float)/nullif((nodl.no_days_left + no_days_accrued), 0) *
		case when a.buy_sell_flag=''s'' then -1 else 1 end *					
		(	
			case when  a.curve_id is not NULL then 
				case when (''' + @as_of_date + ''' >= a.term_start) then spc_di.curve_value else tc_f.curve_value end 
			else 0 end +
						
				 (isnull(a.fixed_price, 0) * isnull(a.price_multiplier, 1)) + isnull(a.price_adder, 0) + isnull(f.formula_value, 0)
		) + 
		case when (a.term_end = a.entire_term_end) then case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume else 0 end
		) -
		max(case when a.buy_sell_flag=''s'' then -1 else 1 end * a.deal_volume),
		min(spc_di.curve_value/nullif((datediff(dd, a.term_start, a.term_end)/28), 0)), 
		max(cast(datediff(dd, ''' + @as_of_date + ''', a.entire_term_end) as float)/28)/nullif(max(cast(datediff(dd, a.term_start, a.term_end) as float)/28), 0))	PMT,
		max(cast(datediff(dd, ''' + @as_of_date + ''', a.entire_term_end) as float)/28)/nullif(max(cast(datediff(dd, a.term_start, a.term_end) as float)/28), 0) period_left,
		max(cast(datediff(dd, a.term_start, a.term_end) as float)/28) frequency,
		min(spc_di.curve_value/nullif((cast(datediff(dd, a.term_start, a.term_end) as float)/28), 0)) irate
	from #temp_deals a inner join
		#ir_no_days_left nodl ON nodl.source_deal_header_id = a.source_deal_header_id and
					nodl.term_end = a.term_end	LEFT OUTER JOIN
		(
		select source_curve_def_id, min(maturity_date) maturity_date from #temp_curves where 
		as_of_date = maturity_date 
		and maturity_date > ''' + @as_of_date + '''
		group by source_curve_def_id
		) cur_set_val on cur_set_val.source_curve_def_id = a.curve_id LEFT OUTER JOIN
		#temp_curves tc_f ON tc_f.source_curve_def_id = a.curve_id and 
					tc_f.maturity_date = a.term_end and 
					tc_f.as_of_date <> a.term_end  left outer join

		' + @source_price_curve + ' spc_di  ON spc_di.source_curve_def_id = a.discount_curve_id and 
			spc_di.as_of_date =a.curve_as_of_date and
			spc_di.maturity_date = a.term_end and
			spc_di.assessment_curve_type_value_id = ' + cast(@assessment_curve_type_value_id as varchar) + ' and 
			spc_di.curve_source_value_id = ' + cast(@curve_source_value_id 	as varchar) + ' 

		LEFT OUTER JOIN #formula_value f ON a.term_start = f.term_start and
					--a.exp_curve_as_of_date = f.contract_expiration_date and
					a.formula_id = f.formula_id

		where a.internal_deal_type_value_id = 7 and a.term_end > ''' + @as_of_date + ''' 
		group by a.source_deal_header_id
'

If @internal_deal_type_Debt_7 = 1
	EXEC (@sqlstmt)

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Calculate Basis Adjustments of Debt*****************************'	
END



-------------------------End of Step 5----------------------------------------
 
-- select * from #temp_deals
-- select * from #temp_curves
-- SELECT error_deal_reason, * FROM #temp_leg_mtm 

----------------------Step 6   #temp_curves.curve_value is NULL  or missing fx/uom factors then Log for error  ------------------------------

--Create deal records that have errors and should not be inserted in final tables

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running.............. '
end

--CREATE INDEX idx_temp_leg_mtm1 ON #temp_leg_mtm (leg_mtm)
CREATE INDEX idx_temp_leg_mtm2 ON #temp_leg_mtm (curve_id,expired_term ,curve_as_of_date)
CREATE INDEX idx_temp_leg_mtm3 ON #temp_leg_mtm (fixed_cost_currency,fixed_cost_fx_conv_factor)
CREATE INDEX idx_temp_leg_mtm4 ON #temp_leg_mtm (price_adder2_currency,price_adder2_fx_conv_factor)
CREATE INDEX idx_temp_leg_mtm5 ON #temp_leg_mtm (curve_uom_id,deal_volume_uom_id)
CREATE INDEX idx_temp_leg_mtm6 ON #temp_leg_mtm (curve_uom_conv_factor)
CREATE INDEX idx_temp_leg_mtm7 ON #temp_leg_mtm (func_cur_id,formula_currency)
CREATE INDEX idx_temp_leg_mtm8 ON #temp_leg_mtm (formula_fx_conv_factor)
CREATE INDEX idx_temp_leg_mtm9 ON #temp_leg_mtm (fixed_price_currency_id,price_fx_conv_factor)
CREATE INDEX idx_temp_leg_mtm10 ON #temp_leg_mtm (price_adder_currency,price_adder1_fx_conv_factor)
CREATE INDEX idx_temp_leg_mtm11 ON #temp_leg_mtm (source_deal_header_id,term_start,term_end,leg)
CREATE INDEX idx_temp_leg_mtm12 ON #temp_leg_mtm (internal_deal_type_value_id)


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Indexing on #temp_leg_mtm*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running.............. '
end

--CREATE TABLE #ok_deals (source_deal_header_id INT, term_start DATETIME, term_end DATETIME, expired_term varchar(1) COLLATE DATABASE_DEFAULT, error_deal INT,source_deal_detail_id int)

INSERT INTO #ok_deals --  select * from #ok_deals
select t.source_deal_header_id, t.term_start, t.term_end, max(t.expired_term) expired_term, sum(t.error_deal) error_deal,t.source_deal_detail_id,td.mtm_sett_calc

from #temp_leg_mtm t 
	INNER JOIN #temp_deals td ON td.source_deal_detail_id = t.source_deal_detail_id
		AND ISNULL(t.state_value_id, -1) = ISNULL(td.state_value_id, -1)
		AND ISNULL(t.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
	left join (select * from #temp_leg_mtm where error_deal is null AND volume <> 0) ed on 
		t.source_deal_detail_id = ed.source_deal_detail_id
where ed.source_deal_detail_id is NULL
GROUP BY t.source_deal_header_id, t.term_start, t.term_end,t.source_deal_detail_id,td.mtm_sett_calc


CREATE INDEX idx_ok_deals ON #ok_deals (source_deal_header_id, term_start, term_end)
CREATE INDEX [IX_PT_ok_deals_source_deal_detail_id] ON [#ok_deals] ([source_deal_detail_id])

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Creating OK Deals that would be deleted and inserted*****************************'	
END

--Log errors related to missing FX and UOM conversion rates
If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--1. Missing UOM Conversion factors
insert into #calc_status 	
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' UOM conversion factor from ' + suf.uom_name + ' to ' + sut.uom_name + ' missing for as of date: ' + 
		cast(year(@as_of_date) as varchar) + '-' + cast(month(@as_of_date) as varchar) + '-' + cast(day(@as_of_date) as varchar)
		,'Please import/define FX/UOM factors' 
FROM #temp_leg_mtm t INNER JOIN
	source_uom suf on suf.source_uom_id = t.curve_uom_id INNER JOIN
	source_uom sut on sut.source_uom_id = t.deal_volume_uom_id 
WHERE 
	curve_uom_conv_factor IS NULL 
GROUP BY suf.uom_name, sut.uom_name


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing UOM Conversion Factor: Inserting into #calc_status 1 *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--2. Missing Formula FX conversion factor
insert into #calc_status 
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' FX conversion factor to functional currency ' + max(suf.currency_name)  + ' missing for as of date: ' + 
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar) +
		' (Missing Factor:' + 
		CASE WHEN (formula_fx_conv_factor IS NULL) THEN   suffo.currency_name + ' for Formula' ELSE '' END  + 
		')','Please import/define FX/UOM factors' 
FROM #temp_leg_mtm LEFT OUTER JOIN
	source_currency suf on suf.source_currency_id = func_cur_id LEFT OUTER JOIN
	source_currency suffo on suffo.source_currency_id = formula_currency 
WHERE 
	formula_fx_conv_factor IS NULL 
GROUP BY curve_as_of_date, suf.currency_name, suffo.currency_name, formula_fx_conv_factor

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing Formula FX Conversion Factors: Inserting into #calc_status 2 *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--3. Missing Fixed Price FX conversion factor
insert into #calc_status 	
select  @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' FX conversion factor to functional currency ' + max(suf.currency_name)  + ' missing for as of date: ' + 
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar) +
		' (Missing Factors:' + 
		CASE WHEN (price_fx_conv_factor IS NULL) THEN   suffo.currency_name + ' for Fixed Price' ELSE '' END  + 
		')','Please import/define FX/UOM factors' 
FROM #temp_leg_mtm LEFT OUTER JOIN
	source_currency suf on suf.source_currency_id = func_cur_id LEFT OUTER JOIN
	source_currency suffo on suffo.source_currency_id = fixed_price_currency_id 
WHERE 
	price_fx_conv_factor IS NULL 
GROUP BY curve_as_of_date, suf.currency_name, suffo.currency_name, price_fx_conv_factor

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing Fixed Price Conversion Factors: Inserting into #calc_status 3 *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--4. Missing Price Adder1 FX conversion factor
insert into #calc_status 	
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' FX conversion factor to functional currency ' + max(suf.currency_name)  + ' missing for as of date: ' + 
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar) +
		' (Missing Factor:' + 
		CASE WHEN (price_adder1_fx_conv_factor IS NULL) THEN   suffo.currency_name + ' for Price Adder1' ELSE '' END  + 
		')','Please import/define FX/UOM factors' 
FROM #temp_leg_mtm LEFT OUTER JOIN
	source_currency suf on suf.source_currency_id = func_cur_id LEFT OUTER JOIN
	source_currency suffo on suffo.source_currency_id = price_adder_currency 
WHERE 
	price_adder1_fx_conv_factor IS NULL 
GROUP BY curve_as_of_date, suf.currency_name, suffo.currency_name, price_adder1_fx_conv_factor

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing Price Adder1 Conversion Factors: Inserting into #calc_status 4 *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--5. Missing Price Adder2 FX conversion factor
insert into #calc_status 	
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' FX conversion factor to functional currency ' + max(suf.currency_name)  + ' missing for as of date: ' + 
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar) +
		' (Missing Factor:' + 
		CASE WHEN (price_adder2_fx_conv_factor IS NULL) THEN   suffo.currency_name + ' for Price Adder2' ELSE '' END  + 
		')','Please import/define FX/UOM factors' 
FROM #temp_leg_mtm LEFT OUTER JOIN
	source_currency suf on suf.source_currency_id = func_cur_id LEFT OUTER JOIN
	source_currency suffo on suffo.source_currency_id = price_adder2_currency 
WHERE 
	price_adder2_fx_conv_factor IS NULL 
GROUP BY curve_as_of_date, suf.currency_name, suffo.currency_name, price_adder2_fx_conv_factor

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing Price Adder2 Conversion Factors: Inserting into #calc_status 5 *****************************'	
END

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--6. Missing Fixed Cost FX conversion factor
insert into #calc_status 	
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		' FX conversion factor to functional currency ' + max(suf.currency_name)  + ' missing for as of date: ' + 
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Maturity ' + 
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar) +
		' (Missing Factor:' + 
		CASE WHEN (fixed_cost_fx_conv_factor IS NULL) THEN   suffo.currency_name + ' for Fixed Cost' ELSE '' END  + 
		')','Please import/define FX/UOM factors' 
FROM #temp_leg_mtm LEFT OUTER JOIN
	source_currency suf on suf.source_currency_id = func_cur_id LEFT OUTER JOIN
	source_currency suffo on suffo.source_currency_id = fixed_cost_currency  
WHERE 
	fixed_cost_fx_conv_factor IS NULL 
GROUP BY curve_as_of_date, suf.currency_name, suffo.currency_name, fixed_cost_fx_conv_factor

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Missing Fixed CostConversion Factors: Inserting into #calc_status 6 *****************************'	
END


-- select * from #calc_status
--Missing Price Curves
if exists(select top 1 1  from  #temp_leg_mtm where @calc_type<>'s' AND (leg_mtm is NULL OR error_deal IS NULL))
begin

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--insert missing price curves for forward months
	insert into #calc_status 	
	select @process_id,'Error','MTM Calc','Run MTM','Data Error',
		'Price curve missing for curve '+s.curve_name+' for ID: '+convert(varchar(10),t.curve_id)+' for as of date: '+
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Term: ' +
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar),
		'Please Import Price Curve' 
	from #temp_leg_mtm t left outer Join source_price_curve_def s on t.curve_id = s.source_curve_def_id
	where  t.curve_id is not null
		AND t.curve_value IS NULL AND t.volume <> 0--t.leg_mtm is NULL	
		AND t.expired_term <> 'y' 
	group by s.curve_name, t.curve_id, curve_as_of_date

	
	-- select * from #calc_Status
	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Missing Forward Price Curves: Inserting into #calc_status 7 *****************************'	
	END


	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--Insert warning for expired processed deals without price curves
	insert into #calc_status 	
	select @process_id,'<font color="blue">Warning</font>','MTM Calc','Run MTM','Data Warning',
		'Price curve missing for curve '+s.curve_name+' for ID: '+convert(varchar(10),t.curve_id)+' for as of date: '+
		cast(year(curve_as_of_date) as varchar) + '-' + cast(month(curve_as_of_date) as varchar) + '-' + cast(day(curve_as_of_date) as varchar) +  
		' Term: ' +
		cast(year(min(term_start)) as varchar) + '-' + cast(month(min(term_start)) as varchar) + '-' + cast(day(min(term_start)) as varchar) + '/' +
		cast(year(max(term_start)) as varchar) + '-' + cast(month(max(term_start)) as varchar) + '-' + cast(day(max(term_start)) as varchar),
		'Please Import Price Curve' 
	from #temp_leg_mtm t left outer Join source_price_curve_def s on
	t.curve_id = s.source_curve_def_id
	where  t.curve_id is not null
		AND t.curve_value IS NULL AND t.volume <> 0 --t.leg_mtm is NULL
		AND t.expired_term = 'y' 
	group by s.curve_name, t.curve_id, curve_as_of_date



	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Missing Expired Price Curves for Warnings: Inserting into #calc_status 8 *****************************'	
	END


	--continue to insert the ones that did not have any issues...
-- 	GOTO FinalStep
-- 	return
end
If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--insert failed  deal numbers
insert into #calc_status 	
select @process_id,'Error','MTM Calc','Run MTM','Data Error',
	'Failed to calculate MTM due to missing price curves or conversion factors for Deal ID: '+convert(varchar(10),t.source_deal_header_id)+' (' + 
	t.deal_id + ') for as of date: '+
	cast(year(@as_of_date) as varchar) + '-' + cast(month(@as_of_date) as varchar) + '-' + cast(day(@as_of_date) as varchar) + ' ' +
	MAX(t.error_deal_reason), 
	'Please Import Price Curve' 
from #temp_leg_mtm t LEFT OUTER JOIN #ok_deals o ON o.source_deal_header_id = t.source_deal_header_id 
where o.source_deal_header_id IS NULL AND t.expired_term <> 'y'
group by t.source_deal_header_id, t.deal_id


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print '****************Failed Deals MTM Calculation due to missing factors/curves: Inserting into #calc_status 9 *****************************'	
END

-------------------------End of Step 6----------------------------------------

----------------------Step 7  if no records selected then log for error  ------------------------------
if not exists(select TOP 1 1 from #temp_leg_mtm)
Begin
	if exists(select 1 from #temp_deals)
	begin
		set @desc='No data found to process for  MTM calculation  as of  date: '+ isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) 
		insert into #calc_status values(@process_id,'Error','MTM Calc','Run MTM','Data Error',@desc,'')
		GOTO FinalStep
		return
	end
End

-------------------------End of Step 7----------------------------------------

----------------------Step 8   Delete from source_deal_pnl   ------------------------------
--only delete the deals we are going insert.. that means deals without any errors.
--select * from #temp_leg_mtm
-- select * from #calc_status


declare @st1 varchar(8000)

-------------------------End of Step 8----------------------------------------

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

----------------------Step 9   insert into source_deal_pnl  ------------------------------
--only insert deals that were calculated 
--select * from source_deal_pnl_detail where source_deal_header_id in (130373, 130374)

select distinct source_deal_header_id into #pnl_comp_source_deal_header_id from #temp_deals
WHILE 1 = 1
BEGIN
	delete top(100000) s from dbo.pnl_component_price_detail s 
	inner join #pnl_comp_source_deal_header_id sdd on 
	--AND ISNULL(sdd.shipment_id, -1) = ISNULL(s.shipment_id,-1)
	--AND ISNULL(sdd.ticket_detail_id,-1) = ISNULL(s.ticket_detail_id,-1)
	 s.run_as_of_date=@as_of_date and s.calc_type=@calc_type and sdd.source_deal_header_id=s.source_deal_header_id
	IF @@rowcount < 100000 BREAK;
END
insert into dbo.pnl_component_price_detail(
	source_deal_header_id
	,source_deal_detail_id
	,run_as_of_date
	,term_start,leg
	,as_of_date,
	maturity_date,
	curve_id,
	curve_value,
	deal_price_type_id,
	price_type_id,
	pricing_month,
	currency_id,
	uom_id,
	price_multiplier,
	price_adder,
	calc_type,
	is_formula,
	shipment_id,
	ticket_detail_id
	,fin_term_start 
	,price_uom 
	,price_currency 
	,settlement_currency 
	,uom_conversion 
	,fx_rate_curve 
	,fx_rate_adder 
	,raw_price 
	,raw_price_adder 
	,adder_currency
)

select 
	td.source_deal_header_id
	,td.source_deal_detail_id
	,@as_of_date run_as_of_date
	,td.term_start,td.leg
	,cp.as_of_date,
	cp.maturity_date,
	cp.curve_id,
	round(cp.curve_value_org*isnull(cp.price_multiplier,1)*isnull(cucf.curve_uom_conv_factor,1)*isnull(v.fx_factor_price_multipler,1),isnull(cp.rounding,9)) curve_value,
	cp.deal_price_type_id,
	cp.price_type_id,
	cp.pricing_month,
	td.fixed_price_currency_id currency_id,
	td.deal_volume_uom_id uom_id,
	cp.price_multiplier,
	round(cp.price_adder_org*isnull(a.fx_factor_price_adder,1),isnull(cp.rounding,9)) price_adder,
	@calc_type,
	cp.is_formula,
	cp.shipment_id,
	cp.ticket_detail_id
	,cp.fin_term_start 
	,cp.uom_id price_uom
	,cp.pricing_curve_currency price_currency
	,td.settlement_currency
	,isnull(cucf.curve_uom_conv_factor,1) uom_conversion
	,isnull(v.fx_factor_price_multipler,1) fx_rate_curve
	,isnull(a.fx_factor_price_adder,1) fx_rate_adder
	,cp.curve_value_org raw_price
	,cp.price_adder_org raw_adder 
	,cp.adder_currency
from #component_price_detail cp inner join #temp_deals td on cp.source_deal_detail_id=td.source_deal_detail_id 
		AND ISNULL(td.shipment_id, -1) = ISNULL(cp.shipment_id,-1) AND ISNULL(td.ticket_detail_id,-1) = ISNULL(cp.ticket_detail_id,-1)
	--	and td.source_deal_header_id=902 and cp.curve_id=7183 and cp.maturity_date='2020-04-02'
	inner join #ok_deals nonnull ON	nonnull.source_deal_detail_id=td.source_deal_detail_id
	and nonnull.mtm_sett_calc=1
	left join #component_price_detail_fx_value v on cp.rowid=v.rowid
	left join #component_price_detail_fx_value_adder a on cp.rowid=a.rowid
	left join #curve_uom_conv_factor cucf on cucf.curve_uom_id=cp.uom_id and cucf.deal_volume_uom_id=td.deal_volume_uom_id



If @calc_type = 'w'
Begin
	IF OBJECT_ID(@table_name) is  NULL OR isnull(@table_name,'')=''
	BEGIN
		set @st1 = 
		'DELETE  top(100000) source_Deal_pnl_WhatIf
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_Deal_pnl_WhatIf') +  ' source_Deal_pnl 
		inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=source_Deal_pnl.source_deal_header_id
		and  pnl_as_of_date=''' + @as_of_date + '''
		and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) + '
		and criteria_id = ' + cast (@criteria_id as varchar)

	--	EXEC spa_print @st1
	--	return
		WHILE 1 = 1
		BEGIN
			exec spa_print @st1
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
			IF @@rowcount < 100000 BREAK;
		END

	END
	set @st1 = case when OBJECT_ID(@table_name) is not null or isnull(@table_name,'')='' then
		'insert into  ' +  case when OBJECT_ID(@table_name) is not null then @table_name else dbo.FNAGetProcessTableName(@as_of_date, 'source_Deal_pnl_WhatIf') end +
	  ' (criteria_id, source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
							und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, 
							dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
							pnl_adjustment_value, deal_volume, create_user, create_ts, update_user, update_ts, und_pnl_set,
							market_value, contract_value, dis_market_value,dis_contract_value)'
	else '' end 


	if isnull(@table_name ,'')=''
	begin
		set @table_name=''
	end
	else
	begin
		 if OBJECT_ID(@table_name) is not null
			set @table_name=''
		else 
			set @table_name=' into '+@table_name
	end

	set @st1= @st1 +'
		select CAST(' + cast( ISNULL(@criteria_id, 0) as varchar) + ' as INT) criteria_id, #temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start, #temp_leg_mtm.term_end, 
		1 AS Leg, ''' + @curve_as_of_date + ''' AS pnl_as_of_date, 
		isnull(sum(#temp_leg_mtm.leg_mtm),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl, 
		isnull(sum(#temp_leg_mtm.leg_mtm),0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
			isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_intrinsic_pnl, 
		isnull(sum(#temp_leg_mtm.extrinsic_value), 0) AS und_extrinsic_pnl, 
		isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_pnl, 
		isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor),0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
			isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_intrinsic_pnl, 		
		isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_extrinisic_pnl, --accrued interest
		''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, 
		max(#temp_leg_mtm.func_cur_id)  pnl_currency_id, 
		1 AS pnl_conversion_factor, 0 as pnl_adjustment_value,
		sum(abs(#temp_leg_mtm.volume)) deal_volume, ''' +
		@user_id + ''' create_user, getdate() create_ts, ''' + @user_id + ''' update_user, getdate() update_ts,
		sum(#temp_leg_mtm.leg_set) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl_set
		,isnull(sum(#temp_leg_mtm.market_value),0) market_value
		,isnull(sum(#temp_leg_mtm.contract_value),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) contract_value
		,isnull(sum(#temp_leg_mtm.market_value*#temp_leg_mtm.discount_factor),0) dis_market_value
		,isnull(sum(#temp_leg_mtm.contract_value*#temp_leg_mtm.discount_factor),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) dis_contract_value'
		+@table_name +'
	from  #temp_leg_mtm  INNER JOIN
			#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
		  --#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.term_start=#temp_leg_mtm.term_start and nonnull.term_end=#temp_leg_mtm.term_end  	
	WHERE isnull(#temp_leg_mtm.internal_deal_subtype_value_id, -1) <> 12	 
	GROUP BY #temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start, #temp_leg_mtm.term_end --, #temp_leg_mtm.internal_deal_type_value_id
				 
	'
	exec spa_print @st1
	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)	

		-- delete from detail pnl table
	IF OBJECT_ID(@table_name) is  NULL
	BEGIN
	
		set @st1 = 
		'DELETE  TOP(100000) source_deal_pnl_detail_WhatIf
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_detail_WhatIf') +  ' source_deal_pnl_detail 
		inner join #ok_deals nonnull 
		ON	nonnull.source_deal_header_id=source_deal_pnl_detail.source_deal_header_id
		and  pnl_as_of_date=''' + @as_of_date + '''
		and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar)  + '
		and criteria_id = ' + cast (@criteria_id as varchar)

		
		EXEC spa_print @st1
		--return
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
			IF @@rowcount < 100000 BREAK;
		END

		set @st1 = 
		'insert into  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_detail_WhatIf') +  ' (
								criteria_id, source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
								und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, 
								dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
								pnl_adjustment_value, deal_volume, 
								curve_id, accrued_interest, price, discount_rate, no_days_left, days_year, discount_factor,
								create_user, create_ts, update_user, update_ts,
								curve_as_of_date, internal_deal_type_value_id, internal_deal_subtype_value_id, curve_uom_conv_factor, curve_fx_conv_factor,
								price_fx_conv_factor, curve_value, fixed_cost, fixed_price, formula_value, price_adder, price_multiplier, strike_price, buy_sell_flag,
								expired_term, und_pnl_set, fixed_cost_fx_conv_factor, formula_fx_conv_factor, price_adder1_fx_conv_factor, price_adder2_fx_conv_factor,
								volume_multiplier, volume_multiplier2, price_adder2, pay_opposite,
								market_value, contract_value, dis_market_value,dis_contract_value)
		select ' +  cast(@criteria_id  as varchar)  + ' criteria_id, #temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start, #temp_leg_mtm.term_end, 
			#temp_leg_mtm.leg AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
			isnull(sum(#temp_leg_mtm.leg_mtm), 0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm), 0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_intrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.extrinsic_value), 0) AS und_extrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor), 0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor), 0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
			isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_intrinsic_pnl, isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_extrinisic_pnl, --accrued interest
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, max(#temp_leg_mtm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,max(abs(#temp_leg_mtm.volume)) deal_volume, 
			max(#temp_leg_mtm.curve_id) curve_id, max(#temp_leg_mtm.accrued_interest) accrued_interest,
			abs((isnull(sum(#temp_leg_mtm.leg_mtm), 0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0))/ISNULL(NULLIF(max(abs(#temp_leg_mtm.volume)),0),1)) price, 
			max(#temp_leg_mtm.discount_rate) discount_rate, max(#temp_leg_mtm.no_days_left) no_days_left, 
			max(#temp_leg_mtm.days_year) days_year, max(#temp_leg_mtm.discount_factor) discount_factor, ''' +
			@user_id + ''' create_user, getdate() create_ts, ''' + @user_id + ''' update_user, getdate() update_ts,
			max(#temp_leg_mtm.curve_as_of_date) curve_as_of_date, max(#temp_leg_mtm.internal_deal_type_value_id) internal_deal_type_value_id, 
			max(#temp_leg_mtm.internal_deal_subtype_value_id) internal_deal_subtype_value_id, max(#temp_leg_mtm.curve_uom_conv_factor) curve_uom_conv_factor, 
			max(#temp_leg_mtm.curve_fx_conv_factor) curve_fx_conv_factor,max(#temp_leg_mtm.price_fx_conv_factor) price_fx_conv_factor, 
			max(#temp_leg_mtm.curve_value) curve_value, max(#temp_leg_mtm.fixed_cost) fixed_cost, 
			max(#temp_leg_mtm.fixed_price) fixed_price, max(#temp_leg_mtm.formula_value) formula_value, max(#temp_leg_mtm.price_adder) price_adder, 
			max(#temp_leg_mtm.price_multiplier) price_multiplier, max(#temp_leg_mtm.strike_price) strike_price, 
			max(#temp_leg_mtm.buy_sell_flag) buy_sell_flag,max(#temp_leg_mtm.expired_term) expired_term,max(#temp_leg_mtm.leg_set) leg_set,
			max(#temp_leg_mtm.fixed_cost_fx_conv_factor) fixed_cost_fx_conv_factor, max(#temp_leg_mtm.formula_fx_conv_factor) formula_fx_conv_factor
			, max(#temp_leg_mtm.price_adder1_fx_conv_factor) price_adder1_fx_conv_factor, 
			max(#temp_leg_mtm.price_adder2_fx_conv_factor) price_adder2_fx_conv_factor, max(#temp_leg_mtm.volume_multiplier) volume_multiplier
			, max(#temp_leg_mtm.volume_multiplier2) volume_multiplier2, max(#temp_leg_mtm.price_adder2) price_adder2, max(#temp_leg_mtm.pay_opposite) pay_opposite
			,max(#temp_leg_mtm.market_value) market_value,max(#temp_leg_mtm.contract_value) contract_value
			,max(#temp_leg_mtm.market_value*#temp_leg_mtm.discount_factor) dis_market_value
			,max(#temp_leg_mtm.contract_value*#temp_leg_mtm.discount_factor) dis_contract_value
		from  #temp_leg_mtm  INNER JOIN
			#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
			  --#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id  and nonnull.term_start=#temp_leg_mtm.term_start and nonnull.term_end=#temp_leg_mtm.term_end  
		GROUP BY 
			#temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start,  #temp_leg_mtm.term_end, #temp_leg_mtm.leg --, #temp_leg_mtm.internal_deal_type_value_id
		'
		
		exec spa_print @st1
		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
End
End
Else if (@table_name is  null or @table_name='') AND @calc_type = 'm'
Begin

	-- delete from #index_fees_breakdown
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	set @st1 = 
		'DELETE  top(100000) index_fees_breakdown
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'index_fees_breakdown') +  ' i 
		inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=i.source_deal_header_id
		inner join #fees_breakdown f ON nonnull.source_deal_header_id=f.source_deal_header_id 
		and  i.as_of_date=''' + @as_of_date + ''''

	EXEC spa_print @st1
--	return
	WHILE 1 = 1
	BEGIN
		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
		IF @@rowcount < 100000 BREAK;
	END

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Deleting from index_fees_breakdown*****************************'	
	END


	---Begin of Delete
	--select distinct source_deal_header_id into #ok_deals_header from #ok_deals
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end
		
	set @st1 = 
	'DELETE  top(100000) source_Deal_pnl
	from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl') +  ' source_Deal_pnl 
	inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=source_Deal_pnl.source_deal_header_id
		and  pnl_as_of_date=''' + @as_of_date + ''' and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

	EXEC spa_print @st1
--	return
	WHILE 1 = 1
	BEGIN
		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
		IF @@rowcount < 100000 BREAK;
	END

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print '****************Deleting from source_deal_pnl*****************************'	
	END


	If @save_pnl_option = 0
	BEGIN

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		-- delete from detail pnl table
		set @st1 = 
		'DELETE  TOP(100000) source_deal_pnl_detail
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_detail') +  ' source_deal_pnl_detail 
		inner join #ok_deals nonnull 
		ON	nonnull.source_deal_header_id=source_deal_pnl_detail.source_deal_header_id
		and  pnl_as_of_date=''' + @as_of_date + '''
		and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

		EXEC spa_print  @st1
		--return
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
			IF @@rowcount < 100000 BREAK;
		END

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Deleting from source_deal_pnl_detail*****************************'	
		END


		set @st1 = 
		'DELETE  TOP(100000) source_deal_pnl_tou
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_tou') +  ' tou 
		inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=tou.source_deal_header_id
			and  pnl_as_of_date=''' + @as_of_date + '''
			and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

		EXEC spa_print  @st1
		--return
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
			IF @@rowcount < 100000 BREAK;
		END

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Deleting from source_deal_pnl_tou*****************************'	
		END

		set @st1 = 
		'DELETE  TOP(100000) source_deal_pnl_rec
		from ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_rec') +  ' rec 
		inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=rec.source_deal_header_id
			and pnl_as_of_date=''' + @as_of_date + '''
			and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

		EXEC spa_print  @st1
		--return
		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
			IF @@rowcount < 100000 BREAK;
		END

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Deleting from source_deal_pnl_rec*****************************'	
		END

	END

	If @save_pnl_option = 20 AND @calc_type='m'
	BEGIN
		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		--Delete from settlement table for non lagging deals
		set @st1 = 
		'DELETE top(100000) source_Deal_pnl_settlement 
		from source_Deal_pnl_settlement source_Deal_pnl 
			inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=source_Deal_pnl.source_deal_header_id
					and nonnull.term_start=source_Deal_pnl.term_start and nonnull.term_end=source_Deal_pnl.term_end
		and  pnl_as_of_date<=''' + @as_of_date + '''
		and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

		EXEC spa_print  @st1
		--return

		WHILE 1 = 1
		BEGIN
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
			IF @@rowcount < 100000 BREAK;
		END

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Deleting from source_deal_pnl_settlement for non lagging deals*****************************'	
		END

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end


		select #temp_deals.source_deal_header_id, 
				coalesce(sddl.term_start_leg1, #temp_Deals.term_start) term_start, 
		coalesce(sddl.term_end_leg1, #temp_deals.term_end) term_end
		INTO #tmp_delete
		from #temp_leg_mtm #temp_deals left outer join
			source_deal_detail_lagging sddl ON sddl.source_deal_header_id = #temp_Deals.source_deal_header_id 
						AND sddl.term_start = #temp_Deals.term_start	AND	sddl.leg = #temp_Deals.leg 
			where isnull(internal_deal_subtype_value_id, -1) = 12
			group by #temp_deals.source_deal_header_id, 
				coalesce(sddl.term_start_leg1, #temp_Deals.term_start),
				coalesce(sddl.term_end_leg1, #temp_deals.term_end)
			having sum(leg_mtm) IS NOT NULL

		create INDEX indx_tmp_delete ON  #tmp_delete(source_deal_header_id,term_start,term_end)
		--Delete from settlement table for lagging deals
		set @st1 = 
		'delete top(100000) source_Deal_pnl_settlement 
		from source_Deal_pnl_settlement source_Deal_pnl 
		inner join  #tmp_delete  nonnull 
		ON	nonnull.source_deal_header_id=source_Deal_pnl.source_deal_header_id
					and nonnull.term_start=source_Deal_pnl.term_start and nonnull.term_end=source_Deal_pnl.term_end
		and  pnl_as_of_date<=''' + @as_of_date + '''
		and pnl_source_value_id= ' + cast(@pnl_source_value_id as varchar) 

		EXEC spa_print  @st1
		--return
		If @lagging_deals_12 = 1
		BEGIN
			WHILE 1 = 1
			BEGIN
				exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
				IF @@rowcount < 100000 BREAK;
			END
		end

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Deleting from source_deal_pnl_settlement for non lagging deals*****************************'	
		END

	END



	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--delete prior basis adjustments calculation
	If @internal_deal_type_Debt_7 = 1
	begin
		delete basis_adjustments
		from basis_adjustments ba INNER JOIN
		#basis_adjustments tba ON tba.as_of_date = ba.as_of_date AND
						tba.source_deal_header_id = ba.source_deal_header_id
	end


	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Deleting from basis_adjustments*****************************'	
	END


	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--delete prior interest expense calcuations
	If @internal_deal_type_Debt_7 = 1 OR @internal_deal_type_IR_6 = 1 
	begin
		delete interest_expense
		from interest_expense ie INNER JOIN
		#interest_expense tie ON tie.as_of_date = ie.as_of_date AND
						tie.source_deal_header_id = ie.source_deal_header_id
	end

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Deleting from interest_expense*****************************'	
	END

	If @@ERROR <> 0
	BEGIN
		--**ERROR**
		INSERT INTO #calc_status
			Select @process_id,'Error','MTM Calc','Run MTM','Application Error',
			'Failed to Delete data','Please contact technical support'
	GOTO FinalStep
	Return
	End

		---End of Delete

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	delete tlm from #temp_leg_mtm tlm  
		inner join source_deal_detail sdd on tlm.source_deal_detail_id=sdd.source_deal_detail_id
		inner join dbo.source_minor_location sml on sdd.location_id=sml.source_minor_location_id
		inner join dbo.source_major_location smjl on smjl.source_major_location_ID=sml.source_major_location_ID
			 and smjl.location_name='Generator' and tlm.leg<>1


	update #temp_leg_mtm 
	set leg_mtm=case when tlm.buy_sell_flag='s' then -1 else 1 end*
			 ((mrv.must_run_market_value-mrv.must_run_contract_value)+(mrv.dispatch_market_value-mrv.dispatch_contract_value))*isnull(sdd.multiplier,1)
		,must_run_volume=mrv.must_run_volume*isnull(sdd.multiplier,1)
		,must_run_market_value=mrv.must_run_market_value*isnull(sdd.multiplier,1)
		,must_run_contract_value=case when tlm.buy_sell_flag='b' then -1 else 1 end* mrv.must_run_contract_value*isnull(sdd.multiplier,1)
		,dispatch_volume=mrv.dispatch_volume*isnull(sdd.multiplier,1)
		,dispatch_market_value=mrv.dispatch_market_value*isnull(sdd.multiplier,1)
		,dispatch_contract_value=case when tlm.buy_sell_flag='b' then -1 else 1 end*mrv.dispatch_contract_value*isnull(sdd.multiplier,1)
		,market_value=(mrv.must_run_market_value+mrv.dispatch_market_value)*isnull(sdd.multiplier,1)
		,contract_value=case when tlm.buy_sell_flag='b' then -1 else 1 end*(mrv.must_run_contract_value+mrv.dispatch_contract_value)*isnull(sdd.multiplier,1)
		,price=case when tlm.buy_sell_flag='s' then -1 else 1 end*
			(
			 ((mrv.must_run_market_value-mrv.must_run_contract_value)+(mrv.dispatch_market_value-mrv.dispatch_contract_value))
			 /nullif(mrv.must_run_volume+mrv.dispatch_volume,0)
			 )
		,volume=case when tlm.buy_sell_flag='s' then -1 else 1 end*(mrv.must_run_volume+mrv.dispatch_volume)*isnull(sdd.multiplier,1)
		,market_price=(mrv.must_run_market_value+mrv.dispatch_market_value)/nullif(mrv.must_run_volume+mrv.dispatch_volume,0)
		,contract_price=(mrv.must_run_contract_value+mrv.dispatch_contract_value)/nullif(mrv.must_run_volume+mrv.dispatch_volume,0)
	 from  #temp_leg_mtm tlm  
		INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
			and nonnull.source_deal_detail_id=tlm.source_deal_detail_id and  tlm.leg=1
		inner join source_deal_detail sdd on tlm.source_deal_detail_id=sdd.source_deal_detail_id
	inner join #must_run_volume mrv on mrv.source_deal_detail_id=tlm.source_deal_detail_id



	update #temp_leg_mtm set 
	leg_mtm=
	case when buy_sell_flag='s' then -1* dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
		else  dbo.FNAMax(isnull(market_price,0)-isnull(contract_price,0),0) end*volume 
	
	--und_intrinsic_pnl=
	--case when tma.header_buy_sell_flag='s' then  dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
	--	else  dbo.FNAmin(isnull(market_price,0)-isnull(contract_price,0),0) end , 
	
	--und_extrinsic_pnl=
	--case when tma.header_buy_sell_flag='s' then  dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
	--	else  dbo.FNAmin(isnull(market_price,0)-isnull(contract_price,0),0) end , 	
  	
	--dis_pnl=
	--case when tma.header_buy_sell_flag='s' then  dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
	--	else  dbo.FNAmin(isnull(market_price,0)-isnull(contract_price,0),0) end ,
	 
 -- 	dis_intrinsic_pnl=
	--case when tma.header_buy_sell_flag='s' then  dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
	--	else  dbo.FNAmin(isnull(market_price,0)-isnull(contract_price,0),0) end , 
	 
	--dis_extrinisic_pnl=
	--case when tma.header_buy_sell_flag='s' then  dbo.FNAmax(isnull(contract_price,0)-isnull(market_price,0),0)
	--	else  dbo.FNAmin(isnull(market_price,0)-isnull(contract_price,0),0) end  
		
	from  #temp_leg_mtm tlm  INNER JOIN
				#ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
				and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
	WHERE  tlm.internal_deal_subtype_value_id=155 
	
	IF OBJECT_ID('tempdb..#temp_mtm_linear_asset_tou') IS NOT NULL 
	DROP TABLE #temp_mtm_linear_asset_tou
	
	select tlm.source_deal_header_id, tlm.term_start, tlm.term_end,td.header_buy_sell_flag,  
			isnull(sum(tlm.contract_value),0) + isnull(sum(tlm.accrued_interest), 0) + isnull(max(fix_charges.charges),0) AS und_pnl_set,
		case when  isnull(sum(val.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0 
		 or   td.header_buy_sell_flag='s'
		 then isnull(sum(tlm.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)
		 else 0 end  AS und_pnl, 
	case when  isnull(sum(val.leg_mtm_deal),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0 
			 or   td.header_buy_sell_flag='s'
			 then isnull(sum(tlm.leg_mtm_deal),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)
			 else 0 end  AS und_pnl_deal, 
	case when  isnull(sum(val.leg_mtm_inv),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0 
			 or   td.header_buy_sell_flag='s'
			 then isnull(sum(tlm.leg_mtm_inv),0) + isnull(sum(tlm.accrued_interest), 0)+   isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)
			 else 0 end  AS und_pnl_inv, 
		case when  isnull(sum(val.leg_mtm),0) - isnull(sum(tlm.extrinsic_value), 0) +isnull(sum(tlm.accrued_interest), 0)+ isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0 
		or   td.header_buy_sell_flag='s' then
				 isnull(sum(tlm.leg_mtm),0) - isnull(sum(tlm.extrinsic_value), 0) +isnull(sum(tlm.accrued_interest), 0)+ isnull(sum(var_charges.charges),0)
		 else 0 end AS und_intrinsic_pnl, 

		case when  isnull(sum(val.extrinsic_value), 0)+ isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0  or   td.header_buy_sell_flag='s' then
				 isnull(sum(tlm.extrinsic_value), 0)+ isnull(sum(var_charges.charges),0)
		 else 0 end  AS und_extrinsic_pnl, 

		case when  isnull(sum(val.leg_mtm * tlm.discount_factor),0) + isnull(sum(tlm.accrued_interest), 0)+ isnull(sum(var_charges.charges),0)-isnull(sum(tlm.fixed_cost),0)>0 or   td.header_buy_sell_flag='s' then
				isnull(sum(tlm.leg_mtm * tlm.discount_factor),0) + isnull(sum(tlm.accrued_interest), 0)+ isnull(sum(var_charges.charges),0)
		 else 0 end  AS dis_pnl,
		case when  isnull(sum(val.leg_mtm * tlm.discount_factor),0)-isnull(sum(tlm.fixed_cost),0) - isnull(sum(tlm.extrinsic_value), 0) +isnull(sum(tlm.accrued_interest), 0)+isnull(sum(var_charges.charges),0)>0 or   td.header_buy_sell_flag='s' then
				isnull(sum(tlm.leg_mtm * tlm.discount_factor),0) - isnull(sum(tlm.extrinsic_value), 0) +isnull(sum(tlm.accrued_interest), 0)+isnull(sum(var_charges.charges),0)
		 else 0 end  AS dis_intrinsic_pnl, 
		case when  isnull(sum(val.accrued_interest), 0)-isnull(sum(tlm.fixed_cost),0)+ isnull(sum(var_charges.charges),0)>0 or   td.header_buy_sell_flag='s' then
				isnull(sum(tlm.accrued_interest), 0)+ isnull(sum(var_charges.charges),0)
		 else 0 end +  isnull(max(fix_charges.charges),0) AS dis_extrinisic_pnl
   		,isnull(sum(tlm.market_value),0) +   isnull(sum(var_charges.charges),0) market_value
		,isnull(sum(tlm.contract_value),0) + isnull(sum(tlm.accrued_interest), 0)+  isnull(max(fix_charges.charges),0) contract_value,
		isnull(sum(fix_charges.charges),0) [Fxed Charges]
		,isnull(sum(tlm.fixed_cost),0) [Fxed Cost]
		,isnull(sum(var_charges.charges),0) [Variable Charges]
		,tlm.tou_id
	into #temp_mtm_linear_asset_tou -- select * from #temp_mtm_linear_asset
	from  #temp_leg_mtm tlm  
	INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
		and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
	inner join #temp_deals td on td.source_deal_detail_id=tlm.source_deal_detail_id
	outer apply (select SUM(leg_mtm) leg_mtm,	
						SUM(leg_mtm_deal) leg_mtm_deal,	
						SUM(leg_mtm_inv) leg_mtm_inv,	
						SUM(leg_set) leg_set,
						SUM(leg_set_deal) leg_set_deal,	
						SUM(leg_set_inv) leg_set_inv,
						SUM(accrued_interest) accrued_interest,
						SUM(extrinsic_value) extrinsic_value,
						SUM(extrinsic_value_deal) extrinsic_value_deal
					from #temp_leg_mtm tlm1
					where tlm1.source_deal_detail_id = tlm.source_deal_detail_id) val
	outer apply
			( 
		select (case when tlm.pay_opposite='n' then 1 else -1 end	
			 * case when td.header_buy_sell_flag='b'  then 1 else -1 end 
			)	
			* sum(value) charges 
			from  #fees_breakdown where source_deal_header_id=tlm.source_deal_header_id and term_start=tlm.term_start
					and internal_type in (18725,18726)	 and leg=tlm.leg
		) var_charges
	 			outer apply
			( select 	(case when tlm.pay_opposite='n' then 1 else -1 end	*	case when td.header_buy_sell_flag='b'  then 1 else -1 end 
			)	
			* sum(value) charges 
				from  #fees_breakdown where source_deal_header_id=tlm.source_deal_header_id and term_start=tlm.term_start
					and internal_type in (18728,18727,18729) and leg=tlm.leg
		) fix_charges
	WHERE  tlm.internal_deal_type_value_id IN(103,11) and  tlm.internal_deal_subtype_value_id <>102
	GROUP BY tlm.source_deal_header_id, tlm.term_start, tlm.term_end,  td.header_buy_sell_flag, tlm.tou_id

	select 
		source_deal_header_id
		,term_start
		,term_end
		,header_buy_sell_flag
		,SUM(und_pnl_set) und_pnl_set
		,SUM(und_pnl) und_pnl
		,SUM(und_pnl_deal) und_pnl_deal
		,SUM(und_pnl_inv) und_pnl_inv
		,SUM(und_intrinsic_pnl) und_intrinsic_pnl
		,SUM(und_extrinsic_pnl) und_extrinsic_pnl
		,SUM(dis_pnl) dis_pnl
		,SUM(dis_intrinsic_pnl) dis_intrinsic_pnl
		,SUM(dis_extrinisic_pnl) dis_extrinisic_pnl
		,SUM(market_value) market_value
		,SUM(contract_value) contract_value
		,SUM([Fxed Charges]) [Fxed Charges]
		,SUM([Fxed Cost]) [Fxed Cost]
		,SUM([Variable Charges]) [Variable Charges]
		,NULL tou_id
	into #temp_mtm_linear_asset
	from #temp_mtm_linear_asset_tou
	group by source_deal_header_id, term_start, term_end, header_buy_sell_flag


	delete tlm from  #temp_leg_mtm tlm   -- calculate only option premiun fees 
		 INNER JOIN #temp_deals td ON td.source_deal_detail_id = tlm.source_deal_detail_id
	where isnull(td.option_flag,'n')='y' and ( td.internal_deal_type_value_id in (1,2) and  td.internal_deal_subtype_value_id in (1,2))
		and @calc_type='s'


	--Non lagging deals
	set @st1 = 
	'insert into  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_Deal_pnl') +  ' (source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
		und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, 
		dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
		pnl_adjustment_value, deal_volume, create_user, create_ts, update_user, update_ts, und_pnl_set,
		market_value, contract_value, dis_market_value,dis_contract_value
		,must_run_volume,dispatch_volume,must_run_market_value,must_run_contract_value,dispatch_market_value,dispatch_contract_value
		,und_pnl_deal,und_pnl_inv ,deal_cur_id , inv_cur_id, mw_position 
	)
	select tlm.source_deal_header_id, tlm.term_start, tlm.term_end, 
		1 AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
		 case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
			dbo.FNAmax(isnull( max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0) end AS und_pnl, 
		case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
			dbo.FNAMax(isnull(max(tma.und_intrinsic_pnl) ,0),0) 
			+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm),0) - isnull(sum(tlm.extrinsic_value), 0) + isnull(sum(tlm.accrued_interest), 0) end  AS und_intrinsic_pnl, 
		case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
			dbo.FNAMax(isnull(max(tma.und_extrinsic_pnl) ,0),0)  
			+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.extrinsic_value), 0) end AS und_extrinsic_pnl, 	
  		case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				dbo.FNAMax(isnull(max(tma.dis_pnl),0),0) 
				+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0) 
		else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0) + isnull(sum(tlm.accrued_interest), 0) end  AS dis_pnl, 
  		case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
			 dbo.FNAMax(isnull(max(tma.dis_intrinsic_pnl),0),0)  
			 +  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0) - isnull(sum(tlm.extrinsic_value), 0) +isnull(sum(tlm.accrued_interest), 0) end  AS dis_intrinsic_pnl, 
																		'
	set   @sqlstmt='	case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				dbo.FNAMax(isnull(max(tma.dis_extrinisic_pnl),0),0)  
				+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
			else  isnull(sum(tlm.accrued_interest), 0) end  AS dis_extrinisic_pnl, 
		''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, 
			max(tlm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			sum(tlm.volume) deal_volume, ''' +
			@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then isnull(max(tma.und_pnl_set)	,0) ELSE sum(tlm.leg_set) + isnull(sum(tlm.accrued_interest), 0) END AS und_pnl_set,
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				isnull(max(tma.market_value)	,0)
			else  isnull(sum(tlm.market_value),0) end  AS market_value,
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				isnull(max(tma.contract_value)	,0)
			else  isnull(sum(tlm.contract_value),0) + isnull(sum(tlm.accrued_interest), 0) end  AS contract_value
			,isnull(sum(tlm.market_value*tlm.discount_factor),0) dis_market_value
			,isnull(sum(tlm.contract_value*tlm.discount_factor),0) + isnull(sum(tlm.accrued_interest), 0) dis_contract_value
			,sum(tlm.must_run_volume) must_run_volume
			,sum(tlm.dispatch_volume) dispatch_volume
			,sum(tlm.must_run_market_value) must_run_market_value
			,sum(tlm.must_run_contract_value) must_run_contract_value
			,sum(tlm.dispatch_market_value) dispatch_market_value
			,sum(tlm.dispatch_contract_value) dispatch_contract_value
			,case when max(tlm.internal_deal_type_value_id)=103 and max(tlm.internal_deal_subtype_value_id)<>102 then 
			case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl_deal),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl_deal),0),0) end  
			+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm_deal),0) + isnull(sum(tlm.accrued_interest), 0) end AS und_pnl_deal
		,case when max(tlm.internal_deal_type_value_id)=103 and max(tlm.internal_deal_subtype_value_id)<>102 then 
			case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl_inv),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl_inv),0),0) end  
			+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm_inv),0) + isnull(sum(tlm.accrued_interest), 0) end AS und_pnl_inv, 
		max(deal_cur_id) , max(inv_cur_id),
		sum(tlm.volume)/nullif(MAX(mul.volume_mult),0) mw_position
		 from  #temp_leg_mtm tlm  
		 INNER JOIN #temp_deals td ON td.source_deal_detail_id = tlm.source_deal_detail_id
			AND ISNULL(tlm.state_value_id, -1) = ISNULL(td.state_value_id, -1)
			AND ISNULL(tlm.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
			and td.mtm_sett_calc=1
		 LEFT JOIN #vwDealTimezone tz ON tz.source_deal_header_id = td.source_deal_header_id
			AND tz.curve_id = isnull(td.curve_id, -1)  
			AND tz.location_id = isnull(td.location_id, -1)
		 INNER JOIN #ok_deals nonnull ON nonnull.source_deal_header_id=tlm.source_deal_header_id 
			and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
		 left join #temp_mtm_linear_asset tma on  tlm.source_deal_header_id=tma.source_deal_header_id	and  tlm.term_start=tma.term_start and  tlm.term_end =tma.term_end
		OUTER APPLY(SELECT 
						NULLIF(SUM(volume_mult), 0) volume_mult
					FROM hour_block_term 
					WHERE block_define_id = ' + CAST(@baseload_block_definition AS VARCHAR) + '
						AND dst_group_value_id = ISNULL(tz.dst_group_value_id, ' + @default_dst_group + ')
						AND term_date BETWEEN td.term_start AND td.term_end and term_date>'''+@as_of_date +''') mul
		WHERE isnull(tlm.internal_deal_subtype_value_id, -1) <> 12	 
		GROUP BY tlm.source_deal_header_id, tlm.term_start, tlm.term_end , tma.header_buy_sell_flag
				 
		'

  EXEC spa_print  @st1 
  EXEC spa_print  @sqlstmt

--18725	18700	Fuel based variable charge
--18726	18700	Variable Charges
--18728	18700	Fixed Charges

	-- select * from #temp_leg_mtm
	-- select * from #ok_deals
	-- select * from #fees_breakdown

	exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 +@sqlstmt)	

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting final values in to source_deal_pnl for Non lagging deals*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	SELECT DISTINCT a.source_deal_header_id,
			a.source_deal_detail_id,	
			a.internal_deal_type_value_id,
			a.term_start,
			a.term_end, mul.volume_mult
			,a.counterparty_id,a.contract_id
	into #tmp_deal_vol_mult
	FROM #temp_deals a
		LEFT JOIN #vwDealTimezone tz ON tz.source_deal_header_id = a.source_deal_header_id
			AND tz.curve_id = isnull(a.curve_id, -1) AND tz.location_id = isnull(a.location_id, -1)
		OUTER APPLY(
			SELECT 
				NULLIF(SUM(volume_mult), 0) volume_mult
			FROM hour_block_term 
			WHERE block_define_id = @baseload_block_definition
				AND dst_group_value_id = ISNULL(tz.dst_group_value_id, @default_dst_group) 
				AND term_date BETWEEN a.term_start AND a.term_end and term_date>@as_of_date 
		) mul		

	select f.as_of_date, f.source_deal_header_id, f.leg, f.term_start, f.term_end, f.field_id, f.field_name
		, sum(f.price) price,sum(f.total_price) total_price, sum(f.volume) volume, 
		   --sum(f.value) value, 
		   case when max(td.internal_deal_type_value_id) IN (11) AND f.internal_type IN(18725,18726) THEN 
			CASE WHEN case when tma.header_buy_sell_flag='s' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  +   isnull(min(tma.[Fxed Cost]),0)=0 THEN 0 ELSE SUM(f.value) END 
		ELSE SUM(f.value) END [value], sum(f.contract_value) contract_value, 
		f.internal_type, f.tab_group_name, f.udf_group_name,max(f.sequence) sequence
		, max(f.fee_currency_id) fee_currency_id
		, max(f.currency_id) currency_id,@user_id create_user, GETDATE() create_ts,f.contract_mkt_flag
		,sum(f.value_deal) value_deal, sum(f.value_inv) value_inv 
		,max(f.deal_cur_id) deal_cur_id, max(f.inv_cur_id) inv_cur_id
		,sum(f.volume)/nullif(MAX(td.volume_mult),0) mw_position
		,max(isnull(f.counterparty_id,td.counterparty_id)) counterparty_id,max(isnull(f.contract_id,td.contract_id)) contract_id
		--,MAX(td.volume_mult) volume_mult
	into #index_fees_breakdown0001 -- select * from drop table #index_fees_breakdown0001
	from   #fees_breakdown f 
	left JOIN #tmp_deal_vol_mult td ON td.source_deal_detail_id=f.source_deal_detail_id 
	LEFT JOIN #temp_mtm_linear_asset tma on  td.source_deal_header_id=tma.source_deal_header_id	and  td.term_start=tma.term_start 
		and  td.term_end =tma.term_end
	outer apply
	(
		select top(1) source_deal_header_id from #ok_deals where source_deal_header_id=f.source_deal_header_id 
			and (source_deal_detail_id= f.source_deal_detail_id or f.internal_type=18722)

	) nonnull
	WHERE f.value IS NOT NULL	and nonnull.source_deal_header_id is not null	
	and (@as_of_date between f.term_start and f.term_end-1 or f.term_start>=@as_of_date)--taking fees of same as_of_date month =term_start										
	group by f.as_of_date, f.source_deal_header_id, f.term_start, f.term_end, f.field_id, f.field_name,
			f.internal_type, f.tab_group_name, f.udf_group_name,f.leg,tma.header_buy_sell_flag,f.contract_mkt_flag

	--	 option(maxdop 10, maxrecursion 32767)


	INSERT INTO index_fees_breakdown	
	(
		as_of_date,
		source_deal_header_id,
		leg,
		term_start,
		term_end,
		field_id,
		field_name,
		price,
		total_price,
		volume,
		value,
		contract_value,
		internal_type,
		tab_group_name,
		udf_group_name,
		sequence,
		fee_currency_id,
		currency_id,
		create_user,
		create_ts,
		contract_mkt_flag,
		value_deal, 
		value_inv,
		deal_cur_id,
		inv_cur_id,
		mw_position,counterparty_id,contract_id
	)		
	select distinct ifb.* 
	from #index_fees_breakdown0001 ifb
	
	
	
	--INNER JOIN #temp_deals td ON td.source_deal_header_id = ifb.source_deal_header_id
	--	AND td.term_start = ifb.term_start
	--	AND td.term_end = ifb.term_end
	--LEFT JOIN dbo.vwDealTimezoneContract tz ON tz.source_deal_header_id = td.source_deal_header_id
	--	AND tz.curve_id = isnull(td.curve_id, -1)  
	--	AND tz.location_id = isnull(td.location_id, -1)
	--OUTER APPLY(
	--	SELECT 
	--		NULLIF(SUM(volume_mult), 0) volume_mult
	--	FROM hour_block_term 
	--	WHERE block_define_id = @baseload_block_definition
	--		AND dst_group_value_id = ISNULL(tz.dst_group_value_id, @default_dst_group) 
	--		AND term_date BETWEEN td.term_start AND td.term_end and term_date>@as_of_date 
	--) mul		




--select * from #index_fees_breakdown0001
--select * from #temp_deals








	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting final values in to index_fees_breakdown*****************************'	
	END


	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end




	--lagging deals
	set @st1 = 
	'insert into  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_Deal_pnl') +  ' (source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
			und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
			pnl_adjustment_value, deal_volume, create_user, create_ts, update_user, update_ts, und_pnl_set,market_value
			, contract_value, dis_market_value,dis_contract_value,must_run_volume,dispatch_volume,must_run_market_value,must_run_contract_value,dispatch_market_value,dispatch_contract_value,und_pnl_deal,und_pnl_inv ,deal_cur_id , inv_cur_id )
	select tlm.source_deal_header_id, tlm.term_start term_start, coalesce(sddl.term_end_leg1, tlm.term_end) term_end, 1 AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
		isnull(sum(tlm.leg_mtm * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)),0) + 
		isnull(sum( tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_pnl, 
		sum(tlm.leg_mtm * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)) - 
			isnull(sum(tlm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) +
			isnull(sum(tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_intrinsic_pnl, 
		isnull(sum(tlm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_extrinsic_pnl, 
		sum(tlm.leg_mtm * tlm.discount_factor * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)) + 
		isnull(sum( tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS dis_pnl, 
		sum(tlm.leg_mtm * tlm.discount_factor * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)) - 
			isnull(sum(tlm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) +
			isnull(sum(tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS dis_intrinsic_pnl, 
		isnull(sum(tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS dis_extrinisic_pnl, --accrued interest
		''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, 
		max(tlm.func_cur_id)  pnl_currency_id, 
		1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
		sum(CASE WHEN(tlm.leg=1) then tlm.volume else 0 end) deal_volume, ''' +	@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
		sum(tlm.leg_set * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)) + 
		isnull(sum( tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_pnl_set,
		null, null, null, null
		,sum(tlm.must_run_volume) must_run_volume,sum(tlm.dispatch_volume) dispatch_volume
		,sum(tlm.must_run_market_value) must_run_market_value,sum(tlm.must_run_contract_value) must_run_contract_value
		,sum(tlm.dispatch_market_value) dispatch_market_value,sum(tlm.dispatch_contract_value) dispatch_contract_value
		,und_pnl_deal=isnull(sum(tlm.leg_mtm_deal * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)),0) + 
			isnull(sum( tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0)
		,und_pnl_inv=isnull(sum(tlm.leg_mtm_inv * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)),0) + 
			isnull(sum( tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0)
		 ,isnull(sum(tlm.leg_mtm_deal * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)),0) + 
			isnull(sum(tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_pnl_deal
		 ,isnull(sum(tlm.leg_mtm_inv * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)),0) + 
			isnull(sum(tlm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(tlm.volume), 0), 1)), 0) AS und_pnl_inv
		 , max(tlm.deal_cur_id) , max(tlm.inv_cur_id)
	from  #temp_leg_mtm tlm INNER JOIN
		#ok_deals nonnull ON nonnull.source_deal_header_id=tlm.source_deal_header_id and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
		and nonnull.mtm_sett_calc=1
		 --#ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id  and nonnull.term_start=tlm.term_start and nonnull.term_end=tlm.term_end  	
	LEFT OUTER JOIN source_deal_detail_lagging sddl ON sddl.source_deal_header_id = tlm.source_deal_header_id
		AND sddl.leg = tlm.leg AND sddl.term_start = tlm.term_start
	WHERE isnull(tlm.internal_deal_subtype_value_id, -1) = 12 
	GROUP BY tlm.source_deal_header_id, tlm.term_start, coalesce(sddl.term_end_leg1, tlm.term_end)--, tlm.internal_deal_type_value_id
'

	If @lagging_deals_12 = 1
		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )	

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting final values in to source_deal_pnl for Lagging deals*****************************'	
	END


	If @save_pnl_option = 0
	BEGIN

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		set @st1 = 
			'
			insert into  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_detail') 
			+'(
				source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
				und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, dis_extrinisic_pnl, pnl_source_value_id
				, pnl_currency_id, pnl_conversion_factor, pnl_adjustment_value, deal_volume,curve_id, accrued_interest, price
				, discount_rate, no_days_left, days_year, discount_factor,create_user, create_ts, update_user, update_ts,
				curve_as_of_date, internal_deal_type_value_id, internal_deal_subtype_value_id, curve_uom_conv_factor
				, curve_fx_conv_factor,price_fx_conv_factor, curve_value, fixed_cost, fixed_price, formula_value, price_adder
				, price_multiplier, strike_price, buy_sell_flag,expired_term, und_pnl_set, fixed_cost_fx_conv_factor
				, formula_fx_conv_factor, price_adder1_fx_conv_factor, price_adder2_fx_conv_factor,volume_multiplier
				, volume_multiplier2, price_adder2, pay_opposite,market_value, contract_value, dis_market_value,dis_contract_value,must_run_volume,dispatch_volume,must_run_market_value,must_run_contract_value,dispatch_market_value,dispatch_contract_value
				,und_pnl_deal,und_pnl_inv,deal_cur_id ,inv_cur_id, mw_position 
			)
			select tlm.source_deal_header_id, tlm.term_start, tlm.term_end, tlm.leg AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
   				 case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					dbo.FNAmax(isnull( max(tma.und_pnl),0),0)+isnull(min(tma.[Fxed Cost]),0)
				else isnull(sum(tlm.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0) end AS und_pnl, 
							
			  case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					dbo.FNAmax(isnull( max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm),0)- isnull(SUM(tlm.extrinsic_value), 0) + isnull(sum(tlm.accrued_interest), 0) end AS und_intrinsic_pnl, 

			  case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					dbo.FNAmax(isnull(max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.extrinsic_value),0) end AS und_extrinsic_pnl, 

			  case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					dbo.FNAmax(isnull( max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_pnl,   				
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)- isnull(SUM(tlm.extrinsic_value), 0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_intrinsic_pnl, 
			  case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					dbo.FNAmax(isnull( max(tma.und_pnl),0),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.accrued_interest),0) end AS dis_extrinisic_pnl, 
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id,'

		set @sqlstmt=' 
			max(tlm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			sum(tlm.volume) deal_volume, max(tlm.curve_id), max(tlm.accrued_interest), 
			abs((ISNULL(sum(tlm.leg_mtm), 0) + isnull(sum(tlm.accrued_interest), 0))/ISNULL(NULLIF(sum(tlm.volume),0),1)) price, 
			max(tlm.discount_rate), max(tlm.no_days_left), 
			max(tlm.days_year), max(tlm.discount_factor), ''' +
			@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
			max(tlm.curve_as_of_date), 
			max(tlm.internal_deal_type_value_id), 
			max(tlm.internal_deal_subtype_value_id), 
			max(tlm.curve_uom_conv_factor), 
			max(tlm.curve_fx_conv_factor),
			max(tlm.price_fx_conv_factor), 
			CASE WHEN sum(tlm.volume) <> 0 THEN 
				sum(tlm.curve_value*tlm.volume)/nullif(sum(tlm.volume),0)
			ELSE max(tlm.curve_value) END,
			max(tlm.fixed_cost), 
			max(tlm.fixed_price), 
			CASE WHEN sum(tlm.volume) <> 0 THEN 
				sum(tlm.formula_value*tlm.volume)/nullif(sum(tlm.volume),0)
			ELSE max(tlm.formula_value) END,
			max(tlm.price_adder), 
			max(tlm.price_multiplier), 
			max(tlm.strike_price), 
			max(tlm.buy_sell_flag),
			max(tlm.expired_term),
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_type_value_id)<>102 then isnull(max(tma.und_pnl_set)	,0) ELSE sum(tlm.leg_set) END,
			max(tlm.fixed_cost_fx_conv_factor), max(tlm.formula_fx_conv_factor), max(tlm.price_adder1_fx_conv_factor), 
			max(tlm.price_adder2_fx_conv_factor), max(tlm.volume_multiplier), max(tlm.volume_multiplier2), 
			max(tlm.price_adder2), max(tlm.pay_opposite)
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_type_value_id)<>102 then
					max(tma.market_value) else sum(tlm.market_value) end market_value
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_type_value_id)<>102 then
				max(tma.contract_value) else sum(tlm.contract_value) end contract_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) and max(tlm.internal_deal_type_value_id)<>102 then
					max(tma.market_value) else sum(tlm.market_value) end *max(tlm.discount_factor) dis_market_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) and max(tlm.internal_deal_type_value_id)<>102 then
				max(tma.contract_value) else sum(tlm.contract_value) end*max(tlm.discount_factor) dis_contract_value
			,sum(tlm.must_run_volume) must_run_volume
			,sum(tlm.dispatch_volume) dispatch_volume,sum(tlm.must_run_market_value) must_run_market_value
			,sum(tlm.must_run_contract_value) must_run_contract_value,sum(tlm.dispatch_market_value) dispatch_market_value
			,sum(tlm.dispatch_contract_value) dispatch_contract_value	
			,und_pnl_deal=case when max(tlm.internal_deal_type_value_id)=103 and max(tlm.internal_deal_type_value_id)<>102 then 
						case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl_deal),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl_deal),0),0) end  
						+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
					else  isnull(sum(tlm.leg_mtm_deal),0) + isnull(sum(tlm.accrued_interest), 0) end
			,und_pnl_inv=case when max(tlm.internal_deal_type_value_id)=103 and max(tlm.internal_deal_type_value_id)<>102 then 
			case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl_inv),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl_inv),0),0) end  
			+  isnull(min(tma.[fxed charges]),0)+ isnull(min(tma.[Fxed Cost]),0)
		else  isnull(sum(tlm.leg_mtm_inv),0) + isnull(sum(tlm.accrued_interest), 0) end
			,max(tlm.deal_cur_id) ,max(tlm.inv_cur_id),
			sum(tlm.volume)/nullif(MAX(mul.volume_mult),0) mw_position 
			from  #temp_leg_mtm tlm 
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = tlm.source_deal_detail_id
				AND ISNULL(tlm.state_value_id, -1) = ISNULL(td.state_value_id, -1)
				AND ISNULL(tlm.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
				and td.mtm_sett_calc=1
			LEFT JOIN dbo.vwDealTimezoneContract tz ON tz.source_deal_header_id = td.source_deal_header_id
				AND tz.curve_id = isnull(td.curve_id, -1) AND tz.location_id = isnull(td.location_id, -1)
			INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
				and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
			left join #temp_mtm_linear_asset tma on  tlm.source_deal_header_id=tma.source_deal_header_id	
				and  tlm.term_start=tma.term_start and  tlm.term_end =tma.term_end and tlm.leg=1
			OUTER APPLY(
				SELECT NULLIF(SUM(volume_mult), 0) volume_mult FROM hour_block_term 
						WHERE block_define_id = ' + CAST(@baseload_block_definition AS VARCHAR) + '
							AND dst_group_value_id = ISNULL(tz.dst_group_value_id, ' + @default_dst_group + ') 
					AND term_date BETWEEN td.term_start AND td.term_end and term_date>'''+@as_of_date +'''
			) mul
			GROUP BY tlm.source_deal_header_id, tlm.term_start,  tlm.term_end, tlm.leg ,tma.header_buy_sell_flag
				'
		exec spa_print @st1
		exec spa_print @sqlstmt

		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1+@sqlstmt)

		--Updated delta value for non-option deals which has internal_deal_type_value_id = 11 and internal_deal_subtype_value_id = 102
		UPDATE sdpdo SET 
			sdpdo.deal_volume = CASE WHEN sdpdo.internal_deal_type_value_id = 11 THEN sdpdo.deal_volume ELSE sdpd.deal_volume END,
			sdpdo.delta = CASE WHEN sdpdo.internal_deal_type_value_id = 11 THEN 
								CASE WHEN sdpd.leg = 1 AND sdpd.und_pnl > 0 THEN 1 ELSE 0 END
						ELSE
							CASE WHEN sdpd.und_pnl > 0 THEN 1 ELSE 0 END
						END,
			sdpdo.delta2 = CASE WHEN sdpdo.internal_deal_type_value_id = 11 THEN 
								CASE WHEN sdpd.leg = 1 AND sdpd.und_pnl > 0 THEN 1 ELSE 0 END
						ELSE
							CASE WHEN sdpd.und_pnl > 0 THEN 1 ELSE 0 END
						END
		FROM source_deal_pnl_detail_options sdpdo
		INNER JOIN source_deal_pnl_detail sdpd ON sdpd.pnl_as_of_date = sdpdo.as_of_date
			AND sdpd.source_deal_header_id = sdpdo.source_deal_header_id
			AND sdpd.term_start = sdpdo.term_start
			AND sdpdo.internal_deal_type_value_id IN (11, 103, 165)
			AND sdpdo.internal_deal_subtype_value_id = 102

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		set @st1 = 
			'
			insert into  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_tou') 
			+'(
				source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
				und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, dis_extrinisic_pnl, pnl_source_value_id
				, pnl_currency_id, pnl_conversion_factor, pnl_adjustment_value, deal_volume,curve_id, accrued_interest, price
				, discount_rate, no_days_left, days_year, discount_factor,create_user, create_ts, update_user, update_ts,
				curve_as_of_date, internal_deal_type_value_id, internal_deal_subtype_value_id, curve_uom_conv_factor
				, curve_fx_conv_factor,price_fx_conv_factor, curve_value, fixed_cost, fixed_price, formula_value, price_adder
				, price_multiplier, strike_price, buy_sell_flag,expired_term, und_pnl_set, fixed_cost_fx_conv_factor
				, formula_fx_conv_factor, price_adder1_fx_conv_factor, price_adder2_fx_conv_factor,volume_multiplier
				, volume_multiplier2, price_adder2, pay_opposite,market_value, contract_value, dis_market_value,dis_contract_value
				,must_run_volume,dispatch_volume,must_run_market_value,must_run_contract_value,dispatch_market_value,dispatch_contract_value
				,und_pnl_deal,und_pnl_inv,deal_cur_id ,inv_cur_id, mw_position ,tou_id
			)
			select tlm.source_deal_header_id, tlm.term_start, tlm.term_end, tlm.leg AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
   			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				isnull(max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
			else  
				isnull(sum(tlm.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0) 
			end AS und_pnl,		
			 case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
					isnull(max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm),0)- isnull(SUM(tlm.extrinsic_value), 0) + isnull(sum(tlm.accrued_interest), 0) end AS und_intrinsic_pnl, 
			 case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				  isnull(max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.extrinsic_value),0) end AS und_extrinsic_pnl, 
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				 isnull( max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_pnl,   				
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				isnull(max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)- isnull(SUM(tlm.extrinsic_value), 0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_intrinsic_pnl, 
			 case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then 
				isnull( max(tma.und_pnl),0) + isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.accrued_interest),0) end AS dis_extrinisic_pnl, 
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id,'

		set @sqlstmt=' 
			max(tlm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			max(tlm.volume) deal_volume, max(tlm.curve_id), max(tlm.accrued_interest), 
			abs((ISNULL(sum(tlm.leg_mtm), 0) + isnull(sum(tlm.accrued_interest), 0))/ISNULL(NULLIF(sum(tlm.volume),0),1)) price, 
			max(tlm.discount_rate), max(tlm.no_days_left), 
			max(tlm.days_year), max(tlm.discount_factor), ''' +
			@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
			max(tlm.curve_as_of_date), 
			max(tlm.internal_deal_type_value_id), 
			max(tlm.internal_deal_subtype_value_id), 
			max(tlm.curve_uom_conv_factor), 
			max(tlm.curve_fx_conv_factor),
			max(tlm.price_fx_conv_factor), 
			SUM( tlm.volume*tlm.curve_value)/ISNULL(NULLIF(sum(tlm.volume), 0), 1)  curve_value,  
			max(tlm.fixed_cost), 
			max(tlm.fixed_price), 
			max(tlm.formula_value), 
			max(tlm.price_adder), 
			max(tlm.price_multiplier), 
			max(tlm.strike_price), 
			max(tlm.buy_sell_flag),
			max(tlm.expired_term),
			case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then isnull(max(tma.und_pnl_set)	,0) ELSE max(tlm.leg_set) END,
			max(tlm.fixed_cost_fx_conv_factor), max(tlm.formula_fx_conv_factor), max(tlm.price_adder1_fx_conv_factor), 
			max(tlm.price_adder2_fx_conv_factor), max(tlm.volume_multiplier), max(tlm.volume_multiplier2), 
			max(tlm.price_adder2), max(tlm.pay_opposite)
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then
				max(tma.market_value) else max(tlm.market_value) end market_value
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then
				max(tma.contract_value) else max(tlm.contract_value) end contract_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then
				max(tma.market_value) else max(tlm.market_value) end *max(tlm.discount_factor) dis_market_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) and max(tlm.internal_deal_subtype_value_id)<>102 then
				max(tma.contract_value) else max(tlm.contract_value) end*max(tlm.discount_factor) dis_contract_value
			,sum(tlm.must_run_volume) must_run_volume
			,sum(tlm.dispatch_volume) dispatch_volume,sum(tlm.must_run_market_value) must_run_market_value
			,sum(tlm.must_run_contract_value) must_run_contract_value,sum(tlm.dispatch_market_value) dispatch_market_value
			,sum(tlm.dispatch_contract_value) dispatch_contract_value	
			,und_pnl_deal=max(case when tlm.internal_deal_type_value_id=103 and (tlm.internal_deal_subtype_value_id)<>102  then 
						isnull(tma.und_pnl_deal,0) + isnull(tma.[fxed charges],0)+ isnull(tma.[Fxed Cost],0)
					else  isnull(tlm.leg_mtm_deal,0) + isnull(tlm.accrued_interest, 0) end)
			,und_pnl_inv=max(case when tlm.internal_deal_type_value_id=103 and tlm.internal_deal_subtype_value_id<>102  then 
								isnull(tma.und_pnl_inv,0) + isnull(tma.[fxed charges],0)+ isnull(tma.[Fxed Cost],0)
							else  isnull(tlm.leg_mtm_inv,0) + isnull(tlm.accrued_interest, 0) end)
			,max(tlm.deal_cur_id) ,max(tlm.inv_cur_id),
			MAX(tlm.mw_position) AS mw_position,
			mul.block_define_id
			from  #temp_leg_mtm tlm 
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = tlm.source_deal_detail_id
				and td.mtm_sett_calc=1
			INNER JOIN dbo.vwDealTimezoneContract tz ON tz.source_deal_header_id = td.source_deal_header_id
				AND tz.curve_id = isnull(td.curve_id, -1)  
				AND tz.location_id = isnull(td.location_id, -1)
			INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
				and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
			left join #temp_mtm_linear_asset_tou tma on  tlm.source_deal_header_id=tma.source_deal_header_id	
				and  tlm.term_start=tma.term_start and  tlm.term_end =tma.term_end and tlm.leg=1
				and tma.tou_id = tlm.tou_id
			left join source_price_curve_def spcd on spcd.source_curve_def_id=tlm.curve_id
			OUTER APPLY(
				SELECT a.block_define_id,NULLIF(SUM(volume_mult), 0) volume_mult FROM hour_block_term a 
				inner join #block_type_group btg
					on a.block_define_id = btg.hourly_block_id AND a.dst_group_value_id = tz.dst_group_value_id 
						and spcd.udf_block_group_id=block_type_group_id
						and btg.row_id=tlm.tou_id AND a.term_date BETWEEN td.term_start AND td.term_end and term_date>'''+@as_of_date +'''
				group by a.block_define_id
			) mul
			where tlm.calc_mtm_at_tou_level=''y'' and mul.block_define_id is not null
			GROUP BY tlm.source_deal_header_id, tlm.term_start,tlm.term_end, tlm.leg ,tma.header_buy_sell_flag,mul.block_define_id
				'
		exec spa_print @st1
		exec spa_print @sqlstmt

		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1+@sqlstmt )

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Inserting final values in to source_deal_pnl_detail*****************************'	
		END

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		set @st1 = 
			'
			INSERT INTO  ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_deal_pnl_rec') 
			+'(
				source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
				und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, dis_extrinisic_pnl, pnl_source_value_id
				, pnl_currency_id, pnl_conversion_factor, pnl_adjustment_value, deal_volume,curve_id, accrued_interest, price
				, discount_rate, no_days_left, days_year, discount_factor,create_user, create_ts, update_user, update_ts,
				curve_as_of_date, internal_deal_type_value_id, internal_deal_subtype_value_id, curve_uom_conv_factor
				, curve_fx_conv_factor,price_fx_conv_factor, curve_value, fixed_cost, fixed_price, formula_value, price_adder
				, price_multiplier, strike_price, buy_sell_flag,expired_term, und_pnl_set, fixed_cost_fx_conv_factor
				, formula_fx_conv_factor, price_adder1_fx_conv_factor, price_adder2_fx_conv_factor,volume_multiplier
				, volume_multiplier2, price_adder2, pay_opposite,market_value, contract_value, dis_market_value,dis_contract_value,must_run_volume
				,dispatch_volume,must_run_market_value,must_run_contract_value,dispatch_market_value,dispatch_contract_value
				,und_pnl_deal,und_pnl_inv,deal_cur_id ,inv_cur_id, mw_position, state_value_id, tier_value_id 
			)
			SELECT tlm.source_deal_header_id, tlm.term_start, tlm.term_end, tlm.leg AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
   				 case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
					case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm),0) + isnull(sum(tlm.accrued_interest), 0) end AS und_pnl, 			
			  case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
					case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm),0)- isnull(SUM(tlm.extrinsic_value), 0) + isnull(sum(tlm.accrued_interest), 0) end AS und_intrinsic_pnl, 
			  case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
					case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.extrinsic_value),0) end AS und_extrinsic_pnl, 
			case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
			case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_pnl,   				
			case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
				case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.leg_mtm * tlm.discount_factor),0)- isnull(SUM(tlm.extrinsic_value), 0)+ isnull(sum(tlm.accrued_interest), 0)  end AS dis_intrinsic_pnl, 
			  case when max(tlm.internal_deal_type_value_id) IN(103,11) then 
					case when tma.header_buy_sell_flag=''s'' then  dbo.FNAmin(isnull( min(tma.und_pnl),0),0) else  dbo.FNAmax(isnull( max(tma.und_pnl),0),0) end  
					+   isnull(min(tma.[Fxed Cost]),0)
				else  isnull(sum(tlm.accrued_interest),0) end AS dis_extrinisic_pnl, 
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id,'

		set @sqlstmt=' 
			max(tlm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			sum(tlm.volume) deal_volume, max(tlm.curve_id), max(tlm.accrued_interest), 
			abs((ISNULL(sum(tlm.leg_mtm), 0) + isnull(sum(tlm.accrued_interest), 0))/ISNULL(NULLIF(sum(tlm.volume),0),1)) price, 
			max(tlm.discount_rate), max(tlm.no_days_left), 
			max(tlm.days_year), max(tlm.discount_factor), ''' +
			@user_id + ''', GETDATE(), ''' + @user_id + ''', GETDATE(),
			max(tlm.curve_as_of_date), 
			max(tlm.internal_deal_type_value_id), 
			max(tlm.internal_deal_subtype_value_id), 
			max(tlm.curve_uom_conv_factor), 
			max(tlm.curve_fx_conv_factor),
			max(tlm.price_fx_conv_factor), 
			sum(tlm.volume*tlm.curve_value)/nullif(sum(tlm.volume),0)  curve_value, 
			max(tlm.fixed_cost), 
			max(tlm.fixed_price), 
			max(tlm.formula_value), 
			max(tlm.price_adder), 
			max(tlm.price_multiplier), 
			max(tlm.strike_price), 
			max(tlm.buy_sell_flag),
			max(tlm.expired_term),
			case when max(tlm.internal_deal_type_value_id) IN(103,11) then isnull(max(tma.und_pnl_set)	,0) ELSE max(tlm.leg_set) END,
			max(tlm.fixed_cost_fx_conv_factor), max(tlm.formula_fx_conv_factor), max(tlm.price_adder1_fx_conv_factor), 
			max(tlm.price_adder2_fx_conv_factor), max(tlm.volume_multiplier), max(tlm.volume_multiplier2), 
			max(tlm.price_adder2), max(tlm.pay_opposite)
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) then
					max(tma.market_value) else max(tlm.market_value) end market_value
			,case when max(tlm.internal_deal_type_value_id) IN(103,11) then
				max(tma.contract_value) else max(tlm.contract_value) end contract_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) then
					max(tma.market_value) else max(tlm.market_value) end *max(tlm.discount_factor) dis_market_value
			,case when max(tlm.internal_deal_type_value_id) IN (103,11) then
				max(tma.contract_value) else max(tlm.contract_value) end*max(tlm.discount_factor) dis_contract_value
			,sum(tlm.must_run_volume) must_run_volume
			,sum(tlm.dispatch_volume) dispatch_volume,sum(tlm.must_run_market_value) must_run_market_value
			,sum(tlm.must_run_contract_value) must_run_contract_value,sum(tlm.dispatch_market_value) dispatch_market_value
			,sum(tlm.dispatch_contract_value) dispatch_contract_value	
			,und_pnl_deal=max(case when tlm.internal_deal_type_value_id=103  then 
					isnull(tma.und_pnl_deal,0) + isnull(tma.[fxed charges],0)+ isnull(tma.[Fxed Cost],0)
				else  isnull(tlm.leg_mtm_deal,0) + isnull(tlm.accrued_interest, 0) end)
			,und_pnl_inv=max(case when tlm.internal_deal_type_value_id=103  then 
					isnull(tma.und_pnl_inv,0) + isnull(tma.[fxed charges],0)+ isnull(tma.[Fxed Cost],0)
				else  isnull(tlm.leg_mtm_inv,0) + isnull(tlm.accrued_interest, 0) end)
			,max(tlm.deal_cur_id) ,max(tlm.inv_cur_id),
			max(tlm.volume)/nullif(MAX(mul.volume_mult),0) mw_position,
			tlm.state_value_id, tlm.tier_value_id 
			FROM  #temp_leg_mtm tlm 
			INNER JOIN #temp_deals td ON td.source_deal_detail_id = tlm.source_deal_detail_id
				AND ISNULL(tlm.state_value_id, -1) = ISNULL(td.state_value_id, -1)
				AND ISNULL(tlm.tier_value_id, -1) = ISNULL(td.tier_value_id, -1)
				and td.mtm_sett_calc=1
			LEFT JOIN dbo.vwDealTimezoneContract tz ON tz.source_deal_header_id = td.source_deal_header_id
				AND tz.curve_id = isnull(td.curve_id, -1)  
				AND tz.location_id = isnull(td.location_id, -1)
			INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=tlm.source_deal_header_id 
				and nonnull.source_deal_detail_id=tlm.source_deal_detail_id
			LEFT JOIN #temp_mtm_linear_asset tma on  tlm.source_deal_header_id=tma.source_deal_header_id	
				and  tlm.term_start=tma.term_start and  tlm.term_end =tma.term_end and tlm.leg=1
			OUTER APPLY(
				SELECT NULLIF(SUM(volume_mult), 0) volume_mult FROM hour_block_term 
						WHERE block_define_id = ' + CAST(@baseload_block_definition AS VARCHAR) + '
							AND dst_group_value_id = ISNULL(tz.dst_group_value_id, ' + @default_dst_group + ') 
					AND term_date BETWEEN td.term_start AND td.term_end
			) mul
			WHERE tlm.state_value_id IS NOT NULL AND tlm.tier_value_id IS NOT NULL
			GROUP BY tlm.source_deal_header_id, 
				tlm.term_start, 
				tlm.term_end, 
				tlm.leg, 
				tma.header_buy_sell_flag, 
				tlm.state_value_id, 
				tlm.tier_value_id '

		exec spa_print @st1
		exec spa_print @sqlstmt

		exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1+@sqlstmt)

	END

	If @save_pnl_option = 20
	BEGIN

		--Save in settlement table
		set @st1 = 
		'insert into  source_Deal_pnl_settlement(
			source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
								und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, 
								dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
			pnl_adjustment_value, deal_volume, create_user, create_ts, update_user, update_ts, und_pnl_set
		)
		select #temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start, #temp_leg_mtm.term_end, 
			1 AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
			isnull(sum(#temp_leg_mtm.leg_mtm),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm),0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_intrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.extrinsic_value), 0) AS und_extrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor),0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_pnl, 
			isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor),0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_intrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_extrinisic_pnl, --accrued interest
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, 
			max(#temp_leg_mtm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			sum(CASE WHEN(#temp_leg_mtm.leg=1) then abs(#temp_leg_mtm.volume) else 0 end) deal_volume, ''' +
			@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
			sum(#temp_leg_mtm.leg_set) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl_set
		from  #temp_leg_mtm INNER JOIN
			#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
				and mtm_sett_calc=1
			--  and nonnull.term_start=#temp_leg_mtm.term_start and nonnull.term_end=#temp_leg_mtm.term_end  
		LEFT OUTER JOIN
			  source_deal_pnl_settlement sett on sett.source_deal_header_id = #temp_leg_mtm.source_deal_header_id and
					sett.term_start = #temp_leg_mtm.term_start and sett.term_end = #temp_leg_mtm.term_end

		where  	sett.term_start IS NULL AND #temp_leg_mtm.internal_deal_type_value_id <> 7 AND #temp_leg_mtm.internal_deal_type_value_id <> 6
				AND isnull(#temp_leg_mtm.internal_deal_subtype_value_id, -1) <> 12	
		GROUP BY 
			#temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start,  #temp_leg_mtm.term_end--, #temp_leg_mtm.internal_deal_type_value_id
		'	

		If @pnl_source_value_id = 4500
		begin
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
		end

		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Inserting final values in to source_deal_pnl_settlement for Non Lagging Deals*****************************'	
		END

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end


	--Save in settlement table for lagging
		set @st1 = 
		'insert into  source_Deal_pnl_settlement(source_deal_header_id, term_start, term_end, Leg, pnl_as_of_date, 
			und_pnl, und_intrinsic_pnl, und_extrinsic_pnl, dis_pnl, dis_intrinsic_pnl, 
			dis_extrinisic_pnl, pnl_source_value_id, pnl_currency_id, pnl_conversion_factor, 
			pnl_adjustment_value, deal_volume, create_user, create_ts, update_user, update_ts, und_pnl_set)
		select #temp_leg_mtm.source_deal_header_id, coalesce(sddl.term_start_leg1, #temp_leg_mtm.term_start), 
			coalesce(sddl.term_end_leg1, #temp_leg_mtm.term_end) term_end, 
			1 AS Leg, ''' + @as_of_date + ''' AS pnl_as_of_date, 
			sum(#temp_leg_mtm.leg_mtm * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)) + 
				isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS und_pnl, 
			sum(#temp_leg_mtm.leg_mtm * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)) - 
				isnull(sum(#temp_leg_mtm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS und_intrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS und_extrinsic_pnl, 
			sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)) + 
				isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS dis_pnl, 
			sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)) - 
				isnull(sum(#temp_leg_mtm.extrinsic_value * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS dis_intrinsic_pnl, 
			isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS dis_extrinisic_pnl, --accrued interest
			''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id, 
			max(#temp_leg_mtm.func_cur_id)  pnl_currency_id, 
			1 AS pnl_conversion_factor, 0 as pnl_adjustment_factor,
			sum(CASE WHEN(#temp_leg_mtm.leg=1) then abs(#temp_leg_mtm.volume) else 0 end) deal_volume, ''' +
			@user_id + ''', getdate(), ''' + @user_id + ''', getdate(),
			sum(#temp_leg_mtm.leg_set * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)) + 
				isnull(sum(#temp_leg_mtm.accrued_interest * isnull(sddl.volume_allocation/nullif(abs(#temp_leg_mtm.volume), 0), 1)), 0) AS und_pnl_set
		from  #temp_leg_mtm INNER JOIN #ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
		     and nonnull.mtm_sett_calc=1
			 --#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.term_start=#temp_leg_mtm.term_start and nonnull.term_end=#temp_leg_mtm.term_end 
			LEFT OUTER JOIN source_deal_detail_lagging sddl ON sddl.source_deal_header_id = #temp_leg_mtm.source_deal_header_id AND
									sddl.leg = #temp_leg_mtm.leg AND sddl.term_start = #temp_leg_mtm.term_start LEFT OUTER JOIN
			  source_deal_pnl_settlement sett on sett.source_deal_header_id = #temp_leg_mtm.source_deal_header_id and
					sett.term_start = coalesce(sddl.term_start_leg1, #temp_leg_mtm.term_start) and 
					sett.term_end = coalesce(sddl.term_end_leg1, #temp_leg_mtm.term_end)
		where  	sett.term_start IS NULL AND #temp_leg_mtm.internal_deal_type_value_id <> 7 AND #temp_leg_mtm.internal_deal_type_value_id <> 6
				AND isnull(#temp_leg_mtm.internal_deal_subtype_value_id, -1) = 12	
		GROUP BY 
				#temp_leg_mtm.source_deal_header_id,  coalesce(sddl.term_start_leg1, #temp_leg_mtm.term_start),coalesce(sddl.term_end_leg1, #temp_leg_mtm.term_end) --, #temp_leg_mtm.internal_deal_type_value_id
	'	

		If @pnl_source_value_id = 4500 AND @lagging_deals_12 = 1
		begin
			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
		end


		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Inserting final values in to source_deal_pnl_settlement for Lagging Deals*****************************'	
		END

	END


save_mtm_at_low_granularity:

	 IF EXISTS(
		SELECT 1 from #temp_deals a 
			 INNER JOIN #ok_deals nonnull ON  nonnull.source_deal_detail_id=a.source_deal_detail_id AND a.save_mtm_at_calculation_granularity='y'
			 AND @calc_settlement_adjustment = 0
	 )
	 BEGIN
	 	
		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end

		SET @sql='delete '+CASE WHEN @calc_type='m' THEN ' dbo.source_deal_pnl_breakdown ' ELSE  ' dbo.source_deal_settlement_breakdown ' END +
				' from '+CASE WHEN @calc_type='m' THEN ' dbo.source_deal_pnl_breakdown ' ELSE  ' dbo.source_deal_settlement_breakdown ' END +
				' a inner join (select distinct source_deal_header_id from #temp_deals) b
				on a.source_deal_header_id=b.source_deal_header_id and a.as_of_date='''+@as_of_date +'''
		'

		EXEC spa_print  @sql
		EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@sql )
		
		insert into #source_deal_detail_hour (source_deal_detail_id ,term_date ,hr ,is_dst , period,price )
		select sddh.source_deal_detail_id ,sddh.term_date ,cast(left(sddh.hr,2) as int) hr ,is_dst , CASE WHEN sddh.granularity IN(987,989) THEN replace(right(hr,2),':','0') ELSE 0 END period, price 
		from source_deal_detail_hour sddh
		inner join #temp_deals a  on sddh.source_deal_detail_id=a.source_deal_detail_id
			and sddh.term_date between a.term_start and a.term_end and a.save_mtm_at_calculation_granularity='y'
		INNER JOIN #ok_deals nonnull ON  nonnull.source_deal_detail_id=a.source_deal_detail_id
		

		SET @qry6f=	'insert into '+CASE WHEN @calc_type='m' THEN ' dbo.source_deal_pnl_breakdown ' ELSE  ' dbo.source_deal_settlement_breakdown ' END +' (
			source_deal_header_id,deal_id,term_start,term_end,curve_id,leg_mtm,leg_mtm_deal,leg_mtm_inv,leg_set,leg_set_deal,leg_set_inv
			,extrinsic_value_deal,accrued_interest,volume,leg,price_deal,discount_rate,no_days_left,days_year,discount_factor,expired_term
			,curve_as_of_date,internal_deal_type_value_id,internal_deal_subtype_value_id,curve_uom_conv_factor,curve_fx_conv_factor_deal
			,price_fx_conv_factor_deal,curve_value_deal,fixed_cost_deal,fixed_price_deal,formula_value_deal,price_adder_deal,price_multiplier
			,strike_price,buy_sell_flag,physical_financial_flag,fixed_cost_fx_conv_factor_deal,formula_fx_conv_factor_deal
			,price_adder1_fx_conv_factor_deal,price_adder2_fx_conv_factor_deal,volume_multiplier,volume_multiplier2,price_adder2_deal
			,pay_opposite,curve_uom_id,deal_volume_uom_id,fixed_price_currency_id,price_adder_currency,price_adder2_currency,func_cur_id
			,formula_currency,fixed_cost_currency,market_value,market_value_deal,market_value_inv,contract_value,contract_value_deal
			,contract_value_inv,simple_formula_curve_value,simple_formula_curve_value_deal,simple_formula_curve_value_inv,formula_conv_factor
			,formula_conv_factor_deal,formula_conv_factor_inv,formula_rounding,formula_id,contract_id,product_id,source_deal_detail_id
			,formula_curve_id,allocation_volume,contract_price_deal,market_price_deal,deal_volume,deal_cur_id,inv_cur_id,price,extrinsic_value
			,contract_price,market_price,price_inv,extrinsic_value_inv,contract_price_inv,market_price_inv,price_adder2_fx_conv_factor
			,price_adder1_fx_conv_factor,formula_fx_conv_factor,fixed_cost_fx_conv_factor,curve_fx_conv_factor,price_fx_conv_factor
			,price_adder2_fx_conv_factor_inv,price_adder1_fx_conv_factor_inv,formula_fx_conv_factor_inv,fixed_cost_fx_conv_factor_inv
			,curve_fx_conv_factor_inv,price_fx_conv_factor_inv,formula_value,price_adder,price_adder2,fixed_cost,fixed_price,curve_value
			,formula_value_inv,price_adder_inv,price_adder2_inv,fixed_cost_inv,fixed_price_inv,curve_value_inv,must_run_volume
			,must_run_market_value,must_run_contract_value,dispatch_volume,dispatch_market_value,dispatch_contract_value,as_of_date
			,create_ts,create_user,org_term,org_hours,org_is_dst,[period],term_date,[hours],is_dst,timezone_from_id,timezone_to_id
		)'			
		
		--timezone conversion 
		set @sqlstmt=' 
			LEFT JOIN contract_group cg  on cg.contract_id=a.contract_id
			LEFT JOIN time_zones from_tz on from_tz.TIMEZONE_ID=a.timezone_id
			outer apply
			(
				select top(1) time_zone from counterparty_contract_address
				where counterparty_id = a.counterparty_id AND contract_id = cg.contract_id
			) cca 
			--LEFT JOIN counterparty_contract_address cca ON cca.counterparty_id = a.counterparty_id AND cca.contract_id = cg.contract_id
			LEFT JOIN time_zones to_tz on to_tz.TIMEZONE_ID= ISNULL(cca.time_zone, cg.time_zone)	
			left join dbo.vwDealTimezoneContract tz on  a.source_deal_header_id=tz.source_deal_header_id
				and tz.curve_id=a.curve_id and tz.location_id=a.location_id			
			left join mv90_DST mv (nolock) on [hv].term_start=mv.[date] AND mv.insert_delete=''i'' AND [hv].[Hours]=mv.[Hour] 
				and mv.dst_group_value_id=tz.dst_group_value_id
			LEFT JOIN mv90_DST mv1 (nolock) ON [hv].term_start=mv1.[date]
				AND mv1.insert_delete=''d'' AND mv1.Hour=[hv].[Hours] and mv1.dst_group_value_id=tz.dst_group_value_id		
			LEFT JOIN mv90_DST mv2 (nolock) ON YEAR([hv].term_start)=mv2.[YEAR]
				AND mv2.insert_delete=''d'' and mv2.dst_group_value_id=tz.dst_group_value_id
			LEFT JOIN mv90_DST mv3 (nolock) ON year([hv].term_start)=mv3.[year]
					AND mv3.insert_delete=''i'' and mv3.dst_group_value_id=tz.dst_group_value_id
			outer apply		
			(
				select 	CASE WHEN mv.[date] IS NOT NULL AND isnull(from_tz.APPLY_dst,''y'')=''y'' THEN mv.Hour ELSE [hv].[Hours] END hr,
					CASE WHEN [hv].[is_dst] = 1 THEN 0 ELSE 	
					CASE WHEN CAST(convert(varchar(10),[hv].[term_start],120)+'' ''+RIGHT(''00''+CAST(CASE WHEN mv.[date] IS NOT NULL THEN mv.Hour ELSE [hv].[Hours] END -1 AS VARCHAR),2)+'':00:000'' AS DATETIME) BETWEEN CAST(convert(varchar(10),mv2.[date],120)+'' ''+CAST(mv2.Hour AS VARCHAR)+'':00:00'' AS DATETIME) 
						AND CAST(convert(varchar(10),mv3.[date],120)+'' ''+CAST(mv3.Hour-1 AS VARCHAR)+'':00:00'' AS DATETIME)
							THEN 1 ELSE 0 END 
					END AS DST 
			) hr
			OUTER APPLY 
			(
				SELECT 
					max(case when insert_delete=''d'' THEN  DATEADD(hour,[hour]-1,[date]) ELSE NULL END)  from_dst,
					max(case when insert_delete=''i'' THEN  DATEADD(hour,[hour]-1,[date]) ELSE NULL END)  to_dst
				from mv90_DST WHERE  [YEAR]=year([hv].term_start)
			) dst 
			CROSS APPLY
			(
				SELECT	convert(varchar(10),[hv].term_start,120) +'' '' +right(''0''+cast([hv].[hours]-1  AS VARCHAR),2)+'':00:00'' org_term_from
			) org_term_from
			CROSS APPLY
			(
				select DATEADD(hour,case when (org_term_from.org_term_from=to_dst and [hv].is_dst=1)  AND isnull(from_tz.APPLY_dst,''y'') =  ''y'' then -1 
				when  org_term_from.org_term_from=dateadd(hour,-1,from_dst)  AND isnull(from_tz.APPLY_dst,''y'') =  ''y'' then 1
				when  isnull(from_tz.APPLY_dst,''y'') =  ''n'' and hr.DST=0 then 1
				else 0 end, org_term_from.org_term_from) tmp_term_from
			) tmp_term_from  --- dst applied
			CROSS APPLY
			(
				SELECT	case when hr.dst=1 then 
					(case when isnull(to_tz.APPLY_dst,''y'')=''n'' then to_tz.offset_hr else to_tz.dst_offset_hr end 
					- case when isnull(from_tz.APPLY_dst,''y'')=''n'' then from_tz.offset_hr else from_tz.dst_offset_hr end )
				else ( to_tz.offset_hr-from_tz.offset_hr ) end offset
			) offset
			CROSS APPLY
			(
				select DATEADD(hour,offset.offset,convert(varchar(10),[hv].term_start,120) +'' '' +right(''0''+cast(hr.hr-1 AS VARCHAR),2)+'':00:00'') to_dt
			) to_dt --actual date
			CROSS APPLY
			(
				select DATEADD(hour,CASE WHEN to_tz.APPLY_dst=''y'' THEN 
						--CASE WHEN to_dt.to_dt BETWEEN dateadd(hour,-1,from_dst)  AND dateadd(hour,-2 ,to_dst) and hr.dst=0 THEN 1 ELSE 0 end
					CASE WHEN to_dt.to_dt BETWEEN from_dst  AND dateadd(hour,-1 ,to_dst) and hr.dst=0 THEN 1 ELSE 0 end
						ELSE 0 END  , to_dt.to_dt) term_to
			) term_to   --- dst applied for to term
			'

		
		set @qry4g= ','''+@as_of_date+''',getdate(),'''+@user_id+''',[hv].term_start,[hv].[hours],[hv].is_dst,[hv].period,convert(varchar(10),isnull(term_to.term_to,[hv].term_start),120) [term_date],isnull(datepart(hour,term_to.term_to)+1,[hv].[hours]) [hours], 
				case when from_tz.apply_dst is null then [hv].is_dst else case when  isnull(to_tz.APPLY_dst,''y'')=''y'' and hr.dst=0 and datepart(hour,term_to.term_to)=mv3.[hour]-1 then 1 else 0 end end is_dst,
				from_tz.TIMEZONE_id [timezone_id_from],isnull(to_tz.TIMEZONE_id,from_tz.TIMEZONE_id) [timezone_id_to] '

		set  @qry7e=' and (from_tz.apply_dst is null or ((([hv].is_dst=1 AND mv.[date] IS NOT NULL AND from_tz.apply_dst=''y'') OR ([hv].is_dst = 0)) AND ((mv1.[date] IS NULL AND from_tz.apply_dst=''y'') OR (from_tz.apply_dst = ''n''))))' 


		--non option deals
		IF exists(select 1 from #temp_deals where option_flag = 'n')
		BEGIN

			set @mtm_value_15='
				cfr.formula_rounding,
				a.formula_id,
				a.contract_id,
				a.product_id,
				a.source_deal_detail_id,
				a.formula_curve_id,
				hv.allocation_volume,
				ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
				WHEN (a.product_id=4101) THEN
				(				
						--Contract Side		
					((coalesce(fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
					(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal) + 
					(round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*isnull(a.price_multiplier, 1)*ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal))	* isnull(cucfP.curve_uom_conv_factor, 1)			
						+ (ISNULL(hv.curve_value_c, 0)*case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.foucf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)*isnull(a.price_multiplier, 1))		
				)
				ELSE
				( -- contract value	
					ISNULL(a.fixed_cost, 0)*ISNULL(fixed_cost_cur_factor, 1) * b.fcucf_price_fx_conv_factor_deal +
					( 	
					((coalesce(fixp.price,a.fixed_price, 0)*isnull(a.fixed_price_cur_factor, 1)*coalesce(lfx.price_fx_conv_factor, b.pfcf_price_fx_conv_factor_deal, 1)*isnull(a.price_multiplier, 1)) + 
					(isnull(a.price_adder, 0)*isnull(a.price_multiplier, 1)*ISNULL(adder1_cur_factor, 1)*b.pa1ucf_price_fx_conv_factor_deal) + 
					(isnull(a.price_adder2, 0)*ISNULL(adder2_cur_factor, 1)*b.pa2ucf_price_fx_conv_factor_deal)) * isnull(cucfP.curve_uom_conv_factor, 1)
					)
				) 				
				END as numeric(38,18))) contract_price_deal,
				ABS(cast(CASE WHEN (a.fas_deal_type_value_id = 409) THEN 0 
				WHEN (a.product_id=4101) THEN
				(				
					( --Market Side
						case when '''+ @calc_type+'''=''m'' or ('''+ @calc_type+'''=''s'' and  a.calc_physical_financial_flag =''f'') THEN 1 ELSE 0 END * 
						CASE when  a.curve_id is not NULL  and a.fixed_float_leg=''t'' then 
							case when isnull(hv.curve_id,-1)=-1 then
								case when (lcv.lag_curve_value is not null) then lcv.lag_curve_value * isnull(cucf.curve_uom_conv_factor, 1)
								else market.curve_value * isnull(cucf.curve_uom_conv_factor, 1) * b.cfcf_price_fx_conv_factor_deal end
							ELSE
								case when(a.buy_sell_flag=''s'') then -1 else 1 end *
								case when a.Pricing in (1606,1607) then ROUND(hv.avg_curve_value, ISNULL(cr.index_round_value,100)) else ISNULL(hv.curve_value,0) end * 
								case when (a.Pricing not in (1601,1602)) then ISNULL(formula_cur_factor, 1)*b.cfcf_price_fx_conv_factor_deal  else 1 end * isnull(cucf.curve_uom_conv_factor, 1)		
							END	* case when a.pay_opposite = ''n''  then isnull(a.price_multiplier, 1) else 1 end
						ELSE 0 END 
					)
					)
				ELSE
					(	--Market Value		
						round(coalesce(atc.avg_curve_value,f.formula_value, 0), isnull(cfr.formula_rounding, 100))*ISNULL(formula_cur_factor, 1)*isnull(b.foucf_price_fx_conv_factor_deal, 1)* isnull(cucfP.curve_uom_conv_factor, 1)
					)				
				END as numeric(38,18))) market_price_deal,a.[deal_volume]
			,b.deal_cur_id, b.inv_cur_id
			,cast(0 as float) price,cast(0 as float) extrinsic_value,cast(0 as float) contract_price,cast(0 as float) market_price 
			,cast(0 as float) price_inv,cast(0 as float) extrinsic_value_inv,cast(0 as float) contract_price_inv
			,cast(0 as float) market_price_inv
			,cast(0 as float) price_adder2_fx_conv_factor,cast(0 as float) price_adder1_fx_conv_factor 
			,cast(0 as float) formula_fx_conv_factor,cast(0 as float) fixed_cost_fx_conv_factor 
			,cast(0 as float) curve_fx_conv_factor,cast(0 as float) price_fx_conv_factor 
			,cast(0 as float) price_adder2_fx_conv_factor_inv ,cast(0 as float) price_adder1_fx_conv_factor_inv 
			,cast(0 as float) formula_fx_conv_factor_inv ,cast(0 as float) fixed_cost_fx_conv_factor_inv 
			,cast(0 as float) curve_fx_conv_factor_inv ,cast(0 as float) price_fx_conv_factor_inv 
			,cast(0 as float) formula_value,cast(0 as float) price_adder
			,cast(0 as float) price_adder2,cast(0 as float) fixed_cost
			,cast(0 as float) fixed_price,cast(0 as float) curve_value
			,cast(0 as float) formula_value_inv,cast(0 as float) price_adder_inv
			,cast(0 as float) price_adder2_inv,cast(0 as float) fixed_cost_inv
			,cast(0 as float) fixed_price_inv,cast(0 as float) curve_value_inv
			,null must_run_volume,null must_run_market_value
			,null must_run_contract_value,null dispatch_volume
			,null dispatch_market_value,null dispatch_contract_value
	 '
	
		set @mtm_value_17='
				left join 	#temp_curves tc on tc.source_curve_def_id = '+case when @calc_type='s' then 'isnull(a.settlement_curve_id, a.curve_id)' else 'a.curve_id' END +' AND 
						tc.maturity_date = a.curve_type_maturity_date AND tc.as_of_date = a.exp_curve_as_of_date 
					LEFT OUTER JOIN	 #temp_curves tc_p ON tc_p.source_curve_def_id = a.proxy_curve_id AND 
						 tc_p.maturity_date = a.proxy_curve_maturity AND tc_p.as_of_date =a.curve_as_of_date  
					LEFT OUTER JOIN #temp_curves tc_m ON tc_m.source_curve_def_id = a.monthly_index AND 
						 tc_m.maturity_date = a.monthly_index_maturity AND tc_m.as_of_date =a.curve_as_of_date 
					LEFT OUTER JOIN	#temp_curves tc_p3 ON tc_p3.source_curve_def_id = a.proxy_curve_id3 AND 
						 tc_p3.maturity_date = a.proxy_curve_maturity3 AND tc_p3.as_of_date = a.curve_as_of_date 
				outer apply
				(
					select case when isnull(a.bid_n_ask_price,''n'')=''n'' then  coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value)
						when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''b'' then coalesce(tc.bid_value, tc_p.bid_value, tc_m.bid_value, tc_p3.bid_value)
						when isnull(a.bid_n_ask_price,''n'')=''y'' and a.buy_sell_flag=''s'' then coalesce(tc.ask_value, tc_p.ask_value, tc_m.ask_value, tc_p3.ask_value)
						else coalesce(tc.curve_value, tc_p.curve_value, tc_m.curve_value, tc_p3.curve_value) end curve_value
				) market
				LEFT OUTER JOIN #avg_temp_curves atc ON atc.source_deal_header_id = a.source_deal_header_id AND
									atc.leg = a.leg  and a.source_deal_detail_id=atc.source_deal_detail_id 
					LEFT OUTER JOIN #lag_curves_values lcv ON lcv.curve_id = a.curve_id AND --lcv.term_start = a.term_start AND 
							lcv.term_start = a.term_start AND lcv.term_end = a.term_end AND
							lcv.contract_id = isnull(a.contract_id, -1) AND lcv.func_cur_id = ISNULL(a.func_cur_id, -1)	
					LEFT OUTER JOIN #curve_uom_conv_factor cucf ON  
							cucf.deal_volume_uom_id = a.deal_volume_uom_id and cucf.curve_uom_id  = a.curve_uom_id
					LEFT OUTER JOIN #curve_uom_conv_factor cucfP ON  
							cucfP.deal_volume_uom_id = a.deal_volume_uom_id and cucfP.curve_uom_id  = a.price_uom_id
			LEFT OUTER JOIN #formula_value_at_low f ON a.source_deal_detail_id = f.source_deal_detail_id AND
					f.term_start=hv.term_start and f.period=hv.period 
				AND isnull(f.[hr],hv.[hours])=hv.[hours] AND f.is_dst=hv.is_dst
					LEFT OUTER JOIN #lag_curves_values_fx lfx ON lfx.fx_currency_id = a.fixed_price_currency_id AND 
							lfx.func_cur_id = a.func_cur_id AND lfx.source_system_id = a.source_system_id AND
							lfx.as_of_date= a.exp_curve_as_of_date AND --lfx.maturity_date= a.monthly_maturity AND
							lfx.term_start = a.term_start AND lfx.term_end = a.term_end AND
							(a.pricing=1600 OR a.pricing=1601 OR a.pricing=1602 OR a.pricing=1607)
					LEFT OUTER JOIN contract_formula_rounding_options cr on cr.contract_id = a.contract_id and cr.curve_id = a.curve_id	and
							a.pricing <> 1601 and a.pricing <> 1602	
					LEFT OUTER JOIN contract_formula_rounding_options pr on pr.contract_id = a.contract_id and pr.curve_id = a.fixed_price_currency_id		
					LEFT OUTER JOIN contract_formula_rounding cfr on cfr.contract_id = a.contract_id AND cfr.formula_currency = a.original_formula_currency
					LEFT OUTER JOIN vol_value_rounding r ON r.contract_id = a.contract_id AND r.item_type = ''c'' AND r.field_id = -1
					left join #fx_conversion_values b on b.source_deal_detail_id=a.source_deal_detail_id
			'
			set @mtm_value_18=' 
				where ISNULL(a.option_flag, ''n'') = ''n'' AND a.internal_deal_type_value_id <> 6 AND a.internal_deal_type_value_id <> 7 
					  AND (a.hourly_position_breakdown not in(982,987,997) OR (a.hourly_position_breakdown in(982,987,997) AND (hv.curve_id IS NOT NULL OR a.fixed_cost <> 0))
						or  a.source_deal_header_id<0 )
		 '
		

			set @qry3f='
				 from #temp_deals a inner  join '+ @hourly_price_vol_at_low +' hv on
					hv.source_deal_header_id=a.source_deal_header_id and hv.curve_id=ISNULL(a.curve_id, -1) and hv.deal_term_start=a.term_start and	
					hv.leg = a.leg and a.save_mtm_at_calculation_granularity=''y'' 
					and a.mtm_sett_calc=1
				 INNER JOIN #ok_deals nonnull ON  nonnull.source_deal_detail_id=a.source_deal_detail_id
				 LEFT OUTER JOIN #source_deal_detail_hour fixp ON fixp.source_deal_detail_id=a.source_deal_detail_id 
					and fixp.term_date=hv.term_start and fixp.period=hv.period AND fixp.[hr]=hv.[hours] AND fixp.is_dst=hv.is_dst
				left join #product_detail pd ON pd.source_deal_detail_id = a.source_deal_detail_id
				'


			EXEC spa_print  @qry6f
			EXEC spa_print  @mtm_value_01
			--EXEC spa_print  @mtm_value_02
			--EXEC spa_print  @mtm_value_03
			EXEC spa_print  @mtm_value_04
			EXEC spa_print  @mtm_value_05
			--EXEC spa_print  @mtm_value_06
			--EXEC spa_print  @mtm_value_07
			EXEC spa_print  @mtm_value_08
			EXEC spa_print  @mtm_value_09
			EXEC spa_print  @mtm_value_11
			--EXEC spa_print  @mtm_value_12
			EXEC spa_print  @mtm_value_13
			--EXEC spa_print  @mtm_value_14
			EXEC spa_print  @mtm_value_15
			EXEC spa_print  @qry4g

			EXEC spa_print  @qry3f
			EXEC spa_print  @mtm_value_17
			EXEC spa_print  @sqlstmt
			EXEC spa_print  @mtm_value_18
			EXEC spa_print  @qry7e


			exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+
				@qry6f+ @mtm_value_01
				+ @mtm_value_04
				+ @mtm_value_05
				+ @mtm_value_08
				+ @mtm_value_09
				+ @mtm_value_11
				+ @mtm_value_13
				+ @mtm_value_15
				+ @qry4g
				+ @qry3f
				+ @mtm_value_17
				+ @sqlstmt
				+ @mtm_value_18
				+ @qry7e
			)
		END 


		EXEC spa_print  'option deals'

		--option deals
		IF OBJECT_ID('tempdb..#source_deal_pnl_detail_options_at_low') IS NOT NULL
		BEGIN 

			print 'SELECT * INTO '+ @pt_temp_deals +' FROM #temp_deals'
			print 'SELECT * INTO '+ @pt_source_deal_pnl_detail_options_at_low +' FROM #source_deal_pnl_detail_options_at_low'
			print 'SELECT * INTO '+ @pt_option_param +' FROM #option_param' 
	
			EXEC ('SELECT * INTO '+ @pt_temp_deals +' FROM #temp_deals')
			EXEC ('SELECT * INTO '+ @pt_source_deal_pnl_detail_options_at_low +' FROM #source_deal_pnl_detail_options_at_low')
			EXEC ('SELECT * INTO '+ @pt_option_param +' FROM #option_param')
			   			
			EXEC spa_print  'option dealsqqqqqqqqqq'

			set @qry6g = '	
				from #temp_deals a INNER JOIN #ok_deals nonnull ON  nonnull.source_deal_detail_id=a.source_deal_detail_id AND a.save_mtm_at_calculation_granularity=''y''
					and a.mtm_sett_calc=1
				INNER  JOIN #source_deal_pnl_detail_options_at_low op on op.source_deal_header_id = a.source_deal_header_id and op.term_start = a.term_start 
				INNER JOIN  #option_param op1 ON op1.rowid=op.rowid AND  op1.source_deal_header_id = a.source_deal_header_id AND op1.term_start = a.term_start
				outer APPLY ( 
					select opd.term_day,opd.hr,opd.period,is_dst,
							dbo.FNAMax(
								case when b.option_type = ''c'' then 
							(isnull(opd.spot_price_2* abs(opd.volume2),0)-isnull(opd.spot_price_1* abs(opd.volume),0)) - isnull(opd.strike_price* abs(opd.volume),0)
							else isnull(opd.strike_price* abs(opd.volume),0)-
								(isnull(opd.spot_price_1* abs(opd.volume),0)-isnull(opd.spot_price_2* abs(opd.volume2),0)) 
							end,0)
						 leg_set,abs(opd.volume) tot_volume  from #option_param opd
					 inner JOIN #temp_deals b ON opd.source_deal_header_id = b.source_deal_header_id and opd.term_start = b.term_start AND  b.leg=1
						and opd.rowid=op.rowid and opd.source_deal_header_id = a.source_deal_header_id and opd.term_start = a.term_start and a.leg=1 AND a.calc_physical_financial_flag = ''f''
				) opd1 '
						
			set @qry6g=  replace(REPLACE(replace(@qry4g,'[hv].term_start','[op1].term_day'),'[hv].','[op1].'),'.[hours]','.[hr]')+ @qry6g
			set  @qry7e=replace(REPLACE(replace(@qry7e,'[hv].term_start','[op1].term_day'),'[hv].','[op1].'),'.[hours]','.[hr]')
			set @sqlstmt=replace(REPLACE(replace(@sqlstmt,'[hv].term_start','[op1].term_day'),'[hv].','[op1].'),'.[hours]','.[hr]')

			set @mtm_value_01_opt=REPLACE(@mtm_value_01_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_02_opt=REPLACE(@mtm_value_02_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_03_opt=REPLACE(@mtm_value_03_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_04_opt=REPLACE(@mtm_value_04_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_05_opt=REPLACE(@mtm_value_05_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_06_opt=REPLACE(@mtm_value_06_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_07_opt=REPLACE(@mtm_value_07_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_08_opt=REPLACE(@mtm_value_08_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_09_opt=REPLACE(@mtm_value_09_opt,'a.[deal_volume]','op1.volume')
			set @mtm_value_10_opt=REPLACE(@mtm_value_10_opt,'a.[deal_volume]','op1.volume')
		

			EXEC spa_print  @qry6f
			EXEC spa_print  @mtm_value_01_opt
			EXEC spa_print  @mtm_value_02_opt
			EXEC spa_print  @mtm_value_03_opt
			EXEC spa_print  @mtm_value_04_opt
			--EXEC spa_print  @mtm_value_05_opt
			EXEC spa_print  @mtm_value_06_opt
			EXEC spa_print  @mtm_value_07_opt
			--EXEC spa_print  @mtm_value_08_opt
			--EXEC spa_print  @mtm_value_09_opt
			--EXEC spa_print  @mtm_value_10_opt

			EXEC spa_print  @qry6g
			EXEC spa_print  @sqlstmt
			EXEC spa_print  @mtm_value_09_opt
			EXEC spa_print  @mtm_value_10_opt
			EXEC spa_print  @qry7e

			exec(
				@qry6f+@mtm_value_01_opt+@mtm_value_02_opt+@mtm_value_03_opt+@mtm_value_04_opt
				--+@mtm_value_05_opt
				+@mtm_value_06_opt+@mtm_value_07_opt+
				@qry6g+@sqlstmt+@mtm_value_09_opt+@mtm_value_10_opt+@qry7e		
			)

		END 

		---------------------------------------------------------
		-- convert into invoice currency from deal currency
		---------------------------------------------------------
		set @sqlstmt=' 
			update tlm  
			set
				market_value_inv=market_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,contract_value_inv=contract_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,simple_formula_curve_value_inv=simple_formula_curve_value_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,formula_conv_factor_inv=formula_conv_factor_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,leg_mtm_inv=leg_mtm_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,leg_set_inv=leg_set_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	
				,price_inv=price_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,extrinsic_value_inv=extrinsic_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1) 
				,contract_price_inv=contract_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,market_price_inv=market_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)

				,price_adder2_fx_conv_factor_inv=price_adder2_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,price_adder1_fx_conv_factor_inv=price_adder1_fx_conv_factor_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,formula_fx_conv_factor_inv=formula_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,fixed_cost_fx_conv_factor_inv=fixed_cost_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,curve_fx_conv_factor_inv=curve_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,price_fx_conv_factor_inv=price_fx_conv_factor_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
	
				,formula_value_inv=formula_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,price_adder_inv=price_adder_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,price_adder2_inv=price_adder2_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,fixed_cost_inv=fixed_cost_deal *coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,fixed_price_inv=fixed_price_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
				,curve_value_inv=curve_value_deal*coalesce(a.invoice_fx_rate,fx.price_fx_conv_factor,1)
			from '+CASE WHEN @calc_type='m' THEN ' dbo.source_deal_pnl_breakdown ' ELSE  ' dbo.source_deal_settlement_breakdown ' END + ' tlm
				inner join #temp_deals a on a.source_deal_detail_id=tlm.source_deal_detail_id
				outer apply
				(	select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
					where fx_currency_id =  coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency)
						AND func_cur_id = a.settlement_currency AND source_system_id = a.source_system_id
						AND maturity_date between case when '''+@calc_type+'''=''m'' and granularity=980 then convert(varchar(8),a.term_start,120)+''01'' else a.term_start end and a.term_end
						and market_value_desc=a.fx_conversion_market
						AND as_of_date>= case when '''+@calc_type+'''=''s'' then '''+@term_start+''' else '''+@curve_as_of_date+''' end 
						AND as_of_date<= case when'''+ @calc_type+'''=''s'' then '''+@term_end+''' else '''+@curve_as_of_date+''' end 
				) fx
		'
		EXEC spa_print  @sqlstmt
		exec(@sqlstmt)
		--------------------------------------------------------------	
		-- convert into functional currency from  deal currency
		--------------------------------------------------------------
		set @sqlstmt=' 
			update tlm  
			set
				market_value=market_value_deal *isnull(fx.price_fx_conv_factor,1)
				,contract_value=contract_value_deal *isnull(fx.price_fx_conv_factor,1)
				,simple_formula_curve_value=simple_formula_curve_value_deal *isnull(fx.price_fx_conv_factor,1)
				,formula_conv_factor=formula_conv_factor_deal *isnull(fx.price_fx_conv_factor,1)
				,leg_mtm=leg_mtm_deal *isnull(fx.price_fx_conv_factor,1)
				,leg_set=leg_set_deal *isnull(fx.price_fx_conv_factor,1)
				,price=price_deal *isnull(fx.price_fx_conv_factor,1)
				,extrinsic_value=extrinsic_value_deal*isnull(fx.price_fx_conv_factor,1) 
				,contract_price=contract_price_deal*isnull(fx.price_fx_conv_factor,1)
				,market_price=market_price_deal*isnull(fx.price_fx_conv_factor,1)
				,price_adder2_fx_conv_factor=price_adder2_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
				,price_adder1_fx_conv_factor=price_adder1_fx_conv_factor_deal *isnull(fx.price_fx_conv_factor,1)
				,formula_fx_conv_factor=formula_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
				,fixed_cost_fx_conv_factor=fixed_cost_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
				,curve_fx_conv_factor=curve_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
				,price_fx_conv_factor=price_fx_conv_factor_deal*isnull(fx.price_fx_conv_factor,1)
				,formula_value=formula_value_deal*isnull(fx.price_fx_conv_factor,1)
				,price_adder=price_adder_deal *isnull(fx.price_fx_conv_factor,1)
				,price_adder2=price_adder2_deal*isnull(fx.price_fx_conv_factor,1)
				,fixed_cost=fixed_cost_deal *isnull(fx.price_fx_conv_factor,1)
				,fixed_price=fixed_price_deal*isnull(fx.price_fx_conv_factor,1)
				,curve_value=curve_value_deal*isnull(fx.price_fx_conv_factor,1)
			from '+CASE WHEN @calc_type='m' THEN ' dbo.source_deal_pnl_breakdown ' ELSE  ' dbo.source_deal_settlement_breakdown ' END + ' tlm
				inner join #temp_deals a on a.source_deal_detail_id=tlm.source_deal_detail_id
				outer apply
				(	
					select round(avg(price_fx_conv_factor),a.fx_rounding)  price_fx_conv_factor from #fx_curves 
					where fx_currency_id =  coalesce(a.fixed_price_currency_id,a.curve_currency_id,a.formula_currency) 
						AND func_cur_id = a.func_cur_id AND source_system_id = a.source_system_id
						AND maturity_date between case when '''+ @calc_type+'''=''m'' and granularity=980 then convert(varchar(8),a.term_start,120)+''01'' else a.term_start end and a.term_end
						and market_value_desc=a.fx_conversion_market
						AND as_of_date>= case when '''+@calc_type+'''=''s'' then '''+@term_start+''' else '''+@curve_as_of_date+''' end 
						AND as_of_date<= case when'''+ @calc_type+'''=''s'' then '''+@term_end+''' else '''+@curve_as_of_date+''' end 

				) fx
		'
		EXEC spa_print  @sqlstmt
		exec(@sqlstmt)

		--------------------------------------------------------------------------------------


		If @print_diagnostic = 1
		BEGIN
			print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
			EXEC spa_print  '****************Inserting into source_deal_pnl_breakdown*****************************'	
		END

		If @print_diagnostic = 1
		begin
			set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
			set @log_increment = @log_increment + 1
			set @log_time=getdate()
			print  @pr_name+' Running..............'
		end
	END 
	
	IF @calc_type='s'
		GOTO CleanUp_Process_Tables
	
	If @pnl_source_value_id = 4500 AND @internal_deal_type_Debt_7 = 1
	begin
		insert into basis_adjustments (as_of_date,source_deal_header_id,change_value,PMT,period_left,frequency,irate,create_user,create_ts)
		select as_of_date,source_deal_header_id,change_value,PMT,period_left,frequency,irate, dbo.FNADBUser(), getdate() from #basis_adjustments
	end

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting into basis_adjustments*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	If @pnl_source_value_id = 4500 AND (@internal_deal_type_Debt_7 = 1 OR @internal_deal_type_IR_6 = 1)
	begin	
		insert into interest_expense(as_of_date,
			source_deal_header_id,
			term_start,
			term_end,
			interst_type,
			leg_mtm,
			create_user,
			create_ts
			--,update_user,
			--update_ts
			)
		select as_of_date,
			source_deal_header_id,
			term_start,
			term_end,
			interst_type,
			leg_mtm, dbo.FNADBUser(), getdate()--, dbo.FNADBUser(), getdate()  
			from #interest_expense
	END

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting into interest_expense*****************************'	
	END

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	--INSERT FINAL interest expense in source_deal_pnl table

	set @st1 = '
	insert into ' + dbo.FNAGetProcessTableName(@as_of_date, 'source_Deal_pnl') +  '
	select ie.source_deal_header_id, term_end term_start, term_end, 1 Leg, as_of_date pnl_as_of_date, leg_mtm und_pnl,
	leg_mtm und_intrinsic_pnl, 0 und_extrnisic_pnl, 0 dis_pnl, 0 dis_intrinsic_pnl, 0 dis_extrnisic_pnl,
	' + cast(@pnl_source_value_id as varchar) + ' pnl_source_value_id, pnl_currency_id pnl_currency_id, 1 AS pnl_conversion_factor, 0 pnl_adjustment_value, 1 deal_volume, 
	''' + @user_id + ''' create_user, getdate() creat_ts, ''' + @user_id + ''' update_user, getdate() update_ts, NULL und_pnl_set 
	from #interest_expense ie INNER JOIN
	(select source_deal_header_id, max(func_cur_id) pnl_currency_id 
	from #temp_Deals group by source_deal_header_id) fid on fid.source_deal_header_id = ie.source_deal_header_id
	where interst_type = ''f''
	'

	If @internal_deal_type_IR_6 = 1 OR @internal_deal_type_Debt_7 = 1
		EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Inserting FINAL interest expense into source_deal_pnl*****************************'	
	END

END
ELSE
BEGIN
	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	IF @summary_detail = 's'
	BEGIN
		
		set @st1 = ' INSERT INTO ' + @table_name  + ' (pnl_as_of_date, source_deal_header_id, term_start, term_end, und_pnl, pnl_source_value_id, pnl_currency_id) 
			select  '''+@curve_as_of_date+''' AS pnl_as_of_date, #temp_leg_mtm.source_deal_header_id, 
			coalesce(sddl.term_start_leg1, #temp_leg_mtm.term_start) term_start, 
			coalesce(sddl.term_end_leg1, #temp_leg_mtm.term_end) term_end, 
			sum(#temp_leg_mtm.leg_mtm) AS und_pnl, 
			' + cast(@pnl_source_value_id as varchar) +' AS pnl_source_value_id, 
			max(#temp_leg_mtm.func_cur_id)  pnl_currency_id
		from  #temp_leg_mtm INNER JOIN
			#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
			  --#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.term_start=#temp_leg_mtm.term_start and 
					--	nonnull.term_end=#temp_leg_mtm.term_end  
			LEFT OUTER JOIN
			source_deal_detail_lagging sddl ON sddl.source_deal_header_id = #temp_leg_mtm.source_deal_header_id AND
								sddl.leg = #temp_leg_mtm.leg AND sddl.term_start = #temp_leg_mtm.term_start
		GROUP BY 
			#temp_leg_mtm.source_deal_header_id, coalesce(sddl.term_start_leg1, #temp_leg_mtm.term_start), coalesce(sddl.term_end_leg1, #temp_leg_mtm.term_end)
		'

		EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)

	END
	ELSE
	BEGIN

		declare @deal_fail_count int 
		select @deal_fail_count = count(DISTINCT  t.source_deal_header_id)
		from #temp_leg_mtm t 
			LEFT OUTER JOIN #ok_deals o ON o.source_deal_header_id = t.source_deal_header_id 
		where o.source_deal_header_id IS NULL AND t.expired_term <> 'y'

		if @calc_explain_type is null
		begin 
			if (@deal_fail_count  > 0)
				set @st1= 'select * INTO ' + @table_name + ' from #calc_status '
			else
				set @st1= '
				select t.source_deal_header_id [Deal ID], convert(VARCHAR(10),t.term_start,120) [Term], t.buy_sell_flag [Buy/Sell], t.physical_financial_flag [Phy/Fin],  
					   t.leg [Leg], sc.currency_name [Currency], t.leg_mtm [Cashflow], t.volume [Volume], t.volume_multiplier [Vol Mult1], t.volume_multiplier2 [Vol Mult2], 
					   t.price [Net Price], t.curve_value [Curve Value], t.fixed_cost [Fixed Cost], t.fixed_price [Fixed Price], t.formula_value [Formula Value],
					   t.strike_price [Strike Price],
					   t.price_multiplier [Price Multiplier], t.price_adder [Price Adder1], t.price_adder2 [Price Adder2], 	t.discount_factor [Discount Factor], 
					   t.pay_opposite [Opposite], t.curve_uom_conv_factor [Curve UOM Factor], t.curve_fx_conv_factor [Curve FX Factor], 
					   t.price_fx_conv_factor [FP FX Factor], t.fixed_cost_fx_conv_factor [FC FX Factor], t.formula_fx_conv_factor [Formula FX Factor], 
					   t.price_adder1_fx_conv_factor [PAdd1 FX Factor], t.price_adder2_fx_conv_factor [PAdd2 FX Factor], t.no_days_left [Days Left], t.days_year [Days Year] 
				INTO '+@table_name+' 
				from #temp_leg_mtm t inner join
					source_currency sc on sc.source_currency_id=t.func_cur_id
				'
		END		
		ELSE
		BEGIN
			IF @calc_explain_type = 'd' 
			BEGIN
			
				set @st1 = 
				'DELETE  TOP(100000) sdp
				from '+@table_name+' sdp
				inner join #ok_deals nonnull 
				ON	nonnull.source_deal_header_id=sdp.source_deal_header_id
				and  pnl_as_of_date=''' + @as_of_date + ''''			


				WHILE 1 = 1
				BEGIN
					exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
					IF @@rowcount < 100000 BREAK;
				END

				set @st1 = 
				'DELETE  top(100000) i
				from '+@index_brk_table_name+' i 
				inner join #ok_deals nonnull ON	nonnull.source_deal_header_id=i.source_deal_header_id
				inner join #fees_breakdown f ON nonnull.source_deal_header_id=f.source_deal_header_id 
				and  i.as_of_date=''' + @as_of_date + ''''

				WHILE 1 = 1
				BEGIN
					exec('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )
					IF @@rowcount < 100000 BREAK;
				END
		
			END
			
			
			SET @st1= 
			CASE WHEN @calc_explain_type = 'd' THEN 
			' INSERT INTO '+@table_name+'(source_deal_header_id,term_start,term_end,Leg,pnl_as_of_date,und_pnl,und_intrinsic_pnl,und_extrinsic_pnl,dis_pnl,dis_intrinsic_pnl,dis_extrinisic_pnl,pnl_source_value_id,pnl_currency_id,deal_volume,curve_id,market_value,contract_value,dis_market_value,dis_contract_value
			,price,curve_as_of_date,curve_value,fixed_cost,fixed_price,formula_value,price_adder,price_multiplier
			)'
			ELSE '' END
			+'
			SELECT #temp_leg_mtm.source_deal_header_id
			,#temp_leg_mtm.term_start
			,#temp_leg_mtm.term_end
			,#temp_leg_mtm.leg AS Leg
			,''' + @as_of_date + ''' AS pnl_as_of_date
			,isnull(sum(#temp_leg_mtm.leg_mtm), 0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_pnl
			,isnull(sum(#temp_leg_mtm.leg_mtm), 0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS und_intrinsic_pnl
			,isnull(sum(#temp_leg_mtm.extrinsic_value), 0) AS und_extrinsic_pnl
			,isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor), 0) + isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_pnl
			,isnull(sum(#temp_leg_mtm.leg_mtm * #temp_leg_mtm.discount_factor), 0) - isnull(sum(#temp_leg_mtm.extrinsic_value), 0) +
				isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_intrinsic_pnl
			,isnull(sum(#temp_leg_mtm.accrued_interest), 0) AS dis_extrinisic_pnl
			,''' + cast(@pnl_source_value_id as varchar) + ''' AS pnl_source_value_id
			,max(#temp_leg_mtm.func_cur_id)  pnl_currency_id
			,max(abs(#temp_leg_mtm.volume)) deal_volume 
			,Max(#temp_leg_mtm.curve_id) curve_id
			,max(#temp_leg_mtm.market_value) market_value
			,max(#temp_leg_mtm.contract_value) contract_value
			,max(#temp_leg_mtm.market_value*#temp_leg_mtm.discount_factor) dis_market_value
				,max(#temp_leg_mtm.contract_value*#temp_leg_mtm.discount_factor) dis_contract_value'
			+CASE WHEN @calc_explain_type = 'd' THEN 
				',max(#temp_leg_mtm.price),max(#temp_leg_mtm.curve_as_of_date),max(#temp_leg_mtm.curve_value)
				,max(#temp_leg_mtm.fixed_cost),max(#temp_leg_mtm.fixed_price),max(#temp_leg_mtm.formula_value)
				,max(#temp_leg_mtm.price_adder),max(#temp_leg_mtm.price_multiplier)'
			else '' end +CASE WHEN @calc_explain_type = 'f' THEN ' INTO '+@table_name ELSE '' END +'
		from  #temp_leg_mtm  INNER JOIN 
			#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id and nonnull.source_deal_detail_id=#temp_leg_mtm.source_deal_detail_id
		--#ok_deals nonnull ON	nonnull.source_deal_header_id=#temp_leg_mtm.source_deal_header_id  and nonnull.term_start=#temp_leg_mtm.term_start and nonnull.term_end=#temp_leg_mtm.term_end  
		GROUP BY 
			#temp_leg_mtm.source_deal_header_id, #temp_leg_mtm.term_start,  #temp_leg_mtm.term_end, #temp_leg_mtm.leg'
		
		END
	
		exec spa_print @st1
		EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1)
			
		SET @st1=	
			CASE WHEN @calc_explain_type = 'd' THEN ' INSERT INTO '+@index_brk_table_name+'(as_of_date,source_deal_header_id,leg,term_start,term_end,field_id,field_name,price,total_price,volume,value,contract_value,internal_type,tab_group_name,udf_group_name,sequence,fee_currency_id,currency_id,create_user,create_ts,contract_mkt_flag)'
			ELSE '' END+
			' select f.as_of_date, f.source_deal_header_id, f.leg, f.term_start, f.term_end, f.field_id, f.field_name, sum(f.price) price,
				   sum(f.total_price) total_price, sum(f.volume) volume, sum(f.value) value, sum(f.contract_value) contract_value, 
				   f.internal_type, f.tab_group_name, f.udf_group_name,
				   max(f.sequence) sequence, max(f.fee_currency_id) fee_currency_id, max(f.currency_id) currency_id
				   ,'''+@user_login_id+''' create_user, GETDATE() create_ts,MAX(contract_mkt_flag) contract_mkt_flag
			'+CASE WHEN @calc_explain_type = 'f' THEN ' INTO '+@index_brk_table_name ELSE '' END +'		   
			FROM   #fees_breakdown f inner join
					#ok_deals nonnull ON nonnull.source_deal_detail_id=f.source_deal_detail_id 
			where f.value is null
			group by f.as_of_date, f.source_deal_header_id, f.term_start, f.term_end, f.field_id, f.field_name,
					f.internal_type, f.tab_group_name, f.udf_group_name,f.leg	
		'
		EXEC spa_print  @st1		
		EXEC('SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;'+@st1 )		
	END
	
	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************Selecting FINAL MTM values into specified table as an input*****************************'	
	END

	GOTO CleanUp_Process_Tables

END



if @calc_explain_type is null
begin
	if  @status_table_name is not null
		exec ('select * into ' + @status_table_name + ' from #calc_status')
end

If @@ERROR <> 0
BEGIN
	--**ERROR**
	INSERT INTO #calc_status
		Select @process_id,'Error','MTM Calc','Run MTM','Application Error',
		'Failed to Insert data','Please contact technical support'
	GOTO FinalStep
	Return
END


--select * from #temp_deals
--select * from #temp_curves
--select * from #temp_leg_mtm

DECLARE @count_fail int
DECLARE @count_fail1 int
DECLARE @count_warning int
DECLARE @count_total int

set @count_fail = 0
set @count_warning = 0
set @count_total = 0


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--error
select @count_fail = count(DISTINCT  t.source_deal_header_id)
from
#temp_leg_mtm t LEFT OUTER JOIN
#ok_deals o ON o.source_deal_header_id = t.source_deal_header_id 
where o.source_deal_header_id IS NULL AND t.expired_term <> 'y'

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Count of total failed deals*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--warning
select @count_warning = count(DISTINCT  t.source_deal_header_id)
from
#temp_leg_mtm t LEFT OUTER JOIN
#ok_deals o ON o.source_deal_header_id = t.source_deal_header_id 
where o.source_deal_header_id IS NULL AND t.expired_term = 'y'

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Count of total warning deals*****************************'	
END


If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end

--total
select @count_total = count(DISTINCT  t.source_deal_header_id)
from
#temp_leg_mtm t 

If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************Count of total total deals processed*****************************'	
END

----pick up deal count that failed which is not in the list above (fx and uom conversion)
--SELECT @count_fail = @count_fail1 + COUNT(distinct tlm.source_deal_header_id) 
--from #temp_leg_mtm tlm LEFT OUTER JOIN
--	#fx_uom_converion_error_deals ed ON ed.source_deal_header_id = tlm.source_deal_header_id
--where ed.source_deal_header_id IS NULL AND tlm.leg_mtm is NULL AND tlm.term_start > @as_of_date 
--
--SELECT @count_warning = COUNT(distinct source_deal_header_id) from #temp_leg_mtm where leg_mtm is NULL
--					AND expired_term = 'y'
--
----select @count_fail
--SELECT @count_total = COUNT(distinct source_deal_header_id) from #temp_leg_mtm 
----select @count_success

If @print_diagnostic = 1
begin
	set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
	set @log_increment = @log_increment + 1
	set @log_time=getdate()
	print  @pr_name+' Running..............'
end


DECLARE @calc_type_reprocess CHAR(1)
SET @calc_type_reprocess =  CASE WHEN @calc_type = 'm' THEN 'r' WHEN @calc_type = 's' THEN 't' ELSE @calc_type END -- for reprocess

set @desc='MTM Calculation done for as of date: '+ isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) +
	'  <b>Total Deals Processed Count</b>: (' + cast(@count_total as varchar) + ')  <b>Error Count</b>: (' +
	 cast(@count_fail as varchar)  + ') <b>Warning Count</b>: (' + cast(@count_warning as varchar) + ').'+
	 CASE WHEN @count_fail>0 THEN dbo.[FNATrmHyperlink]('k',10201020,' Click Here','MTM','MTM',@calc_type_reprocess,@curve_source_value_id,@process_id,@term_start,@term_end,NULL,NULL,NULL,@as_of_date,@as_of_date)+ ' to reprocess Error Deals.'
	 ELSE '' END  

insert into #calc_status values(@process_id, 
	case when @count_fail = 0 then 'Success' 
	else case when @calc_type = 'w' then case when @count_fail < @count_total THEN 'Warning' else 'Error' end 
		else 'Error' end
	end,'MTM Calc','Run MTM','Results', --'Successful',
@desc,'')

 EXEC('SELECT * INTO '+@option_param_table+' FROM #source_deal_pnl_detail_options' )

IF @calc_mtm_attribute = 1
	AND @calc_type <> 'w'
	--AND @count_fail = 0
BEGIN
	EXEC [spa_pnl_explain_wrapper] @_as_of_date_from = NULL
		,@_as_of_date_to = @as_of_date
		,@_sub = @sub_id
		,@_str = @strategy_id
		,@_book = @book_id
		,@_source_deal_header_ids = @source_deal_header_id
		,@_option_param_table = @option_param_table
END


If @print_diagnostic = 1
BEGIN
	print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
	EXEC spa_print  '****************	INSERT INTO FINAL MESSAGE IN #calc_status *****************************'	
END

-------------------------End of Step 9----------------------------------------
----------------------Step 10  log all error or succes message  ------------------------------

FinalStep:


if @calc_explain_type is null
begin 
	If NULLIF(@table_name, '') is not null and @source_deal_header_id is not null and @summary_detail = 'd'
	Begin
		set @st1= 'select * INTO ' + @table_name + ' from #calc_status '
		exec(@st1)

		GOTO CleanUp_Process_Tables
	end
end

declare @e_time int
declare @e_time_text varchar(100)
set @e_time = datediff(ss,@begin_time,getdate())
set @e_time_text = cast(cast(@e_time/60 as int) as varchar) + ' Mins ' + cast(@e_time - cast(@e_time/60 as int) * 60 as varchar) + ' Secs'

if @process_id is NULL 
Begin
	If @table_name IS NULL
	BEGIN

		select	 @ErrorCode=ErrorCode,
			@Module=Module,
			@Source=[Source],
			@type=[type],
			@description=[description],
			@nextstep=[nextstep]
		from #calc_status

	EXEC spa_ErrorHandler @ErrorCode
			, @Module -- Name the tables used in the query.
			, @Source -- Name the stored proc.
			, @type -- Operations status.
			, @description -- Success message.
			,  @nextstep -- The reference of the data deleted.	

		return
	END
End
else
Begin

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	IF @calc_type= 'w'
	insert into MTM_TEST_RUN_LOG(process_id,code,module,source,type,[description],nextsteps)  
	select @original_process_id,ErrorCode,Module,Source,[type],[description],nextstep  from #calc_status --where process_id=@process_id
	ELSE
	insert into MTM_TEST_RUN_LOG(process_id,code,module,source,type,[description],nextsteps)  
	select * from #calc_status --where process_id=@process_id

	SET @user_name = @user_id
	--SET @desc = 'Assessment process completed for run date ' + @run_date 

	SET @url_desc = 'Detail...'
	SET @url = './dev/spa_html.php?__user_name__=' + @user_name + 
		'&spa=exec spa_get_mtm_test_run_log ''' + CASE WHEN @calc_type = 'w' THEN @original_process_id ELSE  @process_id END + ''''
	
	SET @urlP = './dev/spa_perform_process.php?as_of_date= ' + isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) + 
		'&process_id=115&process_attachment=Run Assessment ran on ' +
		dbo.FNAUserDateTimeFormat(getdate(), 1, @user_id) +
		'&spa=exec spa_get_mtm_test_run_log ''' + CASE WHEN @calc_type = 'w' THEN @original_process_id ELSE  @process_id END  + '''' +
		'&__user_name__=' + @user_id
	
	SET @url_desc = '<a target="_blank" href="' + @urlP + '">' + 
		'Processed...' +
		'</a>'
	
	DECLARE @error_count int
	--DECLARE @type char

	IF @calc_type = 'w'
	begin
		if @original_calc_type='v'
			SET @run_type = 'MTM Simulation '
		else
		SET @run_type = 'What If MTM '
	end
	ELSE IF @calc_type = 's'
		SET @run_type = CASE WHEN @calc_settlement_adjustment=1 THEN 'Settlement Adjustments' ELSE 'Deal Settlement' END
	ELSE
		SET @run_type = 'MTM '
		
	SELECT  @error_count =   COUNT(*) 
	FROM   mtm_test_run_log
	WHERE process_id = @process_id AND code = 'Error'
	
	If @error_count > 0 
		SET @type = 'e'
	Else
		SET @type = 's'
	
	SELECT @warning_count_s = COUNT(*)
	FROM   mtm_test_run_log
	WHERE  process_id     = @process_id
		    AND code       = 'Warning'
		       
	IF @warning_count_s > 0 
		SET @type = 'w'
	
	SET @desc = '<a target="_blank" href="' + @url + '">' + 
			@run_type + 'Calculation process completed for run date ' + isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) + 
			CASE 
				    WHEN (@type = 'e') THEN ' <font color="red">(ERRORS found)</font>'
				    WHEN (@type = 'w') THEN ' <font color="red">(Warning found)</font>'
				    ELSE ''
			END +
			' [Elapse time: ' + @e_time_text + ']' + 
			'.</a>'
	
	EXEC spa_print  @desc
	-- insert in message board only if status is not fed back in table
	IF @calc_type <> 'w'
		--SET @run_type = @run_type + 'Process'
		SET @run_type = @run_type
		
	if  @status_table_name IS NULL
	BEGIN
		IF @CALC_TYPE= 'W' 
		BEGIN
			if not exists(select 1 from message_board where isnull(process_id,-1)= isnull(@original_process_id,-1) and [source] like 'What If%')
				EXEC  spa_message_board 'u', @user_name,NULL, @run_type,@desc, '', '', @type, @job_name,NULL,@original_process_id,NULL,'n',@temptablequery,'y', NULL, @url
		END
		else
		EXEC  spa_message_board 'u', @user_name,
				NULL, @run_type,
				@desc, '', '', @type, @job_name,NULL,@batch_process_id,NULL,'n',@temptablequery,'y', NULL, @url 
	end 
	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		print  '****************END OF LOGIC: Final Status insert into message board' +   ' [Elapse time: ' + @e_time_text + ']'   + ' *****************************'	
	END


	-- Calling Post MTM Calculation event for deal module in workflow
	IF EXISTS(SELECT 1 FROM workflow_module_event_mapping WHERE module_id = 20601 AND event_id = 20581 AND is_active = 1) AND EXISTS(SELECT 1 FROM #ok_deals) AND @trigger_workflow = 'y'
	BEGIN
		DECLARE @alert_process_table NVARCHAR(200)
		DECLARE @alert_process_id NVARCHAR(100)

		SET @alert_process_id = dbo.FNAGetNewID()
		SET @alert_process_table = 'adiha_process.dbo.alert_post_mtm_calc_' + @alert_process_id + '_apmc'
	
		 --SELECT @source_deal_header_id = STUFF((
			--SELECT DISTINCT ','+ CAST(source_deal_header_id AS NVARCHAR(MAX)) 
			--FROM #ok_deals 
			--FOR XML PATH('')
			--),1,1,'')

		EXEC('CREATE TABLE ' + @alert_process_table + ' (
				source_deal_header_id INT NOT NULL, as_of_date NVARCHAR(20) COLLATE DATABASE_DEFAULT
				)')

		SET @sqlstmt = 'INSERT INTO ' + @alert_process_table + '(source_deal_header_id, as_of_date) 
							SELECT DISTINCT source_deal_header_id, '''+ @as_of_date +''' FROM #ok_deals'	
		EXEC(@sqlstmt)			
		SET @sqlstmt = 'spa_register_event 20601,20581' + ',''' + @alert_process_table + '''' + ',1,''' + @alert_process_id + ''''
		SET @job_name = 'Register_Event' + '_' + @alert_process_id
		EXEC spa_run_sp_as_job @job_name, @sqlstmt, @job_name, @user_login_id ,NULL, NULL, NULL
	END
	EXEC spa_ErrorHandler 0
			, 'spa_calc_mtm_job' -- Name the tables used in the query.
			, 'spa_calc_mtm_job' -- Name the stored proc.
			, 'Success' -- Operations status.
			, 'Success' -- Success message.
			,  NULL -- The reference of the data deleted.	

	GOTO CleanUp_Process_Tables
End


END TRY
BEGIN CATCH

	If @print_diagnostic = 1
	begin
		set @pr_name= 'sql_log_' + cast(@log_increment as varchar)
		set @log_increment = @log_increment + 1
		set @log_time=getdate()
		print  @pr_name+' Running..............'
	end

	SET @desc =  'Error Found in Catch: ' + ERROR_MESSAGE()

	EXEC spa_print  @desc

	--declare @module varchar(100)
	set @module = CASE WHEN(@calc_type='s') THEN 'Deal Settlement Calc' ELSE 'MTM Calc' END

	SET @url = './dev/spa_html.php?__user_name__=' + @user_name + 
			'&spa=exec spa_get_mtm_test_run_log ''' + CASE WHEN @calc_type = 'w' THEN @original_process_id ELSE  @process_id END  + ''''
		
	SET @desc = '<a target="_blank" href="' + @url + '">' + @module + 
				' did not complete for run date ' + isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) + 
				' (ERRORS found: ' + @desc + ')'  +
				'.</a>'

	insert into MTM_TEST_RUN_LOG(process_id,code,module,source,type,[description],nextsteps)  
	select * from #calc_status where process_id=@process_id

	--select @user_name
	insert into MTM_TEST_RUN_LOG(process_id,code,module,source,type,[description],nextsteps)  
	SELECT @process_id,'Error','MTM Calc',@module,@module,
				'SQL Error found: '''  + isnull(dbo.FNADateFormat(@as_of_date), @as_of_date) + ''' (' + ERROR_MESSAGE() + ')' +
				' [Elapse time: ' + @e_time_text + ']' as status_description, 
				'Please contact technical support'

	EXEC  spa_message_board 'u', @user_name, NULL, @module,  @desc, '', '', 'e', @job_name,NULL,@batch_process_id,NULL,'n',@temptablequery,'y', NULL, @url 

--select * from #calc_status  

	If @print_diagnostic = 1
	BEGIN
		print  @pr_name+': '+cast(datediff(ss,@log_time,getdate()) as varchar) +'*************************************'
		EXEC spa_print  '****************END OF LOGIC: Error Found in Catch*****************************'	
	END	
END CATCH

-----------------------End of Step 10----------------------------------------

--/************************************* Object: 'spa_calc_mtm_job' END *************************************/

-------------------------- Step 11 Start ----------------------------------
-- Clean Up Process Tables used in MTM after successful completion. Only when debug mode is Off.
CleanUp_Process_Tables:
	DECLARE @debug_mode VARCHAR(128) = REPLACE(CONVERT(VARCHAR(128), CONTEXT_INFO()), 0x0, '')

	IF ISNULL(@debug_mode, '') <> 'DEBUG_MODE_ON'
	BEGIN
		EXEC dbo.spa_clear_all_temp_table NULL, @original_process_id, @exclude_tables ='deal_settlement,index_fees_settlement,std_whatif_deals'  
		EXEC dbo.spa_clear_all_temp_table NULL, @process_id
		EXEC dbo.spa_clear_all_temp_table NULL, @process_id2
		EXEC dbo.spa_clear_all_temp_table NULL, @process_id3
		EXEC dbo.spa_clear_all_temp_table NULL, @process_id4
	END
-------------------------- Step 11 End ------------------------------------

GO
--/************************************* Object: 'spa_calc_mtm_job' END *************************************/
