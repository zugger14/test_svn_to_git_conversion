IF OBJECT_ID(N'[dbo].[spa_ixp_generic_import_job]', N'P') IS NOT NULL
    DROP PROCEDURE [dbo].[spa_ixp_generic_import_job]
GO
  
SET ANSI_NULLS ON
GO
  
SET QUOTED_IDENTIFIER ON
GO

/**
	Final script used by import module. It use process table, identify invalid data and notify to user and valid data are inserted in main table.

	Parameters 
	@import_temp_table_name : Final staging table where data to import saved.
    @table_name				: Import table name defined in ixp_tables. Used to defined rule specific logic.
    @process_id				: Unique identifier of import process.
    @job_name				: Unique job name.
    @schedule_run			: Default is 'n'. Set to 'y' for Essent ONLY to load erroneous deals in ssis_mtm_formate2_error_log only when loading from RDB
 				because when loading from stating table, we already have all erroroneous deals
 				in ssis_mtm_formate2_error_log, so no need to insert them again. 
    @exec_mode				: 
    @import_from			: Source from where data import is triggred.
    @generic_mapping_flag	: 
    @rules_id				: Import Rules ID.
    @import_flag			: Operation flag. 
								't'
								'p'
    @rules_names			: Specify rule name.
    @drilldown_level		: Level of drill down. eg.1 level drill down, 2 level drilldown (Old logic)
    @temp_header_table		: 
    @run_in_debug_mode		: Used to notify user. Expected value 'y' and 'n'.
	@file_transfer_endpoint_id	:	File transfer endpoint id, configured in file_transfer_endpoint table
	@ftp_remote_directory		:	Ftp target remote target, NULL will point endpoint remote directory if setup, otherwise to root folder
*/

CREATE PROCEDURE [dbo].[spa_ixp_generic_import_job]  
    @import_temp_table_name NVARCHAR(400),
    @table_name NVARCHAR(200) = NULL,
    @process_id NVARCHAR(200),
    @job_name NVARCHAR(300),
    @schedule_run NCHAR(1) = 'n',
    @exec_mode INT = 0,
    @import_from NVARCHAR(500) = NULL,
    @generic_mapping_flag NCHAR(1) = NULL,
    @rules_id INT = NULL,
    @import_flag NCHAR(1) = NULL,
    @rules_names NVARCHAR(MAX) = NULL,
    @drilldown_level	INT = 1,		-- 1: 1 level drill down	-- 2: 2 level drilldown (Old logic)
    @temp_header_table	NVARCHAR(128) = NULL,
    @run_in_debug_mode NCHAR(1) = NULL,
	@file_transfer_endpoint_id INT = NULL,
	@ftp_remote_directory NVARCHAR(1024) = NULL
AS

SET NOCOUNT ON

/** * DEBUG QUERY START *
	SET NOCOUNT ON
	
	IF OBJECT_ID('tempdb..#temp_errors') IS NOT NULL
		DROP table #temp_errors
	DECLARE @contextinfo VARBINARY(128) = CONVERT(VARBINARY(128), 'DEBUG_MODE_ON')
	EXEC sys.sp_set_session_context @key = N'DB_USER', @value = 'skhanal';
	
	DECLARE  @import_temp_table_name NVARCHAR(400),
		@table_name NVARCHAR(200) = NULL,
		@process_id NVARCHAR(200),
		@job_name NVARCHAR(300),
		@schedule_run NCHAR(1) = 'n',
		@exec_mode INT = 0,
		@import_from NVARCHAR(500) = NULL,
		@generic_mapping_flag NCHAR(1) = NULL,
		@rules_id INT = NULL,
		@import_flag NCHAR(1) = NULL,
		@rules_names NVARCHAR(MAX) = NULL,
		@drilldown_level	INT = 1,		-- 1: 1 level drill down	-- 2: 2 level drilldown (Old logic)
		@temp_header_table	NVARCHAR(128) = NULL,
		@run_in_debug_mode NCHAR(1) = NULL,
		@file_transfer_endpoint_id INT = NULL,
		@ftp_remote_directory NVARCHAR(1024) = NULL
		-- select * from adiha_process.dbo.ixp_deal_fees_0_bkarki_7539F00C_924F_4156_A1EA_DF5B1575509F

		SELECT @import_temp_table_name = 'adiha_process.dbo.ixp_delivery_path_template_0_bibash_5328DD42_B0BB_4D29_9D8E_3802CBD5B5E0'
			, @table_name				= 'ixp_delivery_path_template'
			, @process_id				= '5328DD42_B0BB_4D29_9D8E_3802CBD5B5E0'
			, @job_name					= 'ImportData_4CF510E6_AE50_44A1_87AD_359AC3C2F767'
			, @schedule_run				= 'n'
			, @exec_mode				= 12
			, @import_from				= NULL
			, @generic_mapping_flag		= 'a'
			, @rules_id					= 12569
			, @import_flag				= 't'
			, @rules_names				= 'Delivery Path'
			, @drilldown_level			= NULL
			, @temp_header_table		= NULL
			, @run_in_debug_mode		= 'n'

		EXEC spa_drop_all_temp_table
	select  @import_temp_table_name='adiha_process.dbo.ixp_source_deal_template_0_farrms_admin_540420C9_C2D9_4EBF_A586_77A255EDD95G',@table_name='ixp_source_deal_template',@process_id='540420C9_C2D9_4EBF_A586_77A255EDD95G',@job_name='ImportData_ED16AC6C_3540_4316_ADDB_E5AFCEE47B2E',@schedule_run='n', @exec_mode=12, @import_from=NULL, @generic_mapping_flag='a',@rules_id=12962,@import_flag='t', @rules_names='Deals',@drilldown_level= NULL, @temp_header_table=NULL, @run_in_debug_mode='n' 

-- * DEBUG QUERY END * */

DECLARE @sql								NVARCHAR(MAX),
		@sql2								NVARCHAR(MAX),
        @field_compare_table				NVARCHAR(800),
        @user_login_id						NVARCHAR(50) = dbo.FNADBUser(),
        @source_table						NVARCHAR(400),
        @count								INT,
        @url								NVARCHAR(MAX),
        @desc								NVARCHAR(MAX),
        @error_msg							NVARCHAR(1000),
        @error_code							NVARCHAR(5),
        @url_desc							NVARCHAR(250),
        @error_count						INT,
        @col								NVARCHAR(500),
        @s_tot								FLOAT,
        @d_tot								FLOAT,     
  		@baseload_block_type				NVARCHAR(10),
        @baseload_block_define_id			NVARCHAR(10),
        @min_date							DATETIME,
        @max_date							DATETIME,
        @alert_process_table				NVARCHAR(300),
        @report_position_deals				NVARCHAR(150),
        @move_to							NVARCHAR(512),
		@status								NVARCHAR(MAX),
		@dst_group_value_id					INT,
		@source_deal_header_ids				NVARCHAR(MAX),
		@final_stg_table					NVARCHAR(400) = ''--This variable is used to preserve original data set to avoid issue in debug mode where same script is run multiple times. In some template like ixp_meter_data_template original data is manupulated before proceeding to insert data in main table.
		, @total_columns					INT = NULL		
		, @source_ixp_column_mapping		NVARCHAR(200)		
		, @ixp_destination_column_mapping	NVARCHAR(200)	-- This variable is used to collect ixp_column and destination table column mapping.
		, @translate_language				BIT = 0
		, @destination_table_name			NVARCHAR(500)
		, @dest_columns_to_exclude			NVARCHAR(MAX)
		, @rebuild_updt_stmt				NVARCHAR(MAX)
		, @rebuild_status					NVARCHAR(MAX)
		, @dest_col_qry						NVARCHAR(1000)
		, @dest_ixp_col_qry					NVARCHAR(1000)
	SET	@final_stg_table  = @import_temp_table_name + '_pre'	
	SET @ixp_destination_column_mapping = dbo.FNAProcessTableName('ixp_destination_column_mapping', @user_login_id, @process_id)	
	SET @source_ixp_column_mapping = dbo.FNAProcessTableName('source_ixp_column_mapping', @user_login_id, @process_id)
		
	SELECT @translate_language = ISNULL(translate_language, 0) FROM import_process_info WHERE process_id = @process_id AND ixp_rule_id = @rules_id
	
	 /*	Used this table to maintain ixp_column and destination column relation. 
		Used to exclude columns missing in source and rebuild update statement excluding these columns.
		
	*/
	EXEC('DROP TABLE IF EXISTS ' + @ixp_destination_column_mapping + '
		CREATE TABLE ' + @ixp_destination_column_mapping + '(source_column_name NVARCHAR(100)
		, ixp_column_name NVARCHAR(100)
		, table_name NVARCHAR(100)
		, destination_column_name NVARCHAR(100)
		)')

	DROP TABLE IF EXISTS #destination_column_name 
	CREATE TABLE  #destination_column_name (table_name NVARCHAR(200), destination_column_name NVARCHAR(200))

	--Query is built here to avoid redundant code. These queries will be executed in a rule block to rebuild main update query. 
	SET @dest_ixp_col_qry = N'TRUNCATE TABLE ' + @ixp_destination_column_mapping + '
						INSERT INTO ' + @ixp_destination_column_mapping + '(source_column_name,ixp_column_name,table_name,destination_column_name)
							SELECT col.source_column_name
									, col.ixp_columns_name ixp_column_name
									, rs.[table_name]
									, rs.destination_column_name
								FROM #source_file_column_table col
								OUTER APPLY(
									SELECT t.[name] table_name,c.[name] destination_column_name
									FROM sys.tables t
									INNER JOIN dbo.FNASplit(''<destination_table_name>'','','') i ON i.item = t.[name]
									INNER JOIN sys.columns c ON  t.[object_id] = c.[object_id] 
										AND c.[name] = col.ixp_columns_name
								) rs
						'			
	SET @dest_col_qry = N'INSERT INTO #destination_column_name(table_name,destination_column_name)
		SELECT s2.table_name, s2.destination_column_name 	
		FROM ' + @ixp_destination_column_mapping + ' s2	
		LEFT JOIN ' + @source_ixp_column_mapping + ' s1 ON s1.ixp_column_name = s2.ixp_column_name
		WHERE s1.ixp_column_name is null
		'
	
    SELECT @dst_group_value_id = tz.dst_group_value_id
	FROM dbo.adiha_default_codes_values adcv
		INNER JOIN time_zones tz ON tz.timezone_id = adcv.var_value
	WHERE adcv.instance_no = 1
		AND adcv.default_code_id = 36
		AND adcv.seq_no = 1

	IF OBJECT_ID('tempdb..#tmp_udf_values_combo') IS NOT NULL
		DROP TABLE #tmp_udf_values_combo
	CREATE TABLE #tmp_udf_values_combo (
		field_label NVARCHAR(2000) COLLATE DATABASE_DEFAULT,
		udf_value NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		value_id NVARCHAR(500) COLLATE DATABASE_DEFAULT
	)

	DECLARE @sql_string_c NVARCHAR(MAX),@temp_id_c INT,@field_label_c NVARCHAR(1000),@input_value_c NVARCHAR(MAX)

IF @drilldown_level IS NULL
SET @drilldown_level = 1

CREATE TABLE [#tmp_staging_table] (
	[meter_id] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	[channel] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
 	[date] NVARCHAR(20) COLLATE DATABASE_DEFAULT,
 	[hour] NVARCHAR(5) COLLATE DATABASE_DEFAULT,
 	[value] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	[h_filename] NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL, 
 	[h_error] NVARCHAR(1000) COLLATE DATABASE_DEFAULT NULL, 
 	[d_filename] NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL, 
 	[d_error] NVARCHAR(1000) COLLATE DATABASE_DEFAULT NULL,
 	[period] NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL,
 	[granularity] NVARCHAR(600) COLLATE DATABASE_DEFAULT NULL,
	[is_dst] NVARCHAR(2) COLLATE DATABASE_DEFAULT NULL,
)
 
 CREATE TABLE #tmp_missing_meter_id (meter_id NVARCHAR(100) COLLATE DATABASE_DEFAULT)    
 CREATE TABLE #tmp_mv90_data_hour (
 		[meter_id] INT,
 		[channel] INT,
 		[prod_date] DATETIME,
 		[Hr1] FLOAT,
 		[Hr2] FLOAT,
 		[Hr3] FLOAT,
 		[Hr4] FLOAT,
 		[Hr5] FLOAT,
 		[Hr6] FLOAT,
 		[Hr7] FLOAT,
 		[Hr8] FLOAT,
 		[Hr9] FLOAT,
 		[Hr10] FLOAT,
 		[Hr11] FLOAT,
 		[Hr12] FLOAT,
 		[Hr13] FLOAT,
 		[Hr14] FLOAT,
 		[Hr15] FLOAT,
 		[Hr16] FLOAT,
 		[Hr17] FLOAT,
 		[Hr18] FLOAT,
 		[Hr19] FLOAT,
 		[Hr20] FLOAT,
 		[Hr21] FLOAT,
 		[Hr22] FLOAT,
 		[Hr23] FLOAT,
 		[Hr24] FLOAT,
 		[Hr25] FLOAT,
 		period INT) 

CREATE TABLE [#temp_summary1](
 		[meter_id] INT,
 		[gen_date] DATETIME,
 		[from_date] DATETIME,
 		[to_date] DATETIME,
 		[channel] INT,
 		[volume] FLOAT) 
				        
EXEC ('IF NOT EXISTS(
 		   SELECT 1
 		   FROM   adiha_process.sys.columns
 		   WHERE  [name] = ''temp_id''
 				  AND [object_id] = OBJECT_ID(''' + @import_temp_table_name + ''')
 		)
 		ALTER TABLE ' + @import_temp_table_name + ' ADD temp_id INT IDENTITY'
     )
 --PRINT 'start [spa_ixp_generic_import_job]'
 
   
     
CREATE TABLE #import_status (
 	temp_id           INT,
 	process_id        NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	error_code        NVARCHAR(50) COLLATE DATABASE_DEFAULT,
 	[module]          NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	[source]          NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	[type]            NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	[description]     NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 	[next_step]       NVARCHAR(250) COLLATE DATABASE_DEFAULT,
 	type_error        NVARCHAR(500) COLLATE DATABASE_DEFAULT,
 	external_type_id  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 	import_file_name  NVARCHAR(2000) COLLATE DATABASE_DEFAULT
)

CREATE TABLE #error_status (
	temp_id INT, 
	error_number INT, 
	template_values NVARCHAR(2000) COLLATE DATABASE_DEFAULT, 
	import_file_name NVARCHAR(MAX) COLLATE DATABASE_DEFAULT, 
	message_status NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
	message_type NVARCHAR(1000) COLLATE DATABASE_DEFAULT, 
	recommendation NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
	error_row_id INT
)

CREATE TABLE #look_up_tables(
	referred_table NVARCHAR(255) COLLATE DATABASE_DEFAULT, 
	referring_clm_name NVARCHAR(255) COLLATE DATABASE_DEFAULT, 
	filters NVARCHAR(MAX) COLLATE DATABASE_DEFAULT, 
	flag NCHAR(1) COLLATE DATABASE_DEFAULT
)
 
CREATE TABLE #vol_check	(s_tot FLOAT,d_tot FLOAT,norec INT)
CREATE TABLE #total_deals_proceed(tot_deals INT)
 
CREATE TABLE #temp_tot_count (
 	totcount  INT,
 	[source]  NVARCHAR(50) COLLATE DATABASE_DEFAULT
)
 
EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
 	        FROM ' + @import_temp_table_name)

--SET @field_compare_table = 'adiha_process.dbo.fields_' + ISNULL(@table_name, 'temp_table_') + '_' + @user_login_id + '_' + RIGHT(dbo.FNAGetNewID(), 12)
SET @field_compare_table = dbo.FNAProcessTableName('fields' + ISNULL(@table_name, 'temp_table_'), @user_login_id, RIGHT(dbo.FNAGetNewID(), 12))
DECLARE @look_up_tables NVARCHAR(500)
SET @look_up_tables = dbo.FNAProcessTableName('lookup_validation_' + ISNULL(@table_name, 'temp_table'), @user_login_id, @process_id)
 --exec('drop table '+@field_compare_table)
 
EXEC (' CREATE TABLE ' + @field_compare_table + ' (
         	ref_table_name  NVARCHAR(50) COLLATE DATABASE_DEFAULT,
         	ref_field       NVARCHAR(50) COLLATE DATABASE_DEFAULT,
         	validate_field  NVARCHAR(50) COLLATE DATABASE_DEFAULT
         )'
)

EXEC (' DROP TABLE IF EXISTS ' + @look_up_tables + '  
		CREATE TABLE ' + @look_up_tables + ' (
         	referred_table NVARCHAR(255) COLLATE DATABASE_DEFAULT, 
			referring_clm_name NVARCHAR(255) COLLATE DATABASE_DEFAULT, 
			filters NVARCHAR(MAX) COLLATE DATABASE_DEFAULT, 
			flag NCHAR(1) COLLATE DATABASE_DEFAULT
         )'
)
 
/************USE vw_date_details to remove data functions************/
IF OBJECT_ID('tempdb..#date_details') IS NOT NULL	
		DROP TABLE #date_details
	
CREATE TABLE #date_details(
	sql_date_value  DATETIME,
	user_date	    NVARCHAR(10) COLLATE DATABASE_DEFAULT,
	sql_date_string NVARCHAR(10) COLLATE DATABASE_DEFAULT
)
INSERT INTO #date_details (sql_date_value, user_date, sql_date_string)
SELECT dd.sql_date_value, dd.user_date, dd.sql_date_string
FROM [vw_date_details] dd

CREATE INDEX idx_date_details ON #date_details(sql_date_value)

/******use of date_details ends*****/

/********Table to use for display column name mapped in the rule************/
IF OBJECT_ID('tempdb..#source_file_column_table') IS NOT NULL	
		DROP TABLE #source_file_column_table

CREATE TABLE #source_file_column_table (
	rule_id				INT, 
	rule_name			NVARCHAR(500)	 COLLATE DATABASE_DEFAULT,
	ixp_tables_id		INT,
	ixp_tables_name		NVARCHAR(500)	 COLLATE DATABASE_DEFAULT,
	ixp_columns_id		INT,
	ixp_columns_name	NVARCHAR(50) COLLATE DATABASE_DEFAULT,
	source_column_name	NVARCHAR(50) COLLATE DATABASE_DEFAULT,
	seq					INT,
	is_major			INT
)

INSERT INTO #source_file_column_table(rule_id				
					   , ixp_tables_id		
					   , ixp_columns_id		
					   , ixp_columns_name	
					   , source_column_name	
					   , seq					
					   , is_major)
SELECT rule_id				
	, ixp_tables_id		
	, ixp_columns_id		
	, ixp_columns_name	
	, source_column_name	
	, seq					
	, is_major
FROM dbo.FNAGetIXPSourceColumn(@rules_id,@table_name, @translate_language,0)

--select * from #source_file_column_table

/**********insert into #source_file_column_table ends*********/

IF OBJECT_ID('tempdb..#import_status_major_row_values') IS NOT NULL
 	DROP TABLE #import_status_major_row_values
CREATE TABLE #import_status_major_row_values (
	  temp_id INT
	, major_row_values NVARCHAR(4000) COLLATE DATABASE_DEFAULT
)

DECLARE @major_row NVARCHAR(MAX) = '', @major_row_select NVARCHAR(MAX) = ''
IF EXISTS(SELECT 1 FROM #source_file_column_table WHERE is_major =1)
BEGIN
	SELECT	@major_row = CASE WHEN @major_row = '' THEN @major_row ELSE @major_row + ' / ' END + source_column_name,
			@major_row_select = CASE WHEN @major_row_select = '' THEN @major_row_select ELSE @major_row_select + '+'' / ''+' END + 'ISNULL(CAST(tmp.' + ixp_columns_name + ' AS NVARCHAR),'''')'
	FROM #source_file_column_table 
	WHERE is_major = 1

	DECLARE @sql_major_rows_val NVARCHAR(MAX)
	SET @sql_major_rows_val = '
		INSERT INTO #import_status_major_row_values (temp_id, major_row_values) 
		SELECT temp_id, N''' + @major_row + ' : '' + ' +  @major_row_select + ' FROM ' + @import_temp_table_name + ' tmp'
	EXEC(@sql_major_rows_val)
END
IF @table_name = 'ixp_deal_price_template' 
BEGIN  
	--Step 1: Collect total row count NA
	--Step 2: Update source data
	--Step 2.1: Date fields
	--Date field conversion not handled yet.

	--Step 2.2:Static fields
	EXEC('UPDATE ' + @import_temp_table_name + ' 
			SET include_weekends = CASE WHEN include_weekends = ''yes'' THEN ''y'' 
										WHEN include_weekends = ''no'' THEN ''n'' 
									END
				, pricing_aggregation = CASE WHEN pricing_aggregation = ''sum'' THEN ''s'' 
										WHEN pricing_aggregation = ''wacog'' THEN ''w'' 
										WHEN pricing_aggregation = ''average'' THEN ''a'' 
									END
				, include_event_date = CASE WHEN include_event_date = ''yes'' THEN ''y'' 
										WHEN include_event_date = ''no'' THEN ''n'' 
									END
				, tiered = CASE WHEN tiered = ''yes'' THEN ''y'' 
										WHEN tiered = ''no'' THEN ''n'' 
									END
		')
		
	--Step 3: Validation
	--Step 3.1: Data Repetition 

	--Step 3.2: Validate source data field type 
	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_price_deemed'', ''include_weekends'', ''include_weekends'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''pricing_type'', ''pricing_aggregation'')')
	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name

	--Step 3.3: Validate mandatory field 
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 '' Pricing Type is null.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  WHERE 1 = 1  AND NULLIF(a.pricing_type,'''') IS NULL
			
			')
	--Step 3.4: Lookup table ie data existence in system like static data, counterparty etc. 
			
			--Deal and its specified terms
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Deal ID '''''' +  a.deal_id + '''''' or its specified term '''''' + a.term_start + '''''' -  '''''' + a.term_end + '''''' is not available in the system. '',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
		  LEFT JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
				AND sdd.leg = a.leg
				AND sdd.term_start >= a.term_start
				AND sdd.term_end <= a.term_end
		  WHERE 1 = 1  AND sdd.source_deal_detail_id IS NULL
			
			'
			)

	--Check Pricing Type
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 '' Pricing Type '''''' + a.pricing_type + '''''' does not exist in system. ''  ,
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN static_data_value sdv_pt ON sdv_pt.type_id = 103600 AND sdv_pt.code = a.pricing_type
		  WHERE 1 = 1  AND sdv_pt.value_id IS NULL AND a.pricing_type IS NOT NULL
			
			'
			)

	--pricing index
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Pricing Index '''''' +  ISNULL(a.pricing_index, '''''''') + '''''' does not exist in system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.pricing_index 
		  WHERE 1 = 1  AND spcd.source_curve_def_id IS NULL  AND a.pricing_index IS NOT NULL
			
			')

	--Check Event Pricing Method generic mapping details.
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Standard Event '''''' +   ISNULL(a.event, '''''''') + '''''' does not exists in system.'',
 				 ''Please check ''''Event Pricing Method'''' mapping.'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN generic_mapping_values gmv ON gmv.clm1_value = a.event
		  LEFT JOIN generic_mapping_header gmh ON gmh.mapping_table_id  = gmv.mapping_table_id 
			AND gmh.mapping_name = ''Event Pricing Method'' 
		  WHERE 1 = 1  AND gmh.mapping_table_id IS NULL  AND a.event IS NOT NULL
			
			')

	--Check Event Type
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 '' Event Type '''''' + ISNULL(a.event_type, '''''''') + '''''' does not exist in system.''  ,
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN static_data_value sdv_et ON sdv_et.type_id = 37800 AND sdv_et.code = a.event_type	 
		  WHERE 1 = 1  AND sdv_et.value_id IS NULL AND a.event_type IS NOT NULL
			
			'
			)
		--Check Formula
			EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Formula '''''' +  ISNULL(a.formula, '''''''') + '''''' does not exist in system. '' ,
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN formula_editor b ON b.formula_name = a.formula
		  WHERE 1 = 1  AND b.formula_id IS NULL AND a.formula IS NOT NULL
			
			'
			)

	--pricing period
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Pricing Period '''''' +  ISNULL(a.pricing_period, '''''''') + '''''' does not exist in system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN static_data_value sdv_pp ON sdv_pp.type_id = 106600 AND sdv_pp.code = a.pricing_period 
		  WHERE 1 = 1  AND sdv_pp.value_id IS NULL  AND a.pricing_period IS NOT NULL
			
			')

	--Step 4: Delete error marked data from final process table 
	EXEC('DELETE a 
             FROM #import_status i 
             INNER JOIN ' + @import_temp_table_name + ' a ON i.temp_id = a.temp_id 
            WHERE i.error_code = ''Error''' 
        ) 

	--Step 5 Import to respective main table 
	
	DECLARE @deal_pricing_detail NVARCHAR(100), @deal_pricing_position_deals NVARCHAR(100)
	SET @deal_pricing_detail = dbo.FNAProcessTableName('deal_pricing_detail', dbo.FNADBUser(), @process_id)

	EXEC('IF OBJECT_ID(N''' + @deal_pricing_detail + ''', N''U'') IS NOT NULL
			DROP TABLE ' + @deal_pricing_detail + ' 		
	')
	
	--collect deal detail
	SET @sql = 'SELECT a.temp_id, a.deal_id, a.term_start, a.term_end,a.leg, sdh.source_deal_header_id
				, sdd.source_deal_detail_id
			INTO ' + @deal_pricing_detail + '
			FROM ' + @import_temp_table_name + ' a
			INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
			INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
			WHERE 1 = 1
				AND sdd.leg = a.leg
				AND sdd.term_start >= a.term_start
				AND sdd.term_end <= a.term_end
			'
	--select @sql
	EXEC (@sql)
	--exec('select 1,* from ' + @deal_pricing_detail)	
		
	--source_deal_detail
	SET @sql = 'UPDATE sdd
			SET pricing_type = a.pricing_aggregation,
				tiered = a.tiered
			FROM ' + @import_temp_table_name + ' a
			INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id
			INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = i.source_deal_detail_id
			'
			--select 'source_deal_detail' table_name,@sql
	EXEC (@sql)
	--deal_price_type
	
	--delete data for deal detail and insert again
	
	SET @sql = 'DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id  
		INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id    
		INNER JOIN deal_price_custom_event d ON d.deal_price_type_id = dpt.deal_price_type_id

		DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id 
		INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id    
		INNER JOIN deal_price_std_event d ON d.deal_price_type_id = dpt.deal_price_type_id
		  
		DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id  
		INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id    
		INNER JOIN deal_price_deemed d ON d.deal_price_type_id = dpt.deal_price_type_id  
				
		DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id 
		INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id    
		INNER JOIN deal_price_adjustment d ON d.deal_price_type_id = dpt.deal_price_type_id
		
		DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id 
		INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id    
		INNER JOIN deal_detail_formula_udf d ON d.deal_price_type_id = dpt.deal_price_type_id

		DELETE d 
		FROM ' + @import_temp_table_name + ' a    
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id     
		INNER JOIN deal_price_type d ON d.source_deal_detail_id = i.source_deal_detail_id
				
		'
		--select @sql
		EXEC(@sql)
	

	SET @sql = 'INSERT INTO deal_price_type(
			source_deal_detail_id
			, price_type_id
			, description
			, priority
		)
		SELECT i.source_deal_detail_id
			, sdv_pt.value_id
			, a.pricing_description
			, a.priority
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id
		LEFT JOIN static_data_value sdv_pt ON sdv_pt.type_id = 103600 AND sdv_pt.code = a.pricing_type
		WHERE 1 = 1
		ORDER BY i.source_deal_detail_id,a.priority
		'
		--select 'deal_price_type' table_name, @sql
		
	EXEC (@sql)

	--select * from deal_price_deemed
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO deal_price_deemed(
		 source_deal_detail_id
		, currency
		, fixed_price
		, pricing_uom
		, pricing_index
		, pricing_period
		, pricing_start
		, pricing_end
		, adder
		, multiplier
		, adder_currency
		, rounding
		, include_weekends
		, formula_id
		, formula_currency
		, fixed_cost
		, fixed_cost_currency
		, volume
		, uom
		, [priority]
		, deal_price_type_id
		, pricing_provisional
		--, pricing_type
		)
		SELECT i.source_deal_detail_id    
			, CASE WHEN sdv_pt.value_id = 103600 THEN sc.source_currency_id ELSE NULL END     
			, CASE WHEN sdv_pt.value_id = 103600 THEN a.fixed_price ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103600 THEN su.source_uom_id ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 THEN spcd.source_curve_def_id ELSE NULL END      
			, CASE WHEN sdv_pt.value_id = 103601 THEN sdv_pp.value_id ELSE NULL END       
			, CASE WHEN sdv_pt.value_id = 103601 AND a.pricing_period IN (''Deemed'',''COD'') THEN  a.pricing_start ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 AND a.pricing_period IN (''Deemed'',''COD'')  THEN a.pricing_end ELSE NULL END  
			, CASE WHEN sdv_pt.value_id = 103601 THEN a.adder ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 THEN a.multiplier ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 THEN sc_ca.source_currency_id ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 THEN a.rounding ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103601 THEN a.include_weekends ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103602 THEN fe.formula_id ELSE NULL END     
			, CASE WHEN sdv_pt.value_id = 103602 THEN sc_fc.source_currency_id ELSE NULL END      
			, CASE WHEN sdv_pt.value_id = 103604 THEN a.fixed_cost ELSE NULL END    
			, CASE WHEN sdv_pt.value_id = 103604 THEN sc_fcc.source_currency_id ELSE NULL END    
			, a.volume   
			, su_vol.source_uom_id    
			, dpt.[priority]    
			, dpt.deal_price_type_id 
			, ''p''       
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id    
	INNER JOIN static_data_value sdv_pt ON sdv_pt.type_id = 103600 AND sdv_pt.code = a.pricing_type  
	INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id     
		AND  dpt.price_type_id = sdv_pt.value_id     AND dpt.priority = a.priority  
	LEFT JOIN  source_currency sc ON sc.currency_id = a.pricing_currency   
	LEFT JOIN  source_uom su ON su.uom_id = a.pricing_uom   
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.pricing_index   
	LEFT JOIN static_data_value sdv_pp ON sdv_pp.type_id = 106600 AND sdv_pp.code = a.pricing_period 
	LEFT JOIN  source_currency sc_ca ON sc_ca.currency_id = a.adder_currency  
	LEFT JOIN  source_currency sc_fc ON sc_fc.currency_id = a.formula_currency   
	LEFT JOIN  source_currency sc_fcc ON sc_fcc.currency_id = a.fixed_cost_currency  
	LEFT JOIN  source_uom su_vol ON su_vol.uom_id = a.volume_uom  
	LEFT JOIN formula_editor fe ON fe.formula_name = a.formula 
	WHERE 1 = 1
		AND sdv_pt.value_id IN (103600,103601,103602,103604)
	'
		--select 'deal_price_deemed' table_name, @sql
	EXEC (@sql)
	
	--select * from deal_price_std_event just started incomplete changes
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO deal_price_std_event(
		source_deal_detail_id
		, pricing_index
		, adder
		, currency
		, multiplier
		, rounding
		, event_type
		, event_date
		, pricing_month
		, volume
		, uom
		, deal_price_type_id
		, pricing_provisional
		--event_pricing_type
		--pricing_type
	)
	SELECT i.source_deal_detail_id
		, CASE WHEN sdv_pt.value_id = 103603 THEN spcd.source_curve_def_id ELSE NULL END 		
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.adder ELSE NULL END       
		, CASE WHEN sdv_pt.value_id = 103603 THEN sc_ca.source_currency_id ELSE NULL END  
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.multiplier ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.rounding ELSE NULL END   
		, CASE WHEN sdv_pt.value_id = 103603 THEN gmv.generic_mapping_values_id ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.event_date ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.pricing_month ELSE NULL END   
		, CASE WHEN sdv_pt.value_id = 103603 THEN a.volume ELSE NULL END       
		, CASE WHEN sdv_pt.value_id = 103603 THEN su_vol.source_uom_id ELSE NULL END
		, dpt.deal_price_type_id
		, ''p''
		--event_pricing_type
		--pricing_type
		
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id
	INNER JOIN static_data_value sdv_pt ON sdv_pt.type_id = 103600 AND sdv_pt.code = a.pricing_type  
	INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id     
		AND  dpt.price_type_id = sdv_pt.value_id     AND dpt.priority = a.priority 	
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.pricing_index 
	LEFT JOIN  source_currency sc_ca ON sc_ca.currency_id = a.adder_currency  
	LEFT JOIN  source_uom su_vol ON su_vol.uom_id = a.volume_uom
	LEFT JOIN generic_mapping_header gmh ON gmh.mapping_name = ''Event Pricing Method''
	LEFT JOIN generic_mapping_values gmv ON gmv.mapping_table_id =  gmh.mapping_table_id and gmv.clm1_value = a.event
	WHERE 1 = 1 AND sdv_pt.value_id = 103603

	'
		--select 'deal_price_std_event' table_name, @sql
	EXEC (@sql)
	 
	--select * from deal_price_custom_event 
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO deal_price_custom_event(
		source_deal_detail_id
		, pricing_index
		, adder
		, currency
		, multiplier
		, rounding
		, include_holidays
		, event_type
		, event_date
		, pricing_month
		, skip_days
		, skip_granularity
		, quotes_before
		, quotes_after
		, include_event_date
		, volume
		, uom
		, deal_price_type_id
		, pricing_provisional
		--, pricing_type
	)
	SELECT i.source_deal_detail_id
		, CASE WHEN sdv_pt.value_id = 103605 THEN spcd.source_curve_def_id ELSE NULL END 		
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.adder ELSE NULL END       
		, CASE WHEN sdv_pt.value_id = 103605 THEN sc_ca.source_currency_id ELSE NULL END 
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.multiplier ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.rounding ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.include_weekends ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103605 THEN sdv_et.value_id ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.event_date ELSE NULL END    
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.pricing_month ELSE NULL END  
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.skip_period ELSE NULL END  
		, CASE WHEN sdv_pt.value_id = 103605 THEN sdv_sg.value_id ELSE NULL END
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.quotes_before ELSE NULL END
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.quotes_after ELSE NULL END
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.include_event_date ELSE NULL END  
		, CASE WHEN sdv_pt.value_id = 103605 THEN a.volume ELSE NULL END 
		, CASE WHEN sdv_pt.value_id = 103605 THEN su_vol.source_uom_id ELSE NULL END 
		, dpt.deal_price_type_id
		, ''p''
		--, pricing_type
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN ' + @deal_pricing_detail + ' i ON a.temp_id = i.temp_id
	INNER JOIN static_data_value sdv_pt ON sdv_pt.type_id = 103600 AND sdv_pt.code = a.pricing_type  
	INNER JOIN deal_price_type dpt ON dpt.source_deal_detail_id = i.source_deal_detail_id     
		AND  dpt.price_type_id = sdv_pt.value_id  AND dpt.priority = a.priority 	
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.pricing_index 
	LEFT JOIN  source_currency sc_ca ON sc_ca.currency_id = a.adder_currency  
	LEFT JOIN static_data_value sdv_et ON sdv_et.type_id = 37800 AND sdv_et.code = a.event_type	  
	LEFT JOIN static_data_value sdv_sg ON sdv_sg.type_id = 700 AND sdv_sg.code = a.skip_granularity
	LEFT JOIN  source_uom su_vol ON su_vol.uom_id = a.volume_uom
	WHERE 1 = 1  AND sdv_pt.value_id = 103605

	'
		--select 'deal_price_custom_event' table_name, @sql
	EXEC (@sql) 
	
	--Recalc deal position
	SET @deal_pricing_position_deals =dbo.FNAProcessTableName('report_position', @user_login_id,@process_id)
	EXEC ('CREATE TABLE ' + @deal_pricing_position_deals + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
 	SET @sql = 'INSERT INTO ' + @deal_pricing_position_deals + '(source_deal_header_id,action) 
 				SELECT  t.source_deal_header_id,
 				       ''u''
 				FROM ' + @deal_pricing_detail + ' t
  		        GROUP BY t.source_deal_header_id'
 	EXEC(@sql)
	
	DECLARE @post_price_import_job NVARCHAR(300) 
	SET @post_price_import_job =  'calc_position_breakdown_post_price_import_' + @process_id
 	SET @sql = 'spa_calc_deal_position_breakdown NULL,'''+@process_id+''''

 	EXEC spa_run_sp_as_job @post_price_import_job,  @sql, 'generating_report_table', @user_login_id
END 

IF @table_name = 'ixp_rec_sales_transfer_import_template'
BEGIN

	-- Data mismatch validation 
	EXEC ('DELETE ' + @field_compare_table)
 	        
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''deal_date'',''date_transfer'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''schedule_volume'',''quantity'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''rec_generator'', ''wregis_gu_id'', ''a.wregis_gu_id = b.code'', ''e''),
			(''source_counterparty'', ''transferee'', ''a.transferee = b.counterparty_id'', ''e''),
			(''source_counterparty'', ''transferor'', ''a.transferor = b.counterparty_id'', ''e''),
			(''static_data_value'', ''state'', ''a.state = b.code AND b.type_id = 10002'', ''e''),
			(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''e'')'
		)
	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Data Missing Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10001,
		  CASE 
			  WHEN a.year IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage'')
			  WHEN a.month IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Month'')
			  WHEN a.quantity IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume'')
			  WHEN a.transferee IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Transferre'')
			  WHEN a.state IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction'')
			  WHEN a.tier IS NULL THEN
			  	  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Tier'')
		  END
 		  ,a.import_file_name
		  FROM '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (a.year IS NULL
				   OR a.month IS NULL
				   OR a.quantity IS NULL
				   OR a.transferee IS NULL
				   OR a.state IS NULL
				   OR a.tier IS NULL
				)
	')

	-- Invalid Vintage
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage''),''<column_value>'',a.year),
 		  a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND ISDATE(a.year + ''-01-01'') = 0
			  AND a.year IS NOT NULL
	')

	-- Invalid Month
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Month''),''<column_value>'',a.month),
 		  a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (ISNUMERIC(a.month) = 0
			  OR a.month NOT BETWEEN 1 AND 12)
			  AND a.month IS NOT NULL
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10019,
				 dbo.FNABuildNameValueXML('''', ''<custom_message>'', ''Buy deal not found for Vintage, Month and Generator: '' + ISNULL(a.year, ''NULL'')  + '','' + ISNULL(a.month, ''NULL'') + '','' + ISNULL(a.wregis_gu_id, ''NULL'')),
 				 a.import_file_name 		     
 		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		  LEFT JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		  	  AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
		  	  AND sdh.header_buy_sell_flag = ''b''
 		  WHERE sdh.source_deal_header_id IS NULL
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10019,
				 dbo.FNABuildNameValueXML('''', ''<custom_message>'', ''Sell deal for Vintage, Month and Generator: '' + ISNULL(a.year, ''NULL'')  + '','' +ISNULL(a.month, ''NULL'') + '','' +ISNULL(a.wregis_gu_id, ''NULL'')   +  '' is already matched''),
 				 a.import_file_name 	 		  		
 		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		  LEFT JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		  	  AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
		  	  AND sdh.header_buy_sell_flag = ''s''
		  LEFT JOIN matching_header_detail_info mhdi
			  ON mhdi.source_deal_header_id_from = sdh.ext_deal_id
			  AND mhdi.source_deal_header_id = sdh.source_deal_header_id
		  LEFT JOIN #error_status ON #error_status.temp_id = a.temp_id
		  WHERE mhdi.id IS NOT NULL AND #error_status.temp_id IS NULL
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10019,
				 CASE WHEN gs_s.value_id IS NULL THEN
						  dbo.FNABuildNameValueXML('''', ''<custom_message>'', ''Jurisdiction: '' + ISNULL(a.state, ''NULL'')  + '' is not valid for the Buy deal'')
					  WHEN gs_t.value_id IS NULL THEN 
						  dbo.FNABuildNameValueXML('''', ''<custom_message>'', ''Tier: '' + ISNULL(a.tier, ''NULL'')  + '' is not valid for the Buy deal'')
				END,
 				a.import_file_name 		  		
 		  FROM   ' + @import_temp_table_name + ' a	
		  INNER JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		  INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		  	  AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
		  	  AND sdh.header_buy_sell_flag = ''b''
		  INNER JOIN source_deal_detail sdd
			  ON sdd.source_deal_header_id = sdh.source_deal_header_id
		   OUTER APPLY( select gs.source_certificate_number , sdv.value_id
					   from static_data_value sdv
					   LEFT JOIN gis_certificate gs
						   ON sdv.value_id = gs.state_value_id
					   WHERE gs.source_deal_header_id = sdd.source_deal_detail_id
						   AND sdv.code = a.state
		  ) gs_s
		  OUTER APPLY( select gs.source_certificate_number , sdv.value_id
					   from static_data_value sdv
					   LEFT JOIN gis_certificate gs
						   ON sdv.value_id = gs.tier_type
					   WHERE gs.source_deal_header_id = sdd.source_deal_detail_id
						   AND sdv.code = a.tier
		  ) gs_t
		  LEFT JOIN #error_status ON #error_status.temp_id = a.temp_id
		  WHERE sdh.source_deal_header_id IS NOT NULL 
			  AND ((gs_s.value_id IS NULL AND gs_s.source_certificate_number IS NULL) OR
				   (gs_t.value_id IS NULL AND gs_t.source_certificate_number IS NULL))
			  AND #error_status.temp_id IS NULL
	')

	--Error if quantity is greater than sell volume or buy volume
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10010,
				 dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume''), ''<column_value>'', a.quantity), ''<column_name1>'', ''Available Volume''),
 				 a.import_file_name
 		  FROM   ' + @import_temp_table_name + ' a
		  INNER JOIN rec_generator rg ON rg.name = a.wregis_gu_id		
		  INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		  AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
			  AND sdh.header_buy_sell_flag = ''b''
		  INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id
			  AND sdh.entire_term_start = sdd.term_start
		  INNER JOIN source_counterparty sc ON sc.counterparty_id = a.transferee 
		  LEFT JOIN source_deal_header sdh1 
			  ON sdh1.generator_id = sdh.generator_id
			  AND sdh1.entire_term_start = sdh.entire_term_start
			  AND sdh1.entire_term_end = sdh.entire_term_end
			  AND sdh1.source_system_id = sdh.source_system_id
			  AND sdh1.source_system_book_id1 = sdh.source_system_book_id1
			  AND sdh1.source_system_book_id2 = sdh.source_system_book_id2
			  AND sdh1.source_system_book_id3 = sdh.source_system_book_id3
			  AND sdh1.source_system_book_id4 = sdh.source_system_book_id4
			  AND sdh1.header_buy_sell_flag = ''s''
			  AND sdh1.is_environmental = ''y''	  
		  LEFT JOIN #error_status ON #error_status.temp_id = a.temp_id
		  OUTER APPLY(
						SELECT sdd.volume_left , sdd.source_deal_detail_id 
						FROM source_deal_detail sdd
						INNER JOIN source_deal_header sdh_buy ON sdd.source_deal_header_id = sdh_buy.source_deal_header_id 
						WHERE sdh.source_deal_header_id = sdh_buy.source_deal_header_id
		  ) buy
		  OUTER APPLY(
						SELECT sdd.schedule_volume, sdd.source_deal_detail_id 
						FROM source_deal_detail sdd
						INNER JOIN source_deal_header sdh_sell ON sdd.source_deal_header_id  = sdh_sell.source_deal_header_id 
						WHERE sdh1.source_deal_header_id  = sdh_sell.source_deal_header_id 
		  ) sell
		  WHERE sdh1.source_deal_header_id IS NOT NULL
 				AND #error_status.temp_id IS NULL
				AND (a.quantity > buy.volume_left OR a.quantity > sell.schedule_volume)
	')

	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
	')

	DECLARE @assignment_type INT,
			@deal_id INT,
			@state_id INT,
			@tier_id INT

	SELECT @state_id = type_id from static_data_type where type_name = 'Compliance Jurisdictions'
	SELECT @tier_id = type_id from static_data_type where type_name = 'tier'
		
	SELECT @deal_id = MAX(source_deal_header_id)  FROM source_deal_header
		
	SELECT @assignment_type = value_id 
	FROM static_data_value 
	WHERE type_id = 10013 
		AND code = 'Sold/Transfer'
	
	IF OBJECT_ID('tempdb..#inserted_source_deal_header_id') IS NOT NULL
		DROP TABLE #inserted_source_deal_header_id

	CREATE TABLE #inserted_source_deal_header_id(source_deal_header_id INT, unique_deal_tier_id INT, quantity FLOAT)

	--TO DO: Need to insert into #inserted_source_deal_header_id for deal present and not matched
	EXEC(' INSERT INTO #inserted_source_deal_header_id (source_deal_header_id, unique_deal_tier_id)
		   SELECT sdh1.source_deal_header_id, sdh.source_deal_header_id
		   FROM  ' + @import_temp_table_name + ' a
		   INNER JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		   INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
			   AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
		   	   AND sdh.header_buy_sell_flag = ''b''
		   INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id
		   	   AND sdh.entire_term_start = sdd.term_start
		   INNER JOIN source_counterparty sc ON sc.counterparty_id = a.transferee 
		   LEFT JOIN source_deal_header sdh1 
			   ON sdh1.generator_id = sdh.generator_id
			   AND sdh1.entire_term_start = sdh.entire_term_start
			   AND sdh1.entire_term_end = sdh.entire_term_end
			   AND sdh1.source_system_id = sdh.source_system_id
			   AND sdh1.source_system_book_id1 = sdh.source_system_book_id1
			   AND sdh1.source_system_book_id2 = sdh.source_system_book_id2
			   AND sdh1.source_system_book_id3 = sdh.source_system_book_id3
			   AND sdh1.source_system_book_id4 = sdh.source_system_book_id4
			   AND sdh1.header_buy_sell_flag = ''s''
			   AND sdh1.is_environmental = ''y''	  
		   WHERE sdh1.source_deal_header_id IS NOT NULL'
	)


	-- insert into source_deal_header
	SET @sql = '
		INSERT INTO  source_deal_header
		(
			source_system_id, deal_id, deal_date, ext_deal_id, physical_financial_flag, structured_deal_id, counterparty_id, commodity_id, entire_term_start, entire_term_end, 
			source_deal_type_id, deal_sub_type_type_id, option_flag, option_type, option_excercise_type, sub_book, source_system_book_id1, source_system_book_id2, 
			source_system_book_id3, source_system_book_id4, description1, description2, description3, deal_category_value_id, trader_id, 
			internal_deal_type_value_id, internal_deal_subtype_value_id, template_id, header_buy_sell_flag, broker_id, 
			generator_id, status_date, assignment_type_value_id, compliance_year, state_value_id, tier_value_id,
			assigned_date, assigned_by, deal_status, is_environmental
		) OUTPUT inserted.source_deal_header_id, INSERTED.ext_deal_id INTO #inserted_source_deal_header_id (source_deal_header_id, unique_deal_tier_id)
		--) OUTPUT '''', INSERTED.ext_deal_id INTO #inserted_source_deal_header_id (source_deal_header_id, unique_deal_tier_id)
		SELECT     
			sdh.source_system_id  
			, ''Assigned-'' + CAST(sdh.source_deal_header_id AS NVARCHAR(10)) AS deal_id
			, a.date_transfer deal_date
			, CAST(sdh.source_deal_header_id AS NVARCHAR) ext_deal_id		
			, sdh.physical_financial_flag
			, NULL AS structured_deal_id
			, sc.source_counterparty_id
			, sdh.commodity_id
			, sdh.entire_term_start AS entire_term_start
			, sdh.entire_term_end  AS entire_term_end 
			, sdh.source_deal_type_id
			, sdh.deal_sub_type_type_id
			, sdh.option_flag
			, sdh.option_type
			, sdh.option_excercise_type
			, sdh.sub_book
			, sdh.source_system_book_id1
			, sdh.source_system_book_id2 
			, sdh.source_system_book_id3
			, sdh.source_system_book_id4 
			, (''' + cast(@assignment_type as NVARCHAR(10))+ ''' + '' FROM deal '' + CAST(sdh.source_deal_header_id AS NVARCHAR(25))) description1
			, sdh.description2  
			, sdh.description3 
			, sdh.deal_category_value_id 
			, sdh.trader_id
			, sdh.internal_deal_type_value_id
			, sdh.internal_deal_subtype_value_id
			, sdh.template_id
			, ''s'' header_buy_sell_flag 
			, sdh.broker_id
			, sdh.generator_id
			, sdh.status_date
			, ' + cast(@assignment_type as NVARCHAR(10)) + '
			, a.year

			, sdv_jur.value_id
			, sdv_tier.value_id
			, date_transfer
			, ''' + @user_login_id + '''
			, 5604	--new
			, ''y''
		'
	SET @sql +=  '	FROM  ' + @import_temp_table_name + ' a
		INNER JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
			AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
			AND sdh.header_buy_sell_flag = ''b''
		INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id
			AND sdh.entire_term_start = sdd.term_start
		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.transferee 
		LEFT JOIN source_deal_header sdh1 
			ON sdh1.generator_id = sdh.generator_id
		    AND sdh1.entire_term_start = sdh.entire_term_start
		    AND sdh1.entire_term_end = sdh.entire_term_end
		    AND sdh1.source_system_id = sdh.source_system_id
		    AND sdh1.source_system_book_id1 = sdh.source_system_book_id1
		    AND sdh1.source_system_book_id2 = sdh.source_system_book_id2
		    AND sdh1.source_system_book_id3 = sdh.source_system_book_id3
		    AND sdh1.source_system_book_id4 = sdh.source_system_book_id4
		    AND sdh1.header_buy_sell_flag = ''s''
		LEFT JOIN static_data_value sdv_jur ON sdv_jur.code = a.state and sdv_jur.type_id = ' + cast(@state_id as NVARCHAR(10)) + '
		LEFT JOIN static_data_value sdv_tier ON sdv_tier.code = a.tier and sdv_tier.type_id = ' + cast(@tier_id as NVARCHAR(10)) + '
		LEFT JOIN #inserted_source_deal_header_id tmp ON tmp.source_deal_header_id = sdh1.source_deal_header_id
		WHERE sdh1.source_deal_header_id IS NULL
			AND tmp.source_deal_header_id IS NULL'
		
	EXEC(@sql)
	
	--insert tier into deal header UDF
	SET @sql = '
		INSERT INTO user_defined_deal_fields(source_deal_header_id, udf_template_id, udf_value)
		SELECT isdhi.source_deal_header_id, uddft.udf_template_id, a.quantity
		FROM #inserted_source_deal_header_id isdhi
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = isdhi.source_deal_header_id
		INNER JOIN rec_generator rg ON rg.generator_id = sdh.generator_id
		INNER JOIN ' + @import_temp_table_name + ' a ON rg.name = a.wregis_gu_id
		INNER JOIN user_defined_deal_fields_template uddft ON uddft.field_name = -10020
			AND uddft.template_id = sdh.template_id
		LEFT JOIN user_defined_deal_fields uddf1 ON 
			uddf1.source_deal_header_id = sdh.source_deal_header_id 
		WHERE sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
			AND uddf1.udf_deal_id IS NULL'
				
	EXEC(@sql)
	
	--insert into source_deal_detail
	SET @sql=
		'
		INSERT INTO source_deal_detail
		(
			source_deal_header_id, 
			term_start, term_end, leg, contract_expiration_date, fixed_float_leg, 
			buy_sell_flag, curve_id, fixed_price, fixed_price_currency_id, 
			option_strike_price, deal_volume, deal_volume_frequency, deal_volume_uom_id, 
			block_description, deal_detail_description, formula_id, physical_financial_flag,settlement_uom,settlement_volume,
			schedule_volume, status, vintage
        )
	
		SELECT 
			  sdh1.source_deal_header_id
			, sdd.term_start AS entire_term_start 
			, sdd.term_end AS entire_term_end  
			, sdd.Leg, sdd.contract_expiration_date, sdd.fixed_float_leg
			, ''s'', sdd.curve_id
			, sdd.fixed_price
			, sdd.fixed_price_currency_id
			, sdd.option_strike_price, a.[quantity]  
			, sdd.deal_volume_frequency
			, sdd.deal_volume_uom_id
			, sdd.block_description
			, sdd.deal_detail_description
			, sdd.formula_id
			, sdd.physical_financial_flag
			, sdd.settlement_uom
			, a.[quantity]*CAST(ISNULL(conv.conversion_factor,1) AS NUMERIC(18,10))
			, a.[quantity] --actual volume
			, 25003 --Actual
			, a.year
		FROM  ' + @import_temp_table_name + ' a
		INNER JOIN rec_generator rg ON rg.name = a.wregis_gu_id
		OUTER APPLY (
			SELECT source_deal_header_id 
			From source_deal_header sdh
			WHERE sdh.generator_id = rg.generator_id	
		) sdh
		INNER JOIN source_deal_header sdh1 ON sdh1.ext_deal_id = cast(sdh.source_deal_header_id	 as NVARCHAR)
			AND sdh1.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)		
		INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id 		
		LEFT JOIN rec_volume_unit_conversion conv ON sdd.deal_volume_uom_id = conv.from_source_uom_id 
			AND conv.to_source_uom_id = sdd.settlement_uom
			AND conv.state_value_id is null and conv.assignment_type_value_id is null and conv.curve_id is null
		LEFT JOIN source_deal_detail sdd1 ON sdd1.source_deal_header_id = sdh1.source_deal_header_id
			AND sdd1.term_start = sdd.term_start
			AND sdd1.term_end = sdd.term_end		
		WHERE sdd1.source_deal_detail_id IS NULL
		'
				
	EXEC(@sql)
	
	--Update quantity used in file for matching
	EXEC(' UPDATE isdhi
		   SET quantity = a.quantity 
		   FROM #inserted_source_deal_header_id isdhi
		   INNER JOIN source_deal_header sdh
			   ON isdhi.source_deal_header_id = sdh.source_deal_header_id
		   INNER JOIN rec_generator rg ON rg.generator_id = sdh.generator_id
		   INNER JOIN ' + @import_temp_table_name + ' a
		   	   ON rg.name = a.wregis_gu_id
		   	   AND sdh.entire_term_start = CONVERT(DATETIME, a.year + ''-'' + a.month + ''-'' + ''01'', 120)
		   	   AND sdh.header_buy_sell_flag = ''s''
	')	

	/*start of deal matching*/
	IF OBJECT_ID('tempdb..#match_deal_detail') IS NOT NULL
		DROP TABLE #match_deal_detail

	SELECT sdh.deal_date match_date,			   
		   a.quantity total_matched_volume,
		   CASE WHEN buy.volume_left > sell.schedule_volume THEN '27201' else '27207' END AS match_status      ---type_id = 27200
		   , a.source_deal_header_id , a.unique_deal_tier_id,
		   buy.source_deal_detail_id source_deal_detail_id_buy, sell.source_deal_detail_id source_deal_detail_id_sell
		   , sdh.state_value_id, sdh.tier_value_id
	INTO #match_deal_detail
	FROM  #inserted_source_deal_header_id a		
	OUTER APPLY(
		SELECT sdd.volume_left , sdd.source_deal_detail_id 
		FROM source_deal_detail sdd
		INNER JOIN source_deal_header sdh ON sdd.source_deal_header_id = sdh.source_deal_header_id 
		WHERE a.unique_deal_tier_id = sdh.source_deal_header_id                                --unique_deal_tier_id = ext_deal_id
	) buy
	OUTER APPLY(
		SELECT sdd.schedule_volume, sdd.source_deal_detail_id 
		FROM source_deal_detail sdd
		INNER JOIN source_deal_header sdh ON sdd.source_deal_header_id  = sdh.source_deal_header_id 
		WHERE a.source_deal_header_id  = sdh.source_deal_header_id 
	) sell
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = a.source_deal_header_id
	WHERE a.quantity <= buy.volume_left AND a.quantity <= sell.schedule_volume
		
	DECLARE @xml NVARCHAR(MAX)
	DECLARE @source_deal_header_id INT
	DECLARE @unique_deal_tier_id INT	

	DECLARE deal_cursor CURSOR FOR
	SELECT source_deal_header_id, unique_deal_tier_id
	FROM #inserted_source_deal_header_id

	OPEN deal_cursor
	FETCH NEXT FROM deal_cursor
	INTO @source_deal_header_id, @unique_deal_tier_id
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		SELECT @xml = '<Root><FormXML  link_id="" process_id="' + @process_id + '" description="" effective_date="' + CAST(match_date AS NVARCHAR(20)) + '" group1="" group2="" group3="" 
		group4="" hedging_relationship_type="" link_type="" match_status="27201" total_matched_volume ="' + CAST(total_matched_volume AS NVARCHAR(50))+ '"></FormXML><Grid><GridRow  
		source_deal_header_id="' + cast(source_deal_header_id AS NVARCHAR(10)) + '" source_deal_detail_id="' + CAST(source_deal_detail_id_sell AS NVARCHAR(10)) + '" matched="' + cast(total_matched_volume AS NVARCHAR(50)) + '" set_id="1"' +
		' state_value_id="' + cast(state_value_id AS NVARCHAR(10)) + '" tier_value_id="' + cast(tier_value_id AS NVARCHAR(10)) + '">
		</GridRow><GridRow  source_deal_header_id="' + CAST(unique_deal_tier_id AS NVARCHAR(10)) + '" source_deal_detail_id="' + cast(source_deal_detail_id_buy AS NVARCHAR(10)) + '" matched="' + CAST(total_matched_volume AS NVARCHAR(50)) + '" set_id="2"></GridRow></Grid></Root>'
		FROM #match_deal_detail WHERE source_deal_header_id = @source_deal_header_id

		--select @xml, @process_id
	
		EXEC spa_buy_sell_match @flag='i', @link_id='0', @xmlValue=@xml, @process_id=@process_id

		UPDATE matching_header SET link_description =  link_id WHERE link_description IS NULL
		FETCH NEXT FROM deal_cursor INTO @source_deal_header_id, @unique_deal_tier_id
	END
	CLOSE deal_cursor
	DEALLOCATE deal_cursor
		
END

IF @table_name = 'ixp_rec_inventory'
BEGIN
	
	-- Used this table to generate error messages while the import is rescheduled from the system.
	EXEC('SELECT * INTO ' + @final_stg_table + ' FROM ' + @import_temp_table_name)

	--get template id mapped in generic mapping 'rec inventory mapping'
	DECLARE @generic_import_source_id INT
	DECLARE @generic_template_id	  INT
	DECLARE @generic_subbook_id		  INT
	DECLARE @generic_trader_id		  INT
	DECLARE @generic_counterparty_id  INT

	SELECT @generic_import_source_id = ISNULL(gmv.clm1_value, 0),
		   @generic_template_id		 = ISNULL(gmv.clm2_value, 0),
		   @generic_subbook_id		 = ISNULL(gmv.clm3_value, 0),
		   @generic_trader_id		 = ISNULL(gmv.clm4_value, 0),
		   @generic_counterparty_id  = ISNULL(sdht.counterparty_id, 0)
	FROM generic_mapping_header gmd
	INNER JOIN generic_mapping_values gmv
		ON gmd.mapping_table_id = gmv.mapping_table_id
	LEFT JOIN source_deal_header_template sdht
		ON sdht.template_id = gmv.clm1_value
	WHERE gmd.mapping_name = 'REC Inventory Mapping'

	SET @generic_template_id = ISNULL(@generic_template_id, 0)
	SET @generic_subbook_id = ISNULL(@generic_subbook_id, 0)
	SET @generic_trader_id = ISNULL(@generic_trader_id, 0)
	SET @generic_counterparty_id = ISNULL(@generic_counterparty_id, 0)

	--get counterparty mapped in generic mapping 'Value Mapping'
	CREATE TABLE #temp_counterparty_value_mapping(
		source_system			NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		field_type				NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		file_counterparty_technology		NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		source_counterparty_technology_id	INT
	)

	EXEC(' INSERT INTO #temp_counterparty_value_mapping(source_system, field_type, file_counterparty_technology, source_counterparty_technology_id)
		   SELECt MAX(sdv.code),
			      MAX(CASE WHEN gmv.clm2_value = ''c'' THEN ''Counterparty'' when gmv.clm2_value = ''t'' then ''Technology'' END) [field_type],
			      gmv.clm4_value [file_counterparty_technology],
			      gmv.clm5_value [source_counterparty_technology]
		   FROM generic_mapping_header gmh
		   INNER JOIN generic_mapping_values gmv
			   ON gmh.mapping_table_id = gmv.mapping_table_id
		   INNER JOIN ' + @import_temp_table_name + ' tmp   --INNER JOIN adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D tmp
		   	   ON CASE WHEN gmv.clm2_value = ''c''  THEN tmp.counterparty 
		      WHEN gmv.clm2_value = ''t''  THEN tmp.technology END = gmv.clm4_value
		   LEFT JOIN static_data_value sdv 
		   	  ON sdv.value_id = gmv.clm1_value
		   WHERE gmh.mapping_name = ''Value Mapping''
		   	  AND sdv.code = tmp.certification_entity
		   GROUP BY gmv.clm4_value, gmv.clm5_value
	')

	--Update counterparty in file with source counterparty mapped in the generic mapping
	EXEC( ' UPDATE a
			SET counterparty = IIF(cvm.field_type = ''counterparty'', sc.counterparty_id, a.counterparty)			    
			FROM  ' + @import_temp_table_name + ' a   --adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D a
			INNER JOIN #temp_counterparty_value_mapping cvm
				ON cvm.file_counterparty_technology = a.counterparty 														 
			LEFT JOIN source_counterparty sc
				ON sc.source_counterparty_id = cvm.source_counterparty_technology_id
	')

	--Update technology in file with technology mapped in the generic mapping
	EXEC( ' UPDATE a
			SET technology = IIF(cvm.field_type = ''technology'', sdv_t.code, a.technology)	
			FROM  ' + @import_temp_table_name + ' a   --adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D a
			INNER JOIN #temp_counterparty_value_mapping cvm
				ON cvm.file_counterparty_technology = a.technology 													  			
			LEFT JOIN static_data_value sdv_t
				ON sdv_t.value_id = cvm.source_counterparty_technology_id
	')

	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET expiry_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.expiry_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET issue_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.issue_date = dd.user_date
	')
	/***END OF date update***/
	EXEC ('DELETE ' + @field_compare_table)

 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''actual_volume'',''volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''source_deal_detail_id'',''vintage_month'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''source_deal_detail_id'',''vintage_year'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''source_certificate_number'',''certificate_seq_from'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''source_certificate_number'',''certificate_seq_to'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''gis_cert_date'',''issue_date'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''contract_expiration_date'',''expiry_date'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''fixed_price'',''price'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''vintage_year'', ''a.vintage_year = b.code AND b.type_id = 10092'', ''e''),
			(''static_data_value'', ''jurisdiction'', ''a.jurisdiction = b.code AND b.type_id = 10002'', ''e''),
			(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''e''),
			(''static_data_value'', ''technology'', ''a.technology = b.code AND b.type_id = 10009'', ''w''), --technology/fuel_type
			(''static_data_value'', ''generation_state'', ''a.generation_state = b.code AND b.type_id = 10016'', ''w'')  --state'
		)
 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Invalid Month
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Month''),''<column_value>'',a.vintage_month),
 		  a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (ISNUMERIC(a.vintage_month) = 0
			  OR a.vintage_month NOT BETWEEN 1 AND 12)
	')

	--Data Missing Validation: Counterparty in file, rec_generator and template
	EXEC (' INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		    SELECT a.temp_id,
		    	   10001,
		    	   dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Counterparty''),
		    	   a.import_file_name
		    FROM   '+ @import_temp_table_name + ' a
		    LEFT JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty
		    OUTER APPLY( SELECT sdht.counterparty_id
		    			 FROM source_deal_header_template sdht
		    			 WHERE sdht.template_id = ' + @generic_template_id +'
		    ) sht
		    LEFT JOIN rec_generator rg
				ON rg.code = a.generator
		    LEFT JOIN source_deal_header_template sdht
				ON sdht.template_id = rg.deal_template_id
		    LEFT JOIN #error_status
				ON a.temp_id = #error_status.temp_id
		    WHERE  #error_status.temp_id IS NULL
			  AND COALESCE(sc.source_counterparty_id, rg.ppa_counterparty_id, sht.counterparty_id, sdht.counterparty_id) IS NULL AND rg.generator_id IS NULL
	')

	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Tier''), ''<column_value1>'', a.tier), ''<column_name>'', ''Jurisdiction''), ''<column_value>'', a.jurisdiction),
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
			LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction AND sdv_jurisdiction.type_id = 10002
			LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
			LEFT JOIN state_properties_details spd
				ON spd.state_value_id = sdv_jurisdiction.value_id
				AND spd.tier_id = sdv_tier.value_id
			WHERE #error_status.temp_id IS NULL
			AND spd.state_properties_details_id IS NULL
	')

	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10002,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Unit ID''), ''<column_value>'', a.generator),
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			INNER JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty
				AND int_ext_flag = ''i''
			LEFT JOIN rec_generator rg
				ON rg.code = a.generator
			WHERE rg.generator_id IS NULL
	')

	-- Validation for already existed certificate
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
			SELECT a.temp_id,
				   NULL,
				   ''Certificate: '' +  CAST(a.certificate_serial_numbers_from AS NVARCHAR(100)) + '' already exists.'',
				   NULL, --a.import_file_name,
				   ''Error'',
				   ''Data Error'',
				   ''Please correct data and re-import.''
 			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN Gis_Certificate gc
				ON a.certificate_serial_numbers_from = gc.gis_certificate_number_from
			WHERE gc.source_certificate_number IS NOT NULL
	')
	

	EXEC('DELETE a
	 	  FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
	')

	IF OBJECT_ID('tempdb..#rec_staging_table') IS NOT NULL
		DROP TABLE #rec_staging_table

	CREATE TABLE #rec_staging_table (
		[certificate_seq_from] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_seq_to] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_serial_numbers_from] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_serial_numbers_to] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[expiry_date] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[generator] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[issue_date] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[jurisdiction] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[tier] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[vintage_month] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[vintage_year] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[volume] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[import_file_name] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[source_system_id] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[counterparty] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[price] DECIMAL(18, 8),
		[source_certificate_number] INT,
		[facility_name] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[technology] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[generation_state] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[certification_entity] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[temp_id] INT
	)

	EXEC('
		INSERT INTO #rec_staging_table
		SELECT certificate_seq_from,
			   certificate_seq_to,
			   certificate_serial_numbers_from,
			   certificate_serial_numbers_to,
			   expiry_date,
			   generator,
			   issue_date,
			   jurisdiction,
			   tier,
			   vintage_month,
			   vintage_year,
			   volume,
			   import_file_name,
			   source_system_id,
			   counterparty,
			   price,
			   source_certificate_number,
			   facility_name,
			   technology,
			   generation_state,
			   certification_entity,
			   ISNULL(temp_rid, temp_id)
		FROM ' + @import_temp_table_name + ' ORDER BY temp_rid '
	)

	--dump date range in temp table to get vintage year checking months defined in jurisdiction
	IF OBJECT_ID('tempdb..#state_properties_with_vintage') IS NOT NULL
		DROP TABLE #state_properties_with_vintage

	SELECT temp.jurisdiction, 
		   sp.state_value_id, 
		   CONVERT(DATE, CAST(vintage_year - 1 AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120) start_vintage,
		   DATEADD(DAY, -1,DATEADD(YEAR, 1,CONVERT(DATE, CAST(vintage_year - 1 AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120))) end_vintage,
		   (temp.vintage_year + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, 0, -1)) vintage_yr,
		   vintage.value_id + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, 1, 0) vintage
	INTO #state_properties_with_vintage 
	FROM #rec_staging_table temp
	INNER JOIN static_data_value sdv 
		ON sdv.code = temp.jurisdiction
	INNER JOIN state_properties sp
		ON sp.state_value_id = sdv.value_id
	INNER JOIN static_data_value vintage
		ON vintage.code = (temp.vintage_year - 1)
			AND vintage.type_id = 10092
	UNION
	SELECT temp.jurisdiction, 
		   sp.state_value_id, 
		   CONVERT(DATE, CAST(vintage_year AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120),
		   DATEADD(DAY, -1,DATEADD(YEAR, 1,CONVERT(DATE, CAST(vintage_year AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120))),
		   temp.vintage_year + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, 1, 0),
		   vintage.value_id + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, 1, 0) vintage
	FROM #rec_staging_table temp
	INNER JOIN static_data_value sdv 
		ON sdv.code = temp.jurisdiction
	INNER JOIN state_properties sp
		ON sp.state_value_id = sdv.value_id
	INNER JOIN static_data_value vintage
		ON vintage.code = temp.vintage_year
			AND vintage.type_id = 10092
	
	IF OBJECT_ID('tempdb..#rec_inventory_detail') IS NOT NULL
		DROP TABLE #rec_inventory_detail

	SELECT ri.certificate_seq_from,
		   ri.certificate_seq_to,
		   ri.certificate_serial_numbers_from,
		   ri.certificate_serial_numbers_to,
		   ri.expiry_date,
		   rg.generator_id, ri.generator,
		   ri.issue_date,
		   jurisdiction.value_id state_value_id, ri.jurisdiction,
		   tier.value_id tier_id, ri.tier,
		   DATEFROMPARTS(vintage_year, vintage_month, 1) term_start,
		   EOMONTH(DATEFROMPARTS(vintage_year, vintage_month, 1)) term_end,
		   vintage.value_id vintage,
		   volume actual_volume,
		   COALESCE(sc.source_counterparty_id, rg.ppa_counterparty_id, NULLIF(@generic_counterparty_id, 0)) source_counterparty_id,
		   price,
		   ri.source_certificate_number,
		   --DENSE_RANK() OVER(PARTITION BY ri.counterparty ORDER BY ri.certificate_seq_from, ri.certificate_seq_to) leg,
		   NULL leg,
		   ri.facility_name,
		   technology.value_id technology,
		   generation_state.value_id generation_state,
		   ce.value_id certification_entity,
		   ri.temp_id
	INTO #rec_inventory_detail
	FROM #rec_staging_table ri
	LEFT JOIN rec_generator rg
		ON rg.code = ri.generator
	LEFT JOIN static_data_value jurisdiction
		ON jurisdiction.code = ri.jurisdiction
			AND jurisdiction.type_id = 10002
	LEFT JOIN static_data_value tier
		ON tier.code = ri.tier
			AND tier.type_id = 15000
	LEFT JOIN static_data_value vintage
		ON vintage.code = ri.vintage_year
			AND vintage.type_id = 10092
	LEFT JOIN source_counterparty sc
		ON sc.counterparty_id = ri.counterparty
	LEFT JOIN static_data_value technology
		ON technology.code = ri.technology
			AND technology.type_id = 10009
	LEFT JOIN static_data_value generation_state
		ON generation_state.code = ri.generation_state
			AND generation_state.type_id = 10016
	OUTER APPLY ( SELECT sdv.value_id
				  FROM static_data_value sdv
				  INNER JOIN static_data_type sdt
					  ON sdt.type_id = sdv.type_id
					  AND sdt.type_name = 'Certification Systems'
				  WHERE sdv.code = ri.certification_entity
	) ce


	UPDATE  a set vintage = b.vintage
	--select a.temp_id, a.jurisdiction, a.term_start, b.start_vintage, b.end_vintage, a.vintage, b.vintage 
	FROM #rec_inventory_detail a
	INNER JOIN #state_properties_with_vintage b
		ON a.state_value_id = b.state_value_id
		AND a.term_start BETWEEN b.start_vintage AND b.end_vintage
	INNER jOIN source_counterparty sc 
		ON sc.source_counterparty_id = a.source_counterparty_id
	WHERE sc.int_ext_flag = 'e'

	--#rec_inventory_detail_get_leg is used to get leg according to the rows in file(first row is first leg)
	IF OBJECT_ID('tempdb..#rec_inventory_detail_get_leg') IS NOT NULL
		DROP TABLE #rec_inventory_detail_get_leg

	SELECT DENSE_RANK() OVER(PARTITION BY rid.source_counterparty_id, MAX(vintage) ORDER BY MIN(temp_id),rid.certificate_seq_from, rid.certificate_seq_to) leg ,
		   MAX(rid.certificate_seq_from) certificate_seq_from,
		   MAX(rid.certificate_seq_to) certificate_seq_TO,
		   MAX(rid.generator_id) generator_id,
		   MAX(rid.actual_volume) actual_volume,
		   MAX(rid.source_counterparty_id) source_counterparty_id,
		   MAX(rid.source_certificate_number) source_certificate_number,
		   --MAX(rid.term_start) term_start,
		   --MAX(rid.term_end) term_end,
		   term_start,
		   term_end,
		   MAX(rid.vintage) vintage,
		   MIN(temp_id) temp_id
	INTO #rec_inventory_detail_get_leg
	FROM #rec_inventory_detail rid
	INNER jOIN source_counterparty sc 
		ON sc.source_counterparty_id = rid.source_counterparty_id
	WHERE sc.int_ext_flag = 'e'
	GROUP BY certificate_seq_to, certificate_seq_from, rid.source_counterparty_id, generator, term_start,term_end	
	UNION ALL
	SELECT DENSE_RANK() OVER(PARTITION BY rid.source_counterparty_id, MAX(rid.term_start), MAX(rid.term_end) ORDER BY MIN(temp_id),rid.certificate_seq_from, rid.certificate_seq_to) leg ,
		   MAX(rid.certificate_seq_from) certificate_seq_from,
		   MAX(rid.certificate_seq_to) certificate_seq_TO,
		   MAX(rid.generator_id) generator_id,
		   MAX(rid.actual_volume) actual_volume,
		   MAX(rid.source_counterparty_id) source_counterparty_id,
		   MAX(rid.source_certificate_number) source_certificate_number,
		   MAX(rid.term_start) term_start,
		   MAX(rid.term_end) term_end,
		   MAX(rid.vintage) vintage,
		   MIN(temp_id)
	--INTO #rec_inventory_detail_get_leg
	FROM #rec_inventory_detail rid
	INNER jOIN source_counterparty sc 
		ON sc.source_counterparty_id = rid.source_counterparty_id
	WHERE sc.int_ext_flag = 'i'
	GROUP BY certificate_seq_to, certificate_seq_from, rid.source_counterparty_id, generator
	ORDER BY MIN(temp_id)

	UPDATE rid
	SET leg = ridgl.leg
	FROM #rec_inventory_detail_get_leg ridgl
	INNER JOIN #rec_inventory_detail rid
	ON ridgl.certificate_seq_from = rid.certificate_seq_from
		AND ridgl.certificate_seq_to = rid.certificate_seq_to
		AND ridgl.source_counterparty_id = rid.source_counterparty_id
		AND ISNULL(ridgl.source_certificate_number, -1) = ISNULL(rid.source_certificate_number, -1)
		AND ISNULL(ridgl.generator_id, -1) = ISNULL(rid.generator_id, -1)
		AND ridgl.actual_volume = rid.actual_volume

	/*******Get jurisdiction and tier for multi product start*******************/
	--[TO DO]: get matching deals buy deals
	IF OBJECT_ID('tempdb..#temp_matching_buy_deals') IS NOT NULL
		DROP TABLE #temp_matching_buy_deals

	SELECT a.source_deal_header_id, rid.vintage
	INTO #temp_matching_buy_deals
	FROM #rec_inventory_detail rid
	LEFT JOIN source_counterparty sc
		ON sc.source_counterparty_id = rid.source_counterparty_id
		AND sc.int_ext_flag = 'e'
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdd.leg, sdh.match_type, sdh.state_value_id
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		--INNER JOIN #state_properties_with_vintage spwv
		--	ON spwv.state_value_id = sdh.state_value_id
		--	AND rid.term_start between spwv.start_vintage and spwv.end_vintage
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)						
			AND sdd.deal_volume = rid.actual_volume			
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
			--AND sdd.vintage = spwv.vintage	
			--and sdh.state_value_id = rid.state_value_id
			--and sdh.tier_value_id = rid.tier_id
	) a
	WHERE a.source_deal_header_id IS not NULL AND a.match_type = 'y'
	GROUP BY a.source_deal_header_id, rid.vintage

	/***get jurisdiction and tier mapped from product detail***/
	
	--get state properties with region 
	IF OBJECT_ID('tempdb..#tmp_state_properties_all') IS NOT NULL
		DROP TABLE #tmp_state_properties_all

	SELECT CAST(t.item AS INT) region_id,
		   sp.state_value_id,	   
		   spd.tier_id,
		   spd.technology_id,
		   NULL vintage
	INTO #tmp_state_properties_all
	FROM state_properties sp
	OUTER APPLY (
		SELECT item 
		FROM dbo.SplitCommaSeperatedValues(sp.region_id)
	
	) t
	LEFT JOIN state_properties_details spd
		ON spd.state_value_id = sp.state_value_id

	IF OBJECT_ID('tempdb..#check_product_property') IS NOT NULL
		DROP TABLE #check_product_property

	CREATE TABLE #check_product_property (
		product_property_id INT IDENTITY(1, 1) PRIMARY KEY,
		source_deal_header_id INT,
		region_id INT,
		state_value_id  INT,
		tier_id INT,
		technology_id INT,
		vintage INT
	)

	INSERT INTO #check_product_property
	SELECT gp.source_deal_header_id,
		   gp.region_id,
		   gp.jurisdiction_id state_value_id,
		   gp.tier_id,
		   gp.technology_id,
		   tmbd.vintage
	FROM gis_product gp
	INNER JOIN #temp_matching_buy_deals tmbd
		ON tmbd.source_deal_header_id = gp.source_deal_header_id
	WHERE gp.in_or_not = 1

	IF OBJECT_ID('tempdb..#from_product_in') IS NOT NULL
		DROP TABLE #from_product_in

	CREATE TABLE #from_product_in (
		source_deal_header_id INT,
		region_id INT,
		state_value_id INT,
		tier_id INT,
		technology_id INT,
		vintage INT
	)

	DECLARE @product_property_id INT
	DECLARE @get_product_info CURSOR
	SET @get_product_info = CURSOR FOR

	SELECT product_property_id 
	FROM #check_product_property

	OPEN @get_product_info
	FETCH NEXT
	FROM @get_product_info INTO @product_property_id
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(
			SELECT 1
			FROM #check_product_property 
			WHERE ((technology_id IS NULL AND region_id IS NOT NULL)
			OR (technology_id IS NOT NULL AND region_id IS NOT NULL AND state_value_id IS NOT NULL)
			OR (technology_id IS NOT NULL AND region_id IS NOT NULL AND state_value_id IS NOT NULL AND tier_id IS NOT NULL)
			OR (technology_id IS NOT NULL AND region_id IS NOT NULL))
			AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON tsp.region_id = cpp.region_id
			WHERE ISNULL(cpp.state_value_id, -1) = IIF(cpp.state_value_id IS NULL, -1, tsp.state_value_id)
				AND ISNULL(cpp.tier_id, -1) = IIF(cpp.tier_id IS NULL, -1, tsp.tier_id)
				AND ISNULL(cpp.technology_id, -1) = IIF(cpp.technology_id IS NULL, -1, tsp.technology_id)
				AND product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE ((technology_id IS NOT NULL AND region_id IS NULL)
				OR (technology_id IS NOT NULL AND region_id IS NULL AND state_value_id IS NOT NULL)
				OR (technology_id IS NOT NULL AND region_id IS NULL AND tier_id IS NOT NULL)
				OR (technology_id IS NOT NULL AND region_id IS NULL AND state_value_id IS NOT NULL AND tier_id IS NOT NULL))
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON cpp.technology_id = tsp.technology_id
			WHERE ISNULL(cpp.state_value_id, -1) = IIF(cpp.state_value_id IS NULL, -1, tsp.state_value_id )
				AND ISNULL(cpp.tier_id, -1) = IIF(cpp.tier_id IS NULL, -1, tsp.tier_id )
				AND product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE state_value_id IS NOT NULL
				AND region_id IS NULL
				AND tier_id IS NULL
				AND technology_id IS NULL
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON cpp.state_value_id = tsp.state_value_id
			WHERE product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE state_value_id IS NULL
				AND region_id IS NULL
				AND tier_id IS NOT NULL
				AND technology_id IS NULL
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON cpp.tier_id = tsp.tier_id
			WHERE product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE state_value_id IS NOT NULL
				AND region_id IS NULL
				AND tier_id IS NOT NULL
				AND technology_id IS NULL
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON cpp.tier_id = tsp.tier_id
					AND cpp.state_value_id = tsp.state_value_id
			WHERE product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE state_value_id IS NULL
				AND region_id IS NOT NULL
				AND tier_id IS NOT NULL
				AND technology_id IS NOT NULL
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   NULL vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #check_product_property cpp
				ON cpp.technology_id = tsp.technology_id
					AND cpp.tier_id = tsp.tier_id
					AND product_property_id = @product_property_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #check_product_property 
			WHERE state_value_id IS NULL
				AND region_id IS NULL
				AND tier_id IS NULL
				AND technology_id IS NULL
				AND product_property_id = @product_property_id
		)
		BEGIN
			INSERT INTO #from_product_in
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   NULL vintage
			FROM #tmp_state_properties_all tsp
			OUTER APPLY (
				SELECT source_deal_header_id
				FROM #check_product_property 
				WHERE product_property_id = @product_property_id
				GROUP BY source_deal_header_id
			) cpp
			GROUP BY cpp.source_deal_header_id, tsp.region_id, tsp.state_value_id, tsp.tier_id, tsp.technology_id
		END
	FETCH NEXT
	FROM @get_product_info INTO @product_property_id
	END
	CLOSE @get_product_info
	DEALLOCATE @get_product_info

	--for product not in
	IF OBJECT_ID('tempdb..#out_table_property') IS NOT NULL
		DROP TABLE #out_table_property
	
	CREATE TABLE #out_table_property (
		out_id INT IDENTITY(1, 1) PRIMARY KEY,
		source_deal_header_id INT,
		region_id INT,
		state_value_id INT,	
		tier_id INT,
		technology_id INT,
		vintage INT
	)
	--select * From #out_table_property
	INSERT INTO #out_table_property
	SELECT gp.source_deal_header_id,
		   gp.region_id,
		   gp.jurisdiction_id state_value_id,
		   gp.tier_id,
		   gp.technology_id,
		   gp.vintage
	FROM gis_product gp
	INNER JOIN #temp_matching_buy_deals tmbd
		ON tmbd.source_deal_header_id = gp.source_deal_header_id	
	WHERE gp.in_or_not = 0

	IF OBJECT_ID('tempdb..#from_product_out') IS NOT NULL
		DROP TABLE #from_product_out

	CREATE TABLE #from_product_out (
		source_deal_header_id INT,
		region_id INT,
		state_value_id INT,
		tier_id INT,
		technology_id INT,
		vintage INT
	)

	DECLARE @out_id INT
	DECLARE @get_out_info CURSOR
	SET @get_out_info = CURSOR FOR

	SELECT out_id 
	FROM #out_table_property

	OPEN @get_out_info
	FETCH NEXT
	FROM @get_out_info INTO @out_id
	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF EXISTS(
			SELECT 1
			FROM #out_table_property 
			WHERE (--(technology_id IS NULL AND region_id IS NOT NULL) OR 
			   (region_id IS NOT NULL AND state_value_id IS NOT NULL)
			OR (region_id IS NOT NULL AND state_value_id IS NOT NULL AND tier_id IS NOT NULL)
			OR (region_id IS NOT NULL))
			AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #out_table_property cpp
				ON tsp.region_id = cpp.region_id
			WHERE ISNULL(cpp.state_value_id, -1) = IIF(cpp.state_value_id IS NULL, -1, tsp.state_value_id)
				AND ISNULL(cpp.tier_id, -1) = IIF(cpp.tier_id IS NULL, -1, tsp.tier_id)
				--AND ISNULL(cpp.technology_id, -1) = IIF(cpp.technology_id IS NULL, -1, tsp.technology_id)
				AND out_id = @out_id
		END		
		ELSE IF EXISTS (
			SELECT 1
			FROM #out_table_property 
			WHERE state_value_id IS NOT NULL
				AND region_id IS NULL
				AND tier_id IS NULL
				AND technology_id IS NULL
				AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #out_table_property cpp
				ON cpp.state_value_id = tsp.state_value_id
			WHERE out_id = @out_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #out_table_property 
			WHERE state_value_id IS NULL
				AND region_id IS NULL
				AND tier_id IS NOT NULL				
				AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #out_table_property cpp
				ON cpp.tier_id = tsp.tier_id
			WHERE out_id = @out_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #out_table_property 
			WHERE state_value_id IS NOT NULL
				AND region_id IS NULL
				AND tier_id IS NOT NULL
				AND technology_id IS NULL
				AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   cpp.vintage vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #out_table_property cpp
				ON cpp.tier_id = tsp.tier_id
					AND cpp.state_value_id = tsp.state_value_id
			WHERE out_id = @out_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #out_table_property 
			WHERE state_value_id IS NULL
				AND region_id IS NOT NULL
				AND tier_id IS NOT NULL
				AND technology_id IS NOT NULL
				AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   NULL vintage
			FROM #tmp_state_properties_all tsp
			INNER JOIN #out_table_property cpp
				ON cpp.technology_id = tsp.technology_id
					AND cpp.tier_id = tsp.tier_id
					AND out_id = @out_id
		END
		ELSE IF EXISTS (
			SELECT 1
			FROM #out_table_property 
			WHERE state_value_id IS NULL
				AND region_id IS NULL
				AND tier_id IS NULL
				AND technology_id IS NULL
				AND out_id = @out_id
		)
		BEGIN
			INSERT INTO #from_product_out
			SELECT cpp.source_deal_header_id,
				   tsp.region_id,
				   tsp.state_value_id,
				   tsp.tier_id,
				   tsp.technology_id,
				   NULL vintage
			FROM #tmp_state_properties_all tsp
			OUTER APPLY (
				SELECT source_deal_header_id
				FROM #out_table_property 
				where out_id = @out_id
				GROUP BY source_deal_header_id
			) cpp
			GROUP BY cpp.source_deal_header_id, tsp.region_id, tsp.state_value_id, tsp.tier_id, tsp.technology_id
		END
	FETCH NEXT
	FROM @get_out_info INTO @out_id
	END
	CLOSE @get_out_info
	DEALLOCATE @get_out_info

	--delete product_out from product_in
	DELETE i
	From #from_product_in i
	INNER JOIN #from_product_out o
		ON i.state_value_id = o.state_value_id
		AND i.tier_id	    = o.tier_id
	/*****End of getting jurisdiction and tier for multi product****/

	--insert date range in temp table to get vintage year checking months defined in jurisdiction for multi product
	INSERT INTO #state_properties_with_vintage 
	SELECT sdv.code jurisdiction, 
		   temp.state_value_id, 
		   CONVERT(DATE, CAST(vintage.code - 1 AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120) start_vintage,
		   --EOMONTH(CASE WHEN sp.calendar_from_month  = 1 THEN CAST(vintage_year - 1 AS NVARCHAR(4)) ELSE CAST(vintage_year AS NVARCHAR(4)) END + '-' + CAST(sp.calendar_to_month AS NVARCHAR(2)) + '-' +'1') end_vintage,
		   DATEADD(DAY, -1,DATEADD(YEAR, 1,CONVERT(DATE, CAST(vintage.code - 1 AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120))) end_vintage,
		   (vintage.code - 1) vintage_yr,
		   temp.vintage vintage	
	FROM #from_product_in temp
	INNER JOIN static_data_value sdv 
		ON sdv.value_id = temp.state_value_id
	INNER JOIN state_properties sp
		ON sp.state_value_id = temp.state_value_id
	INNER JOIN static_data_value vintage
		ON vintage.value_id = (temp.vintage )
			AND vintage.type_id = 10092
	UNION
	SELECT sdv.code jurisdiction, 
		   temp.state_value_id, 
		   CONVERT(DATE, CAST(vintage.code AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120),
		   --EOMONTH(CASE WHEN sp.calendar_from_month  = 1 THEN CAST(vintage_year AS NVARCHAR(4)) ELSE CAST(vintage_year + 1 AS NVARCHAR(4)) END  + '-' + CAST(sp.calendar_to_month AS NVARCHAR(2)) + '-' +'1'),
		   DATEADD(DAY, -1,DATEADD(YEAR, 1,CONVERT(DATE, CAST(vintage.code  AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120))),
		   vintage.code,
		   temp.vintage vintage
	FROM #from_product_in temp
	INNER JOIN static_data_value sdv 
		ON sdv.value_id = temp.state_value_id
	INNER JOIN state_properties sp
		ON sp.state_value_id = temp.state_value_id
	INNER JOIN static_data_value vintage
		ON vintage.value_id = temp.vintage
			AND vintage.type_id = 10092
	

	--[TO DO]: dump to check if jurisdiction available for generation deals or not
	IF OBJECT_ID('tempdb..#temp_deals_with_jurisdiction_matched') IS NOT NULL
		DROP TABLE #temp_deals_with_jurisdiction_matched

	SELECT a.source_deal_header_id, rid.source_counterparty_id, a.deal_volume
	INTO #temp_deals_with_jurisdiction_matched
	FROM #rec_inventory_detail rid
	LEFT JOIN source_counterparty sc
		ON sc.source_counterparty_id = rid.source_counterparty_id
		AND sc.int_ext_flag = 'e'
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdd.leg, sdh.match_type, sdh.state_value_id, sdd.deal_volume
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		LEFT JOIN #from_product_in fpi
			ON sdh.source_deal_header_id = fpi.source_deal_header_id
		INNER JOIN #state_properties_with_vintage spwv
			ON spwv.state_value_id = ISNULL(fpi.state_value_id, sdh.state_value_id)
			AND rid.term_start between spwv.start_vintage and spwv.end_vintage
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)						
			AND sdd.deal_volume = rid.actual_volume			
			AND sdh.is_environmental = 'y'
			AND sdd.vintage = spwv.vintage	
			AND ISNULL(fpi.state_value_id, sdh.state_value_id) = rid.state_value_id
			AND ISNULL(fpi.tier_id, sdh.tier_value_id) = rid.tier_id
			AND sdh.header_buy_sell_flag = 'b'
	) a
	WHERE a.source_deal_header_id IS not NULL AND a.match_type = 'y'
	GROUP BY a.source_deal_header_id, rid.source_counterparty_id, a.deal_volume

	--[TO DO] show error-- Validation for  Jurisdiction and Tier mapping for generation deals
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
	SELECT rid.temp_id,
		   NULL,
		   'Deal not found for Counterparty, Jurisdiction, Tier and Term:' + sc.counterparty_id + ', ' + rid.jurisdiction + ', ' + rid.tier + ', ' + CAST(term_start AS NVARCHAR(10)) + ' and ' + CAST(term_end AS NVARCHAR(10)),
		   NULL, --a.import_file_name,
		   'Error',
		   'Data Error',
		   'Please correct data and re-import.'
	FROM #rec_inventory_detail rid
	INNER JOIN source_counterparty sc
		ON sc.source_counterparty_id = rid.source_counterparty_id
		AND sc.int_ext_flag = 'i'
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdh.match_type, sdh.counterparty_id, sdd.deal_volume
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id		
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)						
			AND sdd.deal_volume = rid.actual_volume	
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	LEFT JOIN #temp_deals_with_jurisdiction_matched tdjm
		ON tdjm.source_deal_header_id = a.source_deal_header_id
	LEFT JOIN #temp_deals_with_jurisdiction_matched tdjm1
		ON a.counterparty_id = tdjm1.source_counterparty_id
		AND a.deal_volume = tdjm1.deal_volume
	WHERE tdjm.source_deal_header_id IS NULL 
		AND a.match_type = 'y' 
		AND a.source_deal_header_id IS NOT NULL	
		AND tdjm1.source_deal_header_id IS NULL	

	EXEC('DELETE a
 	      FROM #error_status
		  INNER JOIN #rec_inventory_detail a ON  #error_status.temp_id = a.temp_id		  
		  WHERE #error_status.message_status = ''Error''
	')

	EXEC('DELETE a
 	      FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id		  
		  WHERE #error_status.message_status = ''Error''
	')
	
	INSERT INTO #error_status (temp_id, [error_number], template_values, import_file_name)
 	SELECT  a.temp_id,
 		   10019,
		   CASE
		      WHEN ISNULL(@generic_template_id, rg.deal_template_id) IS NULL THEN
				-- dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('', '<column_name>', 'Generator'), '<column_value>', t.generator),'Deal Template','<column_name1>')
				dbo.FNABuildNameValueXML('', '<custom_message>', 'Data error for Generator : ' + ISNULL(t.generator , 'NULL') + '(Deal Template for Generator : ' + ISNULL(t.generator, 'NULL') + ' is not mapped)')
			  WHEN rg.fas_sub_book_id IS NULL THEN
				dbo.FNABuildNameValueXML('', '<custom_message>', 'Data error for Generator : ' + ISNULL(t.generator , 'NULL') + '(Sub Book for Generator : ' + ISNULL(t.generator, 'NULL') + ' is not mapped)')
			   --  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('', '<column_name>', 'Generator'), '<column_value>', t.generator), 'Sub Book' ,'<column_name1>')
			  END,
 		   a.import_file_name
	FROM #rec_inventory_detail t
	INNER JOIN rec_generator rg
		ON rg.generator_id = t.generator_id
	INNER JOIN #rec_staging_table a
		ON a.jurisdiction = t.jurisdiction
			AND a.tier = t.tier
			AND a.generator = t.generator
	INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
	  AND sdh.entire_term_start = t.term_start
	WHERE (ISNULL(@generic_template_id, rg.deal_template_id) IS NULL
		OR rg.fas_sub_book_id IS NULL)
		AND sdh.source_deal_header_id IS NULL

	DELETE t
	FROM #rec_inventory_detail t
	INNER JOIN rec_generator rg
		ON rg.generator_id = t.generator_id
	INNER JOIN #rec_staging_table a
		ON a.jurisdiction = t.jurisdiction
			AND a.tier = t.tier
	INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		AND sdh.entire_term_start = t.term_start
	WHERE (ISNULL(@generic_template_id, rg.deal_template_id) IS NULL
		OR rg.fas_sub_book_id IS NULL)
		AND sdh.source_deal_header_id IS NULL

	DELETE a
	FROM #rec_inventory_detail t
	INNER JOIN rec_generator rg
		ON rg.generator_id = t.generator_id
	INNER JOIN #rec_staging_table a
		ON a.jurisdiction = t.jurisdiction
			AND a.tier = t.tier
	INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
		AND sdh.entire_term_start = t.term_start
	WHERE (ISNULL(@generic_template_id, rg.deal_template_id) IS NULL
		OR rg.fas_sub_book_id IS NULL)
		AND sdh.source_deal_header_id IS NULL

	EXEC ('
		DELETE a
		FROM #rec_inventory_detail t
		INNER JOIN rec_generator rg
			ON rg.generator_id = t.generator_id
		INNER JOIN ' + @import_temp_table_name + ' a
			ON a.jurisdiction = t.jurisdiction
				AND a.tier = t.tier
		INNER JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
			AND sdh.entire_term_start = t.term_start
		WHERE (ISNULL(NULLIF(' + @generic_template_id + ', 0) , rg.deal_template_id) IS NULL
			OR rg.fas_sub_book_id IS NULL)
			AND sdh.source_deal_header_id IS NULL
	')

	--SET @generic_template_id = NULLIF(@generic_template_id, 0)



	EXEC('DELETE a
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  LEFT JOIN ' + @import_temp_table_name + ' b ON #error_status.temp_id = b.temp_id
		  WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
		')

	--update leg with sdd.leg to get clear with deals with same vintage and cpty
	IF OBJECT_ID('tempdb..#rec_inventory_detail_leg_update2') IS NOT NULL
		DROP TABLE #rec_inventory_detail_leg_update2

	SELECT DENSE_RANK() OVER(PARTITION BY rid.generator_id, rid.source_counterparty_id, MAX(rid.term_start), MAX(rid.term_end) ORDER BY MIN(temp_id),rid.certificate_seq_from, rid.certificate_seq_to) leg
		   , rid.source_counterparty_id
		   , rid.certificate_seq_from
		   , rid.certificate_seq_to
		   , MAX(rid.generator_id) generator_id
		   , MAX(rid.actual_volume) actual_volume
		   , MAX(rid.source_certificate_number) source_certificate_number
		   , MAX(rid.term_start) term_start
		   , MAX(rid.term_end) term_end
	INTO #rec_inventory_detail_leg_update2
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdd.leg, sdh.match_type
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			--AND sdd.deal_volume = rid.actual_volume
			--AND sdd.leg = rid.leg
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	WHERE a.source_deal_header_id IS NOT NULL AND ISNULL(a.match_type, '-1') <> 'y'
	GROUP BY rid.generator_id, rid.source_counterparty_id, rid.certificate_seq_from, rid.certificate_seq_to, rid.source_certificate_number

	UPDATE rid
	SET leg = rid2.leg
	FROM #rec_inventory_detail rid
	INNER JOIN #rec_inventory_detail_leg_update2 rid2
		ON rid.term_start = rid2.term_start
		AND rid.term_end = rid2.term_end
		AND rid.actual_volume = rid2.actual_volume
		AND ISNULL(rid.source_counterparty_id, -1) = ISNULL(rid2.source_counterparty_id, -1)
		AND ISNULL(rid.generator_id, -1) = ISNULL(rid2.generator_id, -1)
		AND rid.certificate_seq_from = rid2.certificate_seq_from
		AND rid.certificate_seq_to = rid2.certificate_seq_to
	--UPDATE rid
	--SET leg = a.leg
	--FROM #rec_inventory_detail rid
	--OUTER APPLY (
	--	SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdd.leg, sdh.match_type
	--	FROM source_deal_header sdh
	--	INNER JOIN source_deal_detail sdd
	--		ON sdh.source_deal_header_id = sdd.source_deal_header_id	
	--WHERE (sdh.generator_id = rid.generator_id)
	--		AND sdd.term_start = rid.term_start
	--		AND sdd.term_end = rid.term_end
	--		--AND sdd.deal_volume = rid.actual_volume
	--		--AND sdd.leg = rid.leg
	--		AND sdh.is_environmental = 'y'
	--		AND sdh.header_buy_sell_flag = 'b'
	--) a
	--LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = rid.source_counterparty_id
	--WHERE a.source_deal_header_id IS NOT NULL 
	--	AND ISNULL(a.match_type, '1') <> 'y'
	--	AND CAST(ISNULL(sc.int_ext_flag, '*') AS NVARCHAR(2)) = CASE WHEN rid.source_counterparty_id IS NULL THEN '*' else 'i' end

	--for buy deals
	IF OBJECT_ID('tempdb..#rec_inventory_detail_leg_update_buy_deal') IS NOT NULL
		DROP TABLE #rec_inventory_detail_leg_update_buy_deal

	SELECT DENSE_RANK() OVER(PARTITION BY rid.source_counterparty_id, a.vintage ORDER BY MIN(temp_id),rid.certificate_seq_from, rid.certificate_seq_to) leg
		   , rid.source_counterparty_id
		   , a.vintage
		   , rid.certificate_seq_from
		   , rid.certificate_seq_to		   
		   , MAX(rid.generator_id) generator_id
		   , MAX(rid.actual_volume) actual_volume		   
		   , MAX(rid.source_certificate_number) source_certificate_number
		   , MAX(rid.term_start) term_start
		   , MAX(rid.term_end) term_end
	INTO #rec_inventory_detail_leg_update_buy_deal	
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdd.leg, sdh.match_type, spwv.vintage
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		LEFT JOIN #from_product_in fpi
			ON sdh.source_deal_header_id = fpi.source_deal_header_id
		INNER JOIN #state_properties_with_vintage spwv
			ON spwv.state_value_id = ISNULL(fpi.state_value_id, sdh.state_value_id)
			AND rid.term_start between spwv.start_vintage and spwv.end_vintage
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)
			--AND sdd.term_start = rid.term_start
			--AND sdd.term_end = rid.term_end
			AND sdd.vintage = spwv.vintage
			AND sdd.deal_volume = rid.actual_volume
			--AND sdd.leg = rid.leg
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	WHERE a.source_deal_header_id IS not NULL AND a.match_type = 'y'
	GROUP BY rid.source_counterparty_id, rid.certificate_seq_from, rid.certificate_seq_to, a.vintage

	UPDATE rid
	SET leg = rid2.leg,
		vintage = rid2.vintage -- get vintage from jurisdiction and update
	FROM #rec_inventory_detail rid
	INNER JOIN #rec_inventory_detail_leg_update_buy_deal rid2
		ON rid.term_start = rid2.term_start
		AND rid.term_end = rid2.term_end
		AND rid.actual_volume = rid2.actual_volume
		AND rid.source_counterparty_id = rid2.source_counterparty_id
		AND rid.certificate_seq_from = rid2.certificate_seq_from
		AND rid.certificate_seq_to = rid2.certificate_seq_to
	
	
	--end for leg update

	/*insert into temp table with leg groupped by source_deal_header. The deal volume is checked to get the exact deal as per the volume availabe
	in the file(this is the requirement to check deal volume)*/
	IF OBJECT_ID('tempdb..#temp_deal_detail') IS NOT NULL
		DROP TABLE #temp_deal_detail
	--get the deals with exact match.
	SELECT rid.certificate_seq_from,
		   rid.certificate_seq_to,
		   rid.certificate_serial_numbers_from,
		   rid.certificate_serial_numbers_to,
		   rid.expiry_date,
		   rid.generator_id,
		   rid.generator,
		   rid.issue_date,
		   rid.state_value_id,
		   rid.jurisdiction,
		   rid.tier_id,
		   rid.tier,
		   rid.term_start,
		   rid.term_end,
		   rid.price,
		   rid.vintage,
		   rid.actual_volume,
		   rid.source_counterparty_id,
		   rid.source_certificate_number,
		   a.source_deal_header_id,
		   a.source_deal_detail_id,
		   rid.leg,
		   rid.temp_id
	INTO #temp_deal_detail
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdh.match_type
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			AND sdd.deal_volume = rid.actual_volume
			--AND sdd.leg = rid.leg
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = rid.source_counterparty_id
	WHERE a.source_deal_header_id IS NOT NULL 
		AND ISNULL(a.match_type, '1') <> 'y'
		AND CAST(ISNULL(sc.int_ext_flag, '*') AS NVARCHAR(2)) = CASE WHEN rid.source_counterparty_id IS NULL THEN '*' else 'i' end

	--get the deals that need to be breakdown and the non existing deals.
	INSERT INTO #temp_deal_detail
	SELECT rid.certificate_seq_from,
		   rid.certificate_seq_to,
		   rid.certificate_serial_numbers_from,
		   rid.certificate_serial_numbers_to,
		   rid.expiry_date,
		   rid.generator_id,
		   rid.generator,
		   rid.issue_date,
		   rid.state_value_id,
		   rid.jurisdiction,
		   rid.tier_id,
		   rid.tier,
		   rid.term_start,
		   rid.term_end,
		   rid.price,
		   rid.vintage,
		   rid.actual_volume,
		   rid.source_counterparty_id,
		   rid.source_certificate_number,
		   a.source_deal_header_id,
		   a.source_deal_detail_id,
		   rid.leg,
		   rid.temp_id
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdh.match_type
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			AND ISNULL(sdd.deal_volume, -1) <> ISNULL(rid.actual_volume, -1)
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	LEFT JOIN #temp_deal_detail ttd ON ttd.temp_id = rid.temp_id
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = rid.source_counterparty_id	
	WHERE a.source_deal_header_id IS NOT NULL 
		AND ttd.temp_id IS NULL 
		AND a.match_type <> 'y'
		AND CAST(ISNULL(sc.int_ext_flag, '*') AS NVARCHAR(2)) = CASE WHEN rid.source_counterparty_id IS NULL THEN '*' else 'i' end
		
	/***************************************************/
	--for buy deal 
	IF OBJECT_ID('tempdb..#temp_deal_detail_buy_deal') IS NOT NULL
		DROP TABLE #temp_deal_detail_buy_deal

	IF OBJECT_ID('tempdb..#temp_before_deal_detail_buy_deal') IS NOT NULL
		DROP TABLE #temp_before_deal_detail_buy_deal

	--get the deals with exact match.
	SELECT rid.certificate_seq_from,
		   rid.certificate_seq_to,
		   rid.certificate_serial_numbers_from,
		   rid.certificate_serial_numbers_to,
		   rid.expiry_date,
		   rid.generator_id, 
		   rid.generator,
		   rid.issue_date,
		   rid.state_value_id, 
		   rid.jurisdiction,
		   rid.tier_id, 
		   rid.tier,
		   rid.term_start, 
		   rid.term_end,
		   rid.price,
		   rid.vintage,
		   rid.actual_volume,
		   rid.source_counterparty_id,
		   rid.source_certificate_number,
		   a.source_deal_header_id,
		   a.source_deal_detail_id,
		   a.leg,
		   rid.temp_id,
		   0 should_join_price
	INTO #temp_before_deal_detail_buy_deal 
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id, sdh.match_type, sdd.leg
		FROM source_deal_header sdh			
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
			AND sdd.vintage = rid.vintage
			AND sdd.deal_volume = rid.actual_volume					
			--AND ((should = 1 and sdd.fixed_price = rid.price)or should = 0)
		INNER JOIN #temp_deals_with_jurisdiction_matched tdwjm
			ON tdwjm.source_deal_header_id = sdh.source_deal_header_id
			AND tdwjm.deal_volume = sdd.deal_volume
		WHERE sdh.counterparty_id = rid.source_counterparty_id
			AND sdh.is_environmental = 'y'
			AND sdh.header_buy_sell_flag = 'b'
	) a
	INNER JOIN source_counterparty sc ON sc.source_counterparty_id = rid.source_counterparty_id	
	WHERE a.source_deal_header_id IS NOT NULL 
		AND a.match_type = 'y'
		AND sc.int_ext_flag = 'e'
	--GROUP BY a.source_deal_detail_id
	--having count(certificate_serial_numbers_from) > 

	UPDATE tmp
	SET should_join_price = 1
	FROM #temp_before_deal_detail_buy_deal tmp
	INNER JOIN 
	(
		--SELECT source_deal_detail_id
		--FROM #temp_before_deal_detail_buy_deal 
		--GROUP BY source_deal_detail_id
		--HAVING COUNT(temp_id) > 1
		SELECT MAX(source_deal_detail_id) a, MIN(source_deal_detail_id) b, temp_id
		FROM #temp_before_deal_detail_buy_deal
		GROUP BY certificate_seq_from, source_certificate_number, temp_id
		HAVING MAX(source_deal_detail_id) <> MIN(source_deal_detail_id)
	) x
	ON tmp.temp_id = x.temp_id
		
	SELECT tbdd.certificate_seq_from,
		   tbdd.certificate_seq_to,
		   tbdd.certificate_serial_numbers_from,
		   tbdd.certificate_serial_numbers_to,
		   tbdd.expiry_date,
		   tbdd.generator_id, 
		   tbdd.generator,
		   tbdd.issue_date,
		   tbdd.state_value_id, 
		   tbdd.jurisdiction,
		   tbdd.tier_id, 
		   tbdd.tier,
		   tbdd.term_start, 
		   tbdd.term_end,
		   tbdd.price,
		   tbdd.vintage,
		   tbdd.actual_volume,
		   tbdd.source_counterparty_id,
		   tbdd.source_certificate_number,
		   tbdd.source_deal_header_id,
		   tbdd.source_deal_detail_id,
		   tbdd.leg,
		   tbdd.temp_id
	INTO #temp_deal_detail_buy_deal
	FROM #temp_before_deal_detail_buy_deal tbdd
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = tbdd.source_deal_header_id
		AND sdd.vintage = tbdd.vintage
		AND sdd.deal_volume = tbdd.actual_volume
		AND sdd.fixed_price = tbdd.price
	WHERE should_join_price = 1 
	UNION
	SELECT MAX(CAST(tbdd.certificate_seq_from AS INT)) certificate_seq_from,
		   MAX(CAST(tbdd.certificate_seq_to AS INT)) certificate_seq_to,
		   MAX(REVERSE(SUBSTRING(REVERSE(tbdd.certificate_serial_numbers_from),	CHARINDEX('-',REVERSE(tbdd.certificate_serial_numbers_from)) + 1, 100))) 
				+ '-' + CAST(MAX(CAST(tbdd.certificate_seq_from AS INT)) AS NVARCHAR) certificate_serial_numbers_from,
		   MAX(REVERSE(SUBSTRING(REVERSE(tbdd.certificate_serial_numbers_to),	CHARINDEX('-',REVERSE(tbdd.certificate_serial_numbers_to)) + 1, 100))) 
				+ '-' + CAST(MAX(CAST(tbdd.certificate_seq_to AS INT)) AS NVARCHAR) certificate_serial_numbers_to,
		   MAX(tbdd.expiry_date) expiry_date,
		   MAX(tbdd.generator_id) generator_id, 
		   MAX(tbdd.generator) generator,
		   MAX(tbdd.issue_date) issue_date,
		   tbdd.state_value_id, 
		   tbdd.jurisdiction,
		   tbdd.tier_id, 
		   tbdd.tier,
		   MAX(tbdd.term_start) term_start, 
		   MAX(tbdd.term_end) term_end,
		   MAX(tbdd.price) price,
		   MAX(tbdd.vintage) vintage,
		   MAX(tbdd.actual_volume) actual_volume,
		   MAX(tbdd.source_counterparty_id) source_counterparty_id,
		   MAX(tbdd.source_certificate_number) source_certificate_number,
		   MAX(tbdd.source_deal_header_id) source_deal_header_id,
		   tbdd.source_deal_detail_id,
		   MIN(tbdd.leg) leg,
		   MAX(tbdd.temp_id) temp_id
	FROM #temp_before_deal_detail_buy_deal tbdd
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = tbdd.source_deal_header_id
		AND sdd.vintage = tbdd.vintage
		AND sdd.deal_volume = tbdd.actual_volume
	WHERE should_join_price = 0
	GROUP BY tbdd.source_deal_detail_id, tbdd.jurisdiction, tbdd.tier,tbdd.state_value_id, tbdd.tier_id
		
	--get the deals that need to be breakdown and the non existing deals.
	/*get remaining data to insert with no exact match*/
	--get only unmatched volume
	IF OBJECT_ID('tempdb..#temp_unmatched_volume') IS NOT NULL
		DROP TABLE #temp_unmatched_volume
		 
	--SELECT max(rid.certificate_seq_from) certificate_seq_from
	--	   , max(rid.certificate_seq_to) certificate_seq_to  
	--	   --, max(rid.term_start)		 term_start
	--	   --, max(rid.term_end)			 term_end
	--	   , rid.term_start
	--	   , rid.term_end
	--	   , max(rid.vintage)			 vintage
	--	   , max(rid.actual_volume)			 actual_volume
	--	   , rid.source_counterparty_id		   
	--	   , max(rid.source_certificate_number) source_certificate_number
	--INTO #temp_unmatched_volume
	--FROM #rec_inventory_detail rid 
	--LEFT JOIN #temp_deal_detail_buy_deal tdd
	--	ON rid.temp_id = tdd.temp_id
	--LEFT JOIN source_counterparty sc
	--	ON sc.source_counterparty_id = rid.source_counterparty_id
	--WHERE tdd.temp_id IS NULL AND sc.int_ext_flag = 'e'
	--GROUP BY rid.source_counterparty_id, rid.term_start, rid.term_end, rid.leg--rid.source_certificate_number

	CREATE TABLE #temp_unmatched_volume	(
		certificate_seq_from INT,
		certificate_seq_to  INT,
		term_start DATE,
		term_end DATE,
		source_counterparty_id INT,
		vintage INT,
		actual_volume FLOAT,
		source_certificate_number INT,
		state_value_id INT,
		tier_id INT,
		price FLOAT,
		temp_id INT
	)

	DECLARE @cpty INT
		  , @vintage INT
		  , @juristiction INT

	DECLARE cursor_cpty_vintage CURSOR
	FOR	
		SELECT rid.source_counterparty_id, rid.vintage, rid.state_value_id
		--select rid.*	
		FROM #rec_inventory_detail rid 
		LEFT JOIN #temp_deal_detail_buy_deal tdd
			ON rid.temp_id = tdd.temp_id
		LEFT JOIN source_counterparty sc
			ON sc.source_counterparty_id = rid.source_counterparty_id
		WHERE tdd.temp_id IS NULL AND sc.int_ext_flag = 'e'
		GROUP BY rid.source_counterparty_id, rid.vintage, rid.state_value_id

		OPEN cursor_cpty_vintage
		FETCH NEXT FROM cursor_cpty_vintage
		INTO @cpty, @vintage, @juristiction
		WHILE @@FETCH_STATUS = 0
		BEGIN
			INSERT INTO #temp_unmatched_volume
			SELECT rid.certificate_seq_from
				 , MAX(rid.certificate_seq_to) certificate_seq_to  
				 , MAX(rid.term_start)		 term_start
				 , MAX(rid.term_end)			 term_end		   
				 , rid.source_counterparty_id
				 , rid.vintage
				 , MAX(rid.actual_volume) actual_volume
				 , rid.source_certificate_number
				 , rid.state_value_id
				 , rid.tier_id
				 , MAX(rid.price) price
				 , MAX(rid.temp_id) temp_id
			--select rid.*	
			FROM #rec_inventory_detail rid 
			LEFT JOIN #temp_deal_detail_buy_deal tdd
				--ON rid.temp_id = tdd.temp_id
				ON rid.certificate_seq_from = tdd.certificate_seq_from
				AND rid.certificate_seq_to = tdd.certificate_seq_to
				AND rid.source_certificate_number = tdd.source_certificate_number			
			LEFT JOIN source_counterparty sc
				ON sc.source_counterparty_id = rid.source_counterparty_id
			WHERE tdd.temp_id IS NULL AND sc.int_ext_flag = 'e'
				AND rid.source_counterparty_id = @cpty 
				AND rid.vintage = @vintage
				AND rid.state_value_id = @juristiction
			GROUP BY rid.source_counterparty_id, rid.vintage, rid.source_certificate_number, rid.state_value_id, rid.certificate_seq_from, rid.tier_id
			
			FETCH NEXT FROM cursor_cpty_vintage
			INTO @cpty, @vintage, @juristiction
		END
	
	CLOSE cursor_cpty_vintage
	DEALLOCATE cursor_cpty_vintage	
		
	ALTER TABLE #temp_unmatched_volume ADD row_id INT

	UPDATE UpdateTarget
	SET row_id = RowNum
	FROM
	(
		SELECT  x.row_id, ROW_NUMBER() OVER(ORDER BY x.price, x.vintage, state_value_id, x.term_start, x.term_end, x.temp_id) AS RowNum
		FROM    #temp_unmatched_volume x		
	) AS UpdateTarget;
	

	DECLARE @count_unmatch INT, @count_unmatch1 INT	
	SELECT @count_unmatch = COUNT(row_id), @count_unmatch1 = 0 FROM #temp_unmatched_volume

	WHILE (@count_unmatch  <>  @count_unmatch1)
	BEGIN		
		SELECT @count_unmatch = COUNT(row_id) FROM #temp_unmatched_volume 

		--get combinations of the volume using rolling sum
		IF OBJECT_ID('tempdb..#unmatched_volume_with_group_set') IS NOT NULL
			DROP TABLE #unmatched_volume_with_group_set
			
		SELECT a.row_id,		   
			   r.rowid_combined grp_set,
			   a.vintage,
			   SUM(cast(actual_volume AS INT)) OVER(PARTITION BY source_counterparty_id, vintage, state_value_id ORDER BY row_id
						ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
			   AS actual_volume,
			   a.source_counterparty_id,
			   a.source_certificate_number,
			   a.state_value_id,
			   a.tier_id
		INTO #unmatched_volume_with_group_set
		FROM #temp_unmatched_volume a
		OUTER APPLY(
					SELECT STUFF(
					(SELECT '-' + CAST(a1.row_id AS NVARCHAR(6))
					FROM #temp_unmatched_volume a1
					WHERE a1.source_counterparty_id = a.source_counterparty_id 
						  and a1.vintage  = a.vintage
						   and a1.state_value_id  = a.state_value_id
						  AND a1.row_id <= a.row_id
					FOR XML PATH(''))
					, 1, 1, '') [rowid_combined]
		) r
	
		--;WITH selfrec AS (
	 --       SELECT CAST(t.actual_volume AS INT) actual_volume, 
		--		   t.row_id, 
		--		   0 AS [Level], 
		--		   CAST(t.row_id AS NVARCHAR(MAX)) AS grp_set,
		--		   vintage, 
		--		   source_counterparty_id 
		--	FROM #temp_unmatched_volume t
	 --       UNION ALL
	 --       SELECT CAST(t2.actual_volume AS INT) + CAST(t1.actual_volume AS INT) AS actual_volume, 
		--		   t1.row_id, 
		--		   [Level] + 1, 
		--		   CAST(CONCAT(CAST(t2.grp_set AS NVARCHAR(1000)), '-' ,CAST(t1.row_id AS NVARCHAR(1000))) AS  NVARCHAR(MAX)), 
		--		   t1.vintage, 
		--		   t1.source_counterparty_id 
		--	FROM #temp_unmatched_volume t1
	 --       INNER JOIN selfrec t2 ON t1.row_id < t2.row_id
		--		--AND t1.term_start = t2.term_start
	 --           --AND t1.term_end = t2.term_end
	 --           AND t1.vintage = t2.vintage
	 --           AND t1.source_counterparty_id = t2.source_counterparty_id 
		--	WHERE [Level] < 500 -- limit the number of recursions    
	 --   )
	 --   SELECT * 
		--INTO #unmatched_volume_with_group_set
		--FROM selfrec-- WHERE [level] not in (0)
	 --   ORDER BY [level]

		--get rows whose sum match the sum of volume available in deal
		IF OBJECT_ID('tempdb..#final_data_for_unmatched_volume') IS NOT NULL
			DROP TABLE #final_data_for_unmatched_volume
	
		SELECT b.item as row, 
			  a.source_deal_header_id, 
			  a.source_deal_detail_id, 
			  a.match_type, 
			  a.deal_volume, 
			  --a.level,
			  a.vintage, 
			  a.source_counterparty_id,
			  a.row_id, 
			  a.grp_set,
			  uvwgs.source_certificate_number
		INTO #final_data_for_unmatched_volume
		FROM (
			SELECT TOP 1 sdh.source_deal_header_id, --top is used as sum of combination can match multiple deals at once
				   sdd.source_deal_detail_id, 
				   sdh.match_type, 
				   sdd.deal_volume, 		   
				   uvwgs.vintage, 
				   uvwgs.source_counterparty_id,
				   min(uvwgs.row_id) row_id, 
				   min(uvwgs.grp_set) grp_set
			FROM #unmatched_volume_with_group_set uvwgs
			INNER JOIN source_deal_detail sdd
				ON sdd.vintage = uvwgs.vintage
				AND sdd.deal_volume = uvwgs.actual_volume
			OUTER APPLY(
				SELECT sdh1.source_deal_header_id, sdh1.match_type, sdh1.is_environmental, sdh1.header_buy_sell_flag
				FROM source_deal_header sdh1
				LEFT JOIN gis_product gp
					ON sdh1.source_deal_header_id = gp.source_deal_header_id
					AND gp.in_or_not = 1
				WHERE sdh1.source_deal_header_id = sdd.source_deal_header_id
					AND sdh1.counterparty_id = uvwgs.source_counterparty_id
					AND ISNULL(gp.jurisdiction_id, sdh1.state_value_id) = uvwgs.state_value_id
					AND CASE WHEN gp.jurisdiction_id IS NOT NULL AND gp.tier_id IS NOT NULL
								 THEN gp.tier_id
							 WHEN gp.jurisdiction_id IS NOT NULL AND gp.tier_id IS NULL
								 THEN -1
							 WHEN gp.jurisdiction_id IS NULL
								THEN sdh1.tier_value_id END = CASE WHEN gp.jurisdiction_id IS NOT NULL AND gp.tier_id IS NULL
																	   THEN -1
																	ELSE uvwgs.tier_id END						
			) sdh			
			--INNER JOIN source_deal_header sdh
			--	ON sdh.source_deal_header_id = sdd.source_deal_header_id
			--	AND sdh.counterparty_id = uvwgs.source_counterparty_id
			--	AND sdh.state_value_id = uvwgs.state_value_id
			--	AND sdh.tier_value_id = uvwgs.tier_id			   
			LEFT JOIN #temp_deal_detail_buy_deal tddbd 
				ON tddbd.source_deal_header_id = sdh.source_deal_header_id
			WHERE sdh.source_deal_header_id IS NOT NULL
				AND sdh.is_environmental = 'y' 
				AND sdh.match_type = 'y' 
				AND tddbd.source_certificate_number IS NULL
				AND sdh.header_buy_sell_flag = 'b'
			GROUP BY sdh.source_deal_header_id, sdd.source_deal_detail_id, sdh.match_type, sdd.deal_volume, uvwgs.vintage, uvwgs.source_counterparty_id, uvwgs.state_value_id
		)a
		OUTER APPLY(SELECT value as item FROM STRING_SPLIT(grp_set, '-')) b
		INNER JOIN #unmatched_volume_with_group_set uvwgs on uvwgs.row_id = b.item

		INSERT INTO #temp_deal_detail_buy_deal
		SELECT DISTINCT rid.certificate_seq_from,
			   rid.certificate_seq_to,
			   rid.certificate_serial_numbers_from,
			   rid.certificate_serial_numbers_to,
			   rid.expiry_date,
			   rid.generator_id, 
			   rid.generator,
			   rid.issue_date,
			   rid.state_value_id, 
			   rid.jurisdiction,
			   rid.tier_id, 
			   rid.tier,
			   rid.term_start, 
			   rid.term_end,
			   rid.price,
			   --rid.vintage, 
			   fdfuv.vintage,
			   rid.actual_volume,
			   rid.source_counterparty_id,
			   rid.source_certificate_number,
			   fdfuv.source_deal_header_id,
			   fdfuv.source_deal_detail_id,
			   --rid.leg,
			  DENSE_RANK() OVER(PARTITION BY rid.source_counterparty_id, fdfuv.vintage, tuv.state_value_id ORDER BY tuv.source_certificate_number) leg ,	
			   rid.temp_id	    	
		FROM #rec_inventory_detail rid
		INNER JOIN #temp_unmatched_volume tuv
			ON tuv.term_start = rid.term_start
			AND tuv.term_end = rid.term_end
			--AND tuv.vintage = rid.vintage
			AND tuv.source_counterparty_id = rid.source_counterparty_id
			AND tuv.actual_volume = rid.actual_volume
			AND tuv.source_certificate_number = rid.source_certificate_number
		INNER JOIN #final_data_for_unmatched_volume fdfuv
			ON tuv.row_id = fdfuv.row	
	
		----update leg for buy deals refering source_deal_detail_id
		----get leg for buy deals	'only for unmatch'
		--IF OBJECT_ID('tempdb..#temp_update_unmatched_volume_buy_leg') IS NOT NULL
		--	DROP TABLE #temp_update_unmatched_volume_buy_leg	
	
		--SELECT a.source_deal_header_id, 
		--	   a.source_deal_detail_id, 
		--	   a.actual_volume, 
		--	   a.certificate_seq_from,
		--	   a.certificate_seq_to, 
		--	   a.source_counterparty_id,  
		--	   a.term_start, 
		--	   a.term_end, 
		--	   a.vintage,
		--	   DENSE_RANK() OVER(PARTITION BY a.source_deal_detail_id ORDER BY a.term_start, a.term_end, MIN(temp_id)) leg,
		--	   a.source_certificate_number
		--INTO #temp_update_unmatched_volume_buy_leg
		--FROM #temp_deal_detail_buy_deal a
		--INNER JOIN #temp_unmatched_volume tuv
		--	ON tuv.term_start = a.term_start
		--	AND tuv.term_end = a.term_end
		--	AND tuv.vintage = a.vintage
		--	AND tuv.source_counterparty_id = a.source_counterparty_id
		--	AND tuv.actual_volume = a.actual_volume
		--GROUP BY a.source_deal_header_id, a.source_deal_detail_id, a.vintage, a.actual_volume,a.certificate_seq_from, a.certificate_seq_to, a.term_start, a.term_end, 
		--		 a.source_counterparty_id, a.source_certificate_number

		--UPDATE a
		--SET leg = tuv.leg
		--FROM #temp_deal_detail_buy_deal a
		--INNER JOIN #temp_update_unmatched_volume_buy_leg tuv
		--ON tuv.term_start = a.term_start
		--    AND tuv.term_end = a.term_end
		--    AND tuv.vintage = a.vintage
		--    AND tuv.source_counterparty_id = a.source_counterparty_id
		--	AND tuv.actual_volume = a.actual_volume
		--	AND tuv.source_certificate_number = a.source_certificate_number
		
		DELETE tuv 
		FROM #temp_unmatched_volume tuv 		 
		INNER JOIN #temp_deal_detail_buy_deal tddbd
			ON tuv.source_certificate_number = tddbd.source_certificate_number
			AND tuv.certificate_seq_from = tddbd.certificate_seq_from
			AND tuv.certificate_seq_to = tddbd.certificate_seq_to
			AND tuv.state_value_id = tddbd.state_value_id
			AND tuv.source_counterparty_id = tddbd.source_counterparty_id
			AND tuv.actual_volume = tddbd.actual_volume
			
		SELECT @count_unmatch1  = COUNT(row_id) FROM #temp_unmatched_volume
	END

	--/* to do
	--get leg for all vintage for buy deals	(for whole year) only for exact matching buy deals
	IF OBJECT_ID('tempdb..#temp_deal_detail_buy_deal_leg_update') IS NOT NULL
		DROP TABLE #temp_deal_detail_buy_deal_leg_update

	SELECT DENSE_RANK() OVER(PARTITION BY tddbd.source_counterparty_id, MAX(spwv.vintage), source_deal_header_id ORDER BY MIN(tddbd.temp_id),tddbd.certificate_seq_from, tddbd.certificate_seq_to) leg,
		   MAX(tddbd.certificate_seq_from) certificate_seq_from,
		   MAX(tddbd.certificate_seq_to) certificate_seq_TO,		   		   
		   MAX(tddbd.generator_id) generator_id, 		   
		   MAX(tddbd.actual_volume) actual_volume,
		   MAX(tddbd.source_counterparty_id) source_counterparty_id,		   
		   tddbd.source_certificate_number, 
		   MAX(tddbd.term_start) term_start, 
		   MAX(tddbd.term_end) term_end	   
	INTO #temp_deal_detail_buy_deal_leg_update
	FROM #temp_deal_detail_buy_deal tddbd
	INNER JOIN #state_properties_with_vintage spwv
		ON tddbd.vintage = spwv.vintage
		AND tddbd.jurisdiction = spwv.jurisdiction
	LEFT JOIN #temp_unmatched_volume tuv
		ON tuv.term_start = tddbd.term_start
		AND tuv.term_end = tddbd.term_end
		AND tuv.vintage = tddbd.vintage
		AND tuv.source_counterparty_id = tddbd.source_counterparty_id
		AND tuv.actual_volume = tddbd.actual_volume
	WHERE tuv.certificate_seq_from is null
	GROUP BY tddbd.certificate_seq_to, tddbd.certificate_seq_from, tddbd.source_counterparty_id, tddbd.source_deal_header_id, tddbd.source_deal_detail_id, tddbd.source_certificate_number
	ORDER BY MIN(tddbd.temp_id)

	UPDATE tddbd 
	SET leg = tddbdlu.leg	
	FROM #temp_deal_detail_buy_deal tddbd
	INNER JOIN #temp_deal_detail_buy_deal_leg_update tddbdlu
		ON tddbdlu.certificate_seq_from = tddbd.certificate_seq_from
		AND tddbdlu.certificate_seq_to = tddbd.certificate_seq_to
		AND tddbdlu.source_counterparty_id = tddbd.source_counterparty_id
		AND ISNULL(tddbdlu.source_certificate_number, -1) = ISNULL(tddbd.source_certificate_number, -1)
		AND ISNULL(tddbdlu.generator_id, -1) = ISNULL(tddbd.generator_id, -1)
		AND tddbdlu.actual_volume = tddbd.actual_volume

	IF (OBJECT_ID('tempdb..#final_data_for_unmatched_volume') IS NOT NULL AND OBJECT_ID('tempdb..#unmatched_volume_with_group_set') IS NOT NULL)
	BEGIN
		--insert into temp table for missng row of buy deal
		IF OBJECT_ID('tempdb..#temp_unavailable_buy_volume') IS NOT NULL
			DROP TABLE #temp_unavailable_buy_volume

		SELECT DISTINCT rid.*
		INTO #temp_unavailable_buy_volume		
		FROM #unmatched_volume_with_group_set uvgs	
		OUTER APPLY(SELECT item FROM dbo.fnasplit(uvgs.grp_set, '-')) c  
		INNER JOIN #temp_unmatched_volume tuv
			ON tuv.row_id = c.item
		INNER JOIN #rec_inventory_detail rid
			ON tuv.term_start = rid.term_start
			AND tuv.term_end = rid.term_end
			AND tuv.vintage = rid.vintage
			AND tuv.source_counterparty_id = rid.source_counterparty_id
			AND tuv.actual_volume = rid.actual_volume
		INNER JOIN source_counterparty sc ON sc.source_counterparty_id = rid.source_counterparty_id			
		LEFT JOIN #final_data_for_unmatched_volume fduv
			ON fduv.source_certificate_number = tuv.source_certificate_number
		LEFT JOIN #temp_deal_detail_buy_deal tdd				
			ON rid.certificate_seq_from = tdd.certificate_seq_from
			AND rid.certificate_seq_to = tdd.certificate_seq_to
			AND rid.source_certificate_number = tdd.source_certificate_number						
		WHERE fduv.source_deal_header_id IS NULL
			AND sc.int_ext_flag = 'e' 
			AND tdd.temp_id IS NULL	
	END
	/***************************************************/
	--*/
		
	--insert into temp table as per grouped in leg
	IF OBJECT_ID('tempdb..#temp_deal_detail_grouped') IS NOT NULL
		DROP TABLE #temp_deal_detail_grouped

	SELECT a.certificate_seq_from,
		   a.certificate_seq_to,
		   a.source_deal_header_id,
		   MAX(a.source_deal_detail_id) source_deal_detail_id,
		   avg(convert(float , a.actual_volume)) actual_volume,
		   avg(convert(float , a.price)) price,
		   a.generator_id,
		   a.generator,
		   a.term_start,
		   a.term_end,
		   a.source_counterparty_id,
		   a.leg,
		   MAX(a.temp_id) temp_id,
		   MAX(a.source_certificate_number) source_certificate_number
	INTO #temp_deal_detail_grouped
	FROM #temp_deal_detail a
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = a.source_deal_header_id
	GROUP BY a.certificate_seq_from,
			 a.certificate_seq_to,
			 a.source_deal_header_id,
			 --a.source_deal_detail_id,
			 a.generator_id,
			 a.generator,
			 a.term_start,
			 a.term_end,
			 a.source_counterparty_id,
			 a.leg
	ORDER BY a.source_deal_header_id

	--insert into temp table as per grouped in vintage for buy deals
	IF OBJECT_ID('tempdb..#temp_deal_detail_grouped_buy_deal') IS NOT NULL
		DROP TABLE #temp_deal_detail_grouped_buy_deal
	
	SELECT a.certificate_seq_from,
		   a.certificate_seq_to,
		   a.source_deal_header_id,
		   MAX(a.source_deal_detail_id) source_deal_detail_id,
		   avg(convert(float , a.actual_volume)) actual_volume,
		   avg(convert(float , a.price)) price,
		   a.generator_id,
		   a.generator,
		   a.term_start, 
		   a.term_end,
		   a.source_counterparty_id,
		   a.leg,
		   MAX(a.temp_id) temp_id,
		   MAX(a.source_certificate_number) source_certificate_number
	INTO #temp_deal_detail_grouped_buy_deal
	FROM #temp_deal_detail_buy_deal a
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = a.source_deal_header_id
	GROUP BY a.certificate_seq_from,
			 a.certificate_seq_to,
			 a.source_deal_header_id,
			 --a.source_deal_detail_id,
			 a.generator_id,
			 a.generator,
			 a.term_start,
			 a.term_end,
			 a.source_counterparty_id,
			 a.leg
	ORDER BY a.source_deal_header_id

	--insert into temp table to check the deals volume
	IF OBJECT_ID('tempdb..#temp_deal_to_check') IS NOT NULL
			DROP TABLE #temp_deal_to_check

	SELECT a.source_deal_header_id,
		   SUM(CONVERT(FLOAT , a.actual_volume)) actual_volume,
		   a.term_start,
		   a.term_end,
		   a.source_counterparty_id
	INTO #temp_deal_to_check
	FROM #temp_deal_detail_grouped a
	GROUP BY a.source_deal_header_id,
			 a.term_start,
			 a.term_end,
			 a.source_counterparty_id
	UNION ALL
	SELECT a.source_deal_header_id,	   
		   SUM(CONVERT(FLOAT , a.actual_volume)) actual_volume,	   
		   MAX(a.term_start), 
		   MAX(a.term_end),
		   a.source_counterparty_id	
	FROM #temp_deal_detail_grouped_buy_deal a	
	GROUP BY a.source_deal_header_id,
			 a.source_counterparty_id
	ORDER BY a.source_deal_header_id

	--check for the deals missing in the system
	IF OBJECT_ID('tempdb..#rec_inventory_missing_deal') IS NOT NULL
		DROP TABLE #rec_inventory_missing_deal

	SELECT rst.vintage_year,
		   rst.vintage_month,
		   DATEFROMPARTS(vintage_year, vintage_month, 1) term_start,
		   EOMONTH(DATEFROMPARTS(vintage_year, vintage_month, 1)) term_end,
		   rst.counterparty,
		   rst.generator,
		   rst.price,
		   rst.volume,
		   rst.temp_id,
		   rst.import_file_name,
		   rid.certificate_seq_from,
		   rid.certificate_seq_to,
		   rst.jurisdiction,
		   rst.tier,
		   rst.source_certificate_number
	INTO #rec_inventory_missing_deal
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdh.match_type
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			AND sdh.match_type <> 'y'
	) a
	INNER JOIN #rec_staging_table rst
		ON rid.temp_id = rst.temp_id
		AND rid.certificate_seq_from = rst.certificate_seq_from
		AND rid.certificate_seq_to = rst.certificate_seq_to
	LEFT JOIN source_counterparty sc
		ON sc.source_counterparty_id = rid.source_counterparty_id
	WHERE a.source_deal_header_id IS NULL-- AND a.match_type <> 'y'
		AND ISNULL(sc.int_ext_flag, -1) <> 'e'
		AND rst.jurisdiction = rst.generation_state
	UNION ALL	
	SELECT rst.vintage_year,
		   rst.vintage_month,
		   DATEFROMPARTS(vintage_year, vintage_month, 1) term_start, 
		   EOMONTH(DATEFROMPARTS(vintage_year, vintage_month, 1)) term_end,		   
		   rst.counterparty,
		   rst.generator,
		   rst.price,
		   rst.volume,
		   rst.temp_id,
		   rst.import_file_name,
		   rid.certificate_seq_from,
		   rid.certificate_seq_to,
		   rst.jurisdiction,
		   rst.tier,
		   rst.source_certificate_number
	FROM #rec_inventory_detail rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdh.match_type
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
			AND sdd.vintage = rid.vintage
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)			
	) a
	INNER JOIN #rec_staging_table rst
		ON rid.temp_id = rst.temp_id
		AND rid.certificate_seq_from = rst.certificate_seq_from
		AND rid.certificate_seq_to = rst.certificate_seq_to
	WHERE a.source_deal_header_id IS NULL AND a.match_type = 'y'
		AND rst.jurisdiction = rst.generation_state

	INSERT INTO #rec_inventory_missing_deal
	SELECT DATEPART(yyyy, tddg.term_start),
		   DATEPART(MM, tddg.term_start),
		   tddg.term_start,
		   tddg.term_end,
		   sc.counterparty_id,
		   tddg.generator,
		   tddg.price,
		   tddg.actual_volume,
		   max(tddg.temp_id),
		   NULL,
		   tddg.certificate_seq_from,
		   tddg.certificate_seq_to,
		   NULL,
		   NULL,
		   MAX(tddg.source_certificate_number) source_certificate_number
	FROM #temp_deal_detail_grouped tddg
	OUTER APPLY (SELECT sdd.source_deal_header_id
				 FROM source_deal_detail sdd
				 INNER JOIN #temp_deal_to_check tdtc
					ON sdd.source_deal_header_id = tdtc.source_deal_header_id
				 OUTER APPLY(SELECT SUM(deal_volume) deal_volume
							FROM source_deal_detail sdd1
							WHERE sdd1.source_deal_header_id = sdd.source_deal_header_id
							GROUP BY sdd1.source_deal_header_id
				 ) a
				 WHERE sdd.source_deal_header_id = tddg.source_deal_header_id
					AND tdtc.actual_volume = a.deal_volume
				 GROUP BY sdd.source_deal_header_id
	) b
	LEFT JOIN source_deal_detail sdds
		ON sdds.source_deal_header_id = tddg.source_deal_header_id
		AND sdds.deal_volume = tddg.actual_volume
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = tddg.source_counterparty_id
	WHERE b.source_deal_header_id IS NULL AND sdds.source_deal_header_id IS NULL
		AND sc.int_ext_flag = 'e'
	GROUP BY tddg.term_start,
		     tddg.term_end,
		     sc.counterparty_id,
		     tddg.generator,
		     tddg.price,
		     tddg.actual_volume,
			 tddg.certificate_seq_from,
			 tddg.certificate_seq_to
	UNION ALL
	SELECT DATEPART(yyyy, tddgbd.term_start),
		   DATEPART(MM, tddgbd.term_start),
		   tddgbd.term_start,
		   tddgbd.term_end,
		   sc.counterparty_id,
		   tddgbd.generator,
		   tddgbd.price,
		   tddgbd.actual_volume,
		   max(tddgbd.temp_id),
		   NULL,
		   tddgbd.certificate_seq_from,
		   tddgbd.certificate_seq_to,
		   NULL,
		   NULL,
		   MAX(tddgbd.source_certificate_number) source_certificate_number
	FROM #temp_deal_detail_grouped_buy_deal tddgbd
	OUTER APPLY (SELECT sdd.source_deal_header_id 
				 FROM source_deal_detail sdd
				 INNER JOIN #temp_deal_to_check tdtc
					ON sdd.source_deal_header_id = tdtc.source_deal_header_id
				 OUTER APPLY(SELECT SUM(deal_volume) deal_volume
							FROM source_deal_detail sdd1
							WHERE sdd1.source_deal_header_id = sdd.source_deal_header_id
							GROUP BY sdd1.source_deal_header_id
				 ) a
				 WHERE sdd.source_deal_header_id = tddgbd.source_deal_header_id
					AND tdtc.actual_volume = a.deal_volume
				 GROUP BY sdd.source_deal_header_id
	) b
	LEFT JOIN source_deal_detail sdds
		ON sdds.source_deal_header_id = tddgbd.source_deal_header_id
		AND sdds.deal_volume = tddgbd.actual_volume
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = tddgbd.source_counterparty_id
	WHERE b.source_deal_header_id IS NULL AND sdds.source_deal_header_id IS NULL
		AND sc.int_ext_flag = 'e'
	GROUP BY tddgbd.term_start,
		     tddgbd.term_end,
		     sc.counterparty_id,
		     tddgbd.generator,
		     tddgbd.price,
		     tddgbd.actual_volume,
			 tddgbd.certificate_seq_from,
			 tddgbd.certificate_seq_to

	--buy deals whose volume doesnot match any deals
	IF OBJECT_ID('tempdb..#temp_unavailable_buy_volume') IS NOT NULL
	BEGIN
		INSERT INTO #rec_inventory_missing_deal
		SELECT MAX(rst.vintage_year),
			   MAX(rst.vintage_month),
			   DATEFROMPARTS(MAX(vintage_year), MAX(vintage_month), 1) term_start, 
			   EOMONTH(DATEFROMPARTS(MAX(vintage_year), MAX(vintage_month), 1)) term_end,		   
			   MAX(rst.counterparty),
			   MAX(rst.generator),
			   MAX(rst.price),
			   MAX(rst.volume),
			   MAX(rst.temp_id),
			   MAX(rst.import_file_name),
			   MAX(tubv.certificate_seq_from),
			   MAX(tubv.certificate_seq_to),
			   MAX(rst.jurisdiction),
			   MAX(rst.tier),
			   rst.source_certificate_number
		FROM #temp_unavailable_buy_volume tubv
		INNER JOIN #rec_staging_table rst
			ON tubv.temp_id = rst.temp_id
			AND tubv.certificate_seq_from = rst.certificate_seq_from
			AND tubv.certificate_seq_to = rst.certificate_seq_to
		--WHERE rst.jurisdiction = rst.generation_state
		GROUP BY rst.generation_state, rst.source_certificate_number, rst.certificate_seq_from, rst.jurisdiction, rst.tier
	END

	--show in report for rows which does not match with any deals due to missing attributes(like cpty, term etc.) that are deleted from process table or temp_table
	INSERT INTO #rec_inventory_missing_deal
	SELECT rst.vintage_year,
		   rst.vintage_month,
		   DATEFROMPARTS(rst.vintage_year, rst.vintage_month, 1) term_start, 
		   EOMONTH(DATEFROMPARTS(rst.vintage_year, rst.vintage_month, 1)) term_end,		   
		   rst.counterparty,
		   rst.generator,
		   rst.price,
		   rst.volume,
		   MAX(rst.temp_id),
		   rst.import_file_name,
		   rst.certificate_seq_from,
		   rst.certificate_seq_to,
		   rst.jurisdiction,
		   rst.tier,
		   rst.source_certificate_number
	FROM #rec_staging_table rst		
	INNER JOIN #error_status es
		ON rst.temp_id = es.temp_id
	LEFT JOIN #rec_inventory_missing_deal rmd
		ON rmd.temp_id = es.temp_id
	LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number	
	WHERE mlt.message_status = 'Error' OR es.message_status = 'Error'
		AND rmd.certificate_seq_from IS NULL
		AND rst.jurisdiction = rst.generation_state
	GROUP BY rst.vintage_year,
		     rst.vintage_month,			 
			 rst.counterparty,
			 rst.generator,
			 rst.price,
			 rst.volume,			 
			 rst.import_file_name,
			 rst.certificate_seq_from,
			 rst.certificate_seq_to,
		     rst.jurisdiction,
		     rst.tier,
			 rst.source_certificate_number

	/**delete data that are not valid i.e 
		deal volume <> sdd.deal_volume when sum if volume in file exceeds sdd.deal_volume
	*/
	DELETE tddg
	FROM #temp_deal_detail_grouped tddg
	OUTER APPLY (SELECT sdd.source_deal_header_id
				 FROM source_deal_detail sdd
				 INNER JOIN #temp_deal_to_check tdtc
					ON sdd.source_deal_header_id = tdtc.source_deal_header_id
				 OUTER APPLY(SELECT SUM(deal_volume) deal_volume
							FROM source_deal_detail sdd1
							WHERE sdd1.source_deal_header_id = sdd.source_deal_header_id
							GROUP BY sdd1.source_deal_header_id
				 ) a
				 WHERE sdd.source_deal_header_id = tddg.source_deal_header_id
					AND tdtc.actual_volume = a.deal_volume
				 GROUP BY sdd.source_deal_header_id
	) b
	LEFT JOIN source_deal_detail sdds
		ON sdds.source_deal_header_id = tddg.source_deal_header_id
		AND sdds.deal_volume = tddg.actual_volume
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = tddg.source_counterparty_id
	WHERE b.source_deal_header_id IS NULL AND sdds.source_deal_header_id IS NULL
		AND sc.int_ext_flag = 'e'

	DELETE tddgbd
	FROM #temp_deal_detail_grouped_buy_deal tddgbd
	OUTER APPLY (SELECT sdd.source_deal_header_id 
				 FROM source_deal_detail sdd
				 INNER JOIN #temp_deal_to_check tdtc
					ON sdd.source_deal_header_id = tdtc.source_deal_header_id
				 OUTER APPLY(SELECT SUM(deal_volume) deal_volume
							FROM source_deal_detail sdd1
							WHERE sdd1.source_deal_header_id = sdd.source_deal_header_id
							GROUP BY sdd1.source_deal_header_id
				 ) a
				 WHERE sdd.source_deal_header_id = tddgbd.source_deal_header_id
					AND tdtc.actual_volume = a.deal_volume
				 GROUP BY sdd.source_deal_header_id
	) b
	LEFT JOIN source_deal_detail sdds
		ON sdds.source_deal_header_id = tddgbd.source_deal_header_id
		AND sdds.deal_volume = tddgbd.actual_volume
	LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = tddgbd.source_counterparty_id
	WHERE b.source_deal_header_id IS NULL AND sdds.source_deal_header_id IS NULL
		AND sc.int_ext_flag = 'e'

	--some data bring valid deals and invalid deals resulting both to deal split as well as listed in missing deals
	DELETE rimd
	FROM #rec_inventory_missing_deal rimd
	INNER JOIN  #temp_deal_detail_grouped tggd
		ON tggd.temp_id = rimd.temp_id

	DELETE rimd
	FROM #rec_inventory_missing_deal rimd
	INNER JOIN  #temp_deal_detail_grouped_buy_deal tggdbd
		ON tggdbd.temp_id = rimd.temp_id
	/**********delete missing deals from temp table ends***************/

	IF EXISTS (select 1 from #rec_inventory_missing_deal)
	BEGIN
		DECLARE	@process_table NVARCHAR(MAX)
		DECLARE @column_list NVARCHAR(MAX)

		SET @process_table = dbo.FNAProcessTableName(@table_name, 'missing_deals_pre', @process_id)
		--SET @process_table = dbo.FNAProcessTableName('ixp_rec_inventory', 'missing_deals_pre', 'F336E59E_3DF5_48D9_8A4D_5BAAA57966E8')

		IF OBJECT_ID(@process_table) IS NOT NULL
			EXEC('DROP TABLE ' + @process_table)

		--SELECT @column_list = COALESCE(@column_list + ', ', '') + dbo.FNAGetSplitPart(imdm.source_column_name, '.', 2) + ' ' + MAX(ic.column_datatype)
		--FROM ixp_columns ic
		--INNER JOIN ixp_import_data_mapping imdm
		--	ON ic.ixp_columns_id = imdm.dest_column
		--INNER JOIN ixp_rules ir
		--	ON ir.ixp_rules_id = imdm.ixp_rules_id
		--WHERE ir.ixp_rules_name = 'REC Deals'
		--	AND NULLIF(imdm.source_column_name, '') IS NOT NULL
		--GROUP BY imdm.source_column_name, ic.seq
		--ORDER BY ic.seq

		EXEC('CREATE TABLE  ' + @process_table + ' (
					[vintage_from]			DATE,
					[vintage_to]			DATE,
					[counterparty]			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[generator]				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[fixed_price]			FLOAT,
					[forecasted_volume]		FLOAT,
					[deal_id]				NVARCHAR(200) COLLATE DATABASE_DEFAULT,
					[deal_date]				DATE,
					[trader]				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[contract]				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[deal_type]				NVARCHAR(50) COLLATE DATABASE_DEFAULT,
					[template]				NVARCHAR(50) COLLATE DATABASE_DEFAULT,
					[leg]					INT,
					[pricing_type]			NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[vintage_year]			INT,
					[header_buy_sell]		NVARCHAR(10) COLLATE DATABASE_DEFAULT,
					[market_index]			NVARCHAR(20) COLLATE DATABASE_DEFAULT,
					[subbook]				NVARCHAR(100) COLLATE DATABASE_DEFAULT,
					[currency]				NVARCHAR(20) COLLATE DATABASE_DEFAULT,
					[rec_status]			NVARCHAR(50) COLLATE DATABASE_DEFAULT,
					[jurisdiction]			NVARCHAR(50) COLLATE DATABASE_DEFAULT,
					[tier]					NVARCHAR(50) COLLATE DATABASE_DEFAULT
			)
		')

		EXEC ( 'INSERT INTO ' + @process_table + '( [vintage_from], [vintage_to], [counterparty], [generator], [fixed_price], [forecasted_volume], [deal_id], [deal_date],
													[trader], [contract], [deal_type], [template], [leg], [pricing_type], [vintage_year], [header_buy_sell],
													[market_index], [subbook], [currency], [rec_status], [jurisdiction], [tier]
												  )
				SELECT dbo.FNAUserDateFormat(a.term_start, ''' + @user_login_id + ''') [Vintage From],
					   dbo.FNAUserDateFormat(a.term_end, ''' + @user_login_id + ''') [Vintage To],
					   a.counterparty [Counterparty],
					   a.generator [Generator],
					   dbo.FNARemoveTrailingZero(a.price) [Fixed Price], -- from file
					   dbo.FNARemoveTrailingZero(a.volume) [Certified Volume],
					   ''Inventory_'' +
						REPLACE(
							REPLACE(
								REPLACE(
									REPLACE(
										REPLACE(a.counterparty + ''_'', '' '', ''_''
										) + ''_'' + CAST(a.vintage_year AS NVARCHAR(10))
										+ ''_'' + CAST(a.vintage_month AS NVARCHAR(10))
										+ ''_'' + CAST(a.volume AS NVARCHAR(10)) , ''-'', ''_''
									), '' '', ''_''
								), ''-'', ''_''
							), ''__'', ''_''
						) [Deal ID], --- counterparty vintage_year vintage month volume
					   dbo.FNAUserDateFormat(a.term_start, ''' + @user_login_id + ''') [Deal Date], -- term start(vintage start)
					   st.trader_id [Trader], --gmv
					   cg.source_contract_id [Contract], -- template
					   sdt.deal_type_id [Deal Type], --Template
					   sdtt.template_name [Template], -- gmv
					   1 [Leg], --1
					   ''Fixed Priced'' [Pricing Type], -- ''Fixed Priced'' sdv = 46700
					   vintage.vintage [Vintage Year], -- vintage year
					   ''Buy'' [Header Buy/Sell], -- ''Buy''
					   spcd.curve_id [Market Index], -- From template
					   sb.logical_name [Subbook], --  gmv/template`
					   scur.currency_id [Currency], -- From template
					   CASE WHEN sc.int_ext_flag = ''i'' THEN ''Certified''
							WHEN sc.int_ext_flag = ''e''  THEN ''Contractual/Forecast''
					   END [REC Status], -- sdt 25600
					   a.jurisdiction,
					   a.tier
				--select *
				FROM #rec_inventory_missing_deal a
				CROSS apply( SELECT sdht.template_name, sdht.source_deal_type_id, sddt.curve_id, sddt.currency_id, sddt.fixed_price_currency_id
							 FROM source_deal_header_template sdht
							 INNER JOIN source_deal_detail_template sddt
							 	ON sdht.template_id = sddt.template_id
							 WHERE sdht.template_id = ' + @generic_template_id + '
				) sdtt
				CROSS APPLY (select * From source_traders where source_trader_id = ' + @generic_trader_id + ') st
				CROSS APPLY (select * From source_system_book_map where book_deal_type_map_id = ' + @generic_subbook_id + ') sb
				LEFT JOIN source_counterparty sc
					ON sc.counterparty_id = a.counterparty
				LEFT JOIN rec_generator rg ON rg.id = a.generator
				OUTER APPLY( SELECT MAX(cca.contract_id) contract_id
							 FROM source_counterparty sc
							 INNER JOIN counterparty_contract_address cca
								 ON sc.source_counterparty_id = cca.counterparty_id
							 WHERE sc.counterparty_id = a.counterparty
							 GROUP BY cca.counterparty_id
				) cca
				LEFT JOIN contract_group cg ON cg.contract_id =  CASE WHEN sc.int_ext_flag = ''i'' THEN ISNULL(rg.ppa_contract_id, cca.contract_id)
																	  WHEN sc.int_ext_flag = ''e''  THEN cca.contract_id
																 END
				--LEFT JOIN contract_group cg
				--	ON cg.contract_id = sdtt.contract_id
				LEFT JOIN source_deal_type sdt
					ON sdt.source_deal_type_id = sdtt.source_deal_type_id
				LEFT JOIN source_price_curve_def spcd
					ON spcd.source_curve_def_id = sdtt.curve_id
				LEFT JOIN source_currency scur
					ON scur.source_currency_id = ISNULL(sdtt.currency_id, sdtt.fixed_price_currency_id)
				OUTER APPLY ( SELECT sdv.code vintage
							  FROM #state_properties_with_vintage spv
							  INNER JOIN static_data_value sdv
								  ON spv.vintage = sdv.value_id
							  WHERE a.jurisdiction = spv.jurisdiction
								  AND a.term_start BETWEEN spv.start_vintage AND spv.end_vintage	
				) vintage
		')

		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
		SELECT rid.temp_id,
			   NULL,
			   'Deal not found for counterparty, generator, vintage and certificate:' + a.counterparty + ', ' + a.generator + ', ' + ISNULL(a.vintage_year, DATEPART(YEAR,a.term_start)) + ', ' + ISNULL(a.vintage_month,DATEPART(MONTH,a.term_start)) + ' and ' + CAST(a.source_certificate_number AS NVARCHAR(50)) + '-' + CAST(a.certificate_seq_from AS NVARCHAR(20)) + ' to ' + CAST(a.certificate_seq_to AS NVARCHAR(20)),
			   a.import_file_name,
			   'Error',
			   'Data Error',
			   'Please correct data and re-import.'			  
		FROM  #rec_inventory_missing_deal a
		INNER JOIN #rec_inventory_detail rid
			ON a.source_certificate_number = rid.source_certificate_number
			AND a.certificate_seq_from = rid.certificate_seq_from
			AND a.certificate_seq_to = rid.certificate_seq_to
	END

	--INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
	--SELECT DISTINCT rid.temp_id, --distinct used because duplicate data exists for term, counterparty with variable volume
	--	   NULL,
	--	   'Certificate already exist for deal: ' + sdh.deal_id,
	--	   NULL,
	--	   'Error',
	--	   'Data Error',
	--	   'Please correct data and re-import.'
	--FROM Gis_Certificate gc
	--INNER JOIN source_deal_detail sdd
	--	ON sdd.source_deal_detail_id = gc.source_deal_header_id
	--INNER JOIN source_deal_header sdh
	--	ON sdh.source_deal_header_id = sdd.source_deal_header_id
	--INNER JOIN #temp_deal_detail_grouped tddg
	--	ON sdd.source_deal_header_id = tddg.source_deal_header_id
	--INNER JOIN #rec_inventory_detail rid
	--	ON  rid.certificate_seq_from				= tddg.certificate_seq_from
	--	AND rid.certificate_seq_to					= tddg.certificate_seq_to
	--	AND rid.term_start							= tddg.term_start
	--	AND rid.term_end							= tddg.term_end
	--	AND	rid.actual_volume						= tddg.actual_volume
	--	AND ISNULL(rid.source_counterparty_id, -1)	= ISNULL(tddg.source_counterparty_id, -1)
	--	AND ISNULL(rid.generator_id, -1)			= ISNULL(tddg.generator_id, -1)
	--OUTER APPLY( SELECT es.temp_id
	--			 FROM #error_status es
	--			 INNER JOIN message_log_template mlt
	--				ON es.error_number = mlt.id
	--				AND mlt.message_status NOT IN ('warning')
	--			 WHERE tddg.temp_id = es.temp_id
	--) es
	--WHERE es.temp_id IS NULL

	EXEC('DELETE a
 	     FROM #error_status
 	  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
	  LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
	  LEFT JOIN ' + @import_temp_table_name + ' b ON #error_status.temp_id = b.temp_id
	  WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
	')

	--insert deals into temp table (both from match type y and not y)
	IF OBJECT_ID('tempdb..#temp_deal_detail_grouped_final') IS NOT NULL
		DROP TABLE #temp_deal_detail_grouped_final	

	SELECT * 
	INTO #temp_deal_detail_grouped_final
	FROM #temp_deal_detail_grouped
	UNION
	SELECT * 
	FROM #temp_deal_detail_grouped_buy_deal
	
	--prepare deal_detail to insert
	IF OBJECT_ID('tempdb..#temp_deal_detail_to_update_final') IS NOT NULL
		DROP TABLE #temp_deal_detail_to_update_final

	SELECT DISTINCT sdd.source_deal_header_id,
		   sdd.source_deal_detail_id,
 		   tggdf.term_start, 
 		   tggdf.term_end, 
 		   tggdf.Leg, 	   
 		   sdd.contract_expiration_date,
 		   sdd.fixed_float_leg,
 		   sdd.buy_sell_flag,
 		   sdd.curve_id,
 		   sdd.fixed_price [fixed_price], 
 		   sdd.fixed_price_currency_id,
 		   sdd.option_strike_price,
 		   tggdf.actual_volume [deal_volume],  --deal_volume
 		   sdd.deal_volume_frequency,
 		   sdd.deal_volume_uom_id,
 		   sdd.block_description,
 		   sdd.deal_detail_description,
 		   sdd.create_user,
 		   sdd.create_ts,
 		   sdd.[settlement_volume],
 		   sdd.[settlement_uom],
 		   sdd.[price_adder],
 		   sdd.[price_multiplier],
 		   sdd.[settlement_date],
 		   sdd.[day_count_id],
 		   sdd.[location_id],
 		   sdd.[meter_id],
 		   sdd.[physical_financial_flag],
 		   sdd.[fixed_cost],
 		   sdd.[multiplier],
 		   sdd.[adder_currency_id],
 		   sdd.[fixed_cost_currency_id],
 		   sdd.[formula_currency_id],
 		   sdd.[price_adder2],
 		   sdd.[price_adder_currency2],
 		   sdd.[volume_multiplier2],
 		   sdd.[pay_opposite],
 		   sdd.[capacity],
 		   sdd.[settlement_currency],
 		   sdd.[standard_yearly_volume],
 		   sdd.[price_uom_id],
 		   sdd.[category],
 		   sdd.[profile_code],
 		   sdd.[profile_id],
 		   sdd.[pv_party],
 		   sdd.[formula_id],
 		   sdd.Booked,
 		   sdd.process_deal_status,
 		   sdd.formula_curve_id,
		   tggdf.actual_volume [actual_volume],
		   sdd.schedule_volume [schedule_volume],
		   sdd.vintage,
		   sdd.status,
		   sdd.position_uom,
		   sdd.contractual_volume [contractual_volume], --contractual_volume
		   sdd.fx_conversion_rate,
		   sdd.upstream_contract,
		   sdd.upstream_counterparty,
		   sdd.strike_granularity,
		   sdd.no_of_strikes,
		   sdd.payment_date,
		   sdd.delivery_date
	INTO #temp_deal_detail_to_update_final
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_detail_grouped_final tggdf
		ON sdd.source_deal_header_id = tggdf.source_deal_header_id
		AND tggdf.leg = sdd.leg 
		AND tggdf.term_start = sdd.term_start
		AND tggdf.term_end = sdd.term_end
	LEFT JOIN source_counterparty sc
		ON sc.source_counterparty_id = tggdf.source_counterparty_id
		AND sc.int_ext_flag = 'i' --for generation deal as it generated error when leg same for different term
	LEFT JOIN rec_generator rg
		ON rg.generator_id = tggdf.generator_id
		AND tggdf.source_counterparty_id IS NULL
	UNION
	SELECT DISTINCT sdd.source_deal_header_id,
		   sdd.source_deal_detail_id,
 		   tggdf.term_start, 
 		   tggdf.term_end, 
 		   tggdf.Leg, 	   
 		   sdd.contract_expiration_date,
 		   sdd.fixed_float_leg,
 		   sdd.buy_sell_flag,
 		   sdd.curve_id,
 		   sdd.fixed_price [fixed_price], 
 		   sdd.fixed_price_currency_id,
 		   sdd.option_strike_price,
 		   tggdf.actual_volume [deal_volume],  --deal_volume
 		   sdd.deal_volume_frequency,
 		   sdd.deal_volume_uom_id,
 		   sdd.block_description,
 		   sdd.deal_detail_description,
 		   sdd.create_user,
 		   sdd.create_ts,
 		   sdd.[settlement_volume],
 		   sdd.[settlement_uom],
 		   sdd.[price_adder],
 		   sdd.[price_multiplier],
 		   sdd.[settlement_date],
 		   sdd.[day_count_id],
 		   sdd.[location_id],
 		   sdd.[meter_id],
 		   sdd.[physical_financial_flag],
 		   sdd.[fixed_cost],
 		   sdd.[multiplier],
 		   sdd.[adder_currency_id],
 		   sdd.[fixed_cost_currency_id],
 		   sdd.[formula_currency_id],
 		   sdd.[price_adder2],
 		   sdd.[price_adder_currency2],
 		   sdd.[volume_multiplier2],
 		   sdd.[pay_opposite],
 		   sdd.[capacity],
 		   sdd.[settlement_currency],
 		   sdd.[standard_yearly_volume],
 		   sdd.[price_uom_id],
 		   sdd.[category],
 		   sdd.[profile_code],
 		   sdd.[profile_id],
 		   sdd.[pv_party],
 		   sdd.[formula_id],
 		   sdd.Booked,
 		   sdd.process_deal_status,
 		   sdd.formula_curve_id,
		   tggdf.actual_volume [actual_volume],
		   sdd.schedule_volume [schedule_volume],
		   sdd.vintage,
		   sdd.status,
		   sdd.position_uom,
		   sdd.contractual_volume [contractual_volume], --contractual_volume
		   sdd.fx_conversion_rate,
		   sdd.upstream_contract,
		   sdd.upstream_counterparty,
		   sdd.strike_granularity,
		   sdd.no_of_strikes,
		   sdd.payment_date,
		   sdd.delivery_date	
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_detail_grouped_final tggdf
		ON sdd.source_deal_header_id = tggdf.source_deal_header_id
		AND sdd.source_deal_detail_id = tggdf.source_deal_detail_id
		AND tggdf.leg = sdd.leg 
	INNER JOIN source_counterparty sc
		ON sc.source_counterparty_id = tggdf.source_counterparty_id
		AND sc.int_ext_flag = 'e'

	INSERT INTO #temp_deal_detail_to_update_final
	SELECT sdd.source_deal_header_id,
		   MAX(sdd.source_deal_detail_id), 
 		   MAX(tggdf.term_start), 
 		   MAX(tggdf.term_end), 
 		   tggdf.Leg, 	   
 		   MAX(sdd.contract_expiration_date), 
 		   MAX(sdd.fixed_float_leg),
 		   MAX(sdd.buy_sell_flag), 
 		   MAX(sdd.curve_id), 
 		   MAX(sdd.fixed_price) [fixed_price], 
 		   MAX(sdd.fixed_price_currency_id), 
 		   MAX(sdd.option_strike_price), 
 		   MAX(tggdf.actual_volume) [deal_volume],  --deal_volume
 		   MAX(sdd.deal_volume_frequency), 
 		   MAX(sdd.deal_volume_uom_id), 
 		   MAX(sdd.block_description), 
 		   MAX(sdd.deal_detail_description), 
 		   MAX(sdd.create_user), 
 		   MAX(sdd.create_ts),
 		   MAX(sdd.[settlement_volume]),
 		   MAX(sdd.[settlement_uom]),
 		   MAX(sdd.[price_adder]),
 		   MAX(sdd.[price_multiplier]),
 		   MAX(sdd.[settlement_date]),
 		   MAX(sdd.[day_count_id]),  
 		   MAX(sdd.[location_id]), 
 		   MAX(sdd.[meter_id]),   
 		   MAX(sdd.[physical_financial_flag]),
 		   MAX(sdd.[fixed_cost]),
 		   MAX(sdd.[multiplier]),
 		   MAX(sdd.[adder_currency_id]),
 		   MAX(sdd.[fixed_cost_currency_id]),
 		   MAX(sdd.[formula_currency_id]),
 		   MAX(sdd.[price_adder2]),
 		   MAX(sdd.[price_adder_currency2]),
 		   MAX(sdd.[volume_multiplier2]),
 		   MAX(sdd.[pay_opposite]),
 		   MAX(sdd.[capacity]),
 		   MAX(sdd.[settlement_currency]),
 		   MAX(sdd.[standard_yearly_volume]),
 		   MAX(sdd.[price_uom_id]),
 		   MAX(sdd.[category]),
 		   MAX(sdd.[profile_code]),
 		   MAX(sdd.[profile_id]),
 		   MAX(sdd.[pv_party]),
 		   MAX(sdd.[formula_id]),
 		   MAX(sdd.Booked),
 		   MAX(sdd.process_deal_status),
 		   MAX(sdd.formula_curve_id),
		   MAX(tggdf.actual_volume) [actual_volume],
		   MAX(sdd.schedule_volume) [schedule_volume],
		   MAX(sdd.vintage),
		   MAX(sdd.status),
		   MAX(sdd.position_uom),
		   MAX(IIF(tggdf.Leg = sdd.leg, sdd.contractual_volume, NULL)) [contractual_volume], --contractual_volume --when deal grouped contractual volume should be total of original detail only
		   MAX(sdd.fx_conversion_rate),
		   MAX(sdd.upstream_contract),
		   MAX(sdd.upstream_counterparty),
		   MAX(sdd.strike_granularity),
		   MAX(sdd.no_of_strikes),
		   MAX(sdd.payment_date),
		   MAX(sdd.delivery_date)
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_detail_grouped_final tggdf
		ON sdd.source_deal_header_id = tggdf.source_deal_header_id		
	LEFT JOIN #temp_deal_detail_to_update_final tddtuf
		ON tddtuf.source_deal_header_id = tggdf.source_deal_header_id
		AND tddtuf.leg = tggdf.leg 
	WHERE tddtuf.source_deal_header_id IS NULL
	GROUP BY tggdf.leg, tggdf.source_deal_header_id, sdd.source_deal_header_id

	BEGIN TRY
		BEGIN TRAN 	--prevent data of deal from deleting and not inserting
		--delete deal detail to seperate legs
		--DELETE tddtuf
		--FROM Gis_Certificate gc
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = gc.source_deal_header_id
		--INNER JOIN #temp_deal_detail_to_update_final tddtuf
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id

		--DELETE udddf
		--FROM user_defined_deal_detail_fields udddf
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = udddf.source_deal_detail_id
		--INNER JOIN #temp_deal_detail_to_update_final tddtuf
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id

		--DELETE sdd
		----select sdd.*
		--FROM #temp_deal_detail_to_update_final tddtuf
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id
		----delete ends

		--DELETE sdd
		----select sdd.*
		--FROM #temp_deal_detail_to_update_final tddtuf
		--INNER JOIN  #temp_deal_detail_grouped tddg
		--	ON tddg.source_deal_header_id = tddtuf.source_deal_header_id
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = tddg.source_deal_detail_id

		--DELETE sdd 
		----select sdd.*
		--FROM #temp_deal_detail_to_update_final tddtuf
		--INNER JOIN  #temp_deal_detail_grouped_buy_deal tddg
		--	ON tddg.source_deal_header_id = tddtuf.source_deal_header_id
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = tddg.source_deal_detail_id
	
		UPDATE sdd
		SET deal_volume = tdduf.actual_volume,
			term_start = tdduf.term_start, 
 			term_end = tdduf.term_end,
			actual_volume = tdduf.actual_volume
		--select * 
		From #temp_deal_detail_to_update_final tdduf
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg

		--Update volume left for already matched volume. Note: this cant be done from above existed update statement.
		UPDATE sdd
		SET volume_left = sdd.deal_volume
		From #temp_deal_detail_to_update_final tdduf
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg

		--Insert into deal detail
		INSERT INTO source_deal_detail (
 								 source_deal_header_id,
 								 term_start,
 								 term_end,
 								 Leg,
 								 contract_expiration_date,
 								 fixed_float_leg,
 								 buy_sell_flag,
 								 curve_id,
 								 fixed_price,
 								 fixed_price_currency_id,
 								 option_strike_price,
 								 deal_volume,
 								 deal_volume_frequency,
 								 deal_volume_uom_id,
 								 block_description,
 								 deal_detail_description,
 								 create_user,
 								 create_ts,
 								[settlement_volume],
 								[settlement_uom] , --suom_set
 								[price_adder],
 								[price_multiplier],
 								[settlement_date],
 								[day_count_id],  --sdv_day
 								[location_id], --select * from source_minor_location
 								[meter_id],   -- select * from source_minor_location_meter
 								[physical_financial_flag],
 								[fixed_cost],
 								[multiplier],
 								[adder_currency_id],
 								[fixed_cost_currency_id],
 								[formula_currency_id],
 								[price_adder2],
 								[price_adder_currency2],
 								[volume_multiplier2],
 								[pay_opposite],
 								[capacity],
 								[settlement_currency],
 								[standard_yearly_volume],
 								[price_uom_id],
 								[category],
 								[profile_code],
 								[profile_id],
 								[pv_party],
 								[formula_id],
 								Booked,
 								process_deal_status,
 								formula_curve_id,
								actual_volume,
								schedule_volume,
								vintage,
								status,
								position_uom,
								contractual_volume,
								fx_conversion_rate,
								upstream_contract,
								upstream_counterparty,
								strike_granularity,
								no_of_strikes,
								payment_date,
								delivery_date
 		)
		SELECT tdduf.source_deal_header_id,		   
 		   tdduf.term_start, 
 		   tdduf.term_end, 
 		   tdduf.Leg, 	   
 		   tdduf.contract_expiration_date,
 		   tdduf.fixed_float_leg,
 		   tdduf.buy_sell_flag,
 		   tdduf.curve_id,
 		   tdduf.fixed_price, 
 		   tdduf.fixed_price_currency_id,
 		   tdduf.option_strike_price,
 		   tdduf.deal_volume,  --deal_volume
 		   tdduf.deal_volume_frequency,
 		   tdduf.deal_volume_uom_id,
 		   tdduf.block_description,
 		   tdduf.deal_detail_description,
 		   tdduf.create_user,
 		   tdduf.create_ts,
 		   tdduf.[settlement_volume],
 		   tdduf.[settlement_uom],
 		   tdduf.[price_adder],
 		   tdduf.[price_multiplier],
 		   tdduf.[settlement_date],
 		   tdduf.[day_count_id],
 		   tdduf.[location_id],
 		   tdduf.[meter_id],
 		   tdduf.[physical_financial_flag],
 		   tdduf.[fixed_cost],
 		   tdduf.[multiplier],
 		   tdduf.[adder_currency_id],
 		   tdduf.[fixed_cost_currency_id],
 		   tdduf.[formula_currency_id],
 		   tdduf.[price_adder2],
 		   tdduf.[price_adder_currency2],
 		   tdduf.[volume_multiplier2],
 		   tdduf.[pay_opposite],
 		   tdduf.[capacity],
 		   tdduf.[settlement_currency],
 		   tdduf.[standard_yearly_volume],
 		   tdduf.[price_uom_id],
 		   tdduf.[category],
 		   tdduf.[profile_code],
 		   tdduf.[profile_id],
 		   tdduf.[pv_party],
 		   tdduf.[formula_id],
 		   tdduf.Booked,
 		   tdduf.process_deal_status,
 		   tdduf.formula_curve_id,
		   tdduf.actual_volume [actual_volume],
		   tdduf.schedule_volume [schedule_volume],
		   tdduf.vintage,
		   tdduf.status,
		   tdduf.position_uom,
		   tdduf.contractual_volume [contractual_volume], --contractual_volume
		   tdduf.fx_conversion_rate,
		   tdduf.upstream_contract,
		   tdduf.upstream_counterparty,
		   tdduf.strike_granularity,
		   tdduf.no_of_strikes,
		   tdduf.payment_date,
		   tdduf.delivery_date 
		FROM #temp_deal_detail_to_update_final tdduf
		LEFT JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg
		WHERE sdd.source_deal_detail_id IS NULL
		COMMIT TRAN
	--deal insert/update ends
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
            ROLLBACK

		EXEC spa_ErrorHandler -1
            , 'rec inventory'
            , 'spa_ixp_generic_import_job'
            , 'Error'
            , 'Failed to update deal detail'
            , ''
	END CATCH

	-- final data to insert into cetificate after deal detail breakdown
	IF OBJECT_ID('tempdb..#temp_final_certificate_detail') IS NOT NULL
		DROP TABLE #temp_final_certificate_detail

	SELECT tdd.*, rid.facility_name, rid.technology, rid.generation_state, rid.certification_entity
	INTO #temp_final_certificate_detail
	FROM #temp_deal_detail tdd
	INNER JOIN #temp_deal_detail_grouped tddg
		ON tddg.certificate_seq_from = tdd.certificate_seq_from
		AND tddg.certificate_seq_to = tdd.certificate_seq_to
		AND tddg.source_deal_header_id = tdd.source_deal_header_id
		AND tddg.source_deal_detail_id = tdd.source_deal_detail_id
		AND tddg.leg = tdd.leg
	INNER JOIN #rec_inventory_detail rid
		ON rid.certificate_seq_from = tdd.certificate_seq_from
		AND rid.certificate_seq_to = tdd.certificate_seq_to
		AND rid.certificate_serial_numbers_from = tdd.certificate_serial_numbers_from
		AND rid.certificate_serial_numbers_to = tdd.certificate_serial_numbers_to
		AND rid.term_start = tdd.term_start
		AND rid.term_end = tdd.term_end
		AND rid.generator_id = tdd.generator_id
	INNER JOIN #temp_deal_detail_to_update_final tddtuf
			ON tddg.source_deal_header_id = tddtuf.source_deal_header_id
	UNION
	SELECT tdd.*, rid.facility_name, rid.technology, rid.generation_state, rid.certification_entity
	FROM #temp_deal_detail_buy_deal tdd
	INNER JOIN #temp_deal_detail_grouped_buy_deal tddg
		ON tddg.certificate_seq_from = tdd.certificate_seq_from
		AND tddg.certificate_seq_to = tdd.certificate_seq_to
		AND tddg.source_deal_header_id = tdd.source_deal_header_id
		AND tddg.source_deal_detail_id = tdd.source_deal_detail_id
		AND tddg.leg = tdd.leg
		AND tddg.source_certificate_number = tdd.source_certificate_number
	INNER JOIN #rec_inventory_detail rid
		ON rid.certificate_seq_from = tdd.certificate_seq_from
		AND rid.certificate_seq_to = tdd.certificate_seq_to
		--AND rid.certificate_serial_numbers_from = tdd.certificate_serial_numbers_from
		--AND rid.certificate_serial_numbers_to = tdd.certificate_serial_numbers_to
		AND rid.term_start = tdd.term_start
		AND rid.term_end = tdd.term_end
		AND rid.source_certificate_number = tdd.source_certificate_number
	INNER JOIN #temp_deal_detail_to_update_final tddtuf
			ON tddg.source_deal_header_id = tddtuf.source_deal_header_id
			AND  tddg.leg = tddtuf.leg

	DECLARE @tmp_eligible_deal NVARCHAR(150)
    SET @tmp_eligible_deal = dbo.FNAProcessTableName('TmpEligibleDeals', @user_login_id, @process_id)    
	
	CREATE TABLE #inserted_detail_id (
		source_deal_detail_id INT
	)

	INSERT INTO gis_certificate (
		source_deal_header_id, gis_certificate_number_from, gis_certificate_number_to, certificate_number_from_int,
		certificate_number_to_int, gis_cert_date, state_value_id, tier_type, year, contract_expiration_date,
		certification_entity, facility_name, technology, generation_state, unit_id
	) 
	OUTPUT INSERTED.source_deal_header_id INTO #inserted_detail_id 
	SELECT DISTINCT
		   sdd.source_deal_detail_id,
		   tfcd.certificate_serial_numbers_from,
		   tfcd.certificate_serial_numbers_to,
		   tfcd.certificate_seq_from,
		   tfcd.certificate_seq_to,
		   tfcd.issue_date,
		   tfcd.state_value_id,
		   tfcd.tier_id,
		   tfcd.vintage,
		   tfcd.expiry_date,
		 --  CASE WHEN @rules_names IN ('PJM Inventory', 'GetRecs from GATS PJM') 
			--	THEN sdv.value_id
			--	WHEN @rules_names = 'MIRECS Inventory'
			--	THEN sdv_mir.value_id
			--	ELSE tfcd.certification_entity 
			--END,
		   tfcd.certification_entity,
		   tfcd.facility_name,
		   tfcd.technology,
		   tfcd.generation_state,
		   tfcd.generator
	FROM #temp_final_certificate_detail tfcd
	CROSS APPLY (
		SELECT source_deal_header_id, generator_id
		FROM source_deal_header sdh
		WHERE sdh.generator_id = tfcd.generator_id
			AND sdh.source_deal_header_id = tfcd.source_deal_header_id
			AND source_deal_header_id IS NOT NULL
			AND ISNULL(sdh.match_type, '1') <> 'y' 
		UNION ALL
		SELECT source_deal_header_id, generator_id
		FROM source_deal_header sdh
		WHERE  sdh.counterparty_id = tfcd.source_counterparty_id
			AND sdh.source_deal_header_id = tfcd.source_deal_header_id
			--AND sdh.deal_id like ('%' + ISNULL(CAST(tfcd.source_certificate_number AS NVARCHAR(10)) + '_' + CAST(tfcd.certificate_seq_from AS NVARCHAR(10)) + '_' + CAST(tfcd.certificate_seq_to AS NVARCHAR(10)), sdh.deal_id) + '%')
			AND source_deal_header_id IS NOT NULL
			AND ISNULL(sdh.match_type, '1') = 'y' 
	) a
	INNER JOIN source_deal_detail sdd
		ON  sdd.source_deal_header_id = a.source_deal_header_id --ISNULL(sdh_g.source_deal_header_id, sdh_c.source_deal_header_id)
			AND tfcd.term_start = sdd.term_start
			AND tfcd.term_end = sdd.term_end
			AND tfcd.leg = sdd.leg
			AND tfcd.actual_volume = sdd.deal_volume
	LEFT JOIN rec_generator rg ON rg.generator_id =a.generator_id --ISNULL(sdh_g.generator_id, sdh_c.generator_id)
	LEFT JOIN gis_certificate gc
		ON gc.source_deal_header_id = sdd.source_deal_detail_id
			AND gc.state_value_id = tfcd.state_value_id
			AND gc.tier_type = tfcd.tier_id
	--CROSS APPLY ( 
	--			   SELECT * FROM static_data_value s
	--			   WHERE s.code = 'PJM-Gats'
	--			) sdv
	--CROSS APPLY ( 
	--			   SELECT * FROM static_data_value s
	--			   WHERE s.code = 'MIRECS'
	--			) sdv_mir
	WHERE gc.source_certificate_number IS NULL
		AND sdd.source_deal_detail_id IS NOT NULL

	EXEC('SELECT DISTINCT id.source_deal_detail_id 
        INTO ' + @tmp_eligible_deal + ' 
        FROM #inserted_detail_id id
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = id.source_deal_detail_id
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 
			AND sdh.is_environmental = ''y'' AND sdh.header_buy_sell_flag = ''b''')
 
    EXEC spa_return_certificate_volume_detail 'u', NULL, @process_id
	--UPDATE gc
	--SET gc.source_deal_header_id = sdd.source_deal_detail_id,
	--	gc.gis_certificate_number_from = rid.certificate_serial_numbers_from,
	--	gc.gis_certificate_number_to = rid.certificate_serial_numbers_to,
	--	gc.certificate_number_from_int = rid.certificate_seq_from,
	--	gc.certificate_number_to_int = rid.certificate_seq_to,
	--	gc.gis_cert_date = rid.issue_date,
	--	gc.state_value_id = rid.state_value_id,
	--	gc.tier_type = rid.tier_id,
	--	gc.year = rid.vintage,
	--	gc.contract_expiration_date = rid.expiry_date,
	--	gc.certification_entity = rg.gis_value_id
	--FROM #rec_inventory_detail rid
	--cross apply (
	--	SELECT source_deal_header_id, generator_id
	--	FROM source_deal_header sdh
	--	WHERE sdh.generator_id = rid.generator_id
	--		AND source_deal_header_id IS NOT NULL
	--	UNION ALL
	--	SELECT source_deal_header_id, generator_id
	--	FROM source_deal_header sdh
	--	WHERE  sdh.counterparty_id = rid.source_counterparty_id
	--		AND sdh.deal_id like ('%' + ISNULL(CAST(rid.source_certificate_number AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_from AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_to AS NVARCHAR(10)), sdh.deal_id) + '%')
	--		AND source_deal_header_id IS NOT NULL

	--) a
	--INNER JOIN source_deal_detail sdd
	--	ON  sdd.source_deal_header_id = a.source_deal_header_id --ISNULL(sdh_g.source_deal_header_id, sdh_c.source_deal_header_id)
	--		AND rid.term_start = sdd.term_start
	--		AND rid.term_end = sdd.term_end
	--LEFT JOIN rec_generator rg ON rg.generator_id =a.generator_id --ISNULL(sdh_g.generator_id, sdh_c.generator_id)
	--LEFT JOIN gis_certificate gc
	--	ON gc.source_deal_header_id = sdd.source_deal_detail_id
	--		AND gc.state_value_id = rid.state_value_id
	--		AND gc.tier_type = rid.tier_id
	--WHERE gc.source_certificate_number IS NOT NULL
	--	AND sdd.source_deal_detail_id IS NOT NULL	

	--update actual_delivery_date for deal detail whose certificates are inserted
	UPDATE sdd 
	SET actual_delivery_date = CONVERT(DATE, GETDATE(), 120)   --actual delivery date is date of inserting certificate 
	FROM #temp_final_certificate_detail tmp
	INNER JOIN source_deal_detail sdd
			ON  tmp.source_deal_header_id = sdd.source_deal_header_id
				AND tmp.term_start = sdd.term_start
				AND tmp.term_end = sdd.term_end
				AND tmp.leg = sdd.leg
				AND tmp.actual_volume = sdd.deal_volume
	INNER JOIN #inserted_detail_id id
		ON id.source_deal_detail_id = sdd.source_deal_detail_id

	UPDATE sdd
	SET --sdd.actual_delivery_date = rid.issue_date,
		--sdd.deal_volume = COALESCE(rid.actual_volume, sdd.schedule_volume, sdd.contractual_volume),
		sdd.[status] = iif(sc.int_ext_flag = 'e', 25006, 25004)
		--fixed_price = price
	FROM (
		SELECT source_counterparty_id, term_start, term_end, source_certificate_number, certificate_seq_from, certificate_seq_to, generator_id, MAX(rid.actual_volume) actual_volume ,MAX(rid.price) price, MAX(issue_date) issue_date
	FROM #rec_inventory_detail rid
		GROUP BY  source_counterparty_id,term_start,term_end,source_certificate_number,certificate_seq_from,certificate_seq_to, generator_id
	) rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			--AND sdh.deal_id like ('%' + ISNULL(CAST(rid.source_certificate_number AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_from AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_to AS NVARCHAR(10)), sdh.deal_id) + '%')
	) a
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_detail_id = a.source_deal_detail_id
	LEFT JOIN source_counterparty sc
		ON sc.source_counterparty_id = rid.source_counterparty_id
	--WHERE NOT EXISTS (
	--	SELECT 1 FROM assignment_audit WHERE source_deal_header_id_from = a.source_deal_header_id
	--)

	UPDATE sdh
	SET is_environmental = 'y',
		counterparty_id = ISNULL(rid.source_counterparty_id, sdh.counterparty_id)
	FROM (
		SELECT source_counterparty_id, term_start, term_end, source_certificate_number, certificate_seq_from, certificate_seq_to, generator_id, MAX(rid.actual_volume) actual_volume ,MAX(rid.price) price
	FROM #rec_inventory_detail rid
		GROUP BY  source_counterparty_id,term_start,term_end,source_certificate_number,certificate_seq_from,certificate_seq_to, generator_id
	) rid
	OUTER APPLY (
		SELECT sdh.source_deal_header_id, sdd.source_deal_detail_id
		FROM source_deal_header sdh
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		WHERE (sdh.generator_id = rid.generator_id OR sdh.counterparty_id = rid.source_counterparty_id)
			AND sdd.term_start = rid.term_start
			AND sdd.term_end = rid.term_end
			AND sdh.deal_id like ('%' + ISNULL(CAST(rid.source_certificate_number AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_from AS NVARCHAR(10)) + '_' + CAST(rid.certificate_seq_to AS NVARCHAR(10)), sdh.deal_id) + '%')
			AND sdd.deal_volume = rid.actual_volume
	) a
	INNER JOIN source_deal_header sdh
		ON sdh.source_deal_header_id = a.source_deal_header_id
END

IF @table_name = 'ixp_rec_inventory_deal_id'
BEGIN
	--get counterparty mapped in generic mapping 'Value Mapping'
	CREATE TABLE #temp_counterparty_value_mappings(
		source_system			NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		field_type				NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		file_counterparty_technology		NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		source_counterparty_technology_id	INT
	)

	EXEC(' INSERT INTO #temp_counterparty_value_mappings(source_system, field_type, file_counterparty_technology, source_counterparty_technology_id)
		   SELECt MAX(sdv.code),
			      MAX(CASE WHEN gmv.clm2_value = ''c'' THEN ''Counterparty'' when gmv.clm2_value = ''t'' then ''Technology'' END) [field_type],
			      gmv.clm4_value [file_counterparty_technology],
			      gmv.clm5_value [source_counterparty_technology]
		   FROM generic_mapping_header gmh
		   INNER JOIN generic_mapping_values gmv
			   ON gmh.mapping_table_id = gmv.mapping_table_id
		   INNER JOIN ' + @import_temp_table_name + ' tmp   --INNER JOIN adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D tmp
		   	   ON CASE WHEN gmv.clm2_value = ''c''  THEN tmp.counterparty 
		      WHEN gmv.clm2_value = ''t''  THEN tmp.technology END = gmv.clm4_value
		   LEFT JOIN static_data_value sdv 
		   	  ON sdv.value_id = gmv.clm1_value
		   WHERE gmh.mapping_name = ''Value Mapping''
		   	  AND sdv.code = tmp.certification_entity
		   GROUP BY gmv.clm4_value, gmv.clm5_value
	')

	--Update counterparty in file with source counterparty mapped in the generic mapping
	EXEC( ' UPDATE a
			SET counterparty = IIF(cvm.field_type = ''counterparty'', sc.counterparty_id, a.counterparty)			    
			FROM  ' + @import_temp_table_name + ' a   --adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D a
			INNER JOIN #temp_counterparty_value_mappings cvm
				ON cvm.file_counterparty_technology = a.counterparty 														 
			LEFT JOIN source_counterparty sc
				ON sc.source_counterparty_id = cvm.source_counterparty_technology_id
	')

	--Update technology in file with technology mapped in the generic mapping
	EXEC( ' UPDATE a
			SET technology = IIF(cvm.field_type = ''technology'', sdv_t.code, a.technology)	
			FROM  ' + @import_temp_table_name + ' a   --adiha_process.dbo.ixp_rec_inventory_0_bmanandhar_5E51D272_E609_4AF8_A459_47FE49589D8D a
			INNER JOIN #temp_counterparty_value_mappings cvm
				ON cvm.file_counterparty_technology = a.technology 													  			
			LEFT JOIN static_data_value sdv_t
				ON sdv_t.value_id = cvm.source_counterparty_technology_id
	')

	/***update user date to sql date***/
	EXEC('UPDATE a
		  SET expiry_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.expiry_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET issue_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.issue_date = dd.user_date
	')
	/***END OF date update***/
	EXEC ('DELETE ' + @field_compare_table)

 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''actual_volume'',''volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''source_deal_detail_id'',''vintage_month'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''source_deal_detail_id'',''vintage_year'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''source_certificate_number'',''certificate_seq_from'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''source_certificate_number'',''certificate_seq_to'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''gis_cert_date'',''issue_date'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''gis_certificate'',''contract_expiration_date'',''expiry_date'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''fixed_price'',''price'')')

 	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES 
		(''static_data_value'', ''vintage_year'', ''a.vintage_year = b.code AND b.type_id = 10092'', ''e''),
		(''static_data_value'', ''jurisdiction'', ''a.jurisdiction = b.code AND b.type_id = 10002'', ''e''),
		(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''e''),		
		(''static_data_value'', ''technology'', ''a.technology = b.code AND b.type_id = 10009'', ''w''), --technology/fuel_type
		(''static_data_value'', ''generation_state'', ''a.generation_state = b.code AND b.type_id = 10016'', ''w'')  --state'
		)
	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Invalid Month
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10002,
		  ''
		  {
		  "column_name": "'' + scm.source_column_name + ''",
		  "column_value": "'' + a.vintage_month + ''"
		  }
		  '',			  
 		  a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''vintage_month''
          ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (ISNUMERIC(a.vintage_month) = 0
			  OR a.vintage_month NOT BETWEEN 1 AND 12)
	')

	--Data Missing Validation: Counterparty in file, rec_generator and template
	EXEC (' INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		    SELECT a.temp_id,
		    	   10001,		    	   
				   ''
				   {
					   "column_name": "'' + scm.source_column_name + ''"					   
				   }
				   '',
		    	   a.import_file_name
		    FROM   '+ @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty''
			) scm
		    LEFT JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty
		    --OUTER APPLY( SELECT sdht.counterparty_id
		    --			 FROM source_deal_header_template sdht
		    --			 WHERE sdht.template_id = ' + @generic_template_id +'
		    --) sht
		    LEFT JOIN rec_generator rg
				ON rg.code = a.generator
		    LEFT JOIN source_deal_header_template sdht
				ON sdht.template_id = rg.deal_template_id
		    LEFT JOIN #error_status
				ON a.temp_id = #error_status.temp_id
		    WHERE  #error_status.temp_id IS NULL
			  AND COALESCE(sc.source_counterparty_id, rg.ppa_counterparty_id, sdht.counterparty_id) IS NULL AND rg.generator_id IS NULL
	')

	--Data Missing Validation: Counterparty in file, rec_generator and template
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10001,
				 ''
				 {
					 "column_name": "'' + scm.source_column_name + ''"					   
				 }
				 '',
				 a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty''
			) scm
		  LEFT JOIN source_counterparty sc
		  	  ON sc.counterparty_id = a.counterparty		
		  LEFT JOIN rec_generator rg
		  	  ON rg.code = a.generator
		  LEFT JOIN source_deal_header_template sdht
			  ON sdht.template_id = rg.deal_template_id
		  LEFT JOIN #error_status
			  ON a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND COALESCE(sc.source_counterparty_id, rg.ppa_counterparty_id,  sdht.counterparty_id) IS NULL AND rg.generator_id IS NULL
	')
	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10011,
			--dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Tier''), ''<column_value1>'', a.tier), ''<column_name>'', ''Jurisdiction''), ''<column_value>'', a.jurisdiction),
			''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.jurisdiction + ''",
				"column_name1": "'' + scm1.source_column_name + ''"	,
				"column_value1": "'' + a.tier + ''"
			}'',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			 CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''jurisdiction''
			) scm
			 CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''tier''
			) scm1
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
			LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction AND sdv_jurisdiction.type_id = 10002
			LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
			LEFT JOIN state_properties_details spd
				ON spd.state_value_id = sdv_jurisdiction.value_id
				AND spd.tier_id = sdv_tier.value_id
			WHERE #error_status.temp_id IS NULL
			AND spd.state_properties_details_id IS NULL
	')

	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10002,			
			''
			{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.generator + ''"
		    }
		    '',	
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''generator''
			) scm
			INNER JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty
				AND int_ext_flag = ''i''
			LEFT JOIN rec_generator rg
				ON rg.code = a.generator
			WHERE rg.generator_id IS NULL
	')

	-- Validation for already existed certificate
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
			SELECT a.temp_id,
				   NULL,
				   ''Certificate: '' +  CAST(a.certificate_serial_numbers_from AS NVARCHAR(100)) + '' already exists.'',
				   NULL, --a.import_file_name,
				   ''Error'',
				   ''Data Error'',
				   ''Please correct data and re-import.''
 			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN Gis_Certificate gc
				ON a.certificate_serial_numbers_from = gc.gis_certificate_number_from
			WHERE gc.source_certificate_number IS NOT NULL
	')
	
	-- Validation for Deal Id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10002,			
			''
			{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.deal_id + ''"
		    }
		    '',	
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''deal_id''
			) scm
			LEFT JOIN source_deal_header sdh
				ON sdh.source_deal_header_id = a.deal_id
			WHERE sdh.deal_id IS NULL
	')

	EXEC('DELETE a
	 	  FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
	')
	
	IF OBJECT_ID('tempdb..#temp_inventory_data') IS NOT NULL
		DROP TABLE #temp_inventory_data

	CREATE TABLE #temp_inventory_data (
		[deal_id] INT,
		[certificate_seq_from] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_seq_to] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_serial_numbers_from] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[certificate_serial_numbers_to] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[expiry_date] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[generator_id] INT,
		[generator] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[issue_date] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[state_value_id] INT,
		[jurisdiction] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[tier_id] INT,
		[tier] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[term_start] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[term_end] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[vintage] INT,
		[actual_volume] DECIMAL(18, 8),
		[source_counterparty_id] INT,		
		[price] DECIMAL(18, 8),
		[source_certificate_number] INT,
		[leg] INT,
		[facility_name] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[technology] INT,
		[generation_state] INT,
		--[certification_entity] NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[temp_id] INT
	)
		
	EXEC(' INSERT INTO #temp_inventory_data 
		   SELECT a.deal_id,
				  a.certificate_seq_from,
				  a.certificate_seq_to,
				  a.certificate_serial_numbers_from,
				  a.certificate_serial_numbers_to,
				  a.expiry_date,
				  rg.generator_id, a.generator,
				  a.issue_date,
				  jurisdiction.value_id state_value_id, a.jurisdiction,
				  tier.value_id tier_id, a.tier,
				  DATEFROMPARTS(vintage_year, vintage_month, 1) term_start,
				  EOMONTH(DATEFROMPARTS(vintage_year, vintage_month, 1)) term_end,
				  vintage.value_id vintage,
				  volume actual_volume,
				  COALESCE(sc.source_counterparty_id, rg.ppa_counterparty_id, NULLIF(0, 0)) source_counterparty_id,
				  price,
				  a.source_certificate_number,
				  --DENSE_RANK() OVER(PARTITION BY a.counterparty ORDER BY a.certificate_seq_from, a.certificate_seq_to) leg,
				  NULL leg,
				  a.facility_name,
				  technology.value_id technology,
				  generation_state.value_id generation_state,
				  --ce.value_id certification_entity,
				  a.temp_id			
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN rec_generator rg
					ON rg.code = a.generator
				LEFT JOIN static_data_value jurisdiction
					ON jurisdiction.code = a.jurisdiction
						AND jurisdiction.type_id = 10002
				LEFT JOIN static_data_value tier
					ON tier.code = a.tier
						AND tier.type_id = 15000
				LEFT JOIN static_data_value vintage
					ON vintage.code = a.vintage_year
						AND vintage.type_id = 10092
				LEFT JOIN source_counterparty sc
					ON sc.counterparty_id = a.counterparty
				LEFT JOIN static_data_value technology
					ON technology.code = a.technology
						AND technology.type_id = 10009
				LEFT JOIN static_data_value generation_state
					ON generation_state.code = a.generation_state
						AND generation_state.type_id = 10016
				--OUTER APPLY ( SELECT sdv.value_id
				--			  FROM static_data_value sdv
				--			  INNER JOIN static_data_type sdt
				--				  ON sdt.type_id = sdv.type_id
				--				  AND sdt.type_name = ''Certification Systems''
				--			  WHERE sdv.code = a.certification_entity
				--) ce
		')


	--GROUP BY counterparty, vintage_year, vintage_month, source_certificate_number, certificate_seq_from, deal_id, generator, volume

	--check vintage
	IF OBJECT_ID('tempdb..#temp_term_check') IS NOT NULL
		DROP TABLE #temp_term_check

	SELECT tid.deal_id, sp.calendar_from_month, sp.calendar_to_month, sp.current_next_year, sdd.vintage,
		   CONVERT(DATE, CAST(sdv.code + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, -1, 0) AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120) start_vintage,
		   DATEADD(DAY, -1,DATEADD(YEAR, 1,CONVERT(DATE, CAST(sdv.code + IIF(sp.current_next_year = 'n' AND sp.calendar_from_month <> 1, -1, 0) AS NVARCHAR(4)) + '-' + CAST(sp.calendar_from_month AS NVARCHAR(2)) + '-1', 120))) end_vintage
	INTO #temp_term_check
	FROM #temp_inventory_data tid
	INNER JOIN source_deal_header sdh
		ON sdh.source_deal_header_id = tid.deal_id
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = sdh.source_deal_header_id
	INNER JOIN state_properties sp
		ON sdh.state_value_id = sp.state_value_id
	LEFT JOIN static_data_value sdv
		ON sdv.value_id = sdd.vintage
	GROUP BY tid.deal_id, sp.calendar_from_month, sp.calendar_to_month, sp.current_next_year, sdd.vintage, sdv.code

	IF OBJECT_ID('tempdb..#temp_deal_to_update') IS NOT NULL
		DROP TABLE #temp_deal_to_update

	SELECT a.deal_id,
		   a.source_certificate_number,
		   a.certificate_seq_from,
		   DENSE_RANK() OVER(PARTITION BY a.deal_id ORDER BY a.source_certificate_number, a.certificate_seq_from) leg ,
		   MAX(a.generator_id) generator_id,	
		   MAX(a.term_start) term_start,
		   MAX(a.term_end) term_end,
		   a.source_counterparty_id,
		   sdd.source_deal_detail_id source_deal_detail_id,
		   avg(convert(float , a.actual_volume)) actual_volume,
		   avg(convert(float , a.price)) price,
		   MAX(a.temp_id) temp_id
	INTO #temp_deal_to_update
	FROM #temp_inventory_data a
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = a.deal_id
	INNER JOIN #temp_term_check ttc
		ON ttc.deal_id = a.deal_id
		AND a.term_start between ttc.start_vintage and ttc.end_vintage
	GROUP BY a.deal_id, a.source_certificate_number, a.certificate_seq_from, a.certificate_seq_to, a.source_counterparty_id, sdd.source_deal_detail_id

	IF OBJECT_ID('tempdb..#temp_deal_volume_not_matched') IS NOT NULL
		DROP TABLE #temp_deal_volume_not_matched

	SELECT sdh.source_deal_header_id
		 , MAX(tmp.term_start) term_start
		 , MAX(tmp.term_end) term_end
		 , MAX(tmp.source_counterparty_id) source_counterparty_id
		 , MAX(tmp.price) price
		 , MAX(tmp.generator_id) generator_id
		 , MAX(tmp.leg) + 1 leg
		 , MAX(sdd.deal_volume) - SUM(tmp.actual_volume) unsettled_volume 
	INTO #temp_deal_volume_not_matched
	FROM #temp_deal_to_update tmp
	INNER JOIN source_deal_header sdh
		ON sdh.source_deal_header_id = tmp.deal_id
	OUTER APPLY (SELECT SUM(sdd.deal_volume) deal_volume
				 FROM source_deal_detail sdd
				 WHERE sdd.source_deal_header_id = sdh.source_deal_header_id
				 GROUP BY sdd.source_deal_header_id
	) sdd
	GROUP BY sdh.source_deal_header_id

		-- Validation for already existed certificate
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
			SELECT tid.temp_id,
				   10002,
				   dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Month of Generation''), ''<column_value>'', tid.term_start),
				   NULL, --a.import_file_name,
				   ''Error'',
				   ''Data Error'',
				   ''Please correct data and re-import.''
 			FROM #temp_inventory_data tid
			LEFT JOIN #temp_deal_to_update tdtu
				ON	tdtu.deal_id = tid.deal_id
				AND tdtu.source_certificate_number = tid.source_certificate_number
				AND tdtu.certificate_seq_from = tid.certificate_seq_from
				AND tdtu.source_counterparty_id = tid.source_counterparty_id
			LEFT JOIN #temp_deal_volume_not_matched tdvnm
				ON tdvnm.source_deal_header_id = tid.deal_id
				AND tdvnm.term_start = tid.term_start
				AND tdvnm.term_end = tid.term_end
			WHERE tdtu.temp_id IS NULL AND tdvnm.source_deal_header_id IS NULL
	')


	EXEC('DELETE a
	 	  FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
	')


	SELECT sdd.source_deal_header_id,
		   sdd.source_deal_detail_id,
		   tdtu.term_start, 
 		   tdtu.term_end, 
 		   tdtu.Leg, 	   
 		   sdd.contract_expiration_date,
 		   sdd.fixed_float_leg,
 		   sdd.buy_sell_flag,
 		   sdd.curve_id,
 		   sdd.fixed_price [fixed_price], 
 		   sdd.fixed_price_currency_id,
 		   sdd.option_strike_price,
 		   tdtu.actual_volume [deal_volume],  --deal_volume
 		   sdd.deal_volume_frequency,
 		   sdd.deal_volume_uom_id,
 		   sdd.block_description,
 		   sdd.deal_detail_description,
 		   sdd.create_user,
 		   sdd.create_ts,
 		   sdd.[settlement_volume],
 		   sdd.[settlement_uom],
 		   sdd.[price_adder],
 		   sdd.[price_multiplier],
 		   sdd.[settlement_date],
 		   sdd.[day_count_id],
 		   sdd.[location_id],
 		   sdd.[meter_id],
 		   sdd.[physical_financial_flag],
 		   sdd.[fixed_cost],
 		   sdd.[multiplier],
 		   sdd.[adder_currency_id],
 		   sdd.[fixed_cost_currency_id],
 		   sdd.[formula_currency_id],
 		   sdd.[price_adder2],
 		   sdd.[price_adder_currency2],
 		   sdd.[volume_multiplier2],
 		   sdd.[pay_opposite],
 		   sdd.[capacity],
 		   sdd.[settlement_currency],
 		   sdd.[standard_yearly_volume],
 		   sdd.[price_uom_id],
 		   sdd.[category],
 		   sdd.[profile_code],
 		   sdd.[profile_id],
 		   sdd.[pv_party],
 		   sdd.[formula_id],
 		   sdd.Booked,
 		   sdd.process_deal_status,
 		   sdd.formula_curve_id,
		   tdtu.actual_volume [actual_volume],
		   sdd.schedule_volume [schedule_volume],
		   --DATEPART(YEAR, CAST(tdtu.term_start AS DATETIME)) vintage,
		   sdd.vintage,
		   25006 [status],--sdd.status,
		   sdd.position_uom,
		   NULL [contractual_volume], --contractual_volume
		   sdd.fx_conversion_rate,
		   sdd.upstream_contract,
		   sdd.upstream_counterparty,
		   sdd.strike_granularity,
		   sdd.no_of_strikes,
		   sdd.payment_date,
		   sdd.delivery_date,
		   GETDATE() actual_delivery_date
	INTO #temp_deal_detail_to_update_finale
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_to_update tdtu
		ON tdtu.deal_id = sdd.source_deal_header_id
	UNION ALL
	SELECT sdd.source_deal_header_id,
		   sdd.source_deal_detail_id,
		   sdd.term_start, 
 		   sdd.term_end, 
 		   tdvnm.Leg, 	   
 		   sdd.contract_expiration_date,
 		   sdd.fixed_float_leg,
 		   sdd.buy_sell_flag,
 		   sdd.curve_id,
 		   sdd.fixed_price [fixed_price], 
 		   sdd.fixed_price_currency_id,
 		   sdd.option_strike_price,
 		   tdvnm.unsettled_volume [deal_volume],  --deal_volume
 		   sdd.deal_volume_frequency,
 		   sdd.deal_volume_uom_id,
 		   sdd.block_description,
 		   sdd.deal_detail_description,
 		   sdd.create_user,
 		   sdd.create_ts,
 		   sdd.[settlement_volume],
 		   sdd.[settlement_uom],
 		   sdd.[price_adder],
 		   sdd.[price_multiplier],
 		   sdd.[settlement_date],
 		   sdd.[day_count_id],
 		   sdd.[location_id],
 		   sdd.[meter_id],
 		   sdd.[physical_financial_flag],
 		   sdd.[fixed_cost],
 		   sdd.[multiplier],
 		   sdd.[adder_currency_id],
 		   sdd.[fixed_cost_currency_id],
 		   sdd.[formula_currency_id],
 		   sdd.[price_adder2],
 		   sdd.[price_adder_currency2],
 		   sdd.[volume_multiplier2],
 		   sdd.[pay_opposite],
 		   sdd.[capacity],
 		   sdd.[settlement_currency],
 		   sdd.[standard_yearly_volume],
 		   sdd.[price_uom_id],
 		   sdd.[category],
 		   sdd.[profile_code],
 		   sdd.[profile_id],
 		   sdd.[pv_party],
 		   sdd.[formula_id],
 		   sdd.Booked,
 		   sdd.process_deal_status,
 		   sdd.formula_curve_id,
		   NULL [actual_volume],
		   sdd.schedule_volume [schedule_volume],
		   sdd.vintage,
		   sdd.status,
		   sdd.position_uom,
		   tdvnm.unsettled_volume [contractual_volume], --contractual_volume
		   sdd.fx_conversion_rate,
		   sdd.upstream_contract,
		   sdd.upstream_counterparty,
		   sdd.strike_granularity,
		   sdd.no_of_strikes,
		   sdd.payment_date,
		   sdd.delivery_date,
		   NULL	
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_volume_not_matched tdvnm
		ON tdvnm.source_deal_header_id = sdd.source_deal_header_id
		AND tdvnm.unsettled_volume > 0

	BEGIN TRY
		BEGIN TRAN 	--prevent data of deal from deleting and not inserting
		----delete deal detail to seperate legs
		--DELETE tddtuf
		--FROM Gis_Certificate gc
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = gc.source_deal_header_id
		--INNER JOIN #temp_deal_detail_to_update_finale tddtuf
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id

		--DELETE udddf
		--FROM user_defined_deal_detail_fields udddf
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_detail_id = udddf.source_deal_detail_id
		--INNER JOIN #temp_deal_detail_to_update_finale tddtuf
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id

		--DELETE sdd
		----select sdd.*
		--FROM #temp_deal_detail_to_update_finale tddtuf
		--INNER JOIN source_deal_detail sdd
		--	ON sdd.source_deal_header_id = tddtuf.source_deal_header_id
		------delete ends

		UPDATE sdd
		SET [deal_volume] = tdduf.actual_volume,
			[term_start] = tdduf.term_start, 
 			[term_end] = tdduf.term_end,
			[actual_volume] = tdduf.actual_volume,
			[actual_delivery_date] = GETDATE(),
			[status] = 25006,
			[vintage] = DATEPART(YEAR, CAST(tdduf.term_start AS DATETIME))
		--select * 
		From #temp_deal_detail_to_update_finale tdduf
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg

		--Update volume left for already matched volume. Note: this cant be done from above existed update statement.
		UPDATE sdd
		SET volume_left = sdd.deal_volume
		From #temp_deal_detail_to_update_finale tdduf
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg

		--Insert into deal detail
		INSERT INTO source_deal_detail (
 								 source_deal_header_id,
 								 term_start,
 								 term_end,
 								 Leg,
 								 contract_expiration_date,
 								 fixed_float_leg,
 								 buy_sell_flag,
 								 curve_id,
 								 .fixed_price,
 								 fixed_price_currency_id,
 								 option_strike_price,
 								 deal_volume,
 								 deal_volume_frequency,
 								 deal_volume_uom_id,
 								 block_description,
 								 deal_detail_description,
 								 create_user,
 								 create_ts,
 								[settlement_volume],
 								[settlement_uom] , --suom_set
 								[price_adder],
 								[price_multiplier],
 								[settlement_date],
 								[day_count_id],  --sdv_day
 								[location_id], --select * from source_minor_location
 								[meter_id],   -- select * from source_minor_location_meter
 								[physical_financial_flag],
 								[fixed_cost],
 								[multiplier],
 								[adder_currency_id],
 								[fixed_cost_currency_id],
 								[formula_currency_id],
 								[price_adder2],
 								[price_adder_currency2],
 								[volume_multiplier2],
 								[pay_opposite],
 								[capacity],
 								[settlement_currency],
 								[standard_yearly_volume],
 								[price_uom_id],
 								[category],
 								[profile_code],
 								[profile_id],
 								[pv_party],
 								[formula_id],
 								Booked,
 								process_deal_status,
 								formula_curve_id,
								actual_volume,
								schedule_volume,
								vintage,
								status,
								position_uom,
								contractual_volume,
								fx_conversion_rate,
								upstream_contract,
								upstream_counterparty,
								strike_granularity,
								no_of_strikes,
								payment_date,
								delivery_date,
								actual_delivery_date
 		)
		SELECT tdduf.source_deal_header_id,		   
 		   tdduf.term_start, 
 		   tdduf.term_end, 
 		   tdduf.Leg, 	   
 		   tdduf.contract_expiration_date,
 		   tdduf.fixed_float_leg,
 		   tdduf.buy_sell_flag,
 		   tdduf.curve_id,
 		   tdduf.fixed_price, 
 		   tdduf.fixed_price_currency_id,
 		   tdduf.option_strike_price,
 		   tdduf.deal_volume,  --deal_volume
 		   tdduf.deal_volume_frequency,
 		   tdduf.deal_volume_uom_id,
 		   tdduf.block_description,
 		   tdduf.deal_detail_description,
 		   tdduf.create_user,
 		   tdduf.create_ts,
 		   tdduf.[settlement_volume],
 		   tdduf.[settlement_uom],
 		   tdduf.[price_adder],
 		   tdduf.[price_multiplier],
 		   tdduf.[settlement_date],
 		   tdduf.[day_count_id],
 		   tdduf.[location_id],
 		   tdduf.[meter_id],
 		   tdduf.[physical_financial_flag],
 		   tdduf.[fixed_cost],
 		   tdduf.[multiplier],
 		   tdduf.[adder_currency_id],
 		   tdduf.[fixed_cost_currency_id],
 		   tdduf.[formula_currency_id],
 		   tdduf.[price_adder2],
 		   tdduf.[price_adder_currency2],
 		   tdduf.[volume_multiplier2],
 		   tdduf.[pay_opposite],
 		   tdduf.[capacity],
 		   tdduf.[settlement_currency],
 		   tdduf.[standard_yearly_volume],
 		   tdduf.[price_uom_id],
 		   tdduf.[category],
 		   tdduf.[profile_code],
 		   tdduf.[profile_id],
 		   tdduf.[pv_party],
 		   tdduf.[formula_id],
 		   tdduf.Booked,
 		   tdduf.process_deal_status,
 		   tdduf.formula_curve_id,
		   tdduf.actual_volume [actual_volume],
		   tdduf.schedule_volume [schedule_volume],
		   tdduf.vintage,
		   tdduf.status,
		   tdduf.position_uom,
		   tdduf.contractual_volume [contractual_volume], --contractual_volume
		   tdduf.fx_conversion_rate,
		   tdduf.upstream_contract,
		   tdduf.upstream_counterparty,
		   tdduf.strike_granularity,
		   tdduf.no_of_strikes,
		   tdduf.payment_date,
		   tdduf.delivery_date,
		   tdduf.actual_delivery_date
		FROM #temp_deal_detail_to_update_finale tdduf
		LEFT JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = tdduf.source_deal_header_id
			AND sdd.source_deal_detail_id = tdduf.source_deal_detail_id 
			AND sdd.leg = tdduf.leg
		WHERE sdd.source_deal_detail_id IS NULL
		--deal detail insert/update ends
		COMMIT  TRAN
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
				ROLLBACK

			EXEC spa_ErrorHandler -1
				, 'rec inventory with deal'
				, 'spa_ixp_generic_import_job'
				, 'Error'
				, 'Failed to update deal detail'
				, ''
	END CATCH

	-- final data to insert into cetificate after deal detail breakdown
	IF OBJECT_ID('tempdb..#temp_final_certificate_detail') IS NOT NULL
		DROP TABLE #temp_final_certificate_detail

	SELECT tid.deal_id	
		 , tid.certificate_seq_from
		 , tid.certificate_seq_to	
		 , tid.certificate_serial_numbers_from	
		 , tid.certificate_serial_numbers_to
		 , tid.expiry_date	
		 , tid.generator_id	
		 , tid.generator	
		 , tid.issue_date	
		 , tid.state_value_id	
		 , tid.jurisdiction	
		 , tid.tier_id	
		 , tid.tier	
		 , tid.term_start	
		 , tid.term_end	
		 , tid.vintage	
		 , tid.actual_volume	
		 , tid.source_counterparty_id	
		 , tid.price	
		 , tid.source_certificate_number	
		 , tdtu.leg	
		 , tid.facility_name	
		 , tid.technology	
		 , tid.generation_state	
		 , tid.temp_id
	INTO #temp_finale_certificate_detail
	--select tdtu.*
	FROM #temp_deal_to_update tdtu
	INNER JOIN #temp_inventory_data tid		
		ON  tid.deal_id = tdtu.deal_id
		AND tid.source_certificate_number = tdtu.source_certificate_number
		AND tid.certificate_seq_from = tdtu.certificate_seq_from
		AND tid.term_start = tdtu.term_start
		AND tid.term_end = tdtu.term_end
	INNER JOIN #temp_deal_detail_to_update_finale tddtuf
			ON tdtu.deal_id = tddtuf.source_deal_header_id
			AND tdtu.Leg = tddtuf.Leg
		
	INSERT INTO gis_certificate (
		source_deal_header_id, gis_certificate_number_from, gis_certificate_number_to, certificate_number_from_int,
		certificate_number_to_int, gis_cert_date, state_value_id, tier_type, year, contract_expiration_date,
		--certification_entity, 
		facility_name, technology, generation_state, unit_id
	) 
	--OUTPUT INSERTED.source_deal_header_id INTO #inserted_detail_id 
	SELECT DISTINCT
		   sdd.source_deal_detail_id,
		   tfcd.certificate_serial_numbers_from,
		   tfcd.certificate_serial_numbers_to,
		   tfcd.certificate_seq_from,
		   tfcd.certificate_seq_to,
		   tfcd.issue_date,
		   tfcd.state_value_id,
		   tfcd.tier_id,
		   tfcd.vintage,
		   tfcd.expiry_date,
		 --  CASE WHEN @rules_names IN ('PJM Inventory', 'GetRecs from GATS PJM') 
			--	THEN sdv.value_id
			--	WHEN @rules_names = 'MIRECS Inventory'
			--	THEN sdv_mir.value_id
			--	ELSE tfcd.certification_entity 
			--END,
		   tfcd.facility_name,
		   tfcd.technology,
		   tfcd.generation_state,
		   tfcd.generator
	FROM #temp_finale_certificate_detail tfcd
	INNER JOIN source_deal_detail sdd
		ON  sdd.source_deal_header_id = tfcd.deal_id --ISNULL(sdh_g.source_deal_header_id, sdh_c.source_deal_header_id)
			AND sdd.term_start = tfcd.term_start
			AND sdd.term_end = tfcd.term_end
			AND sdd.leg = tfcd.leg
			AND sdd.deal_volume = tfcd.actual_volume
	LEFT JOIN gis_certificate gc
		ON gc.source_deal_header_id = sdd.source_deal_detail_id
			AND gc.state_value_id = tfcd.state_value_id
			AND gc.tier_type = tfcd.tier_id
	WHERE gc.source_certificate_number IS NULL
		AND sdd.source_deal_detail_id IS NOT NULL
END

IF @table_name = 'ixp_rec_generator'
BEGIN
	
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET start_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.start_date = dd.user_date
	')	
	/***END OF date update***/
	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''rec_generator'',''first_gen_date'',''start_date'')')
 	        
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables 
		+ 
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''generation_state'', ''a.generation_state = b.code AND b.type_id = 10016'', ''e''),
		(''static_data_value'', ''technology'', ''a.technology = b.code AND b.type_id = 10009'', ''e''),
		(''eligibility_mapping_template'', ''eligibility_mapping_template'', ''a.eligibility_mapping_template = b.template_name'', ''w''),
		(''static_data_value'', ''fuel_type'', ''a.fuel_type = b.code AND b.type_id = 10023'', ''w''),
		(''source_system_book_map'', ''sub_book'', ''a.sub_book = b.logical_name'', ''w''),
		(''static_data_value'', ''state_value_id'', ''a.state_value_id = b.code AND b.type_id = 10002'', ''w''),
		(''static_data_value'', ''tier_type'', ''a.tier_type = b.code AND b.type_id = 15000'', ''w'')
		')
 	 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	IF OBJECT_ID('tempdb..#rec_generator') IS NOT NULL
		DROP TABLE #rec_generator
	
	CREATE TABLE #rec_generator (
		[temp_id] INT,
		[start_date] DATETIME,
		[unit_id] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[facility_id] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[facility_owner] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[facility_name] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[unit_name] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[generation_state] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[fuel_type] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[technology] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[eligibility_mapping_template] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[sub_book] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[state_value_id] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[tier_type] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[id2] NVARCHAR(250) COLLATE DATABASE_DEFAULT,
		[import_file_name] NVARCHAR(600) COLLATE DATABASE_DEFAULT
	)
	
	EXEC('
		INSERT INTO #rec_generator
		SELECT temp_id,
			   CONVERT(DATETIME, dbo.FNAClientToSqlDate(start_date), 120) start_date,
			   unit_id,
			   facility_id,
			   facility_owner,
			   facility_name,
			   unit_name,
			   generation_state,
			   fuel_type,
			   technology,
			   eligibility_mapping_template,
			   sub_book,
			   state_value_id,
			   tier_type,
			   id2,
			   import_file_name
		FROM ' + @import_temp_table_name
	)	

	-- Data Missing Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10001,
		  CASE 
			WHEN a.unit_id IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Unit ID'')
			WHEN a.facility_id IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Facility ID'')
			WHEN a.facility_owner IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Facility Owner'')
			WHEN a.facility_name IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Facility Name'')
			WHEN a.generation_state IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Generation State'')
			WHEN a.technology IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Technology'')
			WHEN a.start_date IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Start Date'')
		  END
 		  ,a.import_file_name
			FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (a.unit_id IS NULL
				   OR a.facility_id IS NULL
				   OR a.facility_owner IS NULL
				   OR a.facility_name IS NULL
				   OR a.generation_state IS NULL
				   OR a.technology IS NULL
				   OR a.start_date IS NULL
				)
	')

	EXEC ('
        INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
            SELECT
            a.temp_id,
			10015,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Default Tier''), ''<column_value>'', a.tier_type), ''<column_name1>'', ''Default Jurisdiction''), ''<column_value1>'', sdv_g.code),
            a.import_file_name
        FROM
       ' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv_t on a.tier_type = sdv_t.code and sdv_t.type_id = 15000
		INNER JOIN static_data_value sdv_g on a.state_value_id = sdv_g.code and sdv_g.type_id = 10002
		LEFT JOIN state_properties_details spd on sdv_g.value_id = spd.state_Value_id
		AND spd.tier_id = sdv_t.value_id
        WHERE spd.tier_id IS NULL
	')
	
	--Validation for repeatition of unit_id and facility_id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10007,
				''
				 {
					"column_name": "'' + scm.source_column_name + '', '' + scm1.source_column_name + ''",
				    "column_value": "'' + a.unit_id + '', '' + a.facility_id + ''",
				    "repetition_count": "'' + CAST(ab.counters AS NVARCHAR(20)) + ''"
				 }
				'',
 				 a.import_file_name
		  FROM  '+ @import_temp_table_name + ' a
		  CROSS APPLY (
			   SELECT COUNT(1) AS counters, unit_id, facility_id
			   FROM ' + @import_temp_table_name + ' a
			   GROUP BY unit_id, facility_id
			   HAVING COUNT(1) > 1
		  ) ab
		  CROSS APPLY ( SELECT source_column_name 
                FROM #source_file_column_table 
                WHERE ixp_columns_name = ''unit_id''
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                FROM #source_file_column_table 
                WHERE ixp_columns_name = ''facility_id''
          ) scm1
		  WHERE ab.counters > 1
		      AND ab.unit_id = a.unit_id
			  AND ab.facility_id = a.facility_id
	')


	DELETE a
	FROM #error_status b
	INNER JOIN #rec_generator a 
		ON b.temp_id = a.temp_id
	INNER JOIN message_log_template mlt 
		ON mlt.message_number = b.[error_number]
	WHERE mlt.message_status = 'Error'

	EXEC('DELETE a
 	      FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a 
		  	ON #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt 
		  	ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
		')

	INSERT INTO rec_generator (
		first_gen_date, code, id, owner, name, facility_name, gen_state_value_id,
		fuel_value_id, technology, eligibility_mapping_template_id, fas_sub_book_id,
		registered, fas_book_id, legal_entity_value_id, state_value_id, tier_type,generator_type,id2
	)
	SELECT Distinct [start_date], rg.unit_id, rg.facility_id, rg.facility_owner, rg.facility_name, 
		   rg.unit_name, gen_state.value_id generation_state, fuel_type.value_id fuel_type, 
		   tech.value_id technology, emt.template_id eligibility_mapping_template, ssbm.book_deal_type_map_id sub_book, 'n',
		   book.entity_id fas_book_id, subs.entity_id legal_entity_value_id, state_value_id.value_id, spd.tier_id, 'r',rg.id2
	FROM #rec_generator rg
	LEFT JOIN static_data_value gen_state
		ON gen_state.code = rg.generation_state
			AND gen_state.[type_id] = 10016
	LEFT JOIN static_data_value fuel_type
		ON fuel_type.code = rg.fuel_type
			AND fuel_type.[type_id] = 10023
	LEFT JOIN static_data_value tech
		ON tech.code = rg.technology
			AND tech.[type_id] = 10009
	LEFT JOIN eligibility_mapping_template emt
		ON emt.template_name = 	rg.eligibility_mapping_template
	LEFT JOIN source_system_book_map ssbm
		ON ssbm.logical_name = rg.sub_book
	LEFT JOIN portfolio_hierarchy book
		ON book.entity_id = ssbm.fas_book_id
	LEFT JOIN portfolio_hierarchy stra
		ON stra.entity_id = book.parent_entity_id
	LEFT JOIN portfolio_hierarchy subs
		ON subs.entity_id = stra.parent_entity_id
	LEFT JOIN rec_generator r
		ON r.code = rg.unit_id
		AND r.id = rg.facility_id
	LEFT JOIN static_data_value state_value_id 
		ON state_value_id.code = rg.state_value_id 
			AND state_value_id.[type_id] = 10002
	LEFT JOIN static_data_value tier
		ON tier.code = rg.tier_type 
			AND tier.[type_id] = 15000
	LEFT JOIN state_properties_details spd ON spd.state_value_id = state_value_id.value_id
		AND spd.tier_id = tier.value_id
	WHERE r.code IS NULL
	AND r.id IS NULL
	
	UPDATE r
	SET r.first_gen_date = rg.[start_date], 
		r.id = rg.facility_id, 
		r.owner = rg.facility_owner, 
		r.name = rg.facility_name, 
		r.facility_name = rg.unit_name, 
		r.gen_state_value_id = gen_state.value_id, 
		r.fuel_value_id = fuel_type.value_id, 
		r.technology = tech.value_id,
		r.eligibility_mapping_template_id = emt.template_id,
		r.fas_sub_book_id = ssbm.book_deal_type_map_id,
		r.fas_book_id = book.entity_id,
		r.legal_entity_value_id = subs.entity_id,
		r.state_value_id = state_value_id.value_id,
		r.tier_type =  spd.tier_id,
		r.generator_type = 'r',
		r.id2 = rg.id2
	FROM #rec_generator rg
	LEFT JOIN static_data_value gen_state
		ON gen_state.code = rg.generation_state
			AND gen_state.[type_id] = 10016
	LEFT JOIN static_data_value fuel_type
		ON fuel_type.code = rg.fuel_type
			AND fuel_type.[type_id] = 10023
	LEFT JOIN static_data_value tech
		ON tech.code = rg.technology
			AND tech.[type_id] = 10009
	LEFT JOIN eligibility_mapping_template emt
		ON emt.template_name = 	rg.eligibility_mapping_template
	LEFT JOIN source_system_book_map ssbm
		ON ssbm.logical_name = rg.sub_book
	LEFT JOIN portfolio_hierarchy book
		ON book.entity_id = ssbm.fas_book_id
	LEFT JOIN portfolio_hierarchy stra
		ON stra.entity_id = book.parent_entity_id
	LEFT JOIN portfolio_hierarchy subs
		ON subs.entity_id = stra.parent_entity_id
	LEFT JOIN rec_generator r
		ON r.code = rg.unit_id
		AND r.id = rg.facility_id
	LEFT JOIN static_data_value state_value_id 
		ON state_value_id.code = rg.state_value_id 
			AND state_value_id.[type_id] = 10002
	LEFT JOIN static_data_value tier
		ON tier.code = rg.tier_type 
			AND tier.[type_id] = 15000
	LEFT JOIN state_properties_details spd ON spd.state_value_id = state_value_id.value_id
		AND spd.tier_id = tier.value_id
	WHERE r.code IS NOT NULL
	AND r.id IS NOT NULL
END
IF @table_name = 'ixp_import_rec_meters'
BEGIN
	EXEC ('IF NOT EXISTS(
 		   SELECT 1
 		   FROM   adiha_process.sys.tables
 		   WHERE  [name] =  REPLACE(''' + @final_stg_table + ''',''adiha_process.dbo.'','''')
 				  AND [type] = ''U''
 		)
 		SELECT * INTO ' + @final_stg_table + ' FROM ' + @import_temp_table_name
     )
	

 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @final_stg_table)
	
	/***update user date to sql date***/		
	
	EXEC('UPDATE a
		  SET date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.date = dd.user_date
	')	
	/***END OF date update***/

	/*start of validation*/
	EXEC ('DELETE ' + @field_compare_table)
 	        
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data'',''channel'',''channel'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''meter_id'',''recorderid'',''meter_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_DST'',''date'',''date'')')	
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''period'',''hour'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''period'',''minute'')')				
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''hr1'',''volume'')')	
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_DST'',''id'',''is_dst'')')	
 	 	
 	SET @source_table = @import_temp_table_name    
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id

	
	--/*---trigger starts---
	IF OBJECT_ID(N'tempdb..#temp_table_rec_meter') IS NOT NULL    
	DROP TABLE #temp_table_rec_meter

	CREATE TABLE #temp_table_rec_meter (
		hour NVARCHAR(10) COLLATE DATABASE_DEFAULT, 
		minute NVARCHAR(20) COLLATE DATABASE_DEFAULT, 
		is_dst NVARCHAR(2) COLLATE DATABASE_DEFAULT,
		meter_id NVARCHAR(200) COLLATE DATABASE_DEFAULT, 
		channel NVARCHAR(50) COLLATE DATABASE_DEFAULT, 
		volume NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		date NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		import_file_name NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		granularity	NVARCHAR(10)	COLLATE DATABASE_DEFAULT
	)

	EXEC('INSERT INTO #temp_table_rec_meter (hour, minute, is_dst, meter_id, channel, volume, date, import_file_name)
		SELECT hour, minute, [is_dst], [meter_id], channel, volume, date, import_file_name
		FROM ' +  @import_temp_table_name )

	UPDATE b
	SET granularity = 
		CASE 
			WHEN mi.granularity = 994 THEN '10'
			WHEN mi.granularity = 987 THEN '15'
			WHEN mi.granularity = 989 THEN '30'
			WHEN mi.granularity = 995 THEN '5'
			WHEN mi.granularity = 993 THEN 'Annually'
			WHEN mi.granularity = 982 THEN 'Hourly'
			WHEN mi.granularity = 980 THEN 'Monthly'
			WHEN mi.granularity = 981 THEN 'Daily'
		END
	FROM meter_id mi
	INNER JOIN #temp_table_rec_meter b ON mi.recorderid = b.meter_id
	INNER JOIN static_data_value sdv ON sdv.value_id = mi.granularity AND sdv.type_id = 978
	
	UPDATE f
	SET hour = ((hour * 60 + minute) - f.granularity ) / 60,
		minute = ((hour * 60 + minute) - f.granularity) % 60 
	FROM #temp_table_rec_meter f
	WHERE granularity IN ('5','10','15', '30')
	
	INSERT INTO #temp_table_rec_meter (hour, minute, is_dst, meter_id, channel, volume, date, import_file_name, granularity)
	SELECT 25 as hour, minute, 0, meter_id, channel, volume, date, import_file_name, granularity FROM #temp_table_rec_meter WHERE is_dst = 1

	DELETE FROM #temp_table_rec_meter WHERE is_dst = 1
	
	UPDATE #temp_table_rec_meter SET hour = CASE WHEN hour =  '' THEN '' ELSE  hour - 1 END
	WHERE granularity NOT IN ('5','10','15', '30')
	
	EXEC('DELETE FROM ' + @import_temp_table_name)

	EXEC('INSERT INTO ' + @import_temp_table_name + ' (hour, minute, [is_dst], [meter_id], channel, volume, date, import_file_name)
		SELECT hour, minute, is_dst, meter_id, channel, volume, date, import_file_name FROM #temp_table_rec_meter
		')
	
	--trigger ends*/
	
	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  meter_id IS NULL
 	             AND channel IS NULL
 	             AND date IS NULL
 	             AND hour IS NULL 	             
				 AND volume IS NULL')
 	        
	--PRINT('***total no of data***') 	
      EXEC ('DELETE FROM ' + @import_temp_table_name + ' WHERE channel IS NULL AND [date] IS NULL AND [hour] IS NULL AND meter_id IS NULL AND minute IS NULL AND volume IS NULL') 
 	--EXEC ('UPDATE ' + @import_temp_table_name + ' SET [hour] = 1')        
 	 	
 	-- data repetition error handeling starts 	
 	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
 	            10007,
 	              dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID, Channel, Date, Hour, Period''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.meter_id' + ' + '', '' + ' + 'a.channel' + ' + '', '' + ' + 'a.date' + ' + '', '' + ' + 'a.hour' + ' + '', '' + ' + 'a.minute ),
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
                   SELECT [meter_id],
						  ISNULL([channel], 1) [channel], 
						  [date],
						  [hour], 
						  [minute], 
						  COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY [meter_id],ISNULL([channel], 1),[date],[hour], [minute]
 				  HAVING COUNT(*) > 1
 			  ) b
			ON  a.[meter_id] = b.[meter_id] 
			AND ISNULL(a.[channel], 1) = ISNULL(b.[channel], 1) 
			AND a.[date] = b.[date] 
			AND a.[hour] = b.[hour] 
			AND a.[minute] = b.[minute]
			')

	--Validation for empty value for meter_id, channel, date, hour and period
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  CASE 
			  WHEN a.meter_id IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID'')
			  WHEN a.channel IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Channel'')
			  WHEN a.date IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Date'')
			  WHEN a.volume IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume'')			  
		  END,
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
 	      WHERE (a.meter_id) IS NULL OR
				(a.channel) IS NULL OR 
				(a.date) IS NULL OR 
				(a.volume) IS NULL 				
	')

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly meter id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
			     dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Hour''),
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN meter_id mi 
			  ON mi.recorderid = a.meter_id
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
		  	  AND mi.granularity IN (994, 987, 989, 995, 982)
			  AND a.hour IS NULL
	')
 	
	-- validation for non existent static data validation of debt_rating and rating_type
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID''), ''<column_value>'', a.meter_id),
		  a.import_file_name
		  FROM   ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status 
			  ON a.temp_id = #error_status.temp_id 						  
		  LEFT JOIN meter_id mi
			  ON mi.recorderid = a.meter_id
 		  WHERE #error_status.temp_id IS NULL AND
				mi.meter_id IS NULL
	')	
	-- Data Mismatch VOlume
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume''), ''<column_value>'', a.volume),
			a.import_file_name
			FROM   ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status 
				ON a.temp_id = #error_status.temp_id 						  
 			WHERE #error_status.temp_id IS NULL AND
				ISNUMERIC(a.volume) = 0 '
		)
		
	-- Not matched Channel
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Channel''), ''<column_value1>'', a.channel), ''<column_name>'', ''Meter ID''), ''<column_value>'',  a.meter_id),
			a.import_file_name
			FROM   ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status 
				ON a.temp_id = #error_status.temp_id
			INNER JOIN meter_id mi
				ON mi.recorderid = a.meter_id
			LEFT JOIN recorder_properties rp
				ON rp.meter_id = mi.meter_id
				AND a.channel = rp.channel
 			WHERE #error_status.temp_id IS NULL AND
				rp.meter_id IS NULL'
		)	

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10016,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''',''<column_value>'', a.is_dst), ''<column_name>'', ''IS DST''),
		  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		  WHERE  #error_status.temp_id IS NULL
		  	AND a.is_dst NOT IN (0, 1)
 	')

	--Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		')
	
	EXEC ('
		INSERT INTO #tmp_staging_table([meter_id], [channel], [date], [hour], [value], [period], [is_dst]) 
		SELECT [meter_id],
			   ISNULL([channel], 1),
			   [date],
			   [hour],
			   [volume],
			   [minute],
			   [is_dst]
		FROM ' + @import_temp_table_name + '
		ORDER BY [meter_id], [date], CAST([hour] AS INT), CAST([minute] AS INT)
		'
	)
	
	IF OBJECT_ID('tempdb..#mv90_data_hour') IS NOT NULL
		DROP TABLE #mv90_data_hour
		
	CREATE TABLE #mv90_data_hour (
 		[meter_id] INT,
 		[channel] INT,
 		[prod_date] DATETIME,
 		[Hr1] FLOAT,
 		[Hr2] FLOAT,
 		[Hr3] FLOAT,
 		[Hr4] FLOAT,
 		[Hr5] FLOAT,
 		[Hr6] FLOAT,
 		[Hr7] FLOAT,
 		[Hr8] FLOAT,
 		[Hr9] FLOAT,
 		[Hr10] FLOAT,
 		[Hr11] FLOAT,
 		[Hr12] FLOAT,
 		[Hr13] FLOAT,
 		[Hr14] FLOAT,
 		[Hr15] FLOAT,
 		[Hr16] FLOAT,
 		[Hr17] FLOAT,
 		[Hr18] FLOAT,
 		[Hr19] FLOAT,
 		[Hr20] FLOAT,
 		[Hr21] FLOAT,
 		[Hr22] FLOAT,
 		[Hr23] FLOAT,
 		[Hr24] FLOAT,
 		[Hr25] FLOAT,
 		[period] INT
	)
	
	INSERT INTO [#mv90_data_hour]
 	SELECT [meter_id], [channel], [prod_date], ([0]) Hr1, ([1]) Hr2, ([2]) Hr3, ([3]) Hr4, ([4]) Hr5, 
		   ([5]) Hr6, ([6]) Hr7, ([7]) Hr8, ([8]) Hr9, ([9]) Hr10, ([10]) Hr11, ([11]) Hr12, ([12]) Hr13,
		   ([13]) Hr14, ([14]) Hr15, ([15]) Hr16, ([16]) Hr17, ([17]) Hr18, ([18]) Hr19, ([19]) Hr20, 
		   ([20]) Hr21, ([21]) Hr22, ([22]) Hr23, ([23]) Hr24, ([24]) Hr25, [period]
 	FROM (  
		SELECT mi.[meter_id],
			   tmp.[channel],
			   tmp.[date] [prod_date],
			   IIF(is_dst = 0, CAST(tmp.[hour] AS TINYINT), 24) [hour],
			   CASE WHEN (tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT)+1 = md.[hour]) THEN 0
					ELSE CAST(tmp.[value] AS FLOAT) 
			   END [value],
			   [period]
		FROM #tmp_staging_table tmp
		INNER JOIN [meter_id] mi 
			ON mi.[recorderid] = tmp.[meter_id]
		INNER JOIN recorder_properties rp
			ON rp.meter_id = mi.meter_id
				AND tmp.channel = rp.channel
		LEFT JOIN [mv90_DST] md
			ON md.[year] = YEAR(tmp.[date]) 
			AND md.[insert_delete] = 'd'
			AND md.dst_group_value_id = @dst_group_value_id	
 	) p
	PIVOT(
		SUM([value]) FOR [hour] IN (
			[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12],
			[13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24]
		)
 	) pvt
	
	SELECT @col = 'Hr' + CAST(md.[hour] AS NVARCHAR(10)) + ' = Hr' + CAST(md.[hour] AS NVARCHAR(10)) + ' + ISNULL(Hr25, 0)'
 	FROM #mv90_data_hour tmp
 	INNER JOIN mv90_DST md
		ON md.[date] = tmp.prod_date
			AND md.insert_delete = 'i'
 
 	SET @sql = '
 		UPDATE tmp
 		SET ' + @col + '
 		FROM #mv90_data_hour tmp
 		INNER JOIN mv90_DST md
 			ON md.date = tmp.prod_date
 				AND md.insert_delete = ''i''
 	'
 	
 	EXEC(@sql)

	IF OBJECT_ID('tempdb..#mv90_data') IS NOT NULL
		DROP TABLE #mv90_data

	SELECT a.meter_id,
 		   CONVERT(NVARCHAR(7), a.[prod_date], 120) + '-01' gen_date,
 		   CONVERT(NVARCHAR(7), a.[prod_date], 120) + '-01' from_date,
 		   CONVERT(NVARCHAR(10), (DATEADD(MONTH, 1, CONVERT(NVARCHAR(7), a.[prod_date], 120) + '-01') - 1), 120) to_date,
 		   a.channel,
 		   SUM(
			   ISNULL(a.[Hr1], 0) + ISNULL(a.[Hr2], 0) + ISNULL(a.[Hr3], 0) + ISNULL(a.[Hr4], 0) + 
			   ISNULL(a.[Hr5], 0) + ISNULL(a.[Hr6], 0) + ISNULL(a.[Hr7], 0) + ISNULL(a.[Hr8], 0) + 
			   ISNULL(a.[Hr9], 0) + ISNULL(a.[Hr10], 0) + ISNULL(a.[Hr11], 0) + ISNULL(a.[Hr12], 0) + 
			   ISNULL(a.[Hr13], 0) + ISNULL(a.[Hr14], 0) + ISNULL(a.[Hr15], 0) + ISNULL(a.[Hr16], 0) + 
			   ISNULL(a.[Hr17], 0) + ISNULL(a.[Hr18], 0) + ISNULL(a.[Hr19], 0) + ISNULL(a.[Hr20], 0) + 
			   ISNULL(a.[Hr21], 0) + ISNULL(a.[Hr22], 0) + ISNULL(a.[Hr23], 0) + ISNULL(a.[Hr24], 0) 
			) volume
    INTO #mv90_data
 	FROM #mv90_data_hour a
 	GROUP BY a.meter_id, a.channel, CONVERT(NVARCHAR(7), a.[prod_date], 120) + '-01', DATEADD(MONTH, 1, CONVERT(NVARCHAR(7), a.[prod_date], 120) + '-01') - 1
	
	EXEC('
		INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id,granularity )
 		SELECT t.meter_id,
			   t.gen_date,
			   t.from_date,
			   t.to_date,
			   t.channel,
			   ABS(t.volume),
			   su.source_uom_id,
			   mi.granularity
 		FROM #mv90_data t 
 		INNER JOIN meter_id mi
			ON mi.meter_id = t.meter_id
		INNER JOIN source_uom su
			ON su.source_uom_id = mi.source_uom_id
 		LEFT JOIN mv90_data mv
			ON mv.meter_id = t.meter_id
				AND mv.from_date = t.from_date
				AND mv.channel = t.[channel]
 		WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ')  
 		AND mv.meter_id IS NULL
	')
	
	EXEC('
		UPDATE mv
		SET gen_date = t.gen_date,
			from_date = t.from_date,
			to_date = t.to_date,
			channel = t.channel,
			volume = ABS(t.volume),
			uom_id = su.source_uom_id,
			granularity = mi.granularity
 		FROM #mv90_data t 
 		INNER JOIN meter_id mi
			ON mi.meter_id = t.meter_id
		INNER JOIN source_uom su
			ON su.source_uom_id = mi.source_uom_id
 		LEFT JOIN mv90_data mv
			ON mv.meter_id = t.meter_id
				AND mv.from_date = t.from_date
				AND mv.channel = t.[channel]
 		WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ')  
 		AND mv.meter_id IS NOT NULL
	')
	
	UPDATE t 
	SET t.Hr1 = ABS(t.Hr1), t.Hr2 = ABS(t.Hr2), t.Hr3 = ABS(t.Hr3), t.Hr4 = ABS(t.Hr4), t.Hr5 = ABS(t.Hr5),
		t.Hr6 = ABS(t.Hr6), t.Hr7 = ABS(t.Hr7), t.Hr8 = ABS(t.Hr8), t.Hr9 = ABS(t.Hr9), t.Hr10 = ABS(t.Hr10),
		t.Hr11 = ABS(t.Hr11), t.Hr12 = ABS(t.Hr12), t.Hr13 = ABS(t.Hr13), t.Hr14 = ABS(t.Hr14), t.Hr15 = ABS(t.Hr15),
		t.Hr16 = ABS(t.Hr16), t.Hr17 = ABS(t.Hr17), t.Hr18 = ABS(t.Hr18), t.Hr19 = ABS(t.Hr19), t.Hr20 = ABS(t.Hr20),
		t.Hr21 = ABS(t.Hr21), t.Hr22 = ABS(t.Hr22), t.Hr23 = ABS(t.Hr23), t.Hr24 = ABS(t.Hr24), t.Hr25 = ABS(t.Hr25)
 	FROM #mv90_data_hour t

	UPDATE mdh
	SET mdh.Hr1 = ISNULL(tmdh.Hr1, mdh.Hr1), mdh.Hr2 = ISNULL(tmdh.Hr2, mdh.Hr2), mdh.Hr3 = ISNULL(tmdh.Hr3, mdh.Hr3), 
 		mdh.Hr4 = ISNULL(tmdh.Hr4, mdh.Hr4), mdh.Hr5 = ISNULL(tmdh.Hr5, mdh.Hr5), mdh.Hr6 = ISNULL(tmdh.Hr6, mdh.Hr6), 
 		mdh.Hr7 = ISNULL(tmdh.Hr7, mdh.Hr7), mdh.Hr8 = ISNULL(tmdh.Hr8, mdh.Hr8), mdh.Hr9 = ISNULL(tmdh.Hr9, mdh.Hr9), 
 		mdh.Hr10 = ISNULL(tmdh.Hr10, mdh.Hr10), mdh.Hr11 = ISNULL(tmdh.Hr11, mdh.Hr11), mdh.Hr12 = ISNULL(tmdh.Hr12, mdh.Hr12), 
 		mdh.Hr13 = ISNULL(tmdh.Hr13, mdh.Hr13), mdh.Hr14 = ISNULL(tmdh.Hr14, mdh.Hr14), mdh.Hr15 = ISNULL(tmdh.Hr15, mdh.Hr15), 
 		mdh.Hr16 = ISNULL(tmdh.Hr16, mdh.Hr16), mdh.Hr17 = ISNULL(tmdh.Hr17, mdh.Hr17), mdh.Hr18 = ISNULL(tmdh.Hr18, mdh.Hr18), 
 		mdh.Hr19 = ISNULL(tmdh.Hr19, mdh.Hr19), mdh.Hr20 = ISNULL(tmdh.Hr20, mdh.Hr20), mdh.Hr21 = ISNULL(tmdh.Hr21, mdh.Hr21), 
 		mdh.Hr22 = ISNULL(tmdh.Hr22, mdh.Hr22), mdh.Hr23 = ISNULL(tmdh.Hr23, mdh.Hr23), mdh.Hr24 = ISNULL(tmdh.Hr24, mdh.Hr24), 
 		mdh.Hr25 = ISNULL(tmdh.Hr25, mdh.Hr25) 
 	FROM #mv90_data_hour tmdh
 	INNER JOIN [mv90_data] md
		ON md.[meter_id] = tmdh.[meter_id]
			AND md.[from_date] = CONVERT(NVARCHAR(7), tmdh.[prod_date], 120) + '-01'
	INNER JOIN mv90_data_hour mdh
		ON md.meter_data_id = mdh.meter_data_id
 			AND tmdh.prod_date = mdh.prod_date
	
	INSERT INTO [mv90_data_hour] (
		[meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8],
		[Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19],
		[Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id], [period]
	)
 	SELECT md.[meter_data_id], tmdh.[prod_date], tmdh.[Hr1], tmdh.[Hr2], tmdh.[Hr3], tmdh.[Hr4], 
		   tmdh.[Hr5], tmdh.[Hr6], tmdh.[Hr7], tmdh.[Hr8], tmdh.[Hr9], tmdh.[Hr10], tmdh.[Hr11], 
		   tmdh.[Hr12], tmdh.[Hr13], tmdh.[Hr14], tmdh.[Hr15], tmdh.[Hr16], tmdh.[Hr17], tmdh.[Hr18],
		   tmdh.[Hr19], tmdh.[Hr20], tmdh.[Hr21], tmdh.[Hr22], tmdh.[Hr23], tmdh.[Hr24], tmdh.[Hr25],
		   md.[uom_id], tmdh.[period]
 	FROM #mv90_data_hour tmdh
 	INNER JOIN [mv90_data] md
 		ON md.[meter_id] = tmdh.[meter_id]
 		AND md.[from_date] = CONVERT(NVARCHAR(7), tmdh.[prod_date], 120) + '-01'
 		AND tmdh.channel = md.channel
 	LEFT JOIN [mv90_data_hour] mdh
		ON mdh.meter_data_id = md.meter_data_id
			AND tmdh.prod_date = mdh.prod_date
 	WHERE mdh.meter_data_id IS NULL
	ORDER BY tmdh.[prod_date]
	
	DECLARE @meter_check BIT = 0, @flag BIT = 0, @template_ids NVARCHAR(MAX), @effective_date NVARCHAR(10)
	
	SELECT @flag = 1 
	FROM source_deal_detail sdd
	INNER JOIN #mv90_data md 
		ON md.meter_id = sdd.meter_id
			AND sdd.term_start = md.from_date
			AND sdd.term_end = md.to_date
	
	IF OBJECT_ID('tempdb..#mv90_data_final') IS NOT NULL
		DROP TABLE #mv90_data_final

	SELECT DISTINCT t.* 
	INTO #mv90_data_final
	FROM #mv90_data t
	INNER JOIN meter_id mi
		ON mi.meter_id = t.meter_id
	INNER JOIN #tmp_staging_table ts
		ON ts.meter_id = mi.recorderid
	INNER JOIN recorder_generator_map rgm
		ON rgm.meter_id = mi.meter_id
	WHERE rgm.effective_date <= ts.[date]
	
	IF OBJECT_ID('tempdb..#vol_calc') IS NOT NULL
		DROP TABLE #vol_calc
	
	CREATE TABLE #vol_calc (
		id INT IDENTITY(1, 1) PRIMARY KEY,
		source_deal_detail_id INT,
		generator_id INT,
		allocation_per FLOAT,
		volume FLOAT,
		vol_diff FLOAT,
		imported_volume FLOAT,
		effective_date NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		new_vol FLOAT
	)

	INSERT INTO #vol_calc
	SELECT sdd.source_deal_detail_id,
		   rg.generator_id,
		   rgm.allocation_per,
		   CASE WHEN rgm.allocation_per IS NULL THEN MAX(md.volume) ELSE SUM(md.volume * CASE WHEN @flag = 0 THEN ISNULL(rgm.allocation_per, 1.0) ELSE 1.0 END) END,
		   (to_vol - from_vol + 1) vol_diff,	
		   CASE WHEN rgm.allocation_per IS NULL THEN MAX(md.volume) ELSE SUM(md.volume) END imported_volume,		
		   rgm.effective_date, 
		   NULL
	FROM source_deal_header sdh
	INNER JOIN source_deal_detail sdd
		ON sdh.source_deal_header_id = sdd.source_deal_header_id
	LEFT JOIN meter_id mi
		ON mi.meter_id = sdd.meter_id			
	LEFT JOIN rec_generator rg
		ON rg.generator_id = sdh.generator_id
	LEFT JOIN recorder_generator_map rgm
		ON rgm.generator_id = rg.generator_id
	INNER JOIN #mv90_data_final md
		ON sdd.term_start = md.from_date
			AND sdd.term_end = md.to_date	
	WHERE md.meter_id = IIF(@flag = 1, sdd.meter_id, rgm.meter_id)
	GROUP BY sdd.source_deal_detail_id, rg.generator_id, rgm.allocation_per, rgm.to_vol, rgm.from_vol, rgm.effective_date
	ORDER BY rgm.from_vol
	
	DECLARE @meter_volume FLOAT, @id INT, @source_deal_detail_id INT, @allocation_per FLOAT, @volume FLOAT, @vol_diff FLOAT, @imported_volume FLOAT

	DECLARE @get_meter_volume CURSOR
	SET @get_meter_volume = CURSOR FOR
	SELECT id, allocation_per, volume, vol_diff 
	FROM #vol_calc
	WHERE vol_diff IS NOT NULL
	OPEN @get_meter_volume
	FETCH NEXT
	FROM @get_meter_volume INTO @id, @allocation_per, @volume, @vol_diff	

	WHILE @@FETCH_STATUS = 0
	BEGIN
		UPDATE a 
		SET volume =  IIF(@allocation_per IS NOT NULL, @volume, @volume - @vol_diff)	
		FROM #vol_calc a 
		WHERE id = @id + 1

		FETCH NEXT
		FROM @get_meter_volume INTO @id, @allocation_per, @volume, @vol_diff			
	END
	CLOSE @get_meter_volume
	DEALLOCATE @get_meter_volume

	UPDATE #vol_calc
	SET volume = IIF(allocation_per IS NOT NULL, volume, IIF(vol_diff <= volume, vol_diff, volume)) 
	
	DECLARE @conversion_factor FLOAT

	SELECT @conversion_factor = ISNULL(conv.conversion_factor, 1.0)
	FROM source_deal_detail sdd
	INNER JOIN #vol_calc v ON sdd.source_deal_detail_id = v.source_deal_detail_id
	LEFT JOIN recorder_generator_map rgm ON v.generator_id = rgm.generator_id
	LEFT JOIN meter_id mi ON mi.meter_id = ISNULL(sdd.meter_id, rgm.meter_id)
	LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id
	LEFT JOIN rec_volume_unit_conversion conv ON conv.from_source_uom_id = ISNULL(rp.uom_id, mi.source_uom_id)
			AND conv.to_source_uom_id = sdd.deal_volume_uom_id

	UPDATE sdd
	SET sdd.schedule_volume = v.volume * @conversion_factor,
		@meter_check = 1,
		sdd.[status] = IIF(sdd.[status] <> 25004, 25003, sdd.[status])
	FROM source_deal_detail sdd
	INNER JOIN #vol_calc v
		ON sdd.source_deal_detail_id = v.source_deal_detail_id

	IF NOT EXISTS(SELECT 1 FROM #vol_calc)
	BEGIN
		UPDATE sdd
		SET sdd.schedule_volume = v.volume * @conversion_factor,
			@meter_check = 1,
			sdd.[status] = IIF(sdd.[status] <> 25004, 25003, sdd.[status])
		FROM source_deal_detail sdd
		INNER JOIN #mv90_data v
			ON sdd.meter_id = v.meter_id
				AND sdd.term_start = v.from_date
				AND sdd.term_end = v.to_date
	END

	UPDATE sdd
	SET sdd.deal_volume = COALESCE(sdd.actual_volume, sdd.schedule_volume, sdd.contractual_volume)
	FROM source_deal_header sdh
	INNER JOIN source_deal_detail sdd
		ON sdh.source_deal_header_id = sdd.source_deal_header_id
	LEFT JOIN meter_id mi
		ON mi.meter_id = sdd.meter_id
	LEFT JOIN rec_generator rg
		ON rg.generator_id = sdh.generator_id
	LEFT JOIN recorder_generator_map rgm
		ON rgm.generator_id = rg.generator_id
	INNER JOIN mv90_data md
		ON sdd.term_start = md.from_date
			AND sdd.term_end = md.to_date
	WHERE md.meter_id = IIF(@flag = 1, sdd.meter_id, rgm.meter_id)
	
	IF @meter_check = 0 AND EXISTS (SELECT 1 FROM #tmp_staging_table)
	BEGIN
		-- Standardize error message when Book Structure and Deal Template is not mapped in generator
		IF OBJECT_ID('tempdb..#meter_id') IS NOT NULL
			DROP TABLE #meter_id
		CREATE TABLE #meter_id (
				recorderid NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
				channel INT, 
				prod_month DATETIME
			)
		DECLARE @sql_stmt NVARCHAR(4000)

		SET @sql_stmt = '
		INSERT INTO #meter_id(recorderid, channel, prod_month)
		SELECT DISTINCT t.meter_id, 
						t.channel,
						CONVERT(NVARCHAR(7), dbo.FNAClientToSqlDate(t.[date]), 120) + ''-01'' AS prod_month
		FROM ' + @import_temp_table_name + ' t
		INNER JOIN meter_id mi
			ON mi.recorderid = t.meter_id
		INNER JOIN recorder_generator_map rgm
			ON rgm.meter_id = mi.meter_id
			'
		EXEC(@sql_stmt)

		SELECT @template_ids = ISNULL(@template_ids + ',', '') + CAST(deal_template_id AS NVARCHAR(10))
		FROM (
			SELECT DISTINCT deal_template_id
			FROM rec_generator rg
			INNER JOIN recorder_generator_map rgm
				ON rgm.generator_id = rg.generator_id
			INNER JOIN mv90_data md
				ON md.meter_id = rgm.meter_id
			WHERE rg.deal_template_id IS NOT NULL
		) a
		
		IF NOT EXISTS(
			SELECT 1
			FROM #meter_id m
			INNER JOIN meter_id mi
				ON mi.recorderid = m.recorderid
			INNER JOIN mv90_data mvd
				ON mvd.meter_id = mi.meter_id
					AND mvd.channel = m.channel
					AND m.prod_month = mvd.from_date
			INNER JOIN recorder_properties rp
				ON rp.meter_id = mi.meter_id
					AND rp.channel = m.channel
			LEFT JOIN recorder_generator_map rgm
				ON rgm.meter_id = mi.meter_id
			LEFT JOIN rec_generator rg
				ON rg.generator_id = rgm.generator_id
			LEFT JOIN meter_id_allocation mia
				ON mia.meter_id = mi.meter_id  
					AND mia.production_month = mvd.from_date  
			INNER JOIN dbo.SplitCommaSeperatedValues(@template_ids)i --@template_ids) i
				ON rg.deal_template_id = i.item
			WHERE rgm.effective_date <= m.prod_month
				AND rg.deal_template_id IS NOT NULL 
				AND rg.fas_sub_book_id IS NOT NULL
			GROUP BY rg.fas_sub_book_id, rg.ppa_counterparty_id, mi.meter_id, mvd.gen_date, rgm.allocation_per, rgm.to_vol, rgm.from_vol, dbo.FNAGetContractMonth(CAST(mvd.from_date AS DATETIME)), dbo.FNAGetContractMonth(CAST(mvd.to_date AS DATETIME)), rgm.generator_id, rg.name, dbo.FNAContractMonthFormat(mvd.from_date), i.item, rg.ppa_contract_id
			HAVING SUM(mvd.volume * ISNULL(rgm.allocation_per, 1) * ISNULL(rp.mult_factor, 1) * ISNULL(mia.gre_per, 1)) > 0)
		BEGIN
			EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
				SELECT MAX(a.temp_id),
				MAX(10011),
				CASE
				  WHEN rg.deal_template_id IS NULL THEN
					 dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Generator''), ''<column_value>'', rg.code), ''<column_name1>'', ''Deal Template'')
				  WHEN rg.fas_sub_book_id IS NULL THEN
					 dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Generator''), ''<column_value>'', rg.code), ''<column_name1>'', ''Sub Book'')
				  END,
				MAX(a.import_file_name)
				FROM rec_generator rg
				INNER JOIN recorder_generator_map rgm
					ON rgm.generator_id = rg.generator_id
				INNER JOIN mv90_data md
					ON md.meter_id = rgm.meter_id
				INNER JOIN meter_id mi
					ON mi.meter_id = md.meter_id
				INNER JOIN ' + @import_temp_table_name + ' a
					ON a.meter_id = mi.recorderid
				LEFT JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
					AND sdh.entire_term_start = a.date
				WHERE sdh.source_deal_header_id IS NULL
				GROUP BY rg.code, rg.deal_template_id, rg.fas_sub_book_id
 				')

				EXEC('DELETE  a
				FROM rec_generator rg
				INNER JOIN recorder_generator_map rgm
					ON rgm.generator_id = rg.generator_id
				INNER JOIN mv90_data md
					ON md.meter_id = rgm.meter_id
				INNER JOIN meter_id mi
					ON mi.meter_id = md.meter_id
				INNER JOIN ' + @import_temp_table_name + ' a
					ON a.meter_id = mi.recorderid
				LEFT JOIN source_deal_header sdh ON sdh.generator_id = rg.generator_id
					AND sdh.entire_term_start = a.date
				WHERE sdh.source_deal_header_id IS NULL
 				')
		END
		ELSE
		BEGIN
			EXEC [dbo].[spa_create_inventory_assignment_deals] @temp_table_name = @import_temp_table_name, @template_id = @template_ids, @table_name = @table_name
			RETURN
		END
	END
END

IF @table_name = 'ixp_rec_volumes'
BEGIN
	
	/***update user date to sql date***/

	EXEC('UPDATE a
		SET vintage_start = CAST(dd.sql_date_value AS DATE)
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd
		ON a.vintage_start = dd.user_date
	')
	/***END OF date update***/ 

	--Data type validation
	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''term_start'', ''vintage_start'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''contractual_volume'', ''forecast_volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''schedule_volume'', ''actual_volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''actual_volume'', ''certified_volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''leg'', ''leg'')')
	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	--Validation for empty value of mandatory fields: Deal ID, Vintage Start
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10001,
		  CASE 
			  WHEN a.deal_id IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Deal ID'')
			  WHEN a.vintage_start IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Start'')			  
		  END,
		  a.import_file_name 
 	      FROM   '+@import_temp_table_name + ' a
		  LEFT JOIN #error_status es ON es.temp_id = a.temp_id
 	      WHERE es.temp_id IS NULL
				AND (a.deal_id IS NULL OR 
				a.vintage_start IS NULL)
	')

	--Validation for Invalid value: Deal ID
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Deal ID''), ''<column_value>'', a.deal_id),
		  a.import_file_name 
 	      FROM   '+@import_temp_table_name + ' a
		  LEFT JOIN source_deal_header sdh
			  ON sdh.deal_id = a.deal_id		  
 	      WHERE sdh.source_deal_header_id IS NULL
			  AND a.deal_id IS NOT NULL
	')

	--Validation for Invalid value: Vintage Start
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Start''), ''<column_value>'', a.vintage_start),
		  a.import_file_name 
 	      FROM   '+@import_temp_table_name + ' a
		  LEFT JOIN #error_status es ON es.temp_id = a.temp_id		
		  INNER JOIN source_deal_header sdh
			  ON sdh.deal_id = a.deal_id  
 	       WHERE es.temp_id IS NULL
			  AND a.vintage_start NOT BETWEEN sdh.entire_term_start AND sdh.entire_term_end
	')

	--Validation for Invalid Leg
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Leg''), ''<column_value>'', a.leg),
		  a.import_file_name 
 	      FROM   '+@import_temp_table_name + ' a
		  LEFT JOIN #error_status es ON es.temp_id = a.temp_id		
		  INNER JOIN source_deal_header sdh
			  ON sdh.deal_id = a.deal_id
		  LEFT JOIN source_deal_detail sdd
			  ON sdd.source_deal_header_id = sdh.source_deal_header_id
			  AND sdd.leg = a.leg
 	       WHERE es.temp_id IS NULL
			  AND sdd.source_deal_detail_id IS NULL
	')

	EXEC('
		DELETE a
		FROM #error_status b
		INNER JOIN ' + @import_temp_table_name + ' a 
		ON b.temp_id = a.temp_id
	')

	--Update the Forecast/Actual/Certified Volumes from import tables
	EXEC ('
		UPDATE sdd
		SET sdd.contractual_volume = ISNULL(NULLIF(rv.forecast_volume, '''')  * ISNULL(sdd.multiplier,1), sdd.contractual_volume), 
			sdd.schedule_volume = ISNULL(NULLIF(rv.actual_volume, '''') * ISNULL(sdd.multiplier,1), sdd.schedule_volume),
			sdd.actual_volume = ISNULL(NULLIF(rv.certified_volume, ''''), sdd.actual_volume)
		FROM ' + @import_temp_table_name + ' rv
		INNER JOIN source_deal_header sdh
			ON sdh.deal_id = rv.deal_id
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = sdh.source_deal_header_id
				AND CONVERT(DATE, sdd.term_start, 120) = CONVERT(DATE, rv.vintage_start, 120)
				AND sdd.leg = rv.leg
	')
	
	--Update best available volume of the deal with reference to its updated Forecast/Actual/Certified Volumes
	--Update suitable deal detail status with reference taken from the updated Forecast/Actual/Certified Volumes 
	EXEC ('
	UPDATE sdd
	SET sdd.deal_volume = COALESCE(sdd.actual_volume, sdd.schedule_volume, sdd.contractual_volume),
		sdd.status = CASE WHEN sdd.actual_volume IS NOT NULL THEN 25004
						  WHEN sdd.schedule_volume IS NOT NULL AND sdd.actual_volume IS NULL THEN 25003
						  WHEN sdd.contractual_volume IS NOT NULL AND sdd.schedule_volume IS NULL AND sdd.actual_volume IS NULL THEN 25008
						  ELSE 25010
					 END
	FROM ' + @import_temp_table_name + ' rv
	INNER JOIN source_deal_header sdh
		ON sdh.deal_id = rv.deal_id
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = sdh.source_deal_header_id
			AND CONVERT(DATE, sdd.term_start, 120) = CONVERT(DATE, rv.vintage_start, 120)
			AND sdd.leg = rv.leg
	')
END

IF @table_name ='ixp_recs_obligation_volumes_import_template' 
BEGIN
	 /** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
			' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''state_value_id'', ''a.state_value_id = b.code AND b.type_id = 10002'', ''e''),		
		(''static_data_value'', ''tier_type'', ''a.tier_type = b.code AND b.type_id = 15000'', ''e''),
        (''static_data_value'', ''requirement_type_id'', ''a.requirement_type_id =b.code AND b.type_id = 23400'', ''e'')
		')
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a' 

    --Validation for Minimum target and Minimum absolute target
       EXEC(' 
        INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type,      recommendation) 
        SELECT a.temp_id, 
        NULL, 
        ''Either Minimum Requirement[%] or Minimum Requirement is missing.'', 
        a.import_file_name,  
        ''Error'', ''Data Error'', ''Please correct data and re-import.'' 
        FROM   ' + @import_temp_table_name + ' a 
        LEFT JOIN #error_status  
        ON a.temp_id = #error_status.temp_id    
        WHERE #error_status.temp_id IS NULL AND a.min_absolute_target IS NULL AND a.min_target IS NULL ') 


EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')

-- Step 1: Insert value on state_rec_requirement_data
SET @sql = 'INSERT INTO state_rec_requirement_data (assignment_type_id,compliance_year,state_value_id,from_year,to_year,rec_assignment_priority_group_id,renewable_target,per_profit_give_back
)
    SELECT DISTINCT
             a.assignment_type_id
           , a.compliance_year
           , sdv.value_id
           , a.from_year
           , a.to_year
           , a.rec_assignment_priority_group_id
           , a.renewable_target
           , a.per_profit_give_back
 
	 FROM ' + @import_temp_table_name + ' a
	 LEFT JOIN static_data_value sdv ON sdv.code = a.state_value_id AND sdv.type_id = 10002 
     LEFT JOIN state_rec_requirement_data srrd on srrd.state_value_id = sdv.value_id
        AND srrd.from_year =  a.from_year
        AND srrd.to_year = a.to_year
      WHERE srrd.state_rec_requirement_data_id IS NULL' 
      
EXEC (@sql)
 --PRINT (@sql)    
	--Step 2 Insert data on state_rec_requirement_detail
SET @sql = 'INSERT INTO state_rec_requirement_detail
(state_value_id,compliance_year,tier_type,min_target,min_absolute_target,requirement_type_id,sub_tier_value_id,max_absolute_target,max_target,state_rec_requirement_data_id)
    SELECT 
          sdv_c.value_id
        , a.compliance_year
        , sdv.value_id
        , a.min_target
        , a.min_absolute_target
        , sdv_l.value_id
        , a.sub_tier_value_id
        , a.max_absolute_target
        , a.max_target
        , srrd.state_rec_requirement_data_id
    FROM ' + @import_temp_table_name + ' a
    LEFT JOIN static_data_value sdv_c ON sdv_c.code = a.state_value_id AND sdv_c.type_id = 10002
    LEFT JOIN static_data_value sdv on sdv.code = a.tier_type AND sdv.type_id = 15000
    LEFT JOIN static_data_value sdv_l on sdv_l.code = a.requirement_type_id AND sdv_l.type_id = 23400
    LEFT JOIN state_rec_requirement_detail srrde on srrde.tier_type = sdv.value_id
        AND srrde.requirement_type_id = sdv_l.value_id
    INNER  JOIN state_rec_requirement_data srrd ON  
           ISNULL(a.assignment_type_id, -1) = ISNULL(srrd.assignment_type_id, -1)
           AND  ISNULL(a.compliance_year, -1) = ISNULL(srrd.compliance_year, -1)
           AND  ISNULL(sdv_c.value_id, -1) = ISNULL(srrd.state_value_id, -1)
           AND  ISNULL(a.from_year, -1) = ISNULL(srrd.from_year, -1)
           AND  ISNULL(a.to_year, -1) = ISNULL(srrd.to_year, -1)
           AND  ISNULL(a.rec_assignment_priority_group_id, -1) = ISNULL(srrd.rec_assignment_priority_group_id, -1)
           AND  ISNULL(a.renewable_target, -1) = ISNULL(srrd.renewable_target, -1)
           AND  ISNULL(a.per_profit_give_back, -1) = ISNULL(srrd.per_profit_give_back, -1)
    WHERE srrde.state_rec_requirement_detail_id IS NULL' 
 
EXEC (@sql)

	-- Step 1: Update value on state_rec_requirement_data
	SET @sql = 'UPDATE srrd
				SET assignment_type_id = a.assignment_type_id,
                    compliance_year = a.compliance_year,
                    state_value_id = sdv.value_id,
                    from_year = a.from_year,
                    to_year = a.to_year,
                    rec_assignment_priority_group_id = a.rec_assignment_priority_group_id,
					renewable_target = a.renewable_target,
					per_profit_give_back = a.per_profit_give_back
				FROM ' + @import_temp_table_name + ' a
	            LEFT JOIN static_data_value sdv ON sdv.code = a.state_value_id AND sdv.type_id = 10002
                INNER JOIN state_rec_requirement_data srrd ON srrd.state_value_id = sdv.value_id
                    AND srrd.from_year =  a.from_year
                    AND srrd.to_year = a.to_year' 
    
	EXEC (@sql)

  --Step 2: Update value on state_rec_requirement_detail
    SET @sql = '  SELECT *
					INTO #temp_state_rec_requirement_detail
					FROM (
						SELECT DISTINCT sdv_state.value_id [state_value_id]
							, temp.from_year
							, temp.to_year
							, sdv_tt.value_id [tire_type]
							, sdv_rti.value_id [requirement_type_id]
							, temp.min_target
							, temp.min_absolute_target
							, temp.max_absolute_target
							, temp.max_target
							, temp.sub_tier_value_id
						FROM ' + @import_temp_table_name + ' temp
						INNER JOIN static_data_value sdv_state ON temp.state_value_id = sdv_state.code
							AND sdv_state.type_id = 10002
						LEFT JOIN static_data_value sdv_tt ON sdv_tt.code = temp.tier_type
							AND sdv_tt.type_id = 15000
						LEFT JOIN static_data_value sdv_rti ON sdv_rti.code = temp.requirement_type_id
							AND sdv_rti.type_id = 23400
						) tmp

					UPDATE srrdd
					SET srrdd.min_target = ISNULL(tmp.min_target, srrdd.min_target)
						,srrdd.min_absolute_target = ISNULL(tmp.min_absolute_target, srrdd.min_absolute_target)
						,srrdd.max_absolute_target = ISNULL(tmp.max_absolute_target, srrdd.max_absolute_target)
						,srrdd.max_target = ISNULL(tmp.max_target, srrdd.max_target)
					FROM state_rec_requirement_detail srrdd
					INNER JOIN state_rec_requirement_data srrd ON srrdd.state_rec_requirement_data_id = srrd.state_rec_requirement_data_id
					OUTER APPLY (
						SELECT tsrrd.min_target, tsrrd.min_absolute_target , tsrrd.max_absolute_target , tsrrd.max_target
						FROM #temp_state_rec_requirement_detail tsrrd
						WHERE tsrrd.state_value_id = srrd.state_value_id
							AND tsrrd.from_year = srrd.from_year
							AND tsrrd.to_year = srrd.to_year
							AND srrdd.tier_type = tsrrd.[tire_type]
						) tmp'
            
      EXEC (@sql)
END

IF @table_name ='ixp_energy_conversion_data_import_template' 
BEGIN

	/***update user date to sql date***/

	EXEC('UPDATE a
		SET effective_date = dd.sql_date_value
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd
		ON a.effective_date = dd.user_date
	')
	/***END OF date update***/ 

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''conversion_name'', ''a.conversion_name = b.code AND b.type_id = 112400'', ''e''),  --error rows
			(''source_uom'', ''from_uom'', ''b.uom_id = a.from_uom'', ''e''), 
			(''source_uom'', ''to_uom'', ''b.uom_id = a.to_uom'', ''e'')		
		')
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a' 

	-- Date Validation
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
			10004,
			''
				{
					"column_name": "Effective Date",
					"column_value": "'' + a.effective_date + ''"
				}
			'',
		a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id          
		WHERE #error_status.temp_id IS NULL
			AND ISDATE(a.effective_date) = 0
	')

	-- Validation for non-existent static values
    EXEC ('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
        SELECT
			a.temp_id,
			10002,
			''
				{
					"column_name": "Actual",
					"column_value": "'' + a.actual + ''"
				}
			'',
            a.import_file_name
        FROM
        ' + @import_temp_table_name + ' a
        WHERE a.actual NOT IN (''y'', ''n'')
	')

	-- Delete error rows 
	EXEC('
		DELETE ' + @import_temp_table_name + '
 	    FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a
			ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt
			ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	-- Insert Case

	-- Step 1: Insert value on conversion_factor
	SET @sql ='INSERT INTO conversion_factor(conversion_value_id,from_uom,to_uom)
		SELECT 
			DISTINCT
			  sdv.value_id
			 ,suom.source_uom_id
			 ,suom1.source_uom_id
		
		 FROM ' + @import_temp_table_name + ' a
		 INNER JOIN static_data_value sdv ON sdv.code = a.conversion_name AND sdv.type_id = 112400 
		 INNER JOIN source_uom suom on suom.uom_id = a.from_uom
		 INNER JOIN source_uom suom1 ON suom1.uom_id = a.to_uom
		 LEFT JOIN conversion_factor cf ON cf.conversion_value_id = sdv.value_id
			 AND cf.from_uom = suom.source_uom_id
			 AND cf.to_uom = suom1.source_uom_id
		 WHERE cf.conversion_factor_id IS NULL'

		EXEC (@sql)
		 --PRINT (@sql)    
		
	--Step 2 Insert data on conversion_factor_detail
	SET @sql ='INSERT INTO conversion_factor_detail(conversion_factor_id,effective_date,Factor,actual_forecast)
	SELECT 
			 cf.conversion_factor_id
			, a.effective_date
			, a.factor
			, CASE  WHEN a.actual = ''y'' THEN ''a'' ELSE ''f'' END
		
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv ON sdv.code = a.conversion_name AND sdv.type_id = 112400 
		INNER JOIN source_uom suom on suom.uom_id = a.from_uom
		INNER JOIN source_uom suom1 ON suom1.uom_id = a.to_uom
		INNER JOIN conversion_factor cf ON cf.conversion_value_id = sdv.value_id
			AND cf.from_uom = suom.source_uom_id
			AND cf.to_uom = suom1.source_uom_id
		LEFT JOIN conversion_factor_detail cfd ON cfd.conversion_factor_id = cf.conversion_factor_id
			AND  ISNULL(cfd.effective_date,'''') = ISNULL(a.effective_date,'''')
		WHERE cfd.conversion_factor_detail_id IS NULL'

		EXEC (@sql)
		--PRINT (@sql)    

	-- Update Case -- 
	 
	-- Step 1: Update value on conversion_factor
		SET @sql = '
		UPDATE cf
		SET conversion_value_id = sdv.value_id
			,from_uom = suom.source_uom_id
			,to_uom = suom1.source_uom_id
	 
		 FROM ' + @import_temp_table_name + ' a
		 INNER JOIN static_data_value sdv ON sdv.code = a.conversion_name AND sdv.type_id = 112400 
		 INNER JOIN source_uom suom on suom.uom_id = a.from_uom
		 INNER JOIN source_uom suom1 ON suom1.uom_id = a.to_uom
		 INNER JOIN conversion_factor cf ON cf.conversion_value_id = sdv.value_id
			 AND cf.from_uom = suom.source_uom_id
			 AND cf.to_uom = suom1.source_uom_id'

		EXEC (@sql)
		--PRINT (@sql) 
  
	-- Step 2: Update value on conversion_factor_detail
		SET @sql = 'UPDATE cfd
		SET conversion_factor_id = cf.conversion_factor_id
			, effective_date = a.effective_date
			, Factor = a.factor
			, actual_forecast = CASE  WHEN a.actual = ''y'' THEN ''a'' ELSE ''f'' END

		FROM ' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv ON sdv.code = a.conversion_name AND sdv.type_id = 112400 
		INNER JOIN source_uom suom on suom.uom_id = a.from_uom
		INNER JOIN source_uom suom1 ON suom1.uom_id = a.to_uom
		INNER JOIN conversion_factor cf ON cf.conversion_value_id = sdv.value_id
			AND cf.from_uom = suom.source_uom_id
			AND cf.to_uom = suom1.source_uom_id
		INNER JOIN conversion_factor_detail cfd ON cfd.conversion_factor_id = cf.conversion_factor_id
			AND  ISNULL(cfd.effective_date,'''') = ISNULL(a.effective_date,'''')'

		EXEC (@sql)
		--PRINT (@sql)
END

IF @table_name = 'ixp_transportation_contract'
BEGIN
	/***update user date to sql date***/
	
	EXEC('UPDATE a
		  SET flow_start_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.flow_start_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET flow_end_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.flow_end_date = dd.user_date
	')
	
		EXEC('UPDATE a
		  SET mdq = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.mdq = dd.user_date
	')
	EXEC ('DELETE ' + @field_compare_table)
 		SET @source_table = @import_temp_table_name
		EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a' 

	IF OBJECT_ID ('tempdb..#contract_group') IS NOT NULL
		DROP TABLE #contract_group

	CREATE TABLE #contract_group (
		[contract_name] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[pipeline_company] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[contract_id] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[flow_start_date] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[flow_end_date] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[rate_schedule] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[mdq] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[type] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[contract_status] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[uom] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[commodity] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[currency] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[block_definition] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[contract_component_template] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[time_zone] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[capacity_release] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[segmentation] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[active] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[mdq_effective_date] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[import_file_name] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[source_system_id] INT,
		[temp_id] INT, 
	)

	EXEC('
		INSERT INTO #contract_group
		SELECT contract_name,
			   pipeline_company,
			   contract_id,
			   flow_start_date,
			   flow_end_date,
			   rate_schedule,
			   mdq,
			   type,
			   contract_status,
			   uom,
			   commodity,
			   currency,
			   block_definition,
			   contract_component_template,
			   time_zone,
			   capacity_release,
			   segmentation,
			   active,
			   mdq_effective_date,
			   import_file_name,
			   source_system_id,
			   temp_id
		FROM ' + @import_temp_table_name
	)

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.currency + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''currency'' 
          ) scm
	LEFT JOIN source_currency sc
		ON sc.currency_name = a.currency			
	WHERE sc.source_currency_id IS NULL	
	')
	
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.pipeline_company + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''pipeline_company'' 
          ) scm
	LEFT JOIN source_counterparty sc
		ON sc.counterparty_name = a.pipeline_company
			AND sc.type_of_entity = -10021
	  WHERE sc.source_counterparty_id IS NULL
		AND NULLIF(a.pipeline_company, '''') IS NOT NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.commodity + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''commodity'' 
          ) scm
	LEFT JOIN source_commodity sc
		ON sc.commodity_name = a.commodity
	WHERE sc.source_commodity_id IS NULL	
		AND NULLIF(a.commodity, '''') IS NOT NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.uom + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''uom'' 
          ) scm
	LEFT JOIN source_uom su
		ON su.uom_name = a.uom
	WHERE su.source_uom_id IS NULL
	')
	--optional field validation
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.rate_schedule + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''rate_schedule'' 
          ) scm
	LEFT JOIN transportation_rate_category trc
		ON trc.code = a.rate_schedule
	WHERE trc.value_id IS NULL
		AND NULLIF(a.rate_schedule, '''') IS NOT NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.contract_status + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''contract_status'' 
          ) scm
	LEFT JOIN static_data_value sdv
		ON sdv.code = a.contract_status
			AND sdv.type_id = 1900
	WHERE sdv.value_id IS NULL
		AND NULLIF(a.contract_status, '''') IS NOT NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.contract_component_template + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''contract_component_template'' 
          ) scm
LEFT JOIN contract_charge_type cct
		ON cct.contract_charge_desc = a.contract_component_template
	WHERE cct.contract_charge_type_id IS NULL	
		AND NULLIF(a.contract_component_template, '''') IS NOT NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.type + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''type'' 
          ) scm
WHERE a.type NOT IN  (''Interruptible Transport'', ''Firm Transport'', ''Storage'')
		AND NULLIF(a.pipeline_company, '''') IS NOT NULL
	')
	
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')

	CREATE TABLE #default_contract_template_data
	(field_id VARCHAR(500), default_value VARCHAR(500))

	INSERT INTO #default_contract_template_data
		SELECT farrms_field_id, autf.default_value FROM 
		application_ui_template_definition autd
		INNER JOIN application_ui_template_fields autf 
		ON autd.application_ui_field_id  = autf.application_ui_field_id
		WHERE application_function_id = 10211400
		AND farrms_field_id IN ('settlement_date','settlement_days','invoice_due_date','payment_days','volume_granularity','contract_email_template')

	
	INSERT INTO contract_group (
		contract_name, pipeline, source_contract_id, flow_start_date, flow_end_date, maintain_rate_schedule, mdq, contract_type, 
		contract_status, volume_uom, commodity, currency, hourly_block, contract_charge_type_id, time_zone, capacity_release, 
		segmentation, is_active, contract_type_def_id, source_system_id
	)
	SELECT t.[contract_name], 
		   sc.source_counterparty_id [pipeline_company], 
		   t.[contract_name] [contract_id], 
		   CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.flow_start_date), 120) [flow_start_date],
		   CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.flow_end_date), 120) [flow_end_date],
		   trc.value_id [transportation_rate_schedule],
		   t.mdq,
		   CASE WHEN t.[type] = 'Firm Transport' THEN 'f'
				WHEN t.[type] = 'Interruptible Transport' THEN 'i'
				WHEN t.[type] = 'Storage' THEN 's'
				ELSE NULL
		   END [type],
		   contract_status.value_id contract_status,
		   su.source_uom_id uom,
		   sco.source_commodity_id commodity,
		   scu.source_currency_id currency,
		   bd.value_id block_definition,
		   cct.contract_charge_type_id contract_component_template,
		   tz.timezone_id time_zone,
		   IIF(t.capacity_release = 'yes', 'y', 'n') capacity_release,
		   IIF(t.segmentation = 'yes', 'y', 'n') segmentation,
		   IIF(t.active = 'yes', 'y', 'n') active,
		   38402 contract_type_def_id, --Transportation Contract
		   t.source_system_id
	FROM #contract_group t
	LEFT JOIN source_counterparty sc
		ON sc.counterparty_name = t.pipeline_company
		AND sc.type_of_entity = -10021
	LEFT JOIN transportation_rate_category trc
		ON trc.code = t.rate_schedule
	LEFT JOIN static_data_value contract_status
		ON contract_status.code = t.contract_status
			AND contract_status.[type_id] = 1900
	LEFT JOIN source_uom su
		ON su.uom_name = t.uom
	LEFT JOIN source_commodity sco
		ON sco.commodity_name = t.commodity
	LEFT JOIN source_currency scu
		ON scu.currency_name = t.currency
	LEFT JOIN static_data_value bd
		ON bd.code = t.block_definition
			AND bd.[type_id] = 10018
	LEFT JOIN contract_charge_type cct
		ON cct.contract_charge_desc = t.contract_component_template
	LEFT JOIN time_zones tz
		ON tz.timezone_name = t.time_zone
	LEFT JOIN contract_group cg
		ON cg.[contract_name] = t.[contract_name]
	WHERE cg.[contract_name] IS NULL
	
	UPDATE cg
	SET cg.pipeline = sc.source_counterparty_id, 
		cg.source_contract_id = t.[contract_name], 
		cg.flow_start_date = CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.flow_start_date), 120),
		cg.flow_end_date = CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.flow_end_date), 120),
		cg.maintain_rate_schedule = trc.value_id,
		cg.mdq = t.mdq,
		cg.contract_type = CASE WHEN t.[type] = 'Firm Transport' THEN 'f'
								WHEN t.[type] = 'Interruptible Transport' THEN 'i'
								WHEN t.[type] = 'Storage' THEN 's'
								ELSE NULL
							END,
		cg.contract_status = contract_status.value_id,
		cg.volume_uom = su.source_uom_id,
		cg.commodity = sco.source_commodity_id,
		cg.currency = scu.source_currency_id,
		cg.hourly_block = bd.value_id,
		cg.contract_charge_type_id = cct.contract_charge_type_id,
		cg.time_zone = tz.timezone_id,
		cg.capacity_release = IIF(t.capacity_release = 'yes', 'y', 'n'),
		cg.segmentation = IIF(t.segmentation = 'yes', 'y', 'n'),
		cg.is_active = IIF(t.active = 'yes', 'y', 'n'),
		cg.contract_type_def_id = 38402,
		cg.source_system_id = t.source_system_id,
		cg.settlement_date = Case when cg.settlement_date IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'settlement_date') ELSE cg.settlement_date END,
		cg.settlement_days = Case when cg.settlement_days IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'settlement_days') ELSE cg.settlement_days END,
		cg.invoice_due_date =  Case when cg.invoice_due_date IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'invoice_due_date') ELSE cg.invoice_due_date END,
		cg.payment_days =  Case when cg.payment_days IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'payment_days') ELSE cg.payment_days END,
		cg.volume_granularity =  Case when cg.volume_granularity IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'volume_granularity') ELSE cg.volume_granularity END,
		cg.contract_email_template =  Case when cg.contract_email_template IS NULL THEN (SELECT default_value FROM #default_contract_template_data WHERE field_id = 'contract_email_template') ELSE cg.contract_email_template END
	FROM #contract_group t
	LEFT JOIN source_counterparty sc
		ON sc.counterparty_name = t.pipeline_company
		AND sc.type_of_entity = -10021
	LEFT JOIN transportation_rate_category trc
		ON trc.code = t.rate_schedule
	LEFT JOIN static_data_value contract_status
		ON contract_status.code = t.contract_status
			AND contract_status.[type_id] = 1900
	LEFT JOIN source_uom su
		ON su.uom_name = t.uom
	LEFT JOIN source_commodity sco
		ON sco.commodity_name = t.commodity
	LEFT JOIN source_currency scu
		ON scu.currency_name = t.currency
	LEFT JOIN static_data_value bd
		ON bd.code = t.block_definition
			AND bd.[type_id] = 10018
	LEFT JOIN contract_charge_type cct
		ON cct.contract_charge_desc = t.contract_component_template
	LEFT JOIN time_zones tz
		ON tz.timezone_name = t.time_zone
	LEFT JOIN contract_group cg
		ON cg.[contract_name] = t.[contract_name]
			AND cg.[contract_name] IS NOT NULL
	
	
		
	INSERT INTO transportation_contract_mdq (contract_id, effective_date, mdq)
	SELECT cg.contract_id, CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.mdq_effective_date), 120) effective_date, t.mdq
	FROM contract_group cg
	INNER JOIN #contract_group t
		ON t.contract_name = cg.contract_name
	LEFT JOIN transportation_contract_mdq tcm
		ON tcm.contract_id = cg.contract_id
			AND CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.mdq_effective_date), 120) = CONVERT(NVARCHAR(10), tcm.effective_date, 120)
	WHERE tcm.contract_id IS NULL
		AND tcm.effective_date IS NULL

	UPDATE tcm
	SET tcm.mdq = t.mdq
	FROM contract_group cg
	INNER JOIN #contract_group t
		ON t.contract_name = cg.contract_name
	LEFT JOIN transportation_contract_mdq tcm
		ON tcm.contract_id = cg.contract_id
			AND CONVERT(NVARCHAR(10), dbo.FNAClientToSqlDate(t.mdq_effective_date), 120) = CONVERT(NVARCHAR(10), tcm.effective_date, 120)
	WHERE tcm.contract_id IS NOT NULL
		AND tcm.effective_date IS NOT NULL
END

-- For Importing data for Storage Asset Group Information
IF @table_name = 'ixp_storage_asset_group_info'
BEGIN

	-- Values for Asset Name cannot be null
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Asset Name cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND (a.asset_name IS NULL)
 		')

	-- Values for Location Name cannot be null
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Location Name cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND (a.location_id IS NULL)
 		')

	-- Invalid Counterparty cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Counterparty Name is Invalid.'',
 				''Invalid Counterparty Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
			WHERE sc.source_counterparty_id IS NULL AND a.counterparty_id IS NOT NULL
	')

	-- Invalid Commodity cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Commodity Name is Invalid.'',
 				''Invalid Commodity Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN source_commodity sc ON sc.commodity_id = a.commodity_id
			WHERE sc.source_commodity_id IS NULL AND a.commodity_id IS NOT NULL
	')

	-- Invalid UOM cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''UOM Name is Invalid.'',
 				''Invalid UOM Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN source_uom su ON su.uom_id = a.uom
			WHERE su.source_uom_id IS NULL AND a.uom IS NOT NULL
	')

	-- Invalid Location cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Location Name not location of Storage type.'',
 				''Invalid Location Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN source_minor_location sml ON sml.location_id = a.location_id
			LEFT JOIN source_major_location smal ON smal.source_major_location_id = sml.source_major_location_id
				AND smal.location_name = ''Storage''
			WHERE smal.source_major_location_ID IS NULL AND a.location_id IS NOT NULL
	')

	-- Invalid Reservoir cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Reservoir Name is Invalid.'',
 				''Invalid Reservoir Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN static_data_value sdv on sdv.code = a.reservoir AND sdv.type_id = 105000
			WHERE sdv.value_id IS NULL AND a.reservoir IS NOT NULL
	')

	-- Invalid Reservoir Type cannot be placed
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Reservoir Type Name is Invalid.'',
 				''Invalid Reservoir Type Name.'',
 				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			LEFT JOIN static_data_value sdv on sdv.code = a.reservoir_type AND sdv.type_id = 105100
			WHERE sdv.value_id IS NULL AND a.reservoir_type IS NOT NULL
	')

	-- delete from temp table all the invalid data
 	EXEC('DELETE '+@import_temp_table_name + '
 			FROM #import_status
 			INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id'
		)
	
	-- Insert Case.

	-- Step 1: Insert value on storage_asset
	SET @sql = 'INSERT INTO storage_asset (asset_name, asset_description, commodity_id, location_id)
				SELECT a.asset_name,
					a.asset_description,
					sc.source_commodity_id,
					sml.source_minor_location_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_commodity sc ON sc.commodity_id = a.commodity_id
				LEFT JOIN source_minor_location sml ON sml.location_name = a.location_id
				WHERE sa.asset_name IS NULL'

	EXEC (@sql)

	-- Step 2: Insert value on storage_asset_capacity
	SET @sql = 'INSERT INTO storage_asset_capacity (storage_asset_id, effective_date, reservoir, reservoir_type, capacity, uom)
				SELECT sa.storage_asset_id,
					CONVERT(DATE, dbo.FNAClientToSqlDate(a.reservoir_effective_date)),
					sdv_r.value_id,
					sdv_rt.value_id,
					a.capacity,
					su.source_uom_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_uom su ON su.uom_id = a.uom
				INNER JOIN static_data_value sdv_rt ON sdv_rt.code = a.reservoir_type
				INNER JOIN static_data_value sdv_r ON sdv_r.code = a.reservoir
				LEFT JOIN storage_asset_capacity sac ON sac.storage_asset_id = sa.storage_asset_id
					AND sac.effective_date = CONVERT(DATE, dbo.FNAClientToSqlDate(a.reservoir_effective_date))
					AND sac.reservoir = sdv_r.value_id
					AND sac.reservoir_type = sdv_rt.value_id
					AND sac.uom = su.source_uom_id
				WHERE sac.storage_asset_capacity_id IS NULL
				'

	EXEC (@sql)
	
	-- Step 3: Insert value on storage_asset_owner
	SET @sql = 'INSERT INTO storage_asset_owner (storage_asset_id, effective_date, counterparty_id, percentage)
				SELECT sa.storage_asset_id,
					CONVERT(DATE, dbo.FNAClientToSqlDate(a.counterparty_effective_date)),
					sc.source_counterparty_id,
					a.[percentage]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
				LEFT JOIN storage_asset_owner sao on sao.storage_asset_id = sa.storage_asset_id
					AND CONVERT(DATE, dbo.FNAClientToSqlDate(a.counterparty_effective_date)) = sao.effective_date
					AND sc.source_counterparty_id = sao.counterparty_id
				WHERE sao.storage_asset_owner_id IS NULL'

	EXEC (@sql)

	-- Update Case.

	-- Step 1: Update value on storage_asset
	SET @sql = 'UPDATE sa
				SET asset_description = a.asset_description,
					commodity_id = sc.source_commodity_id,
					location_id = sml.source_minor_location_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_commodity sc ON sc.commodity_id = a.commodity_id
				LEFT JOIN source_minor_location sml ON sml.location_name = a.location_id
				WHERE sa.storage_asset_id IS NOT NULL
		'

	EXEC (@sql)

	-- Step 2: Update value on storage_asset_capacity
	SET @sql = 'UPDATE sac
				SET capacity = a.capacity
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_uom su ON su.uom_id = a.uom
				INNER JOIN static_data_value sdv_rt ON sdv_rt.code = a.reservoir_type
				INNER JOIN static_data_value sdv_r ON sdv_r.code = a.reservoir
				LEFT JOIN storage_asset_capacity sac ON sac.storage_asset_id = sa.storage_asset_id
					AND sac.effective_date = CONVERT(DATE, dbo.FNAClientToSqlDate(a.reservoir_effective_date))
					AND sac.reservoir = sdv_r.value_id
					AND sac.reservoir_type = sdv_rt.value_id
					AND sac.uom = su.source_uom_id
				WHERE sac.storage_asset_capacity_id IS NOT NULL
		'

	EXEC (@sql)

	-- Step 3: Update value on storage_asset_owner
	SET @sql = 'UPDATE sao
				SET [percentage] = a.percentage
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN storage_asset sa ON sa.asset_name = a.asset_name
				LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
				LEFT JOIN storage_asset_owner sao on sao.storage_asset_id = sa.storage_asset_id
					AND CONVERT(DATE, dbo.FNAClientToSqlDate(a.counterparty_effective_date)) = sao.effective_date
					AND sc.source_counterparty_id = sao.counterparty_id
				WHERE sao.storage_asset_owner_id IS NOT NULL
		'

	EXEC (@sql)
END

IF @table_name = 'ixp_book_structure'
BEGIN
	DECLARE @xml_text_sub NVARCHAR(MAX), @xml_text_stra NVARCHAR(MAX), @xml_text_book NVARCHAR(MAX), @xml_text NVARCHAR(MAX)

	IF OBJECT_ID ('tempdb..#book_structure') IS NOT NULL
		DROP TABLE #book_structure

	CREATE TABLE #book_structure (
		temp_id INT IDENTITY(1, 1),
		subsidiary NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		strategy NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		book NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[sub book] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		currency NVARCHAR(100) COLLATE DATABASE_DEFAULT
	)

	EXEC ('
		INSERT INTO #book_structure
		SELECT subsidiary,
			   ISNULL(strategy, subsidiary),
			   COALESCE(book, strategy, subsidiary),
			   COALESCE([sub book], book, strategy, subsidiary),
			   currency
		FROM ' + @import_temp_table_name + '
	')
	
	IF EXISTS(SELECT 1 FROM #book_structure GROUP BY [sub book] HAVING COUNT(1) > 1)
	BEGIN
		EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		SELECT DISTINCT a.temp_id,
 				''' + @process_id + ''',
 				''Error'',
 				''Import Data'',
 				''' + @table_name + ''',
 				''Data Error'',
 				N''Multiple Sub Books of same <b>'' + a.[Sub Book] + ''</b>'',
 				''Please check your Data'',
 				a.import_file_name
 		FROM ' + @import_temp_table_name + ' a		
		
	')
	END	

	--Check for duplicate book structure
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		SELECT DISTINCT a.temp_id,
 				''' + @process_id + ''',
 				''Error'',
 				''Import Data'',
 				''' + @table_name + ''',
 				''Data Error'',
 				N''The Book Structure <b>['' + sub.entity_name + '' || '' + stra.entity_name + '' || '' + book.entity_name + '' || '' + ssbm.logical_name + '']</b> already exists'',
 				''Please check your Data'',
 				a.import_file_name
 		FROM ' + @import_temp_table_name + ' a		
		INNER JOIN portfolio_hierarchy sub
			ON sub.entity_name = a.subsidiary
				AND sub.hierarchy_level = 2
		INNER JOIN portfolio_hierarchy stra
			ON stra.entity_name = a.strategy
				AND stra.hierarchy_level = 1
		INNER JOIN portfolio_hierarchy book
			ON book.entity_name = a.strategy
				AND book.hierarchy_level = 0
		INNER JOIN source_system_book_map ssbm
			ON ssbm.logical_name = a.[sub book]
	')
		
	SELECT @xml_text_sub = ISNULL(@xml_text_sub, '') + IIF(sub.entity_name IS NULL, '<GridRow entity_name="' + ISNULL(Subsidiary, '') + '" entity_id="" node_level="4" parent_id="1"/>', '')
	FROM (SELECT DISTINCT subsidiary FROM #book_structure) bs
	LEFT JOIN portfolio_hierarchy sub
		ON sub.entity_name = bs.Subsidiary 
			AND sub.hierarchy_level = 2

	SET @xml_text_sub = '<GridRowSubsidiary>' + @xml_text_sub + '</GridRowSubsidiary>'

	SELECT @xml_text_stra = ISNULL(@xml_text_stra, '') + IIF(stra.entity_name IS NULL, '<GridRow entity_name="' + ISNULL(Strategy, '') + '" entity_id="' + ISNULL(IIF(sub.entity_name IS NULL, CAST(stra.entity_id AS NVARCHAR(10)), ''), '') + '" node_level="" parent_id="' + IIF(sub.entity_name IS NULL, ISNULL(Subsidiary, ''), CAST(sub.entity_id AS NVARCHAR(10))) + '"/>', '')	
	FROM (SELECT DISTINCT subsidiary, strategy FROM #book_structure) bs
	LEFT JOIN portfolio_hierarchy sub
		ON sub.entity_name = bs.Subsidiary 
			AND sub.hierarchy_level = 2
	LEFT JOIN portfolio_hierarchy stra
		ON stra.entity_name = bs.Strategy 
			AND stra.hierarchy_level = 1
			AND stra.parent_entity_id = sub.entity_id

	SET @xml_text_stra = '<GridRowStrategy>' + @xml_text_stra + '</GridRowStrategy>'

	SELECT @xml_text_book = ISNULL(@xml_text_book, '') + IIF(book.entity_name IS NULL, '<GridRow entity_name="' + ISNULL(Book, '') + '" entity_id="' + ISNULL(IIF(sub.entity_name IS NULL, CAST(book.entity_id AS NVARCHAR(10)), ''), '') + '" parent_id="' + IIF(stra.entity_name IS NULL, ISNULL(Strategy, ''), CAST(stra.entity_id AS NVARCHAR(10))) + '" parent_stra_id="' + IIF(stra.entity_name IS NULL, ISNULL(Strategy, ''), CAST(stra.entity_id AS NVARCHAR(10))) + '" parent_sub_id="' + IIF(sub.entity_name IS NULL, ISNULL(Subsidiary, ''), CAST(sub.entity_id AS NVARCHAR(10))) + '"/>', '')
	FROM (SELECT DISTINCT subsidiary, strategy, book FROM #book_structure) bs
	LEFT JOIN portfolio_hierarchy sub
		ON sub.entity_name = bs.Subsidiary 
			AND sub.hierarchy_level = 2
	LEFT JOIN portfolio_hierarchy stra
		ON stra.entity_name = bs.Strategy 
			AND stra.hierarchy_level = 1
			AND stra.parent_entity_id = sub.entity_id
	LEFT JOIN portfolio_hierarchy book
		ON book.entity_name = bs.Book
			AND book.hierarchy_level = 0
			AND book.parent_entity_id = stra.entity_id

	SET @xml_text_book = '<GridRowBook>' + @xml_text_book + '</GridRowBook>'

	SELECT @xml_text = ISNULL(@xml_text, '') + IIF (ssbm.logical_name IS NULL, '<GridRow entity_name="' + ISNULL([Sub Book], '') +'" entity_id="' + ISNULL(IIF(sub.entity_name IS NULL, CAST(ssbm.book_deal_type_map_id AS NVARCHAR(10)), ''), '') + '" parent_id="' + IIF(book.entity_name IS NULL, ISNULL(Book, ''), CAST(book.entity_id AS NVARCHAR(10))) + '" parent_stra_id="' + IIF(stra.entity_name IS NULL, ISNULL(Strategy, ''), CAST(stra.entity_id AS NVARCHAR(10))) + '" parent_sub_id="' + IIF(sub.entity_name IS NULL, ISNULL(Subsidiary, ''), CAST(sub.entity_id AS NVARCHAR(10))) + '"/>', '')
	FROM (SELECT DISTINCT subsidiary, strategy, book, [sub book] FROM #book_structure) bs
	LEFT JOIN portfolio_hierarchy sub
		ON sub.entity_name = bs.Subsidiary 
			AND sub.hierarchy_level = 2
	LEFT JOIN portfolio_hierarchy stra
		ON stra.entity_name = bs.Strategy 
			AND stra.hierarchy_level = 1
			AND stra.parent_entity_id = sub.entity_id
	LEFT JOIN portfolio_hierarchy book
		ON book.entity_name = bs.Book
			AND book.hierarchy_level = 0
			AND book.parent_entity_id = stra.entity_id
	LEFT JOIN source_system_book_map ssbm
		ON ssbm.logical_name = bs.[Sub Book]
			AND ssbm.fas_book_id = book.[entity_id]

	SET @xml_text = '<GridRowSubBook>' + @xml_text + '</GridRowSubBook>'

	
	SELECT @xml_text = REPlACE('
		<Root function_id="10101200">
			<GridRowCom>
				<GridRow entity_name="' + a.entity_name + '" entity_id="1"></GridRow>
			</GridRowCom>
			' + @xml_text_sub + @xml_text_stra + @xml_text_book + @xml_text + '
			</Root>', '&', '&amp;')
	FROM portfolio_hierarchy  a
	WHERE [entity_id] = -1

	EXEC spa_setup_simple_book_structure @flag = 'i', @xml = @xml_text, @error_message = @error_msg OUTPUT
	
	IF @error_msg <> 'Success'
	BEGIN
		EXEC ('
			INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			SELECT TOP 1 a.temp_id,
 					''' + @process_id + ''',
 					''Error'',
 					''Import Data'',
 					''' + @table_name + ''',
 					''Data Error'',
 					N''' + @error_msg + ''',
 					''Please check your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a'
		)
	END
	
	UPDATE fs
	SET fs.func_cur_value_id = sc.source_currency_id 
	FROM #book_structure bs 
	INNER JOIN source_currency sc 
		ON bs.currency = sc.currency_name
	INNER JOIN portfolio_hierarchy ph
		ON ph.[entity_name] = bs.subsidiary
			AND ph.hierarchy_level = 2
	INNER JOIN fas_subsidiaries fs
		ON fs.fas_subsidiary_id = ph.[entity_id]

	UPDATE fs
	SET fs.fun_cur_value_id = sc.source_currency_id 
	FROM #book_structure bs 
	INNER JOIN source_currency sc 
		ON bs.currency = sc.currency_name
	INNER JOIN portfolio_hierarchy ph
		ON ph.[entity_name] = bs.strategy
			AND ph.hierarchy_level = 1
	INNER JOIN fas_strategy fs
		ON fs.fas_strategy_id = ph.[entity_id]

	UPDATE fb
	SET fb.fun_cur_value_id = sc.source_currency_id 
	FROM #book_structure bs 
	INNER JOIN source_currency sc 
		ON bs.currency = sc.currency_name
	INNER JOIN portfolio_hierarchy ph
		ON ph.[entity_name] = bs.Book
			AND ph.hierarchy_level = 0
	INNER JOIN fas_books fb
		ON fb.fas_book_id = ph.[entity_id]
END

-- For Importing data for Setup Netting Group
IF @table_name = 'ixp_netting_group'
BEGIN
	/***update user date to sql date***/
				
	EXEC('UPDATE a
		  SET effective_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.effective_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET end_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.end_date = dd.user_date
	')
	--/***END OF date update***/
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''source_counterparty_id'', ''b.counterparty_id = a.source_counterparty_id'', ''e''),  --error rows
			(''source_legal_entity'', ''legal_entity'', ''b.legal_entity_id = a.legal_entity'', ''w''), 
			(''portfolio_hierarchy'', ''fas_subsidiary_id'', ''b.entity_name = a.fas_subsidiary_id'', ''w''),
			(''source_commodity'', ''source_commodity_id'', ''b.commodity_id = a.source_commodity_id'', ''w''),
			(''source_deal_type'', ''source_deal_type_id'', ''b.deal_type_id = a.source_deal_type_id'', ''w''),
			(''static_data_value'', ''hedge_type_value_id'', ''b.code = a.hedge_type_value_id AND b.type_id = 150'', ''w''),
			(''contract_group'', ''source_contract_id'', ''b.contract_name = a.source_contract_id'', ''w''), --Child_Contract Name
			(''gl_system_mapping'', ''gl_number_id_st_asset'', ''a.gl_number_id_st_asset = CONCAT(CONCAT(b.gl_account_name, ''''('''') , CONCAT(b.gl_account_number, '''')''''))'', ''w''),
			(''gl_system_mapping'', ''gl_number_id_st_liab'', ''a.gl_number_id_st_liab = CONCAT(CONCAT(b.gl_account_name, ''''('''') , CONCAT(b.gl_account_number, '''')''''))'', ''w''),
			(''gl_system_mapping'', ''gl_number_id_lt_asset'', ''a.gl_number_id_lt_asset = CONCAT(CONCAT(b.gl_account_name, ''''('''') , CONCAT(b.gl_account_number, '''')''''))'', ''w''),
			(''gl_system_mapping'', ''gl_number_id_lt_liab'', ''a.gl_number_id_lt_liab = CONCAT(CONCAT(b.gl_account_name, ''''('''') , CONCAT(b.gl_account_number, '''')''''))'', ''w'')
		')
	
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Validation for empty value for Parent Name, Child Name, Child Effective Date, Netting Counterparty, Parent legal entity
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10001,
			''
				{
					"column_name": "'' + CASE 
						WHEN a.netting_parent_group_name IS NULL THEN ''Parent Name''
						WHEN a.netting_group_name IS NULL THEN ''Child Name''
						WHEN a.effective_date IS NULL THEN ''Child Effective Date''
						WHEN a.is_active IS NULL THEN ''Parent Is Active''
					END + ''"
				}
			'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
 	    WHERE (a.netting_parent_group_name) IS NULL 
			OR (a.netting_group_name) IS NULL 
			OR (a.effective_date) IS NULL
			OR a.is_active IS NULL		
	')

	-- Validation for non-existent static values
    EXEC ('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
        SELECT
			a.temp_id,
			10002,
			''
				{
					"column_name": "Parent Is Active",
					"column_value": "'' + a.is_active + ''"
				}
			'',
            a.import_file_name
        FROM
        ' + @import_temp_table_name + ' a
        WHERE a.is_active NOT IN (''yes'', ''no'')
	')

	EXEC ('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT
			a.temp_id,
			10013,
			''
				{
					"column_name": "Child Type",
					"column_value": "'' + a.physical_financial_flag + ''"
				}
			'',
            a.import_file_name
        FROM
        ' + @import_temp_table_name + ' a
        WHERE a.physical_financial_flag NOT IN (''Financial'', ''Physical'', ''Both'')
    ')

	-- Date Validation
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
			10004,
			''
				{
					"column_name": "Child Effective Date",
					"column_value": "'' + a.effective_date + ''"
				}
			'',
		a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id          
		WHERE #error_status.temp_id IS NULL
			AND ISDATE(a.effective_date) = 0
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "Child End Date",
					"column_value": "'' + a.end_date + ''"
				}
			'',
		a.import_file_name
 		FROM ' + @import_temp_table_name + ' a 	                
 		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id          
		WHERE NULLIF(end_date, '''') IS NOT NULL
			AND ISDATE(a.end_date) = 0
	')
	
	EXEC('
		UPDATE ' + @import_temp_table_name + '
		SET end_date = NULL
		WHERE ISDATE(end_date) = 0	
	')
	
 	EXEC('
		DELETE ' + @import_temp_table_name + '
 	    FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a
			ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt
			ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	-- Update case OF First Case on netting_group_parent
	SET @sql = 'UPDATE ngp 
				SET --netting_parent_group_name = a.netting_parent_group_name,
					active = 
					CASE 
						WHEN a.is_active = ''Yes'' THEN ''y'' WHEN a.is_active = ''y'' THEN ''y'' 
						WHEN a.is_active = ''No'' THEN ''n''  WHEN a.is_active = ''n'' THEN ''n''
					END,
					legal_entity = sle.source_legal_entity_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN source_legal_entity sle ON a.legal_entity = sle.legal_entity_id
				WHERE ngp.netting_parent_group_id IS NOT NULL'
	EXEC (@sql)

	-- Firstly, we need to add data on netting_group_parent... [for insert case]
	SET @sql = 'INSERT INTO netting_group_parent (netting_parent_group_name, active, legal_entity)
				SELECT DISTINCT a.netting_parent_group_name,
					CASE 
						WHEN a.is_active = ''Yes'' THEN ''y'' WHEN a.is_active = ''y'' THEN ''y''
						WHEN a.is_active = ''No'' THEN ''n''  WHEN a.is_active = ''n'' THEN ''n'' 
					END,
					sle.source_legal_entity_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN source_legal_entity sle ON a.legal_entity = sle.legal_entity_id
				WHERE ngp.netting_parent_group_id IS NULL'	
	EXEC (@sql)
	
	-- Update case OF Second Case on netting_group_parent_subsidiary
	SET @sql = 'UPDATE ngps
				SET netting_parent_group_id = ngp.netting_parent_group_id,
					fas_subsidiary_id = fs.fas_subsidiary_id 
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.fas_subsidiary_id
				INNER JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
				LEFT JOIN netting_group_parent_subsidiary ngps 
					ON ngps.netting_parent_group_id = ngp.netting_parent_group_id
					AND ngps.fas_subsidiary_id = fs.fas_subsidiary_id
				WHERE ngps.netting_parent_group_id IS NOT NULL'
	EXEC (@sql)

	-- Secondly, we need to add data on netting_group_parent_subsidiary
	SET @sql = 'INSERT INTO netting_group_parent_subsidiary (netting_parent_group_id, fas_subsidiary_id)
				SELECT ngp.netting_parent_group_id, 
					fs.fas_subsidiary_id 
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.fas_subsidiary_id
				INNER JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
				LEFT JOIN netting_group_parent_subsidiary ngps 
					ON ngps.netting_parent_group_id = ngp.netting_parent_group_id
					AND ngps.fas_subsidiary_id = fs.fas_subsidiary_id
				WHERE ngps.netting_parent_group_id IS NULL
				GROUP BY ngp.netting_parent_group_id, fs.fas_subsidiary_id 
				'
	EXEC (@sql)

	-- Update case OF Third Case on netting_group
	SET @sql = 'UPDATE ng
				SET netting_parent_group_id = ngp.netting_parent_group_id, 
					netting_group_name = a.netting_group_name, 
					effective_date = a.effective_date, 
					end_date = a.end_date,
					source_commodity_id = sc.source_commodity_id,
					physical_financial_flag = CASE WHEN a.physical_financial_flag = ''Physical'' THEN ''p'' WHEN a.physical_financial_flag = ''Financial'' THEN ''f'' WHEN a.physical_financial_flag = ''Both'' THEN ''b'' ELSE NULL END,
					source_deal_type_id = sdt.source_deal_type_id, 
					hedge_type_value_id = sdv1.value_id, 
					source_system_id = a.source_system_id--, 
					--legal_entity = a.legal_entity
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				INNER JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				INNER JOIN source_commodity sc ON sc.commodity_id = a.source_commodity_id
				INNER JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				INNER JOIN netting_group ng ON ng.netting_parent_group_id = ngp.netting_parent_group_id AND ng.netting_group_name = a.netting_group_name
				WHERE ng.netting_group_id IS NOT NULL'
	EXEC (@sql)

	-- Thirdly, we need to add data on netting_group
	SET @sql = 'INSERT INTO netting_group (
					 netting_parent_group_id
					, netting_group_name
					, effective_date
					, end_date
					, source_commodity_id
					, physical_financial_flag
					, source_deal_type_id
					, hedge_type_value_id
					, source_system_id
					--, legal_entity
				)
				SELECT DISTINCT ngp.netting_parent_group_id, 
					a.netting_group_name, 
					a.effective_date, 
					a.end_date, 
					sc.source_commodity_id,
					CASE WHEN a.physical_financial_flag = ''Physical'' THEN ''p'' WHEN a.physical_financial_flag = ''Financial'' THEN ''f'' WHEN a.physical_financial_flag = ''Both'' THEN ''b'' ELSE NULL END,
					sdt.source_deal_type_id, 
					sdv1.value_id, 
					a.source_system_id--, 
					--a.legal_entity
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				LEFT JOIN source_commodity sc ON sc.commodity_id = a.source_commodity_id
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				LEFT JOIN netting_group ng ON ng.netting_parent_group_id = ngp.netting_parent_group_id
				WHERE ng.netting_group_id IS NULL AND ngp.netting_parent_group_id IS NOT NULL'
	EXEC (@sql)

	-- Update case OF Fourth Case on netting_group_detail
	SET @sql = 'UPDATE ngd
				SET netting_group_id = ng.netting_group_id, 
					source_counterparty_id = sc.source_counterparty_id, 
					gl_number_id_st_asset = gsm1.gl_number_id, 
					gl_number_id_st_liab = gsm2.gl_number_id, 
					gl_number_id_lt_asset = gsm3.gl_number_id, 
					gl_number_id_lt_liab = gsm4.gl_number_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN source_counterparty sc ON sc.counterparty_id = a.source_counterparty_id
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				INNER JOIN netting_group ng ON ng.netting_parent_group_id = ngp.netting_parent_group_id AND ng.netting_group_name = a.netting_group_name
				INNER JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				INNER JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				INNER JOIN gl_system_mapping gsm1 ON a.gl_number_id_st_asset = CONCAT(CONCAT(gsm1.gl_account_name, ''('') , CONCAT(gsm1.gl_account_number, '')''))
				INNER JOIN gl_system_mapping gsm2 ON a.gl_number_id_st_liab = CONCAT(CONCAT(gsm2.gl_account_name, ''('') , CONCAT(gsm2.gl_account_number, '')''))
				INNER JOIN gl_system_mapping gsm3 ON a.gl_number_id_lt_asset = CONCAT(CONCAT(gsm3.gl_account_name, ''('') , CONCAT(gsm3.gl_account_number, '')''))
				INNER JOIN gl_system_mapping gsm4 ON a.gl_number_id_lt_liab = CONCAT(CONCAT(gsm4.gl_account_name, ''('') , CONCAT(gsm4.gl_account_number, '')''))
				LEFT JOIN netting_group_detail ngd 
					ON ngd.netting_group_id = ng.netting_group_id
					AND ngd.source_counterparty_id = sc.source_counterparty_id
				WHERE ng.netting_group_id IS NOT NULL AND ngd.netting_group_detail_id IS NOT NULL'
	EXEC (@sql)

	-- Fourth, we need to add data on netting_group_detail
	SET @sql = 'INSERT INTO netting_group_detail (
					netting_group_id
					, source_counterparty_id
					, gl_number_id_st_asset
					, gl_number_id_st_liab
					, gl_number_id_lt_asset
					, gl_number_id_lt_liab
				)
				SELECT ng.netting_group_id, 
					sc.source_counterparty_id, 
					gsm1.gl_number_id, 
					gsm2.gl_number_id, 
					gsm3.gl_number_id, 
					gsm4.gl_number_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.source_counterparty_id
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN netting_group ng ON ng.netting_parent_group_id = ngp.netting_parent_group_id AND ng.netting_group_name = a.netting_group_name
				LEFT JOIN netting_group_detail ngd 
					ON ngd.netting_group_id = ng.netting_group_id
					AND ngd.source_counterparty_id = sc.source_counterparty_id
				LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				LEFT JOIN gl_system_mapping gsm1 ON a.gl_number_id_st_asset = CONCAT(CONCAT(gsm1.gl_account_name, ''('') , CONCAT(gsm1.gl_account_number, '')''))
				LEFT JOIN gl_system_mapping gsm2 ON a.gl_number_id_st_liab = CONCAT(CONCAT(gsm2.gl_account_name, ''('') , CONCAT(gsm2.gl_account_number, '')''))
				LEFT JOIN gl_system_mapping gsm3 ON a.gl_number_id_lt_asset = CONCAT(CONCAT(gsm3.gl_account_name, ''('') , CONCAT(gsm3.gl_account_number, '')''))
				LEFT JOIN gl_system_mapping gsm4 ON a.gl_number_id_lt_liab = CONCAT(CONCAT(gsm4.gl_account_name, ''('') , CONCAT(gsm4.gl_account_number, '')''))
				WHERE ng.netting_group_id IS NOT NULL AND ngd.netting_group_detail_id IS NULL
				GROUP BY ng.netting_group_id, sc.source_counterparty_id, gsm1.gl_number_id, gsm2.gl_number_id, gsm3.gl_number_id, gsm4.gl_number_id
				'
	EXEC (@sql)

	-- Update case OF Fifth Case on netting_group_detail_contract
	SET @sql = 'UPDATE ngdc
				SET netting_group_detail_id = ng.netting_group_id,
					source_contract_id = cg.contract_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				INNER JOIN netting_group ng 
					ON ng.netting_parent_group_id = ngp.netting_parent_group_id
					AND ng.netting_group_name = a.netting_group_name
				INNER JOIN netting_group_detail ngd ON ngd.netting_group_id = ng.netting_group_id
				INNER JOIN contract_group cg ON cg.contract_name = a.source_contract_id
				INNER JOIN netting_group_detail_contract ngdc 
					ON ngdc.netting_group_detail_id = ng.netting_group_id
					AND ngdc.source_contract_id = cg.contract_id
				INNER JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.fas_subsidiary_id
				INNER JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
				INNER JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				WHERE ngd.netting_group_id IS NOT NULL AND ngdc.netting_contract_id IS NOT NULL'
	EXEC (@sql)

	-- Fifth, we need to add data on netting_group_detail_contract
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO netting_group_detail_contract (netting_group_detail_id, source_contract_id)
				SELECT ng.netting_group_id, 
					cg.contract_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_name
				LEFT JOIN netting_group ng 
					ON ng.netting_parent_group_id = ngp.netting_parent_group_id 
					AND ng.netting_group_name = a.netting_group_name
				LEFT JOIN netting_group_detail ngd ON ngd.netting_group_id = ng.netting_group_id
				LEFT JOIN contract_group cg ON cg.contract_name = a.source_contract_id
				LEFT JOIN netting_group_detail_contract ngdc 
					ON ngdc.netting_group_detail_id = ng.netting_group_id
					AND ngdc.source_contract_id = cg.contract_id
				LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id
				LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.fas_subsidiary_id
				INNER JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.hedge_type_value_id
				WHERE ngd.netting_group_id IS NOT NULL AND ngdc.netting_contract_id IS NULL
				GROUP BY ng.netting_group_id, cg.contract_id
				'
	EXEC (@sql)	
	
END
-- For Importing data for Setup Hedging Relationship Type
IF @table_name = 'ixp_hedge_relationship_type'
BEGIN
	
	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type'', ''effective_start_date'', ''effective_start_date'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type'', ''effective_end_date'', ''effective_end_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type'', ''init_number_of_curve_points'', ''init_number_of_curve_points'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type'', ''on_number_of_curve_points'', ''on_number_of_curve_points'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type'', ''hedge_to_item_conv_factor'', ''hedge_to_item_conv_factor'')')	
 	
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM ' + @import_temp_table_name + '
 	      WHERE  effective_start_date IS NULL
 	             AND effective_end_date IS NULL
 	             AND init_number_of_curve_points IS NULL
 	             AND on_number_of_curve_points IS NULL
				 AND hedge_to_item_conv_factor IS NULL')

 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name

	--Validation for empty value for Subsidiary, Strategy, Book, Name, Effective Start Date, Matching Type, IN_Assessment Approach, Measurement Eff Test Approach, ON_Assessment Approach,
	--Hedge Assessment Pricing Option and Item Assessment Pricing Option, IN_Assessment Curve Type, IN_Curve Source, IN_Number of Price Points, ON_Assessment Curve Type, ON_Curve Source, 
	--ON_Number of Price Points, Hedge Total Fixed Price Based On, Hedge To Item Volume Conversion Factor, Hedge Item Pricing Type, Counterparty, Trader, Curve Source
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Missing Value'',
				 CASE 
					 WHEN a.subsidiary IS NULL THEN
					  	  ''Required value missing for column : subsidiary''
					 WHEN a.strategy IS NULL THEN
					  	  ''Required value missing for column : Strategy''
					 WHEN a.book IS NULL THEN
					  	  ''Required value missing for column : Book''
					 WHEN a.eff_test_name IS NULL THEN
					  	  ''Required value missing for column : Name''
					 WHEN a.effective_start_date IS NULL THEN
					  	  ''Required value missing for column : Effective Start Date''
					 WHEN a.matching_type IS NULL THEN
					  	  ''Required value missing for column : Matching Type''
					 WHEN a.init_eff_test_approach_value_id IS NULL THEN
					  	  ''Required value missing for column : IN_Assessment Approach''
					 WHEN a.mstm_eff_test_type_id IS NULL THEN
					  	  ''Required value missing for column : Measurement Eff Test Approach''
					 WHEN a.on_eff_test_approach_value_id IS NULL THEN
					  	  ''Required value missing for column : ON_Assessment Approach''
					 WHEN a.hedge_test_price_option_value_id IS NULL THEN
					  	  ''Required value missing for column : Hedge Assessment Pricing Option''
					 WHEN a.item_test_price_option_value_id IS NULL THEN
				 	  ''Required value missing for column : Item Assessment Pricing Option''
					 WHEN a.hedge_fixed_price_value_id IS NULL THEN
					 	  ''Required value missing for column : Hedge Total Fixed Price Based On''
					 WHEN a.hedge_to_item_conv_factor IS NULL THEN
					 	  ''Required value missing for column : Hedge To Item Volume Conversion Factor''
					 WHEN a.item_pricing_value_id IS NULL THEN
					 	  ''Required value missing for column : Hedge Item Pricing Type''
					 WHEN a.item_counterparty_id IS NULL THEN
					 	  ''Required value missing for column : Counterparty''
					 WHEN a.item_trader_id IS NULL THEN
					 	  ''Required value missing for column : Trader''
					 WHEN a.gen_curve_source_value_id IS NULL THEN
					 	 ''Required value missing for column : Curve Source''
					 WHEN a.init_assmt_curve_type_value_id IS NULL THEN
						 ''Required value missing for column : IN_Assessment Curve Type''
					 WHEN a.init_curve_source_value_id IS NULL THEN
						 ''Required value missing for column : IN_Curve Source''
					 WHEN a.init_number_of_curve_points IS NULL THEN
					 	 ''Required value missing for column : IN_Number of Price Points''
					 WHEN a.on_assmt_curve_type_value_id IS NULL THEN
						 ''Required value missing for column : ON_Assessment Curve Type''
					 WHEN a.on_curve_source_value_id IS NULL THEN
						 ''Required value missing for column : ON_Curve Source''
					 WHEN a.on_number_of_curve_points IS NULL THEN
					 	 ''Required value missing for column : ON_Number of Price Points''
				 END,
				 ''Please check your Data'',
 				 a.import_file_name
       FROM   '+ @import_temp_table_name + ' a
 	   WHERE (a.subsidiary IS NULL) OR
				(a.strategy IS NULL) OR
				(a.book IS NULL) OR
				(a.eff_test_name IS NULL) OR
				(a.effective_start_date IS NULL) OR
				(a.matching_type IS NULL) OR
				(a.init_eff_test_approach_value_id IS NULL) OR
				(a.mstm_eff_test_type_id IS NULL) OR
				(a.on_eff_test_approach_value_id IS NULL) OR
				(a.hedge_test_price_option_value_id IS NULL) OR
				(a.item_test_price_option_value_id IS NULL) OR				
				(a.init_assmt_curve_type_value_id IS NULL) OR
				(a.init_curve_source_value_id IS NULL) OR
				(a.init_number_of_curve_points IS NULL) OR
				(a.on_assmt_curve_type_value_id IS NULL) OR
				(a.on_curve_source_value_id IS NULL) OR
				(a.on_number_of_curve_points IS NULL) OR
				(a.hedge_fixed_price_value_id IS NULL) OR
				(a.hedge_to_item_conv_factor IS NULL) OR 
				(a.item_pricing_value_id IS NULL) OR
				(a.item_counterparty_id IS NULL) OR
				(a.item_trader_id IS NULL) OR
				(a.gen_curve_source_value_id IS NULL)
	')
	
	--Check combination of book in system.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Combination of Subsidiary/Strategy/Book ('' + ISNULL(a.subsidiary, ''NULL'') + ''/'' + ISNULL(a.strategy, ''NULL'') + ''/'' + ISNULL(a.book, ''NULL'') + '') does not exist in the system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 			  LEFT JOIN portfolio_hierarchy sub ON sub.entity_name = a.subsidiary AND sub.hierarchy_level = 2
			  LEFT JOIN portfolio_hierarchy stra ON sub.entity_id = stra.parent_entity_id AND stra.entity_name = a.strategy AND stra.hierarchy_level = 1
			  LEFT JOIN portfolio_hierarchy book ON stra.entity_id = book.parent_entity_id AND book.entity_name = a.book AND book.hierarchy_level = 0
 			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND book.entity_id IS NULL
 	')
	--Check Duplicate DAta.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Repetition'',
 				 '' Data repetition found for column : Name, value: a.eff_test_name, No of times: CAST(b.notimes AS NVARCHAR).'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
                   SELECT eff_test_name, COUNT(1) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY eff_test_name
                   HAVING COUNT(1) > 1
 			  ) b
 		  ON  a.eff_test_name = b.eff_test_name
		  LEFT JOIN #import_status ON #import_status.temp_id = a.temp_id
 		  WHERE #import_status.temp_id IS NULL')
		  	
	---- Log Message for Dependent Data Missing(matching_type)
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	--	  SELECT a.temp_id,
 --				 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Dependent Data Missing'',
	--			 CASE 
	--				WHEN a.hedge_fixed_price_value_id IS NULL THEN
	--					 ''Data ('' + a.hedge_fixed_price_value_id + '') in Column: ''''Hedge Total Fixed Price Based'''' on depends on column: ''''Matching Type''''.''
	--				WHEN a.hedge_to_item_conv_factor IS NULL THEN
	--					 ''Data ('' + a.hedge_to_item_conv_factor + '') in Column: ''''Hedge To Item Volume Conversion Factor'''' on depends on column: ''''Matching Type''''.''
	--				WHEN a.item_pricing_value_id IS NULL THEN
	--					 ''Data ('' + a.item_pricing_value_id + '') in Column: ''''Hedge Item Pricing Type'''' on depends on column: ''''Matching Type''''.''
	--				WHEN a.item_counterparty_id IS NULL THEN
	--					 ''Data ('' + a.item_counterparty_id + '') in Column: ''''Counterparty'''' on depends on column: ''''Matching Type''''.''
	--				WHEN a.item_trader_id IS NULL THEN
	--					 ''Data ('' + a.item_trader_id + '') in Column: ''''Trader'''' on depends on column: ''''Matching Type''''.''
	--				WHEN a.gen_curve_source_value_id IS NULL THEN
	--					 ''Data ('' + a.gen_curve_source_value_id + '') in Column: ''''Curve Source'''' on depends on column: ''''Matching Type''''.''
	--			 END,
	--			 ''Please check your Data''	
	--			 ,a.import_file_name
 --	      FROM ' + @import_temp_table_name + ' a
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id		  
	--	  WHERE  #import_status.temp_id IS NULL
	--		  AND a.matching_type IS NOT NULL and a.matching_type <> ''Hypothetical Derivative''
	--		  AND (a.hedge_fixed_price_value_id IS NULL
	--			 OR a.hedge_to_item_conv_factor IS NULL 
	--			 OR a.item_pricing_value_id IS NULL 
	--			 OR a.item_counterparty_id IS NULL 
	--			 OR a.item_trader_id IS NULL
	--			 OR a.gen_curve_source_value_id IS NULL )
	--')

	---- Log Message for Dependent Data Missing(IN_Assessment)
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	--	  SELECT a.temp_id,
 --				 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Dependent Data Missing'',
	--			 CASE 
	--				WHEN a.init_assmt_curve_type_value_id IS NULL THEN
	--					 ''Data ('' + a.init_assmt_curve_type_value_id + '') in Column: ''''IN_Assessment Curve Type'''' on depends on column: ''''IN_Assessment Approach''''.''
	--				WHEN a.init_curve_source_value_id IS NULL THEN
	--					 ''Data ('' + a.init_curve_source_value_id + '') in Column: ''''IN_Curve Source'''' on depends on column: ''''IN_Assessment Approach''''.''
	--				WHEN a.init_number_of_curve_points IS NULL THEN
	--					 ''Data ('' + a.init_number_of_curve_points + '') in Column: ''''IN_Number of Price Points'''' on depends on column: ''''IN_Assessment Approach''''.''					
	--			 END,
	--			 ''Please check your Data''	
	--			 ,a.import_file_name
 --	      FROM ' + @import_temp_table_name + ' a
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
	--	  LEFT JOIN static_data_value sdv 
	--		  ON sdv.code = a.init_eff_test_approach_value_id 
	--		  AND sdv.type_id = 300
	--		  AND sdv.code NOT IN (''Use Dollar Offset Approach'', ''User Input Value'', ''No Hedge Ineffectiveness'', ''Effectivess Testing Not Required'')
	--	  WHERE  #import_status.temp_id IS NULL
	--		  AND sdv.value_id IS NOT NULL
	--		  AND (a.init_assmt_curve_type_value_id IS NULL
	--			 OR a.init_curve_source_value_id IS NULL 
	--			 OR a.init_number_of_curve_points IS NULL)
	--')	
	
	---- Log Message for Dependent Data Missing(ON_Assessment)
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	--	  SELECT a.temp_id,
 --				 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Dependent Data Missing'',
	--			 CASE 
	--				WHEN a.on_assmt_curve_type_value_id IS NULL THEN
	--					 ''Data ('' + a.on_assmt_curve_type_value_id + '') in Column: ''''ON_Assessment Curve Type'''' on depends on column: ''''ON_Assessment Approach''''.''
	--				WHEN a.on_curve_source_value_id IS NULL THEN
	--					 ''Data ('' + a.on_curve_source_value_id + '') in Column: ''''ON_Curve Source'''' on depends on column: ''''ON_Assessment Approach''''.''
	--				WHEN a.on_number_of_curve_points IS NULL THEN
	--					 ''Data ('' + a.on_number_of_curve_points + '') in Column: ''''ON_Number of Price Points'''' on depends on column: ''''ON_Assessment Approach''''.''					
	--			 END,
	--			 ''Please check your Data''		
	--			 ,a.import_file_name
 --	      FROM ' + @import_temp_table_name + ' a
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
	--	  LEFT JOIN static_data_value sdv 
	--		  ON sdv.code = a.on_eff_test_approach_value_id 
	--		  AND sdv.type_id = 300
	--		  AND sdv.code NOT IN (''Use Dollar Offset Approach'', ''User Input Value'', ''No Hedge Ineffectiveness'', ''Effectivess Testing Not Required'')
	--	  WHERE  #import_status.temp_id IS NULL
	--		  AND sdv.value_id IS NOT NULL
	--		  AND (a.on_assmt_curve_type_value_id IS NULL
	--			 OR a.on_curve_source_value_id IS NULL 
	--			 OR a.on_number_of_curve_points IS NULL)
	--')
	
	--Validate valid data are provided in compulsory fields
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Invalid Data'',
				 CASE 
					 WHEN subs.entity_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.subsidiary, '''') + '' not found for column: Subsidiary.''
					 WHEN str.entity_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.strategy, '''') + '' not found for column: Strategy.''
					 WHEN bk.entity_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.book, '''') + '' not found for column: Book.''
					 WHEN ina.value_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.init_eff_test_approach_value_id, '''') + '' not found for column: IN_Assessment Approach.''
					 WHEN met.value_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.mstm_eff_test_type_id, '''') + '' not found for column: Measurement Eff Test Approah.''
					 WHEN ona.value_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.on_eff_test_approach_value_id, '''') + '' not found for column: ON_Assessment Approach.''
					 WHEN htp.value_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.hedge_test_price_option_value_id, '''') + '' not found for column: Hedge Assessment Pricing Option.''
					 WHEN itp.value_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.item_test_price_option_value_id, '''') + '' not found for column: Item Assessment Pricing Option''
					 WHEN inct.value_id IS NULL THEN
						'' Data '' + ISNULL(a.init_assmt_curve_type_value_id, '''') + '' not found for column: IN_Assessment Curve Type.''
					 WHEN ics.value_id IS NULL THEN
						'' Data '' + ISNULL(a.init_curve_source_value_id, '''') + '' not found for column: IN_Curve Source.''
					 WHEN onct.value_id IS NULL THEN
						'' Data '' + ISNULL(a.on_assmt_curve_type_value_id, '''') + '' not found for column: ON_Assessment Curve Type.''
					 WHEN ocs.value_id IS NULL THEN
						'' Data '' + ISNULL(a.on_curve_source_value_id, '''') + '' not found for column: ON_Curve Source.''
					 WHEN htfp.value_id IS NULL THEN
						'' Data '' + ISNULL(a.hedge_fixed_price_value_id, '''') + '' not found for column: Hedge Total Fixed Price Based On.''
					 WHEN hipt.value_id IS NULL THEN
						'' Data '' + ISNULL(a.item_pricing_value_id, '''') + '' not found for column: Hedge Item Pricing Type.''
					 WHEN sc.source_counterparty_id IS NULL THEN
						'' Data '' + ISNULL(a.item_counterparty_id, '''') + '' not found for column: Counterparty.''
					 WHEN st.source_trader_id IS NULL THEN
						'' Data '' + ISNULL(a.item_trader_id, '''') + '' not found for column: Trader.''
					 WHEN cs.value_id IS NULL THEN
						'' Data '' + ISNULL(a.gen_curve_source_value_id, '''') + '' not found for column: Curve Source.''	 
				 END,
				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  OUTER APPLY( SELECT b.entity_id
		  			   FROM portfolio_hierarchy b
		  			   WHERE b.entity_name = a.subsidiary
		  ) subs
		  OUTER APPLY( SELECT b.entity_id
		  			   FROM portfolio_hierarchy b
					   WHERE b.entity_name = a.strategy
		  ) str
		  OUTER APPLY( SELECT b.entity_id
		  			   FROM portfolio_hierarchy b
					   WHERE b.entity_name = a.book
		  ) bk
		  OUTER APPLY( SELECT b.value_id
		  			   FROM static_data_value b
					   WHERE b.code = a.init_eff_test_approach_value_id 
		  					AND b.type_id = 300
		  ) ina
		  OUTER APPLY( SELECT b.value_id
		  			   FROM static_data_value b
					   WHERE b.code = a.mstm_eff_test_type_id AND b.type_id = 4075
		  ) met
		  OUTER APPLY( SELECT b.value_id
		  			   FROM static_data_value b
					   WHERE b.code = a.on_eff_test_approach_value_id AND b.type_id = 300
		  ) ona
		  OUTER APPLY( SELECT b.value_id
		  			   FROM static_data_value b
					   WHERE  b.code = a.hedge_test_price_option_value_id AND b.type_id = 375
		  ) htp
		  OUTER APPLY( SELECT b.value_id
		  			   FROM static_data_value b
					   WHERE b.code = a.item_test_price_option_value_id AND b.type_id = 375
		  ) itp
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv
						WHERE sdv.code = a.init_assmt_curve_type_value_id
							AND sdv.type_id = 75							
		  ) inct
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv 
						WHERE sdv.code = a.init_curve_source_value_id 
							AND sdv.type_id = 10007							
		  ) ics
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv
						WHERE sdv.code = a.on_assmt_curve_type_value_id
							AND sdv.type_id = 75							
		  ) onct
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv 
						WHERE sdv.code = a.on_curve_source_value_id 
							AND sdv.type_id = 10007							
		  ) ocs
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv
						WHERE sdv.code = a.hedge_fixed_price_value_id
							AND sdv.type_id = 550					
		  ) htfp
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv 
						WHERE sdv.code = a.item_pricing_value_id 
							AND sdv.type_id = 425			
		  ) hipt
		  OUTER APPLY ( SELECT sc.source_counterparty_id
						FROM source_counterparty sc 
						WHERE sc.counterparty_id = a.item_counterparty_id
		  ) sc
		  OUTER APPLY ( SELECT st.source_trader_id
						FROM source_traders st 
						WHERE st.trader_id = a.item_trader_id
		  ) st
		  OUTER APPLY ( SELECT sdv.value_id
						FROM static_data_value sdv 
						WHERE sdv.code = a.gen_curve_source_value_id 
							AND sdv.type_id = 10007
		  ) cs
		  LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 		  WHERE #import_status.temp_id IS NULL AND
				((subs.entity_id IS NULL) OR
		  		(str.entity_id IS NULL) OR
		  		(bk.entity_id IS NULL) OR
		  		(ina.value_id IS NULL) OR
		  		(met.value_id IS NULL) OR
		  		(ona.value_id IS NULL) OR
		  		(htp.value_id IS NULL) OR
		  		(itp.value_id IS NULL) OR
				(inct.value_id IS NULL) OR
				(ics.value_id IS NULL) OR
				(onct.value_id IS NULL) OR
				(ocs.value_id IS NULL) OR
				(htfp.value_id IS NULL) OR
			    (hipt.value_id IS NULL) OR
			    (sc.source_counterparty_id IS NULL) OR
			    (st.source_trader_id IS NULL) OR
			    (cs.value_id IS NULL))
	')

	----Validate valid data are provided in dependent fields
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 --		  SELECT a.temp_id,
	--			 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Invalid Data'',
	--			 CASE WHEN htfp.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.hedge_fixed_price_value_id, '''') + '' not found for column: Hedge Total Fixed Price Based On.''
	--				  WHEN hipt.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.item_pricing_value_id, '''') + '' not found for column: Hedge Item Pricing Type.''
	--				  WHEN sc.source_counterparty_id IS NULL THEN
	--					'' Data '' + ISNULL(a.item_counterparty_id, '''') + '' not found for column: Counterparty.''
	--				  WHEN st.source_trader_id IS NULL THEN
	--					'' Data '' + ISNULL(a.item_trader_id, '''') + '' not found for column: Trader.''
	--				  WHEN cs.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.gen_curve_source_value_id, '''') + '' not found for column: Curve Source.''
	--			 END,
	--			 ''Please check your Data'',
 --				 a.import_file_name
	--	  FROM   '+ @import_temp_table_name + ' a		  
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv
	--					WHERE sdv.code = a.hedge_fixed_price_value_id
	--						AND sdv.type_id = 550					
	--	  ) htfp
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv 
	--					WHERE sdv.code = a.item_pricing_value_id 
	--						AND sdv.type_id = 425			
	--	  ) hipt
	--	  OUTER APPLY ( SELECT sc.source_counterparty_id
	--					FROM source_counterparty sc 
	--					WHERE sc.counterparty_id = a.item_counterparty_id
	--	  ) sc
	--	  OUTER APPLY ( SELECT st.source_trader_id
	--					FROM source_traders st 
	--					WHERE st.trader_id = a.item_trader_id
	--	  ) st
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv 
	--					WHERE sdv.code = a.gen_curve_source_value_id 
	--						AND sdv.type_id = 10007
	--	  ) cs
 --		  WHERE #import_status.temp_id IS NULL
	--		AND a.matching_type IS NOT NULL and a.matching_type <> ''Hypothetical Derivative''
	--		AND (htfp.value_id IS NULL 
	--		OR hipt.value_id IS NULL
	--		OR sc.source_counterparty_id IS NULL
	--		OR st.source_trader_id IS NULL
	--		OR cs.value_id IS NULL)
	--')
	
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 --		  SELECT a.temp_id,
	--			 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Invalid Data'',
	--			 CASE WHEN inct.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.init_assmt_curve_type_value_id, '''') + '' not found for column: IN_Assessment Curve Type.''
	--				  WHEN ics.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.init_curve_source_value_id, '''') + '' not found for column: IN_Curve Source.''
	--			 END,
	--			 ''Please check your Data'',
 --				 a.import_file_name
	--	  FROM   '+ @import_temp_table_name + ' a		  
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv
	--					WHERE sdv.code = a.init_assmt_curve_type_value_id
	--						AND sdv.type_id = 75							
	--	  ) inct
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv 
	--					WHERE sdv.code = a.init_curve_source_value_id 
	--						AND sdv.type_id = 10007							
	--	  ) ics
	--	  LEFT JOIN static_data_value sdv 
	--		  ON sdv.code = a.init_eff_test_approach_value_id 
	--		  AND sdv.type_id = 300
	--		  AND sdv.code NOT IN (''Use Dollar Offset Approach'', ''User Input Value'', ''No Hedge Ineffectiveness'', ''Effectivess Testing Not Required'')
 --		  WHERE #import_status.temp_id IS NULL
	--		AND sdv.value_id IS NOT NULL
	--		AND (inct.value_id IS NULL 
	--		OR ics.value_id IS NULL)
	--')

	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 --		  SELECT a.temp_id,
	--			 '''+ @process_id+''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 '''+ @table_name+''',
 --				 ''Invalid Data'',
	--			 CASE WHEN onct.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.on_assmt_curve_type_value_id, '''') + '' not found for column: ON_Assessment Curve Type.''
	--				  WHEN ocs.value_id IS NULL THEN
	--					'' Data '' + ISNULL(a.on_curve_source_value_id, '''') + '' not found for column: ON_Curve Source.''
	--			 END,
	--			 ''Please check your Data'',
 --				 a.import_file_name
	--	  FROM   '+ @import_temp_table_name + ' a		  
	--	  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv
	--					WHERE sdv.code = a.on_assmt_curve_type_value_id
	--						AND sdv.type_id = 75							
	--	  ) onct
	--	  OUTER APPLY ( SELECT sdv.value_id
	--					FROM static_data_value sdv 
	--					WHERE sdv.code = a.on_curve_source_value_id 
	--						AND sdv.type_id = 10007							
	--	  ) ocs
	--	  LEFT JOIN static_data_value sdv 
	--		  ON sdv.code = a.on_eff_test_approach_value_id 
	--		  AND sdv.type_id = 300
	--		  AND sdv.code NOT IN (''Use Dollar Offset Approach'', ''User Input Value'', ''No Hedge Ineffectiveness'', ''Effectivess Testing Not Required'')
 --		  WHERE #import_status.temp_id IS NULL
	--		AND sdv.value_id IS NOT NULL
	--		AND (onct.value_id IS NULL 
	--		OR ocs.value_id IS NULL)
	--')

	--CHECK TO VALID Non-mandatory fields
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Warning'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Dependent Data Missing'',
				 CASE 
					 WHEN cur.source_currency_id IS NULL THEN
						''Data '' + ISNULL(a.convert_currency_value_id, '''') + '' not found for column: Convert Currency''
					 WHEN uom.source_uom_id IS NULL THEN
						''Data '' + ISNULL(a.convert_uom_value_id, '''') + '' not found for column: Convert UOM.''
					 WHEN iaetp.eff_test_profile_id IS NULL THEN
						''Data '' + ISNULL(a.inherit_assmt_eff_test_profile_id, '''') + '' not found for column: Inhert Assessment Value From.''					 
				 END,
				 ''Please check your Data'',	
				 a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		  OUTER APPLY( SELECT sc.source_currency_id 
					   FROM source_currency sc
					   WHERE sc.currency_id = a.convert_currency_value_id
		  )	cur
		  OUTER APPLY( SELECT su.source_uom_id 
					   FROM source_uom su
					   WHERE su.uom_id = a.convert_uom_value_id
		  )	uom
		  OUTER APPLY( SELECT eff_test_profile_id 
					   FROM fas_eff_hedge_rel_type iaetp 
					   WHERE iaetp.eff_test_name = a.inherit_assmt_eff_test_profile_id
		  )	iaetp		  
		  WHERE  #import_status.temp_id IS NULL
			  AND (cur.source_currency_id IS NULL AND a.convert_currency_value_id IS NOT NULL)
			  OR (uom.source_uom_id IS NULL	AND a.convert_uom_value_id IS NOT NULL)
			  OR (iaetp.eff_test_profile_id IS NULL AND a.inherit_assmt_eff_test_profile_id IS NOT NULL)
	')

	-- delete from temp table all the invalid data
 	EXEC('DELETE '+@import_temp_table_name + '
 			FROM #import_status
 			INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id
			WHERE error_code = ''error'''
		)

	SET @sql = 'INSERT INTO fas_eff_hedge_rel_type (
					fas_book_id
					,eff_test_name
					,eff_test_description
					,effective_start_date
					,effective_end_date
					,profile_approved_by
					,matching_type
					,hedge_doc_temp
					,profile_approved
					,profile_active
					,externalization					
					,init_eff_test_approach_value_id
					,init_assmt_curve_type_value_id
					,init_curve_source_value_id
					,init_number_of_curve_points
					,on_eff_test_approach_value_id
					,on_assmt_curve_type_value_id
					,on_curve_source_value_id
					,on_number_of_curve_points
					,mstm_eff_test_type_id
					,convert_currency_value_id
					,convert_uom_value_id
					,hedge_test_price_option_value_id
					,item_test_price_option_value_id
					,inherit_assmt_eff_test_profile_id
					,force_intercept_zero
					,use_hedge_as_depend_var
					,individual_link_calc
					,ineffectiveness_in_hedge
					,hedge_fixed_price_value_id
					,hedge_to_item_conv_factor
					,item_pricing_value_id
					,item_counterparty_id
					,item_trader_id
					,gen_curve_source_value_id
					,profile_for_value_id
					,formal_documentation
					,risk_mgmt_strategy
					,risk_mgmt_policy
				)
				SELECT ph.entity_id
					,a.eff_test_name
					,a.eff_test_description
					,dbo.FNAClientToSqlDate(a.effective_start_date)
					,dbo.FNAClientToSqlDate(a.effective_end_date)
					,CASE WHEN SUBSTRING(a.profile_approved, 1, 1) = ''y'' THEN
							CASE WHEN a.profile_approved_by IS NULL THEN dbo.FNADBUser() ELSE a.profile_approved_by END
						ELSE 
							a.profile_approved_by
					END
					,SUBSTRING(a.matching_type, 1, 1)
					,a.hedge_doc_temp
					,CASE WHEN a.profile_approved = ''Yes'' OR a.profile_approved = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.profile_active = ''Yes'' OR a.profile_active = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.externalization = ''Yes'' OR a.externalization = ''y'' THEN ''y'' ELSE ''n'' END										
					,sdv_i1.value_id
					,sdv_i2.value_id
					,sdv_i3.value_id
					,a.init_number_of_curve_points
					,sdv_o1.value_id
					,sdv_o2.value_id
					,sdv_o3.value_id
					,a.on_number_of_curve_points
					,sdv1.value_id
					,scur.source_currency_id
					,suom.source_uom_id
					,sdv4.value_Id
					,sdv5.value_id
					,iaetp.eff_test_profile_id inherit_assmt_eff_test_profile_id
					,CASE WHEN a.force_intercept_zero = ''Yes'' OR a.force_intercept_zero = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.use_hedge_as_depend_var = ''Yes'' OR a.use_hedge_as_depend_var = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.individual_link_calc = ''Yes'' OR a.individual_link_calc = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.ineffectiveness_in_hedge = ''Yes'' OR a.ineffectiveness_in_hedge = ''y'' THEN ''y'' ELSE ''n'' END	
					,sdv6.value_id
					,a.hedge_to_item_conv_factor
					,sdv7.value_id
					,sc.source_counterparty_id
					,st.source_trader_id
					,sdv8.value_id
					,327 --set this default (Both)
					,CASE WHEN a.formal_documentation = ''Yes'' OR a.formal_documentation = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.risk_mgmt_strategy = ''Yes'' OR a.risk_mgmt_strategy = ''y'' THEN ''y'' ELSE ''n'' END
					,CASE WHEN a.risk_mgmt_policy = ''Yes'' OR a.risk_mgmt_policy = ''y'' THEN ''y'' ELSE ''n'' END
				'
			SET @sql += ' FROM ' + @import_temp_table_name + ' a
				LEFT JOIN fas_eff_hedge_rel_type fehrt ON fehrt.eff_test_name = a.eff_test_name
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.mstm_eff_test_type_id AND sdv1.type_id = 4075
				LEFT JOIN source_currency scur ON scur.currency_id = a.convert_currency_value_id
				LEFT JOIN source_uom suom ON suom.uom_id = a.convert_uom_value_id
				LEFT JOIN static_data_value sdv4 ON sdv4.code = a.hedge_test_price_option_value_id AND sdv4.type_id = 375
				LEFT JOIN static_data_value sdv5 ON sdv5.code = a.item_test_price_option_value_id AND sdv5.type_id = 375
				LEFT JOIN static_data_value sdv6 ON sdv6.code = a.hedge_fixed_price_value_id AND sdv6.type_id = 550
				LEFT JOIN static_data_value sdv7 ON sdv7.code = a.item_pricing_value_id AND sdv7.type_id = 425
				LEFT JOIN static_data_value sdv8 ON sdv8.code = a.gen_curve_source_value_id AND sdv8.type_id = 10007
				LEFT JOIN source_traders st ON st.trader_id = a.item_trader_id
				LEFT JOIN static_data_value sdv_i1 ON sdv_i1.code = a.init_eff_test_approach_value_id AND sdv_i1.type_id = 300
				LEFT JOIN static_data_value sdv_i2 ON sdv_i2.code = a.init_assmt_curve_type_value_id AND sdv_i2.type_id = 75
				LEFT JOIN static_data_value sdv_i3 ON sdv_i3.code = a.init_curve_source_value_id AND sdv_i3.type_id = 10007
				LEFT JOIN static_data_value sdv_o1 ON sdv_o1.code = a.on_eff_test_approach_value_id AND sdv_o1.type_id = 300
				LEFT JOIN static_data_value sdv_o2 ON sdv_o2.code = a.on_assmt_curve_type_value_id AND sdv_o2.type_id = 75
				LEFT JOIN static_data_value sdv_o3 ON sdv_o3.code = a.on_curve_source_value_id AND sdv_o3.type_id = 10007
				LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.item_counterparty_id
				INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.book
				INNER JOIN fas_books fb ON fb.fas_book_id = ph.entity_id
				INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.strategy
				INNER JOIN fas_strategy fs ON fs.fas_strategy_id = ph2.entity_id
				INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.subsidiary
				INNER JOIN fas_subsidiaries fss ON fss.fas_subsidiary_id = ph3.entity_id
				LEFT JOIN fas_eff_hedge_rel_type iaetp ON iaetp.eff_test_name = a.inherit_assmt_eff_test_profile_id
				WHERE fehrt.eff_test_profile_id IS NULL 
					AND ph.parent_entity_id = fs.fas_strategy_id 
					AND ph2.parent_entity_id = fss.fas_subsidiary_id
				'

	EXEC (@sql)

	SET @sql = 'UPDATE fehrt
				SET	fas_book_id = ph.entity_id,					
					eff_test_description = a.eff_test_description,
					effective_start_date = dbo.FNAClientToSqlDate(a.effective_start_date),
					effective_end_date = dbo.FNAClientToSqlDate(a.effective_end_date),
					profile_approved_by = a.profile_approved_by,
					matching_type = SUBSTRING(a.matching_type, 1, 1),
					hedge_doc_temp = a.hedge_doc_temp,
					profile_approved = CASE WHEN a.profile_approved = ''Yes'' OR a.profile_approved = ''y'' THEN ''y'' ELSE ''n'' END,
					profile_active = CASE WHEN a.profile_active = ''Yes'' OR a.profile_active = ''y'' THEN ''y'' ELSE ''n'' END,
					externalization = CASE WHEN a.externalization = ''Yes'' OR a.externalization = ''y'' THEN ''y'' ELSE ''n'' END,
					init_eff_test_approach_value_id = sdv_i1.value_id,
					init_assmt_curve_type_value_id = sdv_i2.value_id,
					init_curve_source_value_id = sdv_i3.value_id,
					init_number_of_curve_points = a.init_number_of_curve_points,
					on_eff_test_approach_value_id = sdv_o1.value_id,
					on_assmt_curve_type_value_id = sdv_o2.value_id,
					on_curve_source_value_id = sdv_o3.value_id,
					on_number_of_curve_points = a.on_number_of_curve_points,
					mstm_eff_test_type_id = sdv1.value_id,
					convert_currency_value_id = scur.source_currency_id,
					convert_uom_value_id = suom.source_uom_id,
					hedge_test_price_option_value_id = sdv4.value_Id,
					item_test_price_option_value_id = sdv5.value_id,
					inherit_assmt_eff_test_profile_id = iaetp.eff_test_profile_id,
					force_intercept_zero = CASE WHEN a.force_intercept_zero = ''Yes'' OR a.force_intercept_zero = ''y'' THEN ''y'' ELSE ''n'' END,
					use_hedge_as_depend_var = CASE WHEN a.use_hedge_as_depend_var = ''Yes'' OR a.use_hedge_as_depend_var = ''y'' THEN ''y'' ELSE ''n'' END,
					individual_link_calc = CASE WHEN a.individual_link_calc = ''Yes'' OR a.individual_link_calc = ''y'' THEN ''y'' ELSE ''n'' END,
					ineffectiveness_in_hedge = CASE WHEN a.ineffectiveness_in_hedge = ''Yes'' OR a.ineffectiveness_in_hedge = ''y'' THEN ''y'' ELSE ''n'' END,
					hedge_fixed_price_value_id = sdv6.value_id,
					hedge_to_item_conv_factor = a.hedge_to_item_conv_factor,
					item_pricing_value_id = sdv7.value_id,
					item_counterparty_id = sc.source_counterparty_id,
					item_trader_id = st.source_trader_id,
					gen_curve_source_value_id = sdv8.value_id,
					profile_for_value_id = 327, --set this default (Both)
					formal_documentation = CASE WHEN a.formal_documentation = ''Yes'' OR a.formal_documentation = ''y'' THEN ''y'' ELSE ''n'' END,
					risk_mgmt_strategy = CASE WHEN a.risk_mgmt_strategy = ''Yes'' OR a.risk_mgmt_strategy = ''y'' THEN ''y'' ELSE ''n'' END,
					risk_mgmt_policy = CASE WHEN a.risk_mgmt_policy = ''Yes'' OR a.risk_mgmt_policy = ''y'' THEN ''y'' ELSE ''n'' END
				'
			SET @sql += ' FROM ' + @import_temp_table_name + '  a
				INNER JOIN fas_eff_hedge_rel_type fehrt ON fehrt.eff_test_name = a.eff_test_name					
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.mstm_eff_test_type_id AND sdv1.type_id = 4075
				LEFT JOIN source_currency scur ON scur.currency_id = a.convert_currency_value_id
				LEFT JOIN source_uom suom ON suom.uom_id = a.convert_uom_value_id
				LEFT JOIN static_data_value sdv4 ON sdv4.code = a.hedge_test_price_option_value_id AND sdv4.type_id = 375
				LEFT JOIN static_data_value sdv5 ON sdv5.code = a.item_test_price_option_value_id AND sdv5.type_id = 375
				LEFT JOIN static_data_value sdv6 ON sdv6.code = a.hedge_fixed_price_value_id AND sdv6.type_id = 550
				LEFT JOIN static_data_value sdv7 ON sdv7.code = a.item_pricing_value_id AND sdv7.type_id = 425
				LEFT JOIN static_data_value sdv8 ON sdv8.code = a.gen_curve_source_value_id AND sdv8.type_id = 10007
				LEFT JOIN source_traders st ON st.trader_id = a.item_trader_id
				LEFT JOIN static_data_value sdv_i1 ON sdv_i1.code = a.init_eff_test_approach_value_id AND sdv_i1.type_id = 300
				LEFT JOIN static_data_value sdv_i2 ON sdv_i2.code = a.init_assmt_curve_type_value_id AND sdv_i2.type_id = 75
				LEFT JOIN static_data_value sdv_i3 ON sdv_i3.code = a.init_curve_source_value_id AND sdv_i3.type_id = 10007
				LEFT JOIN static_data_value sdv_o1 ON sdv_o1.code = a.init_eff_test_approach_value_id AND sdv_o1.type_id = 300
				LEFT JOIN static_data_value sdv_o2 ON sdv_o2.code = a.init_assmt_curve_type_value_id AND sdv_o2.type_id = 75
				LEFT JOIN static_data_value sdv_o3 ON sdv_o3.code = a.init_curve_source_value_id AND sdv_o3.type_id = 10007
				LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.item_counterparty_id
				INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.book
				INNER JOIN fas_books fb ON fb.fas_book_id = ph.entity_id
				INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.strategy
				INNER JOIN fas_strategy fs ON fs.fas_strategy_id = ph2.entity_id
				INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.subsidiary
				INNER JOIN fas_subsidiaries fss ON fss.fas_subsidiary_id = ph3.entity_id
				LEFT JOIN fas_eff_hedge_rel_type iaetp ON iaetp.eff_test_name = a.inherit_assmt_eff_test_profile_id
				WHERE fehrt.eff_test_profile_id IS NOT NULL
					AND ph.parent_entity_id = fs.fas_strategy_id 
					AND ph2.parent_entity_id = fss.fas_subsidiary_id
				'

	EXEC (@sql)

END

-- For Importing data for Setup Hedging Relationship Type Detail
IF @table_name = 'ixp_hedge_relationship_type_detail'
BEGIN

	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''deal_sequence_number'', ''deal_sequence_number'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''leg'', ''leg'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''volume_mix_percentage'', ''volume_mix_percentage'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''uom_conversion_factor'', ''uom_conversion_factor'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''price_adder'', ''price_adder'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''price_multiplier'', ''price_multiplier'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''strip_months'', ''strip_months'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''strip_year_overlap'', ''strip_year_overlap'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''roll_forward_year'', ''roll_forward_year'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''volume_round'', ''volume_round'')')	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''fas_eff_hedge_rel_type_detail'', ''price_round'', ''price_round'')')	
	
 	
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM ' + @import_temp_table_name + '
 	      WHERE  eff_test_name IS NULL
 	             AND hedge_or_item IS NULL
 	             AND buy_sell_flag IS NULL
 	             AND fixed_float_flag IS NULL
				 AND deal_sequence_number IS NULL
				 AND leg IS NULL
				 AND volume_mix_percentage IS NULL
				 AND uom_conversion_factor IS NULL
				 AND strip_months IS NULL
				 AND strip_year_overlap IS NULL
				 AND roll_forward_year IS NULL')

 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name

	-- strip_month_from, strip_month_to, 
	--strip_year_overlap cannot be blank
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Missing Value'',
 					 CASE 
						 WHEN a.eff_test_name IS NULL THEN
					  		  ''Required value missing for column : Name''
						 WHEN a.hedge_or_item IS NULL THEN
					  		  ''Required value missing for column : Hedge/Item''
						 WHEN a.buy_sell_flag IS NULL THEN
					  		  ''Required value missing for column : Buy/Sell''
						 WHEN a.fixed_float_flag IS NULL THEN
					  		  ''Required value missing for column : Fixed/Float''
						 WHEN a.deal_sequence_number IS NULL THEN
					  		  ''Required value missing for column : Deal Sequence''
						 WHEN a.leg IS NULL THEN
					  		  ''Required value missing for column :  Leg''
						 WHEN a.volume_mix_percentage IS NULL THEN
					  		  ''Required value missing for column : Volume Mix Percentage''
						 WHEN a.uom_conversion_factor IS NULL THEN
					  		  ''Required value missing for column : UOM Conversion Factor''						 
						 WHEN a.strip_year_overlap IS NULL THEN
					  		  ''Required value missing for column : Lag Months''
						 WHEN a.roll_forward_year IS NULL THEN
				 		  ''Required value missing for column : Item Strip Months''
					 END,
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL 
					AND (a.eff_test_name IS NULL 
					OR a.hedge_or_item IS NULL 
					OR a.buy_sell_flag IS NULL 
					OR a.fixed_float_flag IS NULL
					OR a.deal_sequence_number IS NULL 
					OR a.leg IS NULL 
					OR a.volume_mix_percentage IS NULL 
					OR a.uom_conversion_factor IS NULL 					
					OR a.strip_year_overlap IS NULL 
					OR a.roll_forward_year IS NULL )			  
 	')

	--Validate valid data are provided in compulsory fields
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Invalid Data'',
				 CASE 
					 WHEN a.hedge_or_item NOT IN (''hedge'', ''item'', ''h'', ''i'') THEN
					  	  '' Data '' + ISNULL(a.hedge_or_item, '''') + '' not found for column: Hedge/Item.''
					 WHEN a.buy_sell_flag NOT IN (''buy'', ''sell'', ''b'', ''s'') THEN
					  	  '' Data '' + ISNULL(a.buy_sell_flag, '''') + '' not found for column: Buy/Sell.''
					 WHEN a.fixed_float_flag NOT IN (''fixed'', ''Float'', ''f'', ''t'') THEN
					  	  '' Data '' + ISNULL(a.fixed_float_flag, '''') + '' not found for column: Fixed/Float.''
					 WHEN f.eff_test_profile_id IS NULL THEN
					  	  '' Data '' + ISNULL(a.eff_test_name, '''') + '' not found for column: Name.''				 
				 END,
				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a		  
		  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		  OUTER APPLY ( SELECT eff_test_profile_id 
						FROM fas_eff_hedge_rel_type f
						WHERE eff_test_name = a.eff_test_name
		  ) f
 		  WHERE #import_status.temp_id IS NULL
			AND f.eff_test_profile_id IS NULL
	')
	
	--Validate valid data are provided in index
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Invalid Data'',
				 '' Data '' + ISNULL(a.source_curve_def_id, '''') + '' not found for column: Index.'',
				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a		  
		  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		  OUTER APPLY ( SELECT d.source_curve_def_id 
						FROM source_price_curve_def d 
						INNER JOIN source_system_description e ON e.source_system_id = d.source_system_id 
						INNER JOIN fas_strategy fs ON d.source_system_id = fs.source_system_id
						WHERE d.source_curve_type_value_id = ISNULL(NULL, d.source_curve_type_value_id)
							AND (d.commodity_id = ISNULL(NULL, d.commodity_id))
							AND d.curve_id = a.source_curve_def_id							
		  ) spcd
 		  WHERE #import_status.temp_id IS NULL
			AND spcd.source_curve_def_id IS NULL
			AND a.fixed_float_flag = ''float''
	')
	
	
	-- Log Message for Dependent Data Missing(fixed_float_flag)
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Dependent Data Missing'',
				 ''Data (a.fixed_float_flag) in Column: Fixed/Float depends on column: ''''Index''''.'',
				 ''Please check your Data'',	
				 a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id		  
		  WHERE  #import_status.temp_id IS NULL
			  AND a.fixed_float_flag = ''flaot''
			  AND a.source_curve_def_id IS NULL				 
	')

	--CHECK TO VALID Non-mandatory fields
	IF OBJECT_ID('tempdb..#months') IS NOT NULL
		DROP TABLE #months

	SELECT 1 id, 'January' months
	INTO #months
	UNION SELECT 2, 'February'
	UNION SELECT 3, 'March'
	UNION SELECT 4, 'April'
	UNION SELECT 5, 'May'
	UNION SELECT 6, 'June'
	UNION SELECT 7, 'July'
	UNION SELECT 8, 'August'
	UNION SELECT 9, 'September'
	UNION SELECT 10, 'October'
	UNION SELECT 11, 'November'
	UNION SELECT 12, 'December'

	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Warning'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Dependent Data Missing'',
				 CASE 
					 WHEN mf.id IS NULL AND a.strip_month_from IS NOT NULL THEN
						''Data '' + ISNULL(a.strip_month_from, '''') + '' not found for column: Month From''
					 WHEN mt.id IS NULL AND a.strip_month_to IS NOT NULL THEN
						''Data '' + ISNULL(a.strip_month_to, '''') + '' not found for column: Month To.''
					 WHEN sub.entity_id IS NULL AND a.sub_id IS NOT NULL THEN
						''Data '' + ISNULL(a.sub_id, '''') + '' not found for column: Subsidiary.''
					 WHEN ssbm.book_deal_type_map_id IS NULL AND a.book_deal_type_map_id IS NOT NULL THEN
						''Data '' + ISNULL(a.book_deal_type_map_id, '''') + '' not found for column: SBM.''
					 WHEN sb1.source_book_id IS NULL AND a.source_system_book_id1 IS NOT NULL THEN
						''Data '' + ISNULL(a.source_system_book_id1, '''') + '' not found for column: Tag1.''
					 WHEN sb2.source_book_id IS NULL AND a.source_system_book_id2 IS NOT NULL THEN											  
						''Data '' + ISNULL(a.source_system_book_id2, '''') + '' not found for column: Tag2.''
					 WHEN sb3.source_book_id IS NULL AND a.source_system_book_id3 IS NOT NULL THEN											  
						''Data '' + ISNULL(a.source_system_book_id3, '''') + '' not found for column: Tag3.''
					 WHEN sb4.source_book_id IS NULL AND a.source_system_book_id4 IS NOT NULL THEN											  
						''Data '' + ISNULL(a.source_system_book_id4, '''') + '' not found for column: Tag4.''
					 WHEN ibt.book_deal_type_map_id IS NULL AND a.deal_xfer_source_book_id IS NOT NULL THEN
						''Data '' + ISNULL(a.deal_xfer_source_book_id, '''') + '' not found for column: Inter Book Transfer.''
					 WHEN dt.source_deal_type_id IS NULL AND a.source_deal_type_id IS NOT NULL THEN
						''Data '' + ISNULL(a.source_deal_type_id, '''') + '' not found for column: Deal Type.''
					 WHEN dst.source_deal_type_id IS NULL AND a.deal_sub_type_id IS NOT NULL THEN
						''Data '' + ISNULL(a.deal_sub_type_id, '''') + '' not found for column: Deal Sub Type.''
				 END,
				 ''Please check your Data'',	
				 a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		  OUTER APPLY( SELECT id 
					   FROM #months
					   WHERE #months.months = a.strip_month_from
		  )	mf
		  OUTER APPLY( SELECT id 
					   FROM #months
					   WHERE #months.months = a.strip_month_to
		  )	mt
		  OUTER APPLY( SELECT entity_id 
					   FROM portfolio_hierarchy ph 
					   WHERE ph.entity_name = a.sub_id
		  )	sub
		  OUTER APPLY( SELECT ssbm.book_deal_type_map_id 
					   FROM source_system_book_map ssbm
					   WHERE ssbm.logical_name = a.book_deal_type_map_id
		  )	ssbm
		  OUTER APPLY( SELECT sb.source_book_id 
					   FROM source_book sb
					   WHERE sb.source_system_book_id = a.source_system_book_id1
					       AND sb.source_system_book_type_value_id=50
		  )	sb1
		  OUTER APPLY( SELECT sb.source_book_id 
					   FROM source_book sb
					   WHERE sb.source_system_book_id = a.source_system_book_id2
					       AND sb.source_system_book_type_value_id=51
		  )	sb2
		  OUTER APPLY( SELECT sb.source_book_id 
					   FROM source_book sb
					   WHERE sb.source_system_book_id = a.source_system_book_id3
					       AND sb.source_system_book_type_value_id=52
		  )	sb3
		  OUTER APPLY( SELECT sb.source_book_id 
					   FROM source_book sb
					   WHERE sb.source_system_book_id = a.source_system_book_id4
					       AND sb.source_system_book_type_value_id=53
		  )	sb4
		  OUTER APPLY( SELECT  ssbm.book_deal_type_map_id
					   FROM source_book sb 
					   INNER JOIN source_system_book_map ssbm on ssbm.source_system_book_id1 = sb.source_book_id
					   INNER JOIN source_book sb1 ON ssbm.source_system_book_id2 = sb1.source_book_id
					   INNER JOIN source_book sb2 ON ssbm.source_system_book_id3 = sb2.source_book_id
					   INNER JOIN source_book sb3 ON ssbm.source_system_book_id4 = sb3.source_book_id
					   INNER JOIN static_data_value sdv ON ssbm.fas_deal_type_value_id = sdv.value_id
					   INNER JOIN portfolio_hierarchy ph ON ph.entity_id = ssbm.fas_book_id
					   WHERE ph.entity_name +'' | '' +sb.source_book_name +'' | ''+  
						sb1.source_book_name +'' | ''+ sb2.source_book_name +'' | ''+ sb3.source_book_name +'' | ''+ sdv.code = a.deal_xfer_source_book_id

		  )	ibt
		  OUTER APPLY( SELECT sdt.source_deal_type_id 
					   FROM source_deal_type sdt 
					   WHERE sdt.deal_type_id = a.source_deal_type_id 
						   AND sdt.sub_type = ''n''
		  )	dt
		  OUTER APPLY( SELECT sdt.source_deal_type_id 
					   FROM source_deal_type sdt 							
					   LEFT JOIN source_deal_type sdt_sub 
							ON sdt_sub.deal_type_id = sdt.deal_type_id 
							AND sdt.sub_type = ''y''
					   WHERE sdt_sub.deal_type_id = a.deal_sub_type_id
		  )	dst
		  WHERE  #import_status.temp_id IS NULL
			  AND (mf.id IS NULL AND a.strip_month_from IS NOT NULL)				 
			  OR (mt.id IS NULL AND a.strip_month_to IS NOT NULL)
			  OR (sub.entity_id IS NULL AND a.sub_id IS NOT NULL)
			  OR (ssbm.book_deal_type_map_id IS NULL AND a.book_deal_type_map_id IS NOT NULL)
			  OR (sb1.source_book_id IS NULL AND a.source_system_book_id1 IS NOT NULL)
			  OR (sb2.source_book_id IS NULL AND a.source_system_book_id2 IS NOT NULL)
			  OR (sb3.source_book_id IS NULL AND a.source_system_book_id3 IS NOT NULL)
			  OR (sb4.source_book_id IS NULL AND a.source_system_book_id4 IS NOT NULL)
			  OR (ibt.book_deal_type_map_id IS NULL AND a.deal_xfer_source_book_id IS NOT NULL)
			  OR (dt.source_deal_type_id IS NULL AND a.source_deal_type_id IS NOT NULL)
			  OR (dst.source_deal_type_id IS NULL AND a.deal_sub_type_id IS NOT NULL)	 
	')
	
	-- delete from temp table all the invalid data
 	EXEC('DELETE '+@import_temp_table_name + '
 			FROM #import_status
 			INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id
			WHERE error_code <> ''warning'''
		)


	SET @sql = '
		INSERT INTO fas_eff_hedge_rel_type_detail (
			sub_id
			, book_deal_type_map_id
			, source_system_book_id1
			, source_system_book_id2
			, source_system_book_id3
			, source_system_book_id4
			, deal_xfer_source_book_id
			, hedge_or_item
			, buy_sell_flag
			, fixed_float_flag
			, eff_test_profile_id
			, source_curve_def_id
			, leg
			, deal_sequence_number
			, strip_month_from
			, strip_month_to
			, source_deal_type_id
			, deal_sub_type_id
			, volume_mix_percentage
			, uom_conversion_factor
			, price_adder
			, price_multiplier
			, strip_months
			, strip_year_overlap
			, roll_forward_year
			, volume_round
			, price_round
		)
		SELECT
			ph.entity_id
			, ssbm.book_deal_type_map_id
			, sb1.source_book_id source_system_book_id1
			, sb2.source_book_id source_system_book_id2
			, sb3.source_book_id source_system_book_id3
			, sb4.source_book_id source_system_book_id4
			, ibt.book_deal_type_map_id deal_xfer_source_book_id
			, CASE WHEN a.hedge_or_item  = ''Hedge'' THEN ''h'' WHEN a.hedge_or_item = ''Item'' THEN ''i'' END
			, CASE WHEN a.buy_sell_flag = ''Buy'' THEN ''b'' WHEN a.buy_sell_flag = ''Sell'' THEN ''s'' END
			, CASE WHEN a.fixed_float_flag = ''Fixed'' THEN ''f'' WHEN a.fixed_float_flag = ''Float'' THEN ''t'' END
			, fehrt.eff_test_profile_id
			, CASE WHEN a.fixed_float_flag = ''Fixed'' THEN NULL ELSE spcd.source_curve_def_id END
			, a.leg
			, a.deal_sequence_number
			, LOWER(SUBSTRING(a.strip_month_from, 1, 3))
			, LOWER(SUBSTRING(a.strip_month_to, 1, 3))
			, sdt.source_deal_type_id
			, sdt_sub.source_deal_type_id
			, a.volume_mix_percentage
			, a.uom_conversion_factor
			, a.price_adder
			, a.price_multiplier
			, a.strip_months
			, a.strip_year_overlap
			, a.roll_forward_year
			, a.volume_round
			, a.price_round
		'
	SET @sql += ' FROM ' + @import_temp_table_name + ' a
		INNER JOIN fas_eff_hedge_rel_type fehrt ON fehrt.eff_test_name = a.eff_test_name
		LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.source_curve_def_id
		LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id AND sdt.sub_type = ''n''
		LEFT JOIN source_deal_type sdt_sub ON sdt_sub.deal_type_id = a.deal_sub_type_id AND sdt_sub.sub_type = ''y''	
		LEFT JOIN fas_eff_hedge_rel_type_detail fehrtd 
		ON fehrtd.eff_test_profile_id = fehrt.eff_test_profile_id 
			AND SUBSTRING(a.hedge_or_item, 1, 1) = fehrtd.hedge_or_item 
			AND a.deal_sequence_number = fehrtd.deal_sequence_number
			AND a.leg = fehrtd.leg
		LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.sub_id AND ph.hierarchy_level = 2
		LEFT JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
		LEFT JOIN source_system_book_map ssbm ON ssbm.logical_name = a.book_deal_type_map_id
		LEFT JOIN source_book sb1 ON sb1.source_system_book_id = a.source_system_book_id1
 			AND sb1.source_system_id = a.source_system_id AND sb1.source_system_book_type_value_id = 50
 		LEFT JOIN source_book sb2 ON sb2.source_system_book_id = a.source_system_book_id2
 				AND sb2.source_system_id = a.source_system_id AND sb2.source_system_book_type_value_id = 51
 		LEFT JOIN source_book sb3 ON sb3.source_system_book_id = a.source_system_book_id3
 				AND sb3.source_system_id = a.source_system_id AND sb3.source_system_book_type_value_id = 52
 		LEFT JOIN source_book sb4 ON sb4.source_system_book_id = a.source_system_book_id4
 				AND sb4.source_system_id = a.source_system_id AND sb4.source_system_book_type_value_id = 53
		OUTER APPLY( SELECT  ssbm.book_deal_type_map_id
					   FROM source_book sb 
					   INNER JOIN source_system_book_map ssbm on ssbm.source_system_book_id1 = sb.source_book_id
					   INNER JOIN source_book sb1 ON ssbm.source_system_book_id2 = sb1.source_book_id
					   INNER JOIN source_book sb2 ON ssbm.source_system_book_id3 = sb2.source_book_id
					   INNER JOIN source_book sb3 ON ssbm.source_system_book_id4 = sb3.source_book_id
					   INNER JOIN static_data_value sdv ON ssbm.fas_deal_type_value_id = sdv.value_id
					   INNER JOIN portfolio_hierarchy ph ON ph.entity_id = ssbm.fas_book_id
					   WHERE ph.entity_name +'' | '' +sb.source_book_name +'' | ''+  
						sb1.source_book_name +'' | ''+ sb2.source_book_name +'' | ''+ sb3.source_book_name +'' | ''+ sdv.code = a.deal_xfer_source_book_id

		  )	ibt
		WHERE fehrtd.eff_test_profile_id IS NULL
	'

	EXEC (@sql)

	SET @sql = '
		UPDATE fehrtd
		SET 
			sub_id = ph.entity_id,
			book_deal_type_map_id = ssbm.book_deal_type_map_id,
			source_system_book_id1 = sb1.source_book_id,
			source_system_book_id2 = sb2.source_book_id,
			source_system_book_id3 = sb3.source_book_id,
			source_system_book_id4 = sb4.source_book_id,
			deal_xfer_source_book_id = ibt.book_deal_type_map_id,
			hedge_or_item = CASE WHEN a.hedge_or_item  = ''Hedge'' THEN ''h'' WHEN a.hedge_or_item = ''Item'' THEN ''i'' END,
			buy_sell_flag = CASE WHEN a.buy_sell_flag = ''Buy'' THEN ''b'' WHEN a.buy_sell_flag = ''Sell'' THEN ''s'' END,
			fixed_float_flag = CASE WHEN a.fixed_float_flag = ''Fixed'' THEN ''f'' WHEN a.fixed_float_flag = ''Float'' THEN ''t'' END,
			eff_test_profile_id = fehrt.eff_test_profile_id,
			source_curve_def_id = CASE WHEN a.fixed_float_flag = ''Fixed'' THEN NULL ELSE spcd.source_curve_def_id END,
			leg = a.leg,
			deal_sequence_number = a.deal_sequence_number,
			strip_month_from = LOWER(SUBSTRING(a.strip_month_from, 1, 3)),
			strip_month_to = LOWER(SUBSTRING(a.strip_month_to, 1, 3)),
			source_deal_type_id = sdt.source_deal_type_id,
			deal_sub_type_id = sdt_sub.source_deal_type_id,
			volume_mix_percentage = a.volume_mix_percentage,
			uom_conversion_factor = a.uom_conversion_factor,
			price_adder = a.price_adder,
			price_multiplier = a.price_multiplier,
			strip_months = a.strip_months,
			strip_year_overlap = a.strip_year_overlap,
			roll_forward_year = a.roll_forward_year,
			volume_round = a.volume_round,
			price_round = a.price_round
		'
	SET @sql += ' FROM ' + @import_temp_table_name + ' a
		INNER JOIN fas_eff_hedge_rel_type fehrt ON fehrt.eff_test_name = a.eff_test_name
		LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.source_curve_def_id
		LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.source_deal_type_id AND sdt.sub_type = ''n''
		LEFT JOIN source_deal_type sdt_sub ON sdt_sub.deal_type_id = a.deal_sub_type_id AND sdt_sub.sub_type = ''y''
		LEFT JOIN fas_eff_hedge_rel_type_detail fehrtd 
		ON fehrtd.eff_test_profile_id = fehrt.eff_test_profile_id
			AND SUBSTRING(a.hedge_or_item, 1, 1) = fehrtd.hedge_or_item 
			AND a.deal_sequence_number = fehrtd.deal_sequence_number
			AND a.leg = fehrtd.leg
		LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.sub_id AND ph.hierarchy_level = 2
		LEFT JOIN fas_subsidiaries fs ON fs.fas_subsidiary_id = ph.entity_id
		LEFT JOIN source_system_book_map ssbm ON ssbm.logical_name = a.book_deal_type_map_id
		LEFT JOIN source_book sb1 ON sb1.source_system_book_id = a.source_system_book_id1
 			AND sb1.source_system_id = a.source_system_id AND sb1.source_system_book_type_value_id = 50
 		LEFT JOIN source_book sb2 ON sb2.source_system_book_id = a.source_system_book_id2
 				AND sb2.source_system_id = a.source_system_id AND sb2.source_system_book_type_value_id = 51
 		LEFT JOIN source_book sb3 ON sb3.source_system_book_id = a.source_system_book_id3
 				AND sb3.source_system_id = a.source_system_id AND sb3.source_system_book_type_value_id = 52
 		LEFT JOIN source_book sb4 ON sb4.source_system_book_id = a.source_system_book_id4
 				AND sb4.source_system_id = a.source_system_id AND sb4.source_system_book_type_value_id = 53
		OUTER APPLY( SELECT  ssbm.book_deal_type_map_id
					   FROM source_book sb 
					   INNER JOIN source_system_book_map ssbm on ssbm.source_system_book_id1 = sb.source_book_id
					   INNER JOIN source_book sb1 ON ssbm.source_system_book_id2 = sb1.source_book_id
					   INNER JOIN source_book sb2 ON ssbm.source_system_book_id3 = sb2.source_book_id
					   INNER JOIN source_book sb3 ON ssbm.source_system_book_id4 = sb3.source_book_id
					   INNER JOIN static_data_value sdv ON ssbm.fas_deal_type_value_id = sdv.value_id
					   INNER JOIN portfolio_hierarchy ph ON ph.entity_id = ssbm.fas_book_id
					   WHERE ph.entity_name +'' | '' +sb.source_book_name +'' | ''+  
						sb1.source_book_name +'' | ''+ sb2.source_book_name +'' | ''+ sb3.source_book_name +'' | ''+ sdv.code = a.deal_xfer_source_book_id

		  )	ibt
		WHERE fehrtd.eff_test_profile_id IS NOT NULL
		'

		EXEC (@sql)

END

IF @table_name IN ('ixp_rec_actual_volume', 'ixp_rec_forecast_volume')
BEGIN
	DECLARE @sql_string NVARCHAR(MAX)

	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Deal not found in the system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN source_deal_header sdh
			ON sdh.deal_id = a.deal_id
		  WHERE sdh.deal_id IS NULL'
		  )

	IF OBJECT_ID ('tempdb..#rec_volume') IS NOT NULL
		DROP TABLE #rec_volume

	CREATE TABLE #rec_volume (
		deal_id NVARCHAR(255)  COLLATE DATABASE_DEFAULT,
		term_date NVARCHAR(20)  COLLATE DATABASE_DEFAULT,
		[Hour] INT,
		[Min] INT,
		Is_dst BIT,
		volume NUMERIC(38, 20)
	)
	
	EXEC ('
		INSERT INTO #rec_volume
		SELECT deal_id, 
			   term_date, 
			   [Hour],
			   [Min],
			   Is_dst,
			   volume
		FROM ' + @import_temp_table_name
	)
	
	DECLARE @sdh_id INT
	SELECT @sdh_id = sdh.source_deal_header_id 
	FROM #rec_volume a 
	INNER JOIN source_deal_header sdh
		ON sdh.deal_id = a.deal_id

	SET @sql_string = '
		UPDATE sddh
		SET sddh.term_date = a.[term_date],
			sddh.hr = a.[hour],
			sddh.[period] = a.[min],
			sddh.is_dst = a.is_dst,
			' + IIF(@table_name = 'ixp_rec_actual_volume', ' sddh.schedule_volume', 'sddh.contractual_volume') + ' = a.volume
		FROM source_deal_header dh
		INNER JOIN #rec_volume a
			ON a.deal_id = dh.deal_id
		INNER JOIN source_deal_detail dd
			ON dh.source_deal_header_id = dd.source_deal_header_id
				AND a.term_date BETWEEN dd.term_start AND dd.term_end
		LEFT JOIN source_deal_detail_hour sddh
			ON sddh.source_deal_detail_id = dd.source_deal_detail_id
				AND sddh.term_date = a.[term_date]
				AND CAST(LEFT(sddh.hr, 2) AS INT) = a.hour
		WHERE sddh.source_deal_detail_id IS NOT NULL	
	'
	EXEC (@sql_string)
	
	SET @sql_string = '
		INSERT INTO source_deal_detail_hour (source_deal_detail_id, term_date, hr, period, is_dst, ' + IIF(@table_name = 'ixp_rec_actual_volume', 'schedule_volume', 'contractual_volume') + ')
		SELECT DISTINCT dd.source_deal_detail_id, 
				a.[term_date],
				a.hour,
				a.min,
				a.is_dst,
				a.volume
		FROM source_deal_header dh		
		INNER JOIN #rec_volume a
			ON a.deal_id = dh.deal_id
		INNER JOIN source_deal_detail dd
			ON dh.source_deal_header_id = dd.source_deal_header_id
				AND a.term_date BETWEEN dd.term_start AND dd.term_end
		LEFT JOIN source_deal_detail_hour sddh
			ON sddh.source_deal_detail_id = dd.source_deal_detail_id
				AND sddh.term_date = a.[term_date]
				AND CAST(LEFT(sddh.hr, 2) AS INT) = a.hour
		WHERE sddh.source_deal_detail_id IS NULL
	'
	EXEC (@sql_string)
	
	SET @sql_string = '
		UPDATE sdd
		SET sdd.' + IIF(@table_name = 'ixp_rec_actual_volume', 'schedule_volume', 'contractual_volume') + ' = d.volume
		FROM source_deal_detail sdd
		INNER JOIN (
			SELECT sddh.source_deal_detail_id,
				   SUM(sddh.' + IIF(@table_name = 'ixp_rec_actual_volume', 'schedule_volume', 'contractual_volume') + ') volume
			FROM source_deal_header sdh	
			INNER JOIN source_deal_detail sdd
				ON sdd.source_deal_header_id = sdh.source_deal_header_id					
			INNER JOIN source_deal_detail_hour sddh
				ON sddh.source_deal_detail_id = sdd.source_deal_detail_id
			GROUP BY sddh.source_deal_detail_id, YEAR(term_date), MONTH(term_date)
		) d ON d.source_deal_detail_id = sdd.source_deal_detail_id
		WHERE sdd.source_deal_header_id = ' + CAST(@sdh_id AS NVARCHAR(10)) + '
	'
	EXEC (@sql_string)

	UPDATE sdd
	SET sdd.status = IIF(@table_name = 'ixp_rec_actual_volume', 25003, 25002)
	FROM source_deal_detail sdd
	INNER JOIN (
		SELECT DISTINCT sdd.source_deal_detail_id
		FROM #rec_volume a
		INNER JOIN source_deal_header sdh 
			ON a.deal_id = sdh.deal_id		
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = sdh.source_deal_header_id
				AND a.term_date BETWEEN sdd.term_start AND sdd.term_end
	) b ON b.source_deal_detail_id = sdd.source_deal_detail_id
	
	
	UPDATE sdd
	SET sdd.deal_volume = COALESCE(sdd.actual_volume, sdd.schedule_volume, sdd.contractual_volume)		
	FROM source_deal_detail sdd
	INNER JOIN source_deal_header sdh
		ON sdh.source_deal_header_id= sdd.source_deal_header_id
	WHERE sdh.source_deal_header_id = @sdh_id
	
	DECLARE @rec_process_id NVARCHAR(300), @rec_job_name NVARCHAR(600)
 	        
	SET @rec_process_id = REPLACE(NEWID(),'-','_')
	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @rec_process_id)

 	
	EXEC ('CREATE TABLE ' + @report_position_deals + '( source_deal_header_id INT, action NVARCHAR(1000) COLLATE DATABASE_DEFAULT)')
 	
	SET @sql = 'INSERT INTO ' + @report_position_deals + '(source_deal_header_id, action) 
 				SELECT DISTINCT sdh.source_deal_header_id, ''i''
 				FROM #rec_volume t 		    
 				INNER JOIN source_deal_header sdh
 					ON  t.deal_id = sdh.deal_id
				'
	EXEC(@sql)
 	
	SET @rec_job_name =  'calc_position_breakdown_' + @rec_process_id
	SET @sql = 'spa_update_deal_total_volume NULL,'''+@rec_process_id+''', 0, 1, ''' + @user_login_id + ''''
	EXEC spa_run_sp_as_job @rec_job_name,  @sql, 'generating_report_table', @user_login_id		
END

IF @table_name = 'ixp_rec_certified_volume'
BEGIN
	--Pre import process starts--------------------
	/*** Step2 Convert client date format to SQL data format before proceeding to import. ***/ 

	 EXEC('UPDATE a
          SET production_start_date = dd.sql_date_value
          FROM ' + @import_temp_table_name + ' a
          INNER JOIN #date_details dd
            ON a.production_start_date = dd.user_date
    ') 
	 EXEC('UPDATE a
          SET production_end_date = dd.sql_date_value
          FROM ' + @import_temp_table_name + ' a
          INNER JOIN #date_details dd
            ON a.production_end_date = dd.user_date
    ') 
	 EXEC('UPDATE a
          SET [expiry_date] = dd.sql_date_value
          FROM ' + @import_temp_table_name + ' a
          INNER JOIN #date_details dd
            ON a.expiry_date = dd.user_date
    ')   
	EXEC('UPDATE a
          SET issue_date = dd.sql_date_value
          FROM ' + @import_temp_table_name + ' a
          INNER JOIN #date_details dd
            ON a.issue_date = dd.user_date
    ')
    /***END OF date update***/
	--Step 3 Validation
	--Step3.1 validate data
	EXEC ('DELETE ' + @field_compare_table)
	
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''gis_certificate'', ''certificate_number_from_int'', ''certificate_seq_from'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''gis_certificate'', ''certificate_number_to_int'', ''certificate_seq_to'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''gis_certificate'', ''contract_expiration_date'', ''expiry_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''gis_certificate'', ''gis_cert_date'', ''issue_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''term_start'', ''production_start_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''term_end'', ''production_end_date'')')

		--Step 3.4 Lookup Validation
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
  
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_deal_header'', ''deal_id'', ''b.deal_id = a.deal_id'', ''e''),  --error rows
			(''static_data_value'', ''certification_entity'', ''b.code = a.certification_entity AND b.type_id = 10011'', ''e''),  --flag=e error rows, w warning
			(''static_data_value'', ''jurisdiction'', ''b.code = a.jurisdiction AND type_id = 10002'', ''e''),
			(''static_data_value'', ''tier'', ''b.code = a.tier AND b.type_id = 15000'', ''e''),
			(''static_data_value'', ''year'', ''b.code = a.year AND b.[type_id] = 10092'', ''w'')
		')
  
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

		--column data mapping.
		--Validation for Tier and Jurisdiction mapping
		EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
				SELECT a.temp_id,
				10011,
				dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Tier''), ''<column_value1>'', a.tier), ''<column_name>'', ''Jurisdiction''), ''<column_value>'', a.jurisdiction),
				a.import_file_name
 				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
				LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction AND sdv_jurisdiction.type_id = 10002 
				LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
				LEFT JOIN state_properties_details spd
					ON spd.state_value_id = sdv_jurisdiction.value_id
					AND spd.tier_id = sdv_tier.value_id
				WHERE  #error_status.temp_id IS NULL
					AND a.jurisdiction IS NOT NULL
					AND a.tier IS NOT NULL
					AND spd.state_properties_details_id IS NULL
 		')
		
	--Data validation handling ends here
	--Delete error resultset
	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 

		
	---ends---------------------------------------------
	IF OBJECT_ID ('tempdb..#rec_certified_volume') IS NOT NULL
		DROP TABLE #rec_certified_volume

	CREATE TABLE #rec_certified_volume (
		deal_id NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		certificate_start_id NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		certificate_end_id NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		certificate_seq_from NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		certificate_seq_to NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		quantity NUMERIC(38,20),
		production_start_date DATETIME,
		production_end_date DATETIME,
		[expiry_date] DATETIME,
		issue_date DATETIME,
		tier NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		juridiction NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		certification_entity NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		[year] NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		leg NVARCHAR(10) COLLATE DATABASE_DEFAULT
	)

	EXEC ('
		INSERT INTO #rec_certified_volume
		SELECT deal_id,
			   certificate_start_id,
			   certificate_end_id,
			   certificate_seq_from,
			   certificate_seq_to,
			   quantity,
			   production_start_date,
			   production_end_date,
			   expiry_date,
			   issue_date,
			   tier,
			   jurisdiction,
			   certification_entity,
			   [year],
			   leg
		FROM ' + @import_temp_table_name
	)
	
	
	UPDATE gc
	SET gc.gis_certificate_number_from = a.Certificate_start_ID, 
		gc.gis_certificate_number_to = a.Certificate_end_ID, 
		gc.certificate_number_from_int = a.Certificate_Seq_from,
		gc.certificate_number_to_int = a.Certificate_Seq_to, 
		gc.contract_expiration_date = a.[expiry_date], 
		gc.gis_cert_date = a.issue_date, 
		gc.state_value_id = jur.value_id, 
		gc.tier_type = tier.value_id, 
		gc.certification_entity = cer.value_id, 
		gc.[year] = sdv_yr.value_id
	FROM #rec_certified_volume a
	INNER JOIN source_deal_header sdh
		ON sdh.deal_id = a.deal_id
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = sdh.source_deal_header_id
		AND a.production_start_date = sdd.term_start
		AND a.production_end_date = sdd.term_end
		AND a.leg = sdd.leg
	LEFT JOIN static_data_value jur
		ON jur.code = a.Juridiction
		AND jur.[type_id] = 10002
	LEFT JOIN static_data_value tier
		ON tier.code = a.tier
		AND tier.[type_id] = 15000
	LEFT JOIN static_data_value cer
		ON cer.code = a.certification_entity
		AND cer.[type_id] = 10011
	LEFT JOIN static_data_value sdv_yr
		ON sdv_yr.code = a.[year]
		AND sdv_yr.[type_id] = 10092
	INNER JOIN gis_certificate gc
		ON gc.source_deal_header_id = sdd.source_deal_detail_id
		AND gc.state_value_id = jur.value_id
		AND gc.tier_type = tier.value_id
		
	DECLARE @tmp_eligible_deals NVARCHAR(150)
    SET @tmp_eligible_deals = dbo.FNAProcessTableName('TmpEligibleDeals', @user_login_id, @process_id)    
	
	CREATE TABLE #inserted_detail_ids (
		source_deal_detail_id INT
	)

	INSERT INTO gis_certificate (
		source_deal_header_id, gis_certificate_number_from, gis_certificate_number_to, certificate_number_from_int,
		certificate_number_to_int, contract_expiration_date, gis_cert_date, state_value_id, tier_type, certification_entity,[year]
	)
	OUTPUT INSERTED.source_deal_header_id INTO #inserted_detail_ids 
	SELECT sdd.source_deal_detail_id source_deal_header_id,		
		   a.Certificate_start_ID gis_certificate_number_from,
		   a.Certificate_end_ID gis_certificate_number_to,
		   a.Certificate_Seq_from certificate_number_from_int,
		   a.Certificate_Seq_to certificate_number_to_int,
		   a.[expiry_date] contract_expiration_date,
		   a.issue_date gis_cert_date,
		   jur.value_id state_value_id,
		   tier.value_id tier_type,
		   cer.value_id certification_entity,
		   sdv_yr.value_id
	FROM #rec_certified_volume a
	INNER JOIN source_deal_header sdh
		ON sdh.deal_id = a.deal_id
	INNER JOIN source_deal_detail sdd
		ON sdd.source_deal_header_id = sdh.source_deal_header_id
		AND a.production_start_date = sdd.term_start
		AND a.production_end_date = sdd.term_end
		AND a.leg = sdd.leg
	LEFT JOIN static_data_value jur
		ON jur.code = a.Juridiction
		AND jur.[type_id] = 10002
	LEFT JOIN static_data_value tier
		ON tier.code = a.tier
		AND tier.[type_id] = 15000
	LEFT JOIN static_data_value cer
		ON cer.code = a.certification_entity
		AND cer.[type_id] = 10011
	LEFT JOIN static_data_value sdv_yr
		ON sdv_yr.code = a.[year]
		AND sdv_yr.[type_id] = 10092
	LEFT JOIN gis_certificate gc
		ON gc.source_deal_header_id = sdd.source_deal_detail_id
		AND gc.state_value_id = jur.value_id
		AND gc.tier_type = tier.value_id
	WHERE gc.source_certificate_number IS NULL
	
	EXEC('SELECT DISTINCT id.source_deal_detail_id 
        INTO ' + @tmp_eligible_deals + ' 
        FROM #inserted_detail_ids id 
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = id.source_deal_detail_id
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 
			AND sdh.is_environmental = ''y'' AND sdh.header_buy_sell_flag = ''b''')
 
    EXEC spa_return_certificate_volume_detail 'u', NULL, @process_id
	--DECLARE @certified_id INT
	
	--SELECT @certified_id = value_id 
	--FROM static_data_value 
	--WHERE code = 'Certified' 
	--	AND [type_id] = 25000

		
	--SELECT @source_deal_header_ids = ISNULL(@source_deal_header_ids + ',', '') + CAST(source_deal_header_id AS NVARCHAR(10))
	--FROM(
	--	SELECT DISTINCT sdh.source_deal_header_id
	--	FROM #rec_certified_volume a
	--	INNER JOIN source_deal_header sdh
	--		ON sdh.deal_id = a.deal_id
	--) b

	--EXEC [dbo].[spa_update_deal_total_volume] @source_deal_header_ids = @source_deal_header_ids
END

IF @table_name = 'ixp_implied_volatility_run_param'
BEGIN
	-- Not an acutal import. Used in populating data from CSV to grid in 'Run Implied Volatility Calculation'
	RETURN
END

IF @table_name = 'ixp_ppa_contract_data'
BEGIN
	CREATE TABLE #inserted_cp(counterparty_id NVARCHAR(100) COLLATE DATABASE_DEFAULT)
	CREATE TABLE #inserted_contract([contract_name] NVARCHAR(100) COLLATE DATABASE_DEFAULT)
	CREATE TABLE #inserted_meter(recorderid NVARCHAR(100) COLLATE DATABASE_DEFAULT)
	CREATE TABLE #inserted_gen(generator_id NVARCHAR(100) COLLATE DATABASE_DEFAULT)
	CREATE TABLE #inserted_curve(curve_id NVARCHAR(100) COLLATE DATABASE_DEFAULT, logical_name NVARCHAR(30) COLLATE DATABASE_DEFAULT)
	-- Error handling
	
	CREATE TABLE #empty_col(colname NVARCHAR(100) COLLATE DATABASE_DEFAULT, temp_id INT)

	EXEC('insert into #empty_col(colname, temp_id) 
	select  ''counterparty'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.counterparty, '''') IS NULL GROUP BY temp_id
	UNION
	--select  ''contract'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.contract, '''') IS NULL GROUP BY temp_id
	--UNION
	select  ''subsidairy'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.subsidairy, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''strategy'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.strategy, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''book'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.book, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''meter'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.meter, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''generator_id'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.generator_id, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''facility_owner'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.facility_owner, '''') IS NULL GROUP BY temp_id
	UNION
	select  ''technology'', temp_id FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN static_data_value sdv ON sdv.code = a.technology AND sdv.type_id = 10009
	WHERE NULLIF(a.technology, '''') IS NULL OR sdv.value_id IS NULL GROUP BY temp_id
	UNION
	select  ''env_product'', temp_id FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.env_product
	WHERE NULLIF(a.env_product, '''') IS NULL OR spcd.source_curve_def_id IS NULL GROUP BY temp_id
	UNION
	select  ''jurisdiction'', temp_id FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN static_data_value sdv2 ON sdv2.type_id = 10002 AND sdv2.code = a.jurisdiction
	WHERE NULLIF(a.jurisdiction, '''') IS NULL OR sdv2.value_id IS NULL GROUP BY temp_id
	UNION
	select  ''first_gen_date'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(a.first_gen_date, '''') IS NULL GROUP BY temp_id
	')
	
	
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step])
	SELECT e.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			e.colname + '' not provided.'', '' Please fill in '' + e.colname + '' column and re-import'' 
	FROM (SELECT MIN(temp_id) temp_id, colname FROM #empty_col GROUP BY colname) e
	')

	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			''Book structure: '' + a.book + '','' + a.strategy + '','' + a.subsidairy + '' does not exist.'',''Please check your book structure'' , a.import_file_name
	FROM ' + @import_temp_table_name + ' a 
	INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
	INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
	--LEFT JOIN source_system_book_map ssbm ON  ssbm.fas_book_id = book.entity_id
    WHERE  --(fas_deal_type_value_id IS NULL OR fas_deal_type_value_id BETWEEN 400 AND 401) AND
	 (sub.entity_id IS NULL OR stra.entity_id IS NULL OR book.entity_id IS NULL)
	')

	EXEC('delete '+@import_temp_table_name + ' from #import_status inner join '+@import_temp_table_name + ' a on
		#import_status.temp_id=a.temp_id')
		
	--EXEC('insert into #import_status(temp_id,process_id,ErrorCode,Module,Source,type,[description],nextstep) 
	--select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
	--		''Contract: '' + a.contract + '' does not exist.'',''Please check contract setup'' 
	--FROM ' + @import_temp_table_name + ' a 
	--LEFT JOIN contract_group AS cg ON cg.contract_name = a.contract
	--WHERE cg.contract_id IS NULL
	--')
	

	--EXEC(' SELECT a.temp_id, a.generator_id, sc.source_counterparty_id, a.counterparty, cg.contract_id 
	--INTO #gen_stage	FROM ' + @import_temp_table_name + ' a 
	--LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
	--LEFT JOIN contract_group cg ON cg.contract_name = ISNULL(a.contract, a.counterparty + ''_contract'')

	----select * from #gen_stage

	---- Selecting the set of generator, counterparty and contract that ignores no mapping case or all mapping true case. 
	--INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step])
	--SELECT a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
	--		ISNULL(sc.counterparty_id, a.counterparty) + ''/'' + ISNULL(cg.contract_name, sc.counterparty_id + ''_contract'') + '' can not be mapped to '' + ISNULL(a.generator_id, ''NULL'') , '' Please correct the mapping and re-import'' 
	--FROM  #gen_stage a
	--INNER JOIN rec_generator r ON (r.id = a.generator_id  OR r.ppa_counterparty_id = ISNULL(a.source_counterparty_id, -1) OR r.ppa_contract_id = ISNULL(a.contract_id, -1))
	--AND NOT (r.id = a.generator_id  AND r.ppa_counterparty_id = ISNULL(a.source_counterparty_id, -1) AND r.ppa_contract_id = ISNULL(a.contract_id, -1))
	--LEFT JOIN source_counterparty sc ON sc.source_counterparty_id = a.source_counterparty_id
	--LEFT JOIN contract_group cg ON cg.contract_id = a.contract_id

	--')

	EXEC('delete '+@import_temp_table_name + ' from #import_status inner join '+@import_temp_table_name + ' a on
		#import_status.temp_id=a.temp_id')

	
	--	EXEC('select * from ' + @import_temp_table_name)
	--	return
	-- insert cp
	EXEC('INSERT INTO source_counterparty(source_system_id, counterparty_id, counterparty_name, counterparty_desc, is_active, int_ext_flag)
			OUTPUT INSERTED.counterparty_id INTO #inserted_cp 	
			select DISTINCT 2, a.counterparty, a.counterparty, a.counterparty, ''y'', ''e'' FROM ' + @import_temp_table_name + ' a 
			LEFT JOIN source_counterparty sc on sc.counterparty_id = a.counterparty
			WHERE sc.source_counterparty_id IS NULL	and a.counterparty IS NOT NULL
	')
	
		INSERT INTO source_system_data_import_status(process_id,code,module,source,TYPE,[description],recommendation) 
		SELECT @process_id, 'Success', 'Import Data', 'PPA_Contract_Data', 'Import Success',
		'New counterparty ' + counterparty_id +' inserted.',
		'N/A' FROM #inserted_cp

	EXEC('INSERT INTO contract_group(sub_id, contract_name, contract_date, volume_granularity, volume_uom, currency, contract_charge_type_id, term_start, term_end, contract_report_template, invoice_report_template, netting_template, energy_type, is_active, source_contract_id, source_system_id, type, invoice_due_date )
			OUTPUT INSERTED.contract_name INTO #inserted_contract 	
			select DISTINCT sub.entity_id, ISNULL(a.contract, a.counterparty + ''_Contract''), CONVERT(NVARCHAR(10),a.effective_date, 121), 980, su.source_uom_id, scy.source_currency_id, cct.contract_charge_type_id, CONVERT(NVARCHAR(10),a.effective_date, 121), CONVERT(NVARCHAR(10),a.expiration_date, 121),
			crt.template_id, crt.template_id, crt.template_id, ''p'', ''y'', ISNULL(a.contract, a.counterparty + ''_Contract''), 2, ''r'', sdv.value_id FROM ' + @import_temp_table_name + ' a 
			INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
			INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
			INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
			LEFT JOIN contract_group cg on cg.contract_name = ISNULL(a.contract, a.counterparty + ''_Contract'')
			LEFT JOIN source_uom su ON su.uom_id = ''MWh''
			LEFT JOIN source_currency scy ON scy.currency_id = ''USD''
			LEFT JOIN contract_charge_type cct ON cct.contract_charge_desc = ''Energy Cost''
			LEFT JOIN contract_report_template crt ON crt.template_name = ''Invoice Report xcel'' AND crt.template_type = 4300
			LEFT JOIN static_data_value sdv ON sdv.code = ''20 days from the date of invoice'' AND sdv.type_id = 977
			WHERE cg.contract_id IS NULL

	')

	EXEC('UPDATE a SET a.contract = i.contract_name FROM ' + @import_temp_table_name + ' a	
		  INNER JOIN #inserted_contract i ON i.contract_name = ISNULL(a.contract, a.counterparty + ''_Contract'') 
	      WHERE a.contract IS NULL
	 ')

	EXEC('UPDATE a SET a.contract = cg.contract_name FROM ' + @import_temp_table_name + ' a	
		  INNER JOIN contract_group cg ON cg.contract_name = ISNULL(a.contract, a.counterparty + ''_Contract'') 
	      WHERE a.contract IS NULL
	 ')	 
	 	 	
	INSERT INTO source_system_data_import_status(process_id,code,module,source,TYPE,[description],recommendation) 
	SELECT @process_id, 'Success', 'Import Data', 'PPA_Contract_Data', 'Import Success',
	'New contract ' + [contract_name] +' inserted.',
	'N/A' FROM #inserted_contract


	SET @sql = '
			UPDATE cca SET
					contract_id = ISNULL(cg.contract_id, cca.contract_id),
					counterparty_full_name = ISNULL(sc.counterparty_id, cca.counterparty_full_name),
					contract_start_date = ISNULL(a.Effective_Date, cca.contract_start_date),
					contract_end_date = ISNULL(a.Expiration_Date, cca.contract_end_date),
					apply_netting_rule = ''n'',
					contract_date = ISNULL(a.First_Gen_Date, cca.contract_date),
					contract_active = ''y''
			FROM ' + @import_temp_table_name + ' a
			INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
			INNER JOIN contract_group cg ON cg.contract_name = ISNULL(a.contract, a.counterparty + ''_Contract'')
			INNER JOIN counterparty_contract_address cca ON cca.counterparty_id = sc.source_counterparty_id AND cca.contract_id = cg.contract_id

	'
	EXEC(@sql)	
	
	SET @sql = ' 
			INSERT INTO counterparty_contract_address ( contract_id, counterparty_id,counterparty_full_name, contract_start_date, contract_end_date, apply_netting_rule, 
			contract_date, contract_active )
			SELECT cg.contract_id, sc.source_counterparty_id, sc.counterparty_id, a.Effective_Date, a.Expiration_Date,  --- dbo.FNAClientToSqlDate(a.Expiration_Date)
			 ''n'', a.First_Gen_Date, ''y''
			FROM ' + @import_temp_table_name + ' a
			INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
			INNER JOIN contract_group cg ON cg.contract_name = ISNULL(a.contract, a.counterparty + ''_Contract'')
			LEFT JOIN counterparty_contract_address cca ON cca.counterparty_id = sc.source_counterparty_id AND cca.contract_id = cg.contract_id
			WHERE cca.counterparty_contract_address_id IS NULL
	'
	EXEC(@sql)	


 	EXEC('INSERT INTO meter_id(recorderid, description, commodity_id )
		OUTPUT INSERTED.recorderid INTO #inserted_meter
		select DISTINCT a.meter, a.meter, sc.source_commodity_id FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN meter_id mi ON mi.recorderid = a.meter
		LEFT JOIN source_commodity sc ON sc.commodity_name = ''Electricity''
		WHERE mi.meter_id IS NULL	
	')
	
		INSERT INTO source_system_data_import_status(process_id,code,module,source,TYPE,[description],recommendation) 
		SELECT @process_id, 'Success', 'Import Data', 'PPA_Contract_Data','Import Success',
		'New meter ' + recorderid +' inserted.',
		'N/A' FROM #inserted_meter
		
 	EXEC('INSERT INTO recorder_properties(meter_id, channel, mult_factor, uom_id, channel_description )
		select DISTINCT mi.meter_id, 1, 1, su.source_uom_id, 1 FROM ' + @import_temp_table_name + ' a 
		INNER JOIN meter_id mi ON mi.recorderid = a.meter
		LEFT JOIN source_uom su ON su.uom_id = ''KWh''
		LEFT JOIN (SELECT ROW_NUMBER() OVER(ORDER BY meter_id,  channel) AS ''id'',* FROM  recorder_properties) rp 
			ON rp.meter_id = mi.meter_id and rp.channel = 1
		WHERE rp.id IS null	
		')
		
-- insert generator
	EXEC('INSERT INTO rec_generator(code, name, id, registered, fas_book_id, ppa_counterparty_id, ppa_contract_id, contract_allocation, ppa_effective_date, ppa_expiration_date, owner, technology, source_curve_def_id, state_value_id, first_gen_date, generator_type, legal_entity_value_id)
	OUTPUT INSERTED.id INTO #inserted_gen
	SELECT DISTINCT ISNULL(a.generator_unit_id, a.generator_id), ISNULL(a.generator_name, a.generator_id), a.generator_id, ''y'', book.entity_id, sc.source_counterparty_id, cg.contract_id, 1, CONVERT(NVARCHAR(10),a.effective_date, 121), CONVERT(NVARCHAR(10),a.expiration_date, 121), a.facility_owner, sdv.value_id, spcd.source_curve_def_id, sdv2.value_id, CONVERT(NVARCHAR(10),a.first_gen_date, 121), ''r'', sub.entity_id FROM ' + @import_temp_table_name + ' a 
	INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
	INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
	LEFT JOIN rec_generator r ON r.id = a.generator_id AND r.fas_book_id = book.entity_id
	INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
	INNER JOIN contract_group cg ON cg.contract_name = a.contract
	LEFT JOIN static_data_value sdv ON sdv.type_id = 10009 AND sdv.code = a.technology
	LEFT JOIN static_data_value sdv2 ON sdv2.type_id = 10002 AND sdv2.code = a.jurisdiction
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.env_product
    WHERE r.generator_id IS NULL
	')

	INSERT INTO source_system_data_import_status(process_id,code,module,source,TYPE,[description],recommendation) 
	SELECT @process_id, 'Success', 'Import Data', 'PPA_Contract_Data', 'Import Success',
	'New generator ' + generator_id +' inserted.',
	'N/A' FROM #inserted_gen
		
-- update generator
	EXEC('UPDATE r set 
	--r.ppa_counterparty_id = sc.source_counterparty_id, r.ppa_contract_id = cg.contract_id, 
	r.contract_allocation = 1, r.ppa_effective_date = CONVERT(NVARCHAR(10),a.effective_date, 121), r.ppa_expiration_date = CONVERT(NVARCHAR(10),a.expiration_date, 121), r.owner = a.facility_owner, r.technology = sdv.value_id, r.source_curve_def_id = spcd.source_curve_def_id, r.state_value_id = sdv2.value_id, r.first_gen_date = CONVERT(NVARCHAR(10),a.first_gen_date, 121)  
	      FROM ' + @import_temp_table_name + ' a 
	INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
	INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
	INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
	INNER JOIN contract_group cg ON cg.contract_name = a.contract
	INNER JOIN rec_generator r ON r.id = a.generator_id AND r.fas_book_id = book.entity_id AND r.ppa_counterparty_id = sc.source_counterparty_id AND
	r.ppa_contract_id = cg.contract_id

	LEFT JOIN static_data_value sdv ON sdv.type_id = 10009 AND sdv.code = a.technology
	LEFT JOIN static_data_value sdv2 ON sdv2.type_id = 10002 AND sdv2.code = a.jurisdiction
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.env_product
	')

	---- contract meters mapping insertion
	--DECLARE @contract_meter_map_id NVARCHAR(10) = NULL
	--SELECT @contract_meter_map_id = mapping_table_id FROM generic_mapping_header WHERE mapping_name = 'Contract Meters'	

	--IF @contract_meter_map_id IS NOT NULL
	--BEGIN
	--	EXEC(' UPDATE gmv set gmv.clm4_value = mi.meter_id FROM ' + @import_temp_table_name + ' a 
	--	INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
	--	INNER JOIN contract_group cg ON cg.contract_name = a.contract
	--	INNER JOIN meter_id mi ON mi.recorderid = a.meter
	--	INNER JOIN generic_mapping_values gmv ON gmv.clm1_value = sc.source_counterparty_id AND gmv.clm2_value = cg.contract_id AND gmv.clm3_value = ''MeterData'' AND	gmv.mapping_table_id = ' + @contract_meter_map_id )

	--	EXEC(' INSERT INTO generic_mapping_values (mapping_table_id, clm1_value, clm2_value, clm3_value, clm4_value)
	--	SELECT ' + @contract_meter_map_id + ', sc.source_counterparty_id, cg.contract_id, ''MeterData'', mi.meter_id  FROM ' + @import_temp_table_name + ' a
	--	INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
	--	INNER JOIN contract_group cg ON cg.contract_name = a.contract
	--	INNER JOIN meter_id mi ON mi.recorderid = a.meter
	--	LEFT JOIN generic_mapping_values gmv ON gmv.clm1_value = sc.source_counterparty_id AND gmv.clm2_value = cg.contract_id AND gmv.clm3_value = ''MeterData'' AND	gmv.clm4_value = mi.meter_id AND gmv.mapping_table_id = ' + @contract_meter_map_id + '
	--	WHERE gmv.generic_mapping_values_id IS NULL' )

	--END

	EXEC('INSERT INTO recorder_generator_map(generator_id, meter_id, allocation_per, recorderid)
	SELECT r.generator_id, mi.meter_id, 1, mi.recorderid
	FROM ' + @import_temp_table_name + ' a 
	INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
	INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
	INNER JOIN rec_generator r ON r.id = a.generator_id AND r.fas_book_id = book.entity_id
	INNER JOIN meter_id mi ON mi.recorderid = a.meter
	LEFT JOIN recorder_generator_map rgm ON rgm.generator_id = r.generator_id
	WHERE rgm.id IS NULL
	')

	EXEC('
	UPDATE rgm SET rgm.meter_id = mi.meter_id, rgm.recorderid = mi.recorderid, rgm.allocation_per = 1
	FROM ' + @import_temp_table_name + ' a 
	INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
	INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
	INNER JOIN rec_generator r ON r.id = a.generator_id AND r.fas_book_id = book.entity_id
	INNER JOIN meter_id mi ON mi.recorderid = a.meter
	INNER JOIN recorder_generator_map rgm ON rgm.generator_id = r.generator_id --AND rgm.meter_id = mi.meter_id
	--LEFT JOIN recorder_generator_map rgm ON rgm.generator_id = r.generator_id AND rgm.meter_id = mi.meter_id 
	--WHERE rgm.id IS NULL
	')

	--Energy price curve insertion
	EXEC ('INSERT INTO source_price_curve_def(source_system_id, curve_id, curve_name, curve_des, commodity_id,market_value_id,source_currency_id, source_curve_type_value_id, uom_id,Granularity, is_active, Forward_Settle)
	OUTPUT INSERTED.curve_id, ''EnergyPrice'' INTO #inserted_curve 	
	SELECT 2, cp.counterparty_id + ''_'' + a.contract + ''_EnergyPrice'', cp.counterparty_id + ''_'' + a.contract + ''_EnergyPrice'', cp.counterparty_id + ''_'' + a.contract + ''_EnergyPrice'', sc.source_commodity_id, NULL, sy.source_currency_id, sdv.value_id, su.source_uom_id, 980, ''y'', ''s''
	 FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_counterparty cp ON a.counterparty = cp.counterparty_id
	INNER JOIN source_commodity sc ON sc.commodity_name = ''Electricity'' AND sc.source_system_id = 2
	INNER JOIN source_currency sy ON sy.currency_id = ''USD'' AND sy.source_system_id = 2
	INNER JOIN static_data_value sdv ON sdv.code = ''Commodity Curve'' AND sdv.type_id = 575
	INNER JOIN source_uom su ON su.uom_id = ''MWh'' AND su.source_system_id = 2
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = cp.counterparty_id + ''_'' + a.contract + ''_EnergyPrice'' AND spcd.source_system_id = 2
	WHERE spcd.source_curve_def_id IS NULL
	')

	--Escalation rate curve insertion
	EXEC ('INSERT INTO source_price_curve_def(source_system_id, curve_id, curve_name, curve_des, commodity_id,market_value_id,source_currency_id, source_curve_type_value_id, uom_id,Granularity, is_active, Forward_Settle)
	OUTPUT INSERTED.curve_id, ''Escalation'' INTO #inserted_curve 	
	SELECT 2, cp.counterparty_id + ''_'' + a.contract + ''_Escalation'', cp.counterparty_id + ''_'' + a.contract + ''_Escalation'', cp.counterparty_id + ''_'' + a.contract + ''_Escalation'', sc.source_commodity_id, NULL, sy.source_currency_id, sdv.value_id, su.source_uom_id, 980, ''y'', ''s''
	 FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_counterparty cp ON a.counterparty = cp.counterparty_id
	INNER JOIN source_commodity sc ON sc.commodity_name = ''Electricity'' AND sc.source_system_id = 2
	INNER JOIN source_currency sy ON sy.currency_id = ''USD'' AND sy.source_system_id = 2
	INNER JOIN static_data_value sdv ON sdv.code = ''Commodity Curve'' AND sdv.type_id = 575
	INNER JOIN source_uom su ON su.uom_id = ''MWh'' AND su.source_system_id = 2
	LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = cp.counterparty_id + ''_'' + a.contract + ''_Escalation'' AND spcd.source_system_id = 2
	WHERE spcd.source_curve_def_id IS NULL
	')

	DECLARE @ca_role_id NVARCHAR(10)
	SELECT @ca_role_id = role_id FROM application_security_role asr WHERE asr.role_name = 'Contract Administration'

	IF @ca_role_id IS NOT NULL AND EXISTS (SELECT 1 FROM #inserted_curve)
	BEGIN
		EXEC('INSERT INTO source_price_curve_def_privilege(source_curve_def_id, sub_entity_id, role_id)
		SELECT spcd.source_curve_def_id, sub.entity_id, ' + @ca_role_id + '
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #inserted_curve i ON i.curve_id = a.counterparty + ''_'' + a.contract + ''_EnergyPrice''
		INNER JOIN source_price_curve_def spcd ON spcd.curve_id = i.curve_id
		INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
		INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
		INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
		LEFT JOIN source_price_curve_def_privilege spcdp ON spcdp.source_curve_def_id = spcd.source_curve_def_id AND 
		spcdp.sub_entity_id = sub.entity_id AND spcdp.role_id = '	+ @ca_role_id + '
		WHERE spcdp.id IS NULL
		')
	
		EXEC('INSERT INTO source_price_curve_def_privilege(source_curve_def_id, sub_entity_id, role_id)
		SELECT spcd.source_curve_def_id, sub.entity_id, ' + @ca_role_id + '
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #inserted_curve i ON i.curve_id = a.counterparty + ''_'' + a.contract + ''_Escalation''
		INNER JOIN source_price_curve_def spcd ON spcd.curve_id = i.curve_id
		INNER JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
		INNER JOIN Portfolio_hierarchy stra(NOLOCK)	ON  book.parent_entity_id = stra.entity_id AND stra.entity_name = a.strategy
		INNER JOIN portfolio_hierarchy sub (NOLOCK)	ON  stra.parent_entity_id = sub.entity_id AND sub.entity_name = a.subsidairy
		LEFT JOIN source_price_curve_def_privilege spcdp ON spcdp.source_curve_def_id = spcd.source_curve_def_id AND 
		spcdp.sub_entity_id = sub.entity_id AND spcdp.role_id = '	+ @ca_role_id + '
		WHERE spcdp.id IS NULL
		')
	END
	-- contract curves mapping insertion
	DECLARE @contract_curve_map_id NVARCHAR(10) = NULL
	SELECT @contract_curve_map_id = mapping_table_id FROM generic_mapping_header WHERE mapping_name = 'Contract Curves'	

	IF @contract_curve_map_id IS NOT NULL
	BEGIN
		EXEC(' INSERT INTO generic_mapping_values (mapping_table_id, clm1_value, clm2_value, clm3_value, clm4_value)
		SELECT ' + @contract_curve_map_id + ', sc.source_counterparty_id, cg.contract_id, ''EnergyPrice'', spcd.source_curve_def_id FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
		INNER JOIN contract_group cg ON cg.contract_name = a.contract
		--INNER JOIN #inserted_curve i ON i.logical_name = ''EnergyPrice''
		INNER JOIN source_price_curve_def spcd ON spcd.curve_id = sc.counterparty_id + ''_'' + cg.contract_name + ''_EnergyPrice''
		LEFT JOIN generic_mapping_values gmv ON gmv.clm1_value = sc.source_counterparty_id AND gmv.clm2_value = cg.contract_id AND gmv.clm3_value = ''EnergyPrice''		AND gmv.clm4_value = spcd.source_curve_def_id AND gmv.mapping_table_id = ' + @contract_curve_map_id + '
		WHERE gmv.generic_mapping_values_id IS NULL
		')

		EXEC(' INSERT INTO generic_mapping_values (mapping_table_id, clm1_value, clm2_value, clm3_value, clm4_value)
		SELECT ' + @contract_curve_map_id + ', sc.source_counterparty_id, cg.contract_id, ''Escalation'', spcd.source_curve_def_id FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty
		INNER JOIN contract_group cg ON cg.contract_name = a.contract
		--INNER JOIN #inserted_curve i ON i.logical_name = ''Escalation''
		INNER JOIN source_price_curve_def spcd ON spcd.curve_id = sc.counterparty_id + ''_'' + cg.contract_name + ''_Escalation''
		LEFT JOIN generic_mapping_values gmv ON gmv.clm1_value = sc.source_counterparty_id AND gmv.clm2_value = cg.contract_id AND gmv.clm3_value = ''Escalation'' AND	gmv.clm4_value = spcd.source_curve_def_id AND gmv.mapping_table_id = ' + @contract_curve_map_id + '
		WHERE gmv.generic_mapping_values_id IS NULL
		')

	END
 	        
 	        

END

IF @table_name = 'ixp_jurisdiction_eligibility'
BEGIN
 	 --validation for blank jurisdiction code
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Jurisdiction Code cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.code IS NULL')
 	
 	 --validation for blank from_year
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''From Year cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.from_year IS NULL')	
 		  
 	--validation for blank to_year
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''To Year cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.to_year IS NULL')		    
 		  
 	--validation for blank state
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''State cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.state IS NULL')
 		  
 	--validation for blank technology
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Technology cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.technology IS NULL')	  
 		  
 	--validation for duplicate data in csv file
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT DISTINCT b.temp_id,
 					 ''' + @process_id + ''',
 					 ''Error'',
 					 ''Import Data'',
 					 ''' + @table_name + ''',
 					 ''Data Error'',
 					 ''Dulicate Data in the CSV file.'',
 					 ''Please check your Data'',
 					 b.import_file_name
		FROM ' + @import_temp_table_name + ' b
		INNER JOIN (
			SELECT a.[code],
					a.[state],
					a.[technology_sub_type],
					a.[tier],
					a.[sub_tier],
					a.[technology],  
				   COUNT(1) count
			FROM ' + @import_temp_table_name + ' a
			GROUP BY a.[code],
					a.[state],
					a.[technology_sub_type],
					a.[tier],
					a.[sub_tier],
					a.[technology]
			HAVING COUNT(1) > 1
		) c ON b.[code] = c.[code]  
			   AND b.[state] = c.[state]
			   AND b.[technology_sub_type] = c.[technology_sub_type]
			   AND b.[tier] = c.[tier]
			   AND b.[sub_tier] = c.[sub_tier]
			   AND b.[technology] = c.[technology]
 	')	  		  
 	
 	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE ' + @import_temp_table_name + '
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')
		
	EXEC ('
		UPDATE b 
		SET b.from_year = a.from_year,
			b.to_year = a.to_year 
		FROM ' + @import_temp_table_name + ' a
			INNER JOIN static_data_value sdv_juris ON sdv_juris.code  = a.code AND sdv_juris.type_id = 10002  --Jurisdiction
			LEFT JOIN static_data_value sdv_state ON sdv_state.code  = a.state AND sdv_state.type_id = 10016  --State
			LEFT JOIN static_data_value sdv_tech ON sdv_tech.code  = a.technology AND sdv_tech.type_id = 10009  --technology
			LEFT JOIN static_data_value sdv_tech_sub ON sdv_tech_sub.code  = a.technology_sub_type AND sdv_tech_sub.type_id = 13000  --technology sub type
			LEFT JOIN static_data_value sdv_tier ON sdv_tier.code  = a.tier AND sdv_tier.type_id = 15000  --tier
			LEFT JOIN static_data_value sdv_sub_tier ON sdv_sub_tier.code  = a.sub_tier AND sdv_sub_tier.type_id = 101800  --sub tier
			INNER JOIN rec_gen_eligibility b 
				ON  ISNULL(b.gen_state_value_id,'''') = ISNULL(sdv_state.value_id,'''')
				AND ISNULL(b.technology,'''') = ISNULL(sdv_tech.value_id,'''')
				AND ISNULL(b.technology_sub_type,'''') = ISNULL(sdv_tech_sub.value_id,'''')
				AND ISNULL(b.tier_type,'''') = ISNULL(sdv_tier.value_id,'''')
				AND ISNULL(b.sub_tier_value_id,'''') = ISNULL(sdv_sub_tier.value_id,'''')
				AND ISNULL(b.state_value_id,'''') = ISNULL(sdv_juris.value_id,'''')
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL
	')
	
	EXEC('
		INSERT INTO rec_gen_eligibility (state_value_id,gen_state_value_id, from_year, to_year, technology, technology_sub_type, tier_type, sub_tier_value_id )
		SELECT   sdv_juris.value_id,sdv_state.value_id, a.from_year, a.to_year, sdv_tech.value_id,  sdv_tech_sub.value_id, sdv_tier.value_id, sdv_sub_tier.value_id
		FROM ' + @import_temp_table_name + ' a		
		INNER JOIN static_data_value sdv_juris ON sdv_juris.code  = a.code AND sdv_juris.type_id = 10002  --Jurisdiction
			LEFT JOIN static_data_value sdv_state ON sdv_state.code  = a.state AND sdv_state.type_id = 10016  --State
			LEFT JOIN static_data_value sdv_tech ON sdv_tech.code  = a.technology AND sdv_tech.type_id = 10009  --technology
			LEFT JOIN static_data_value sdv_tech_sub ON sdv_tech_sub.code  = a.technology_sub_type AND sdv_tech_sub.type_id = 13000  --technology sub type
			LEFT JOIN static_data_value sdv_tier ON sdv_tier.code  = a.tier AND sdv_tier.type_id = 15000  --tier
			LEFT JOIN static_data_value sdv_sub_tier ON sdv_sub_tier.code  = a.sub_tier AND sdv_sub_tier.type_id = 101800  --sub tier
			LEFT JOIN rec_gen_eligibility b 
				ON ISNULL(b.gen_state_value_id,'''') = ISNULL(sdv_state.value_id,'''')
				AND ISNULL(b.technology,'''') = ISNULL(sdv_tech.value_id,'''')
				AND ISNULL(b.technology_sub_type,'''') = ISNULL(sdv_tech_sub.value_id,'''')
				AND ISNULL(b.tier_type,'''') = ISNULL(sdv_tier.value_id,'''')
				AND ISNULL(b.sub_tier_value_id,'''') = ISNULL(sdv_sub_tier.value_id,'''')
				AND ISNULL(b.state_value_id,'''') = ISNULL(sdv_juris.value_id,'''')
			WHERE b.id IS NULL 
	')	
	
END

IF @table_name = 'ixp_compliance_jurisdiction'
BEGIN
	
	/***update user date to sql date***/

	EXEC('UPDATE a
		SET program_beginning_date = dd.sql_date_value
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd
		ON a.program_beginning_date = dd.user_date
	')
	/***END OF date update***/ 

	--Validation for Data Repetition: duplicate Jurisdiction code
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
 	            10007,
 	              dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction Code''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.code),
 	            a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
		  INNER JOIN (SELECT a.[code], 
							 COUNT(1) notimes
					  FROM ' + @import_temp_table_name + ' a
					  GROUP BY a.[code]
					  HAVING COUNT(1) > 1
		) b ON a.[code] = b.[code]  
	')
	
	--Data type validation
	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''state_properties'', ''begin_date'', ''program_beginning_date'')') 
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
			VALUES (''rec_generator'', ''generator'', ''a.generator = b.name'', ''e''),
			(''static_data_value'', ''program_scope'', ''a.program_scope = b.code AND b.type_id = 3100'', ''W''),		
			(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''e'')
		')
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'
	
	--Validate for mandatory fields: Jurisdiction, description
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10001,
		  CASE 
			WHEN a.code IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Juristiction Code'')
			WHEN a.description IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Description'')			
		  END
 		  ,a.import_file_name
		  FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND (a.code IS NULL OR
				   a.description IS NULL)				   				
	')
 	
	-- month validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''From Month''), ''<column_value>'', a.from_month),
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  WHERE NULLIF(a.from_month, '' '') IS NOT NULL
		  AND a.from_month NOT IN (''Jan'',''Feb'',''Mar'',''Apr'',''May'',''Jun'',''Jul'',''Aug'',''Sep'',''Oct'',''Nov'',''Dec'',''January'',
							''February'',''March'',''April'',''June'',''July'',''August'',''September'',''October'',''November'',''December'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''To Month''), ''<column_value>'', a.to_month),
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  WHERE NULLIF(a.to_month, '' '') IS NOT NULL
		  AND a.to_month NOT IN (''Jan'',''Feb'',''Mar'',''Apr'',''May'',''Jun'',''Jul'',''Aug'',''Sep'',''Oct'',''Nov'',''Dec'',''January'',
							''February'',''March'',''April'',''June'',''July'',''August'',''September'',''October'',''November'',''December'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Region''), ''<column_value>'', split_reg.item),
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  OUTER APPLY (SELECT item from dbo.SplitCommaSeperatedValues(a.region)) split_reg
		  LEFT JOIN static_data_value b ON split_reg.item = b.code AND b.type_id = 11150
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL AND b.value_id IS NULL AND a.region IS NOT NULL
	')

 	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE a
 	      FROM #error_status
		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')
		
	EXEC ('
		UPDATE b 
		SET b.description = a.description 
		FROM ' + @import_temp_table_name + ' a
			INNER JOIN static_data_value b ON b.code  = a.code AND b.type_id = 10002  --Jurisdiction  
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL
	')	
	
	EXEC('
		INSERT INTO static_data_value (type_id,code,description)
		SELECT   10002,a.code,a.description 
		FROM ' + @import_temp_table_name + ' a		
		LEFT JOIN static_data_value b ON b.code  = a.code AND b.type_id = 10002  --Jurisdiction   
			WHERE b.value_id IS NULL 
	')	
	
	--Replaceing space between comma for region values
	EXEC('
		  UPDATE ' + @import_temp_table_name + '
		  SET region = REPLACE(region,'', '','','')
		')
	--End
	
	EXEC ('
		UPDATE sp 
		SET sp.begin_date = a.program_beginning_date,
			sp.calendar_from_month = CASE WHEN a.from_month LIKE ''%Jan%'' THEN 1 
										  WHEN a.from_month LIKE ''%Feb%'' THEN 2
										  WHEN a.from_month LIKE ''%Mar%'' THEN 3
										  WHEN a.from_month LIKE ''%Apr%'' THEN 4
										  WHEN a.from_month LIKE ''%May%'' THEN 5
										  WHEN a.from_month LIKE ''%Jun%'' THEN 6
										  WHEN a.from_month LIKE ''%Jul%'' THEN 7
										  WHEN a.from_month LIKE ''%Aug%'' THEN 8
										  WHEN a.from_month LIKE ''%Sep%'' THEN 9
										  WHEN a.from_month LIKE ''%Oct%'' THEN 10
										  WHEN a.from_month LIKE ''%Nov%'' THEN 11
										  WHEN a.from_month LIKE ''%Dec%'' THEN 12
										  ELSE NULL
			                         END,
			sp.calendar_to_month = CASE   WHEN a.to_month LIKE ''%Jan%'' THEN 1 
										  WHEN a.to_month LIKE ''%Feb%'' THEN 2
										  WHEN a.to_month LIKE ''%Mar%'' THEN 3
										  WHEN a.to_month LIKE ''%Apr%'' THEN 4
										  WHEN a.to_month LIKE ''%May%'' THEN 5
										  WHEN a.to_month LIKE ''%Jun%'' THEN 6
										  WHEN a.to_month LIKE ''%Jul%'' THEN 7
										  WHEN a.to_month LIKE ''%Aug%'' THEN 8
										  WHEN a.to_month LIKE ''%Sep%'' THEN 9
										  WHEN a.to_month LIKE ''%Oct%'' THEN 10
										  WHEN a.to_month LIKE ''%Nov%'' THEN 11
										  WHEN a.to_month LIKE ''%Dec%'' THEN 12
										  ELSE NULL 
			                         END,
			sp.duration = a.allowance,
			sp.region_id = region.region_ids,
			sp.program_scope = sdv_ps.value_id, 
			sp.current_next_year  = Case WHEN a.current_next_year  = ''Next Year'' then ''n''
									WHEN  a.current_next_year  = ''Current Year'' then ''c''
			ELSE NULL END                   
			                         			 
		FROM ' + @import_temp_table_name + ' a
			INNER JOIN static_data_value b ON b.code  = a.code AND b.type_id = 10002  --Jurisdiction 
			INNER JOIN state_properties sp ON sp.state_value_id = b.value_id 
			LEFT JOIN static_data_value sdv_ps ON sdv_ps.code = a.program_scope and sdv_ps.type_id = 3100
			OUTER APPLY (
				 SELECT SM.code,
					   (
						   SELECT '',''+CAST(CM.value_id AS NVARCHAR(100))
						   FROM static_data_value as CM
						   WHERE '',''+CAST(SM.region AS NVARCHAR(100))+'','' LIKE ''%,''+CAST(CM.code AS NVARCHAR(100))+'',%''
						   FOR xml path(''''), type
					   ).value(''substring(text()[1], 2)'', ''NVARCHAR(max)'') as region_ids
				from ' + @import_temp_table_name + ' as SM
			) region 
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL AND a.code = region.code
	')	
	
	EXEC('
		INSERT INTO state_properties (state_value_id,begin_date,calendar_from_month,calendar_to_month,duration,region_id,program_scope,current_next_year)
		SELECT 
			b.value_id,
			a.program_beginning_date,
			CASE WHEN a.from_month LIKE ''%Jan%'' THEN 1 
				WHEN a.from_month LIKE ''%Feb%'' THEN 2
				WHEN a.from_month LIKE ''%Mar%'' THEN 3
				WHEN a.from_month LIKE ''%Apr%'' THEN 4
				WHEN a.from_month LIKE ''%May%'' THEN 5
				WHEN a.from_month LIKE ''%Jun%'' THEN 6
				WHEN a.from_month LIKE ''%Jul%'' THEN 7
				WHEN a.from_month LIKE ''%Aug%'' THEN 8
				WHEN a.from_month LIKE ''%Sep%'' THEN 9
				WHEN a.from_month LIKE ''%Oct%'' THEN 10
				WHEN a.from_month LIKE ''%Nov%'' THEN 11
				WHEN a.from_month LIKE ''%Dec%'' THEN 12
				ELSE NULL
			END,
			CASE   WHEN a.to_month LIKE ''%Jan%'' THEN 1 
				WHEN a.to_month LIKE ''%Feb%'' THEN 2
				WHEN a.to_month LIKE ''%Mar%'' THEN 3
				WHEN a.to_month LIKE ''%Apr%'' THEN 4
				WHEN a.to_month LIKE ''%May%'' THEN 5
				WHEN a.to_month LIKE ''%Jun%'' THEN 6
				WHEN a.to_month LIKE ''%Jul%'' THEN 7
				WHEN a.to_month LIKE ''%Aug%'' THEN 8
				WHEN a.to_month LIKE ''%Sep%'' THEN 9
				WHEN a.to_month LIKE ''%Oct%'' THEN 10
				WHEN a.to_month LIKE ''%Nov%'' THEN 11
				WHEN a.to_month LIKE ''%Dec%'' THEN 12
				ELSE NULL 
			END,
			a.allowance,
			region.region_ids,
			sdv_ps.value_id,
			Case WHEN a.current_next_year  = ''Next Year'' then ''n''
			WHEN  a.current_next_year  = ''Current Year'' then ''c''
			ELSE NULL END                          
			                         			 
		FROM ' + @import_temp_table_name + ' a
			INNER JOIN static_data_value b ON b.code  = a.code AND b.type_id = 10002  --Jurisdiction 
			LEFT JOIN state_properties sp ON sp.state_value_id = b.value_id 
			LEFT JOIN static_data_value sdv_ps ON sdv_ps.code = a.program_scope and sdv_ps.type_id = 3100
			OUTER APPLY (
				 SELECT SM.code,
					   (
						   SELECT '',''+CAST(CM.value_id AS NVARCHAR(100))
						   FROM static_data_value as CM
						   WHERE '',''+CAST(SM.region AS NVARCHAR(100))+'','' LIKE ''%,''+CAST(CM.code AS NVARCHAR(100))+'',%''
						   FOR xml path(''''), type
					   ).value(''substring(text()[1], 2)'', ''NVARCHAR(max)'') as region_ids
				from ' + @import_temp_table_name + ' as SM
			) region 
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id 
			WHERE sp.state_value_id IS NULL	AND a.code = region.code
	')	
	 
END

IF @table_name = 'ixp_recovery_rate'
BEGIN
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET effective_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.effective_date = dd.user_date
	')
	/***END OF date update***/
	EXEC ('DELETE ' + @field_compare_table)
 	
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''default_recovery_rate'',''rate'',''rate'')') 
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''default_recovery_rate'',''months'',''months'')') 
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a' 

	EXEC(@sql)

	--validation for invalid rating type
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10002,
				 ''
				 {
				 "column_name": "'' + scm.source_column_name + ''",
				 "column_value": "'' + a.rating_type +''"
				 }
				 '',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  CROSS APPLY ( SELECT source_column_name 
						FROM #source_file_column_table 
						WHERE ixp_columns_name = ''rating_type'' 
		  ) scm
		  LEFT JOIN static_data_type AS sdt 
			  ON a.rating_type = sdt.type_name
			WHERE sdt.type_id IS NULL
	 ')

	 EXEC('DELETE a FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN static_data_type AS sdt 
			  ON a.rating_type = sdt.type_name
			WHERE sdt.type_id IS NULL
		')

	--validation for invalid debt rating mapped
 	SET @sql = '
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
			10011,
			''{
				"column_name": "Debt Rating",
				"column_value": "'' + a.debt_rating + ''",
				"column_name1": "Rating Type",
				"column_value1": "'' + a.rating_type + ''"
			}'',
 			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN static_data_type AS sdt 
		ON a.rating_type = sdt.type_name
		LEFT JOIN static_data_value sdv 
			ON sdv.code = a.[debt_rating] 
			AND sdv.TYPE_ID = sdt.type_id  
		WHERE sdv.value_id IS NULL
	'
 	EXEC(@sql)

	--validation for rate greater than 1
		EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10010,
		  ''
		  {
		  "column_name": "'' + scm.source_column_name + ''",
		  "column_value": "'' + a.rate +''",
		  "check_value": "1"
		  }
		  '',
 			a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''rate'' 
          ) scm
		  WHERE ISNUMERIC (a.rate) = 1
		  AND CAST(a.rate AS FLOAT) > 1
		  ')
	
	EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a ON  es.temp_id = a.temp_id  
        LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''
		')

	EXEC ('
		UPDATE b 
		SET b.rate = a.rate
		FROM default_recovery_rate b
			INNER JOIN ' + @import_temp_table_name + ' a
				ON a.[effective_date] = b.effective_date 
				AND a.months = b.months
			INNER JOIN static_data_type AS sdt ON a.rating_type = sdt.type_name
			INNER JOIN static_data_value sdv 
				ON sdv.code = a.[debt_rating] 
					AND sdv.type_id = sdt.type_id 
					AND sdv.value_id = b.debt_rating
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL
	')
	
	EXEC('
		INSERT INTO default_recovery_rate (effective_date, debt_rating, recovery, months, rate)
		SELECT CAST(a.[effective_date] AS DATETIME) effective_date, 
			   sdv.value_id, 
			   ''n'' recovery,
			   a.Months, 
			   a.rate	   
		FROM ' + @import_temp_table_name + ' a		
		INNER JOIN static_data_type AS sdt ON a.rating_type = sdt.type_name
		INNER JOIN static_data_value sdv ON sdv.type_id = sdt.type_id AND a.debt_rating = sdv.code
		LEFT JOIN default_recovery_rate drr ON a.[effective_date] = drr.effective_date AND a.months = drr.months AND drr.debt_rating = sdv.value_id
		LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND drr.id IS NULL
	')
END

IF @table_name = 'ixp_source_deal_pnl'
BEGIN
	
	--validation for blank reference id	
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Both Source Deal Header ID and Reference ID cannot be blank.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.reference_id IS NULL AND a.source_deal_header_id IS NULL')
 	
 	--validation for blank leg		  
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for leg: '' + ISNULL(a.leg, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.leg IS NULL' )	  
 		  
	--validation for blank pnl_as_of_date		  
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for as_of_date: '' + ISNULL(a.pnl_as_of_date, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.pnl_as_of_date IS NULL' )	
 	
 	--validation for blank term_start		  
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for term_start: '' + ISNULL(a.term_start, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.term_start IS NULL' )	
 	
 	--validation for blank term_end		  
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for term_end: '' + ISNULL(a.term_end, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.term_end IS NULL' )
		  
	--validation for valid As of date format
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for As of Date: '' + ISNULL(a.pnl_as_of_date, ''NULL'') + '' is not a valid user date format.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND dbo.FNAIsValidClientDate(pnl_as_of_date) = 0 
	')

	--validation for valid term_start format
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Term Start: '' + ISNULL(a.term_start, ''NULL'') + '' is not a valid user date format.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND dbo.FNAIsValidClientDate(term_start) = 0 
	')
	 
	--validation for valid term_end format
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Term End: '' + ISNULL(a.term_end, ''NULL'') + '' is not a valid user date format.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND dbo.FNAIsValidClientDate(term_end) = 0 
	')	  	  
 		  
 	--validation for blank pnl_currency
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for pnl_currency: '' + ISNULL(a.pnl_currency, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.pnl_currency IS NULL' )	
 		  
 	--validation for blank pnl_conversion_factor
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for pnl_conversion_factor: '' + ISNULL(a.pnl_conversion_factor, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.pnl_conversion_factor IS NULL' )	
 	
 	--validation for blank und_pnl
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for und_pnl: '' + ISNULL(a.und_pnl, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.und_pnl IS NULL' )		  	  	  
 		  	  
	--validation for blank dis_pnl
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for dis_pnl: '' + ISNULL(a.dis_pnl, ''NULL'') + '' is not allowed.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a WHERE a.dis_pnl IS NULL' )	
 		  
 	--validation for same combination of reference_id, leg , term_start, pnl_as_of_date, term_end
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for same combination of pnl_as_of_date: '' + ISNULL(a.pnl_as_of_date, ''NULL'') + '', reference_id: '' + ISNULL(a.reference_id, ''NULL'') + '', leg: '' + ISNULL(a.leg, ''NULL'') + '', term_start: '' + ISNULL(a.term_start, ''NULL'') + '', term_end: '' + ISNULL(a.term_end, ''NULL'') + '' is not allowed.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 	
 		  
 		    INNER JOIN (
 				  SELECT reference_id, leg, term_start, pnl_as_of_date, term_end, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY reference_id, leg , term_start, pnl_as_of_date, term_end
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.reference_id = b.reference_id AND a.leg = b.leg AND a.term_start = b.term_start AND a.pnl_as_of_date = b.pnl_as_of_date AND a.term_end = b.term_end')

	--validation for same combination of source_deal_header_id, leg , term_start, pnl_as_of_date, term_end
 	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for same combination of pnl_as_of_date: '' + ISNULL(a.pnl_as_of_date, ''NULL'') + '', reference_id: '' + ISNULL(a.source_deal_header_id, ''NULL'') + '', leg: '' + ISNULL(a.leg, ''NULL'') + '', term_start: '' + ISNULL(a.term_start, ''NULL'') + '', term_end: '' + ISNULL(a.term_end, ''NULL'') + '' is not allowed.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a 	
 		  
 		    INNER JOIN (
 				  SELECT source_deal_header_id, leg, term_start, pnl_as_of_date, term_end, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY source_deal_header_id, leg , term_start, pnl_as_of_date, term_end
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.source_deal_header_id = b.source_deal_header_id AND a.leg = b.leg AND a.term_start = b.term_start AND a.pnl_as_of_date = b.pnl_as_of_date AND a.term_end = b.term_end')
 	

	--Validation for Reference ID not present in the system
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Reference ID: '' + ISNULL(a.reference_id, ''NULL'') + '' is not present in the system.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id 
		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND sdh.source_deal_header_id IS NULL AND a.reference_id IS NOT NULL
	')
	
	--Validation for Deal ID not present in the system and reference id is null
	EXEC ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Deal ID: '' + ISNULL(a.source_deal_header_id, ''NULL'') + '' is not present in the system.'', 
 				''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN source_deal_header sdh ON sdh.source_deal_header_id = a.source_deal_header_id
		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND sdh.source_deal_header_id IS NULL AND a.reference_id IS NULL
	')

	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE ' + @import_temp_table_name + '
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id') 

	EXEC(' UPDATE ' + @import_temp_table_name + '
		SET pnl_as_of_date = dbo.FNAClientToSqlDate(pnl_as_of_date),
		term_start = dbo.FNAClientToSqlDate(term_start),
		term_end = dbo.FNAClientToSqlDate(term_end)')		
	 	
 	EXEC ('
 		SELECT DISTINCT(sdh.source_deal_header_id) 
		INTO #collect_sdh_id
		FROM 
 		( SELECT sdh.source_deal_header_id
		FROM ' + @import_temp_table_name + ' a 
				INNER JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id
		UNION 
		SELECT sdh.source_deal_header_id
		FROM ' + @import_temp_table_name + ' a 
				INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = a.source_Deal_header_id ) sdh
			  
 		DELETE sdp FROM source_deal_pnl sdp 
 		INNER JOIN  ' + @import_temp_table_name + ' a
 		ON a.leg = sdp.leg 
			AND a.term_start = sdp.term_start 
			AND a.pnl_as_of_date = sdp.pnl_as_of_date 
			AND a.term_end = sdp.term_end
		WHERE sdp.source_deal_header_id IN (SELECT source_deal_header_id FROM #collect_sdh_id)
		
		DELETE sdp FROM source_deal_pnl_detail sdp 
 		INNER JOIN  ' + @import_temp_table_name + ' a
 		ON a.leg = sdp.leg 
			AND a.term_start = sdp.term_start 
			AND a.pnl_as_of_date = sdp.pnl_as_of_date 
			AND a.term_end = sdp.term_end
		WHERE sdp.source_deal_header_id IN (SELECT source_deal_header_id FROM #collect_sdh_id)
		')
 	 	
 	--Insert into physical table
 	EXEC (	'
 		INSERT INTO source_deal_pnl (contract_value
			, deal_volume
			, dis_contract_value
			, dis_extrinisic_pnl
			, dis_intrinsic_pnl
			, dis_market_value
			, dis_pnl
			, leg
			, market_value
			, pnl_adjustment_value
			, pnl_as_of_date
			, pnl_conversion_factor
			, pnl_currency_id
			, pnl_source_value_id
			, source_deal_header_id
			, term_end
			, term_start
			, und_extrinsic_pnl
			, und_intrinsic_pnl
			, und_pnl
			, und_pnl_set
			, create_user
			, create_ts
			, update_user
			, Update_ts
			) 
		SELECT 
			contract_value
			, deal_volume
			, dis_contract_value
			, dis_extrinisic_pnl
			, dis_intrinsic_pnl
			, dis_market_value
			, dis_pnl
			, leg
			, market_value
			, pnl_adjustment_value
			, pnl_as_of_date
			, pnl_conversion_factor
			, sc.source_currency_id
			, pnl_source_value_id
			, ISNULL(sdh.source_deal_header_id, sdh2.source_deal_header_id)
			, term_end
			, term_start
			, und_extrinsic_pnl
			, und_intrinsic_pnl
			, und_pnl
			, und_pnl_set
			, dbo.FNADBUser()
			, GETDATE()
			, dbo.FNADBUser()
			, GETDATE()
			FROM  ' + @import_temp_table_name + ' a 
			LEFT JOIN source_deal_header sdh on sdh.deal_id = a.reference_id
			LEFT JOIN source_deal_header sdh2 on sdh2.source_deal_header_id = a.source_deal_header_id
			LEFT JOIN source_currency sc on sc.currency_name = a.pnl_currency
	' )
			  
	EXEC (	'
 		INSERT INTO source_deal_pnl_detail (contract_value
			, deal_volume
			, dis_contract_value
			, dis_extrinisic_pnl
			, dis_intrinsic_pnl
			, dis_market_value
			, dis_pnl
			, leg
			, market_value
			, pnl_adjustment_value
			, pnl_as_of_date
			, pnl_conversion_factor
			, pnl_currency_id
			, pnl_source_value_id
			, source_deal_header_id
			, term_end
			, term_start
			, und_extrinsic_pnl
			, und_intrinsic_pnl
			, und_pnl
			, und_pnl_set
			, create_user
			, create_ts
			, update_user
			, Update_ts
			, discount_factor
			, discount_rate
			) 
		SELECT 
			contract_value
			, deal_volume
			, dis_contract_value
			, dis_extrinisic_pnl
			, dis_intrinsic_pnl
			, dis_market_value
			, dis_pnl
			, leg
			, market_value
			, pnl_adjustment_value
			, pnl_as_of_date
			, pnl_conversion_factor
			, sc.source_currency_id
			, pnl_source_value_id
			, ISNULL(sdh.source_deal_header_id, sdh2.source_deal_header_id)
			, term_end
			, term_start
			, und_extrinsic_pnl
			, und_intrinsic_pnl
			, und_pnl
			, und_pnl_set
			, dbo.FNADBUser()
			, GETDATE()
			, dbo.FNADBUser()
			, GETDATE()
			, discount_factor
			, discount_rate
			FROM  ' + @import_temp_table_name + ' a 
			LEFT JOIN source_deal_header sdh on sdh.deal_id = a.reference_id
			LEFT JOIN source_deal_header sdh2 on sdh2.source_deal_header_id = a.source_deal_header_id
			LEFT JOIN source_currency sc on sc.currency_name = a.pnl_currency
	' )
END

--Fair Value Reporting Level
IF @table_name = 'ixp_fair_value_reporting_level'
BEGIN
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for Deal ID: '' + ISNULL(a.deal_id, ''NULL'') + '', Effective Date: '' + ISNULL(a.effective_date, ''NULL'') + '', Term Start: '' + ISNULL(a.term_start, ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT deal_id, effective_date, term_start, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY deal_id, effective_date, term_start
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON a.deal_id= b.deal_id AND a.effective_date = b.effective_date AND a.term_start = b.term_start 
 	')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for Fv_level: '' + ISNULL(a.fv_level_value_id, ''NULL'') + '' Fv_level is not available in the system.'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 			  LEFT JOIN static_data_value sdv ON sdv.code = a.fv_level_value_id AND sdv.type_id = 10094
 			  LEFT JOIN #import_status isa ON  a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND sdv.value_id IS NULL 
 	')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for Deal ID: '' + ISNULL(a.deal_id, ''NULL'') + '' Deal is not available in the system.'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 			  LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
 			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND sdh.source_deal_header_id IS NULL 
 	')
 		 	
 	-- Deleting the error data from the temporary table so reduce redundancy
		EXEC('DELETE ' + @import_temp_table_name + '
		   FROM #import_status
		   INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id') 
		
	-- Update Data from those which are already present in the table
	SET @sql='UPDATE frgd SET
					fv_level_value_id = ISNULL(sdv.value_id, frgd.fv_level_value_id)
 				FROM ' + @import_temp_table_name +' a
 				LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
 				INNER JOIN fv_report_group_deal frgd ON sdh.deal_id = a.deal_id AND frgd.effective_date = a.effective_date AND frgd.term_start = a.term_start
 				LEFT JOIN static_data_value sdv ON sdv.code = a.fv_level_value_id AND sdv.type_id = 10094
 				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 				WHERE  #import_status.temp_id IS NULL'	
 	EXEC(@sql)
 		 	
 	SET @sql = 'INSERT INTO [dbo].[fv_report_group_deal] (
 					source_deal_header_id,
					term_start,
					fv_level_value_id,
					effective_date)
 				SELECT sdh.source_deal_header_id, 
 					a.term_start, 
 					sdv.value_id,
 					a.effective_date
 				FROM ' + @import_temp_table_name + ' a 
 				LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
 				LEFT JOIN fv_report_group_deal frgd ON sdh.deal_id = a.deal_id AND frgd.effective_date = a.effective_date AND frgd.term_start = a.term_start
 				LEFT JOIN static_data_value sdv ON sdv.code = a.fv_level_value_id AND sdv.type_id = 10094
				LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL AND frgd.fv_report_group_deal_id IS NULL'
 	--PRINT(@sql)
 	EXEC(@sql) 	 	        
END

IF @table_name = 'ixp_source_book_gl_codes_import'
BEGIN
	EXEC spa_source_book_gl_codes_import @import_temp_table_name ,	'ixp_source_book_gl_codes_import',	NULL,	@process_id, @user_login_id
	RETURN
END

IF @table_name = 'ixp_tier_mapping'
BEGIN
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''state_value'', ''b.code = a.state_value AND b.type_id = 10002'', ''e''),
			(''static_data_value'', ''tier'', ''b.code = a.tier AND b.type_id = 15000'', ''e''),
			(''static_data_value'', ''technology'', ''b.code = a.technology AND b.type_id = 10009'', ''e''),
			(''static_data_value'', ''technology_subtype'', ''b.code = a.technology_subtype AND b.type_id = 13000'', ''w''),		
			(''source_price_curve_def'', ''price_index'', ''b.curve_name= a.price_index'', ''w'') 	
		')

	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- data repetition error handeling for duplicate Jurisdiction, Tier, Technology, Technology SUb Type, Index 
 	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
 	            10007,
 	              dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction, Tier, Technology, Technology Sub Type, Index, Effective Date''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.state_value' + ' + '', '' + ' + 'a.tier' + ' + '', '' + ' + 'a.technology' + ' + '', '' + ' + 'a.technology_subtype' + ' + '', '' + ' + 'ISNULL(a.price_index, '''')' + ' + '', '' + ' + 'a.effective_date' + '),
 	            a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
          INNER JOIN (
                   SELECT state_value, tier, technology, technology_subtype, price_index, effective_date, COUNT(*) notimes
                   FROM '+ @import_temp_table_name + '
                   GROUP BY  state_value, tier, technology, technology_subtype, price_index, effective_date
                   HAVING COUNT(*) > 1
          ) b
          ON  a.state_value = b.state_value
		  AND a.tier = b.tier
		  AND a.technology = b.technology
		  AND a.technology_subtype = b.technology_subtype		   
		  AND ISNULL(a.price_index, 0) = ISNULL(b.price_index, 0)			   
		  AND ISNULL(a.effective_date, 0) = ISNULL(b.effective_date, 0)		   
	')	

	--Validation for empty value of mandatory fields: Jurisdiction, Tier, Technology
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
		  10001,
		  CASE 
			  WHEN a.state_value IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction'')
			  WHEN a.tier IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Tier'')
			  WHEN a.technology IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Technology'')	  
		  END,
		  a.import_file_name 
 	      FROM   '+@import_temp_table_name + ' a
		  LEFT JOIN #error_status es ON es.temp_id = a.temp_id
 	      WHERE es.temp_id IS NULL
				AND (a.state_value IS NULL OR 
				a.tier IS NULL OR 
				a.technology IS NULL)
	')

	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		')
	
	SET @sql = 'UPDATE state_properties_details 
				SET banking_years = a.banking_years
					, effective_date = a.effective_date
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN static_data_value sdv_state_value ON sdv_state_value.code = a.state_value AND sdv_state_value.type_id =10002 
				INNER JOIN static_data_value sdv_technology ON sdv_technology.code = a.technology AND sdv_technology.type_id = 10009
				LEFT JOIN static_data_value sdv_technology_subtype ON sdv_technology_subtype.code = a.technology_subtype AND sdv_technology_subtype.type_id = 13000
				LEFT JOIN static_data_value sdv_tier ON sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
				LEFT JOIN source_price_curve_def spcd ON spcd.curve_name = a.price_index
				LEFT JOIN state_properties_details spd ON sdv_state_value.value_id = spd.state_value_id
					AND ISNULL(sdv_technology.value_id,-1) = ISNULL(spd.technology_id,-1)
					AND ISNULL(sdv_technology_subtype.value_id,-1) = ISNULL(spd.technology_subtype_id,-1)
					AND ISNULL(sdv_tier.value_id,-1) = ISNULL(spd.tier_id,-1)
					AND ISNULL(spcd.source_curve_def_id,-1) = ISNULL(spd.price_index,-1)							
 				WHERE spd.state_properties_details_id IS NOT NULL				
				'	
	EXEC(@sql) 

	SET @sql = 'INSERT INTO state_properties_details(state_value_id, technology_id, technology_subtype_id, tier_id, price_index, banking_years, effective_date)
				SELECT sdv_state_value.value_id,sdv_technology.value_id,sdv_technology_subtype.value_id,sdv_tier.value_id,spcd.source_curve_def_id, a.banking_years, a.effective_date
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN static_data_value sdv_state_value ON sdv_state_value.code = a.state_value AND sdv_state_value.type_id =10002 
				INNER JOIN static_data_value sdv_technology ON sdv_technology.code = a.technology AND sdv_technology.type_id = 10009
				LEFT JOIN static_data_value sdv_technology_subtype ON sdv_technology_subtype.code = a.technology_subtype AND sdv_technology_subtype.type_id = 13000
				LEFT JOIN static_data_value sdv_tier ON sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
				LEFT JOIN source_price_curve_def spcd ON spcd.curve_name = a.price_index
				LEFT JOIN state_properties_details spd ON sdv_state_value.value_id = spd.state_value_id
					AND ISNULL(sdv_technology.value_id,-1) = ISNULL(spd.technology_id,-1)
					AND ISNULL(sdv_technology_subtype.value_id,-1) = ISNULL(spd.technology_subtype_id,-1)
					AND ISNULL(sdv_tier.value_id,-1) = ISNULL(spd.tier_id,-1)
					AND ISNULL(spcd.source_curve_def_id,-1) = ISNULL(spd.price_index,-1)
				LEFT JOIN #error_status es ON es.temp_id = a.temp_id
				LEFT JOIN message_log_template mlt 
					ON es.error_number = mlt.message_number
					AND mlt.message_status = ''Error''
 				WHERE mlt.id IS NULL
					AND spd.state_properties_details_id IS NULL
				GROUP BY sdv_state_value.value_id,sdv_technology.value_id,sdv_technology_subtype.value_id,sdv_tier.value_id,spcd.source_curve_def_id, a.banking_years, a.effective_date
					'
	EXEC(@sql) 
END

IF @table_name = 'ixp_mega_hedge'
BEGIN

	EXEC('UPDATE ' + @import_temp_table_name + ' SET link_effective_date = dbo.FNAClientToSqlDate(link_effective_date)')

	-- Validation Starts here ---------------
	--Perfect Hedge cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Perfect Hedge cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.perfect_hedge, '''') IS NULL
 		')
		
	--Check Link Description cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Link Description cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.link_description, '''') IS NULL
 		')
		
	--Check Subsidiary/Strategy/Book cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Subsidiary/Strategy/Book cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND (NULLIF(a.subsidiary, '''') IS NULL OR NULLIF(a.strategy, '''') IS NULL OR NULLIF(a.book, '''') IS NULL)
 		')	
				
	--Check Reference ID cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Reference ID cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.reference_id, '''') IS NULL
 		')

	--Check Transaction Type cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Transaction Type cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.transaction_type, '''') IS NULL
 		')
	
	--Check Percentage Included cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Percentage Included cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.percentage_included, '''') IS NULL
 		')

	--Check Fully Dedesignated cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Fully Dedesignated cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.fully_dedesignated, '''') IS NULL
 		')

	--Check Hedging Relationship Type cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Hedging Relationship Type cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.hedging_relationship_type, '''') IS NULL
 		')

	--Check Link Effective Date cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Link Effective Date cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.link_effective_date, '''') IS NULL
 		')
	
	--Check Link Type cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Link Type cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.link_type_value, '''') IS NULL
 		')

	--Check Link Active cannot be blank.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Link Active cannot be blank.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND NULLIF(a.link_active, '''') IS NULL
 		')

	--Validate Link Effective Date.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			  SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Deal Date cannot be greater than Link Effective Date.'',
 					 ''Please check your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
			  INNER JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id AND sdh.deal_date > link_effective_date
			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL
 		')

	--Check combination of book in system.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Combination of Subsidiary/Strategy/Book ('' + ISNULL(a.subsidiary, ''NULL'') + ''/'' + ISNULL(a.strategy, ''NULL'') + ''/'' + ISNULL(a.book, ''NULL'') + '') does not exist in the system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 			  LEFT JOIN portfolio_hierarchy sub ON sub.entity_name = a.subsidiary AND sub.hierarchy_level = 2
			  LEFT JOIN portfolio_hierarchy stra ON sub.entity_id = stra.parent_entity_id AND stra.entity_name = a.strategy AND stra.hierarchy_level = 1
			  LEFT JOIN portfolio_hierarchy book ON stra.entity_id = book.parent_entity_id AND book.entity_name = a.book AND book.hierarchy_level = 0
 			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND book.entity_id IS NULL
 	')

	--Check if Reference ID is present in the system
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Reference ID '' + ISNULL(a.reference_id, ''NULL'') + '' does not exist in the system.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 			  LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id
 			  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
			  WHERE isa.temp_id IS NULL AND sdh.source_deal_header_id IS NULL
 	')

	--Check Duplicate Data found. for Hedging Relationship Type and Link Description
		
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Duplicata Data Found: Same Reference ID ('' + ISNULL(a.reference_id, ''NULL'') + '') in a link ('' + ISNULL(a.link_description, ''NULL'') + '') is not valid.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN (SELECT subsidiary, strategy, book, hedging_relationship_type_id, link_description, reference_id
						FROM ' + @import_temp_table_name + ' GROUP BY subsidiary, strategy, book, hedging_relationship_type_id, link_description, reference_id
					  HAVING COUNT(1) > 1) b
					ON a.subsidiary = b.subsidiary AND a.strategy = b.strategy AND a.book = b.book AND a.hedging_relationship_type_id = b.hedging_relationship_type_id AND a.link_description = b.link_description AND a.reference_id = b.reference_id
		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
		  WHERE isa.temp_id IS NULL
 	')
	
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Reference ID ('' + ISNULL(a.reference_id, ''NULL'') + '') is not ('' + ISNULL(a.transaction_type, ''NULL'') + '').'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN source_Deal_header sdh ON sdh.deal_id = a.reference_id
		LEFT JOIN static_data_value sdv ON sdv.code = a.transaction_type 
		LEFT JOIN source_system_book_map ssbm ON ssbm.source_system_book_id1 = sdh.source_system_book_id1 
			AND ssbm.source_system_book_id2 = sdh.source_system_book_id2
			AND ssbm.source_system_book_id3 = sdh.source_system_book_id3
			AND ssbm.source_system_book_id4 = sdh.source_system_book_id4
			AND ISNULL(sdh.fas_deal_type_value_id, ssbm.fas_deal_type_value_id) = sdv.value_id
		LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
		WHERE isa.temp_id IS NULL AND ssbm.book_deal_type_map_id IS NULL
 	')
	
	--Validate percentage included.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Percentage Included cannot be greater than 1 or less than 0 for a deal '' + a.reference_id + ''.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN (
					SELECT reference_id, SUM(percentage_included) percentage_included, SUM(percent_total) percent_total, SUM(percentage_included - percent_total) total_exceed
					FROM (
							SELECT temp.reference_id, 
								   SUM(CAST(temp.percentage_included AS FLOAT)) percentage_included, 0 AS percent_total
							FROM ' + @import_temp_table_name + ' temp
							INNER JOIN source_deal_header sdh
								ON sdh.deal_id = temp.reference_id
							GROUP BY temp.reference_id
							UNION ALL
							SELECT reference_id, 0 AS percentage_included, SUM(percent_total - percentage_included) AS percent_total
							FROM (
									SELECT  subr.reference_id, SUM(fld.percentage_included) percentage_included, 0 AS percent_total
									FROM fas_link_detail fld
									INNER JOIN source_deal_header sdh
										ON fld.source_deal_header_id = sdh.source_deal_header_id
									INNER JOIN (SELECT DISTINCT reference_id FROM  ' + @import_temp_table_name + ') subr
										ON subr.reference_id = sdh.deal_id
									INNER  JOIN fas_link_header flh 
										ON flh.link_id = fld.link_id
									INNER JOIN (SELECT DISTINCT link_description FROM  ' + @import_temp_table_name + ') subl
										ON subl.link_description = flh.link_description 
									GROUP BY subr.reference_id
									UNION ALL
									SELECT subr.reference_id, 0 AS percentage_included, SUM(fld.percentage_included) AS percent_total
									FROM fas_link_detail fld
									INNER JOIN source_deal_header sdh
										ON fld.source_deal_header_id = sdh.source_deal_header_id
									INNER JOIN (SELECT DISTINCT reference_id FROM  ' + @import_temp_table_name + ') subr
										ON subr.reference_id = sdh.deal_id
									GROUP BY subr.reference_id
							)a  GROUP BY reference_id
					) b
					GROUP BY reference_id		  
			) aa ON aa.reference_id = a.reference_id
		  LEFT JOIN #import_status isa ON a.temp_id = isa.temp_id
		  WHERE isa.temp_id IS NULL AND (aa.percentage_included > 1 OR CAST(a.percentage_included AS FLOAT) < 0)
 	')

	-- Validation Ends here ---------------
	--return
	EXEC('DELETE ' + @import_temp_table_name + '
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')

	EXEC('DELETE fld FROM fas_link_detail fld WHERE fld.link_id IN (SELECT DISTINCT link_id FROM fas_link_header flh 
		INNER JOIN ' + @import_temp_table_name + ' a ON a.link_description = flh.link_description)')
			
	EXEC('DELETE flh1 FROM fas_link_header flh1 WHERE flh1.link_id IN (SELECT DISTINCT link_id FROM fas_link_header flh 
		INNER JOIN ' + @import_temp_table_name + ' a ON a.link_description = flh.link_description)')

	SET @sql = 	'
		INSERT INTO fas_link_header (link_description,fas_book_id,perfect_hedge,fully_dedesignated,eff_test_profile_id,link_effective_date
										,link_type_value_id,link_active)  
		SELECT DISTINCT a.link_description , book.entity_id,
			CASE WHEN a.perfect_hedge = ''No'' THEN ''n'' ELSE ''y'' END, 
			CASE WHEN a.fully_dedesignated = ''No'' THEN ''n'' ELSE ''y'' END,
			fet.eff_test_profile_id, 
			a.link_effective_date,
			sdv.value_id, 
			CASE WHEN a.link_active = ''No'' THEN ''n'' ELSE ''y'' END
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN portfolio_hierarchy sub ON sub.entity_name = a.subsidiary
		INNER JOIN portfolio_hierarchy stra ON sub.entity_id = stra.parent_entity_id AND stra.entity_name = a.strategy
		INNER JOIN portfolio_hierarchy book ON stra.entity_id = book.parent_entity_id and book.entity_name = a.book
		INNER JOIN fas_eff_hedge_rel_type fet ON fet.eff_test_name = a.hedging_relationship_type
		LEFT JOIN static_data_value sdv ON sdv.code = a.link_type_value

		INSERT INTO fas_link_detail
		(
			link_id,
			source_deal_header_id,
			percentage_included,
			hedge_or_item,
			create_user,
			create_ts,
			update_user,
			update_ts,
			effective_date
		)
		SELECT flh.link_id ,sdh.source_deal_header_id,
			a.percentage_included,
			''h'' [hedge_or_item],
			dbo.FNADBUser() create_user,
			GETDATE() create_ts,
			NULL update_user,
			NULL update_ts,
			NULL [effective_date] 
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN fas_link_header flh ON flh.link_description = a.link_description
		INNER JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id AND a.transaction_type = ''Hedging Instrument (Der)''
		UNION ALL
		SELECT flh.link_id [link_id],
			sdh.source_deal_header_id,
			a.percentage_included,
			''i'' [hedge_or_item],
			dbo.FNADBUser() create_user,
			GETDATE() create_ts,
			NULL update_user,
			NULL update_ts,
			NULL [effective_date]
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN fas_link_header flh ON flh.link_description = a.link_description
		INNER JOIN source_deal_header sdh ON sdh.deal_id = a.reference_id AND a.transaction_type = ''Hedged Items'''
	EXEC(@sql)
END

IF @table_name = 'ixp_cum_pnl_series_template'
BEGIN

	EXEC('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''cum_pnl_series'', ''as_of_date'', ''as_of_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''cum_pnl_series'', ''link_id'', ''link_id'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''cum_pnl_series'', ''u_h_mtm'', ''u_h_mtm'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''cum_pnl_series'', ''u_i_mtm'', ''u_i_mtm'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''cum_pnl_series'', ''comments'', ''comments'')')

	EXEC('DELETE FROM ' + @import_temp_table_name + ' 
		 WHERE as_of_date IS NULL AND link_id IS NULL AND u_h_mtm IS NULL AND u_i_mtm IS NULL 
	     AND d_h_mtm IS NULL AND d_i_mtm IS NULL AND comments IS NULL')
		
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name

	---Data Import **************************************************************************
	
	EXEC('UPDATE ' + @import_temp_table_name + ' SET as_of_date = dbo.FNAClientToSqlDate(as_of_date)')

	EXEC('INSERT INTO #import_status(temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
		 SELECT a.temp_id,
				'''+ @process_id+''',
				''Error'',
				''Import Data'',
				''' + @table_name + ''',
				''Data Error'',
				''Data error for link_id: ''+ ISNULL(CAST(a.link_id as NVARCHAR(100)), ''NULL'') + ''; as_of_date: '' + a.as_of_date + '' (Data Repetition Error, No of times: ''+ CAST(b.notimes AS NVARCHAR(50))+'' )'',
				''Please check your data'',
				 a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN (SELECT link_id, as_of_date, COUNT(*) notimes FROM ' + @import_temp_table_name + '
				   GROUP BY link_id, as_of_date HAVING COUNT(*) > 1) b 
		ON a.link_id = b.link_id AND a.as_of_date = b.as_of_date')
	
	EXEC('INSERT INTO #import_status(temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
				'''+ @process_id+''',
				''Error'',
				''Import Data'',
				''' + @table_name + ''',
				''Data Error'',
				''Data error for u_h_mtm: '' + ISNULL(CAST(a.u_h_mtm AS NVARCHAR(100)), ''NULL'') + ''; as_of_date: '' + a.as_of_date + '' (Data Repetition Error, No of times: ''+ CAST(b.notimes AS NVARCHAR(50))+'' )'',
				''Please check your data'',
				a.import_file_name 
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN (SELECT link_id, as_of_date, COUNT(*) notimes FROM ' + @import_temp_table_name + ' 
					GROUP BY link_id, as_of_date HAVING COUNT(*) > 1) b 
		ON a.link_id = b.link_id AND a.as_of_date = b.as_of_date')

	EXEC('INSERT INTO #import_status(temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], type_error, external_type_id, [import_file_name])
		 SELECT a.temp_id,
				'''+ @process_id+''',
				''Error'',
				''Import Data'',
				''' + @table_name + ''',
				''Data Error'',
				''Data error for link_id: '' + CAST(a.link_id AS NVARCHAR(100)) + ''. (Foreign Key Link ID '' + ISNULL(CAST(a.link_id AS NVARCHAR(100)), ''NULL'') + '' AND as_of_date: '' + dbo.FNAdateformat(a.as_of_date) + '' is not found)'',
				''Please check your data'', 
				''Link ID '' + ISNULL(CAST(a.link_id AS NVARCHAR(100)),''NULL'') + '' not found '', 
				a.link_id, 
				a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
		LEFT JOIN fas_link_header b ON b.link_id = a.link_id 
		WHERE  b.link_id IS NULL')

	EXEC(' DELETE ' + @import_temp_table_name + ' 
		   FROM #import_status 
		   INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')
	
	EXEC(' DELETE cum_pnl_series
		   FROM   cum_pnl_series cps
		   INNER JOIN ' + @import_temp_table_name + ' a ON cps.link_id = a.link_id AND cps.as_of_date = a.as_of_date')    
		  
	EXEC(' INSERT INTO cum_pnl_series
	             (
	               as_of_date,
	               link_id,
	               u_h_mtm,
	               u_i_mtm,
	               d_h_mtm,
	               d_i_mtm,
	               create_user,
	               create_ts,
	               comments
	             )
 			SELECT as_of_date,
 			       link_id,
 			       u_h_mtm,
 			       u_i_mtm,
 			       ISNULL(d_h_mtm, u_h_mtm),
 			       ISNULL(d_i_mtm, u_i_mtm),
 			       ''' + @user_login_id + ''',
 			       GETDATE(),
 			       comments
 			FROM   ' + @import_temp_table_name )
END

IF @table_name = 'ixp_location_template'
BEGIN
		/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'source_minor_location,source_minor_location_meter'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)
		
	
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	/* update user date to sql date */

	EXEC('UPDATE a 
		SET effective_date = dd.sql_date_string  
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN #date_details dd 
			ON a.effective_date = dd.user_date 
	')
	/***END OF date update***/ 

	/** Collect data for look up table validation.
		 referred_table: lookup table to match value against
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 

	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_commodity'', ''commodity_id'', ''b.commodity_id = a.commodity_id'', ''e''),  
		(''source_price_curve_def'', ''term_pricing_index'', ''b.curve_id = a.term_pricing_index'', ''w''),  
		(''meter_id'', ''meter_id'', ''b.recorderid = a.meter_id'', ''w''),  
		(''source_major_location'', ''source_major_location_ID'', ''b.location_name = a.source_major_location_ID'', ''w''),
		(''forecast_profile'', ''profile_id'', ''b.profile_name = a.profile_id'', ''w''),
		(''forecast_profile'', ''proxy_profile_id'', ''b.profile_name = a.proxy_profile_id'', ''w''),
		(''static_data_value'', ''meter_type'', ''b.type_id = 38600 AND b.code = a.meter_type'', ''w''),
		(''static_data_value'', ''country'', ''b.type_id = 14000 AND b.code = a.country'', ''w''),
		(''static_data_value'', ''region'', ''b.type_id = 11150 AND b.code = a.region'', ''w''),
		(''static_data_value'', ''province'', ''b.type_id = 29500 AND b.code = a.province'', ''w''),
		(''static_data_value'', ''grid_value_id'', ''b.type_id = 18000 AND b.code = a.grid_value_id'', ''w''),
		(''time_zones'', ''time_zone'', ''b.TIMEZONE_NAME = a.time_zone'', ''w'')
	')
	
 	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

			-- data repetition error handeling 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
 	            10007,
				''
				 {
					"column_name": "'' + scm.source_column_name + ''",
					"repetition_count": "'' + CAST(b.notimes AS NVARCHAR) + ''",
					"column_value": "'' + a.Meter_ID + ''"
				 }
				'',
 	            a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
           INNER JOIN (
                   SELECT Meter_ID, COUNT(1) notimes
                   FROM   '+ @import_temp_table_name+'
                   GROUP BY Meter_ID
                   HAVING COUNT(1) > 1
               ) b
           ON  a.Meter_ID = b.Meter_ID
		   LEFT JOIN source_minor_location sml ON a.location_name = sml.location_name
		   LEFT JOIN #error_status 
			  ON  a.temp_id = #error_status.temp_id
		   CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Meter_ID'' -- ixp_columns_name
           ) scm
		   WHERE sml.location_id IS NULL
			  AND #error_status.temp_id IS NULL
		   ')
		   


	-- Log Message for Dependent Data Missing when meter is present
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10014,
		  CASE 
			WHEN a.effective_date IS NULL AND a.meter_type IS NULL THEN
				''
				 {
					"column_name": "''+ scm.source_column_name +''",
					"column_name1": "''+ scm2.source_column_name + '', '' + scm1.source_column_name +''",
					"column_value": "'' + a.Meter_ID + ''"
				 }
				''
			ELSE
				CASE 
					WHEN a.effective_date IS NULL THEN
						''
						 {
							"column_name": "''+ scm.source_column_name + ''",
							"column_name1": "''+ scm1.source_column_name + ''",
							"column_value": "'' + a.Meter_ID + ''"
						 }
						''	
					WHEN a.meter_type IS NULL THEN
						''
						 {
							"column_name": "''+ scm.source_column_name + ''",
							"column_name1": "''+ scm2.source_column_name + ''",
							"column_value": "'' + a.Meter_ID + ''"
						 }
						'' 
				END
		  END	
		  ,a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Meter_ID'' -- ixp_columns_name
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''effective_date'' -- ixp_columns_name
          ) scm1
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''meter_type'' -- ixp_columns_name
          ) scm2
		  WHERE  #error_status.temp_id IS NULL
			AND a.Meter_ID IS NOT NULL
			 AND (a.effective_date IS NULL OR a.meter_type IS NULL)
	')
	
	-- -- Log Message for Dependent Data Missing when meter is not present and effective date or meter type is present
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10014,
		  CASE 
			WHEN a.effective_date IS NOT NULL AND a.meter_type IS NOT NULL THEN
				''
				 {
					"column_name": "''+ scm1.source_column_name + '', '' + scm2.source_column_name +''",
					"column_name1": "''+ scm.source_column_name +''",
					"column_value": "'' + a.effective_date + '', '' + a.meter_type + ''"
				 }
				''
			ELSE
				CASE 
					WHEN a.effective_date IS NOT NULL THEN
						''
						 {
							"column_name": "''+ scm1.source_column_name + ''",
							"column_name1": "''+ scm.source_column_name + '', '' + scm2.source_column_name +''",
							"column_value": "'' + a.effective_date + ''"
						 }
						''	
					WHEN a.meter_type IS NOT NULL THEN
						''
						 {
							"column_name": "''+ scm2.source_column_name + ''",
							"column_name1": "''+ scm.source_column_name + '', '' + scm1.source_column_name +''",
							"column_value": "'' + a.meter_type + ''"
						 }
						''
				END
		  END	
		  ,a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Meter_ID'' -- ixp_columns_name
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''effective_date'' -- ixp_columns_name
          ) scm1
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''meter_type'' -- ixp_columns_name
          ) scm2
		  WHERE  #error_status.temp_id IS NULL
			AND a.Meter_ID IS NULL
			 AND (a.effective_date IS NOT NULL OR a.meter_type IS NOT NULL)
	')

	--Validation for uniqueness of location_name and term_pricing_index
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10018,
				''
				 {
					"column_name": "''+ scm.source_column_name +''",
					"column_name1": "''+ scm1.source_column_name +''",
					"column_value": "'' + a.location_name + ''",
					"column_value1":"''+ ISNULL(a.term_pricing_index, ''NULL'') +''"
				 }
				'',
 				 a.import_file_name
		  FROM  '+ @import_temp_table_name + ' a
		  INNER JOIN source_minor_location sml
			  ON sml.location_name = a.location_name
		  LEFT JOIN source_price_curve_def spcd
			  ON sml.term_pricing_index = spcd.source_curve_def_id
			  AND spcd.curve_id = a.term_pricing_index		
		  LEFT JOIN source_minor_location sml1     --to handle null value
			  ON sml.location_name = sml1.location_name
			  AND ISNULL(a.term_pricing_index, -1) = ISNULL(CAST(sml1.term_pricing_index AS NVARCHAR),-1)
		  OUTER APPLY(SELECT temp_id 
						FROM  #error_status e 
						INNER JOIN message_log_template mlt 
						 	ON mlt.message_number = e.error_number
						 	AND mlt.message_status = ''Error''
						WHERE a.temp_id = e.temp_id
		  ) es
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Location_Name''
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''term_pricing_index''
          ) scm1
		  WHERE es.temp_id IS NULL
			  AND (spcd.source_curve_def_id IS NOT NULL OR sml1.source_minor_location_id IS NOT NULL)
			  AND sml.location_id NOT IN (a.location_id)
	')

	--Validation for uniqueness of meter_id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 		  SELECT a.temp_id,
				 NULL,
				 ''Value for column: ''+ scm1.source_column_name +'' ('' + a.meter_id + '') is already mapped.'',
 				 a.import_file_name,
				''Error'',
				''Data Error'',
				''Please correct data and re-import.''
		  FROM   '+ @import_temp_table_name + ' a		  
		  INNER JOIN meter_id mi 
			  ON mi.recorderid = a.meter_id 
		  LEFT JOIN source_minor_location_meter smlm
		      ON smlm.meter_id = mi.meter_id
		  LEFT JOIN source_minor_location sml
		      ON sml.source_minor_location_id = smlm.source_minor_location_id
		  	  AND sml.location_id = a.location_id
		  LEFT JOIN source_minor_location sml1
		  	  ON sml1.location_id = a.location_id
		   OUTER APPLY( SELECT temp_id 
						 FROM  #error_status e 
						 INNER JOIN message_log_template mlt 
						 	 ON mlt.message_number = e.error_number
						 	 AND mlt.message_status = ''Error''
						 WHERE a.temp_id = e.temp_id
			 ) es
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Location_Name''
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''Meter_ID''
          ) scm1
		  WHERE  es.temp_id IS NULL
			  AND smlm.location_meter_id IS NOT NULL
		  	  AND sml.source_minor_location_id IS NULL
		  	  AND sml1.source_minor_location_id IS NOT NULL
	')

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	') 
    ---- End Lookup validation--------
 
	IF OBJECT_ID('tempdb..#inserted_location') IS NOT NULL
		DROP TABLE #inserted_location

	CREATE TABLE #inserted_location (source_minor_location_id INT)
          
     SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE sml
 				SET source_system_id = s.source_system_id,
 					source_major_location_ID = ssm.source_major_location_ID,
 					Location_Name = s.Location_Name,
 					Location_Description = s.Location_Description,
 					Meter_ID = s.Meter_ID,
 					Pricing_Index = spcd.source_curve_def_id,
 					Commodity_id = sc.source_commodity_id,
 					location_type = location_type.value_id,
 					time_zone = time_zone.TIMEZONE_ID,
 					x_position = s.x_position,
 					y_position = s.y_position,
 					region = region.value_id,
 					is_pool = s.is_pool,
 					term_pricing_index = spcd1.source_curve_def_id ,
 					owner = s.owner,
 					operator = s.operator,
 					contract = cg.contract_id,
 					volume = s.volume,
 					uom = su.source_uom_id,
 					bid_offer_formulator_id = bofh.bid_offer_id,
 					proxy_location_id = s.proxy_location_id,
 					external_identification_number = s.external_identification_number,
 					profile_id = fp_forecast.profile_id,
 					proxy_profile_id = fp.profile_id,
 					grid_value_id = sdv.value_id,
 					country = country.value_id,
 					is_active = CASE WHEN s.is_active = ''Yes'' THEN ''y''
									 WHEN s.is_active = ''y'' THEN ''y''
									 WHEN NULLIF(s.is_active , '''') IS NULL THEN ''y''
									 ELSE ''n''
								END,
 					postal_code = s.postal_code,
 					province = province.value_id,
 					physical_shipper = s.physical_shipper,
 					sicc_code = s.sicc_code,
 					profile_code = s.profile_code,
 					nominatorsapcode = s.nominatorsapcode,
 					forecast_needed = s.forecast_needed,
 					forecasting_group = s.forecasting_group,
 					external_profile = s.external_profile,
 					calculation_method = s.calculation_method,
 					profile_additional = s.profile_additional,
 					location_id = s.location_id,
 					pipeline = cpt.source_counterparty_id'
 			SET @sql2 = CAST('' AS NVARCHAR(MAX)) + N' OUTPUT INSERTED.source_minor_location_id INTO #inserted_location(source_minor_location_id) FROM   ' + @import_temp_table_name + ' s
 			INNER JOIN source_system_description d ON  s.source_system_id = d.source_system_id
 			LEFT JOIN bid_offer_formulator_header bofh ON bofh.bid_offer_id = s.bid_offer_formulator_id
 			LEFT JOIN source_major_location ssm ON ssm.location_name = s.source_major_location_ID
 			LEFT JOIN source_commodity sc ON sc.commodity_id = s.Commodity_id
 			LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = s.Pricing_Index
 			LEFT JOIN source_price_curve_def spcd1 ON spcd1.curve_id = s.term_pricing_index
 			LEFT JOIN static_data_value sdv ON sdv.code = s.grid_value_id and sdv.type_id = 18000
 			LEFT JOIN contract_group cg ON cg.contract_id = s.contract
 			LEFT JOIN forecast_profile  fp ON  fp.external_id = s.proxy_profile_id
 			LEFT JOIN source_uom su ON su.source_uom_id = s.uom
 			LEFT JOIN  forecast_profile fp_forecast ON   fp_forecast.external_id = s.profile_id
 			LEFT JOIN static_data_value location_type ON location_type.code = s.location_type AND location_type.type_id = 11140
 			LEFT JOIN time_zones time_zone ON time_zone.TIMEZONE_NAME = s.time_zone
 			LEFT JOIN static_data_value country ON country.code = s.country AND country.type_id = 14000
 			LEFT JOIN static_data_value region ON region.code = s.region AND region.type_id = 11150
 			LEFT JOIN static_data_value province ON province.code = s.province AND province.type_id = 29500
 			LEFT JOIN source_counterparty cpt ON cpt.counterparty_id = s.pipeline
 			INNER JOIN source_minor_location sml  
                 ON  sml.Location_id = s.location_id				 
 			OUTER APPLY( SELECT temp_id 
						 FROM  #error_status e 
						 INNER JOIN message_log_template mlt 
						 	 ON mlt.message_number = e.error_number
						 	 AND mlt.message_status = ''Error''
						 WHERE s.temp_id = e.temp_id
			 ) es
 			WHERE  es.temp_id IS NULL AND sml.source_minor_location_id IS NOT NULL'
 	--PRINT(@sql)
 	SET @sql += @sql2   
                            
	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	WHERE table_name = 'source_minor_location'

	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
		EXEC(@sql)
	END    
	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_minor_location ( source_system_id, source_major_location_ID, Location_Name, Location_Description, Meter_ID, Pricing_Index, 
 													Commodity_id, location_type, time_zone, x_position, y_position, region, is_pool, term_pricing_index, owner, operator, contract, volume, 
 													uom, bid_offer_formulator_id, proxy_location_id, external_identification_number, profile_id, proxy_profile_id, grid_value_id, country, 
 													is_active, postal_code, province, physical_shipper, sicc_code, profile_code, nominatorsapcode, forecast_needed, 
 													forecasting_group, external_profile, calculation_method, profile_additional, location_id, pipeline)
 				 OUTPUT INSERTED.source_minor_location_id INTO #inserted_location(source_minor_location_id) 
 				  SELECT    s.source_system_id,
 							ssm.source_major_location_ID,
 							s.Location_Name,
 							s.Location_Description,
 							s.Meter_ID,
 							spcd.source_curve_def_id,
 							sc.source_commodity_id,
 							location_type.value_id,
 							time_zone.TIMEZONE_ID,
 							s.x_position,
 							s.y_position,
 							region.value_id,
 							s.is_pool,
 							spcd1.source_curve_def_id,
 							s.owner,
 							s.operator,
 							cg.contract_id,
 							s.volume,
 							su.source_uom_id,
 							bofh.bid_offer_id,
 							s.proxy_location_id,
 							s.external_identification_number,
 							fp_forecast.profile_id ,
 							fp.profile_id,
 							sdv.value_id,
 							country.value_id,
 							CASE WHEN s.is_active = ''Yes'' THEN ''y''
								 WHEN s.is_active = ''y'' THEN ''y''
								 WHEN NULLIF(s.is_active , '''') IS NULL THEN ''y''
								 ELSE ''n''
							END,
 							s.postal_code,
 							province.value_id,
 							s.physical_shipper,
 							s.sicc_code,
 							s.profile_code,
 							s.nominatorsapcode,
 							s.forecast_needed,
 							s.forecasting_group,
 							s.external_profile,
 							s.calculation_method,
 							s.profile_additional,
 							s.location_id, 
 							cpt.source_counterparty_id '
        SET @sql2 = CAST('' AS NVARCHAR(MAX)) + N' FROM   ' + @import_temp_table_name + ' s
			LEFT JOIN source_system_description d ON  s.source_system_id = d.source_system_id
			LEFT JOIN bid_offer_formulator_header bofh ON bofh.bid_offer_id = s.bid_offer_formulator_id
			LEFT JOIN source_major_location ssm ON ssm.location_name = s.source_major_location_ID
			LEFT JOIN source_commodity sc ON sc.commodity_id = s.Commodity_id
			LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = s.Pricing_Index
			LEFT JOIN source_price_curve_def spcd1 ON spcd1.curve_id = s.term_pricing_index
			LEFT JOIN static_data_value sdv ON sdv.code = s.grid_value_id and sdv.type_id = 18000
			LEFT JOIN contract_group cg ON cg.contract_id = s.contract
			LEFT JOIN forecast_profile  fp ON  fp.external_id = s.proxy_profile_id
			LEFT JOIN source_uom su ON su.source_uom_id = s.uom
			LEFT JOIN  forecast_profile fp_forecast ON   fp_forecast.external_id = s.profile_id
			LEFT JOIN static_data_value location_type ON location_type.code = s.location_type AND location_type.type_id = 11140
			LEFT JOIN time_zones time_zone ON time_zone.TIMEZONE_NAME = s.time_zone
			LEFT JOIN static_data_value country ON country.code = s.country AND country.type_id = 14000
 			LEFT JOIN static_data_value region ON region.code = s.region AND region.type_id = 11150
 			LEFT JOIN static_data_value province ON province.code = s.province AND province.type_id = 29500
			LEFT JOIN source_counterparty cpt ON cpt.counterparty_id = s.pipeline
			LEFT JOIN source_minor_location sml  
				ON  sml.Location_id = s.location_id				
            OUTER APPLY( SELECT temp_id 
						 FROM  #error_status e 
						 INNER JOIN message_log_template mlt 
						 	 ON mlt.message_number = e.error_number
						 	 AND mlt.message_status = ''Error''
						 WHERE s.temp_id = e.temp_id
			 ) es
             WHERE  es.temp_id IS NULL AND sml.source_minor_location_id IS NULL' 
 	--PRINT(@sql + @sql2)
 	EXEC(@sql + @sql2)
	
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' Update  smlm
 				SET		meter_type = sdv.value_id,
 						effective_date = s.effective_date 		
 				FROM   ' + @import_temp_table_name + ' s
 				INNER JOIN source_minor_location sml  
					ON  sml.Location_id = s.location_id
				INNER JOIN meter_id mi 
					ON mi.recorderid = s.meter_id	
				INNER JOIN 	source_minor_location_meter smlm
					ON smlm.source_minor_location_id = sml.source_minor_location_id AND smlm.meter_id = mi.meter_id
				LEFT JOIN static_data_value sdv ON
					sdv.type_id = 38600 AND sdv.code = s.meter_type	'
 	
 	--Collect destination column to be excluded from update statement.
 	SET @dest_columns_to_exclude = NULL
 	
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	WHERE table_name = 'source_minor_location_meter'

	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
 	EXEC(@sql)
	END    
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_minor_location_meter (source_minor_location_id,meter_id,effective_date,meter_type)
 				SELECT  sml.source_minor_location_id,
 						mi.meter_id,
 						s.effective_date,
 						sdv.value_id
 				FROM   ' + @import_temp_table_name + ' s
 				LEFT JOIN source_minor_location sml  
					ON  sml.Location_id = s.location_id
				LEFT JOIN meter_id mi 
					ON mi.recorderid = s.meter_id
				LEFT JOIN static_data_value	sdv  
					ON sdv.type_id = 38600 AND sdv.code = s.meter_type	
				LEFT JOIN source_minor_location_meter smlm
					ON smlm.source_minor_location_id = sml.source_minor_location_id AND smlm.meter_id = mi.meter_id
 				WHERE smlm.location_meter_id IS NULL	
				AND (s.meter_id IS NOT NULL AND s.effective_date IS NOT NULL AND s.meter_type IS NOT NULL)
 				'
	--PRINT(@sql)
 	EXEC(@sql) 	
	
	 
	IF OBJECT_ID('tempdb..#deal_to_calc') IS NOT NULL
		DROP TABLE #deal_to_calc
	CREATE TABLE #deal_to_calc (source_deal_header_id INT)
			
	SET @sql = 'INSERT INTO dbo.process_deal_position_breakdown (source_deal_header_id,create_user,create_ts,process_status,insert_type,deal_type,commodity_id,fixation,internal_deal_type_value_id)
				OUTPUT INSERTED.source_deal_header_id INTO #deal_to_calc(source_deal_header_id)
			SELECT sdh.source_deal_header_id, MAX(sdh.create_user), GETDATE(), 9 process_status, 0 deal_type, MAX(ISNULL(sdh.internal_desk_id, 17300)) deal_type, 
			MAX(ISNULL(spcd.commodity_id, -1)) commodity_id, MAX(ISNULL(sdh.product_id, 4101)) fixation, MAX(ISNULL(sdh.internal_deal_type_value_id, -999999))
			FROM source_deal_detail sdd 
			INNER JOIN #inserted_location i ON i.source_minor_location_id = sdd.location_id
			INNER JOIN source_deal_header sdh ON sdd.source_deal_header_id = sdh.source_deal_header_id
			INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = sdd.curve_id and sdd.curve_id IS NOT NULL
			GROUP BY sdh.source_deal_header_id '

	EXEC (@sql)

	IF EXISTS(SELECT 1 FROM #deal_to_calc)
		EXEC dbo.spa_calc_pending_deal_position @call_from = 1	
	
		
END

 IF @table_name = 'ixp_time_series'
BEGIN

 BEGIN TRY
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM ' + @import_temp_table_name + '
 	      WHERE  series_source IS NULL
 	             ')

	
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
 	        FROM   ' + @import_temp_table_name)
 	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	
 	-- data repetition error handeling starts 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for time_series_id :'' + ISNULL(a.time_series_id, ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT time_series_id, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY series_source,static_data_type,static_data_value,is_dst,hour,time_series_id,maturity,effective_date
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.time_series_id = b.time_series_id')
		
			EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for time_series_id :'' + ISNULL(a.time_series_id, ''NULL'') + '' (Series ID not present in the system.)'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN time_series_definition tsd ON tsd.time_series_id = a.time_series_id
		WHERE time_series_definition_id IS NULL')


 	--PRINT('1')		  
     -- data repetition error handeling ends
     -- data format errors handeling starts
	 
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
              '''+ @process_id+''',
              ''Error'',
              ''Import Data'',
              '''+@table_name+''',
              ''Data Error'',
              ''Data error for time_series_id :'' + ISNULL(a.time_series_id, ''NULL'')
              + '', time_series_id :'' + ISNULL(a.time_series_id, ''NULL'') + ''.(
                  Data FORMAT FOR time_series_id ''
                   + ISNULL(a.time_series_id, ''NULL'') + '' IS invalid
              )'',
              ''Please CHECK your Data'',
 			 a.import_file_name
       FROM   '+ @import_temp_table_name + ' a
       WHERE    a.time_series_id IS NULL')    
	   
   
	   	 
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
              '''+ @process_id+''',
              ''Error'',
              ''Import Data'',
              '''+@table_name+''',
              ''Data Error'',
              ''Data error for time series group :'' + ISNULL(a.time_series_group, ''NULL'')
              + '', time_series_group :'' + ISNULL(a.time_series_group, ''NULL'') + ''.(
                  Data FORMAT FOR time_series_group ''
                   + ISNULL(a.time_series_group, ''NULL'') + '' is not present
              )'',
              ''Please CHECK your Data'',
 			 a.import_file_name
       FROM   '+ @import_temp_table_name + ' a
	   		LEFT JOIN static_data_value sdv2 ON sdv2.code = CAST(a.time_series_group AS NVARCHAR(200))
			LEFT JOIN static_data_type sdt2 ON sdt2.type_id = sdv2.type_id AND sdt2.type_name =''Weather Data Time Series''
       WHERE    sdv2.value_id IS NULL AND NULLIF(a.time_series_group,'''') IS NOT NULL ')    

	   

 	--PRINT('2')   
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

	EXEC('DELETE tsd 
			FROM   '+ @import_temp_table_name + ' a
	INNER JOIN time_series_definition tsd1  ON a.time_series_id = tsd1.time_series_id
	LEFT JOIN static_data_value sdv ON sdv.code = a.time_series_group
	INNER JOIN time_series_data tsd ON tsd.time_series_definition_id = tsd1.time_series_definition_id
	AND ISNULL(a.effective_date,''1900-01-01'') = ISNULL(tsd.effective_date,''1900-01-01'')
	AND ISNULL(CAST(a.maturity as DATETIME),''1900-01-01'') = CAST(ISNULL(tsd.maturity,''1900-01-01'') AS DATE)
	AND ISNULL(CASE WHEN CHARINDEX('':'',a.hour) = 0 THEN DATEADD(hh,CAST(a.hour as INT),CAST(a.maturity as DATETIME)) ELSE CAST(a.hour as Time) END,1900-01-01) = ISNULL(CASE WHEN CHARINDEX('':'',a.hour) =0 THEN CAST(tsd.maturity as datetime) ELSE CAST(tsd.maturity as time) END,1900-01-01)
	AND ISNULL(a.is_dst,0) = ISNULL(tsd.is_dst,0)
	AND ISNULL(sdv.value_id,-1) = ISNULL(tsd.time_series_group,-1)
	')
	
	EXEC(
		'INSERT INTO time_series_data(time_series_definition_id
		,effective_date
		,maturity
		,curve_source_value_id
		,value
		,is_dst
		,create_user
		,create_ts
		,time_series_group
		)
		Select
			tsd.time_series_definition_id,
			a.effective_date,
		CASE WHEN CHARINDEX('':'',ISNULL(a.hour,0)) = 0 THEN DATEADD(hh,CAST(ISNULL(a.hour,0) as INT),CAST(a.maturity as DATETIME)) 
		ELSE CAST(a.maturity as DATETIME)+ CAST(ISNULL(a.hour,0) as DATETime)
		END maturity
		,sdv.value_id,
		CONVERT(Float,(CASE WHEN a.data_type = ''d''  THEN CAST(sdv1.value_id as float) ELSE a.static_data_value END )) value,
		a.is_dst
		,dbo.FNADBUser()
		,GETDATE()
		,sdv2.value_id
			 FROM  '+@import_temp_table_name +' a
		INNER JOIN time_series_definition tsd ON tsd.time_series_id = a.time_series_id
		LEFT JOIN static_data_value sdv ON sdv.code = a.series_source AND sdv.type_id = 10007
		--LEFT JOIN Static_data_type sdt ON sdt.type_id = sdv.type_id AND sdt.type_name = ''Curve Source''
		LEFT JOIN static_data_value sdv1 On sdv1.code = CAST(a.static_data_value AS NVARCHAR(100)) and a.data_type = ''d'' and sdv1.type_id = tsd.static_data_type_id
		--LEFT JOIN static_data_type sdt1 ON sdt1.type_id = sdv1.type_id  AND sdt1.type_name = ''Index Group''
		LEFT JOIN static_data_value sdv2 ON sdv2.code = CAST(a.time_series_group AS NVARCHAR(200))
		LEFT JOIN static_data_type sdt2 ON sdt2.type_id = sdv2.type_id AND sdt2.type_id = tsd.group_id')
	END TRY 
	BEGIN CATCH 
	EXEC('DELETE FROM '+ @import_temp_table_name)
	DECLARE @error NVARCHAR (500)
	DECLARE @error_no NVARCHAR(100)
	SELECT @error_no =  REPLACE(ERROR_number(),'''',' ')
	SELECT @error =CASE WHEN @error_no = '2627' THEN 'Duplicate data. Following column combination  
Time Series Definition ID, Effective Date, Maturity, Is Dst, Curve Source Value ID, Time Series Group should be unique. Or The data in the database was not deleted.' ELSE REPLACE(ERROR_MESSAGE(),'''',' ') END
			EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step])
 				  SELECT TOP 1  1,
					  '''+ @process_id+''',
					  ''Error'',
					  ''Import Data'',
					  '''+@table_name+''',
					  ''Data Error'',
					  '''+@error+''',
					  ''Please CHECK your Data''  
			   ')   
	END CATCH 
 
END 

 IF @table_name = 'ixp_weather_template'
BEGIN

 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	        SELECT DISTINCT temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Invalid Data '' + CAST(Value as NVARCHAR(50)) + '' for time series '' + ColumnName + '' column.'',
 	             ''Please check your data.'', filename
	 	    FROM   '+@import_temp_table_name + '
			UNPIVOT
			(   Value
				FOR ColumnName IN (TMP, DPT, HUM, HID, WCL, WDR, WSP, WET, CC, SSM)
			) upvt
 	        WHERE ISNUMERIC(Value) = 0 ')

 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	        SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Weather Data Time Series Code: '' + a.code + '' not registered in system.'',
 	             ''Please check your data.'', a.filename  -- a.import_file_name
	 	    FROM   '+@import_temp_table_name + ' a
			LEFT JOIN static_data_value sdv ON sdv.[type_id] = 40000 AND sdv.code = a.code
			WHERE sdv.value_id IS NULL  ')
 	        	
 	
 	EXEC('DELETE ' + @import_temp_table_name + ' FROM   #import_status INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')       

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' DELETE tsd FROM
		 (
		 SELECT a.o_f,a.published_date,sdv.value_id, DATEADD(hh,CAST(RIGHT(a.forecast_date, 2) AS INT), CONVERT(NVARCHAR(10),a.forecast_date, 120)) maturity
		 , TMP, DPT, HUM, HID, WCL, WDR, WSP, WET, CC, SSM FROM 
		' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv ON sdv.[type_id] = 40000 AND sdv.code = a.code
		 ) p UNPIVOT (
 			value FOR [time_series] IN (TMP,DPT,HUM,HID,WCL,WDR,WSP,WET,CC,SSM)	 
		 ) AS unpvt
		 CROSS APPLY( SELECT  tsdf.time_series_definition_id, tsdf.time_series_id FROM time_series_definition tsdf WHERE tsdf.time_series_type_value_id = 39002 AND tsdf.group_id = 40000 
		 AND tsdf.time_series_id = unpvt.time_series + CASE unpvt.o_f WHEN ''O'' THEN ''_O'' WHEN ''F'' THEN ''_F'' ELSE '''' END
		 ) c
	INNER JOIN time_series_data tsd ON tsd.time_series_definition_id = c.time_series_definition_id AND ISNULL(tsd.effective_date,''1900-01-01'') = ''1900-01-01''
	AND ISNULL(unpvt.maturity, ''1900-01-01'') = ISNULL(tsd.maturity, ''1900-01-01'')
	AND ISNULL(tsd.is_dst, 0) = 0 AND tsd.curve_source_value_id = 4500 AND ISNULL(tsd.time_series_group, -1) = ISNULL(unpvt.value_id, -1)
	WHERE c.time_series_id IN ( ''TMP_O'', ''DPT_O'', ''HUM_O'', ''HID_O'', ''WCL_O'', ''WDR_O'', ''WSP_O'', ''WET_O'', ''CC_O'', ''SSM_O'', 
	''TMP_F'', ''DPT_F'', ''HUM_F'', ''HID_F'', ''WCL_F'', ''WDR_F'', ''WSP_F'', ''WET_F'', ''CC_F'', ''SSM_F'' )
	'
	EXEC(@sql)
	
	CREATE TABLE #time_series_data(id INT IDENTITY(1,1),time_series_definition_id INT, effective_date DATETIME, maturity DATETIME, curve_source_value_id INT, [value] FLOAT, is_dst INT,
	 create_user NVARCHAR(50) COLLATE DATABASE_DEFAULT, create_ts DATETIME, time_series_group INT, published_date DATETIME)
	
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #time_series_data(time_series_definition_id, effective_date, maturity, curve_source_value_id, [value], is_dst, create_user, create_ts, time_series_group, published_date)
		 SELECT c.time_series_definition_id, NULL effective_date, unpvt.maturity, 4500 curve_source_value_id , unpvt.value, 0 is_dst, dbo.FNADBUser() create_user,
		 GETDATE() create_ts , unpvt.value_id  time_series_group, unpvt.published_date
		 FROM
		 (
		 SELECT a.o_f,a.published_date,sdv.value_id, DATEADD(hh,CAST(RIGHT(a.forecast_date, 2) AS INT),
		 CONVERT(NVARCHAR(10),a.forecast_date, 120)) maturity
		 , TMP, DPT, HUM, HID, WCL, WDR, WSP, WET, CC, SSM FROM 
		 ' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv ON sdv.[type_id] = 40000 AND sdv.code = a.code
		 ) p UNPIVOT (
 			value FOR [time_series] IN (TMP,DPT,HUM,HID,WCL,WDR,WSP,WET,CC,SSM)	 
		 ) AS unpvt
		 CROSS APPLY( SELECT  tsdf.time_series_definition_id, tsdf.time_series_id FROM time_series_definition tsdf WHERE tsdf.time_series_type_value_id = 39002 AND tsdf.group_id = 40000 
		 AND tsdf.time_series_id = unpvt.time_series + CASE unpvt.o_f WHEN ''O'' THEN ''_O'' WHEN ''F'' THEN ''_F'' ELSE '''' END
		 ) c
    '
	
	EXEC(@sql)		

 -- for dublicate rows only take latest published date data.
	DELETE FROM  #time_series_data
	WHERE id NOT IN (
	SELECT DISTINCT (rs.max_id) id FROM #time_series_data tsd
	CROSS APPLY (
		SELECT TOP 1 tsd_inner.id max_id 
		FROM #time_series_data tsd_inner 
		WHERE tsd_inner.time_series_definition_id = tsd.time_series_definition_id
			AND ISNULL(tsd_inner.effective_date, '1900-01-01') =  ISNULL(tsd.effective_date, '1900-01-01') 
			AND tsd_inner.maturity = tsd.maturity
			AND tsd_inner.is_dst = tsd.is_dst
			AND tsd_inner.curve_source_value_id = tsd.curve_source_value_id
			AND tsd_inner.time_series_group = tsd.time_series_group
		ORDER BY tsd_inner.published_date DESC
	) rs
	)
	
	IF NOT EXISTS (SELECT 1 FROM #time_series_data) -- when no time series defined in system, no valid data to import
	BEGIN
	 	EXEC('DELETE a FROM ' + @import_temp_table_name + ' a ')       
	END

	INSERT INTO time_series_data(time_series_definition_id, effective_date,
	            maturity, curve_source_value_id, [value], is_dst, create_user,
	            create_ts, time_series_group)
	SELECT   time_series_definition_id, effective_date,
	            maturity, curve_source_value_id, [value], is_dst, create_user,
	            create_ts, time_series_group FROM #time_series_data
	                      
	            
 
END	

IF @table_name = 'ixp_contract_template'
BEGIN 	
 		/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'contract_group'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)

	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
 	
	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''source_contract_id'', ''source_contract_id'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''contract_name'', ''contract_name'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''contract_desc'', ''contract_desc'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''settlement_days'', ''settlement_days'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''payment_days'', ''payment_days'')')	
 	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
 	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''contract_type_def_id'', ''b.code = a.contract_type_def_id AND b.type_id = 38400'', ''e''), --error rows
			(''source_currency'', ''currency'', ''b.currency_id = a.currency'', ''e''),  --error rows
			(''source_uom'', ''volume_uom'', ''b.uom_id = a.volume_uom'', ''e''),  --error rows
			(''source_commodity'', ''commodity'', ''b.commodity_id = a.commodity'', ''e''),  --error rows
			(''static_data_value'', ''volume_granularity'', ''b.code = a.volume_granularity AND b.type_id = 978'', ''e''),  --error rows
			(''static_data_value'', ''settlement_date'', ''b.code = a.settlement_date AND b.type_id = 20000'', ''e''), --error rows
			(''static_data_value'', ''invoice_due_date'', ''b.code = a.invoice_due_date AND b.type_id = 20000'', ''e''), --error rows
			(''Contract_report_template'', ''invoice_report_template'', ''b.template_name = a.invoice_report_template'', ''e''), --error rows
			(''Contract_report_template'', ''contract_report_template'', ''b.template_name = a.contract_report_template'', ''e''),  --error rows
			(''Contract_report_template'', ''netting_template'', ''b.template_name = a.netting_template'', ''e''), --error rows
			(''admin_email_configuration'', ''contract_email_template'', ''b.template_name = a.contract_email_template AND b.module_type = 17804'', ''e''), --error rows
			(''static_data_value'', ''billing_cycle'', ''b.code = a.billing_cycle AND b.type_id = 17900'', ''w''),
			(''static_data_value'', ''contract_status'', ''b.code = a.contract_status AND b.type_id = 1900'', ''w''),
			(''source_uom'', ''rec_uom'', ''b.uom_id = a.rec_uom'', ''w''),
			(''static_data_value'', ''maintain_rate_schedule'', ''b.code = a.maintain_rate_schedule AND b.type_id = 1800'', ''w''),
			(''contract_charge_type'', ''contract_charge_type_id'', ''b.contract_charge_desc = a.contract_charge_type_id'', ''w'')
	')
 	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- counterparty error
 	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
 			10001,
 			''
				{
					"column_name": "'' + scm.source_column_name + ''"
				}
			'',
 			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''pipeline'' -- ixp_columns_name
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.contract_type_def_id
		WHERE sdv.value_id = 38404 -- storage
			AND a.pipeline IS NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
 			10002,
 			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.pipeline + ''"
				}
			'',
 			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''pipeline'' -- ixp_columns_name
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.contract_type_def_id
		LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.pipeline
		WHERE sdv.value_id = 38404 -- storage 
			AND sc.source_counterparty_id IS NULL
			AND a.pipeline IS NOT NULL
	')

	-- Storage asset error
	EXEC ('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
 	        10001,
 	        ''
				{
					"column_name": "'' + scm.source_column_name + ''"
				}
			'',
 	        a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''storage_asset_id'' -- ixp_columns_name
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.contract_type_def_id
		WHERE sdv.value_id = 38404 -- storage
			AND a.storage_asset_id IS NULL
	')

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
 			10002,
 			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.storage_asset_id + ''"
				}
			'',
 			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''storage_asset_id'' -- ixp_columns_name
        ) scm

		LEFT JOIN static_data_value sdv
			ON sdv.code = a.contract_type_def_id
		LEFT JOIN storage_asset sa ON sa.asset_name = a.storage_asset_id
			WHERE sdv.value_id = 38404 -- storage 
			AND sa.storage_asset_id IS NULL
			AND a.storage_asset_id IS NOT NULL
	')
	
	-- validation for non existent static data 
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
 	        10013,
 	        ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.netting_statement + ''"
				}
			'',
 	        a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''netting_statement'' -- ixp_columns_name
		) scm
		WHERE a.netting_statement NOT IN (''yes'', ''no'',''y'',''n'')
	')

	--PRINT('***duplicate data***')
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Data error for [storage_asset_id] :'' + ISNULL(a.[storage_asset_id], ''NULL'') + '' [contract_type_def_id] : '' + a.contract_type_def_id + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				''Please CHECK your Data'',
 				a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
 		INNER JOIN (
 				SELECT storage_asset_id,contract_type_def_id, COUNT(*) notimes
 				FROM ' + @import_temp_table_name + '
 				GROUP BY storage_asset_id,contract_type_def_id
 				HAVING COUNT(*) > 1
 			) b
 		ON  a.storage_asset_id = b.storage_asset_id AND a.contract_type_def_id = b.contract_type_def_id
	')

 	EXEC('DELETE ' + @import_temp_table_name + '
		FROM #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	EXEC('DELETE ' + @import_temp_table_name + '
		FROM #import_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id
	')
    ---- End Lookup validation--------
     
    -- data format errors handeling ends
    SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		UPDATE cg 
		SET source_system_id = b.source_system_id, 
			contract_name = b.contract_name,
            contract_desc = b.contract_desc,
            source_contract_id = ISNULL(b.source_contract_id, b.contract_name),
            volume_granularity = sdv.value_id,
            payment_days = b.payment_days,
            settlement_days = b.settlement_days,
            standard_contract = CASE WHEN b.contract_type_def_id = ''Standard'' THEN  ''y'' Else NULL End,
            sub_id = b.sub_id,
 			contract_date = b.contract_date,
 			receive_invoice = b.receive_invoice,
 			settlement_accountant = b.settlement_accountant,
 			billing_cycle = bill_cycle.value_id,
 			hourly_block = b.hourly_block,
 			currency = sc.source_currency_id,
 			volume_mult = b.volume_mult,
 			onpeak_mult = b.onpeak_mult,
 			offpeak_mult = b.offpeak_mult,
 			reverse_entries = b.reverse_entries,
 			volume_uom = vol_uom.source_uom_id,
 			rec_uom = rec_uom.source_uom_id,
 			contract_specialist = b.contract_specialist,
 			term_start = b.term_start,
 			term_end = b.term_end,
 			name = b.name,
 			company = b.company,
 			state = b.state,
 			city = b.city,
 			zip = b.zip,
 			address = b.address,
 			address2 = b.address2,
 			telephone = b.telephone,
 			email = b.email,
 			fax = b.fax,
 			name2 = b.name2,
 			company2 = b.company2,
 			telephone2 = b.telephone2,
 			fax2 = b.fax2,
 			email2 = b.email2,
 			area_engineer = b.area_engineer,
 			metering_contract = b.metering_contract,
 			miso_queue_number = b.miso_queue_number,
 			substation_name = b.substation_name,
 			project_county = b.project_county,
 			voltage = b.voltage,
 			time_zone = b.time_zone,
		'
		SET @sql += '
 			contract_service_agreement_id = b.contract_service_agreement_id,
 			contract_charge_type_id = cct.contract_charge_type_id,
 			billing_from_date = b.billing_from_date,
 			billing_to_date = b.billing_to_date,
 			contract_report_template = crt.template_id,
 			Subledger_code = b.Subledger_code,
 			UD_Contract_id = b.UD_Contract_id,
 			extension_provision_description = b.extension_provision_description,
 			term_name = b.term_name,
 			increment_name = b.increment_name,
 			ferct_tarrif_reference = b.ferct_tarrif_reference,
 			point_of_delivery_control_area = b.point_of_delivery_control_area,
 			point_of_delivery_specific_location = b.point_of_delivery_specific_location,
 			contract_affiliate = b.contract_affiliate,
 			point_of_receipt_control_area = b.point_of_receipt_control_area,
 			point_of_receipt_specific_location = b.point_of_receipt_specific_location,
 			no_meterdata = b.no_meterdata,
 			billing_start_month = b.billing_start_month,
 			increment_period = b.increment_period,
 			bookout_provision = b.bookout_provision,
 			contract_status = contract_status.value_id,
 			holiday_calendar_id = b.holiday_calendar_id,
 			billing_from_hour = b.billing_from_hour,
 			billing_to_hour = b.billing_to_hour,
 			block_type = b.block_type,
 			payment_calendar = b.payment_calendar,
 			pnl_date = b.pnl_date,
 			pnl_calendar = b.pnl_calendar,
 			settlement_calendar = b.settlement_calendar,
 			transportation_contract = b.transportation_contract,
 			pipeline = sc1.source_counterparty_id,
 			flow_start_date = b.flow_start_date,
 			flow_end_date = b.flow_end_date,
 			settlement_rule = b.settlement_rule,
 			path = b.path,
 			capacity_release = b.capacity_release,
 			deal = b.deal,
 			interruptible = b.interruptible,
 			contract_type = CASE
				WHEN b.contract_type  =  ''Firm Transport'' THEN ''f'' 
				WHEN b.contract_type  = ''interruptible transport'' THEN ''i'' 
				WHEN b.contract_type  = ''storage'' THEN ''s'' 
				ELSE NULL 
			END,
 			maintain_rate_schedule = sdv_rate.value_id,
 			base_load = b.base_load,
 			invoice_report_template = irt.template_id,
 			self_billing = b.self_billing,
 			netting_template = nrt.template_id,
			mdq = b.mdq,
			settlement_date = sdv_settlement_rule.value_id,
			invoice_due_date = sdv_payment_rule.value_id,
			netting_statement = CASE 
				WHEN b.netting_statement = ''yes'' THEN ''y''
				WHEN b.netting_statement = ''y'' THEN ''y''
				ELSE ''n'' 
			END,
			contract_email_template = aec.admin_email_configuration_id,
			contract_type_def_id = sdv_contract_type.value_id,
			commodity = scom.source_commodity_id,
			storage_asset_id = sa.storage_asset_id
        FROM contract_group cg
	'
	
	SET @sql2 = CAST('' AS NVARCHAR(MAX)) + N' 
		INNER JOIN ' + @import_temp_table_name + ' b 
			ON  cg.source_contract_id = ISNULL(b.source_contract_id, b.contract_name)
				AND cg.source_system_id = b.source_system_id
        INNER JOIN source_system_description d 
			ON  b.source_system_id = d.source_system_id
		LEFT JOIN storage_asset sa 
			ON sa.asset_name = b.storage_asset_id
        LEFT JOIN static_data_value sdv 
			ON sdv.code = b.volume_granularity 
				AND sdv.type_id = 978
        LEFT JOIN static_data_value bill_cycle 
			ON bill_cycle.code = b.billing_cycle
				AND bill_cycle.type_id = 17900
        LEFT JOIN static_data_value contract_status 
			ON contract_status.code = b.contract_status 
				AND contract_status.type_id = 1900
        LEFT JOIN source_currency sc 
			ON sc.currency_id = b.currency
        LEFT JOIN source_uom vol_uom 
			ON vol_uom.uom_id = b.volume_uom
        LEFT JOIN source_uom rec_uom 
			ON rec_uom.uom_id = b.rec_uom
        LEFT JOIN Contract_report_template crt 
			ON crt.template_name = b.contract_report_template
        LEFT JOIN Contract_report_template nrt 
			ON nrt.template_name = b.netting_template
        LEFT JOIN Contract_report_template irt 
			ON irt.template_name = b.invoice_report_template
		LEFT JOIN source_counterparty sc1 
			ON b.pipeline = sc1.counterparty_id
		LEFT JOIN static_data_value sdv_rate 
			ON sdv_rate.code = b.maintain_rate_schedule 
				AND sdv_rate.type_id = 1800
		LEFT JOIN static_data_value sdv_settlement_rule 
			ON sdv_settlement_rule.code = b.settlement_date 
				AND sdv_settlement_rule.type_id = 20000
		LEFT JOIN static_data_value sdv_payment_rule 
			ON sdv_payment_rule.code = b.invoice_due_date 
				AND sdv_payment_rule.type_id = 20000
		LEFT JOIN admin_email_configuration aec 
			ON aec.template_name = b.contract_email_template 
				AND aec.module_type = 17804
		LEFT JOIN static_data_value sdv_contract_type 
			ON sdv_contract_type.code = b.contract_type_def_id 
				AND sdv_contract_type.type_id = 38400
		LEFT JOIN contract_charge_type cct 
			ON cct.contract_charge_desc = b.contract_charge_type_id
		LEFT JOIN source_commodity scom 
			ON scom.commodity_id = b.commodity
		OUTER APPLY (
			SELECT temp_id 
			FROM #error_status es
			INNER JOIN message_log_template mlt 
				ON mlt.message_number = es.error_number
			WHERE b.temp_id = es.temp_id
				AND mlt.message_status = ''ERROR''
		) es				 
		WHERE es.temp_id IS NULL 
	'

	--	PRINT(@sql)
 	SET @sql += @sql2 	
 	
	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
		EXEC(@sql)
	END

 	--PRINT('4')
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO contract_group(
 			source_system_id, contract_name, contract_desc, source_contract_id, is_active, volume_granularity, energy_type, neting_rule, [type], invoice_due_date, settlement_date, payment_days, settlement_days, standard_contract,
 			sub_id, contract_date, receive_invoice, settlement_accountant, billing_cycle, hourly_block, currency, volume_mult, onpeak_mult, offpeak_mult,
 			reverse_entries, volume_uom, rec_uom, contract_specialist, term_start, term_end, name, company, state, city, zip, address, address2, 
 			telephone, email, fax, name2, company2, telephone2, fax2, email2, area_engineer, metering_contract, miso_queue_number, substation_name, 
 			project_county, voltage, time_zone, contract_service_agreement_id, contract_charge_type_id, billing_from_date, billing_to_date, 
 			contract_report_template, Subledger_code, UD_Contract_id, extension_provision_description, term_name, increment_name, ferct_tarrif_reference, 
 			point_of_delivery_control_area, point_of_delivery_specific_location, contract_affiliate, point_of_receipt_control_area, 
 			point_of_receipt_specific_location, no_meterdata, billing_start_month, increment_period, bookout_provision, contract_status, holiday_calendar_id, 
 			billing_from_hour, billing_to_hour, block_type, payment_calendar, pnl_date, pnl_calendar, settlement_calendar, transportation_contract, pipeline, 
 			flow_start_date, flow_end_date, settlement_rule, path, capacity_release, deal, interruptible, contract_type, maintain_rate_schedule, base_load, 
 			invoice_report_template, self_billing, netting_template,mdq, contract_email_template, netting_statement, contract_type_def_id, commodity, storage_asset_id
 		)
	'
	SET @sql += '
 	    SELECT a.source_system_id, a.contract_name, a.contract_desc, ISNULL(a.source_contract_id, a.contract_name), ''y'',
 			isnull(sdv.value_id,980), ''p'', ''n'', ''a'', sdv_payment_rule.value_id, sdv_settlement_rule.value_id,
 			a.payment_days,  a.settlement_days,
			CASE 
				WHEN a.contract_type_def_id = ''Standard'' THEN  ''y'' 
				ELSE NULL 
			END,
 			a.sub_id, a.contract_date, a.receive_invoice, a.settlement_accountant, bill_cycle.value_id,
 			a.hourly_block,
 			sc.source_currency_id,
 			a.volume_mult,
 			a.onpeak_mult,
 			a.offpeak_mult,
 			a.reverse_entries,
 			vol_uom.source_uom_id,
 			rec_uom.source_uom_id,
 			a.contract_specialist,
 			a.term_start,
 			a.term_end,
 			a.name,
 			a.company,
 			a.state,
 			a.city,
 			a.zip,
 			a.address,
 			a.address2,
 			a.telephone,
 			a.email,
 			a.fax,
 			a.name2,
 			a.company2,
 			a.telephone2,
 			a.fax2,
 			a.email2,
 			a.area_engineer,
 			a.metering_contract,
 			a.miso_queue_number,
 			a.substation_name,
 			a.project_county,
 			a.voltage,
 			a.time_zone,
 			a.contract_service_agreement_id,
 			cct.contract_charge_type_id,
 			a.billing_from_date,
 			a.billing_to_date,
 			crt.template_id,
 			a.Subledger_code,
 			a.UD_Contract_id,
 			a.extension_provision_description,
 			a.term_name,
 			a.increment_name,
 			a.ferct_tarrif_reference,
 			a.point_of_delivery_control_area,
 			a.point_of_delivery_specific_location,
 			a.contract_affiliate,
 			a.point_of_receipt_control_area,
 			a.point_of_receipt_specific_location,
 			a.no_meterdata,
 			a.billing_start_month,
 			a.increment_period,
 			a.bookout_provision,
 			contract_status.value_id,
 			a.holiday_calendar_id,
 			a.billing_from_hour,
 			a.billing_to_hour,
 			a.block_type,
 			a.payment_calendar,
 			a.pnl_date,
 			a.pnl_calendar,
 			a.settlement_calendar,
 			a.transportation_contract,
 			sc1.source_counterparty_id,
 			a.flow_start_date,
 			a.flow_end_date,
 			a.settlement_rule,
 			a.path,
 			a.capacity_release,
 			a.deal,
 			a.interruptible,
 			CASE  
				WHEN a.contract_type = ''Firm Transport'' THEN ''f'' 
				WHEN a.contract_type  = ''interruptible transport'' THEN ''i'' 
				WHEN a.contract_type  = ''storage'' THEN ''s'' 
				ELSE NULL 
			END,
 			sdv_rate.value_id,
 			a.base_load,
 			irt.template_id,
 			a.self_billing,
 			nrt.template_id,
			a.mdq,
			aec.admin_email_configuration_id,
			CASE 
				WHEN a.netting_statement = ''yes'' THEN ''y''
				WHEN a.netting_statement = ''y'' THEN ''y''
				ELSE ''n''
			END,
			sdv_contract_type.value_id,
			scom.source_commodity_id,
			sa.storage_asset_id
	'
 	
	SET @sql2 = CAST('' AS NVARCHAR(MAX)) + N' 
		FROM ' + @import_temp_table_name + ' a
        INNER JOIN source_system_description d 
			ON  a.source_system_id = d.source_system_id
		LEFT JOIN storage_asset sa 
			ON sa.asset_name = a.storage_asset_id
        LEFT JOIN contract_group e 
			ON  e.source_contract_id = ISNULL(a.source_contract_id, a.contract_name)
				AND e.source_system_id = a.source_system_id
        LEFT JOIN static_data_value sdv 
			ON sdv.code = a.volume_granularity 
				AND sdv.type_id = 978
        LEFT JOIN static_data_value bill_cycle 
			ON bill_cycle.code = a.billing_cycle 
				AND bill_cycle.type_id = 17900
        LEFT JOIN static_data_value contract_status 
			ON contract_status.code = a.contract_status 
				AND contract_status.type_id = 1900
 		LEFT JOIN source_currency sc 
			ON sc.currency_id = a.currency
 		LEFT JOIN source_uom vol_uom 
			ON vol_uom.uom_id = a.volume_uom
 		LEFT JOIN source_uom rec_uom 
			ON rec_uom.uom_id = a.rec_uom
 		LEFT JOIN Contract_report_template crt 
			ON crt.template_name = a.contract_report_template
 		LEFT JOIN Contract_report_template nrt 
			ON nrt.template_name = a.netting_template
 		LEFT JOIN Contract_report_template irt 
			ON irt.template_name = a.invoice_report_template
		LEFT JOIN source_counterparty sc1 
			ON a.pipeline = sc1.counterparty_id
		LEFT JOIN static_data_value sdv_rate 
			ON sdv_rate.code = a.maintain_rate_schedule 
				AND sdv_rate.type_id = 1800
		LEFT JOIN static_data_value sdv_settlement_rule 
			ON sdv_settlement_rule.code = a.settlement_date 
				AND sdv_settlement_rule.type_id = 20000
		LEFT JOIN static_data_value sdv_payment_rule 
			ON sdv_payment_rule.code = a.invoice_due_date 
				AND sdv_payment_rule.type_id = 20000
		LEFT JOIN admin_email_configuration aec 
			ON aec.template_name = a.contract_email_template 
				AND aec.module_type = 17804
		LEFT JOIN static_data_value sdv_contract_type 
			ON sdv_contract_type.code = a.contract_type_def_id 
				AND sdv_contract_type.type_id = 38400
		LEFT JOIN contract_charge_type cct 
			ON cct.contract_charge_desc = a.contract_charge_type_id
		LEFT JOIN source_commodity scom 
			ON scom.commodity_id = a.commodity
		OUTER APPLY (
			SELECT temp_id 
			FROM #error_status es
			INNER JOIN message_log_template mlt 
				ON mlt.message_number = es.error_number
			WHERE a.temp_id = es.temp_id
				AND mlt.message_status = ''ERROR''
		) es				 
		WHERE  es.temp_id IS NULL 
			AND e.contract_id IS NULL 
	'
	--   PRINT(@sql)
 	EXEC(@sql + @Sql2)
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		INSERT INTO contract_group_detail (
 			contract_id,
 			invoice_line_item_id,
 			radio_automatic_manual,
 			Prod_type,
 			sequence_order,
 			hideInInvoice,
 			include_charges,
 			calc_aggregation
 		)
 		SELECT cg.contract_id,
 			-10019,
 			''c'',
 			''p'',
 			''1'',
 			''s'',
 			''y'',
 			19002
 		FROM contract_group cg 
 		INNER JOIN ' + @import_temp_table_name + ' a 
			ON a.source_contract_id = cg.source_contract_id
 		LEFT JOIN contract_group_detail cgd 
			ON cgd.contract_id = cg.contract_id 
				--AND cgd.invoice_line_item_id = -10019
 		WHERE cgd.ID IS NULL 
			AND a.contract_type_def_id  = ''Standard'''
 	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		UPDATE cca
		SET apply_netting_rule = CASE a.netting_statement 
				WHEN ''yes'' THEN ''y'' 
				WHEN ''y'' THEN ''y'' 
				ELSE ''n'' 
			END,
			contract_status = sdv_cs.value_id,
			invoice_due_date = sdv_pr.value_id,
			payment_days = a.payment_days
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_system_description ssd 
			ON  a.source_system_id = ssd.source_system_id
		INNER JOIN contract_group cg 
			ON cg.source_contract_id = ISNULL(a.source_contract_id, a.contract_name)
			AND cg.source_system_id = a.source_system_id
		INNER JOIN source_counterparty sc 
			ON a.pipeline = sc.counterparty_id
		LEFT JOIN static_data_value sdv_cs 
			ON sdv_cs.code = a.contract_status 
				AND sdv_cs.type_id = 1900
		LEFT JOIN static_data_value sdv_pr 
			ON sdv_pr.code = a.invoice_due_date 
				AND sdv_pr.type_id = 20000
		LEFT JOIN counterparty_contract_address cca 
			ON cca.counterparty_id = sc.source_counterparty_id
				AND cca.contract_id = cg.contract_id
				AND cca.internal_counterparty_id IS NULL
		WHERE cca.counterparty_contract_address_id IS NOT NULL 
	'

	EXEC (@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		INSERT INTO counterparty_contract_address (
			contract_id, counterparty_id, apply_netting_rule, contract_status, invoice_due_date, payment_days
		)
		SELECT cg.contract_id,
			sc.source_counterparty_id,
			CASE a.netting_statement 
				WHEN ''yes'' THEN ''y'' 
				WHEN ''y'' THEN ''y'' 
				ELSE ''n'' 
			END,
			sdv_cs.value_id,
			sdv_pr.value_id,
			a.payment_days
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_system_description ssd 
			ON  a.source_system_id = ssd.source_system_id
		INNER JOIN contract_group cg 
			ON cg.source_contract_id = ISNULL(a.source_contract_id, a.contract_name)
				AND cg.source_system_id = a.source_system_id
		INNER JOIN source_counterparty sc 
			ON a.pipeline = sc.counterparty_id
		LEFT JOIN static_data_value sdv_cs 
			ON sdv_cs.code = a.contract_status 
				AND sdv_cs.type_id = 1900
		LEFT JOIN static_data_value sdv_pr 
			ON sdv_pr.code = a.invoice_due_date 
				AND sdv_pr.type_id = 20000
		LEFT JOIN counterparty_contract_address cca 
			ON cca.counterparty_id = sc.source_counterparty_id
				AND cca.contract_id = cg.contract_id
				AND cca.internal_counterparty_id IS NULL
		WHERE cca.counterparty_contract_address_id IS NULL
	'

	EXEC (@sql)
END	

IF @table_name = 'ixp_limit_by_rating'
BEGIN 
 
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET effective_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.effective_date = dd.user_date
	')
	/***END OF date update***/

	EXEC('DELETE ' + @field_compare_table)

	SET @source_table = @import_temp_table_name 
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation) 
		SELECT a.temp_id,
			NULL,
			''Value for column: Counterparty ('' + a.counterparty + ''), Internal Counterparty ('' + ISNULL(a.internal_counterparty,'''') + ''), Conrtact ('' + ISNULL(a.contract,'''') + ''), Rating ('' + a.rating + '') is already used.'',
			a.import_file_name,
			''Error'',
			''Data Error'',
			''Please correct data and re-import.''
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc 
			ON a.counterparty = sc.counterparty_id
		INNER JOIN counterparty_credit_info cci
			ON cci.counterparty_id = sc.source_counterparty_id
		LEFT JOIN source_counterparty sc1 
			ON a.internal_counterparty = sc1.counterparty_id
		LEFT JOIN contract_group cg 
			ON cg.contract_name = a.contract
		INNER JOIN static_data_value sdv 
			ON sdv.code = a.rating AND type_id = 10097
		INNER JOIN counterparty_credit_migration ccm 
			ON ccm.counterparty = sc.source_counterparty_id
				AND ISNULL(ccm.internal_counterparty, -1) = ISNULL (sc1.source_counterparty_id,-1) 
				AND ISNULL(ccm.contract, -1) =  ISNULL(cg.contract_id, -1)
				AND ccm.rating = sdv.value_id
				AND ccm.effective_date <> a.effective_date
		INNER JOIN source_currency scu 
			ON scu.currency_name = a.currency
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		WHERE #error_status.temp_id IS NULL AND ccm.counterparty_credit_migration_id IS NOT NULL 
	')

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	')

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  UPDATE ccm
		SET ccm.credit_limit = a.credit_limit,
			ccm.credit_limit_to_us = a.credit_limit_to_us,
			ccm.currency = scu.source_currency_id
		FROM   ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc 
					ON a.counterparty = sc.counterparty_id
		INNER JOIN counterparty_credit_info cci
			ON cci.counterparty_id = sc.source_counterparty_id
		LEFT JOIN source_counterparty sc1 
					ON a.internal_counterparty = sc1.counterparty_id
		LEFT JOIN contract_group cg 
			ON cg.contract_name = a.contract
		INNER JOIN static_data_value sdv 
					ON sdv.code = a.rating 
						AND type_id = 10097
		INNER JOIN counterparty_credit_migration ccm 
					ON ccm.counterparty = sc.source_counterparty_id
					AND ISNULL(ccm.internal_counterparty, -1) = ISNULL (sc1.source_counterparty_id,-1) 
					AND ISNULL(ccm.contract, -1) =  ISNULL(cg.contract_id, -1)
				AND ccm.rating = sdv.value_id
					AND ccm.effective_date = a.effective_date
		INNER JOIN source_currency scu ON scu.currency_name = a.currency
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND ccm.counterparty_credit_migration_id IS NOT NULL'

	EXEC (@sql)

	SET @sql = 
	    CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO counterparty_credit_migration
		  (
		    counterparty_credit_info_id,
		    effective_date,
			counterparty,
			internal_counterparty,
			contract,
			rating,
			credit_limit,
			credit_limit_to_us,
			currency
		  )
		SELECT cci.counterparty_credit_info_id,
			   a.effective_date,
			   sc.source_counterparty_id,
			   sc1.source_counterparty_id,
			   cg.contract_id,
			   sdv.value_id,
			   a.credit_limit,
			   a.credit_limit_to_us,
			   scu.source_currency_id
		FROM   ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty
		INNER JOIN counterparty_credit_info cci
			ON cci.counterparty_id = sc.source_counterparty_id
		LEFT JOIN source_counterparty sc1
			ON sc1.counterparty_id = a.internal_counterparty
		LEFT JOIN contract_group cg 
			ON cg.contract_name = a.contract
		INNER JOIN static_data_value sdv
			ON sdv.code = a.rating AND type_id = 10097
		LEFT JOIN counterparty_credit_migration ccm
			ON ccm.counterparty = sc.source_counterparty_id 
				AND ccm.effective_date = a.effective_date 
				AND ISNULL(ccm.internal_counterparty, -1) = ISNULL (sc1.source_counterparty_id,-1) 
					AND ISNULL(ccm.contract, -1) =  ISNULL(cg.contract_id, -1)
				AND ccm.rating = sdv.value_id
		INNER JOIN source_currency scu
			ON scu.currency_name = a.currency
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND ccm.counterparty_credit_migration_id IS NULL
		'
 	EXEC (@sql) 
END
 
IF @table_name = 'ixp_counterparty_contacts'
BEGIN	 	
	/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'counterparty_contacts'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)
	
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	
	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''title'', ''title'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''name'', ''name'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''id'', ''id'')')--id = contact_id
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''address1'', ''address1'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''address2'', ''address2'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''city'', ''city'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''zip'', ''zip'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''telephone'', ''telephone'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''fax'', ''fax'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''email'', ''email'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''comment'', ''comment'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''cell_no'', ''cell_no'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''email_cc'', ''email_cc'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_contacts'', ''email_bcc'', ''email_bcc'')')	
 	
	EXEC('DELETE 
 	      FROM ' + @import_temp_table_name + '
 	      WHERE  counterparty_id IS NULL
				 AND name IS NULL
 	             AND contact_type IS NULL
 	             AND id IS NULL
 	             AND address1 IS NULL
	')
 	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
 	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),  --error rows
			(''static_data_value'', ''contact_type'', ''b.code = a.contact_type AND b.type_id = 32200'', ''e''),  --error rows
			(''static_data_value'', ''state'', ''b.code = a.state AND type_id = 10016'', ''w''),
			(''static_data_value'', ''country'', ''b.code = a.country AND b.type_id = 14000'', ''w''),
			(''static_data_value'', ''region'', ''b.code = a.region AND b.[type_id] = 11150'', ''w'')
	')

	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'	
		
	 -- validation for non existent static data is_active, is_primary
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		 
		  ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.is_primary + ''"
				}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''is_primary''
          ) scm
		  WHERE a.is_primary NOT IN (''Yes'', ''No'', ''y'', ''n'')
	')
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  
		  ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.is_active + ''"
				}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''is_active''
          ) scm
		  WHERE a.is_active NOT IN (''Yes'', ''No'', ''y'', ''n'')
	')
	
	-- email,email_cc,email_bcc
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  
		  ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.email + ''"
				}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''email''
          ) scm
		  WHERE a.email NOT like ''%@%''
		  
		  UPDATE ' + @import_temp_table_name + '
			SET email = NULL
		  WHERE email NOT like ''%@%''
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  		  
		  ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.email_cc + ''"
				}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''email_cc'' -- ixp_columns_name
          ) scm
		  WHERE a.email_cc NOT like ''%@%''
		  
		  UPDATE ' + @import_temp_table_name + '
			SET email_cc = NULL
		  WHERE email_cc NOT like ''%@%''
	')
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  		  
		  ''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.email_bcc + ''"
				}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''email_bcc'' -- ixp_columns_name
          ) scm
		  WHERE a.email_bcc NOT like ''%@%''

		  UPDATE ' + @import_temp_table_name + '
			SET email_bcc = NULL
		  WHERE email_bcc NOT like ''%@%''
	')	

 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 
     	
	-- Update table if data exists (comparing data with counterparty_id, contract_type, id)
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'UPDATE cc
 	            SET title = a.title,
 	                name = a.name,
 	                address1 = a.address1,
					address2 = a.address2,
					city = a.city,
					[state] = sdv_state.value_id,
					zip =  a.zip,
					telephone = a.telephone,
					fax = a.fax,
					email = a.email,
					country = sdv_country.value_id,
					region = sdv_region.value_id,
					comment = a.comment,
					is_active = CASE WHEN a.is_active = ''yes'' THEN ''y''  WHEN a.is_active = ''y'' THEN ''y'' ELSE ''n'' END,
					is_primary = CASE WHEN a.is_primary = ''yes'' THEN ''y'' WHEN a.is_primary = ''y'' THEN ''y'' ELSE ''n'' END,
					cell_no = a.cell_no,
					email_cc = a.email_cc,
					email_bcc = a.email_bcc,
					create_user = dbo.FNADBUser(),
					create_ts = GETDATE(),
					update_user = dbo.FNADBUser(),
					update_ts = GETDATE()
				FROM ' + @import_temp_table_name + ' a 
				LEFT JOIN static_data_value sdv_contact_type
					ON sdv_contact_type.code = a.[contact_type] AND sdv_contact_type.[type_id] = 32200
				INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
                INNER JOIN counterparty_contacts cc
					ON a.id = cc.id AND sdv_contact_type.value_id = cc.contact_type
					AND sc.source_counterparty_id = cc.counterparty_id
				LEFT JOIN static_data_value sdv_state
					ON sdv_state.code = a.[state]
						AND sdv_state.[type_id] = 10016
  				LEFT JOIN static_data_value sdv_country
					ON sdv_country.code = a.country
						AND sdv_country.[type_id] <> 23100
  				LEFT JOIN static_data_value sdv_region
					ON sdv_region.code = a.region
						AND sdv_region.[type_id] = 11150
				OUTER APPLY ( SELECT temp_id 
							  FROM #error_status es
							  INNER JOIN message_log_template mlt 
							  	  ON mlt.message_number = es.error_number
							  WHERE a.temp_id = es.temp_id
							  	  AND mlt.message_status = ''ERROR''
				) es				 
				WHERE es.temp_id IS NULL'

 	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
 	EXEC(@sql)
	END
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO counterparty_contacts (
					counterparty_id, 
					contact_type, 
					title, 
					name, 
					id, 
					address1, 
					address2, 
					city, 
					[state], 
					zip, 
					telephone, 
					fax, 
					email, 
					country, 
					region, 
					comment, 
					is_active, 
					is_primary, 
					cell_no, 
					email_cc, 
					email_bcc, 
					create_user, 
					create_ts, 
					update_user, 
					update_ts
			)	
			SELECT sc.source_counterparty_id, 
				   sdv_contact_type.value_id, 
				   a.title, 
				   a.name, 
				   a.id, 
				   a.address1, 
				   a.address2, 
				   a.city, 
				   sdv_state.value_id, 
				   a.zip, 
				   a.telephone,
				   a.fax, 
				   a.email, 
				   sdv_country.value_id, 
				   sdv_region.value_id, 
				   a.comment, 
				   CASE WHEN a.is_active = ''yes'' THEN ''y''  WHEN a.is_active = ''y'' THEN ''y'' ELSE ''n'' END,
				   CASE WHEN a.is_primary = ''yes'' THEN ''y''  WHEN a.is_primary = ''y'' THEN ''y'' ELSE ''n'' END,		   
				   a.cell_no,
				   a.email_cc, 
				   a.email_bcc, 
				   dbo.FNADBUser(), 
				   GETDATE(), 
				   dbo.FNADBUser(), 
				   GETDATE()
  			FROM ' + @import_temp_table_name + ' a
  			INNER JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty_id
  			LEFT JOIN static_data_value sdv_state
				ON sdv_state.code = a.[state]
					AND sdv_state.[type_id] = 10016
  			LEFT JOIN static_data_value sdv_country
				ON sdv_country.code = a.country AND sdv_country.type_id = 14000
  			LEFT JOIN static_data_value sdv_region
				ON sdv_region.code = a.region
					AND sdv_region.[type_id] = 11150
  			LEFT JOIN static_data_value sdv_contact_type
				ON sdv_contact_type.code = a.contact_type
					AND sdv_contact_type.[type_id] = 32200
			LEFT JOIN counterparty_contacts cc
		        ON cc.counterparty_id = sc.source_counterparty_id
					AND cc.id = a.id
					AND cc.contact_type = sdv_contact_type.value_id
			OUTER APPLY ( SELECT temp_id 
						  FROM #error_status es
						  INNER JOIN message_log_template mlt 
							  ON mlt.message_number = es.error_number
						  WHERE a.temp_id = es.temp_id
						  	  AND mlt.message_status = ''ERROR''
			) es
			WHERE cc.counterparty_contact_id IS NULL
  	'
	EXEC(@sql)
END	
 
IF @table_name = 'ixp_contract_detail_template'
BEGIN
 	        
 	-- data repetition error handeling starts 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for line_item :'' + ISNULL(a.invoice_line_item_id, ''NULL'') + '' contract_name :'' + ISNULL(a.contract_id, ''NULL'') 
 				 + '' Prod_type :'' + ISNULL(a.Prod_type, ''NULL'') + '' deal_type :'' + ISNULL(a.deal_type, ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT invoice_line_item_id, contract_id, Prod_type, deal_type, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY invoice_line_item_id, contract_id, Prod_type, deal_type
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.invoice_line_item_id = b.invoice_line_item_id AND a.contract_id = b.contract_id AND a.Prod_type = b.Prod_type AND a.deal_type = b.deal_type')
 	--PRINT('1')		  
     -- data repetition error handeling ends
     -- data format errors handeling starts
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 		  SELECT a.temp_id,
              '''+ @process_id+''',
              ''Error'',
              ''Import Data'',
              '''+@table_name+''',
              ''Data Error'',
              ''Data error for contract_name :'' + ISNULL(a.contract_id, ''NULL'')
              + '', line_item:'' + ISNULL(CAST(a.invoice_line_item_id AS NVARCHAR(100)), ''NULL'') 
              + '', Prod_type :'' + ISNULL(a.Prod_type, ''NULL'') + ''. (Data FORMAT FOR invoice_line_item_id OR contract_name OR prod_type IS NULL.)'',
              ''Please CHECK your Data'',
              a.import_file_name
       FROM   '+ @import_temp_table_name + ' a
       WHERE contract_id IS NULL OR invoice_line_item_id IS NULL OR Prod_type IS NULL')   
         
 	--PRINT('2')   
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for contract_name :'' + ISNULL(a.contract_id, ''NULL'') 
 				 + '', invoice_line_item_id:'' + ISNULL(CAST(a.invoice_line_item_id AS NVARCHAR(10)), ''NULL'')   
 				 + ''. (line_item '' + ISNULL(CAST(a.invoice_line_item_id AS NVARCHAR(100)), ''NULL'') + '' is NOT found )'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		  LEFT JOIN static_data_value sdv ON  sdv.code = a.invoice_line_item_id
 		  WHERE  sdv.value_id IS NULL')
 	--PRINT('3')	  
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for contract_name :'' + ISNULL(a.contract_id, ''NULL'') 
 				 + '', invoice_line_item_id:'' + ISNULL(CAST(a.invoice_line_item_id AS NVARCHAR(10)), ''NULL'')   
 				 + ''. (line_item '' + ISNULL(CAST(a.invoice_line_item_id AS NVARCHAR(100)), ''NULL'') + '' is NOT found )'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		  LEFT JOIN contract_group cg ON  cg.contract_name = a.contract_id
 		  WHERE  cg.contract_id IS NULL')	 
 		  
 	EXEC('DELETE ' + @import_temp_table_name + '
           FROM #import_status
           INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id') 
           	  
      -- data format errors handeling ends
      SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE cgd
                  SET    contract_id = cg.contract_id,
 						invoice_line_item_id = line_items.value_id,
 						default_gl_id = adjc.default_gl_id,
 						price = b.price,
 						formula_id = fe.formula_id,
 						manual = b.manual,
 						currency = b.currency,
 						Prod_type = b.prod_type,
 						sequence_order = b.sequence_order,
 						inventory_item = b.inventory_item,
 						class_name = class_name.value_id,
 						increment_peaking_name = ipn.value_id,
 						product_type_name = ptn.value_id,
 						rate_description = b.rate_description,
 						units_for_rate = utr.value_id,
 						begin_date = b.begin_date,
 						end_date = b.end_date,
 						default_gl_id_estimates = adjc_est.default_gl_id,
 						eqr_product_name = eqr.value_id,
 						group_by = group_by.value_id,
 						alias = b.alias,
 						hideInInvoice = b.hideInInvoice,
 						int_begin_month = CASE b.int_begin_month WHEN ''January'' THEN 1
 												WHEN ''February'' THEN 2
 												WHEN ''March'' THEN 3
 												WHEN ''April'' THEN 4
 												WHEN ''May'' THEN 5
 												WHEN ''June'' THEN 6
 												WHEN ''July'' THEN 7
 												WHEN ''August'' THEN 8 
 												WHEN ''September'' THEN 9
 												WHEN ''October'' THEN 10
 												WHEN ''November'' THEN 11
 												WHEN ''December'' THEN 12
 											END,
 						int_end_month = CASE b.int_end_month WHEN ''January'' THEN 1
 												WHEN ''February'' THEN 2
 												WHEN ''March'' THEN 3
 												WHEN ''April'' THEN 4
 												WHEN ''May'' THEN 5
 												WHEN ''June'' THEN 6
 												WHEN ''July'' THEN 7
 												WHEN ''August'' THEN 8 
 												WHEN ''September'' THEN 9
 												WHEN ''October'' THEN 10
 												WHEN ''November'' THEN 11
 												WHEN ''December'' THEN 12
 											END,
 						volume_granularity = vol_gran.value_id,
 						deal_type = sdt.source_deal_type_id,
 						time_bucket_formula_id = tb.formula_id,
 						calc_aggregation = agg_level.value_id,
 						payment_date = pay_date.value_id,
 						payment_calendar = pay_cal.value_id,
 						pnl_date = pnl_date.value_id,
 						pnl_calendar = pnl_cal.value_id,
 						timeofuse = tou.value_id,
 						include_charges = b.include_charges,
 						contract_template = cct.contract_charge_type_id,
 						contract_component_template = cctd.id,
 						radio_automatic_manual = b.radio_automatic_manual,
 						settlement_date = set_date.value_id,
 						settlement_calendar = set_cal.value_id,
 						effective_date = b.effective_date,
 						group1 = sb1.source_book_id,
 						group2 = sb2.source_book_id,
 						group3 = sb3.source_book_id,
 						group4 = sb4.source_book_id,
 						leg = b.leg,
 						include_invoice = b.include_invoice
               '
		 SET @sql +=  ' FROM contract_group_detail cgd
                  INNER JOIN contract_group cg ON cg.contract_id = cgd.contract_id
                  INNER JOIN static_data_value line_items ON line_items.value_id = cgd.invoice_line_item_id AND line_items.type_id = 10019
                  INNER JOIN ' + @import_temp_table_name + ' b
                      ON  cg.contract_name = b.contract_id
                      AND line_items.code = b.invoice_line_item_id
                      AND cgd.prod_type = b.prod_type
                  LEFT JOIN formula_editor fe ON fe.formula_id = b.formula_id
                  LEFT JOIN contract_charge_type cct ON cct.contract_charge_desc = b.contract_template
                  LEFT JOIN static_data_value cctd_value ON b.contract_component_template = cctd_value.code
                  LEFT JOIN contract_charge_type_detail cctd ON cctd_value.value_id = cctd.invoice_line_item_id
                  LEFT JOIN source_deal_type sdt ON sdt.source_deal_type_name = b.deal_type
                  LEFT JOIN static_data_value tou ON b.timeofuse = tou.code
                  LEFT JOIN source_book sb1 ON sb1.source_book_name = b.group1 AND sb1.source_system_book_type_value_id = 50
                  LEFT JOIN source_book sb2 ON sb2.source_book_name = b.group2 AND sb2.source_system_book_type_value_id = 51
                  LEFT JOIN source_book sb3 ON sb3.source_book_name = b.group3 AND sb3.source_system_book_type_value_id = 52
                  LEFT JOIN source_book sb4 ON sb4.source_book_name = b.group4 AND sb4.source_system_book_type_value_id = 53
                  LEFT JOIN static_data_value sdv_gl ON sdv_gl.code + '' -> Actual'' = b.default_gl_id
                  LEFT JOIN adjustment_default_gl_codes adjc ON adjc.adjustment_type_id = sdv_gl.value_id AND adjc.estimated_actual = ''a''
                  LEFT JOIN static_data_value sdv_gl_est ON sdv_gl_est.code + '' -> Actual'' = b.default_gl_id_estimates
                  LEFT JOIN adjustment_default_gl_codes adjc_est ON adjc_est.adjustment_type_id = sdv_gl_est.value_id AND adjc_est.estimated_actual = ''e''
                  LEFT JOIN static_data_value group_by ON group_by.code = b.group_by AND group_by.type_id = 10081
                  LEFT JOIN static_data_value vol_gran ON vol_gran.code = b.volume_granularity AND vol_gran.type_id = 978                 
                  LEFT JOIN static_data_value pay_cal ON pay_cal.code = b.payment_calendar AND pay_cal.type_id = 10017
                  LEFT JOIN static_data_value pay_date ON pay_date.code = b.payment_date AND pay_date.type_id = 20000
                  LEFT JOIN static_data_value pnl_cal ON pnl_cal.code = b.pnl_calendar AND pnl_cal.type_id = 10017
                  LEFT JOIN static_data_value pnl_date ON pnl_date.code = b.pnl_date AND pnl_date.type_id = 20000                 
                  LEFT JOIN static_data_value set_cal ON set_cal.code = b.settlement_calendar AND set_cal.type_id = 10017
                  LEFT JOIN static_data_value set_date ON set_date.code = b.settlement_date AND set_date.type_id = 20000 
                  LEFT JOIN formula_editor tb ON tb.formula_id = b.time_bucket_formula_id
                  LEFT JOIN static_data_value agg_level ON agg_level.code = b.calc_aggregation AND agg_level.type_id = 19000
                  LEFT JOIN static_data_value class_name ON class_name.code = b.calc_aggregation AND class_name.type_id = 1110
                  LEFT JOIN static_data_value ipn ON ipn.code = b.increment_peaking_name AND ipn.type_id = 1130
                  LEFT JOIN static_data_value ptn ON ptn.code = b.product_type_name AND ptn.type_id = 1130
                  LEFT JOIN static_data_value utr ON utr.code = b.units_for_rate AND utr.type_id = 10079
                  LEFT JOIN static_data_value eqr ON eqr.code = b.eqr_product_name AND eqr.type_id = 10077
                  LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
                  WHERE  #import_status.temp_id IS NULL '
 	--PRINT(@sql)
 	EXEC(@sql)
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO contract_group_detail(
 						contract_id, invoice_line_item_id, default_gl_id, price, formula_id, manual, currency, Prod_type, sequence_order, 
 						inventory_item, class_name, increment_peaking_name, product_type_name, rate_description, units_for_rate, begin_date, 
 						end_date, default_gl_id_estimates, eqr_product_name, group_by, alias, hideInInvoice, int_begin_month, int_end_month, 
 						volume_granularity, deal_type, time_bucket_formula_id, calc_aggregation, payment_date, payment_calendar, pnl_date, 
 						pnl_calendar, timeofuse, include_charges, contract_template, contract_component_template, radio_automatic_manual, 
 						settlement_date, settlement_calendar, effective_date, group1, group2, group3, group4, leg, include_invoice
 				)
 	             SELECT cg.contract_id,
 						line_items.value_id,
 						adjc.default_gl_id,
 						b.price,
 						fe.formula_id,
 						b.manual,
 						b.currency,
 						b.prod_type,
 						b.sequence_order,
 						b.inventory_item,
 						class_name.value_id,
 						ipn.value_id,
 						ptn.value_id,
 						b.rate_description,
 						utr.value_id,
 						b.begin_date,
 						b.end_date,
 						adjc_est.default_gl_id,
 						eqr.value_id,
 						group_by.value_id,
 						b.alias,
 						b.hideInInvoice,
 						CASE b.int_begin_month WHEN ''January'' THEN 1
 							WHEN ''February'' THEN 2
 							WHEN ''March'' THEN 3
 							WHEN ''April'' THEN 4
 							WHEN ''May'' THEN 5
 							WHEN ''June'' THEN 6
 							WHEN ''July'' THEN 7
 							WHEN ''August'' THEN 8 
 							WHEN ''September'' THEN 9
 							WHEN ''October'' THEN 10
 							WHEN ''November'' THEN 11
 						WHEN ''December'' THEN 12
 						END,
 						CASE b.int_end_month WHEN ''January'' THEN 1
 							WHEN ''February'' THEN 2
 							WHEN ''March'' THEN 3
 							WHEN ''April'' THEN 4
 							WHEN ''May'' THEN 5
 							WHEN ''June'' THEN 6
 							WHEN ''July'' THEN 7
 							WHEN ''August'' THEN 8 
 							WHEN ''September'' THEN 9
 							WHEN ''October'' THEN 10
 							WHEN ''November'' THEN 11
 							WHEN ''December'' THEN 12
 						END,
 						vol_gran.value_id,
 						sdt.source_deal_type_id,
 						tb.formula_id,
 						agg_level.value_id,
 						pay_date.value_id,
 						pay_cal.value_id,
 						pnl_date.value_id,
 						pnl_cal.value_id,
 						tou.value_id,
 						b.include_charges,
 						cct.contract_charge_type_id,
 						cctd.id,
 						b.radio_automatic_manual,
 						set_date.value_id,
 						set_cal.value_id,
 						b.effective_date,
 						sb1.source_book_id,
 						sb2.source_book_id,
 						sb3.source_book_id,
 						sb4.source_book_id,
 						b.leg,
 						b.include_invoice
 	             '
				 
			SET @sql +=  ' FROM ' + @import_temp_table_name + ' b 
                  INNER JOIN contract_group cg ON cg.contract_name = b.contract_id
                  INNER JOIN static_data_value line_items ON line_items.code = b.invoice_line_item_id AND line_items.type_id = 10019
                  LEFT JOIN contract_group_detail cgd
                      ON  cg.contract_id = cgd.contract_id 
                      AND line_items.value_id = cgd.invoice_line_item_id
                      AND cgd.prod_type = b.prod_type
                  LEFT JOIN formula_editor fe ON fe.formula_id = b.formula_id
                  LEFT JOIN contract_charge_type cct ON cct.contract_charge_desc = b.contract_template
                  LEFT JOIN static_data_value cctd_value ON b.contract_component_template = cctd_value.code
                  LEFT JOIN contract_charge_type_detail cctd ON cctd_value.value_id = cctd.invoice_line_item_id
                  LEFT JOIN source_deal_type sdt ON sdt.source_deal_type_name = b.deal_type
                  LEFT JOIN static_data_value tou ON b.timeofuse = tou.code
                  LEFT JOIN source_book sb1 ON sb1.source_book_name = b.group1 AND sb1.source_system_book_type_value_id = 50
                  LEFT JOIN source_book sb2 ON sb2.source_book_name = b.group2 AND sb2.source_system_book_type_value_id = 51
                  LEFT JOIN source_book sb3 ON sb3.source_book_name = b.group3 AND sb3.source_system_book_type_value_id = 52
                  LEFT JOIN source_book sb4 ON sb4.source_book_name = b.group4 AND sb4.source_system_book_type_value_id = 53
                  LEFT JOIN static_data_value sdv_gl ON sdv_gl.code + '' -> Actual'' = b.default_gl_id
                  LEFT JOIN adjustment_default_gl_codes adjc ON adjc.adjustment_type_id = sdv_gl.value_id AND adjc.estimated_actual = ''a''
                  LEFT JOIN static_data_value sdv_gl_est ON sdv_gl_est.code + '' -> Actual'' = b.default_gl_id_estimates
                  LEFT JOIN adjustment_default_gl_codes adjc_est ON adjc_est.adjustment_type_id = sdv_gl_est.value_id AND adjc_est.estimated_actual = ''e''
                  LEFT JOIN static_data_value group_by ON group_by.code = b.group_by AND group_by.type_id = 10081
                  LEFT JOIN static_data_value vol_gran ON vol_gran.code = b.volume_granularity AND vol_gran.type_id = 978                 
                  LEFT JOIN static_data_value pay_cal ON pay_cal.code = b.payment_calendar AND pay_cal.type_id = 10017
                  LEFT JOIN static_data_value pay_date ON pay_date.code = b.payment_date AND pay_date.type_id = 20000
                  LEFT JOIN static_data_value pnl_cal ON pnl_cal.code = b.pnl_calendar AND pnl_cal.type_id = 10017
                  LEFT JOIN static_data_value pnl_date ON pnl_date.code = b.pnl_date AND pnl_date.type_id = 20000                 
                  LEFT JOIN static_data_value set_cal ON set_cal.code = b.settlement_calendar AND set_cal.type_id = 10017
                  LEFT JOIN static_data_value set_date ON set_date.code = b.settlement_date AND set_date.type_id = 20000 
                  LEFT JOIN formula_editor tb ON tb.formula_id = b.time_bucket_formula_id
                  LEFT JOIN static_data_value agg_level ON agg_level.code = b.calc_aggregation AND agg_level.type_id = 19000
                  LEFT JOIN static_data_value class_name ON class_name.code = b.calc_aggregation AND class_name.type_id = 1110
                  LEFT JOIN static_data_value ipn ON ipn.code = b.increment_peaking_name AND ipn.type_id = 1130
                  LEFT JOIN static_data_value ptn ON ptn.code = b.product_type_name AND ptn.type_id = 1130
                  LEFT JOIN static_data_value utr ON utr.code = b.units_for_rate AND utr.type_id = 10079
                  LEFT JOIN static_data_value eqr ON eqr.code = b.eqr_product_name AND eqr.type_id = 10077
                  LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
                  WHERE  #import_status.temp_id IS NULL AND cgd.id IS NULL'
     --PRINT(@sql) 
 	EXEC(@sql)
END
 
 -- delivery path -------
IF @table_name = 'ixp_delivery_path_template'
BEGIN
 	EXEC ('DELETE ' + @field_compare_table)
 	SET @source_table = @import_temp_table_name
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'
 	        
 	IF OBJECT_ID('tempdb..#temp_delete_delivery_path') IS NOT NULL
		DROP TABLE #temp_delete_delivery_path
		  
 	CREATE TABLE #temp_delete_delivery_path (temp_id INT)
 	
 	
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' +a.counterParty + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterParty'' 
          ) scm
	 LEFT JOIN source_counterparty b  ON b.counterparty_id = a.counterParty
 		 LEFT JOIN #import_status isa ON  a.temp_id = isa.temp_id
		 WHERE  isa.temp_id IS NULL AND b.counterparty_id IS NULL
	')	
 	-- Foreign Key Constraints handling for contractID  
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' +a.contract + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''contract'' 
          ) scm
	 LEFT JOIN contract_group b on b.source_contract_id = a.contract
 		 LEFT JOIN #import_status isa ON  a.temp_id = isa.temp_id
		 WHERE  isa.temp_id IS NULL AND b.contract_id IS NULL
	')				
		EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' +a.from_location + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''from_location'' 
          ) scm
	 LEFT JOIN source_minor_location b on b.Location_Name = a.from_location 
		 WHERE b.Location_Name is NULL
	')
 
		--Foreign Key Constraints for location_to
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' +a.to_location + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''to_location'' 
          ) scm
	LEFT JOIN source_minor_location b on b.Location_Name = a.to_location 
		WHERE b.Location_Name is NULL
	')
		
	-- Foreign Key Constraint for rateSchedule	
	--EXEC('
	--	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	--		SELECT a.temp_id,
	--		10013,
	--		''
	--		{
	--			"column_name": "'' + scm.source_column_name + ''", 
	--			"column_value": "'' +a.rateSchedule + ''"
	--		}
	--		'',
	--		a.import_file_name
	--	FROM  ' + @import_temp_table_name + ' a
	--	CROSS APPLY ( SELECT source_column_name 
 --                       FROM #source_file_column_table 
 --                       WHERE ixp_columns_name = ''rateSchedule'' 
 --         ) scm
	--	LEFT JOIN transportation_rate_category b on b.[code] = a.rateSchedule --AND b.[type_id] = 1800 
 --		LEFT JOIN #import_status isa ON  a.temp_id = isa.temp_id
	--	 WHERE  isa.temp_id IS NULL AND b.[code] is NULL
	--')
 			
 	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a ON  es.temp_id = a.temp_id  
        LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
    ')
    
    -- fails all import if any location on a file is not present in a system. 
    -- if not might give problem in group path.
    IF EXISTS (SELECT 1 FROM #temp_delete_delivery_path)
    BEGIN
    	EXEC('DELETE ' + @import_temp_table_name + ' FROM #import_status') 
    	DROP TABLE #temp_delete_delivery_path
    END
    ELSE
    BEGIN
    	-- Update Data from those which are already present in the table
 		SET @sql= CAST('' AS NVARCHAR(MAX)) + N' UPDATE dp SET
 					path_code = ISNULL(a.path_code, dp.path_code), 
 					path_name = ISNULL(a.path_name, dp.path_name), 
 					delivery_means = ISNUll(sdv_dm.value_id, dp.delivery_means), 
 					commodity = ISNULL(sco.source_commodity_id, dp.commodity), 
 					isactive = ISNULL(a.isactive, dp.isactive), 
 					meter_from = ISNULL(mf.meter_id, dp.meter_from), 
 					meter_to = ISNULL(mt.meter_id, dp.meter_to), 
 					rateSchedule = ISNULL(trc.[value_id],  dp.rateSchedule), 
 					counterParty = ISNULL(sc.source_counterparty_id,  dp.counterParty), 
 					[contract] = ISNULL(cg.contract_id, dp.[contract]), 
 					location_id = ISNULL(a.location_id, dp.location_id), 
 					from_location = ISNULL(sml.source_minor_location_id, dp.from_location), 
 					to_location = ISNULL(sml1.source_minor_location_id, dp.to_location), 
 					--groupPath = (CASE WHEN a.groupPath IS NOT NULL THEN ''y'' ELSE ''n'' END), 
 					groupPath = (CASE WHEN dp.groupPath =''y'' THEN ''y'' ELSE ''n'' END), 
 					shipping_counterparty = ISNULL(a.shipping_counterparty, dp.shipping_counterparty), 
 					receiving_counterparty = ISNULL(a.receiving_counterparty, dp.receiving_counterparty), 
 					formula_from  = ISNULL(a.formula_from, dp.formula_from), 
 					formula_to = ISNULL(a.formula_to, a.formula_to), 
 					imbalance_from = ISNULL(a.imbalance_from, dp.imbalance_from), 
 					loss_factor = ISNULL(a.loss_factor, dp.loss_factor), 
 					fuel_factor = ISNULL(a.fuel_factor, dp.fuel_factor),
 					mdq = ISNULL(a.mdq, dp.mdq),
 					priority = ISNULL(sdv_priority.value_id, dp.priority)
 				FROM ' + @import_temp_table_name +' a
 				LEFT JOIN meter_id mf on mf.recorderid = a.meter_from
 				LEFT JOIN meter_id mt on mt.recorderid = a.meter_to
 				--INNER JOIN static_data_type sdt on  sdt.[type_id] = 1800
 				LEFT JOIN transportation_rate_category trc ON  trc.[code] = a.rateSchedule
 				LEFT JOIN contract_group cg on cg.source_contract_id = a.[CONTRACT]
 				LEFT JOIN source_commodity sco ON sco.commodity_id = a.commodity
 				LEFT JOIN source_counterparty sc on sc.counterparty_id = a.counterParty
 				LEFT JOIN source_minor_location sml on sml.Location_Name = a.from_location
 				LEFT JOIN source_minor_location sml1 on sml1.Location_Name = a.to_location
 				LEFT JOIN static_data_value sdv_dm ON sdv_dm.code = a.delivery_means AND sdv_dm.type_id = 11110
 				LEFT JOIN static_data_value sdv_priority ON sdv_priority.code = a.[priority] AND sdv_priority.[type_id] = 31400
 			    LEFT JOIN  delivery_path dp ON dp.path_name = IIF( a.path_name  IS NULL,CONCAT(a.from_location,''-'', a.[Contract],''-'', a.to_location), a.path_name)
 				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 				WHERE  #import_status.temp_id IS NULL AND dp.path_id IS NOT NULL'	
 		EXEC(@sql)
 	
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE ccrs
 					SET contract_id = ISNULL(dp.[contract], ccrs.contract_id),
						rate_schedule_id = ISNULL(dp.rateSchedule, ccrs.rate_schedule_id),
						[rank] = ISNULL(sdv.value_id, ccrs.[rank]),
						counterparty_id = ISNULL(dp.counterParty, ccrs.counterparty_id)
 					FROM ' + @import_temp_table_name +' a
 					INNER JOIN delivery_path dp ON dp.path_code = a.path_code
 					INNER JOIN counterparty_contract_rate_schedule ccrs ON dp.path_id = ccrs.path_id
 					LEFT JOIN static_data_value sdv ON sdv.code = a.[rank] AND sdv.[type_id] = 32100
 					LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 					WHERE  #import_status.temp_id IS NULL'
 		EXEC(@sql)
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE ls 
					SET
						ls.loss_factor = a.loss_factor,
						is_receipt = ls.is_receipt,
						effective_date = ls.effective_date
					FROM ' + @import_temp_table_name + ' a 
					INNER JOIN delivery_path dp ON dp.path_code = a.path_code
					INNER JOIN path_loss_shrinkage ls ON dp.path_id = ls.path_id
					LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
					WHERE #import_status.temp_id IS NULL'
		EXEC(@sql)

		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE dpm 
					SET mdq = ISNULL(a.mdq, 0),
						contract_id = cg.contract_id,
						rec_del = dpm.rec_del,
						effective_date = dpm.effective_date
					FROM ' + @import_temp_table_name + ' a 
					INNER JOIN delivery_path dp ON dp.path_code = a.path_code
					INNER JOIN delivery_path_mdq dpm ON dpm.path_id = dp.path_id
					LEFT JOIN contract_group cg ON cg.source_contract_id = a.[contract]
					LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
					WHERE #import_status.temp_id IS NULL'
 		EXEC(@sql)

 		--SET @source_table = @import_temp_table_name
 		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO [dbo].[delivery_path] (
 							path_code,
 							path_name, 
 							delivery_means, 
 							commodity, 
 							isactive, 
 							meter_from, 
 							meter_to, 
 							rateSchedule, 
 							counterParty, 
 							[CONTRACT], 
 							location_id, 
 							from_location, 
 							to_location, 
 							groupPath, 
 							shipping_counterparty, 
 							receiving_counterparty, 
 							formula_from, 
 							formula_to, 
 							imbalance_from, 
 							imbalance_to, 
 							loss_factor, 
 							fuel_factor,
 							mdq,
 							priority
 						)
 						SELECT DISTINCT
 							CASE WHEN a.path_name IS NULL
							THEN CONCAT(a.from_location,''-'',a.[CONTRACT],''-'',a.to_location)
							ELSE a.path_name
							END AS path_code,
 							CASE WHEN a.path_name is null
							THEN CONCAT(a.from_location,''-'',a.[CONTRACT],''-'',a.to_location)
							ELSE a.path_name
							END AS path_name,
 							sdv_dm.value_id,
 							sco.source_commodity_id,
 							COALESCE(a.isactive, ''y''),
 							mf.meter_id,
 							mt.meter_id,
 							trc.[value_id],
 							sc.source_counterparty_id,
 							cg.contract_id,
 							a.location_id,
 							sml.source_minor_location_id,
 							sml1.source_minor_location_id,
 							--CASE WHEN a.groupPath IS NOT NULL THEN ''y'' ELSE ''n'' END,
 							''n'',
 							sc_shipping.source_counterparty_id,
 							sc_receiving.source_counterparty_id,
 							fe.formula_id,
 							fe_to.formula_id,
 							COALESCE(a.imbalance_from, ''n''),
 							COALESCE(a.imbalance_to, ''n''),
 							a.loss_factor,
 							a.fuel_factor,
 							a.mdq,
 							sdv_priority.value_id
 						FROM ' + @import_temp_table_name + ' a 
 						LEFT JOIN contract_group cg on cg.source_contract_id = a.[CONTRACT] 
 						LEFT JOIN source_counterparty sc on sc.counterparty_id = a.counterParty
 						LEFT JOIN source_minor_location sml on sml.Location_Name = a.from_location
 						LEFT JOIN source_minor_location sml1 on sml1.Location_Name = a.to_location
 						LEFT JOIN meter_id mi on mi.recorderid = a.meter_from
 						LEFT JOIN meter_id mi1 on mi1.recorderid = a.meter_to
 						LEFT JOIN  delivery_path dp ON dp.path_name = IIF( a.path_name  IS NULL,CONCAT(a.from_location,''-'', a.[Contract],''-'', a.to_location), a.path_name)
 						LEFT JOIN transportation_rate_category trc ON  trc.[code] = a.rateSchedule
 						LEFT JOIN meter_id mf on mf.recorderid = a.meter_from
 						LEFT JOIN meter_id mt on mt.recorderid = a.meter_to					
 						LEFT JOIN source_counterparty sc_shipping on sc_shipping.counterparty_id = a.shipping_counterparty
 						LEFT JOIN source_counterparty sc_receiving on sc_receiving.counterparty_id = a.receiving_counterparty
 						LEFT JOIN source_commodity sco ON sco.commodity_id = a.commodity
 						LEFT JOIN formula_editor fe ON fe.formula_name = a.formula_from
 						LEFT JOIN formula_editor fe_to ON fe_to.formula_name = a.formula_to
 						LEFT JOIN static_data_value sdv_dm ON sdv_dm.code = a.delivery_means AND sdv_dm.type_id = 11110
 						LEFT JOIN static_data_value sdv_priority ON sdv_priority.code = a.[priority] AND sdv_priority.[type_id] = 31400
 						LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 						WHERE #import_status.temp_id IS NULL AND dp.path_id IS NULL
 					'
 		--PRINT(@sql)
 		EXEC(@sql)
 
 		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO counterparty_contract_rate_schedule (counterparty_id, contract_id, rate_schedule_id, path_id, [RANK])
 					SELECT dp.counterParty
						, dp.[contract]
						, dp.rateSchedule
						, dp.path_id 
						, sdv.value_ID 
					FROM ' + @import_temp_table_name + ' a 
						LEFT JOIN  delivery_path dp ON dp.path_code = IIF( a.path_name  IS NULL,CONCAT(a.from_location,''-'', a.[Contract],''-'', a.to_location), a.path_name)
						LEFT JOIN static_data_value sdv ON sdv.code = a.[rank] AND sdv.[type_id] = 32100
						LEFT JOIN counterparty_contract_rate_schedule ccrs1 ON ccrs1.path_id = dp.path_id AND ccrs1.counterparty_id = dp.counterParty AND ccrs1.contract_id =dp.[CONTRACT]
						LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 					WHERE  #import_status.temp_id IS NULL AND ccrs1.counterparty_contract_rate_schedule_id IS NULL
						'
		--PRINT(@sql)	
 		EXEC(@sql)
	
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO path_loss_shrinkage(path_id, loss_factor, is_receipt, effective_date)
					SELECT dp.path_id, a.loss_factor, ls.is_receipt, ls.effective_date
					FROM ' + @import_temp_table_name + ' a 
					INNER JOIN delivery_path dp ON dp.path_code = a.path_name
					LEFT JOIN path_loss_shrinkage ls ON dp.path_id = ls.path_id
					LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
					WHERE #import_status.temp_id IS NULL AND ls.path_loss_shrinkage_id IS NULL'
		EXEC(@sql) 
   -- print (@sql)

		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO delivery_path_mdq (path_id, effective_date, mdq, contract_id, rec_del)
					SELECT dp.path_id, dpm.effective_date, ISNULL(a.mdq, 0), cg.contract_id, dpm.rec_del
					FROM ' + @import_temp_table_name + ' a 
					INNER JOIN delivery_path dp ON dp.path_code = a.path_name
					LEFT JOIN delivery_path_mdq dpm ON dpm.path_id = dp.path_id
					LEFT JOIN contract_group cg ON cg.source_contract_id = a.[contract]
					LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
					WHERE #import_status.temp_id IS NULL AND dpm.delivery_path_mdq_id IS NULL'
		EXEC(@sql)
		 
		IF OBJECT_ID('tempdb..#temp_location') IS NOT NULL
		DROP TABLE #temp_location 

		CREATE TABLE #temp_location (
			from_location NVARCHAR(200) COLLATE DATABASE_DEFAULT, 
			to_location NVARCHAR(200) COLLATE DATABASE_DEFAULT,
			group_path NVARCHAR(200) COLLATE DATABASE_DEFAULT,
			mdq INT
		)

		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #temp_location (from_location, to_location, group_path, mdq)
				SELECT DISTINCT MAX(abc.from_location),MAX(cba.to_location), MAX(a.group_path_code), MIN(mdq)--, *
				FROM ' + @import_temp_table_name + ' a 
				CROSS APPLY (SELECT TOP 1 MAX(from_location) from_location, group_path_code
				FROM ' + @import_temp_table_name + ' b 
				WHERE b.group_path_code = a.group_path_code
				GROUP BY group_path_code, path_sequence ORDER BY path_sequence ASC
				) abc 
				CROSS APPLY (SELECT TOP 1 MAX(to_location) to_location, group_path_code
				FROM ' + @import_temp_table_name + ' c 
				WHERE c.group_path_code = a.group_path_code
				GROUP BY group_path_code, path_sequence ORDER BY path_sequence DESC
				) cba 

				UPDATE dp
					SET path_code = a.group_path_code,
					path_name = a.group_path_code,
					mdq = a.mdq,
					isactive = COALESCE(a.isactive, ''y''),
					from_location = fr_loc.source_minor_location_id,
					to_location = to_loc.source_minor_location_id,
					groupPath = ''y''
				FROM ' + @import_temp_table_name + ' a 
				INNER JOIN #temp_location tl ON tl.group_path = a.group_path_code
				INNER JOIN delivery_path dp on dp.path_code = a.group_path_code
				LEFT JOIN source_minor_location fr_loc ON fr_loc.location_Name = tl.from_location
				LEFT JOIN source_minor_location to_loc ON to_loc.location_Name = tl.to_location
				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 				WHERE  #import_status.temp_id IS NULL

				INSERT INTO [dbo].[delivery_path] (
 					path_code,
 					path_name,
					mdq,
					isactive,
					from_location,
					to_location,
					groupPath 
					)
				SELECT 
				DISTINCT
 					(a.group_path_code) path_code,
 					(a.group_path_code) path_name,
					tl.mdq,
					COALESCE(a.isactive, ''y''),
					fr_loc.source_minor_location_id,
					to_loc.source_minor_location_id,
					''y''
				FROM ' + @import_temp_table_name + ' a 
				INNER JOIN #temp_location tl ON tl.group_path = a.group_path_code
				LEFT JOIN delivery_path dp on dp.path_code = a.group_path_code
				LEFT JOIN source_minor_location fr_loc ON fr_loc.location_Name = tl.from_location
				LEFT JOIN source_minor_location to_loc ON to_loc.location_Name = tl.to_location
				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
				WHERE #import_status.temp_id IS NULL 
				AND dp.path_id IS NULL'
		EXEC(@sql)	
				
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' DELETE dpd FROM 
					' + @import_temp_table_name + ' a
					INNER JOIN delivery_path dp on dp.path_code = a.group_path_code
					INNER JOIN delivery_path_detail dpd ON dpd.Path_id = dp.path_id 

					DECLARE @group_path INT, @path_id INT
					DECLARE @cur_group_path CURSOR
					SET @cur_group_path = CURSOR FOR
						SELECT MAX(dp2.path_id), MAX(dp1.path_id)--, a.path_sequence 
						FROM ' + @import_temp_table_name + ' a
						INNER JOIN delivery_path dp1 on dp1.path_code = a.path_code
						INNER JOIN delivery_path dp2 on dp2.path_code = a.group_path_code
						GROUP BY a.group_path_code, a.path_sequence
						ORDER BY a.path_sequence ASC
					OPEN @cur_group_path
					FETCH NEXT
					FROM @cur_group_path INTO @group_path , @path_id 
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT INTO delivery_path_detail (path_id, path_name)
						SELECT @group_path, @path_id 
						FETCH NEXT
						FROM @cur_group_path INTO @group_path , @path_id 
					END
					CLOSE @cur_group_path
					DEALLOCATE @cur_group_path
					'			 		
		EXEC(@sql)
 		DROP TABLE #temp_delete_delivery_path
    END
END 

IF @table_name = 'ixp_source_book_template'
BEGIN
	
 	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_book'',''source_system_book_id'',''source_system_book_id'')')
 	--EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_book'',''source_system_book_type_value_id'',''source_system_book_type_value_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_book'',''source_book_name'',''source_book_name'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_book'',''source_book_desc'',''source_book_desc'')')
 	SET @source_table = @import_temp_table_name 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	
	-- Data Repetition
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
	SELECT a.temp_id, 
		10007, 
		dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Book ID, Book Level''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.source_system_book_id ' + ' + '', '' + ' + 'a.source_system_book_type_value_id ), 
		a.import_file_name 
	FROM   ' + @import_temp_table_name + ' a
	INNER JOIN (
			SELECT source_system_book_id, source_system_book_type_value_id,
					COUNT(*) notimes
			FROM   ' + @import_temp_table_name+'
			GROUP BY
					source_system_book_id, source_system_book_type_value_id
			HAVING COUNT(*) > 1
		) b
		ON  a.source_system_book_id = b.source_system_book_id
			AND a.source_system_book_type_value_id = b.source_system_book_type_value_id ')
	
	-- Mandatory Field 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
	SELECT a.temp_id, 
		10001, 
		CASE  
			WHEN a.source_book_name IS NULL THEN 
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Name'') 
			WHEN a.source_system_book_id IS NULL THEN 
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Book ID'') 
			WHEN a.source_system_book_type_value_id IS NULL THEN 
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Book Level'')   
		END, 
	a.import_file_name 
	FROM ' + @import_temp_table_name + ' a
 		WHERE a.source_book_name IS NULL
			OR a.source_system_book_id IS NULL
 			OR a.source_system_book_type_value_id IS NULL')
	
	-- Static Data Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10002,
			  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Book Level''), ''<column_value>'', a.source_system_book_type_value_id),
			  a.import_file_name
		  FROM   ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status 
			  ON a.temp_id = #error_status.temp_id 						  
		  LEFT JOIN static_data_value sdv
			  ON sdv.code = a.source_system_book_type_value_id
			  AND sdv.type_id = 50
 		  WHERE #error_status.temp_id IS NULL
			  AND sdv.value_id IS NULL')

	-- Delete invalid data from temp table
	EXEC('DELETE ' + @import_temp_table_name + '
 	    FROM #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 
 	
	-- Update  actual table from temp table
 	SET @sql = 'UPDATE source_book
 	            SET    source_system_id =ISNULL(d.source_system_id, source_book.source_system_id),
 	                   source_system_book_type_value_id = sdv.value_id,
 	                   source_book_name = ISNULL(b.source_book_name, source_book.source_book_name),
 	                   source_book_desc = b.source_book_desc,
 	                   source_parent_book_id = ISNULL(b.source_parent_book_id, source_book.source_parent_book_id),
 	                   source_parent_type = ISNULL(b.source_parent_type, source_book.source_parent_type)
 	            FROM   source_book
                 INNER JOIN ' + @import_temp_table_name + ' b
                     ON  source_book.source_system_book_id = b.source_system_book_id
                     AND source_book.source_system_id = b.source_system_id
                 LEFT JOIN static_data_value sdv ON  b.source_system_book_type_value_id = sdv.code AND sdv.type_id = 50
                 LEFT JOIN source_system_description d ON  b.source_system_id = d.source_system_id
                 '
 	EXEC(@sql)
 	--PRINT (@sql)
 	--insert into actual table from temp table
 	SET @sql = ' INSERT INTO source_book (source_system_id, source_system_book_id, source_system_book_type_value_id, source_book_name, source_book_desc, source_parent_book_id, source_parent_type)
 	             SELECT d.source_system_id,
 	                    a.source_system_book_id,
 	                    sdv.value_id,
 	                    a.source_book_name,
 	                    a.source_book_desc,
 	                    a.source_parent_book_id,
 	                    a.source_parent_type
 	             FROM   ' + @import_temp_table_name + ' a
                  LEFT JOIN static_data_value sdv ON  a.source_system_book_type_value_id = sdv.code AND sdv.type_id = 50
                  INNER JOIN source_system_description d ON  a.source_system_id = d.source_system_id
                  LEFT JOIN source_book sb
                      ON  sb.source_system_book_id = a.source_system_book_id
                      AND sb.source_system_id = a.source_system_id
				  WHERE sb.source_system_book_id IS NULL '
 	EXEC(@sql)
 	--PRINT @sql
END	

IF @table_name = 'ixp_location_group_template'
BEGIN
	-- Data Repetition
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
	SELECT a.temp_id, 
		10007, 
		dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Group Name''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.location_name ), 
		a.import_file_name 
	FROM   ' + @import_temp_table_name + ' a
	INNER JOIN (
			SELECT location_name,
					COUNT(*) notimes
			FROM   ' + @import_temp_table_name+'
			GROUP BY
					location_name
			HAVING COUNT(*) > 1
		) b
		ON  a.location_name = b.location_name')
	
	-- Mandatory Field 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
	SELECT a.temp_id, 
		10001, 
		dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Group Name''), 
		a.import_file_name 
	FROM ' + @import_temp_table_name + ' a
 		WHERE a.location_name IS NULL')
	
	/** Collect data for look up table validation.
		 referred_table: lookup table to match value against
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 

	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''location_type'', ''b.code = a.location_type AND b.type_id = 11130'', ''w''),
		(''static_data_value'', ''region'', ''b.code = a.region AND b.type_id = 11150'', ''w''),
		(''source_counterparty'', ''counterparty'', ''b.counterparty_id = a.counterparty AND b.is_active = ''''y'''''', ''w'')
	')

	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'	

	-- Delete invalid data from temp table
	EXEC('DELETE ' + @import_temp_table_name + '
 	    FROM #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 
		
	-- Update
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE sml
				SET location_name = a.location_name
					, location_description = a.location_description
					, location_type = sdv_loctyp.value_id
					, region = sdv_region.value_id	
					, owner = a.owner
					, operator = a.operator
					, counterparty = sc.source_counterparty_id
 				FROM ' + @import_temp_table_name + ' a
				INNER JOIN source_major_location sml
					ON  sml.location_name = a.location_name
				LEFT JOIN static_data_value sdv_loctyp ON a.location_type = sdv_loctyp.code AND sdv_loctyp.type_id = 11130 
				LEFT JOIN static_data_value sdv_region ON a.region = sdv_region.code AND sdv_region.type_id = 11150 
				LEFT JOIN source_counterparty sc ON a.counterparty = sc.counterparty_id AND sc.is_active = ''y''	
				'
 	EXEC(@sql)

 	-- Insert
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO	source_major_location (source_system_id, location_name, location_description, location_type, region, owner, operator, counterparty)
				SELECT a.source_system_id
					, a.location_name
					, a.location_description
					, sdv_loctyp.value_id
					, sdv_region.value_id	
					, a.owner
					, a.operator
					, sc.source_counterparty_id
 				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN source_major_location sml
					ON  sml.location_name = a.location_name
				LEFT JOIN static_data_value sdv_loctyp ON a.location_type = sdv_loctyp.code AND sdv_loctyp.type_id = 11130 
				LEFT JOIN static_data_value sdv_region ON a.region = sdv_region.code AND sdv_region.type_id = 11150 
				LEFT JOIN source_counterparty sc ON a.counterparty = sc.counterparty_id AND sc.is_active = ''y''
				WHERE sml.location_name IS NULL
				'
 	EXEC(@sql)
END

IF @table_name = 'ixp_source_commodity_template'
BEGIN
	--Step 3
 	EXEC('DELETE ' + @field_compare_table)
 
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_commodity'', ''commodity_id'', ''commodity_id'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_commodity'', ''commodity_name'', ''commodity_name'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_commodity'', ''commodity_desc'', ''commodity_desc'')')
 	 	
 	SET @source_table = @import_temp_table_name
 	 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'

	EXEC(' 
		DELETE a
		FROM #error_status es
		INNER JOIN ' + @import_temp_table_name + ' a
			ON es.temp_id = a.temp_id 
		LEFT JOIN message_log_template mlt 
			ON mlt.message_number = es.error_number 
		WHERE ISNULL(mlt.message_status, es.message_status) = ''Error'' 
	')
 
	--Main import logic starts here
 	SET @sql = '
		UPDATE source_commodity
 	    SET source_system_id = d.source_system_id
 			, commodity_id = b.commodity_id
 			, commodity_name = b.commodity_name
 			, commodity_desc = b.commodity_desc
 	    FROM source_commodity
        INNER JOIN ' + @import_temp_table_name + ' b
            ON source_commodity.commodity_id = b.commodity_id
                AND source_commodity.source_system_id = b.source_system_id
        INNER JOIN source_system_description d 
			ON  b.source_system_id = d.source_system_id
        LEFT JOIN #error_status es 
			ON  b.temp_id = es.temp_id
 	    WHERE  es.temp_id IS NULL
	'
 	EXEC(@sql)

 	SET @sql = '
		INSERT INTO source_commodity (source_system_id, commodity_id, commodity_name, commodity_desc)
 	    SELECT d.source_system_id
 			, a.commodity_id
 			, a.commodity_name
 			, a.commodity_desc
 	    FROM ' + @import_temp_table_name + ' a
        INNER JOIN source_system_description d
			ON a.source_system_id = d.source_system_id
        LEFT JOIN source_commodity sc
            ON sc.commodity_id = a.commodity_id
                AND sc.source_system_id = a.source_system_id
        LEFT JOIN #error_status es 
			ON a.temp_id = es.temp_id
 	    WHERE es.temp_id IS NULL 
			AND sc.commodity_id IS NULL
	'
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_source_currency_template'
BEGIN
 	EXEC('DELETE '+@field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_currency'',''currency_id'',''currency_id'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_currency'',''currency_name'',''currency_name'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_currency'',''currency_desc'',''currency_desc'')')
 	--Pre validataing Data Type
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  source_system_id IS NULL
 	             AND currency_id IS NULL
 	             AND currency_name IS NULL
 	             AND currency_desc IS NULL')
 		
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for currency_id :'' + ISNULL(a.currency_id, ''NULL'')
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
                   SELECT currency_id, COUNT(*) notimes
                   FROM   '+ @import_temp_table_name+'
                   GROUP BY currency_id
                   HAVING COUNT(*) > 1
               ) b
           ON  a.currency_id = b.currency_id')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for currency_id :'' + ISNULL(a.currency_id, ''NULL'')
 	             + '', source_system_id:'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '', currency_id :'' + ISNULL(a.currency_id, ''NULL'') + ''.( Data FORMAT FOR source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '' OR currency_id '' + ISNULL(a.currency_id, ''NULL'') + '' IS invalid)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE  ISNUMERIC(a.source_system_id) = 0 OR  a.currency_id IS NULL')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for currency_id :'' + ISNULL(a.currency_id, ''NULL'')
 	             + '', source_system_id:'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '', currency_id :'' + ISNULL(a.currency_id, ''NULL'') + ''. (FOREIGN KEY source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '' NOT found )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
           LEFT JOIN source_system_description b ON  b.source_system_id = a.source_system_id
 	      WHERE  #import_status.temp_id IS NULL AND b.source_system_id IS NULL')
 	
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
 
 	SET @sql = 'UPDATE source_currency
 	            SET source_system_id = ISNULL(d.source_system_id, source_currency.source_system_id),
 					currency_id = ISNULL(b.currency_id, source_currency.currency_id),
 					currency_name = ISNULL(b.currency_name, source_currency.currency_name),
 					currency_desc = ISNULL(b.currency_desc, source_currency.currency_desc),
 					currency_id_to = ISNULL(b.currency_id_to, source_currency.currency_id_to),
 					factor = ISNULL(b.factor, source_currency.factor)
 	            FROM   source_currency
                 INNER JOIN ' + @import_temp_table_name + ' b
                     ON  source_currency.currency_id = b.currency_id
                     AND source_currency.source_system_id = b.source_system_id
                 INNER JOIN source_system_description d ON  b.source_system_id = d.source_system_id
                 LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL'
 	EXEC(@sql)
 	EXEC spa_print @sql
 	SET @sql = ' INSERT INTO source_currency (source_system_id, currency_id, currency_name, currency_desc, currency_id_to, factor)
 	             SELECT d.source_system_id,
 						a.currency_id,
 						a.currency_name,
 						a.currency_desc,
 						a.currency_id_to,
 						a.factor
 	             FROM ' + @import_temp_table_name + ' a
                  INNER JOIN source_system_description d
                      ON  a.source_system_id = d.source_system_id
                  LEFT JOIN source_currency sc
                      ON  sc.currency_id = a.currency_id
                      AND sc.source_system_id = a.source_system_id
                  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 	             WHERE  #import_status.temp_id IS NULL AND sc.currency_id IS NULL'
 	EXEC(@sql)
 	EXEC spa_print @sql
END	
 
IF @table_name = 'ixp_source_deal_type_template'
BEGIN
 	EXEC('DELETE '+@field_compare_table)
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_type'',''deal_type_id'',''deal_type_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_type'',''source_deal_type_name'',''source_deal_type_name'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_type'',''source_deal_desc'',''source_deal_desc'')')
 
 	--Pre validataing Data Type
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  source_system_id IS NULL
 	             AND deal_type_id IS NULL
 	             AND source_deal_type_name IS NULL
 	             AND source_deal_desc IS NULL' )
 	             
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @import_temp_table_name)
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for deal_type_id :'' + ISNULL(a.deal_type_id, ''NULL'')
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
                   SELECT deal_type_id, COUNT(*) notimes
                   FROM   '+ @import_temp_table_name+'
                   GROUP BY deal_type_id
                   HAVING COUNT(*) > 1
              ) b
           ON  a.deal_type_id = b.deal_type_id')
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_type_name :'' + ISNULL(a.source_deal_type_name, ''NULL'') 
 	             + '', source_system_id :'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 	             + '', deal_type_id :'' + ISNULL(a.deal_type_id, ''NULL'') + '', source_deal_type_name:'' + ISNULL(a.source_deal_type_name, ''NULL'')
 	             + ''.( Data FORMAT FOR source_system_id OR deal_type_id OR source_deal_type_name IS invalid )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE  ISNUMERIC(CAST(a.source_system_id AS NVARCHAR(10))) = 0 OR  a.deal_type_id IS NULL OR  a.source_deal_type_name IS NULL')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_type_name :'' + ISNULL(a.source_deal_type_name, ''NULL'')
 	             + '', DESCRIPTION:'' + ISNULL(a.source_deal_desc, ''NULL'') + ''. Data FORMAT sub_type: '' + a.sub_type + '' IS invalid'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE  (a.sub_type NOT IN (''y'', ''n'')) AND a.sub_type IS NOT NULL')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_type_name :'' + ISNULL(a.source_deal_type_name, ''NULL'') 
 	             + '', source_system_id :'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 	             + '', deal_type_id :'' + ISNULL(a.deal_type_id, ''NULL'') + ''.(FOREIGN KEY source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '' IS NOT found)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
           LEFT JOIN source_system_description b ON  b.source_system_id = CAST(a.source_system_id AS NVARCHAR(10))
 	      WHERE  #import_status.temp_id IS NULL
 	             AND b.source_system_id IS NULL')
 	
 	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN '+@import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
 
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE source_deal_type
 	            SET source_system_id = ISNULL(c.source_system_id, source_deal_type.source_system_id),
 					deal_type_id = ISNULL(b.deal_type_id, source_deal_type.deal_type_id),
 					source_deal_type_name = ISNULL(b.source_deal_type_name, source_deal_type.source_deal_type_name),
 					source_deal_desc = ISNULL(b.source_deal_desc, source_deal_type.source_deal_desc),
 					sub_type = ISNULL(b.sub_type, source_deal_type.sub_type),
 					expiration_applies = ISNULL(b.expiration_applies, source_deal_type.expiration_applies),
 					disable_gui_groups = ISNULL(b.disable_gui_groups, source_deal_type.disable_gui_groups),
 					break_individual_deal = ISNULL(b.break_individual_deal, source_deal_type.break_individual_deal),
 					seperate_rec_value_used = ISNULL(b.seperate_rec_value_used, source_deal_type.seperate_rec_value_used)
 	            FROM   source_deal_type
                 INNER JOIN '+@import_temp_table_name+' b
                     ON  source_deal_type.deal_type_id = b.deal_type_id
                     AND source_deal_type.source_system_id = b.source_system_id
                 INNER JOIN source_system_description c ON  b.source_system_id = c.source_system_id
                 LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL'
 	EXEC(@sql)
 	exec spa_print @sql
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_deal_type (source_system_id, deal_type_id, source_deal_type_name, source_deal_desc, sub_type, expiration_applies, disable_gui_groups, break_individual_deal, seperate_rec_value_used)
 	             SELECT b.source_system_id,
 						a.deal_type_id,
 						a.source_deal_type_name,
 						a.source_deal_desc,
 						a.sub_type,
 						a.expiration_applies,
 						a.disable_gui_groups,
 						a.break_individual_deal,
 						a.seperate_rec_value_used
 	             FROM   '+@import_temp_table_name+' a
                  INNER JOIN source_system_description b ON  a.source_system_id = b.source_system_id
                  LEFT JOIN source_deal_type h
                      ON  h.deal_type_id = a.deal_type_id
                      AND h.source_system_id = a.source_system_id
                  LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 	             WHERE  #import_status.temp_id IS NULL
 	             AND h.source_deal_type_id IS NULL'
 	exec spa_print @sql
 	EXEC(@sql)  	               	
END 

IF @table_name = 'ixp_calc_invoice_volume_variance'
BEGIN
	--BEGIN TRANSACTION [Tran1]
	DECLARE @invoice_seed INT 
	DECLARE @total_value numeric(38,20)

	SELECT @invoice_seed  = last_invoice_number FROM invoice_seed

	IF OBJECT_ID ('tempdb..#cash_recieved_data_check') IS NOT NULL
		DROP TABLE #cash_recieved_data_check

	IF OBJECT_ID('tempdb..#inserted_calc_id') IS NOT NULL
		DROP TABLE #inserted_calc_id
	
	IF OBJECT_ID('tempdb..##update_list') IS NOT NULL
		DROP TABLE ##update_list
    
    IF OBJECT_ID('tempdb..#error_list') IS NOT NULL
		DROP TABLE #error_list

	IF OBJECT_ID('tempdb..#check_mandatory_fields') IS NOT NULL
		DROP TABLE #check_mandatory_fields
		
	IF OBJECT_ID('tempdb..#charge_type') IS NOT NULL
		DROP TABLE #charge_type

	CREATE TABLE #inserted_calc_id (	
		calc_id INT,
		counterparty_id INT,
		contract_id INT,
		prod_date DATETIME,
		as_of_date DATETIME,
		Prod_date_to DATETIME,
		settlement_date DATETIME,
		invoice_number INT
	)

	CREATE TABLE ##update_list (	
		calc_id INT,
		counterparty_id INT,
		contract_id INT,
		prod_date DATETIME,
		as_of_date DATETIME,
		Prod_date_to DATETIME,
		settlement_date DATETIME,
		invoice_number NVARCHAR(100) COLLATE DATABASE_DEFAULT
	)

	CREATE TABLE #error_list (
		as_of_date NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		contract_id NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		counterparty_id NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		buy_sell NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		prod_date NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		prod_date_to NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		[value] NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		volume NVARCHAR(600) COLLATE DATABASE_DEFAULT,
		temp_id INT,
		error_type NVARCHAR(600) COLLATE DATABASE_DEFAULT
	)
	
	DECLARE @is_update NCHAR(1) = 0

	SET @source_table = @import_temp_table_name
	
	EXEC('
		DELETE 
	    FROM '+@import_temp_table_name+'
	    WHERE contract_id IS NULL
	        AND counterparty_id IS NULL
	        AND Prod_date IS NULL
	        AND Prod_date_to IS NULL
	')
	
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, ''' + @table_name + '''
		FROM ' + @import_temp_table_name
	)
	
	CREATE TABLE #check_mandatory_fields (
		field_count INT,
		contract_id NVARCHAR(25) COLLATE DATABASE_DEFAULT,
		counterparty_id NVARCHAR(25) COLLATE DATABASE_DEFAULT,
		[name] NVARCHAR(25) COLLATE DATABASE_DEFAULT
	)	
	
	EXEC('
		INSERT INTO #check_mandatory_fields
		SELECT COUNT(ISNULL(as_of_date, ''NULL'')),
			  contract_id,
			  counterparty_id,
			  ''as_of_date'' 
		FROM ' + @import_temp_table_name + '
		WHERE ISNULL(as_of_date,''NULL'') = ''NULL''
		GROUP BY contract_id, counterparty_id
		UNION ALL 

		SELECT COUNT(ISNULL(buy_sell, ''NULL'')),
			   contract_id,
			   counterparty_id,
			   ''buy_sell''
		FROM ' + @import_temp_table_name + '
		WHERE ISNULL(buy_sell, ''NULL'') = ''NULL''
		GROUP BY contract_id, counterparty_id
		UNION ALL

		SELECT COUNT(ISNULL(prod_date, ''NULL'')),
			   contract_id,
			   counterparty_id,
			   ''prod_date''
		FROM  ' + @import_temp_table_name + '
		WHERE ISNULL(prod_date, ''NULL'') = ''NULL''
		GROUP BY contract_id, counterparty_id
		UNION ALL

		SELECT COUNT(ISNULL(prod_date_to, ''NULL'')),
			   contract_id,
			   counterparty_id,
			   ''prod_date_to''
		FROM ' + @import_temp_table_name + '
		WHERE ISNULL(prod_date_to, ''NULL'') = ''NULL''
		GROUP BY contract_id, counterparty_id
		UNION ALL
		
		SELECT COUNT(ISNULL(value, ''NULL'')),
			   contract_id,
			   counterparty_id,
			   ''value''
		FROM  ' + @import_temp_table_name + '
		WHERE ISNULL(value, ''NULL'') = ''NULL''
		GROUP BY contract_id, counterparty_id
	')

	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT a.temp_id,
	           ''' + @process_id + ''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''Data Error FOR counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract_id ''+ ISNULL(a.contract_id, ''NULL'') + '' (Mandatory field '' + cmf.name + '' is not available.)'',
	           ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		INNER JOIN #check_mandatory_fields cmf
			ON cmf.contract_id = a.contract_id
				AND cmf.counterparty_id = a.counterparty_id
		WHERE cmf.field_count > 0
	')
			
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Data Error FOR counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') + '' (Mandatory Values not available.)'',
			   ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		LEFT JOIN source_counterparty ed
			ON a.counterparty_id = ed.counterparty_id
		WHERE ed.source_counterparty_id IS NULL
	')	
				
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT ed.temp_id,
	           ''' + @process_id+''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''End Date is less than Start Date for counterparty:'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract ID :'' + ISNULL(a.contract_id, ''NULL'') + ''.'',
	           ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
        INNER JOIN ' + @import_temp_table_name + ' ed
			ON a.contract_id = ed.contract_id
				AND a.counterparty_id = ed.counterparty_id
				AND a.temp_id = ed.temp_id
		WHERE dbo.FNAClientToSQLDate(a.prod_date_to) < dbo.FNAClientToSQLDate(a.prod_date)	
	')	
		
	-- Value and volume should be numeric
	IF OBJECT_ID('tempdb..#none_numeric') IS NOT NULL
		DROP TABLE #none_numeric

	CREATE TABLE #none_numeric (
		counterparty_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		contract_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		temp_id INT
	) 

	EXEC ('
		INSERT INTO #none_numeric (counterparty_id, contract_id, temp_id)
		SELECT counterparty_id,
			   contract_id,
			   temp_id
		FROM ' + @import_temp_table_name + ' a
		WHERE isnumeric(ISNULL(a.value, 0)) = 0
	')

	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT a.temp_id,
	           ''' + @process_id + ''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''One or more numeric columns contain non numeric values for counterparty:'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract ID :'' + ISNULL(a.contract_id, ''NULL'')+ ''.'',
	           ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
        INNER JOIN #none_numeric ed
			ON a.contract_id = ed.contract_id
				AND a.counterparty_id = ed.counterparty_id
	')
	
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT ed.temp_id,
	           '''+ @process_id+''',
	           ''Error'',
	           ''Import Data'',
	           '''+ @table_name+''',
	           ''Data Error'',
	           ''One or more numeric columns contain non numeric values for counterparty:'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract ID :'' + ISNULL(a.contract_id, ''NULL'')+ ''.'',
			   ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		INNER JOIN ' + @import_temp_table_name + ' ed
			ON a.contract_id = ed.contract_id
				AND a.counterparty_id = ed.counterparty_id
				AND a.as_of_date = ed.as_of_date
				AND a.settlement_date = ed.settlement_date
				AND a.temp_id = ed.temp_id
		WHERE ISNUMERIC(ISNULL(a.volume, 0)) = 0
	')		
	
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT ed.temp_id,
			   ''' + @process_id + ''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''Import period is less than Contract Start Date for counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract ID :'' + ISNULL(a.contract_id, ''NULL'')+ ''.'',
	           ''Please Check your Data'', a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		INNER JOIN ' + @import_temp_table_name + ' ed
			ON a.counterparty_id = ed.counterparty_id
				AND a.contract_id = ed.contract_id
       	INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN counterparty_contract_address cca
			ON cca.contract_id = cg.contract_id
				AND cca.counterparty_id = sc.source_counterparty_id
		WHERE CONVERT(NVARCHAR(10), cca.contract_start_date, 10) > CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120) 	
	')	
	
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT ed.temp_id,
	           ''' + @process_id + ''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''Import period is greater than Contract End Date for counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') + '' AND contract ID :'' + ISNULL(a.contract_id, ''NULL'')+ ''.'',
	           ''Please CHECK your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		INNER JOIN ' + @import_temp_table_name + ' ed
			ON a.counterparty_id = ed.counterparty_id
				AND a.contract_id = ed.contract_id
       	INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN counterparty_contract_address cca
			ON cca.contract_id = cg.contract_id
				AND cca.counterparty_id = sc.source_counterparty_id
		WHERE CONVERT(NVARCHAR(10), cca.contract_end_date, 120) < CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120)
	')
	
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	    SELECT a.temp_id,
	           ''' + @process_id + ''',
	           ''Error'',
	           ''Import Data'',
	           ''' + @table_name + ''',
	           ''Data Error'',
	           ''Data Error for deal_type_id :'' + ISNULL(a.deal_type_id, ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
			   ''Please Check your Data'',
			   a.import_file_name
	    FROM ' + @import_temp_table_name + ' a
		INNER JOIN (
            SELECT deal_type_id,
				   COUNT(1) notimes
            FROM ' + @import_temp_table_name + '
			GROUP BY deal_type_id
            HAVING COUNT(1) > 1
        ) b ON a.deal_type_id = b.deal_type_id
	')

	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Data Error for Contract_id :'' + ISNULL(a.contract_id, ''NULL'') + '', contract_id :'' + ISNULL(CAST(a.contract_id AS NVARCHAR(10)), ''NULL'') + ''.( Data Format for Contract_id is invalid )'',
			   ''Please Check your Data'', a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN contract_group cg
			ON cg.contract_name = a.contract_id 
		WHERE cg.contract_id IS NULL
	')

	-- Resolving Counterparty using SAP value 
	EXEC('
		IF EXISTS(SELECT 1 from ' + @import_temp_table_name + ' a WHERE a.counterparty_id IS NULL) 
		BEGIN 
			UPDATE a
			SET a.counterparty_id = COALESCE(a.counterparty_id, sc.counterparty_id)
			FROM ' + @import_temp_table_name  + ' a
			LEFT JOIN counterparty_epa_account cea
				ON cea.external_value = a.sap_id
			LEFT JOIN source_counterparty sc
				ON sc.source_counterparty_id  = cea.counterparty_id 
	    END
	') 

	-- mandatory fields check
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''One or more required columns are empty for counterparty '' + ISNULL(a.counterparty_id, ''NULL'') + '' and contract: '' + ISNULL(a.contract_id, ''NULL'') + ''.'',
			   ''Please Check your Data'', a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #error_list ed
			ON ed.counterparty_id = a.counterparty_id
				AND a.contract_id = ed.contract_id
	')

	--Existance of INVOICE LINE ITEM 
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Line Item:'' + ISNULL(a.invoice_line_item_id, ''NULL'') + '' does not exist in system for counterparty :'' + ISNULL(CAST(a.counterparty_id AS NVARCHAR(10)), ''NULL'') + '' and contract: '' +ISNULL(a.contract_id, ''NULL'') +''.'',
			   ''Please Check your Data'', a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.invoice_line_item_id 
		LEFT JOIN static_data_type sdt
			ON sdt.type_id = sdv.type_id
				AND sdt.type_name = ''Contract Components'' 
		WHERE sdv.value_id is NULL 
	')
	
	CREATE TABLE #charge_type(
		temp_ID INT,
		counterparty_id NVARCHAR(300) COLLATE DATABASE_DEFAULT,
		contract_id NVARCHAR(300) COLLATE DATABASE_DEFAULT,
		missing_field NVARCHAR(300) COLLATE DATABASE_DEFAULT
	)
			
	EXEC('
		INSERT INTO #charge_type (temp_id, counterparty_id, contract_id, [missing_field])
		SELECT a.temp_id,
			   a.counterparty_id,
			   a.contract_id,
			   sdv.code
		FROM  ' + @import_temp_table_name + ' a 
		LEFT JOIN static_data_value sdv 
			ON sdv.code = a.invoice_line_item_id 
		LEFT JOIN static_data_type sdt 
			ON sdt.type_id = sdv.type_id
				AND sdt.type_name = ''Contract Components''
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN contract_group_detail cgd
			ON cgd.contract_id = cg.contract_id
				AND cgd.invoice_line_item_id = sdv.value_id
		WHERE cgd.id IS NULL
			AND sdt.type_id IS NOT NULL
	')
	
	--checking invoice line item is mapped in contract group detail.
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Line Item does not exist for counterparty :'' + ISNULL(CAST(a.counterparty_id AS NVARCHAR(10)), ''NULL'') + '' and contract: '' +ISNULL(a.contract_id, ''NULL'') + ''.'',
			   ''Please CHECK your Data'',
			   a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN #charge_type ct 
			ON ct.contract_id = a.contract_id 
				AND ct.counterparty_id = a.counterparty_id 
				--AND a.temp_id = ct.temp_id
	')
	
	--- Finalized deal 
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Settlement already finalized for counterparty: '' + ISNULL(a.counterparty_id, ''NULL'') + '' and contract: '' + ISNULL(a.contract_id, ''NULL'')  + '' for production month: '' + a.prod_date + ''.'',
			   ''Please CHECK your Data'', a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN calc_invoice_volume_variance civv
			ON CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND CONVERT(NVARCHAR(10), civv.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), civv.prod_date_to, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
		WHERE civv.calc_id IS NOT NULL
			AND civv.finalized = ''y''
	')
	
	--- Locked deal 
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   ''' + @process_id + ''',
			   ''Error'',
			   ''Import Data'',
			   ''' + @table_name + ''',
			   ''Data Error'',
			   ''Settlement already finalized for counterparty: '' + ISNULL(a.counterparty_id, ''NULL'') + '' and contract: '' + ISNULL(a.contract_id, ''NULL'')  + '' for production month: '' + a.prod_date + ''.'',
			   ''Please CHECK your Data'', a.import_file_name
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN Calc_invoice_Volume_variance civv
			ON CONVERT(NVARCHAR(10), civv.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
		WHERE civv.calc_id IS NOT NULL 
			AND civv.invoice_lock = ''y''
	')
	
	CREATE TABLE #cash_recieved_data_check(
		calc_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		counterparty_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		contract_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		civv_prod_date NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		prod_date NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		save_invoice_detail_id NVARCHAR(100) COLLATE DATABASE_DEFAULT
	)
	
	EXEC('
		INSERT INTO #cash_recieved_data_check (calc_id, counterparty_id, contract_id, civv_prod_date, prod_date,save_invoice_detail_id)
		SELECT civv.calc_id,
			   sc.counterparty_id,
			   cg.contract_id,
			   CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120),
			   CONVERT(NVARCHAR(10), civv.prod_date, 120) [Check Prod Date], 
			   irc.save_invoice_detail_id
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id				
		INNER JOIN Calc_invoice_Volume_variance civv
			ON civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
		INNER JOIN calc_invoice_volume civ
			ON civ.calc_id = civv.calc_id
		LEFT JOIN invoice_Cash_received irc
			ON civ.calc_detail_id = irc.save_invoice_detail_id 
		WHERE a.counterparty_id = sc.counterparty_id
			AND a.contract_id = cg.contract_name
			AND CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120) 
			AND irc.save_invoice_detail_id IS NULL
	')
	
	DELETE civ
	FROM calc_invoice_volume civ
	INNER JOIN #cash_recieved_data_check crdc
		ON civ.calc_id = crdc.calc_id

	DELETE civv
	FROM calc_invoice_volume_variance civv
	INNER JOIN #cash_recieved_data_check crdc
		ON civv.calc_id = crdc.calc_id
		
	--- Locked deal 
	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			   '''+ @process_id+''',
			   ''Error'',
			   ''Import Data'',
			   '''+@table_name+''',
			   ''Data Error'',
			   ''Cash already applied for Counterparty: '' + ISNULL(a.counterparty_id, ''NULL'') + '' and Contract: '' + ISNULL(a.contract_id, ''NULL'')  + '' for production month: '' + a.prod_date + ''. Please Delete Cash Amount and Import Invoice Again.'',
			   ''Please CHECK your Data'',
			   a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		INNER JOIN Calc_invoice_Volume_variance civv
			ON civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
		INNER JOIN calc_invoice_volume civ 
			ON civ.calc_id = civv.calc_id
		LEFT JOIN invoice_Cash_received irc
			ON civ.calc_detail_id = irc.save_invoice_detail_id
		WHERE a.counterparty_id = sc.counterparty_id 
			AND a.contract_id = cg.contract_name
			AND CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120) 
			AND irc.save_invoice_detail_id IS NOT NULL
	')
	
	IF NOT EXISTS(SELECT 1 FROM #import_status)
	BEGIN
		EXEC('
			DELETE ' + @import_temp_table_name + '
			FROM #import_status
			INNER JOIN ' + @import_temp_table_name + ' a
				ON #import_status.temp_id = a.temp_id
		')
		
		SET @sql = '
		INSERT INTO ##update_list(calc_id, counterparty_id, contract_id, prod_date, as_of_date, Prod_date_to, invoice_number)
		SELECT civv.calc_id,
			   sc.source_counterparty_id,
			   cg.contract_id,
			   CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120),
			   CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120),
			   CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120),
			   civv.invoice_number
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg
			ON cg.contract_name = a.contract_id
		LEFT JOIN Calc_invoice_Volume_variance civv
			ON CONVERT(NVARCHAR(10), civv.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
		WHERE civv.calc_id IS NOT NULL
		GROUP BY a.as_of_date, civv.calc_id, sc.source_counterparty_id, cg.contract_id, a.prod_date, a.prod_date_to, a.settlement_date, a.payment_date, civv.calc_id, civv.invoice_number
		'

		EXEC(@sql)
		
		IF EXISTS(SELECT 1 FROM ##update_list) 
		BEGIN 
			EXEC spa_print 'erhs'
			SET @is_update = 1
		END 
		ELSE
			SET @is_update = 0
		
		EXEC spa_print @is_update
		
	--insert into calc_invoice_volume_varience
	IF(@is_update <> 1)
	BEGIN 		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
			UPDATE civ 
			SET civ.Volume = a.Volume,
				civ.Value = a.Value,
				civ.invoice_line_item_id = sdv.value_id ,
				update_user = dbo.FNADBUser(),
				update_ts = GETDATE(),
				civ.inv_prod_date = a.prod_date
			FROM ' + @import_temp_table_name + '  a 
			INNER JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty_id
			INNER JOIN contract_group cg
				ON cg.contract_name = a.contract_id
			INNER JOIN Calc_invoice_Volume_variance ul
				ON CONVERT(NVARCHAR(10), ul.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120) = CONVERT(NVARCHAR(10), ul.prod_date, 120)
				AND CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120) = CONVERT(NVARCHAR(10), ul.Prod_date_to, 120)
				AND cg.contract_id = ul.contract_id
				AND sc.source_counterparty_id = ul.counterparty_id
				AND CONVERT(NVARCHAR(10), ul.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
			INNER JOIN static_data_value sdv
				ON sdv.code = a.invoice_line_item_id 
			INNER JOIN static_data_type sdt
				ON sdt.type_id = sdv.type_id
					AND sdt.type_name = ''Contract Components''
			LEFT JOIN calc_invoice_volume civ
				ON civ.calc_id = ul.calc_id
					AND civ.prod_date = ul.prod_date
					AND civ.invoice_line_item_id =  sdv.value_id
			WHERE civ.calc_id IS NOT NULL 
				AND ISNULL(ul.invoice_lock, ''n'') <> ''y''
		'
		EXEC(@sql)
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
			INSERT INTO calc_invoice_volume_variance(
				as_of_date, counterparty_id, generator_id, contract_id, prod_date, metervolume, invoicevolume, allocationvolume, variance, onpeak_volume, offpeak_volume,
				uom, actualVolume, book_entries, finalized, invoice_id, deal_id, create_user, create_ts, estimated, calculation_time, book_id, sub_id, process_id,
				invoice_number, comment1, comment2, comment3, comment4, comment5, invoice_status, invoice_lock, invoice_note, invoice_type, netting_group_id, prod_date_to,
				settlement_date, finalized_date, original_invoice, payment_date, invoice_template_id
			)
			OUTPUT INSERTED.calc_id, INSERTED.counterparty_id, INSERTED.contract_id, INSERTED.prod_date, INSERTED.as_of_date, INSERTED.prod_date_to, INSERTED.settlement_date, INSERTED.invoice_number
			INTO ##update_list (calc_id, counterparty_id, contract_id, prod_date, as_of_date, prod_date_to, settlement_date, invoice_number)
			SELECT CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120) AS as_of_date, sc.source_counterparty_id, NULL, cg.contract_id, CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120) AS prod_date, 0,
				   0, 0, 0, 0, 0, MAX(su.source_uom_id), 0, ''m'', NULL AS finalized, NULL AS invoice_id, NULL AS deal_id, dbo.FNAdbuser(), CAST (GETDATE() AS DATE), ''n'',
				   NULL AS Calculation_time, NULL AS book, -1 AS Sub_id, NULL AS process_id, '''' AS invoice_number, NULL AS comment1, NULL AS comment2, NULL AS comment3, NULL AS comment4,
				   NULL AS comment5, 20701 AS Invoice_status, NULL AS Invoice_lock, NULL AS Invoice_note, CASE WHEN a.buy_sell = ''SELL'' THEN ''i'' ELSE ''r'' END AS Invoice_type,
				   NULL AS netting_group_id, CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120) AS prod_date_to, dbo.FNAInvoiceDueDate(CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120), MAX(cg.settlement_date), MAX(cg.holiday_calendar_id), MAX(cg.settlement_days)) AS settlement_date,
				   NULL AS finalized_date, NULL AS Original_invoice, CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.payment_date), 120), MAX(cg.invoice_report_template) AS Invoice_template
			FROM ' + @import_temp_table_name + ' AS a
			INNER JOIN source_counterparty AS sc
				ON sc.counterparty_id = a.counterparty_id
			INNER JOIN contract_group AS cg
				ON cg.contract_name = a.contract_id
			LEFT OUTER JOIN source_uom AS su
				ON su.source_uom_id = cg.volume_uom
			LEFT JOIN Calc_invoice_Volume_variance civv 
				ON CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND civv.counterparty_id = sc.source_counterparty_id
				AND civv.contract_id = cg.contract_id
				AND CONVERT(NVARCHAR(10), civv.prod_date_to, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120)
				AND CONVERT(NVARCHAR(10), civv.as_of_date, 120) = CASE WHEN civv.finalized = ''y'' THEN CONVERT(NVARCHAR(10), civv.as_of_date, 120) ELSE CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_Date), 120) END
			WHERE calc_id IS NULL 
			GROUP BY a.as_of_date, sc.source_counterparty_id, cg.contract_id, a.prod_date, a.prod_date_to, a.settlement_date, a.payment_date, a.buy_sell
		'
	
		EXEC (@sql)
	
		UPDATE civv
		SET invoice_number = u.calc_id 
		FROM Calc_invoice_Volume_variance civv
		INNER JOIN ##update_list u 
			ON u.calc_id = civv.calc_id 
				AND u.contract_id = civv.contract_id 
				AND u.counterparty_id = civv.counterparty_id
	
		--DECLARE @xml XML

		--SET @xml = '<Root>' + (
		--	   SELECT t.calc_id AS '@calc_id',
		--			  CONVERT(NCHAR(10), GETDATE(), 126) AS '@finalized_date'
		--	   FROM ##update_list t FOR XML PATH('PSRecordSet')
		--) + '</Root>'
   
		--EXEC spa_update_invoice_number @flag = 'f', @xml = @xml

		--UPDATE civv
		--SET civv.finalized = 'y'
		--FROM calc_invoice_volume_variance civv
		--INNER JOIN ##update_list u
		--	ON u.calc_id = civv.calc_id 
		--		AND u.contract_id = civv.contract_id 
		--		AND u.counterparty_id = civv.counterparty_id
	END
	
	--insert into calc_invoice_volume
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		INSERT calc_invoice_volume(
			calc_id, invoice_line_item_id, prod_date, Value, Volume, manual_input, default_gl_id, uom_id, price_or_formula, onpeak_offpeak, remarks, finalized, finalized_id,
			inv_prod_date, include_volume, create_user, create_ts, default_gl_id_estimate, status, deal_type_id, inventory, apply_cash_calc_detail_id, finalized_date
		)
		SELECT i.calc_id, sdv.value_id AS invoice_line_item_id, i.prod_date, ISNULL(a.value, CAST(a.price AS NUMERIC(38, 20)) * CAST(a.volume AS NUMERIC(38,20))), a.volume,
			   ''y'' AS manual_input, NULL, NULL, a.price_or_formula, a.onpeak_offpeak, a.remarks, ''n'', a.finalized_id, CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120), a.include_volume, dbo.FNADBUser(),
			   GETDATE(), NULL, NULL, a.deal_type_id, a.inventory, a.apply_cash_calc_detail_id, CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.finalized_date), 120)
		FROM ' + @import_temp_table_name + ' AS a
		INNER JOIN source_counterparty AS sc
			ON sc.counterparty_id = a.counterparty_id
		INNER JOIN contract_group AS cg
			ON cg.contract_name = a.contract_id
		INNER JOIN ##update_list AS i
			ON i.counterparty_id = sc.source_counterparty_id
				AND i.contract_id = cg.contract_id
				AND CONVERT(NVARCHAR(10), i.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND CONVERT(NVARCHAR(10), i.as_of_Date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), i.prod_date_to, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120)
				--AND i.settlement_date = CONVERT(DATETIME, a.settlement_date, 103)
		INNER JOIN static_data_value AS sdv
			ON sdv.code = a.invoice_line_item_id
		INNER JOIN static_data_type as sdt
			ON sdt.type_id = sdv.type_id 
				AND sdt.type_name = ''Contract Components''
		LEFT OUTER JOIN source_uom AS su
			ON su.uom_id = a.uom
		LEFT JOIN calc_invoice_volume civ 
			ON civ.calc_id = i.calc_id
				AND civ.prod_date = i.prod_date
				AND civ.invoice_line_item_id = sdv.value_id
		WHERE civ.calc_detail_id IS NULL
	'
	EXEC(@sql)
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		DELETE citu 
		FROM ' + @import_temp_table_name +  ' a
		INNER JOIN source_counterparty sc 
			ON sc.counterparty_id = a.counterparty_id 
		INNER JOIN contract_group cg 
			ON cg.contract_name = a.contract_id
		INNER JOIN static_data_value sdv 
			ON sdv.code = a.invoice_line_item_id 
				AND sdv.type_id = 10019
		INNER JOIN calc_invoice_true_up citu 
			ON citu.contract_id = cg.contract_id 
				AND citu.counterparty_id = sc.source_counterparty_id
				AND CONVERT(NVARCHAR(10), citu.as_of_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120)
				AND CONVERT(NVARCHAR(10), citu.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
				AND CONVERT(NVARCHAR(10), citu.prod_date_to, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120)
		INNER JOIN ##update_list ul
			ON citu.calc_id =  ul.calc_id	
	'
	
	EXEC(@sql)
	
	IF NOT EXISTS(SELECT 1 FROM #import_status WHERE [description] LIKE '%Settlement already finalized for counterparty:%')
	BEGIN		
		SET @sql =  CAST('' AS NVARCHAR(MAX)) + N'
			INSERT INTO calc_invoice_true_up(calc_id,counterparty_id,contract_id,true_up_month,invoice_line_item_id,invoice_number,formula_id,sequence_id,as_of_date,prod_date,prod_date_to,value,create_user,create_ts,is_final_result,true_up_calc_id,volume)
			SELECT a1.calc_id, sc.source_counterparty_id, cg.contract_id, civv.prod_date, cgd1.invoice_line_item_id, a1.calc_id, '''', '''', CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.as_of_date), 120),
				   CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120), CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120), 
				   a.value - dbo.FNARPriorFinalizedAmount(cg.contract_id, sc.source_counterparty_id, civv.prod_date, cgd1.invoice_line_item_id, civv.invoice_type) - dbo.FNARPriorFinalizedAmount(cg.contract_id, sc.source_counterparty_id, civv.prod_date, cgd.invoice_line_item_id, civv.invoice_type) value,
				   dbo.FNADBUser(), GETDATE(), ''y'', a1.calc_id, 
				   a.volume - dbo.FNARPriorFinalizedVol(cg.contract_id, sc.source_counterparty_id, civv.prod_date, cgd1.invoice_line_item_id, civv.invoice_type) - dbo.FNARPriorFinalizedVol(cg.contract_id, sc.source_counterparty_id, civv.prod_date, cgd.invoice_line_item_id, civv.invoice_type) volume
			FROM ' + @import_temp_table_name + ' a
			INNER JOIN source_counterparty sc
				ON sc.counterparty_id = a.counterparty_id
			INNER JOIN contract_group cg 
				ON cg.contract_name = a.contract_id
			INNER JOIN static_data_value sdv
				ON sdv.code = a.invoice_line_item_id 
					AND sdv.type_id = 10019
			CROSS APPLY(
				SELECT MAX(as_of_date) as_of_date 
				FROM calc_invoice_volume_variance
				WHERE counterparty_id = sc.source_counterparty_id
					AND contract_id = cg.contract_id
					AND prod_date = CONVERT(datetime, dbo.FNAClientToSQLDate(a.prod_date), 103)
					AND invoice_type = CASE WHEN a.buy_sell = ''BUY'' THEN ''i'' ELSE ''r'' END
					AND finalized = ''y''
				) civv1
			INNER JOIN calc_invoice_volume_variance civv
				ON civv.counterparty_id = sc.source_counterparty_id
					AND civv.contract_id = cg.contract_id
					AND CONVERT(NVARCHAR(10), civv.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
					AND CONVERT(NVARCHAR(10), civv.prod_date_to, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date_to), 120)
					AND civv.finalized = ''y''
			INNER JOIN calc_invoice_volume civ 
				ON civ.calc_id = civv.calc_id
					AND civ.invoice_line_item_id = sdv.value_id
					AND CONVERT(NVARCHAR(10), civ.prod_date, 120) = CONVERT(NVARCHAR(10), dbo.FNAClientToSQLDate(a.prod_date), 120)
			INNER JOIN contract_group_detail cgd 
				ON cgd.contract_id = cg.contract_id
					AND cgd.invoice_line_item_id = civ.invoice_line_item_id
			INNER JOIN contract_group_detail cgd1
				ON cgd1.contract_id = cg.contract_id
					AND cgd.invoice_line_item_id = cgd1.true_up_charge_type_id
					AND ISNULL(cgd1.is_true_up,''n'') = ''y''
			CROSS APPLY(
				SELECT calc_id 
				FROM ##update_list i 
				WHERE  i.counterparty_id = sc.source_counterparty_id
					AND i.contract_id = cg.contract_id
			) a1
			WHERE 1=1 
		'
 
		EXEC(@sql)
	END
	END 
	ELSE 
	BEGIN
		EXEC('DELETE FROM ' + @import_temp_table_name)
	END
	--SET @sql = 
	--'DECLARE @total_valueOUT numeric(38,20)
	--SELECT @total_valueOUT = SUM(value) 
	--FROM Calc_invoice_Volume_variance civv INNER JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id
	--	INNER JOIN '+CASE WHEN @is_update <> 1 THEN +'#inserted_calc_id' ELSE '##update_list' END + ' i ON 
	--	i.calc_id = civv.calc_id GROUP BY civv.calc_id'



	--SET @sql = @sql + ' UPDATE civv SET invoice_type = CASE WHEN  @total_valueOUT> 0 THEN ''i'' ELSE ''r'' END
	--	FROM Calc_invoice_Volume_variance civv INNER JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id
	--	INNER JOIN '+CASE WHEN @is_update <> 1 THEN +'#inserted_calc_id' ELSE '##update_list' END + ' i ON 
	--	i.calc_id = civv.calc_id'
	
	--	EXEC(@sql)


	--COMMIT TRANSACTION [Tran1] 

	--END TRY
	--BEGIN CATCH 
	--	 ROLLBACK TRANSACTION [Tran1]
	--END CATCH 
	--END TRY
	-- BEGIN CATCH
 
	 --DECLARE @sq NVARCHAR(1000)
		--SET @sq = 'INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		--		  SELECT a.temp_id,
		--				 '''+ @process_id+''',
		--				 ''Error'',
		--				 ''Import Data'',
		--				 '''+@table_name+''',
		--				 ''Data Error FROM CATCH'','''+
		--				ERROR_MESSAGE()
		--				+''',
		--				 ''Please CHECK your Data'', a.import_file_name
		--		  FROM   '+@import_temp_table_name + ' a 
		--	INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id 
		--			INNER JOIN contract_group cg ON cg.contract_name = a.contract_id
		--			LEFT JOIN Calc_invoice_Volume_variance civv ON civv.as_of_date = CONVERT(datetime,a.as_of_date,103)
		--			AND civv.prod_date = CONVERT(datetime,a.prod_date,103)
		--			AND civv.counterparty_id = sc.source_counterparty_id
		--			AND civv.contract_id = cg.contract_id
		--			WHERE civv.calc_id IS NOT NULL and civv.invoice_lock = ''y''
		--			'
		--			EXEC(@sq)


END

IF @table_name = 'ixp_source_trader_template'
BEGIN
	EXEC('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_traders'',''trader_desc'',''trader_desc'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_traders'',''user_login_id'',''user_login_id'')')
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''application_users'', ''user_login_id'', ''b.user_login_id = a.user_login_id'', ''w'')'
			)

	--select @process_id, @field_compare_table, @source_table, @table_name, @rules_id
	--return
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	') 
 
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE source_traders
 	            SET source_system_id = ISNULL(d.source_system_id, source_traders.source_system_id),
 					trader_id = ISNULL(b.trader_id, source_traders.trader_id),
 					trader_name = ISNULL(b.trader_name, source_traders.trader_name),
 					trader_desc = ISNULL(b.trader_desc, source_traders.trader_desc),
 					user_login_id = ISNULL(au.user_login_id, source_traders.user_login_id)
 	            FROM   source_traders
                 INNER JOIN ' + @import_temp_table_name + ' b
                     ON  source_traders.trader_id = b.trader_id
                     AND source_traders.source_system_id = b.source_system_id
                 INNER JOIN source_system_description d ON  b.source_system_id = d.source_system_id
                 LEFT JOIN application_users au ON au.user_login_id = b.user_login_id
                 LEFT JOIN #error_status es ON  b.temp_id = es.temp_id
 	            WHERE  es.temp_id IS NULL'
 	EXEC(@sql)
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_traders(source_system_id, trader_id, trader_name, trader_desc, user_login_id)
 	             SELECT a.source_system_id,
 	                    a.trader_id,
 	                    a.trader_name,
 	                    a.trader_desc,
 	                    au.user_login_id
 	             FROM ' + @import_temp_table_name + ' a
                  INNER JOIN source_system_description d ON  a.source_system_id = d.source_system_id
                  LEFT JOIN application_users au ON au.user_login_id = a.user_login_id
                  LEFT JOIN source_traders g
                      ON  g.trader_id = a.trader_id
                      AND g.source_system_id = a.source_system_id
                  LEFT JOIN #error_status es ON  a.temp_id = es.temp_id
 	             WHERE  es.temp_id IS NULL AND g.trader_id IS NULL'
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_source_price_curve_def_template'
BEGIN
 	/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'source_price_curve_def'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)

	/*
	Note:Verify destination table and columns. If any miss match data found then correct it. Logic related to rtc_curve_1
	,rtc_curve_2
	,rtc_curve_3
	,rtc_curve_4 are not related main destination table. So no need to collect it.
	*/
		
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
 	 	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''source_curve_type_value_id'', ''b.code = a.source_curve_type_value_id AND b.type_id = 575'', ''e''),  --error rows
			(''source_commodity'', ''commodity_id'', ''b.commodity_id = a.commodity_id AND a.source_system_id = b.source_system_id'', ''e''),  --error rows
			(''source_currency'', ''source_currency_id'', ''b.currency_id = a.source_currency_id AND a.source_system_id = b.source_system_id'', ''e''),
			(''source_uom'', ''uom_id'', ''b.uom_id = a.uom_id AND a.source_system_id = b.source_system_id'', ''e''),
			(''static_data_value'', ''granularity'', ''b.code = a.Granularity AND b.TYPE_ID = 978'', ''e''),
			(''static_data_value'', ''index_group'', ''b.code = a.index_group AND b.type_id = 15100'', ''w''),
			(''source_currency'', ''source_currency_to_id'', ''b.currency_id = a.source_currency_to_id AND a.source_system_id = b.source_system_id'', ''w''),
			(''source_price_curve_def'', ''proxy_source_curve_def_id'', ''b.curve_id = a.proxy_source_curve_def_id'', ''w''),
			(''source_price_curve_def'', ''monthly_index'', ''b.curve_id =a.monthly_index'', ''w''),
			(''source_price_curve_def'', ''proxy_curve_id3'', ''b.curve_id = a.proxy_curve_id3'', ''w''),
			(''source_price_curve_def'', ''settlement_curve_id'', ''b.curve_id = a.settlement_curve_id'', ''w''),
			(''static_data_value'', ''exp_calendar_id'', ''b.code = a.exp_calendar_id AND b.type_id = 10017'', ''w''),
			(''static_data_value'', ''block_define_id'', ''b.code = a.block_define_id AND b.type_id = 10018'', ''w''),
			(''static_data_value'', ''holiday_calendar_id'', ''b.code = a.holiday_calendar_id AND b.type_id = 10017'', ''w''),
			(''static_data_value'', ''market_value_desc'', ''b.code = a.market_value_desc AND b.type_id = 29700'', ''w''),
			(''source_price_curve_def'', ''rtc_curve_1'', ''b.curve_id = a.rtc_curve_1'', ''w''),
			(''source_price_curve_def'', ''rtc_curve_2'', ''b.curve_id = a.rtc_curve_2'', ''w''),
			(''source_price_curve_def'', ''rtc_curve_3'', ''b.curve_id = a.rtc_curve_3'', ''w''),
			(''source_price_curve_def'', ''rtc_curve_4'', ''b.curve_id = a.rtc_curve_4'', ''w''),
			(''source_price_curve_def'', ''liquidation_multiplier'', ''b.curve_id = a.liquidation_multiplier'', ''w''),
			(''static_data_value'', ''udf_block_group_id'', ''b.code = a.udf_block_group_id AND b.type_id = 15001'', ''w''),
			(''static_data_value'', ''curve_tou'', ''b.code = a.curve_tou AND b.type_id = 18900'', ''w''),
			(''source_price_curve_def'', ''proxy_curve_id'', ''b.curve_id = a.proxy_curve_id'', ''w''),
			(''source_uom'', ''display_uom_id'', ''b.uom_name = a.display_uom_id'', ''w''),
			(''time_zones'', ''time_zone'', ''b.TIMEZONE_NAME = a.time_zone'', ''w''),
			(''static_data_value'', ''hourly_volume_allocation'', ''b.code = a.hourly_volume_allocation AND b.type_id = 17600'', ''w'')
	')
 	
 	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'
	
	-- Repeated Market Description and Market Value ID in same file validation.
	EXEC ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		   SELECT
               a.temp_id,
		       10007,
			   ''{
			       "column_name": "'' + mktv.source_column_name + '', '' + mktd.source_column_name + ''",
				   "column_value": "'' + a.market_value_id + '', '' + a.market_value_desc + ''",
				   "repetition_count": "'' + CAST(ab.counters AS NVARCHAR(20)) + ''"
			   }'',
               a.import_file_name
		   FROM ' + @import_temp_table_name + ' a
		   CROSS APPLY (
			   SELECT COUNT(1) AS counters, market_value_id, market_value_desc
			   FROM ' + @import_temp_table_name + ' a
			   GROUP BY market_value_id, market_value_desc
			   HAVING COUNT(1) > 1
		   ) ab
		   CROSS APPLY (
			   SELECT source_column_name
			   FROM #source_file_column_table
			   WHERE ixp_columns_name = ''market_value_id'' -- ixp_columns_name
		   ) mktv
		   CROSS APPLY (
			   SELECT source_column_name
			   FROM #source_file_column_table
			   WHERE ixp_columns_name = ''market_value_desc'' -- ixp_columns_name
		   ) mktd
		   WHERE ab.counters > 1
		      AND ab.market_value_desc = a.market_value_desc
			  AND ab.market_value_id = a.market_value_id
    ')

	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')

	-- Already Existed Market Description and Market Value ID validation.
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation) 
		SELECT a.temp_id,
			NULL,
			''Value for column: Market Description ('' + a.market_value_desc + ''), Market ('' + a.market_value_id + '') is already used.'',
			a.import_file_name,
			''Error'',
			''Data Error'',
			''Please correct data and re-import.''
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN static_data_value sdv ON sdv.code = a.market_value_desc AND sdv.[type_id] = 29700
		LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.curve_id
		LEFT JOIN source_price_curve_def spcd1 ON spcd1.market_value_desc = sdv.value_id AND spcd1.market_value_id = a.market_value_id
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		WHERE #error_status.temp_id IS NULL AND spcd1.source_curve_def_id IS NOT NULL AND spcd.source_curve_def_id IS NULL
	')

	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  WHERE #error_status.message_status = ''Error''
	')

	-- Effective Date Validation
	EXEC ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		   SELECT
               a.temp_id,
		       10013,
			   ''{
			       "column_name": "'' + scm.source_column_name + ''",
				   "column_value": "'' + a.effective_date + ''"
			   }'',
               a.import_file_name
		   FROM ' + @import_temp_table_name + ' a
		   CROSS APPLY (
			   SELECT source_column_name
			   FROM #source_file_column_table
			   WHERE ixp_columns_name = ''effective_date'' -- ixp_columns_name
		   ) scm
           WHERE a.effective_date NOT IN (''yes'', ''y'', ''no'', ''n'')
    ')

	-- Forward/Settlement Validation
	EXEC ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		   SELECT
               a.temp_id,
		       10013,
			   ''{
			       "column_name": "'' + scm.source_column_name + ''",
				   "column_value": "'' + a.Forward_Settle + ''"
			   }'',
               a.import_file_name
		   FROM ' + @import_temp_table_name + ' a
		   CROSS APPLY (
			   SELECT source_column_name
			   FROM #source_file_column_table
			   WHERE ixp_columns_name = ''Forward_Settle'' -- ixp_columns_name
		   ) scm
           WHERE a.Forward_Settle NOT IN (''Forward'', ''f'', ''Settlement'', ''s'')
    ')

	-- Environmental Product Validation
	EXEC ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		   SELECT
               a.temp_id,
		       10013,
			   ''{
			       "column_name": "'' + scm.source_column_name + ''",
				   "column_value": "'' + a.obligation + ''"
			   }'',
               a.import_file_name
		   FROM ' + @import_temp_table_name + ' a
		   CROSS APPLY (
			   SELECT source_column_name
			   FROM #source_file_column_table
			   WHERE ixp_columns_name = ''obligation'' -- ixp_columns_name
		   ) scm
           WHERE a.obligation NOT IN (''yes'', ''y'', ''no'', ''n'')
    ')

 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')
 	/*******************End Of Data Validation***********************/

 	IF OBJECT_ID ('tempdb..#tmp_data_rb') IS NOT NULL
		DROP TABLE #tmp_data_rb

	IF OBJECT_ID('tempdb..#inserted_holiday_group') IS NOT NULL
		DROP TABLE #inserted_holiday_group 

 	CREATE TABLE #tmp_data_rb (
		curve_id  NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
		id INT
	)

	CREATE TABLE #inserted_price_curve_def (source_curve_def_id INT)
 	      
 	SET @sql = '
		INSERT INTO #tmp_data_rb (curve_id, id)
 	    SELECT a.curve_id,
 			b.source_curve_def_id
		FROM source_price_curve_def b
 	    INNER JOIN ' + @import_temp_table_name + ' a ON b.curve_id = a.risk_bucket_id
			AND b.source_system_id = a.source_system_id '

 	EXEC (@sql)
	   
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
		UPDATE b
		SET source_system_id = ssd.source_system_id,
			curve_id = a.curve_id,
			curve_name = a.curve_name,
			curve_des = a.curve_des,
			commodity_id = sc_commodity.source_commodity_id,
			market_value_id = a.market_value_id,
			market_value_desc = sdv_market.value_id,
			source_currency_id = sc.source_currency_id,
			source_currency_to_id = CASE WHEN sdv.value_id = 576 THEN sc_to.source_currency_id ELSE NULL END,
			source_curve_type_value_id = sdv.value_id,
			uom_id = su.source_uom_id,
			proxy_source_curve_def_id = spcd_proxy.source_curve_def_id,
			formula_id = fe.formula_id,
			obligation = LEFT(a.obligation, 1),
			sort_order = a.sort_order,
			fv_level = a.fv_level,
			Granularity = sdv_gra.value_id,
			exp_calendar_id = sdv_ext.value_id,
			risk_bucket_id = spcd_risk.source_curve_def_id,
			reference_curve_id = a.reference_curve_id,
			monthly_index = spcd_index.source_curve_def_id,
			program_scope_value_id = a.program_scope_value_id,
			curve_definition = a.curve_definition,
			block_type = sdv_block.value_id,
			block_define_id = ssdf_define.value_id,
			index_group = sdv_ig.value_id,
			display_uom_id = suom.source_uom_id,
			proxy_curve_id = proxy_curve_id.source_curve_def_id,
			hourly_volume_allocation = sdv_hva.value_id,
			settlement_curve_id = settlement_curve.source_curve_def_id,
			time_zone = tz.TIMEZONE_ID,
			udf_block_group_id = sdv_tou.value_id,
			is_active = ''y'',
			ratio_option = a.ratio_option,
			curve_tou = sdv_timeou.value_id,
			proxy_curve_id3 = proxy_curve_id3.source_curve_def_id,
			asofdate_current_month = a.asofdate_current_month,
			monte_carlo_model_parameter_id = mcmp.monte_carlo_model_parameter_id,
			contract_id = a.contract_id,
			holiday_calendar_id = sdv_holiday_calendar_id.value_id,
			liquidation_multiplier = spcd_lm.source_curve_def_id,
			effective_date = LEFT(a.effective_date, 1),
			location_id = sml.source_minor_location_id
		OUTPUT INSERTED.source_curve_def_id INTO #inserted_price_curve_def(source_curve_def_id)	
 		'
	SET @sql += ' FROM ' + @import_temp_table_name+' a
		LEFT JOIN static_data_value sdv_market ON sdv_market.code = a.market_value_desc AND sdv_market.type_id = 29700
 		INNER JOIN source_system_description ssd ON ssd.source_system_id = a.source_system_id
		INNER JOIN source_price_curve_def b ON b.curve_id = a.curve_id
			AND b.source_system_id = a.source_system_id
		LEFT JOIN source_uom suom ON suom.uom_name = a.display_uom_id
		LEFT JOIN static_data_value sdv_timeou ON sdv_timeou.code = a.curve_tou AND sdv_timeou.type_id = 18900
		LEFT JOIN static_data_value sdv_hva ON sdv_hva.code = a.hourly_volume_allocation AND sdv_hva.type_id = 17600
 		LEFT JOIN static_data_value sdv_gra  ON  sdv_gra.code = a.Granularity AND sdv_gra.type_id = 978
 		LEFT JOIN static_data_value sdv ON sdv.code = a.source_curve_type_value_id AND sdv.type_id = 575
 		LEFT JOIN source_currency sc ON sc.currency_id = a.source_currency_id AND a.source_system_id = sc.source_system_id
 		LEFT JOIN source_currency sc_to ON sc_to.currency_id = a.source_currency_to_id AND a.source_system_id = sc_to.source_system_id
 		LEFT JOIN source_uom su ON su.uom_id = a.uom_id AND a.source_system_id = su.source_system_id
 		LEFT JOIN source_price_curve_def spcd_proxy ON spcd_proxy.curve_id = a.proxy_source_curve_def_id
		LEFT JOIN source_price_curve_def settlement_curve ON settlement_curve.curve_id = a.settlement_curve_id
		LEFT JOIN source_price_curve_def proxy_curve_id ON proxy_curve_id.curve_id = a.proxy_curve_id -- Reporting Curves in UI
		LEFT JOIN source_price_curve_def proxy_curve_id3 ON proxy_curve_id3.curve_id = a.proxy_curve_id3
 		LEFT JOIN source_commodity sc_commodity ON sc_commodity.commodity_id = a.commodity_id AND a.source_system_id = sc_commodity.source_system_id
 		LEFT JOIN formula_editor fe ON fe.formula_id = a.formula_id
 		LEFT JOIN static_data_value sdv_ext ON sdv_ext.code = a.exp_calendar_id AND sdv_ext.type_id = 10017
		LEFT JOIN static_data_value sdv_holiday_calendar_id ON sdv_holiday_calendar_id.code = a.holiday_calendar_id AND sdv_holiday_calendar_id.type_id = 10017
 		LEFT JOIN source_price_curve_def spcd_risk ON spcd_risk.curve_id =  a.risk_bucket_id
 		LEFT JOIN static_data_value sdv_block ON sdv_block.value_id = a.block_type AND sdv_block.type_id = 12000
 		LEFT JOIN source_price_curve_def spcd_index ON spcd_index.curve_id =a.monthly_index --Proxy Curve 2 in UI
 		LEFT JOIN static_data_value ssdf_define ON ssdf_define.code = a.block_define_id AND ssdf_define.type_id = 10018
 		LEFT JOIN monte_carlo_model_parameter mcmp ON mcmp.monte_carlo_model_parameter_id = a.monte_carlo_model_parameter_id
 		LEFT JOIN #tmp_data_rb rb ON  rb.curve_id = a.curve_id 
 		LEFT JOIN source_price_curve_def rb_def ON rb_def.curve_id = rb.curve_id
		LEFT JOIN static_data_value sdv_tou ON sdv_tou.code = a.udf_block_group_id AND sdv_tou.type_id = 15001
		LEFT JOIN static_data_value sdv_ig ON sdv_ig.code = a.index_group AND sdv_ig.type_id = 15100
		LEFT JOIN source_price_curve_def spcd_lm ON spcd_lm.curve_id =  a.liquidation_multiplier              
		OUTER APPLY (
			SELECT temp_id
			FROM #error_status es
			INNER JOIN message_log_template mlt ON mlt.message_number = es.error_number
			WHERE a.temp_id = es.temp_id AND mlt.message_status = ''ERROR''
		) es
		LEFT JOIN time_zones tz ON tz.TIMEZONE_NAME = a.time_zone
		LEFT JOIN source_minor_location sml 
			ON sml.location_id = a.location_id
		WHERE es.temp_id IS NULL '
 	--PRINT(@sql)
 	
	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE 
	BEGIN
		EXEC(@sql)
	END

 	SET @sql =  CAST('' AS NVARCHAR(MAX)) + N'
		INSERT INTO source_price_curve_def (
			source_system_id,curve_id, curve_name, curve_des, commodity_id, market_value_id, market_value_desc, source_currency_id,
			source_currency_to_id, source_curve_type_value_id, uom_id, proxy_source_curve_def_id, formula_id, obligation, sort_order,
			fv_level, Granularity, exp_calendar_id, risk_bucket_id, reference_curve_id, monthly_index, program_scope_value_id,
			curve_definition, block_type, block_define_id, index_group, display_uom_id, proxy_curve_id, hourly_volume_allocation,
			settlement_curve_id, time_zone, udf_block_group_id, is_active, ratio_option, curve_tou, proxy_curve_id3, asofdate_current_month,
			monte_carlo_model_parameter_id, contract_id,holiday_calendar_id, liquidation_multiplier, effective_date, location_id)
		OUTPUT INSERTED.source_curve_def_id INTO #inserted_price_curve_def(source_curve_def_id)
		SELECT DISTINCT ssd.source_system_id,
 			a.curve_id,
 			a.curve_name,
 			a.curve_des,
 			sc_commodity.source_commodity_id,
 			a.market_value_id,
 			sdv_market.value_id,
 			sc.source_currency_id,
 			CASE WHEN sdv.value_id = 576 THEN sc_to.source_currency_id ELSE NULL END,
 			sdv.value_id, 
 			su.source_uom_id,
 			spcd_proxy.source_curve_def_id,
 			fe.formula_id,
 			LEFT(a.obligation, 1),
 			a.sort_order,
 			a.fv_level,
 			sdv_gra.value_id,
 			sdv_ext.value_id,
 			spcd_risk.source_curve_def_id,
 			a.reference_curve_id,
 			spcd_index.source_curve_def_id,
 			a.program_scope_value_id,
 			a.curve_definition,
 			sdv_block.value_id,
 			ssdf_define.value_id,
 			sdv_ig.value_id,
 			suom.source_uom_id,
 			proxy_curve_id.source_curve_def_id,
 			sdv_hva.value_id,
 			settlement_curve.source_curve_def_id,
 			tz.TIMEZONE_ID,
 			sdv_tou.value_id,
 			''y'',
 			a.ratio_option,
 			sdv_timeou.value_id,
 			proxy_curve_id3.source_curve_def_id,
 			a.asofdate_current_month,
 			mcmp.monte_carlo_model_parameter_id,
 			a.contract_id,
			sdv_holiday_calendar_id.value_id,
			spcd_lm.source_curve_def_id,
			LEFT(a.effective_date, 1), 
			sml.source_minor_location_id
		'
		
	SET @sql += 'FROM ' + @import_temp_table_name+' a
		LEFT JOIN static_data_value sdv_market ON sdv_market.code = a.market_value_desc AND sdv_market.type_id = 29700
		INNER JOIN source_system_description ssd ON ssd.source_system_id = a.source_system_id
		LEFT JOIN source_price_curve_def b ON b.curve_id = a.curve_id
 			AND b.source_system_id = a.source_system_id
		LEFT JOIN static_data_value sdv_gra ON sdv_gra.code = a.Granularity AND sdv_gra.TYPE_ID = 978
		LEFT JOIN static_data_value sdv_timeou ON sdv_timeou.code = a.curve_tou AND sdv_timeou.type_id = 18900
		LEFT JOIN source_uom suom ON suom.uom_name = a.display_uom_id
		LEFT JOIN static_data_value sdv_hva ON sdv_hva.code = a.hourly_volume_allocation AND sdv_hva.type_id = 17600
		LEFT JOIN static_data_value sdv ON sdv.code = a.source_curve_type_value_id AND sdv.type_id = 575
		LEFT JOIN source_currency sc ON sc.currency_id = a.source_currency_id AND a.source_system_id = sc.source_system_id
		LEFT JOIN source_currency sc_to ON sc_to.currency_id = a.source_currency_to_id AND a.source_system_id = sc_to.source_system_id
		LEFT JOIN source_uom su ON su.uom_id = a.uom_id AND a.source_system_id = su.source_system_id
		LEFT JOIN source_price_curve_def spcd_proxy ON spcd_proxy.curve_id = a.proxy_source_curve_def_id
		LEFT JOIN source_price_curve_def settlement_curve ON settlement_curve.curve_id = a.settlement_curve_id
		LEFT JOIN source_price_curve_def proxy_curve_id ON proxy_curve_id.curve_id = a.proxy_curve_id
		LEFT JOIN source_price_curve_def proxy_curve_id3 ON proxy_curve_id3.curve_id = a.proxy_curve_id3
		LEFT JOIN source_commodity sc_commodity ON sc_commodity.commodity_id = a.commodity_id AND a.source_system_id = sc_commodity.source_system_id
		LEFT JOIN formula_editor fe ON fe.formula_id = a.formula_id
		LEFT JOIN static_data_value sdv_ext ON sdv_ext.code = a.exp_calendar_id AND sdv_ext.TYPE_ID = 10017
		LEFT JOIN static_data_value sdv_holiday_calendar_id ON sdv_holiday_calendar_id.code = a.holiday_calendar_id AND sdv_holiday_calendar_id.TYPE_ID = 10017
		LEFT JOIN source_price_curve_def spcd_risk ON spcd_risk.curve_id =  a.risk_bucket_id
		LEFT JOIN static_data_value sdv_block ON sdv_block.value_id = a.block_type AND sdv_block.type_id = 12000
		LEFT JOIN source_price_curve_def spcd_index ON spcd_index.curve_id =a.monthly_index
		LEFT JOIN static_data_value ssdf_define ON ssdf_define.code = a.block_define_id AND ssdf_define.type_id = 10018
		LEFT JOIN static_data_value sdv_g1 ON sdv_g1.value_id = a.block_define_id AND sdv_g1.type_id = 10018
		LEFT JOIN source_price_curve_def  spcd ON spcd.curve_id = a.source_curve_def_id
		LEFT JOIN monte_carlo_model_parameter mcmp ON mcmp.monte_carlo_model_parameter_id = a.monte_carlo_model_parameter_id
		LEFT JOIN #tmp_data_rb rb ON  rb.curve_id = a.curve_id 
		LEFT JOIN source_price_curve_def rb_def ON rb_def.curve_id = rb.curve_id
		LEFT JOIN static_data_value sdv_tou ON sdv_tou.code = a.udf_block_group_id AND sdv_tou.type_id = 15001
		LEFT JOIN static_data_value sdv_ig ON sdv_ig.code = a.index_group AND sdv_ig.type_id = 15100
		LEFT JOIN source_price_curve_def spcd_lm ON spcd_lm.curve_id =  a.liquidation_multiplier
 		OUTER APPLY (
			SELECT temp_id 
			FROM #error_status es
			INNER JOIN message_log_template mlt ON mlt.message_number = es.error_number
			WHERE a.temp_id = es.temp_id AND mlt.message_status = ''ERROR''
		) es
		LEFT JOIN time_zones tz ON tz.TIMEZONE_NAME = a.time_zone
		LEFT JOIN source_minor_location sml 
			ON sml.location_id = a.location_id
		WHERE es.temp_id IS NULL AND b.source_curve_def_id IS NULL '
 	--PRINT(@sql)

 	EXEC(@sql)

	--insert into rtc_price start from here
	IF OBJECT_ID('tempdb..#temp_rtc_prices') IS NOT NULL
	DROP TABLE #temp_rtc_prices

	CREATE TABLE #temp_rtc_prices (
		source_curve_def_id INT, 
		rtc_curve_1 INT,
		rtc_curve_2 INT,
		rtc_curve_3 INT,
		rtc_curve_4 INT,
		import_file_name NVARCHAR(1000) COLLATE DATABASE_DEFAULT
	)

	EXEC('INSERT INTO #temp_rtc_prices
		  SELECT spcd.source_curve_def_id, 
			     spcd1.source_curve_def_id rtc_curve_1,
			     spcd2.source_curve_def_id rtc_curve_2,
			     spcd3.source_curve_def_id rtc_curve_3,
			     spcd4.source_curve_def_id rtc_curve_4,
				 a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN source_price_curve_def spcd ON spcd.curve_id = a.curve_id
		  LEFT JOIN source_price_curve_def spcd1 ON spcd1.curve_id = a.rtc_curve_1
		  LEFT JOIN source_price_curve_def spcd2 ON spcd2.curve_id = a.rtc_curve_2
		  LEFT JOIN source_price_curve_def spcd3 ON spcd3.curve_id = a.rtc_curve_3
		  LEFT JOIN source_price_curve_def spcd4 ON spcd4.curve_id = a.rtc_curve_4
	')

	IF OBJECT_ID('tempdb..#temp_rtc_prices_final') IS NOT NULL
		DROP TABLE #temp_rtc_prices_final

	SELECT curve_id  [source_curve_def_id] 
		 , rtc_price [rtc_price_curve],
		 import_file_name
	INTO #temp_rtc_prices_final
	FROM ( SELECT source_curve_def_id curve_id , 
				rtc_curve_1, 
				rtc_curve_2, 
				rtc_curve_3, 
				rtc_curve_4,
				import_file_name
		 FROM #temp_rtc_prices
	) p  
	UNPIVOT  
	   (rtc_price FOR source_curve_def_id IN   
		  ( rtc_curve_1, 
			rtc_curve_2, 
			rtc_curve_3, 
			rtc_curve_4
			)  
		)AS unpvt;

	--Data repetition RTC Curve 1,2,3,4
 	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 	      SELECT a.source_curve_def_id,
				 NULL,
				 ''Duplicate data '' + MAX(spcd.curve_id) + '' in column RTC Curve on Curve ID '' + MAX(spcda.curve_id) + '''',
 	             a.import_file_name,
				 ''Warning'',
				 ''Invalid Data'',
				 ''Please correct data and re-import.''
 	      FROM #temp_rtc_prices_final a
		  LEFT JOIN #error_status ON a.source_curve_def_id = #error_status.temp_id
		  INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = a.rtc_price_curve
		  INNER JOIN source_price_curve_def spcda ON spcda.source_curve_def_id = a.source_curve_def_id
		  WHERE a.rtc_price_curve IS NOT NULL AND #error_status.temp_id IS NULL
		  GROUP BY a.source_curve_def_id, a.import_file_name, a.rtc_price_curve
		  HAVING COUNT(1) > 1 '
	)

	-- Added logic to delete Warning here because, for RTC the message should be displayed as warning and warning rows can be deleted.
	EXEC('
		DELETE #temp_rtc_prices_final
		--SELECT *
 		FROM #error_status es
 		INNER JOIN #temp_rtc_prices_final a ON  es.temp_id = a.source_curve_def_id
		LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number
		WHERE ISNULL(mlt.message_status, es.message_status) = ''Warning''
	')

	DECLARE @rtc NVARCHAR(1000), @rtc_spcd NVARCHAR(20)

	DECLARE cur_rtc CURSOR FOR
	SELECT DISTINCT STUFF(
			(
				SELECT ',' + CAST(a.rtc_price_curve AS NVARCHAR(20))
				FROM #temp_rtc_prices_final a
				WHERE a.source_curve_def_id = spcd.source_curve_def_id
				FOR XML PATH ('')
			), 1, 1, ''
		) [rtc], source_curve_def_id
	FROM #temp_rtc_prices_final spcd

	OPEN cur_rtc

	FETCH NEXT FROM cur_rtc INTO @rtc, @rtc_spcd
	WHILE @@FETCH_STATUS = 0
	BEGIN
		DECLARE @is_valid INT = 1
		EXEC spa_rtc_price_curve @flag = 'c', @curve_ids = @rtc, @return_status = @is_valid OUTPUT
		--SELECT @is_valid 

		IF @is_valid = 0
		BEGIN
			EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name,  message_status, message_type, recommendation)
 				  SELECT a.source_curve_def_id,
						 NULL,
						 ''The Hours mapped in RTC Price Curve does not match RTC Hours (7 X 24) for Curve '' + MAX(spcd.curve_id) + '' '',
 						 a.import_file_name,
						 ''Warning'',
						 ''Invalid Data'',
						 ''Please correct data and re-import.''
 				  FROM #temp_rtc_prices_final a
				  INNER JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = a.source_curve_def_id
				  WHERE spcd.source_curve_def_id IN ('+@rtc_spcd+')
				  GROUP BY a.source_curve_def_id, a.import_file_name, spcd.source_curve_def_id
				  --HAVING COUNT(1) > 1 
				  '
			)

			-- Added logic to delete Warning here because, for RTC the message should be displayed as warning and warning rows can be deleted.
			EXEC('
				DELETE #temp_rtc_prices_final
				--SELECT *
 				FROM #error_status es
 				INNER JOIN #temp_rtc_prices_final a ON es.temp_id = a.source_curve_def_id
				LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number
				WHERE ISNULL(mlt.message_status, es.message_status) = ''Warning''
			')
		END
		FETCH NEXT FROM cur_rtc INTO @rtc, @rtc_spcd
	END
	CLOSE cur_rtc
	DEALLOCATE cur_rtc
	
	INSERT INTO rtc_source_price_curve(rtc_curve_def_id, rtc_curve)
	SELECT tmp.source_curve_def_id, tmp.rtc_price_curve 
	FROM #temp_rtc_prices_final tmp
	LEFT JOIN rtc_source_price_curve rspc 
		ON rspc.rtc_curve_def_id = tmp.source_curve_def_id 
		AND rspc.rtc_curve = tmp.rtc_price_curve
	WHERE rspc.rtc_curve_id IS NULL

	DECLARE @source_curve_def_ids NVARCHAR(100) --to pass effective source_curve_def_id for position calculation

	SELECT TOP 1 @source_curve_def_ids = STUFF((SELECT ', ' + CAST(source_curve_def_id AS NVARCHAR(20))
					   FROM #inserted_price_curve_def b 					   
					   GROUP BY source_curve_def_id
					   FOR XML PATH('')), 1, 2, '')	 
	FROM #inserted_price_curve_def a
	GROUP BY source_curve_def_id
	
	--TO DO: reverted as to break dependency. Need to be continued
	--EXEC spa_get_break_deal @flag = 'hourly block', @curve_id = @source_curve_def_ids
END
 
IF @table_name = 'ixp_source_counterparty_template'
BEGIN
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''parent_counterparty_id'', ''b.counterparty_id = a.parent_counterparty_id'', ''w''),
			(''static_data_value'', ''type_of_entity'', ''b.code = a.type_of_entity AND b.type_id = 10020'', ''w''),
			(''static_data_value'', ''delivery_method'', ''b.code = a.delivery_method AND b.type_id = 21300'', ''w''),
			(''static_data_value'', ''counterparty_status'', ''b.code = a.counterparty_status AND b.type_id = 101500'', ''w'')
	')
	
	EXEC sp_validate_data_type @process_id, null, @import_temp_table_name, @table_name, @rules_id, 'a' 
		    
    -- validation for non existent static data validation of int_ext_flag
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10002,
		  ''
		  {
		  "column_name": "'' + scm.source_column_name + ''",
		  "column_value": "'' + a.int_ext_flag + ''"
		  }
		  '',		  
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		    CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''int_ext_flag''
          ) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id 						  		 
 		  WHERE #error_status.temp_id IS NULL
		  AND a.int_ext_flag NOT IN (''Broker'', ''Clearing'', ''External'', ''Internal'', ''b'',''c'',''e'',''i'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,
		  ''
		  {
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.is_active + ''" 
		  }
		  '',		  
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		   CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''is_active''
          ) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id 						  		 
 		  WHERE #error_status.temp_id IS NULL
		  AND a.is_active NOT IN (''Yes'', ''No'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT DISTINCT a.temp_id,
		  10013,
		  ''
		  {
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.analyst + ''" 
		  }
		  '',		  
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		   CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''analyst'' 
          ) scm
		  LEFT JOIN application_users au
			ON dbo.FNAGetUserName(user_login_id) = a.analyst
		  WHERE au.user_login_id IS NULL AND a.analyst IS NOT NULL
	')

 		EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a ON  es.temp_id = a.temp_id  
        LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
    ')
	
	/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'source_counterparty'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)
	
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE b
 	            SET source_system_id = a.source_system_id,
 	                counterparty_name = a.counterparty_name,
 	                counterparty_desc = a.counterparty_desc,
 	                int_ext_flag = CASE WHEN a.int_ext_flag = ''Broker'' THEN ''b''
											  WHEN a.int_ext_flag = ''Clearing'' THEN ''c''
											  WHEN a.int_ext_flag = ''External'' THEN ''e''
											  WHEN a.int_ext_flag = ''Internal'' THEN ''i'' 
											  ELSE a.int_ext_flag END,
 	                netting_parent_counterparty_id = netting.source_counterparty_id,
 	                address = a.address,
 	                phone_no = a.phone_no,
 	                mailing_address = a.mailing_address,
 	                fax = a.fax,
 	                counterparty_contact_name = a.counterparty_contact_name,
 	                is_active = CASE WHEN a.is_active = ''N'' THEN ''n'' 
									 WHEN a.is_active = ''No'' THEN ''n''
									 ELSE ''y''
								END, 
 	                zip = a.zip,
					analyst = au.user_login_id,
 	                city = a.city,
 	                type_of_entity = toe.value_id,
 	                counterparty_contact_notes = a.counterparty_contact_notes,
 	                confirm_from_text = a.confirm_from_text,
 	                confirm_to_text = a.confirm_to_text,
 	                confirm_instruction = a.confirm_instruction,
 	                counterparty_contact_title = a.counterparty_contact_title,
 	                parent_counterparty_id = parent_cpty.source_counterparty_id,
 	                customer_duns_number = a.customer_duns_number,
 	                is_jurisdiction = a.is_jurisdiction,
 	                counterparty_contact_id = a.counterparty_contact_id,
 	                email = a.email,
 	                state = state.value_id,
 	                tax_id = a.tax_id,
 	                delivery_method = dm.value_id,
 	                country = country.value_id,
					counterparty_status = status.value_id,
 	                region = region.value_id
 	            FROM source_counterparty b
                INNER JOIN source_system_description c ON  b.source_system_id = c.source_system_id
                INNER JOIN ' + @import_temp_table_name + ' a
                    ON  b.counterparty_id = a.counterparty_id
                    AND b.source_system_id = a.source_system_id
                LEFT JOIN static_data_value toe ON  toe.code = a.type_of_entity AND toe.type_id = 10020
                LEFT JOIN static_data_value dm ON  dm.code = a.delivery_method AND dm.type_id = 21300
                LEFT JOIN static_data_value country ON  country.code = a.country AND country.type_id = 14000
                LEFT JOIN static_data_value region ON  region.code = a.region AND region.type_id = 11150
                LEFT JOIN static_data_value state ON  state.code = a.state AND state.type_id = 10016
                LEFT JOIN source_counterparty parent_cpty ON parent_cpty.counterparty_id = a.parent_counterparty_id
                LEFT JOIN source_counterparty netting ON netting.counterparty_id = a.netting_parent_counterparty_id
				LEFT JOIN static_data_value status ON status.code = a.counterparty_status AND status.type_id = 101500 
				LEFT JOIN application_users au ON dbo.FNAGetUserName(au.user_login_id) = a.analyst
                OUTER APPLY (
						SELECT temp_id 
						FROM #error_status es
						INNER JOIN message_log_template mlt 
							ON mlt.message_number = es.error_number
						WHERE a.temp_id = es.temp_id
							AND mlt.message_status = ''ERROR''
				) es
 				WHERE es.temp_id IS NULL'
 	
 	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
		EXEC(@sql)
	END

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_counterparty (source_system_id, counterparty_id, counterparty_name, counterparty_desc, int_ext_flag, netting_parent_counterparty_id, [address], phone_no, mailing_address, fax, type_of_entity, counterparty_contact_notes, confirm_from_text, confirm_to_text, confirm_instruction, counterparty_contact_title, counterparty_contact_name, parent_counterparty_id, customer_duns_number, is_jurisdiction, counterparty_contact_id, email, city, [state], zip, is_active, tax_id, delivery_method, country, region,analyst,counterparty_status)
 	             SELECT DISTINCT 
 						c.source_system_id,
 						a.counterparty_id,
 						a.counterparty_name,
 						a.counterparty_desc,
 						CASE WHEN a.int_ext_flag = ''Broker'' THEN ''b''
							 WHEN a.int_ext_flag = ''Clearing'' THEN ''c''
							 WHEN a.int_ext_flag = ''External'' THEN ''e''
							 WHEN a.int_ext_flag = ''Internal'' THEN ''i'' 
							 ELSE a.int_ext_flag END,
 						netting.source_counterparty_id,
 						a.[address],
 						a.phone_no,
 						a.mailing_address,
 						a.fax,
 						toe.value_id,
 						a.counterparty_contact_notes,
 						a.confirm_from_text,
 						a.confirm_to_text,
 						a.confirm_instruction,
 						a.counterparty_contact_title,
 						a.counterparty_contact_name,
 						parent_cpty.source_counterparty_id,
 						a.customer_duns_number,
 						a.is_jurisdiction,
 						a.counterparty_contact_id,
 						a.email,
 						a.city,
 						state.value_id,
 						a.zip,
 						CASE WHEN a.is_active = ''N'' THEN ''n'' 
							 WHEN a.is_active = ''No'' THEN ''n'' 
							 ELSE ''y''
						END, 
 						a.tax_id,
 						dm.value_id,
 						country.value_id,
 						region.value_id,
						au.user_login_id,
						status.value_id
 				FROM ' + @import_temp_table_name + ' a
 	            LEFT JOIN source_counterparty b
                     ON  b.counterparty_id = a.counterparty_id
                     AND b.source_system_id = a.source_system_id 
 	            INNER JOIN source_system_description c ON  a.source_system_id = c.source_system_id
 	            LEFT JOIN static_data_value toe ON  toe.code = a.type_of_entity AND toe.type_id = 10020
                LEFT JOIN static_data_value dm ON  dm.code = a.delivery_method AND dm.type_id = 21300
                LEFT JOIN static_data_value country ON  country.code = a.country AND country.type_id = 14000
                LEFT JOIN static_data_value region ON  region.code = a.region AND region.type_id = 11150
                LEFT JOIN static_data_value state ON  state.code = a.state AND state.type_id = 10016
                LEFT JOIN source_counterparty parent_cpty ON parent_cpty.counterparty_id = a.parent_counterparty_id
                LEFT JOIN source_counterparty netting ON netting.counterparty_id = a.netting_parent_counterparty_id
 	            LEFT JOIN static_data_value status ON status.code = a.counterparty_status AND status.type_id = 101500
				LEFT JOIN application_users au ON dbo.FNAGetUserName(au.user_login_id) = a.analyst
				OUTER APPLY (
					SELECT temp_id 
					FROM #error_status es
					INNER JOIN message_log_template mlt 
						ON mlt.message_number = es.error_number
					WHERE a.temp_id = es.temp_id
						AND mlt.message_status = ''ERROR''
				) es				 
				WHERE  es.temp_id IS NULL 
					 AND b.counterparty_id IS NULL'
 	--PRINT(@sql)
 	EXEC(@sql)
	SET @sql = 'INSERT INTO counterparty_credit_info (Counterparty_id)
				SELECT 
				sc.source_counterparty_id 
				FROM source_counterparty sc
				WHERE NOT EXISTS (SELECT counterparty_id FROM counterparty_credit_info WHERE counterparty_id = sc.source_counterparty_id)'
	EXEC(@sql)
END
 
IF @table_name = 'ixp_source_uom_template'
BEGIN
 	EXEC ('DELETE ' + @field_compare_table)
 	
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_uom'',''uom_id'',''uom_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_uom'',''uom_name'',''uom_name'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_uom'',''uom_desc'',''uom_desc'')')
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  source_system_id IS NULL
 	             AND uom_id IS NULL
 	             AND uom_name IS NULL
 	             AND uom_desc IS NULL')
 
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for uom_id :'' + ISNULL(a.uom_id, ''NULL'') 
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT uom_id, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
               GROUP BY uom_id
               HAVING COUNT(*) > 1
            ) b
            ON  a.uom_id = b.uom_id')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for uom_id :'' + ISNULL(a.uom_id, ''NULL'')
 	             + '', source_system_id:'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 	             + '', uom_id :'' + ISNULL(a.uom_id, ''NULL'') + ''.( Data FORMAT FOR source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 	             + '' OR uom_id '' + ISNULL(a.uom_id, ''NULL'') + '' IS invalid)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE  ISNUMERIC(a.source_system_id) = 0 OR  a.uom_id IS NULL')
 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for uom_id :'' + ISNULL(a.uom_id, ''NULL'')
 	             + '', source_system_id:'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 	             + '', uom_id :'' + ISNULL(a.uom_id, ''NULL'') + ''. (FOREIGN KEY source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'')+ '' NOT found)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
           LEFT JOIN source_system_description b ON  b.source_system_id = a.source_system_id
 	      WHERE  #import_status.temp_id IS NULL AND b.source_system_id IS NULL')
 	
 	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN '+@import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
 
 	SET @sql = 'UPDATE source_uom
 	            SET source_system_id = ISNULL(d.source_system_id, source_uom.source_system_id),
 					uom_id = ISNULL(b.uom_id, source_uom.uom_id),
 					uom_name = ISNULL(b.uom_name, source_uom.uom_name),
 					uom_desc = ISNULL(b.uom_desc, source_uom.uom_desc)
 	            FROM   source_uom
                 INNER JOIN '+@import_temp_table_name+' b
                     ON  source_uom.uom_id = b.uom_id
                     AND source_uom.source_system_id = b.source_system_id
                 INNER JOIN source_system_description d ON  b.source_system_id = d.source_system_id
                 LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL '
 	exec spa_print @sql
 	EXEC(@sql)
 	SET @sql = 'INSERT INTO source_uom (source_system_id, uom_id, uom_name, uom_desc)
 	            SELECT d.source_system_id,
 	                   a.uom_id,
 	                   a.uom_name,
 	                   a.uom_desc
 	            FROM   '+@import_temp_table_name+' a
                 LEFT JOIN source_system_description d ON  a.source_system_id = d.source_system_id
                 LEFT JOIN source_uom g
                     ON  g.uom_id = a.uom_id
                     AND g.source_system_id = a.source_system_id
                 LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL AND g.uom_id IS NULL'
 	exec spa_print @sql
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_index_fees_breakdown_settlement_template'
BEGIN
 	EXEC ('DELETE ' + @field_compare_table)
 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''index_fees_breakdown_settlement'',''as_of_date'',''as_of_date'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''index_fees_breakdown_settlement'',''uom_name'',''uom_name'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''index_fees_breakdown_settlement'',''term_end'',''term_end'')')
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  source_deal_header_id        IS NULL
 				 AND field_name        IS NULL
 				 AND as_of_date      IS NULL
 				 AND term_start      IS NULL
 				 AND term_end        IS NULL
 				 AND volume          IS NULL
 				 AND price           IS NULL
 				 AND value     IS NULL
 				 AND fee_currency_id     IS NULL')
 	--PRINT('1')
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	--PRINT('2')
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_header_id :'' + ISNULL(a.source_deal_header_id, ''NULL'') 
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT source_deal_header_id, term_start, term_end, as_of_date, field_name, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
               GROUP BY source_deal_header_id, term_start, term_end, as_of_date, field_name
               HAVING COUNT(*) > 1
            ) b
            ON  a.source_deal_header_id = b.source_deal_header_id AND a.term_start = b.term_start AND a.term_end = b.term_end AND a.as_of_date = b.as_of_date AND a.field_name = b.field_name')
 	
 	--PRINT('3')
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_header_id :'' + ISNULL(a.source_deal_header_id, ''NULL'') 
 	             + ''.( Data FORMAT FOR source_deal_header_id '' + ISNULL(a.source_deal_header_id, ''NULL'')
 	             + '' OR internal_type '' + ISNULL(a.internal_type, ''NULL'') + '' IS invalid)''
 	             + '' OR as_of_date '' + ISNULL(a.as_of_date, ''NULL'') + '' IS invalid)''
 	             + '' OR term_start '' + ISNULL(a.term_start, ''NULL'') + '' IS invalid)''
 	             + '' OR volume '' + ISNULL(a.volume, ''NULL'')
 	             + '' OR price '' + ISNULL(a.price, ''NULL'')
 	             + '' OR total_price '' + ISNULL(a.total_price, ''NULL'')
 	             + '' OR fee_currency_id '' + ISNULL(a.fee_currency_id, ''NULL'') + '' IS invalid)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE  source_deal_header_id        IS NULL
 				 OR field_name        IS NULL
 				 OR as_of_date      IS NULL
 				 OR term_start      IS NULL
 				 OR term_end        IS NULL
 				 OR volume          IS NULL
 				 OR price           IS NULL
 				 OR value     IS NULL
 				 OR fee_currency_id     IS NULL')
 	--PRINT('4')			 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for deal :'' + ISNULL(a.source_deal_header_id, ''NULL'') 
 	             + ''.( Deal '' + ISNULL(a.source_deal_header_id, ''NULL'') + '' is not present is system.)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN source_deal_header sdh ON a.source_deal_header_id = sdh.deal_id
 	      WHERE sdh.source_deal_header_id IS NULL
 				 ')
 	--PRINT('5')
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
 	--PRINT('6')
 	
 	IF OBJECT_ID('tempdb..#data_check') IS NOT NULL
 	BEGIN
 		DROP TABLE #data_check
 	END
 	CREATE TABLE #data_check(source_deal_header_id INT)
 	SET @sql = 'INSERT INTO #data_check(source_deal_header_id) 
 				SELECT  sdb.[source_deal_header_id] FROM ' + @import_temp_table_name + ' s
 				INNER JOIN source_deal_header sdh ON sdh.deal_id = s.source_deal_header_id
 				INNER JOIN index_fees_breakdown_settlement sdb ON sdb.source_deal_header_id =  sdh.source_deal_header_id'
 	EXEC(@sql)
 	--PRINT('6')	
 	IF EXISTS(SELECT  1 FROM #data_check)
 	BEGIN
 		DELETE sdb
 		FROM   index_fees_breakdown_settlement sdb
 		INNER JOIN  #data_check dc ON sdb.source_deal_header_id = dc.source_deal_header_id
 	END
 		
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO index_fees_breakdown_settlement ([source_deal_header_id], leg, as_of_date, term_start, term_end, field_id, field_name, volume, VALUE, price, fee_currency_id, set_type, total_price, contract_value, internal_type, sequence, currency_id, contract_mkt_flag)
 	            SELECT sdh.source_deal_header_id,
 	                   1,
 	                   s.as_of_date,
 	                   s.term_start,
 	                   s.term_end,
 	                   field_type.value_id,
 	                   udft.field_label,
 	                   s.volume,
 	                   s.VALUE,
 	                   s.price,
 	                   sc_fees.source_currency_id,
 	                   ''s'',
 	                   total_price,
 					   contract_value,
 					   sdv.value_id,
 					   s.sequence,
 					   sc.source_currency_id,
 					   s.contract_mkt_flag
 	            FROM  ' + @import_temp_table_name + ' s
                 INNER JOIN source_deal_header sdh ON  sdh.deal_id = s.source_deal_header_id
                 INNER JOIN source_currency sc_fees ON  sc_fees.currency_id = s.fee_currency_id
                 LEFT JOIN source_currency sc ON  sc.currency_id = s.currency_id
                 LEFT JOIN static_data_value sdv ON sdv.code=  s.internal_type
                 LEFT JOIN static_data_value field_type ON field_type.code  = s.field_name and field_type.type_id = 5500
                 LEFT JOIN user_defined_fields_template udft ON udft.field_name = field_type.value_id
                 LEFT JOIN #import_status ON  s.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL
 	
 				'
 	            
 	--PRINT (@sql)
 	EXEC(@sql)
 	--PRINT('7')
END
 
IF @table_name = 'ixp_source_deal_settlement_template'
BEGIN	
 	EXEC ('DELETE ' + @field_compare_table)
 	
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''source_deal_header_id'',''source_deal_header_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''as_of_date'',''as_of_date'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''term_start'',''term_start'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''term_end'',''term_end'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''settlement_date'',''settlement_date'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_settlement'',''payment_date'',''payment_date'')')
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE source_deal_header_id       IS NULL
 				AND term_start           IS NULL
 				AND term_end             IS NULL
 				AND leg                  IS NULL
 				AND as_of_date           IS NULL
 				AND payment_date         IS NULL
 				AND settlement_amount    IS NULL
 				AND volume				IS NULL
 				AND settlement_currency_id  IS NULL
 				AND net_price            IS NULL
 				AND float_price          IS NULL
 				AND deal_price           IS NULL
 				AND price_currency       IS NULL')
 	--PRINT('1')
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	        
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	
 	--PRINT('2')
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_header_id :'' + ISNULL(a.source_deal_header_id, ''NULL'') 
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'',a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT source_deal_header_id, term_start, term_end, as_of_date, leg, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
               GROUP BY source_deal_header_id, term_start, term_end, as_of_date, leg
               HAVING COUNT(*) > 1
            ) b
            ON  a.source_deal_header_id = b.source_deal_header_id AND a.term_start = b.term_start AND a.term_end = b.term_end AND a.as_of_date = b.as_of_date AND a.leg = b.leg')
 	--PRINT('3')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_header_id :'' + ISNULL(a.source_deal_header_id, ''NULL'')
 	             + ''.( Data FORMAT FOR source_deal_header_id '' + ISNULL(a.source_deal_header_id, ''NULL'')
 	             + '' OR leg '' + ISNULL(a.leg, ''NULL'') + '' IS invalid)''
 	             + '' OR as_of_date '' + ISNULL(a.as_of_date, ''NULL'')
 	             + '' OR term_start '' + ISNULL(a.term_start, ''NULL'')
 	             + '' OR settlement_amount '' + ISNULL(a.settlement_amount, ''NULL'')
 	             + '' OR payment_date '' + ISNULL(a.payment_date, ''NULL'') 
 	             + '' OR settlement_volume '' + ISNULL(a.volume, ''NULL'')
 	             + '' OR net_price '' + ISNULL(a.net_price, ''NULL'')
 	             + '' OR float_price '' + ISNULL(a.float_price, ''NULL'')
 	             + '' OR deal_price '' + ISNULL(a.deal_price, ''NULL'')
 	             + '' OR price_currency '' + ISNULL(a.price_currency, ''NULL'')
 	             + '' OR settlement_currency '' + ISNULL(a.settlement_currency_id, ''NULL'') + '' IS invalid)'',
 	             ''Please CHECK your Data'',
 	             a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      WHERE source_deal_header_id   IS NULL
 				OR term_start           IS NULL
 				OR term_end             IS NULL
 				OR leg                  IS NULL
 				OR as_of_date           IS NULL
 				OR payment_date         IS NULL
 				OR settlement_amount    IS NULL
 				OR volume				IS NULL
 				OR settlement_currency_id  IS NULL
 				OR net_price            IS NULL
 				OR float_price          IS NULL
 				OR deal_price           IS NULL
 				OR price_currency       IS NULL')
 	--PRINT('4')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+@table_name+''',
 	             ''Data Error'',
 	             ''Data error for deal_id :'' + ISNULL(a.source_deal_header_id, ''NULL'') + '' is not present in system.)'',
 	             ''Please CHECK your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.source_deal_header_id
 	      WHERE sdh.source_deal_header_id IS NULL
 	')
 	
 	EXEC('DELETE ' + @import_temp_table_name + '
           FROM #import_status
           INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')  
 	
 	IF OBJECT_ID('tempdb..#data_check_existance') IS NOT NULL
 	BEGIN
 		DROP TABLE #data_check_existance
 	END
 
 	CREATE TABLE #data_check_existance(source_deal_header_id INT)
 
 	SET @sql = 'INSERT INTO #data_check_existance(source_deal_header_id) 	
 				SELECT DISTINCT  sds.[source_deal_header_id]
 				FROM  '+@import_temp_table_name + ' s 
 				INNER JOIN source_deal_header sdh ON  sdh.deal_id = s.source_deal_header_id
 				INNER JOIN source_deal_settlement sds ON sds.source_deal_header_id = sdh.source_deal_header_id'
 	--PRINT(@sql)
 	EXEC(@sql)
 	
 	IF EXISTS(SELECT 1 FROM #data_check_existance)
 	BEGIN
 		DELETE sds 
 		FROM   source_deal_settlement sds
 		INNER JOIN #data_check_existance dce ON dce.source_deal_header_id = sds.source_deal_header_id
 	END
 			
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_deal_settlement (
 					[source_deal_header_id],
 					term_start,
 					term_end,
 					leg,
 					as_of_date ,
 					payment_date,
 					settlement_amount,
 					volume,
 					settlement_currency_id,
 					net_price,
 					float_price,
 					deal_price,
 					price_currency,
 					fin_volume,
 					set_type,
 					settlement_date,
 					volume_uom,
 					fin_volume_uom,
 					market_value,
 					contract_value,
 					allocation_volume
 				  )
 
 				SELECT sdh.source_deal_header_id,
 				       s.term_start,
 				       s.term_end,
 				       ISNULL(s.leg, 1),
 				       s.as_of_date,
 				       s.payment_date,
 				       dbo.FNARemoveTrailingZero(CAST(s.settlement_amount AS FLOAT)),
 				       dbo.FNARemoveTrailingZero(CAST(s.volume AS FLOAT)),
 				       sc.source_currency_id,
 				       CAST(s.net_price AS FLOAT),				     
 				       CAST(s.float_price AS FLOAT),
 				       CAST(s.deal_price AS FLOAT),
 				       sc.source_currency_id,
 				       dbo.FNARemoveTrailingZero(CAST(s.fin_volume AS FLOAT)),
 				       ISNULL(s.set_type, ''s''),
 				       s.settlement_date,
 				       su.uom_id,
 				       fin_volume_uom.uom_id,
 				       CAST(s.market_value AS FLOAT),
 				       CAST(s.contract_value AS FLOAT),
 				       CAST(s.allocation_volume AS FLOAT)
 				FROM   ' + @import_temp_table_name + ' s 
 				INNER JOIN  source_deal_header sdh ON sdh.deal_id = s.source_deal_header_id
 				LEFT JOIN source_currency sc ON  sc.currency_id = s.settlement_currency_id
 				LEFT JOIN source_currency price_cur ON  sc.currency_id = s.price_currency
 				LEFT JOIN source_uom su ON  su.uom_id = s.volume_uom 
 				LEFT JOIN source_uom fin_volume_uom ON  fin_volume_uom.uom_id = s.fin_volume_uom
 				LEFT JOIN #import_status ON  s.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL'
 	--PRINT(@sql)
 	EXEC(@sql)
END	
 
IF @table_name = 'ixp_voided_deals_template'
BEGIN
 	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_header'', ''deal_id'', ''deal_id'')')
 	
 	SET @source_table = @import_temp_table_name
 	EXEC('DELETE 
 	      FROM ' + @import_temp_table_name + '
 	      WHERE  deal_id IS NULL
 	             AND source_system_id IS NULL')
 	             
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
 	        FROM   ' + @import_temp_table_name)
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	
 	-- data repetition error handeling starts 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for deal_id :'' + ISNULL(a.deal_id, ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'', a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT deal_id, COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY deal_id
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.deal_id = b.deal_id')
 	--PRINT('1')		  
     -- data repetition error handeling ends
     -- data format errors handeling starts
     
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for deal_id :'' + ISNULL(a.deal_id, ''NULL'') 
 				 + '', source_system_id:'' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') 
 				 + '', deal_id :'' + ISNULL(a.deal_id, ''NULL'')  
 				 + ''. (FOREIGN KEY source_system_id '' + ISNULL(CAST(a.source_system_id AS NVARCHAR(10)), ''NULL'') + '' NOT found )'',
 				 ''Please CHECK your Data'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 				 LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 				 LEFT JOIN source_system_description b ON  b.source_system_id = a.source_system_id
 		  WHERE  #import_status.temp_id IS NULL
 				 AND b.source_system_id IS NULL')
      -- data format errors handeling ends
 	--PRINT('2')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Mapped Deals'',
 				 ''Deal ID :'' + ISNULL(a.deal_id, ''NULL'') + '' is already mapped to a hedging relationship. '', 
 				 ''Please unmap deals first. '', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 				 INNER JOIN source_deal_header sdh  ON  sdh.deal_id = a.deal_id
 				 INNER JOIN fas_link_detail fld ON sdh.source_deal_header_id = fld.source_deal_header_id')
      -- data format errors handeling ends
 	--PRINT('3')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Transferred/Offset deals'',
 				 ''Deal ID :'' + ISNULL(a.deal_id, ''NULL'') + '' cannot be deleted. '', 
 				 ''Please delete the transferred/offset deal first.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 				 INNER JOIN source_deal_header sdh  ON  sdh.deal_id = a.deal_id
 				 INNER JOIN source_deal_header sdh1 ON  sdh1.close_reference_id = sdh.source_deal_header_id AND sdh1.deal_reference_type_id = CAST(12503 AS NVARCHAR(10))')
 	--PRINT('4')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Locked Deals'',
 				 ''Deal ID :'' + ISNULL(a.deal_id, ''NULL'') 
 				 + '' is locked.'', 
 				 ''Please unlock deal to delete it.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		  INNER JOIN source_deal_header sdh  ON  sdh.deal_id = a.deal_id
 		  WHERE sdh.deal_locked = ''y''')
 	--PRINT('5')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Invoice present for deal.'',
 				 ''Deal ID :'' + ISNULL(a.deal_id, ''NULL'') + '' cannot be deleted. It is used for Invoice.'', 
 				 ''Please verify the deal.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		  INNER JOIN source_deal_header sdh  ON  sdh.deal_id = a.deal_id
 		  INNER JOIN calc_formula_value cfv ON cfv.source_deal_header_id = sdh.source_deal_header_id
 		  CROSS APPLY(SELECT MAX(status) status,MAX(finalized) finalized,MAX(calc_id) calc_id FROM calc_invoice_volume WHERE calc_id = cfv.calc_id) civ_status
 		  WHERE ISNULL(civ_status.finalized,''n'')=''y''')
 	--PRINT('5')
 	
 	EXEC('IF EXISTS (SELECT 1
 		             FROM   '+ @import_temp_table_name + ' a
 		             INNER JOIN source_deal_header sdh ON  sdh.deal_id = a.deal_id
 		             INNER JOIN source_deal_detail sdd ON  sdd.source_deal_header_id = sdh.source_deal_header_id
 		             LEFT  JOIN assignment_audit aa ON  aa.source_deal_header_id_from = sdd.source_deal_detail_id
 		             LEFT  JOIN assignment_audit aa1 ON  aa1.source_deal_header_id = sdd.source_deal_detail_id
 		             WHERE  ((aa.assigned_volume > 0 AND aa.assigned_by <> ''AUTO assigned'')
 		                        OR (aa1.assigned_volume > 0 AND aa1.assigned_by <> ''AUTO assigned''))
 		                    AND (aa.source_deal_header_id IS NOT NULL OR aa1.source_deal_header_id IS NOT NULL)
 		  )
 		  BEGIN
 			DECLARE @source_deal_header_id_from NVARCHAR(MAX),
 					@source_deal_header_id NVARCHAR(MAX)
 			DECLARE @url NVARCHAR(MAX)
 			
 			SELECT @source_deal_header_id_from = COALESCE(@source_deal_header_id_from + '','', '''') + sdh1.source_deal_header_id,
 				   @source_deal_header_id = COALESCE(@source_deal_header_id + '','', '''') + sdh.source_deal_header_id
 			FROM source_deal_header sdh 
 			INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id=sdd.source_deal_header_id
 			INNER JOIN assignment_audit assign ON assign.source_deal_header_id=sdd.source_deal_detail_id
 			INNER JOIN source_deal_detail sdd1 ON assign.source_deal_header_id_from=sdd1.source_deal_detail_id 
 			INNER JOIN source_deal_header sdh1 ON sdh1.source_deal_header_id=sdd1.source_deal_header_id
 			INNER JOIN '+ @import_temp_table_name + ' a ON a.deal_id = sdh.deal_id
 			
 			SET @url = ''<a href="../../dev/spa_html.php?spa=exec spa_create_lifecycle_of_recs '''' + dbo.FNAGetGenericDate(GETDATE(),@user_login_id) + '''',NULL,'' 
 						+ ISNULL(@source_deal_header_id_from,@source_deal_header_id) + ''">Click here...</a>''
 			INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			SELECT a.temp_id,
 			       '''+ @process_id+''',
 			       ''Error'',
 			       ''Import Data'',
 			       '''+ @table_name + ''',
 			       ''Locked Deals'',
 			       ''Deal ID :'' + ISNULL(@source_deal_header_id_from,@source_deal_header_id) 
 			       + '' is already assigned.'', 
 			       ''Please remove all the assign deals first to delete this deal. Please view this report '' + @url + ''.'', a.import_file_name
 			FROM '+ @import_temp_table_name + ' a
 		  END	
 		')
 	
 	--PRINT('6')
 	
 	EXEC('DELETE ' + @import_temp_table_name + '
           FROM #import_status
           INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')     
                            
 	SET @sql = 'DECLARE @delete_source_deal_header_ids NVARCHAR(MAX)
 				SELECT  @delete_source_deal_header_ids = COALESCE(@delete_source_deal_header_ids + '','', '''') + CAST(sdh.source_deal_header_id AS NVARCHAR(30))
 				FROM '+ @import_temp_table_name + ' a 
 				INNER JOIN source_deal_header sdh ON a.deal_id = sdh.deal_id
 				SET @delete_source_deal_header_ids = '''' + @delete_source_deal_header_ids + ''''
 				EXEC spa_sourcedealheader @flag = ''d'', @source_deal_header_id = @delete_source_deal_header_ids, @call_from_import = ''y'''

 	--PRINT(@sql)
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_source_price_curve_template'
BEGIN
	/*** update user date to sql date ***/

	EXEC('UPDATE a
		  SET as_of_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.as_of_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET maturity_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.maturity_date = dd.user_date
	')
	/***END OF date update***/

	EXEC ('DELETE ' + @field_compare_table)

	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''mv90_dst'', ''hour'', ''hour'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''mv90_dst'', ''hour'', ''minute'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'', ''bid_value'', ''bid_value'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'', ''ask_value'', ''ask_value'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'', ''is_dst'', ''is_dst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'', ''curve_value'', ''curve_value'')')
 	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
 	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_price_curve_def'', ''source_curve_def_id'', ''b.curve_id = a.source_curve_def_id'', ''e'') -- error row 
			, (''static_data_value'', ''curve_source_value_id'', ''b.code = a.curve_source_value_id AND b.type_id = 10007'', ''e'') -- error row
	')
 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Validation for Invalid Hour ie for Hourly valid hour is [1-24] and for less than hourly valid hour is [0-24]
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10012,
				 ''{
					"column_name": "'' + scmh.source_column_name + ''",
					"column_value": "'' + a.hour + ''",
					"column_name1": "valid data",
					"column_name2": "your data"
				}'',
			    a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''hour'' -- ixp_columns_name
          ) scmh
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.source_curve_def_id
		  WHERE #error_status.temp_id IS NULL
			AND (
				(
					(
						a.hour > 24 OR a.hour < 0
						)
					AND spcd.granularity IN (987, 989, 994, 995)
					)
				OR (
					(
						a.hour > 24 OR a.hour < 1
						)
					AND spcd.granularity IN (982)
					)
				)
	')
	
	-- Validation for Invalid Minute
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10012,
				 ''{
					"column_name": "'' + scmh.source_column_name + ''",
					"column_value": "'' + a.minute + ''",
					"column_name1": "valid data",
					"column_name2": "your data"
				}'',
			    a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''minute'' -- ixp_columns_name
          ) scmh
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND (a.minute > 60 OR a.minute < 0)
	')

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly curves
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
				 CASE 
					WHEN a.hour IS NULL AND a.minute IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + '', '' + scmm.source_column_name + ''"}''
					WHEN a.hour IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + ''"}''
					WHEN a.minute IS NULL THEN ''{"column_name": "'' + scmm.source_column_name + ''"}''
				 END,
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''hour'' -- ixp_columns_name
          ) scmh
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''minute'' -- ixp_columns_name
          ) scmm
		  LEFT JOIN source_price_curve_def spcd ON spcd.curve_id = a.source_curve_def_id
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND ((a.hour IS NULL AND spcd.granularity IN (994, 987, 989, 995, 982)) OR (a.minute IS NULL AND spcd.granularity IN (994, 987, 989, 995)))
	')

	EXEC('
		DELETE a
 	    FROM #error_status
 		INNER JOIN ' + @import_temp_table_name + ' a ON #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')
	
	--Logic added in before trigger migrated here. starts
	IF OBJECT_ID(N'tempdb..#temp_table_price_curve') IS NOT NULL
		DROP TABLE #temp_table_price_curve

	CREATE TABLE #temp_table_price_curve (
		source_curve_def_id NVARCHAR(100)  COLLATE DATABASE_DEFAULT,
		as_of_date NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		curve_source_value_id NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		maturity_date NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		[Hour] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[Minute] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		bid_value NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		ask_value NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		curve_value NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		is_dst NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[import_file_name] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[granularity] NVARCHAR(10) COLLATE DATABASE_DEFAULT
	)

	EXEC('
		INSERT INTO #temp_table_price_curve (source_curve_def_id, as_of_date, curve_source_value_id, maturity_date, [Hour], [Minute], bid_value, ask_value, 
			curve_value, is_dst, [import_file_name])
		SELECT source_curve_def_id, as_of_date, curve_source_value_id, maturity_date, hour, minute, bid_value, ask_value,
			curve_value, is_dst, import_file_name
		FROM ' + @import_temp_table_name)

	UPDATE b
	SET granularity = 
		CASE 
			WHEN spcd.granularity = 994 THEN '10'
			WHEN spcd.granularity = 987 THEN '15'
			WHEN spcd.granularity = 989 THEN '30'
			WHEN spcd.granularity = 995 THEN '5'
			WHEN spcd.granularity = 993 THEN 'Annually'
			WHEN spcd.granularity = 982 THEN 'Hourly'
			WHEN spcd.granularity = 980 THEN 'Monthly'
			WHEN spcd.granularity = 981 THEN 'Daily'
		END
	FROM source_price_curve_def spcd
	INNER JOIN #temp_table_price_curve b ON spcd.curve_id = b.source_curve_def_id
	INNER JOIN static_data_value sdv ON sdv.value_id = spcd.granularity AND sdv.type_id = 978

	UPDATE a
	SET hour = CAST(((hour*60 + minute)- granularity)/60 AS NVARCHAR(10)) + ':' + 
		SUBSTRING('000'+ CAST(((hour*60 + minute) - granularity)%60  AS NVARCHAR(11)), LEN('000'+ CAST(((hour*60 + minute) - granularity)%60  AS NVARCHAR(11)))-1 , 15)
	FROM #temp_table_price_curve a
	WHERE granularity IN ('5','10','15', '30')

	UPDATE #temp_table_price_curve
		SET hour = NULL, minute = NULL
	WHERE hour = '' AND minute = ''

	UPDATE #temp_table_price_curve
		SET hour = hour - 1
	WHERE hour IS NOT NULL
		AND granularity NOT IN ('5','10','15', '30')
	
	EXEC('DELETE FROM ' + @import_temp_table_name)

	EXEC('INSERT INTO ' + @import_temp_table_name + '
		(source_curve_def_id, as_of_date, curve_source_value_id, maturity_date, [Hour], [Minute],
		bid_value, ask_value, curve_value,is_dst, [import_file_name],source_system_id )
		SELECT source_curve_def_id, as_of_date, curve_source_value_id, maturity_date, [Hour], [Minute],
			bid_value, ask_value, curve_value,is_dst, [import_file_name], 2 
		FROM #temp_table_price_curve
	')

	-- trigger ends

	-- Locked as of date validation
 	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
 	             10009,
				 ''{
						"column_name":"'' + scm.source_column_name + ''",
						"column_value": "'' + a.as_of_date + ''"
				  }'',
 	               a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''as_of_date'' -- ixp_columns_name
          ) scm
          INNER JOIN lock_as_of_date b ON a.as_of_date = b.close_date')

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10016,
			  ''{
			  	  "column_name": "'' + scm.source_column_name + ''",
			  	  "column_value": "'' + a.is_dst + ''"
			  }'',
			  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''is_dst'' -- ixp_columns_name
          ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		  WHERE  #error_status.temp_id IS NULL
		  	AND a.is_dst NOT IN (0, 1)
 	')
 	
 	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
		')
		
	--EXEC(' UPDATE ' + @import_temp_table_name + ' SET as_of_date = dbo.FNACovertToSTDDate(as_of_date) WHERE as_of_date IS NOT NULL ')
	EXEC('
		UPDATE ' + @import_temp_table_name + '
		SET maturity_date = CASE WHEN [hour] IS NOT NULL THEN maturity_date + '' '' + [hour] + '':00:00'' ELSE maturity_date END
		WHERE maturity_date IS NOT NULL')

	--#### Build Index on temporary Table
	EXEC('IF NOT EXISTS (
 	             SELECT OBJECT_NAME(OBJECT_ID)
 	             FROM   adiha_process.sys.indexes
 	             WHERE  NAME = ''ix_spc_tmp1' +  ''' AND OBJECT_ID = OBJECT_ID('''+@import_temp_table_name+''')
 	         )
 	      BEGIN
			  CREATE INDEX ix_spc_tmp1' +  ' ON '+@import_temp_table_name+'(source_curve_def_id, as_of_date, maturity_date,is_dst,curve_source_value_id)
 	      END'
 	)
	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'
			UPDATE spc
			SET curve_value = a.curve_value,
				bid_value = a.bid_value,
				ask_value = a.ask_value,
				update_ts = GETDATE(),
				update_user = ''' + @user_login_id + '''
			FROM ' + @import_temp_table_name + ' a
 	        INNER JOIN source_price_curve_def spcd ON  spcd.curve_id = a.source_curve_def_id AND spcd.source_system_id = a.source_system_id
			INNER JOIN source_system_description d ON  a.source_system_id = d.source_system_id
			INNER JOIN static_data_value sdv ON sdv.code = a.curve_source_value_id AND sdv.type_id = 10007
			INNER JOIN source_price_curve spc ON  spc.source_curve_def_id = spcd.source_curve_def_id
 				AND spc.as_of_date = a.as_of_date
 				AND spc.maturity_date = a.maturity_date
 				AND spc.is_dst = a.is_dst
 				AND spc.curve_source_value_id = ISNULL(sdv.value_id, 4500)
 				AND d.source_system_id = a.source_system_id				
			LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
 	    WHERE #error_status.temp_id IS NULL'

 	--PRINT(@sql)
 	EXEC(@sql)

 	--PRINT(2);
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_price_curve (source_curve_def_id, as_of_date, Assessment_curve_type_value_id, curve_source_value_id, maturity_date, curve_value, bid_value, ask_value, is_dst,create_user,create_ts)
		SELECT spcd.source_curve_def_id,
 			CONVERT(DATETIME, a.as_of_date, 120),
 			77,
 			ISNULL(sdv.value_id, 4500),
 			CONVERT(DATETIME, a.maturity_date, 120),
 			a.curve_value,
 			a.bid_value,
 			a.ask_value,
 	        a.is_dst,
			''' + @user_login_id + ''', 
			GETDATE()
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_price_curve_def spcd ON spcd.curve_id = a.source_curve_def_id AND spcd.source_system_id = a.source_system_id
		INNER JOIN source_system_description d ON a.source_system_id = d.source_system_id
		LEFT JOIN static_data_value sdv ON sdv.code = a.curve_source_value_id AND sdv.type_id = 10007
		LEFT JOIN source_price_curve spc ON spc.source_curve_def_id = spcd.source_curve_def_id
 			AND spc.as_of_date = a.as_of_date
 			AND spc.maturity_date = a.maturity_date
 			AND spc.is_dst = a.is_dst
 			AND spc.curve_source_value_id = ISNULL(sdv.value_id, 4500)
 			AND d.source_system_id = a.source_system_id
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		WHERE #error_status.temp_id IS NULL AND spc.source_curve_def_id IS NULL '
 	
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_deal_detail_hour_template'
BEGIN
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET term_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.term_date = dd.user_date
	')
	/***END OF date update***/

	EXEC('DELETE ' + @field_compare_table) 	
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''hr1'',''volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail_hour'',''is_dst'',''is_dst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''period'',''hour'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''period'',''interval'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''forecast_profile'', ''profile'', ''b.external_id = a.profile'', ''e'') -- error row
	')
	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'
	
 	EXEC ('
		IF NOT EXISTS(
 			SELECT 1
 			FROM adiha_process.sys.tables
 			WHERE [name] =  REPLACE(''' + @final_stg_table + ''',''adiha_process.dbo.'','''')
				AND [type] = ''U''
 		)
 		SELECT * INTO ' + @final_stg_table + ' FROM ' + @import_temp_table_name
	)

	-- Trigger Start
	IF OBJECT_ID(N'tempdb..#temp_table_forecast') IS NOT NULL
		DROP TABLE #temp_table_forecast

	CREATE TABLE #temp_table_forecast (
		[Hour] NVARCHAR(10) COLLATE DATABASE_DEFAULT, 
		interval NVARCHAR(20) COLLATE DATABASE_DEFAULT, 
		is_dst NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		[profile] NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
		term_date NVARCHAR(50) COLLATE DATABASE_DEFAULT, 
		volume NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		import_file_name NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		source_system_id NVARCHAR(10) COLLATE DATABASE_DEFAULT, 
		granularity	NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		temp_id NVARCHAR(20) COLLATE DATABASE_DEFAULT
	)

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly meter id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			  10001,
			  CASE 
			  	  WHEN a.hour IS NULL AND a.interval IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + '', '' + scmm.source_column_name + ''"}''
			  	  WHEN a.hour IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + ''"}''
			  	  WHEN a.interval IS NULL THEN ''{"column_name": "'' + scmm.source_column_name + ''"}''
			  END,
			  a.import_file_name
		  FROM ' + @final_stg_table + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''hour'' -- ixp_columns_name
          ) scmh
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''interval'' -- ixp_columns_name
          ) scmm
		  LEFT JOIN forecast_profile fp ON fp.external_id = a.profile
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND ((a.hour IS NULL AND fp.granularity IN (994, 987, 989, 995, 982)) OR (a.interval IS NULL AND fp.granularity IN (994, 987, 989, 995)))
	')

	EXEC('
		DELETE a
 	    FROM #error_status
 		INNER JOIN ' + @final_stg_table + ' a ON #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	SET @sql = '
		UPDATE ' + @final_stg_table + '
		SET hour = 25
		WHERE is_dst = 1
	'
	EXEC (@sql)
	
	EXEC('INSERT INTO #temp_table_forecast ([Hour], interval, is_dst, profile, term_date, volume, import_file_name, source_system_id,temp_id)
	SELECT [Hour], interval, is_dst, profile, term_date, volume, import_file_name, source_system_id, temp_id
	FROM ' + @final_stg_table)

	UPDATE b
	SET granularity = 
		CASE 
			WHEN fp.granularity = 994 THEN '10'
			WHEN fp.granularity = 987 THEN '15'
			WHEN fp.granularity = 989 THEN '30'
			WHEN fp.granularity = 995 THEN '5'
			WHEN fp.granularity = 993 THEN 'Annually'
			WHEN fp.granularity = 982 THEN 'Hourly'
			WHEN fp.granularity = 980 THEN 'Monthly'
			WHEN fp.granularity = 981 THEN 'Daily'
		END
	FROM forecast_profile fp
	INNER JOIN #temp_table_forecast b ON b.[profile] = fp.profile_name
	INNER JOIN static_data_value sdv ON sdv.value_id = fp.granularity AND sdv.[type_id] = 978

	UPDATE f
	SET hour = ((hour * 60 + interval) - f.granularity ) / 60,
		interval = ((hour * 60 + interval) - f.granularity) % 60 
	FROM #temp_table_forecast f
	WHERE granularity IN ('5','10','15', '30')

	UPDATE #temp_table_forecast
	SET hour = hour + 1
	WHERE granularity IN ('5','10','15', '30')
		AND hour <> 25
	
	EXEC('DELETE FROM ' + @import_temp_table_name)

	EXEC('INSERT INTO ' + @import_temp_table_name + '(Hour, interval, is_dst, profile, term_date, volume, import_file_name, source_system_id)
		SELECT Hour, interval, is_dst, profile, term_date, volume, import_file_name, source_system_id FROM #temp_table_forecast
	')
	-- Trigger End

 	IF OBJECT_ID('tempdb..#tmp_import_profiles') IS NOT NULL
 	DROP TABLE #tmp_import_profiles
 	
 	IF OBJECT_ID('tempdb..#temp_deal_detail_hour') IS NOT NULL
 	DROP TABLE #temp_deal_detail_hour
 	
 	IF OBJECT_ID('tempdb..#tmp_location_profile') IS NOT NULL
 	DROP TABLE #tmp_location_profile
 	
 	CREATE TABLE #tmp_import_profiles (profile_id INT)

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10016,
			''{
				"column_value": "'' + a.is_dst + ''",
				"column_name": "'' + scm.source_column_name + ''"
			}'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name
            FROM #source_file_column_table
            WHERE ixp_columns_name = ''is_dst'' -- ixp_columns_name
        ) scm
		LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		WHERE  #error_status.temp_id IS NULL
			AND a.is_dst NOT IN (0, 1)
 	')
 	
 	--save profile id to be inserted in the tmep table
 	SET @sql = 'INSERT INTO #tmp_import_profiles (profile_id)
 				SELECT profile_id FROM forecast_profile fp
 				INNER JOIN ( 
 					SELECT DISTINCT profile FROM ' + @import_temp_table_name + ' 
 				)tmp ON tmp.profile = fp.external_id'
 	EXEC(@sql)
 	 
 	SELECT term_date, profile_id, Hr1, Hr2,
 	       Hr3, Hr4, Hr5, Hr6, Hr7, Hr8,
 	       Hr9, Hr10, Hr11, Hr12, Hr13, Hr14,
 	       Hr15, Hr16, Hr17, Hr18, Hr19, Hr20,
 	       Hr21, Hr22, Hr23, Hr24, Hr25,
 	       partition_value, [period]
 	INTO #temp_deal_detail_hour
 	FROM deal_detail_hour
 	WHERE  1 = 2
 	
 	EXEC('
		DELETE '+@import_temp_table_name + '
 	    FROM #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	--For Daily profiles if hour is null
	EXEC( 'UPDATE tmp SET hour = 1 
		   FROM ' + @import_temp_table_name + ' tmp
 		   INNER JOIN forecast_profile fp 
			   ON tmp.profile = fp.external_id
		   WHERE fp.granularity IN (980, 981, 993)
		   AND tmp.hour IS NULL
	')

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #temp_deal_detail_hour
 				(	term_date, profile_id,
 					Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13,
 					Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, partition_value, [period]
 				)
 				SELECT term_date --date in YYMMDD format
 					, profile_id
 					, [1] Hr1, [2] Hr2, [3] Hr3, [4] Hr4, [5] Hr5, [6] Hr6
 					, [7] Hr7, [8] Hr8, [9] Hr9, [10] Hr10, [11] Hr11, [12] Hr12
 					, [13] Hr13, [14] Hr14, [15] Hr15, [16] Hr16, [17] Hr17, [18] Hr18
 					, [19] Hr19, [20] Hr20, [21] Hr21, [22] Hr22, [23] Hr23, [24] Hr24, [25] Hr25
 					, profile_id partition_value, interval
 				FROM
 				(  SELECT fp.profile_id, tmp.term_date, tmp.hour, CAST(tmp.volume AS float) volume, tmp.import_file_name, tmp.interval
 					FROM ' + @import_temp_table_name + ' tmp
 					INNER JOIN forecast_profile fp ON tmp.profile = fp.external_id
 				) p
 				PIVOT
 				(MAX(volume)
 					 FOR [hour] IN 
 					 (	[1], [2], [3], [4], [5], [6], 
 						[7], [8], [9], [10], [11], [12], 
 						[13], [14], [15], [16], [17], [18], 
 						[19], [20], [21], [22], [23], [24], [25])
 				) pvt'
 				
 	EXEC spa_print @sql
 	EXEC(@sql)
 	   
	-- Retain partial hour if not provided from import file 
	UPDATE tddh
	SET Hr1 = ISNULL(tddh.Hr1, ddh.Hr1)
		, Hr2 = ISNULL(tddh.Hr2, ddh.Hr2)
		, Hr3 = ISNULL(tddh.Hr3, ddh.Hr3)
		, Hr4 = ISNULL(tddh.Hr4, ddh.Hr4)
		, Hr5 = ISNULL(tddh.Hr5, ddh.Hr5)
		, Hr6 = ISNULL(tddh.Hr6, ddh.Hr6)
		, Hr7 = ISNULL(tddh.Hr7, ddh.Hr7)
		, Hr8 = ISNULL(tddh.Hr8, ddh.Hr8)
		, Hr9 = ISNULL(tddh.Hr9, ddh.Hr9)
		, Hr10 = ISNULL(tddh.Hr10, ddh.Hr10)
		, Hr11 = ISNULL(tddh.Hr11, ddh.Hr11)
		, Hr12 = ISNULL(tddh.Hr12, ddh.Hr12)
		, Hr13 = ISNULL(tddh.Hr13, ddh.Hr13)
		, Hr14 = ISNULL(tddh.Hr14, ddh.Hr14)
		, Hr15 = ISNULL(tddh.Hr15, ddh.Hr15)
		, Hr16 = ISNULL(tddh.Hr16, ddh.Hr16)
		, Hr17 = ISNULL(tddh.Hr17, ddh.Hr17)
		, Hr18 = ISNULL(tddh.Hr18, ddh.Hr18)
		, Hr19 = ISNULL(tddh.Hr19, ddh.Hr19)
		, Hr20 = ISNULL(tddh.Hr20, ddh.Hr20)
		, Hr21 = ISNULL(tddh.Hr21, ddh.Hr21)
		, Hr22 = ISNULL(tddh.Hr22, ddh.Hr22)
		, Hr23 = ISNULL(tddh.Hr23, ddh.Hr23)
		, Hr24 = ISNULL(tddh.Hr24, ddh.Hr24)
		, Hr25 = ISNULL(tddh.Hr25, ddh.Hr25)
	FROM #temp_deal_detail_hour tddh
	INNER JOIN deal_detail_hour ddh
		ON tddh.profile_id = ddh.profile_id
		AND tddh.term_date = ddh.term_date

 	--delete existing deal hourly data for incoming profiles
 	DELETE deal_detail_hour
 	FROM   deal_detail_hour ddh
 	INNER JOIN #temp_deal_detail_hour ip ON  ddh.profile_id = ip.profile_id AND ip.term_date = ddh.term_date
 	
 	---- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	--UPDATE #temp_deal_detail_hour SET Hr3 = ISNULL(Hr3,0) + ISNULL(Hr25,0)
 	--FROM   #temp_deal_detail_hour tmp
 	--INNER JOIN mv90_DST md ON  md.date = tmp.term_date AND md.insert_delete = 'i'
		--AND md.dst_group_value_id = @dst_group_value_id

	-- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	SELECT	@col = 'Hr' + CAST(md.hour AS NVARCHAR) + ' = Hr' + CAST(md.hour AS NVARCHAR) + ' + ISNULL(Hr25, 0)'
 	FROM	#temp_deal_detail_hour tmp
	INNER JOIN mv90_DST md ON  md.date = tmp.term_date AND md.insert_delete = 'i'
		AND md.dst_group_value_id = @dst_group_value_id
 
 	SET @sql = '
 				UPDATE	tmp
 				SET ' + @col + '
 				FROM #temp_deal_detail_hour tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.term_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(10)) + '
 				'
 	--PRINT @sql
 	EXEC(@sql)
 	 
 	INSERT INTO deal_detail_hour
 	(	term_date, profile_id,
 		Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13,
 		Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, [period]
 	)
 	SELECT term_date 
 		, profile_id
 		, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6
 		, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12
 		, Hr13, Hr14, Hr15,  Hr16, Hr17, Hr18
 		, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25
 		, [period]
 	FROM #temp_deal_detail_hour
 	
 	UPDATE forecast_profile SET available = 1
 	FROM forecast_profile fp
 	INNER JOIN #tmp_import_profiles ip ON fp.profile_id = ip.profile_id
 	
 	EXEC spa_print 'Calculating Total Volume...'
 	
 	DECLARE @report_position_process_id NVARCHAR(500)
 	
 	SET @report_position_process_id = dbo.FNAGetNewID()
 	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @report_position_process_id)
 	EXEC ('CREATE TABLE ' + @report_position_deals + '(source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT,source_deal_detail_id int)')	 	
 	
 	CREATE TABLE #tmp_location_profile (
 			  location_id INT NULL,
 			  profile_id INT NULL,
 			  profile_type INT,                                       
 			  external_id NVARCHAR(50) COLLATE DATABASE_DEFAULT
 	)
 
 	INSERT INTO #tmp_location_profile (
 	    location_id,
 	    profile_id,
 	    profile_type,
 	    external_id
 	)
 	SELECT distinct sml.source_minor_location_id,
 	       ISNULL(fp.profile_id, fp1.profile_id) profile_id,
 	       ISNULL(fp.profile_type, fp1.profile_type) profile_type,
 	       ISNULL(fp.external_id, fp1.external_id) external_id
 	FROM   source_minor_location sml(NOLOCK)
 	       LEFT JOIN [forecast_profile] fp(NOLOCK) ON  fp.profile_id = sml.profile_id AND ISNULL(fp.available, 0) = 1
 	       LEFT JOIN [forecast_profile] fp1(NOLOCK) ON  fp1.profile_id = sml.proxy_profile_id AND ISNULL(fp1.available, 0) = 1
 	       INNER JOIN #tmp_import_profiles ip ON  ip.profile_id = ISNULL(fp.profile_id, fp1.profile_id)
 	WHERE  ISNULL(fp.profile_id, fp1.profile_id) IS NOT NULL --AND ISNULL(fp.profile_id, fp1.profile_id) = @profile_id
 		
 		--SELECT * FROM #tmp_location_profile
 	EXEC('INSERT INTO ' + @report_position_deals + '(source_deal_header_id, action,source_deal_detail_id)
 		  SELECT sdh.source_deal_header_id, ''u'',sdd.source_deal_detail_id
 		  FROM source_deal_detail sdd
 		  INNER JOIN #tmp_location_profile tmp ON  sdd.location_id = tmp.location_id and sdd.profile_id is null
		  inner join #temp_deal_detail_hour tddh on tddh.profile_id=tmp.profile_id 
			and tddh.term_date between sdd.term_start and sdd.term_end
		  INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
				AND sdh.internal_desk_id=17301
		  UNION 
		  SELECT source_deal_header_id, ''u'',sdd.source_deal_detail_id
 		  FROM source_deal_detail sdd
 		  INNER JOIN #tmp_import_profiles tmp ON tmp.profile_id=sdd.profile_id
		  inner join #temp_deal_detail_hour tddh on tddh.profile_id=tmp.profile_id 
			and tddh.term_date between sdd.term_start and sdd.term_end

	')

 	IF @@rowcount > 0
	BEGIN
 		EXEC dbo.spa_update_deal_total_volume NULL, @report_position_process_id, 12
	END
END

IF @table_name = 'ixp_source_deal_volume_update_template'
BEGIN

	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''deal_volume'', ''deal_volume'')') --selected nullable column of real table for data type validation
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''schedule_volume'', ''schedule_volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''actual_volume'', ''actual_volume'')')
 		
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Invalid Data
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.deal_id + ''"
			}
			'',
		a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
					FROM #source_file_column_table 
					WHERE ixp_columns_name = ''deal_id'' 
		) scm
		LEFT JOIN source_deal_header sdh 
			ON sdh.deal_id = a.deal_id
		WHERE sdh.source_deal_header_id IS NULL
			AND a.deal_id IS NOT NULL
	')

	-- Invalid Data
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.source_deal_header_id + ''"
			}
			'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
					FROM #source_file_column_table 
					WHERE ixp_columns_name = ''source_deal_header_id'' 
		) scm
		LEFT JOIN source_deal_header sdh 
			ON sdh.source_deal_header_id = a.source_deal_header_id
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id		  
		WHERE #error_status.temp_id IS NULL
			AND sdh.source_deal_header_id IS NULL
			AND a.source_deal_header_id IS NOT NULL
	')

	-- deal id & ref id not matched.
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10012,
			''
			{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.deal_id + ''",
				"column_name1": "'' + a.source_deal_header_id + ''",
				"column_name2": "'' + scm2.source_column_name + ''"
			}
			'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
					FROM #source_file_column_table 
					WHERE ixp_columns_name = ''deal_id'' 
		) scm
		CROSS APPLY ( SELECT source_column_name 
					FROM #source_file_column_table 
					WHERE ixp_columns_name = ''source_deal_header_id'' 
		) scm2
		INNER JOIN source_deal_header sdh 
			ON sdh.deal_id = a.deal_id
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id		  
		WHERE #error_status.temp_id IS NULL
			AND sdd.source_deal_header_id <> a.source_deal_header_id
			AND a.source_deal_header_id IS NOT NULL
			AND a.deal_id IS NOT NULL
	')

	-- Data Mismatch for Term Start
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10004,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.term_start + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''term_start'' 
    ) scm
	LEFT JOIN #error_status
		ON a.temp_id = #error_status.temp_id
	WHERE #error_status.temp_id IS NULL 
		AND ISDATE(a.term_start) = 0
 	')

	-- Invalid Data
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.term_start + ''"
			}
			'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
					FROM #source_file_column_table 
					WHERE ixp_columns_name = ''term_start'' 
		) scm
		INNER JOIN  source_deal_header sdh 
			ON sdh.deal_id = a.deal_id
		LEFT JOIN source_deal_detail sdd 
			ON sdd.source_deal_header_id = sdh.source_deal_header_id
			AND sdd.term_start = a.term_start
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id		  
		WHERE #error_status.temp_id IS NULL
			AND sdd.source_deal_detail_id IS NULL
	')

	-- Delete error data
	EXEC('
		DELETE a
		FROM #error_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON #error_status.temp_id = a.temp_id
	')
 	
 	IF OBJECT_ID('tempdb..#tmp_deal_table') IS NOT NULL
 		DROP TABLE #tmp_deal_table
 		
 	CREATE TABLE #tmp_deal_table (
 			[source_deal_header_id]  INT,
 			[deal_id]                NVARCHAR(150) COLLATE DATABASE_DEFAULT, 
 			[term_date]				 DATETIME, 
 			[volume]                 FLOAT, 
 			import_file_name         NVARCHAR(200) COLLATE DATABASE_DEFAULT,
 			[has_error]              BIT,
			[schedule_volume]        FLOAT,
 			[actual_volume]          FLOAT
 		)
  
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #tmp_deal_table(deal_id, source_deal_header_id, [term_date], volume, [import_file_name], [schedule_volume], [actual_volume])
 				SELECT ISNULL(a.deal_id, sdh.deal_id),
 				       ISNULL(a.source_deal_header_id, sdh.source_deal_header_id), 
 				       CAST(a.term_start AS NVARCHAR(20)), 
 				       a.deal_volume  volume, 
 				       a.import_file_name,
					   a.schedule_volume  volume,
					   a.actual_volume  volume
 				FROM  ' + @import_temp_table_name + ' a INNER JOIN  source_deal_header sdh
					ON (sdh.deal_id = a.deal_id
					OR sdh.source_deal_header_id = a.source_deal_header_id)'
 	
 	--PRINT @sql
 	EXEC (@sql) 

	EXEC ('
		UPDATE sdd 
		SET sdd.deal_volume = ISNULL(a.deal_volume,sdd.deal_volume)
			--,sdd.schedule_volume =ISNULL(a.schedule_volume,sdd.schedule_volume)
			--,sdd.actual_volume =ISNULL(a.actual_volume,sdd.actual_volume)
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN  source_deal_header sdh 
			ON sdh.deal_id = a.deal_id
			OR sdh.source_deal_header_id = a.source_deal_header_id
		INNER JOIN source_deal_detail sdd 
			ON sdd.source_deal_header_id = sdh.source_deal_header_id
			AND sdd.term_start = a.term_start
		')
	
	DECLARE @report_position_deals5 NVARCHAR(300), 
			@process_id5 NVARCHAR(300),
			@pos_job_name5 NVARCHAR(600)
			
 	SET @process_id5 = REPLACE(newid(),'-','_')
 	SET @report_position_deals5 = dbo.FNAProcessTableName('report_position', @user_login_id, @process_id5)
 	
 	EXEC ('CREATE TABLE ' + @report_position_deals5 + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
 	SET @sql = 'INSERT INTO ' + @report_position_deals5 + '(source_deal_header_id,action) 
 				SELECT  t.source_deal_header_id,
 				       ''i''
 				FROM #tmp_deal_table t
  		        GROUP BY t.source_deal_header_id'
 	EXEC(@sql)
 	
 	SET @pos_job_name5 =  'calc_position_breakdown_' + @process_id5
 	
 	SET @sql = 'spa_update_deal_total_volume NULL,'''+@process_id5+''',0,1,''' + @user_login_id + ''''

	EXEC spa_run_sp_as_job @pos_job_name5,  @sql, 'generating_report_table', @user_login_id

	-- update schedule and actual volume
	SET @sql = '
		UPDATE sddh 
		SET actual_volume = NULL
			, schedule_volume = NULL
		FROM #tmp_deal_table a
		INNER JOIN source_deal_detail sdd ON a.source_deal_header_id = sdd.source_deal_header_id
			AND a.term_date BETWEEN sdd.term_start AND sdd.term_end
		INNER JOIN source_deal_detail_hour sddh
			ON sdd.source_deal_detail_id = sddh.source_deal_detail_id
			AND (
					(sdd.deal_volume_frequency = ''d''
					AND cast(LEFT(sddh.hr, 2) AS INT) <> 01)
				OR (sdd.deal_volume_frequency = ''m''
					AND (sddh.term_date <> sdd.term_start OR (sddh.term_date = sdd.term_start AND CAST(LEFT(sddh.hr, 2) as int) <> 01 ))
					)
			)
		'
	EXEC (@sql)
	
	SET @sql = '
		UPDATE sddh 
		SET actual_volume = a.actual_volume
			, schedule_volume = a.schedule_volume
		FROM #tmp_deal_table a
		INNER JOIN source_deal_detail sdd ON a.source_deal_header_id = sdd.source_deal_header_id
			AND a.term_date BETWEEN sdd.term_start AND sdd.term_end
		INNER JOIN source_deal_detail_hour sddh
			ON sdd.source_deal_detail_id = sddh.source_deal_detail_id
			AND (
				( sdd.deal_volume_frequency NOT IN (''d'',''m''))
				OR (
					sdd.deal_volume_frequency = ''d''
					AND CAST(LEFT(sddh.hr, 2) AS INT) = 01
					)
				OR (
					sdd.deal_volume_frequency = ''m''
					AND CAST(LEFT(sddh.hr, 2) AS INT) = 01
					AND sddh.term_date = sdd.term_start
					)
				)
		'
	EXEC (@sql)

	SET @sql = '
		UPDATE sdd
		SET actual_volume = sddh.actual_volume
			, schedule_volume = sddh.schedule_volume
		FROM source_deal_detail sdd 
		INNER JOIN #tmp_deal_table a 
			ON a.source_deal_header_id = sdd.source_deal_header_id
		OUTER APPLY (
			SELECT SUM(sddh.actual_volume) actual_volume, SUM(sddh.schedule_volume) schedule_volume
			FROM source_deal_detail_hour sddh
			WHERE sddh.source_deal_detail_id = sdd.source_deal_detail_id
		) sddh
		'
	EXEC (@sql)
END

IF @table_name = 'ixp_source_deal_template'
BEGIN
	/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'source_deal_header,source_deal_detail'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)

	/*
	Note:- Verify destination table and columns with ixp column. If any miss match data found then correct it.
	*/
	EXEC('UPDATE  i
		SET table_name = ''source_deal_detail''
			, destination_column_name = ''physical_financial_flag''
		FROM ' + @ixp_destination_column_mapping + ' i
		WHERE i.ixp_column_name = ''physical_financial_flag_detail''
	')
	
	EXEC('DELETE FROM ' + @ixp_destination_column_mapping + '
			WHERE ixp_column_name = ''physical_financial_flag''	
			AND table_name = ''source_deal_detail''
		')
	
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name
	
 	EXEC('delete '+@field_compare_table)
 	DECLARE @table_id NVARCHAR(300),
 			@start_ts DATETIME,
 			@source NVARCHAR(400),
 			@import_as_of_date DATETIME,
 			@source_system_desc_id NVARCHAR(20) ,
 			@error_log_table_name NVARCHAR(400),
 			@sql1 NVARCHAR(MAX)
	
	/** Updating NCHAR data type fields before proceeding to validate data type  **/
	EXEC(' UPDATE ' + @import_temp_table_name + ' 
			SET option_flag = CASE WHEN option_flag = ''yes'' THEN ''y''
								   WHEN option_flag = ''no'' THEN ''n''
								   ELSE option_flag
							  END 
			, fixed_float_leg = CASE WHEN fixed_float_leg = ''Float'' THEN ''t'' 
									WHEN fixed_float_leg = ''Fixed'' THEN ''f''
									ELSE fixed_float_leg 
								END
			, physical_financial_flag = CASE WHEN physical_financial_flag = ''Physical'' THEN ''p'' 
											WHEN physical_financial_flag = ''Financial'' THEN ''f'' 
											ELSE physical_financial_flag 
										END
			, header_buy_sell_flag = CASE WHEN header_buy_sell_flag = ''Buy'' THEN ''b'' 
											WHEN header_buy_sell_flag = ''Sell'' THEN ''s'' 
											ELSE LOWER(header_buy_sell_flag) 
										END
			, buy_sell_flag = CASE WHEN buy_sell_flag = ''Buy'' THEN ''b'' 
											WHEN buy_sell_flag = ''Sell'' THEN ''s'' 
											ELSE LOWER(buy_sell_flag) 
										END
			, deal_volume_frequency = CASE WHEN deal_volume_frequency = ''15 Minutes'' THEN ''x'' 
									       WHEN deal_volume_frequency = ''30 Minutes'' THEN ''y'' 
										   WHEN deal_volume_frequency = ''Annually'' THEN ''a'' 
										   WHEN deal_volume_frequency = ''Daily'' THEN ''d'' 
										   WHEN deal_volume_frequency = ''Hourly'' THEN ''h'' 
										   WHEN deal_volume_frequency = ''Monthly'' THEN ''m'' 
										   WHEN deal_volume_frequency = ''Term'' THEN ''t'' 
										   ELSE LOWER(deal_volume_frequency) 
									  END
			, option_type = CASE WHEN option_type = ''Call'' THEN ''c''
								 WHEN option_type = ''Put'' THEN ''p''
								 ELSE option_type
							END 
			, option_excercise_type = CASE WHEN option_excercise_type = ''American'' THEN ''a''
										   WHEN option_excercise_type = ''European'' THEN ''e''
										   WHEN option_excercise_type = ''Asian'' THEN ''s''
										   ELSE option_excercise_type
									  END
			')
			 
	/*** Convert client date format to SQL data format before proceeding to import. ***/	
	EXEC('UPDATE a
		  SET term_start = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.term_start = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET term_end = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.term_end = dd.user_date
	')	
	
	EXEC('UPDATE a
		  SET deal_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.deal_date = dd.user_date
	')	

	EXEC('UPDATE a
		  SET contract_expiration_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.contract_expiration_date = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET payment_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.payment_date = dd.user_date
	')	

	EXEC('UPDATE a
		  SET delivery_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN vw_date_details dd
			ON a.delivery_date = dd.user_date
	')	
	/***END OF date update***/
	
	/*** Data type validation **/
	--source_deal_header
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''term_start'',''term_start'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''term_end'',''term_end'')') 
	/* TODO check if delivery date is in use */
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''Leg'',''Leg'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''fixed_price'',''fixed_price'')') 	
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''option_strike_price'',''option_strike_price'')') 
 	EXEC('insert into '+@field_compare_table+ ' values (''source_deal_detail'',''deal_volume'',''deal_volume'')') 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''block_description'',''block_description'')') 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''deal_detail_description'',''deal_detail_description'')') 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''deal_date'',''deal_date'')') 
 	
	--source_deal_header
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''deal_id'',''deal_id'')')  
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''description1'',''description1'')') 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''description2'',''description2'')') 
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''description3'',''description3'')') 
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''standard_yearly_volume'',''standard_yearly_volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''multiplier'',''multiplier'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''price_adder'',''price_adder'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''formula_id'',''formula_id'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_header'',''fx_rounding'',''fx_rounding'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' values (''source_deal_detail'',''contractual_volume'',''contractual_volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' values (''source_deal_detail'',''actual_volume'',''actual_volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' values (''source_deal_detail'',''schedule_volume'',''schedule_volume'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''volume_multiplier2'',''volume_multiplier2'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''fx_conversion_rate'',''fx_conversion_rate'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''no_of_strikes'',''no_of_strikes'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''payment_date'',''payment_date'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''source_deal_detail'',''fixed_cost'',''fixed_cost'')') 

 	IF @exec_mode = 6
	BEGIN
 		EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_header'', ''description4'', ''description4'')') 	
 	END
 	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_price_curve_def'', ''curve_id'', ''b.curve_id = a.curve_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_currency'', ''fixed_price_currency_id'', ''b.currency_id = a.fixed_price_currency_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_uom'', ''deal_volume_uom_id'', ''b.uom_id = a.deal_volume_uom_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_deal_type'', ''deal_sub_type_type_id'', ''b.deal_type_id = a.deal_sub_type_type_id AND b.source_system_id = a.source_system_id'', ''w''),
		(''source_book'', ''source_system_book_id1'', ''b.source_system_book_id = a.source_system_book_id1 AND b.source_system_id = a.source_system_id AND b.source_system_book_type_value_id = 50'', ''e''),
		(''source_book'', ''source_system_book_id2'', ''b.source_system_book_id = a.source_system_book_id2 AND b.source_system_id = a.source_system_id AND b.source_system_book_type_value_id = 51'', ''e''),
		(''source_book'', ''source_system_book_id3'', ''b.source_system_book_id = a.source_system_book_id3 AND b.source_system_id = a.source_system_id AND b.source_system_book_type_value_id = 52'', ''e''),
		(''source_book'', ''source_system_book_id4'', ''b.source_system_book_id = a.source_system_book_id4 AND b.source_system_id = a.source_system_id AND b.source_system_book_type_value_id = 53'', ''e''),
		(''source_traders'', ''trader_id'', ''b.trader_id = a.trader_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''static_data_value'', ''deal_category_value_id'', ''b.code = a.deal_category_value_id AND b.type_id = 475'', ''e''),
		(''contract_group'', ''contract_id'', ''b.source_contract_id = a.contract_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_deal_header_template'', ''template_id'', ''b.template_name = a.template_id'', ''e''),
		(''source_currency'', ''broker_currency_id'', ''b.currency_id = a.broker_currency_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''static_data_value'', ''block_type'', ''b.code = a.block_type AND b.type_id = 12000'', ''e''),
		(''static_data_value'', ''granularity_id'', ''b.code = a.granularity_id AND b.type_id = 978'', ''e''),
		(''static_data_value'', ''pricing'', ''b.code = a.pricing AND b.type_id = 1600'', ''e''),
		(''source_commodity'', ''commodity_id'', ''b.commodity_id = a.commodity_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''static_data_value'', ''pricing_type'', ''b.code = a.pricing_type AND b.type_id = 46700'', ''e''),
		(''source_deal_type'', ''source_deal_type_id'', ''b.deal_type_id = a.source_deal_type_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_minor_location'', ''location_id'', ''b.location_id = a.location_id AND b.source_system_id = a.source_system_id'', ''e''),
		(''source_counterparty'', ''broker_id'', ''b.counterparty_id = a.broker_id AND b.source_system_id = a.source_system_id AND b.int_ext_flag = ''''b'''''', ''w''),
		(''static_data_value'', ''deal_status'', ''b.code = a.deal_status AND b.type_id = 5600'', ''e''),
		(''static_data_value'', ''internal_desk_id'', ''b.code = a.internal_desk_id AND b.type_id = 17300'', ''e''),
		(''static_data_value'', ''confirm_status_type'', ''b.code = a.confirm_status_type AND b.type_id = 17200'', ''e''),
		(''static_data_value'', ''block_define_id'', ''b.code = a.block_define_id AND b.type_id = 10018'', ''w''),
		(''source_system_book_map'', ''sub_book'', ''b.logical_name = a.sub_book'', ''e''),
		(''source_uom'', ''position_uom'', ''b.uom_id = a.position_uom'', ''w''),	
		(''source_price_curve_def'', ''formula_curve_id'', ''b.curve_id = a.formula_curve_id'', ''w''),
		(''static_data_value'', ''internal_portfolio_id'', ''b.code= a.internal_portfolio_id'', ''w''),
		(''formula_editor'', ''formula_id'', ''b.formula_id = a.formula_id'', ''w''),
		(''source_counterparty'', ''counterparty_id2'', ''b.counterparty_id = a.counterparty_id2'', ''w''),
		(''source_traders'', ''trader_id2'', ''b.trader_id = a.trader_id2'', ''w''),
		(''static_data_value'', ''state_value_id'', ''b.code = a.state_value_id AND b.type_id = 10002'', ''w''),
		(''static_data_value'', ''state_valuetier_id_id'', ''b.code = a.tier_id AND b.type_id = 15000'', ''w''),
		(''static_data_value'', ''fas_deal_type_value_id'', ''b.code = a.fas_deal_type_value_id AND b.type_id = 400'', ''w''),
		(''static_data_value'', ''tier_id'', ''b.code = a.tier_id AND b.type_id = 15000'', ''w''),
		(''static_data_value'', ''reporting_jurisdiction_id'', ''b.code = a.reporting_jurisdiction_id AND b.type_id = 10002'', ''w''),
		(''static_data_value'', ''reporting_tier_id'', ''b.code = a.reporting_tier_id AND b.type_id = 15000'', ''w''),
		(''static_data_value'', ''product_classification'', ''b.code = a.product_classification AND b.type_id = 107400'', ''w''),
		(''static_data_value'', ''status'', ''b.code = a.status AND b.type_id = 25000'', ''w''),
		(''meter_id'', ''meter_id'', ''b.recorderid = a.meter_id'', ''w''),
		(''#temp_match_type_data'', ''match_type'', ''b.code = a.match_type'', ''w''),	
		(''forecast_profile'', ''profile_id'', ''b.external_id= a.profile_id'', ''w''),
		(''internal_deal_type_subtype_types'', ''internal_deal_type_value_id'', ''b.internal_deal_type_subtype_type= a.internal_deal_type_value_id AND b.type_subtype_flag IS NULL'', ''w''),
		(''internal_deal_type_subtype_types'', ''internal_deal_subtype_value_id'', ''b.internal_deal_type_subtype_type= a.internal_deal_subtype_value_id AND b.type_subtype_flag = ''''y'''''', ''w''),
		(''source_counterparty'', ''internal_counterparty'', ''b.counterparty_id = a.internal_counterparty'', ''w''),
		(''counterparty_contacts'', ''counterparty_trader'', ''b.name = a.counterparty_trader AND b.contact_type = -32200'', ''w''),
		(''static_data_value'', ''fx_conversion_market'', ''b.code = a.fx_conversion_market'', ''w''),
		(''static_data_value'', ''fx_option'', ''b.code= a.fx_option AND b.type_id = 107400'', ''w''),
		(''source_counterparty'', ''upstream_counterparty'', ''b.counterparty_id = a.upstream_counterparty'', ''w''),
		(''static_data_value'', ''strike_granularity'', ''b.code = a.strike_granularity AND b.type_id = 978'', ''w''),
		(''source_currency'', ''adder_currency_id'', ''b.currency_id = a.adder_currency_id'', ''w''),
		(''static_data_value'', ''vintage_id'', ''b.code = a.vintage_id AND b.type_id = 10092'', ''w''),
		(''counterparty_contacts'', ''counterparty2_trader'', ''b.name = a.counterparty2_trader AND b.contact_type = -32200'', ''w''),
		(''source_counterparty'', ''clearing_counterparty_id'', ''b.counterparty_id = a.clearing_counterparty_id'', ''w''),
		(''static_data_value'', ''product_id'', ''b.code = a.product_id AND b.type_id = 4100'', ''w''),
		(''source_deal_header'', ''close_reference_id'', ''b.deal_id = a.close_reference_id'', ''w''),
		(''shipper_code_mapping_detail'', ''shipper_code1'', ''b.shipper_code1 = a.shipper_code1'', ''w''),
		(''shipper_code_mapping_detail'', ''shipper_code2'', ''b.shipper_code = a.shipper_code2'', ''w'')
	')

	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'
 	
	--UDF data validation
	EXEC spa_validate_udf_data_type @flag = 'data_validate', @process_id = @process_id, @validate_table_name = @import_temp_table_name, @rules_id = @rules_id
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.fx_conversion_market + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''fx_conversion_market''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.fx_conversion_market
			AND sdv.type_id = 29700
		WHERE a.fx_conversion_market IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)

	--reporting_group check
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.reporting_group1 + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''reporting_group1''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.reporting_group1
			AND sdv.type_id = 113000
		WHERE a.reporting_group1 IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.reporting_group2 + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''reporting_group2''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.reporting_group2
			AND sdv.type_id = 113100
		WHERE a.reporting_group2 IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.reporting_group3 + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''reporting_group3''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.reporting_group3
			AND sdv.type_id = 113200
		WHERE a.reporting_group3 IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.reporting_group4 + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''reporting_group4''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.reporting_group4
			AND sdv.type_id = 113300
		WHERE a.reporting_group4 IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.reporting_group5 + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''reporting_group5''
        ) scm
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.reporting_group5
			AND sdv.type_id = 113400
		WHERE a.reporting_group5 IS NOT NULL
			AND sdv.value_id IS NULL
 	'
	EXEC(@sql)


	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.timezone_id + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''timezone_id''
        ) scm
		LEFT JOIN time_zones tz
			ON tz.TIMEZONE_NAME = a.timezone_id
		WHERE a.timezone_id IS NOT NULL
			AND tz.TIMEZONE_ID IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.template_id + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''template_id''
        ) scm
		LEFT JOIN source_deal_header_template sdht
			ON sdht.template_name = a.template_id
		WHERE a.template_id IS NOT NULL
			 AND sdht.template_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.fixed_cost_currency_id + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''fixed_cost_currency_id''
        ) scm
		LEFT JOIN source_currency sc
			ON sc.currency_id = a.fixed_cost_currency_id
		WHERE a.fixed_cost_currency_id IS NOT NULL
			 AND sc.currency_id IS NULL
 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10013,
			''
				{
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.formula_currency_id + ''"
				}
			'',
			a.import_file_name
 	    FROM ' + @import_temp_table_name + ' a
		CROSS APPLY ( 
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''formula_currency_id''
        ) scm
		LEFT JOIN source_currency sc
			ON sc.currency_id = a.template_id
		WHERE a.formula_currency_id IS NOT NULL
			 AND sc.currency_id IS NULL
 	'
	EXEC(@sql)


	--curve_id conditional mandatory validation  for float deal.
	SET @sql = 'INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''"
            }
          '',
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''curve_id''
          ) scm
 	      WHERE 
				(a.curve_id IS NULL AND a.fixed_float_leg = ''t'') 
 			'
	EXEC(@sql)
 	--deal_volume_frequency conditional mandatory validation  for float deal.
	SET @sql = 'INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''"
            }
          '',
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''deal_volume_frequency''
          ) scm
		  LEFT JOIN static_data_value sdv ON sdv.type_id = 17300 AND sdv.code = a.internal_desk_id
 	      WHERE 
				(a.deal_volume_frequency IS NULL AND a.fixed_float_leg = ''t'' AND sdv.value_id = 17300) 
 			'
	EXEC(@sql)
 	--deal_volume_uom_id conditional mandatory validation  for float deal.
	SET @sql = 'INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''"
            }
          '',
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''deal_volume_uom_id''
          ) scm
 	      WHERE 
				(a.deal_volume_uom_id IS NULL AND a.fixed_float_leg = ''t'') 
 			'
	EXEC(@sql)

	--Validate invalid data before updating destination column.
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.physical_financial_flag + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''physical_financial_flag'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (a.physical_financial_flag NOT IN (''f'', ''p'')) 
	')
	
	EXEC ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 		  SELECT a.temp_id,
				 NULL,
				''Generator missing for the combination of '' + scm.source_column_name + '': '' + ISNULL(a.generator_id,'' '') + '' and '' + scm1.source_column_name + '': '' + ISNULL(a.facility_id, '' '') + ''.'',
 				 a.import_file_name, ''Warning'', ''Invalid Data'', ''Please correct data and re-import.''
		  FROM  '+ @import_temp_table_name + ' a
		  LEFT JOIN rec_generator rg ON rg.code = a.generator_id AND rg.id = a.facility_id
		  CROSS APPLY ( SELECT source_column_name 
                FROM #source_file_column_table 
                WHERE ixp_columns_name = ''generator_id''
          ) scm
		  CROSS APPLY ( SELECT source_column_name 
                FROM #source_file_column_table 
                WHERE ixp_columns_name = ''facility_id''
          ) scm1
		  LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		 WHERE #error_status.temp_id IS NULL AND rg.generator_id IS NULL AND (a.generator_id IS NOT NULL OR a.facility_id IS NOT NULL)
	')

	/*
		* START of physical_financial and location update
		* Added below logic to set default value for physical_financial_flag and location_id
	*/
	EXEC ('  UPDATE a
			SET physical_financial_flag = ISNULL(a.physical_financial_flag, ''p'')
				,location_id = COALESCE(a.location_id, sml.Location_Name, second_leg.Location_Name, CASE WHEN a.physical_financial_flag = ''f'' THEN NULL ELSE ''Default_Location'' END)
			FROM ' + @import_temp_table_name + ' a 
			INNER JOIN source_deal_header_template sdht ON sdht.template_name = a.template_id
 			LEFT JOIN source_deal_detail_template sddt ON sdht.template_id = sddt.template_id AND sddt.leg = ISNULL(a.leg, 1) 
			LEFT JOIN source_minor_location sml ON sml.source_minor_location_id = sddt.[location_id]
			OUTER APPLY (SELECT sml_inner.Location_Name FROM source_deal_detail_template sddt_inner 
				INNER JOIN source_minor_location sml_inner ON sml_inner.source_minor_location_id = sddt_inner.[location_id]
				WHERE sddt_inner.template_id = sdht.template_id AND sddt_inner.leg = 1 ) second_leg 
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 			WHERE #error_status.temp_id IS NULL		
		')
		
	/***END of physical_financial and location update***/	

 	--index creation of optimization
 	DECLARE @pos_index_name		NVARCHAR(128)
 	DECLARE @deal_detail_audit_log INT
 	SET @deal_detail_audit_log=1

	SELECT   @deal_detail_audit_log= var_value 	FROM    adiha_default_codes_values
		WHERE   (instance_no = '1') AND (default_code_id = 32) AND (seq_no = 1)

	DECLARE @base_contract_id INT

	SELECT @base_contract_id =  contract_id 
	FROM contract_group
	WHERE contract_name = 'Base Contract'

 	SET @pos_index_name = 'IX_AP_sourceDealDetailEssent'+ @process_id 		
				
 	CREATE TABLE #tmp_erroneous_deals (
 		deal_id				NVARCHAR(200) COLLATE DATABASE_DEFAULT  NOT NULL,
 		error_type_code		NVARCHAR(100) COLLATE DATABASE_DEFAULT  NOT NULL,
 		error_description	NVARCHAR(500) COLLATE DATABASE_DEFAULT 
 	)	

 	--Pre validataing Data Type
 	SET @source_table = @import_temp_table_name			
		
 	EXEC('delete from ' + @import_temp_table_name + 
 	'  OUTPUT DELETED.deal_id, ''INVALID_DATA_FORMAT'', ''Null values'' INTO #tmp_erroneous_deals
 	where deal_id is null and term_start is null and term_end is null and
 	Leg is null and contract_expiration_date is null and fixed_float_leg is null and buy_sell_flag is null 
 	and curve_id is null and fixed_price is null and fixed_price_currency_id is null 
 	and option_strike_price is null and deal_volume is null
 	and deal_volume_frequency is null and deal_volume_uom_id is null and physical_financial_flag is null
 	and source_deal_type_id is null and source_deal_type_id is null and option_flag is null 
 	and (source_system_book_id1 is null and source_system_book_id2 is null and source_system_book_id3 is null and source_system_book_id4 is null)
	AND sub_book is null
 	and deal_category_value_id is null' )
 	--PRINT 'farrrms'

	/** Term break logic starts here. **/	
	DECLARE @final_breakdown_process_table NVARCHAR(200) = dbo.FNAProcessTableName('breakdown_import_data', @user_login_id, @process_id)
	
	SET @sql = '
	IF OBJECT_ID(''' + @final_breakdown_process_table + ''') IS NOT NULL
 	DROP TABLE ' + @final_breakdown_process_table + '
	SELECT 
			tbd.term_start breakdown_term_start,tbd.term_end breakdown_term_end,t.* 
		INTO ' + @final_breakdown_process_table + '
		FROM ' + @import_temp_table_name + '  t
		INNER JOIN source_deal_header_template sdht ON sdht.template_name = t.template_id 
		CROSS APPLY (
			SELECT * 
			FROM dbo.FNATermBreakDown(IIF(sdht.term_frequency_type = ''t'', '''', sdht.term_frequency_type), t.[term_start], t.[term_end])
		) tbd
		
		UPDATE
		' + @final_breakdown_process_table + '
		SET 
			term_start = breakdown_term_start, term_end = breakdown_term_end, contract_expiration_date = ISNULL(contract_expiration_date, breakdown_term_end) 
			, source_system_id = ISNULL(source_system_id,2)
		--if neccessary drop breakdown_term_start and breakdown_term_end
		'
		
		EXEC(@sql)
		
	--Reset source data with breakdown data.
	SET @import_temp_table_name = @final_breakdown_process_table

	/** Term break logic ends here. **/	
 
	EXEC('INSERT INTO #total_deals_proceed(tot_deals)
 	      SELECT COUNT(1)
 	      FROM (SELECT COUNT(1) tot FROM ' + @import_temp_table_name + ' GROUP BY deal_id) t '
 	)
	
	--contract_expiration_date is a mandatory field and is updated by term_end if NULL
	EXEC('delete ' + @field_compare_table)
	EXEC('insert into '+@field_compare_table+ ' values (''source_deal_detail'',''contract_expiration_date'',''contract_expiration_date'')') 
 		
 	IF ISNULL(@exec_mode,0) <> 1
 		EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id
	 		
 	-- data repetition error handeling starts 
	--Collect those deals that can produce Data Repetition Error but make sure they are not embedded.	

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT a.temp_id,
 	            10007,
				''{
					"column_name": "'' + scn.source_column_name  + ''", 
					"column_value": "'' + a.deal_id' + ' + '', '' + ' + 'a.leg' + ' + '', '' + ' + 'a.term_start' + ' + ''and '' + ' + 'a.term_end + ''",
					"repetition_count":  "'' + CAST(b.notimes AS NVARCHAR) + ''"
				}'',
 	            a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		   CROSS APPLY ( SELECT STUFF(( SELECT  '', '' + source_column_name
										FROM #source_file_column_table 
										WHERE ixp_columns_name  in (''deal_id'',''leg'',''term_start'',''term_end'') 
										ORDER BY seq
										 FOR
										XML PATH('''')
									  ), 1, 2, '''') source_column_name 
          ) scn	
          INNER JOIN (
					--get deal deals that will product Data Repetition Error
                   SELECT deal_id,
						term_start,
						term_end,
						leg,
						COUNT(*) notimes
                   FROM '+ @import_temp_table_name + '
                   GROUP BY deal_id, term_start, term_end, leg
                   HAVING COUNT(*) > 1
		  ) b
			 ON a.deal_id = b.deal_id
			 AND a.term_start = b.term_start
			 AND a.term_end = b.term_end
			 AND a.leg = b.leg		  
		  LEFT JOIN source_deal_header sdh ON a.deal_id = sdh.deal_id and a.source_system_id=sdh.source_system_id
 		  LEFT JOIN embedded_deal e ON e.source_deal_header_id = sdh.source_deal_header_id
		  WHERE e.embedded_deal_id IS NULL
			 '

	--PRINT('Collect deal details that can produce Data Repetition Error' + NCHAR(10) + @sql)		 
	EXEC(@sql)
  
   	
	--Validation for empty value for location only if deal is physical deal.
	SET @sql = 'INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''"
            }
          '',
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''location_id''
          ) scm
 	      WHERE 
				(a.location_id IS NULL AND a.physical_financial_flag = ''p'') 
 			'
	EXEC(@sql)
 	
	
	--Validation for empty profile granularity when profile is shaped
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10001,
			''{
					"column_name": "'' + scn.source_column_name + ''"

				}
			  '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''profile_granularity''
			) scn
			LEFT JOIN static_data_value sdv ON sdv.type_id = 17300 AND sdv.code = a.internal_desk_id
			LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id						
			WHERE #error_status.temp_id IS NULL
				AND sdv.value_id IN (17302)
				AND a.profile_granularity IS NULL
 	')
 			
	/* Added to create table for match_type value look up*/
	IF OBJECT_ID('tempdb..#temp_match_type_data') IS NOT NULL
		DROP TABLE #temp_match_type_data
 			
	CREATE TABLE #temp_match_type_data(
		[value] NCHAR(1) COLLATE DATABASE_DEFAULT,
		[code] NVARCHAR(500) COLLATE DATABASE_DEFAULT
	)
 
	DECLARE @combo_sql_string NVARCHAR(MAX)
	SELECT @combo_sql_string = mfd.sql_string
				FROM maintain_field_deal mfd
				WHERE mfd.farrms_field_id = 'match_type'
	INSERT INTO #temp_match_type_data
	EXEC(@combo_sql_string)
	/* End of match_type data insert*/
 
	--SELECT * FROM #error_status
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.source_deal_type_id + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''source_deal_type_id'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  OUTER APPLY ( SELECT b.deal_type_id 
					    FROM source_deal_header_template sdht 
						LEFT JOIN source_deal_type sdtt 
							ON sdtt.source_deal_type_id = sdht.source_deal_type_id
						LEFT JOIN source_deal_type b 
							ON b.deal_type_id= ISNULL(a.source_deal_type_id, sdtt.deal_type_id) 
							AND b.source_system_id = a.source_system_id 
						WHERE sdht.template_name = a.[template_id]
					  ) deal_ty
 		  WHERE #error_status.temp_id IS NULL AND deal_ty.deal_type_id IS NULL
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.fixed_float_leg + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''fixed_float_leg'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (a.fixed_float_leg NOT IN (''f'', ''t'')) 
	')
		
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.buy_sell_flag + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''buy_sell_flag'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (a.buy_sell_flag NOT IN (''b'',''s'')) 
	')	

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.deal_volume_frequency + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''deal_volume_frequency'' 
			) scm
		  LEFT JOIN static_data_value sdv ON sdv.type_id = 17300 AND sdv.code = a.internal_desk_id
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (a.deal_volume_frequency NOT IN (''m'',''d'',''h'',''t'', ''a'', ''x'', ''y'')) 
			AND sdv.value_id = 17300 
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.term_frequency + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''term_frequency'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (ISNULL(a.term_frequency,''d'') NOT IN (''m'',''d'',''h'',''a'',''q'',''w'',''s'')) 
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.header_buy_sell_flag + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''header_buy_sell_flag'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (a.header_buy_sell_flag NOT IN (''b'',''s'')) 
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.option_flag + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''option_flag'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  WHERE #error_status.temp_id IS NULL AND (ISNULL(a.option_flag,''n'') NOT IN (''y'', ''n'')) 
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10002,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.profile_granularity + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''profile_granularity'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  LEFT JOIN static_data_value sdv ON sdv.code = a.profile_granularity and sdv.type_id = 978
		  LEFT JOIN static_data_value sdvp ON sdvp.type_id = 17300 AND sdvp.code = a.internal_desk_id
		  WHERE #error_status.temp_id IS NULL 
			  AND sdv.value_id IS NULL
			  AND sdvp.value_id = 17302	--Shaped
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10013,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.profile_granularity + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''profile_granularity'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
 		  LEFT JOIN static_data_value sdv ON sdv.code = a.profile_granularity and sdv.type_id = 978
		  LEFT JOIN static_data_value sdvp ON sdvp.type_id = 17300 AND sdvp.code = a.internal_desk_id
		  WHERE #error_status.temp_id IS NULL 
			  AND sdv.value_id IS NULL
			  AND sdvp.value_id = 17300	--Deal Volume
			  AND a.profile_granularity IS NOT NULL
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10013,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.physical_financial_flag_detail + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''physical_financial_flag_detail'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id	
		  WHERE #error_status.temp_id IS NULL AND (a.physical_financial_flag_detail NOT IN (''Physical'', ''Financial'', ''p'', ''f''))
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10013,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.fx_rounding + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''fx_rounding'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id	
		  WHERE #error_status.temp_id IS NULL AND a.fx_rounding > 10
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10013,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.option_type + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''option_type'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id	
		  WHERE #error_status.temp_id IS NULL AND (a.option_type NOT IN (''c'', ''p'') AND a.option_type IS NOT NULL) 
	')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10013,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.option_excercise_type + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''option_excercise_type'' 
			) scm
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id	
		  WHERE #error_status.temp_id IS NULL AND (a.option_excercise_type NOT IN (''a'', ''e'', ''s'') AND a.option_excercise_type IS NOT NULL) 
	')
	
	-- Check for existance check for contract and counterparty mapping 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10015,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.counterparty_trader + ''",
				"column_name1": "'' + scm1.source_column_name + ''", 
                "column_value1": "'' + a.counterparty_id + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty_trader'' 
			) scm
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty_id'' 
			) scm1
		  INNER JOIN counterparty_contacts cc
		  	  ON cc.name = a.counterparty_trader
 		  LEFT JOIN source_counterparty sc 
			  ON sc.source_counterparty_id = cc.counterparty_id
		  	  AND sc.counterparty_id = a.counterparty_id		  
		  WHERE sc.source_counterparty_id IS NULL
	')
		
	-- Check for existance check for contract and counterparty mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT a.temp_id,
		  10015,
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''", 
                "column_value": "'' + a.counterparty2_trader + ''",
				"column_name1": "'' + scm1.source_column_name + ''", 
                "column_value1": "'' + a.counterparty_id2 + ''"
            }
          '',
			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty2_trader'' 
			) scm
			CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty_id2'' 
			) scm1
		  INNER JOIN counterparty_contacts cc
		  	  ON cc.name = a.counterparty2_trader
 		  LEFT JOIN source_counterparty sc 
			  ON sc.source_counterparty_id = cc.counterparty_id
		  	  AND sc.counterparty_id = a.counterparty_id2		  
		  WHERE sc.source_counterparty_id IS NULL
	')
			
	--Validation for Tier and Jurisdiction mapping
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT 
		a.temp_id,
			10015, 
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + ISNULL(a.state_value_id, '''') + ''",
				"column_name1": "'' + scm1.source_column_name + ''", 
				"column_value1": "'' + a.tier_id + ''"
			}
			'',
			a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''state_value_id'' 
		) scm
		CROSS APPLY (
			SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''tier_id'' 
		) scm1
		LEFT JOIN static_data_value sdv_jurisdiction 
			ON sdv_jurisdiction.code = a.state_value_id 
				AND sdv_jurisdiction.type_id = 10002 
		LEFT JOIN static_data_value sdv_tier 
			ON sdv_tier.code = a.tier_id 
				AND sdv_tier.type_id = 15000
		LEFT JOIN state_properties_details spd
			ON spd.state_value_id = sdv_jurisdiction.value_id
			AND spd.tier_id = sdv_tier.value_id
		WHERE sdv_jurisdiction.value_id IS NOT NULL
			AND sdv_tier.value_id IS NOT NULL
			AND spd.state_properties_details_id IS NULL
	')

	-- Check for existance check for reporting tier and reporting jurisdiction mapping
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		SELECT 
		a.temp_id,
			10015, 
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + ISNULL(a.reporting_jurisdiction_id, '''') + ''",
				"column_name1": "'' + scm1.source_column_name + ''", 
				"column_value1": "'' + a.reporting_tier_id + ''"
			}
			'',
			a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''reporting_jurisdiction_id'' 
		) scm
		CROSS APPLY (
			SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''reporting_tier_id'' 
		) scm1
		LEFT JOIN static_data_value sdv_jurisdiction 
			ON sdv_jurisdiction.code = a.reporting_jurisdiction_id 
				AND sdv_jurisdiction.type_id = 10002 
		LEFT JOIN static_data_value sdv_tier 
			ON sdv_tier.code = a.reporting_tier_id 
				AND sdv_tier.type_id = 15000
		LEFT JOIN state_properties_details spd
			ON spd.state_value_id = sdv_jurisdiction.value_id
			AND spd.tier_id = sdv_tier.value_id
		WHERE sdv_jurisdiction.value_id IS NOT NULL
			AND sdv_tier.value_id IS NOT NULL
			AND spd.state_properties_details_id IS NULL
	')

	--deal_volume_frequency conditional mandatory validation  for float deal.
	SET @sql = 'INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
				10002,
				''
				{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.deal_volume_frequency + ''"
				}
				'',
			a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			CROSS APPLY ( SELECT source_column_name 
			FROM #source_file_column_table 
			WHERE ixp_columns_name = ''deal_volume_frequency''
			) scm
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id		  
			WHERE #error_status.temp_id IS NULL AND
				a.deal_volume_frequency NOT IN (''x'', ''y'', ''a'', ''d'', ''h'', ''m'', ''t'')
 		'
	EXEC(@sql)



	-- Custom validation to validate Invalid data in Shipper Code 1.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			'''+ @process_id+''',
 			''Warning'',
 			''Import Data'',
 			'''+ @table_name+''',
 			''Invalid Data'',
 			CONCAT('' '', scm.source_column_name, '': '', a.shipper_code1, '' is not defined for ('', a.location_id, '', '', sc.counterparty_name, '', '', dbo.FNADateFormat(a.term_start), '')''),
 			''Check mapping.'',
 			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name
			FROM #source_file_column_table
			WHERE ixp_columns_name = ''shipper_code1''
		) scm
		INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
		LEFT JOIN source_minor_location sml ON sml.location_id = a.location_id
		LEFT JOIN shipper_code_mapping shcm 
			ON shcm.counterparty_id = sc.source_counterparty_id
		LEFT JOIN shipper_code_mapping_detail scmd 
			ON scmd.shipper_code_id = shcm.shipper_code_id
				AND scmd.shipper_code1 = a.shipper_code1
				AND scmd.effective_date <= a.term_start
				AND ISNULL(scmd.location_id, -1) = ISNULL(sml.source_minor_location_id, -1)
		WHERE (shcm.shipper_code_id IS NULL) AND a.shipper_code1 IS NOT NULL
	')

	-- Custom validation to validate Invalid data in Shipper Code 2.
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id,
			'''+ @process_id+''',
 			''Warning'',
 			''Import Data'',
 			'''+ @table_name+''',
 			''Invalid Data'',
 			CONCAT('' '', scm.source_column_name, '': '', a.shipper_code2, '' is not defined for ('', a.location_id, '', '', sc.counterparty_name, '', '', dbo.FNADateFormat(a.term_start), '')''),
 			''Check mapping.'',
 			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name
			FROM #source_file_column_table
			WHERE ixp_columns_name = ''shipper_code2''
		) scm
		INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
		LEFT JOIN source_minor_location sml ON sml.location_id = a.location_id
		LEFT JOIN shipper_code_mapping shcm 
				ON shcm.counterparty_id = sc.source_counterparty_id
		LEFT JOIN shipper_code_mapping_detail scmd 
			ON scmd.shipper_code_id = shcm.shipper_code_id
				AND scmd.shipper_code = a.shipper_code2
				AND scmd.effective_date <= a.term_start
				AND ISNULL(scmd.location_id, -1) = ISNULL(sml.source_minor_location_id, -1)
		WHERE (shcm.shipper_code_id IS NULL) AND a.shipper_code2 IS NOT NULL
	')

	-- Check for existance check for contract and counterparty mapping 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
				 10011,
				''{
					"column_name": "'' + scn_cpty.source_column_name + ''",
					"column_value": "'' + a.counterparty_id + ''",
					"column_name1": "'' + scn_ct.source_column_name + ''",
					"column_value1": "'' + a.contract_id + ''"

				}
			  '',
				 a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''counterparty_id''
          ) scn_cpty		  
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''contract_id''
          ) scn_ct
 			LEFT JOIN contract_group cg ON cg.source_contract_id = a.contract_id
			OUTER APPLY( SELECT counterparty_contract_address_id
						 FROm counterparty_contract_address cca
						 INNER JOIN source_counterparty sc 
							ON sc.source_counterparty_id = cca.counterparty_id
							AND sc.counterparty_id = a.counterparty_id
						 WHERE cca.contract_id = cg.contract_id
			) cca			 			
		 LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		 WHERE #error_status.temp_id IS NULL 
			AND cca.counterparty_contract_address_id IS NULL
	') 
	
	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 

	-- delete from temp table all the invalid data
 	EXEC('
		DELETE '+@import_temp_table_name + '
 		FROM #import_status
 		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id
		WHERE #import_status.error_code = ''Error''
		'
	)
	  
 	--PRINT('Saving erroneous deals  to table for process_id:' + @process_id + ' STARTED.')
 	DECLARE @default_error_type_id	INT
 
 	SET @start_ts = GETDATE()
 	SET @source = 'DEAL'
 
 	SELECT @default_error_type_id = error_type_id FROM source_deal_error_types WHERE error_type_code = 'MISC'
 	INSERT INTO source_deal_error_log(as_of_date, deal_id, source, error_type_id, error_description)
 	SELECT ISNULL(@import_as_of_date,GETDATE()), deal_id, @source, COALESCE(e.error_type_id, @default_error_type_id), MAX(error_description)
 	FROM #tmp_erroneous_deals d
 	LEFT JOIN source_deal_error_types e ON d.error_type_code = e.error_type_code
 	GROUP BY deal_id, e.error_type_id
 
 	--PRINT('Saving erroneous deals (4005) to table for process_id:' + @process_id + ' FINISHED. Process took ' + dbo.FNACalculateTimestamp(@start_ts))
 	--	end
	IF OBJECT_ID ('tempdb..#temp_source_data') IS NOT NULL
		DROP TABLE #temp_source_data

 	CREATE TABLE #temp_source_data(source_system_id NVARCHAR(20) COLLATE DATABASE_DEFAULT )
 
 	EXEC('INSERT #temp_source_data (source_system_id)
 	      SELECT MAX(source_system_id)
 	      FROM ' + @import_temp_table_name)
 	
 	SELECT @source_system_desc_id = source_system_id FROM #temp_source_data
 	--PRINT '######## source_system_desc_id ####:'+@source_system_desc_id
 
 	/*************************************SAVE DEAL DETAILS FOR SOME ERRORS FOR DEBUGGING STARTED******************************/
 	IF EXISTS(SELECT temp_id FROM #import_status WHERE type_error IN ('Data Repetition Error', 'Data Format Error'))
 	BEGIN
 		DECLARE @deal_debug_table_name			NVARCHAR(200)
 		DECLARE @deal_debug_table_name_suffix	NVARCHAR(100)
 		SET @deal_debug_table_name_suffix = 'source_deal_detail_debug'
 		SET @deal_debug_table_name = dbo.FNAProcessTableName(@deal_debug_table_name_suffix, 'farrms', @process_id)
 
 		--PRINT('Saving Deals having Data Repetition Error')
 		EXEC('SELECT DISTINCT t.*
 				INTO ' + @deal_debug_table_name + '
 				FROM ' + @import_temp_table_name + ' t 
 				INNER JOIN #import_status s ON t.deal_id = s.external_type_id
 				WHERE type_error IN (''Data Repetition Error'', ''Data Format Error'')
 		')
 	END
 	/*************************************SAVE DEAL DETAILS FOR SOME ERRORS FOR DEBUGGING FINISHED******************************/

 	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 
    ---- End Lookup validation--------
           	
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   ' + @import_temp_table_name + ' tmp
 	      INNER JOIN #import_status st ON  tmp.deal_id = st.external_type_id')
 	      
 	DROP TABLE #temp_source_data
 
 	IF @exec_mode = 1 --Used for Essent ONLY block starts
 	BEGIN
 		IF @error_log_table_name='formate2' 
 		BEGIN
 			/*
 				load erroneous deals in ssis_mtm_formate2_error_log only when loading from RDB
 				because when loading from stating table, we already have alll erroroneous deals
 				in ssis_mtm_formate2_error_log, so no need to insert them again
 			*/
 			IF @schedule_run <> 'n' 
 			BEGIN
 
 				--PRINT 'Delete the Existing Error '+CONVERT(NVARCHAR,GETDATE(),109)	
 		--		if @schedule_run='y'
 		--			delete [ssis_mtm_formate2_error_log] where deal_num in (select external_type_id from #import_status)
 
 				--PRINT 'Insert If Error Found ' +CONVERT(NVARCHAR,GETDATE(),109)
 			
 				CREATE INDEX IX_import_status_external_deal_id ON #import_status(external_type_id)
 
 				--we need to insert only those deals which are present in #import_status but not in ssis_mtm_formate2_error_log
 				--insert only those deals which have missing static data as they are the only deals which can be corrected 
 				--from staging TABLE
 
 				SET @start_ts = GETDATE()
 				CREATE TABLE #tmp_deleted_deals ( deal_id	NVARCHAR(250) COLLATE DATABASE_DEFAULT )
 				
 				--pick out missing static data deals
 				INSERT INTO #tmp_deleted_deals (deal_id)
 				SELECT DISTINCT external_type_id --distinct is mandatory here, to avoid insertion of muliple deals later
 				FROM #import_status s
 				INNER JOIN source_deal_error_log e ON e.deal_id = s.external_type_id
 				INNER JOIN source_deal_error_types t ON e.error_type_id = t.error_type_id
 				WHERE e.as_of_date = @import_as_of_date
 					AND e.source IN ('DEAL') AND t.error_type_code = 'MISSING_STATIC_DATA'
 				--PRINT('Inserted 4005 error deals in #tmp_deleted_deals. Process took ' + dbo.FNACalculateTimestamp(@start_ts))
 
 				SET @start_ts = GETDATE()
 				DELETE ssis_mtm_formate2_error_log 
 				FROM ssis_mtm_formate2_error_log err
 				INNER JOIN #tmp_deleted_deals st ON err.deal_num = st.deal_id	
 				--PRINT('Deleted 4005 errors from ssis_mtm_formate2_error_log. Process took ' + dbo.FNACalculateTimestamp(@start_ts))
 
 				SET @start_ts = GETDATE()
 				INSERT INTO [ssis_mtm_formate2_error_log]
 				   ([tran_num], [deal_num], [reference], [ins_type], [input_date]
 				   , [toolset], [portfolio], [internal_desk], [counterparty]
 				   , [buy_sell], [trader], [trade_date], [deal_side]
 				   , [price_region], [profile_leg], [unit_of_measure], [commodity]
 				   , [side_currency], [settlement_type], [ZONE], [location]
 				   , [region], [product], [settlement_currency]
 				   , [mtm_undisc], [mtm_undisc_eur], [mtm_disc], [mtm_disc_eur], [value_type]
 				   , [period_end_date], [location1]
 				   , [zone1], [time_bucket], [location_pair]
 				   , [deal_start_date], [deal_end_date], [settlement_date], [ias39_scope]
 				   , [ias39_book], [hedging_strategy], [hedging_side], [contract_value]
 				   , [period_start_date], [commodity_balance], [external_commodity_balance]
 				   , [ins_sub_type], [fx_flt], [country], [pipeline]
 				   , [legal_entity], [TaggingYear], [source_system_id]
 				   , [process_id], [as_of_date], [create_ts])
 				SELECT mtm.[tran_num], mtm.[deal_num], mtm.[reference], mtm.[ins_type], mtm.[input_date]
 				   , mtm.[toolset], mtm.[portfolio], mtm.[internal_desk], mtm.[counterparty]
 				   , mtm.[buy_sell], mtm.[trader], mtm.[trade_date], mtm.[deal_side]
 				   , mtm.[price_region], mtm.[profile_leg], mtm.[unit_of_measure], mtm.[commodity]
 				   , mtm.[side_currency], mtm.[settlement_type], mtm.[zone], mtm.[location]
 				   , mtm.[region], mtm.[product], mtm.[settlement_currency]
 				   , mtm.[mtm_undisc], mtm.[mtm_undisc_eur], mtm.[mtm_disc], mtm.[mtm_disc_eur], mtm.[value_type]
 				   , mtm.[period_end_date], mtm.[location1]
 				   , mtm.[zone1], mtm.[time_bucket], mtm.[location_pair]
 				   , mtm.[deal_start_date], mtm.[deal_end_date], mtm.[settlement_date], mtm.[ias39_scope]
 				   , mtm.[ias39_book], mtm.[hedging_strategy], mtm.[hedging_side], mtm.[contract_value]
 				   , mtm.[period_start_date], mtm.[commodity_balance], mtm.[external_commodity_balance]
 				   , mtm.[ins_sub_type], mtm.[fx_flt], mtm.[country], mtm.[pipeline]
 				   , mtm.[legal_entity], mtm.[TaggingYear], @source_system_desc_id, @process_id
 				   , @import_as_of_date, GETDATE()
 				FROM ssis_mtm_formate2 mtm
 				INNER JOIN #tmp_deleted_deals d ON mtm.deal_num = d.deal_id
 				--PRINT('Inserted 4005 errors to ssis_mtm_formate2_error_log from ssis_mtm_formate2. Process took ' + dbo.FNACalculateTimestamp(@start_ts))
 		
 				--PRINT 'Insert If Error Found DONE ' +CONVERT(NVARCHAR,GETDATE(),109)
 			END
 		END
 		ELSE IF @error_log_table_name='formate1' 
 		BEGIN
 			DELETE ssis_mtm_formate1_error_log
 			FROM ssis_mtm_formate1_error_log err
 			INNER JOIN (SELECT DISTINCT external_type_id FROM #import_status) st ON err.deal_num = st.external_type_id	
 
 			INSERT INTO [ssis_mtm_formate1_error_log]
 			   ([DATE], [trade_date], [trade_time]
 			   , [deal_num], [TYPE], [MTM_undisc]
 			   , [MTM_disc], [currency_A], [currency_B]
 			   , [Internal_Portfolio], [Desk], [Commodity]
 			   , [Trader], [CounterParty], [reference]
 			   , [price_region], [buy_sell], [ias39_scope]
 			   , [ias39_book], [hedging_strategy], [hedging_side]
 			   , [contract_value], [legal_entity], [source_system_id]
 			   , [process_id], [create_ts], [as_of_date])
 			SELECT mtm.[date], mtm.[trade_date], mtm.[trade_time]
 			   , mtm.[deal_num], mtm.[type], mtm.[MTM_undisc]
 			   , mtm.[MTM_disc], mtm.[currency_A], mtm.[currency_B]
 			   , mtm.[Internal_Portfolio], mtm.[Desk], mtm.[Commodity]
 			   , mtm.[Trader], mtm.[CounterParty], mtm.[reference]
 			   , mtm.[price_region], mtm.[buy_sell], mtm.[ias39_scope]
 			   , mtm.[ias39_book], mtm.[hedging_strategy], mtm.[hedging_side]
 			   , mtm.[contract_value], mtm.[legal_entity], 	@source_system_desc_id 
 			   , @process_id, GETDATE(), @import_as_of_date
 			 FROM [ssis_mtm_formate1] mtm
 			 INNER JOIN (SELECT DISTINCT external_type_id FROM #import_status) st ON mtm.deal_num = st.external_type_id
 		END
 	END
	--Used for Essent ONLY block ends
 
 	CREATE TABLE #temp_deal_header (
 		[deal_id]                         NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[source_system_id]                NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[term_start]                      NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[term_end]                        NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[header_buy_sell_flag]            NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[option_flag]                     NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[structured_deal_id]              NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[counterparty_id]                 INT NULL,
 		[source_deal_type_id]             NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[deal_sub_type_type_id]           NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[option_type]                     NVARCHAR(50) COLLATE DATABASE_DEFAULT  NULL,
 		[option_excercise_type]           NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[source_system_book_id1]          NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[source_system_book_id2]          NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[source_system_book_id3]          NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[source_system_book_id4]          NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[description1]                    NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[description2]                    NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[description3]                    NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[description4]                    NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,	-- new column as of RWE-DE
 		[deal_category_value_id]          NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[trader_id]                       [INT] NULL,
 		[contract_id]                     [INT] NULL,
 		[physical_financial_flag]         NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[ext_deal_id]                     NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[deal_date]                       NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		[broker_id]                       [INT] NULL,
 		legal_entity                      INT,
 		internal_desk_id                  INT,
 		product_id                        INT,
 		internal_portfolio_id             INT,
 		commodity_id                      INT,
 		reference                         NVARCHAR(250) COLLATE DATABASE_DEFAULT ,
 		[block_type]                      INT,	--sdv
 		[block_define_id]                 INT,	--sdv
 		[granularity_id]                  INT,	--sdv
 		[Pricing]                         INT,	--sdv
 		[unit_fixed_flag]                 NCHAR(1) COLLATE DATABASE_DEFAULT ,
 		[broker_unit_fees]                [FLOAT] NULL,
 		[broker_fixed_cost]               [FLOAT] NULL,
 		[broker_currency_id]              NVARCHAR(250) COLLATE DATABASE_DEFAULT  NULL,	--scur
 		[term_frequency]                  NCHAR(1) COLLATE DATABASE_DEFAULT ,
 		[option_settlement_date]          NVARCHAR(50) COLLATE DATABASE_DEFAULT ,
 		[template_id]                     INT,
 		[close_reference_id]              NVARCHAR(50) COLLATE DATABASE_DEFAULT,
 		[deal_seperator_id]               INT,
 		[deal_status]                     NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 		[Intrabook_deal_flag]             NCHAR(2) COLLATE DATABASE_DEFAULT,
 		[internal_deal_type_value_id]     INT,
 		[internal_deal_subtype_value_id]  INT,
 		sort_id                           INT,
 		aggregate_environment             NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		aggregate_envrionment_comment     NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		assigned_by                       NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		assigned_date                     NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		assignment_type_value_id          INT,
 		back_office_sign_off_by           NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		back_office_sign_off_date         NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		book_transfer_id                  INT,
 		compliance_year                   NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		confirm_rule                      NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		confirm_status_type               NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		deal_locked                       NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		deal_reference_type_id            INT,
 		deal_rules                        NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		entire_term_end                   NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		entire_term_start                 NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		generation_source                 NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		generator_id                      INT,
 		rec_formula_id                    INT,
 		rec_price                         NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		risk_sign_off_by                  NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		risk_sign_off_date                NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		rolling_avg                       NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		state_value_id                    INT,
 		status_date                       NVARCHAR(100) COLLATE DATABASE_DEFAULT  NULL,
 		status_value_id                   INT,
 		sub_book                          NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL,
 		verified_by                       NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL,
 		verified_date                     NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL,
 		timezone_id						  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		counterparty_id2				  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		trader_id2						  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		actual_volume					  [FLOAT],
		schedule_volume					  [FLOAT],
		pricing_type                      INT,	--sdv,
		tier_id							  INT NULL,
		profile_granularity				  NVARCHAR(100) COLLATE DATABASE_DEFAULT NULL,
		fas_deal_type_value_id			  INT,
		internal_counterparty			  INT,
		counterparty_trader				  INT,		
		fx_conversion_market			  INT,
		fx_rounding						  INT,
		fx_option						  INT,
		counterparty2_trader			  INT,
		clearing_counterparty_id		  INT,
		reporting_jurisdiction_id		  INT,
		reporting_tier_id				  INT,
		reporting_group1 				  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		reporting_group2 				  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		reporting_group3 				  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		reporting_group4 				  NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		reporting_group5 				  NVARCHAR(100) COLLATE DATABASE_DEFAULT

 	) ON [PRIMARY]
 	
 	DECLARE @sql_header1 NVARCHAR(MAX)
 	DECLARE @sql_header2 NVARCHAR(MAX)
 	
 	SET @sql = 'DECLARE @delete_source_deal_header_ids NVARCHAR(MAX)
 				SELECT  @delete_source_deal_header_ids = COALESCE(@delete_source_deal_header_ids + '','', '''') + CAST(sdh.source_deal_header_id AS NVARCHAR(30))
 				FROM '+ @import_temp_table_name + ' a 
 				INNER JOIN source_deal_header sdh ON a.deal_id = sdh.deal_id
 				WHERE ISNULL(a.deal_status, ''New'') = ''Voided''
 				SET @delete_source_deal_header_ids = '''' + @delete_source_deal_header_ids + ''''
 				
 				IF @delete_source_deal_header_ids IS NOT NULL
 				BEGIN
 					EXEC spa_sourcedealheader @flag = ''d'', @source_deal_header_id = @delete_source_deal_header_ids, @call_from_import = ''y''
 				END
 				'
 	--PRINT(@sql)
 	EXEC(@sql)
	
 	SET @sql_header1 = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #temp_deal_header(deal_id,source_system_id,term_start,term_end,header_buy_sell_flag,option_flag,structured_deal_id,counterparty_id,source_deal_type_id,deal_sub_type_type_id,option_type,option_excercise_type,source_system_book_id1,source_system_book_id2,source_system_book_id3,source_system_book_id4,description1,description2,description3,description4,deal_category_value_id,trader_id,contract_id,physical_financial_flag,ext_deal_id,deal_date,broker_id,legal_entity,internal_desk_id,product_id,internal_portfolio_id,commodity_id,reference,block_type,block_define_id,granularity_id,Pricing,unit_fixed_flag,broker_unit_fees,broker_fixed_cost,broker_currency_id,term_frequency,option_settlement_date,template_id,close_reference_id,deal_seperator_id,deal_status,Intrabook_deal_flag,internal_deal_type_value_id,internal_deal_subtype_value_id,sort_id,aggregate_environment,aggregate_envrionment_comment,assigned_by,assigned_date,assignment_type_value_id,back_office_sign_off_by,back_office_sign_off_date,book_transfer_id,compliance_year,confirm_rule,confirm_status_type,deal_locked,deal_reference_type_id,deal_rules,entire_term_end,entire_term_start,generation_source,generator_id,rec_formula_id,rec_price,risk_sign_off_by,risk_sign_off_date,rolling_avg,state_value_id,status_date,status_value_id,sub_book,verified_by,verified_date, timezone_id,counterparty_id2,trader_id2, pricing_type, tier_id, profile_granularity,fas_deal_type_value_id, 
							internal_counterparty, counterparty_trader, fx_conversion_market, fx_rounding, fx_option, counterparty2_trader, clearing_counterparty_id, reporting_jurisdiction_id, reporting_tier_id
							, reporting_group1
							, reporting_group2
							, reporting_group3
							, reporting_group4
							, reporting_group5							
							)
 					    SELECT MAX(a.deal_id) deal_id,
 						MAX(a.source_system_id) source_system_id,
 						MIN(CAST(a.term_start AS DATETIME) ),
 						MAX(CAST(a.term_end AS DATETIME)),
 						ISNULL(Lower(MAX(a.header_buy_sell_flag)), MAX(sdht.header_buy_sell_flag)) header_buy_sell_flag,
 						MAX(a.option_flag) option_flag,
 						MAX(a.structured_deal_id) structured_deal_id,
 						ISNULL(MAX(cp.source_counterparty_id),MAX(sdht.counterparty_id)) counterparty_id,
 						ISNULL(MAX(sdt.source_deal_type_id), MAX(sdht.source_deal_type_id)) source_deal_type_id,
 						ISNULL(MAX(sdst.source_deal_type_id), MAX(sdht.deal_sub_type_type_id)) deal_sub_type_type_id,
 						MAX(CASE WHEN a.option_type IN (''c'', ''p'') THEN a.option_type ELSE NULL END) option_type,
						MAX(CASE WHEN a.option_excercise_type IN (''a'', ''e'', ''s'') THEN a.option_excercise_type ELSE NULL END) option_excercise_type, 						
 						MAX(ISNULL(bb1.source_book_id,ssbm.source_system_book_id1)) source_system_book_id1,
 						MAX(ISNULL(bb2.source_book_id,ssbm.source_system_book_id2)) source_system_book_id2,
 						MAX(ISNULL(bb3.source_book_id,ssbm.source_system_book_id3)) source_system_book_id3,
 						MAX(ISNULL(bb4.source_book_id,ssbm.source_system_book_id4)) source_system_book_id4,
 						MAX(a.description1) description1,
 						MAX(a.description2) description2,
 						MAX(a.description3) description3,
 						MAX(a.description4) description4,
 						ISNULL(MAX(deal_category_code.value_id),MAX(deal_category_value.value_id))  deal_category_value_id,
 						MAX(st.source_trader_id) trader_id,
 						COALESCE(MAX(cg.contract_id),MAX(sdht.contract_id),' + CAST(ISNULL(@base_contract_id , 0) AS NVARCHAR(10)) + ') contract_id,
 						ISNULL(MAX(a.physical_financial_flag),MAX(sdht.physical_financial_flag)) physical_financial_flag,
 						MAX(a.ext_deal_id) ext_deal_id,
 						MIN(a.deal_date) deal_date,
 						ISNULL(MAX(sb.source_counterparty_id),MAX(sdht.broker_id)) broker_id,
 						MAX(le.source_legal_entity_id) legal_entity,
						COALESCE(MAX(sdv_internal_desk_id.value_id), MAX(a.internal_desk_id), MAX(sdht.internal_desk_id)) [internal_desk_id],
 						ISNULL(MAX(sdv_product_id.value_id), MAX(sdht.product_id)) product_id,
 						ISNULL(MAX(sdv_ipi.value_id), MAX(sdht.internal_portfolio_id)) internal_portfolio_id,
 						ISNULL(MAX(scom.source_commodity_id), MAX(sdht.commodity_id)) commodity_id ,
 						MAX(a.reference) reference, 
 						MAX(sdv_blo.value_id) [block_type] ,
 						ISNULL(MAX(sdv_blo1.value_id), MAX(sdht.block_define_id)) [block_define_id],
 						ISNULL(MAX(sdv_gra.value_id), 
 						MAX(sdht.granularity_id)) [granularity_id],
 						MAX(sdv_pri.value_id) [Pricing] ,
 						MAX(a.[unit_fixed_flag]) [unit_fixed_flag] ,
 						MAX(a.[broker_unit_fees]) [broker_unit_fees],
 						MAX(a.[broker_fixed_cost]) [broker_fixed_cost],
 						MAX(scur_bro.source_currency_id) [broker_currency_id], 
 						ISNULL(MAX(a.[term_frequency]), MAX(sdht.[term_frequency_type])) [term_frequency] , 
 						MAX(a.[option_settlement_date]) [option_settlement_date] ,
 						ISNULL(MAX(sdht.[update_template_id]), MAX(sdht.[template_id])) [template_id],
 						MAX(sdh_ref.source_deal_header_id) [close_reference_id],
 						MAX(deal_seperator_id) [deal_seperator_id],
 						COALESCE(MAX(deal_status.value_id), MAX(a.deal_status), MAX(sdht.deal_status)) [deal_status],
 						MAX(a.Intrabook_deal_flag) [Intrabook_deal_flag],
 						MAX(idtvi.internal_deal_type_subtype_id),
 						MAX(idtst.internal_deal_type_subtype_id),
 						MIN(temp_id) sort_id,
 						MAX(a.aggregate_environment)  aggregate_environment,
 						MAX(a.aggregate_envrionment_comment) aggregate_envrionment_comment,
 						MAX(a.assigned_by) assigned_by,
 						MAX(a.assigned_date) assigned_date,
 						MAX(a.assignment_type_value_id) assignment_type_value_id,
 						MAX(a.back_office_sign_off_by) back_office_sign_off_by,
 						MAX(a.back_office_sign_off_date) back_office_sign_off_date,
 						MAX(a.book_transfer_id) book_transfer_id,
 						MAX(a.compliance_year) compliance_year,
 						MAX(a.confirm_rule) confirm_rule,
 						'
				SET @sql_header1 += 'ISNULL(MAX(status_type.value_id),
						MAX(sdht.confirm_status_type)) confirm_status_type,
 						ISNULL(MAX(a.deal_locked),MAX(sdht.deal_locked)) deal_locked,
 						MAX(a.deal_reference_type_id) deal_reference_type_id,
 						MAX(a.deal_rules) deal_rules,
 						ISNULL(MAX(CAST(a.entire_term_end AS DATETIME) ),MAX(CAST(a.term_end AS DATETIME) )) entire_term_end,
						ISNULL(MIN(CAST(a.entire_term_start AS DATETIME) ),MIN(CAST(a.term_start AS DATETIME) )) entire_term_start,
 						MAX(a.generation_source) generation_source,
 						MAX(rec.generator_id) generator_id,
 						MAX(a.rec_formula_id) rec_formula_id,
 						MAX(a.rec_price) rec_price,
 						MAX(a.risk_sign_off_by) risk_sign_off_by,
 						MAX(a.risk_sign_off_date) risk_sign_off_date,
 						MAX(a.rolling_avg) rolling_avg,
 						MAX(sdv_jurisdiction.value_id) state_value_id,
 						MAX(a.status_date) status_date,
 						MAX(a.status_value_id) status_value_id,
 						MAX(ssbm.book_deal_type_map_id) sub_book,
 						MAX(a.verified_by) verified_by,
 						MAX(a.verified_date) verified_date
						
 						,MAX(tz.TIMEZONE_ID) timezone_id
						,MAX(cp2.source_counterparty_id) cstatic_data_vanueounterparty_id2,
						MAX(st2.source_trader_id) trader_id2,
						MAX(sdv_ptype.value_id) [pricing_type],
						MAX(sdv_tier.value_id) [tier_id] ,
						MAX(sdv_pg.value_id) [profile_granularity],
						MAX(sdv_transaction_type.value_id)  fas_deal_type_value_id,
						MAX(sc_ic.source_counterparty_id) internal_counterparty,
						MAX(ct.counterparty_contact_id) counterparty_trader, 						
						MAX(sdv_fcm.value_id) fx_conversion_market, 
						MAX(CASE WHEN a.fx_rounding > 10 THEN NULL ELSE a.fx_rounding END) fx_rounding, 
						MAX(sdv_fo.value_id) fx_option,
						MAX(ct2.counterparty_contact_id) counterparty2_trader,
						MAX(cp3.source_counterparty_id) clearing_counterparty_id,
						MAX(sdvrj.value_id) reporting_jurisdiction_id,
						MAX(sdvrt.value_id) reporting_tier_id, '
	SET @sql_header1 += ' MAX(reporting_group1.value_id) reporting_group1,
						MAX(reporting_group2.value_id) reporting_group2,
						MAX(reporting_group3.value_id) reporting_group3,
						MAX(reporting_group4.value_id) reporting_group4,
						MAX(reporting_group5.value_id) reporting_group5
 						'
 	SET @sql_header2 = CAST('' AS NVARCHAR(MAX)) + N' 
 			FROM ' + @import_temp_table_name + ' a 
 			LEFT JOIN source_counterparty cp ON cp.counterparty_id = a.counterparty_id
 				AND cp.source_system_id = a.source_system_id
			LEFT JOIN source_deal_header sdh_ref ON sdh_ref.deal_id = a.close_reference_id
 			LEFT JOIN source_traders st ON st.trader_id = a.trader_id 
 				AND st.source_system_id = a.source_system_id
 			LEFT JOIN source_counterparty sb ON sb.counterparty_id = a.broker_id
 					AND sb.source_system_id = a.source_system_id AND sb.int_ext_flag = ''b''
 			LEFT JOIN contract_group cg ON cg.source_contract_id = a.contract_id
 					AND cg.source_system_id = a.source_system_id
 			LEFT JOIN source_deal_header_template sdht ON sdht.template_name = a.[template_id]
			LEFT JOIN source_deal_type sdtt ON sdtt.source_deal_type_id = sdht.source_deal_type_id
 			LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = ISNULL(a.source_deal_type_id, sdtt.deal_type_id)
 					AND sdt.source_system_id = a.source_system_id
 			LEFT JOIN source_deal_type sdst ON sdst.deal_type_id = a.deal_sub_type_type_id
 						AND sdst.source_system_id = a.source_system_id
 			LEFT JOIN source_book bb1 ON bb1.source_system_book_id = a.source_system_book_id1
 				AND bb1.source_system_id = a.source_system_id AND bb1.source_system_book_type_value_id = 50
 			LEFT JOIN source_book bb2 ON bb2.source_system_book_id = a.source_system_book_id2
 					AND bb2.source_system_id = a.source_system_id AND bb2.source_system_book_type_value_id = 51
 			LEFT JOIN source_book bb3 ON bb3.source_system_book_id = a.source_system_book_id3
 					AND bb3.source_system_id = a.source_system_id AND bb3.source_system_book_type_value_id = 52
 			LEFT JOIN source_book bb4 ON bb4.source_system_book_id = a.source_system_book_id4
 					AND bb4.source_system_id = a.source_system_id AND bb4.source_system_book_type_value_id = 53
 			LEFT JOIN source_legal_entity le 
 				ON le.legal_entity_id = a.legal_entity 
 				AND le.source_system_id = a.source_system_id
 			LEFT JOIN  static_data_value sdv_internal_desk_id ON sdv_internal_desk_id.code = a.internal_desk_id AND sdv_internal_desk_id.type_id = 17300
 			LEFT JOIN  static_data_value sdv_product_id ON sdv_product_id.code = a.product_id AND sdv_product_id.type_id = 4100
			LEFT JOIN  static_data_value sdv_ipi ON sdv_ipi.code = a.internal_portfolio_id AND sdv_ipi.type_id = 39800 					
 			LEFT JOIN source_commodity scom 
 				ON scom.commodity_id = a.commodity_id 
 				AND scom.source_system_id = a.source_system_id
 			LEFT JOIN source_currency scur_bro 
 				ON scur_bro.currency_id = a.[broker_currency_id] 
 				AND scur_bro.source_system_id = a.source_system_id'
				
		SET @sql_header2 = @sql_header2 + '
 			LEFT JOIN static_data_value sdv_blo ON sdv_blo.[code] = a.[block_type] AND sdv_blo.type_id = 12000
 			LEFT JOIN static_data_value sdv_blo1 ON sdv_blo1.[code] = a.[block_define_id] AND sdv_blo1.type_id = 10018
 			LEFT JOIN static_data_value sdv_gra ON sdv_gra.[code] = a.[granularity_id] AND sdv_gra.type_id = 978
 			LEFT JOIN static_data_value sdv_pri ON sdv_pri.[code] = a.[Pricing] AND sdv_pri.type_id = 1600
 			LEFT JOIN rec_generator rec ON rec.code = a.generator_id AND rec.id = a.facility_id
 			LEFT JOIN static_data_value deal_category_code ON deal_category_code.code = a.deal_category_value_id AND deal_category_code.type_id = 475
 			LEFT JOIN static_data_value deal_category_value ON deal_category_value.code = a.deal_category_value_id AND deal_category_value.type_id = 475
 			LEFT JOIN static_data_value deal_status ON deal_status.code  = a.deal_status AND deal_status.type_id = 5600
 			LEFT JOIN static_data_value status_type ON status_type.code = a.confirm_status_type AND status_type.type_id = 17200
			LEFT JOIN source_system_book_map ssbm ON ssbm.logical_name = a.sub_book
			LEFT JOIN source_counterparty cp2 ON cp2.counterparty_id = a.counterparty_id2
			LEFT JOIN source_traders st2 ON st2.trader_id = a.trader_id2 
			LEFT JOIN static_data_value sdv_ptype ON sdv_ptype.[code] = a.[pricing_type] AND sdv_ptype.type_id = 46700
			LEFT JOIN static_data_value sdv_jurisdiction ON sdv_jurisdiction.[code] = a.[state_value_id] AND sdv_jurisdiction.type_id = 10002
			LEFT JOIN static_data_value sdv_tier ON sdv_tier.[code] = a.[tier_id] and sdv_tier.type_id = 15000
			
			LEFT JOIN static_data_value sdvrj ON sdvrj.[code] = a.[reporting_jurisdiction_id] AND sdvrj.type_id = 10002
			LEFT JOIN static_data_value sdvrt ON sdvrt.[code] = a.[reporting_tier_id] and sdvrt.type_id = 15000
			LEFT JOIN static_data_value sdv_transaction_type ON sdv_transaction_type.[code] = a.[fas_deal_type_value_id] and sdv_transaction_type.type_id = 400
			LEFT JOIN static_data_value sdv_pg ON sdv_pg.[code] = a.[profile_granularity] AND sdv_pg.type_id = 978
			LEFT JOIN source_counterparty sc_ic ON sc_ic.counterparty_id = a.internal_counterparty
 					AND sc_ic.source_system_id = a.source_system_id --AND sc_ic.int_ext_flag = ''i''
			OUTER APPLY ( SELECT cc.counterparty_contact_id
						  FROM counterparty_contacts cc
						  INNER JOIN source_counterparty sc 
							  ON sc.source_counterparty_id = cc.counterparty_id
							  AND sc.counterparty_id = a.counterparty_id
						  WHERE cc.name = a.counterparty_trader
			) ct
			LEFT JOIN internal_deal_type_subtype_types idtvi ON idtvi.internal_deal_type_subtype_type = a.internal_deal_type_value_id AND idtvi.type_subtype_flag IS NULL 
			LEFT JOIN internal_deal_type_subtype_types idtst ON idtst.internal_deal_type_subtype_type = a.internal_deal_subtype_value_id AND idtst.type_subtype_flag = ''y''
			OUTER APPLY ( SELECt sdv.value_id 
						  FROM static_data_value sdv
						  INNER JOIN static_data_type sdt 
							  ON sdt.type_id = sdv.type_id
							  AND sdt.type_name = ''Market''
						 WHERE sdv.code = a.fx_conversion_market
			) sdv_fcm
			LEFT JOIN static_data_value sdv_fo ON sdv_fo.[code] = a.fx_option AND sdv_fo.type_id = 107400
			OUTER APPLY ( SELECT cc.counterparty_contact_id
						  FROM counterparty_contacts cc
						  INNER JOIN source_counterparty sc 
							  ON sc.source_counterparty_id = cc.counterparty_id
							  AND sc.counterparty_id = a.counterparty_id2
						  WHERE cc.name = a.counterparty2_trader
			) ct2
			LEFT JOIN source_counterparty cp3 ON cp3.counterparty_id = a.clearing_counterparty_id 	
			LEFT JOIN time_zones tz
				ON tz.TIMEZONE_NAME = a.timezone_id		 '	
	SET @sql_header2 = @sql_header2 + 'LEFT JOIN static_data_value reporting_group1 ON reporting_group1.[code] = a.[reporting_group1] AND reporting_group1.type_id = 113000
			LEFT JOIN static_data_value reporting_group2 ON reporting_group2.[code] = a.[reporting_group2] AND reporting_group2.type_id = 113100
			LEFT JOIN static_data_value reporting_group3 ON reporting_group3.[code] = a.[reporting_group3] AND reporting_group3.type_id = 113200
			LEFT JOIN static_data_value reporting_group4 ON reporting_group4.[code] = a.[reporting_group4] AND reporting_group4.type_id = 113300
			LEFT JOIN static_data_value reporting_group5 ON reporting_group5.[code] = a.[reporting_group5] AND reporting_group5.type_id = 113400

 			WHERE ISNULL(a.deal_status, ''New'') <> ''Voided'' 
 			'	
 			
 	SET @sql_header2 = @sql_header2 + ' group by a.deal_id ' + CASE WHEN @exec_mode = 6 THEN ', sdv_ds.[value_id]' ELSE '' END + ' order by sort_id'
 	--PRINT(@sql_header1)
 	--PRINT(@sql_header2)
 	EXEC(@sql_header1 + @sql_header2)

 	--PRINT 'Deal header Update'
 	SET @sql_header1 = NULL
 	SET @sql_header1 = CAST('' AS NVARCHAR(MAX)) + N'  UPDATE [source_deal_header]
 						SET source_system_id = a.source_system_id,
 						deal_id = a.deal_id,
 						deal_date = a.deal_date,
 						ext_deal_id = a.ext_deal_id,
 						physical_financial_flag = a.physical_financial_flag,
 						structured_deal_id = a.structured_deal_id,
 						counterparty_id = a.counterparty_id,
 						entire_term_start = a.entire_term_start,
 						entire_term_end = a.entire_term_end,
 						source_deal_type_id = a.source_deal_type_id,
 						deal_sub_type_type_id = a.deal_sub_type_type_id,
 						option_flag = a.option_flag,
 						option_type = a.option_type,
 						option_excercise_type = a.option_excercise_type,
 						source_system_book_id1 = a.source_system_book_id1,
 						source_system_book_id2 = a.source_system_book_id2,
 						source_system_book_id3 = a.source_system_book_id3,
 						source_system_book_id4 = a.source_system_book_id4,
 						description1 = a.description1,
 						description2 = a.description2,
 						description3 = a.description3,
 						deal_category_value_id = a.deal_category_value_id,
 						trader_id = ISNULL(a.trader_id, b.trader_id),
 						internal_deal_type_value_id = ISNULL(a.internal_deal_type_value_id, b.internal_deal_type_value_id),
 						internal_deal_subtype_value_id = ISNULL(a.internal_deal_subtype_value_id, b.internal_deal_subtype_value_id),
 						template_id = a.template_id,
 						header_buy_sell_flag = a.header_buy_sell_flag,
 						broker_id = a.broker_id,
 						generator_id = a.generator_id,
 						status_value_id = a.status_value_id,
 						status_date = a.status_date,
 						assignment_type_value_id = a.assignment_type_value_id,
 						compliance_year = a.compliance_year,
 						state_value_id = a.state_value_id,
 						assigned_date = a.assigned_date,
 						assigned_by = a.assigned_by,
 						generation_source = a.generation_source,
 						aggregate_environment = a.aggregate_environment,
 						aggregate_envrionment_comment = a.aggregate_envrionment_comment,
 						rec_price = a.rec_price,
 						rec_formula_id = a.rec_formula_id,
 						rolling_avg = a.rolling_avg,
 						contract_id = a.contract_id,
 						legal_entity = a.legal_entity,
 						internal_desk_id = a.internal_desk_id,
 						product_id = a.product_id,
						'
				SET @sql_header1 = @sql_header1 + '
 						internal_portfolio_id = a.internal_portfolio_id,
 						commodity_id = a.commodity_id,
 						reference = a.reference,
 						deal_locked = a.deal_locked,
 						close_reference_id = a.close_reference_id,
 						block_type = a.block_type,
 						block_define_id = a.block_define_id,
 						granularity_id = a.granularity_id,
 						Pricing = a.Pricing,
 						deal_reference_type_id = a.deal_reference_type_id,
 						unit_fixed_flag = a.unit_fixed_flag,
 						broker_unit_fees = a.broker_unit_fees,
 						broker_fixed_cost = a.broker_fixed_cost,
 						broker_currency_id = a.broker_currency_id,
 						deal_status = a.deal_status,
 						term_frequency = a.term_frequency,
 						option_settlement_date = a.option_settlement_date,
 						verified_by = a.verified_by,
 						verified_date = a.verified_date,
 						risk_sign_off_by = a.risk_sign_off_by,
 						risk_sign_off_date = a.risk_sign_off_date,
 						back_office_sign_off_by = a.back_office_sign_off_by,
 						back_office_sign_off_date = a.back_office_sign_off_date,
 						book_transfer_id = a.book_transfer_id,
 						confirm_status_type = a.confirm_status_type,
 						sub_book = a.sub_book,
 						deal_rules = a.deal_rules,
 						confirm_rule = a.confirm_rule,
 						description4 = a.description4
 						,timezone_id = a.timezone_id
						,counterparty_id2 = a.counterparty_id2,
						trader_id2 = a.trader_id2,
						pricing_type = a.pricing_type,
						tier_value_id = a.tier_id,
						profile_granularity = a.profile_granularity, 
						fas_deal_type_value_id = a.fas_deal_type_value_id,
						internal_counterparty = a.internal_counterparty,
						counterparty_trader = a.counterparty_trader,						
						fx_conversion_market = a.fx_conversion_market,
						fx_rounding = a.fx_rounding,
						fx_option = a.fx_option,
						counterparty2_trader = a.counterparty2_trader,
						clearing_counterparty_id = a.clearing_counterparty_id,
						reporting_jurisdiction_id = a.reporting_jurisdiction_id,
						reporting_tier_id = a.reporting_tier_id,
						update_ts = getdate(),
						update_user = [dbo].[FNADBUser](),
						reporting_group1 = a.reporting_group1,
						reporting_group2 = a.reporting_group2,
						reporting_group3 = a.reporting_group3,
						reporting_group4 = a.reporting_group4,
						reporting_group5 = a.reporting_group5
 				FROM #temp_deal_header a 
 				INNER JOIN source_deal_header b 
 					ON  b.source_system_id = a.source_system_id
 					AND b.deal_id = a.deal_id'
 
 	--PRINT(@sql_header1)
	  
	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql_header1, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE 
	BEGIN
		EXEC(@sql_header1)
	END	
	
 	DECLARE @updated_deals NVARCHAR(MAX)
 	
 	SELECT @updated_deals = COALESCE(@updated_deals + ',', '') + CAST(b.source_deal_header_id AS NVARCHAR(20))
 	FROM  #temp_deal_header a
 	INNER JOIN source_deal_header b
         ON  b.source_system_id = a.source_system_id
         AND b.deal_id = a.deal_id
 	
 	IF OBJECT_ID('tempdb..#inserted_deals') IS NOT NULL
 		DROP TABLE #inserted_deals
 		
 	CREATE TABLE #inserted_deals (source_deal_header_id INT, profile_granularity INT)
 	
 	--PRINT 'Deal header Insert'
 	SET @sql_header1 = CAST('' AS NVARCHAR(MAX)) + N' 
 					INSERT INTO [source_deal_header]
 							([source_system_id]
 							,[deal_id]
 							,[deal_date]
 							,[ext_deal_id]
 							,[physical_financial_flag]
 							,[structured_deal_id]
 							,[counterparty_id]
 							,[entire_term_start]
 							,[entire_term_end]
 							,[source_deal_type_id]
 							,[deal_sub_type_type_id]
 							,[option_flag]
 							,[option_type]
 							,[option_excercise_type]
 							,[source_system_book_id1]
 							,[source_system_book_id2]
 							,[source_system_book_id3]
 							,[source_system_book_id4]
 							,[description1]
 							,[description2]
 							,[description3]
 							,[description4]
 							,[deal_category_value_id]
 							,[trader_id]
 							,[header_buy_sell_flag]
 							,[broker_id]
 							,[contract_id]
 							,legal_entity
 							,internal_desk_id 
 							,product_id
 							,internal_portfolio_id
 							,commodity_id 
 							,reference
 							, [block_type] 
 							,[block_define_id] 
 							,[granularity_id] 
 							,[Pricing] 
 							,[unit_fixed_flag] 
 							,[broker_unit_fees]
 							,[broker_fixed_cost]
 							,[broker_currency_id]
 							,[term_frequency]  
 							,[option_settlement_date] 
 							,[template_id]
 							,[close_reference_id]
 							,[deal_reference_type_id]
 							,[deal_status]
 							,[internal_deal_type_value_id]
 							,[internal_deal_subtype_value_id],
 							aggregate_environment,
 							aggregate_envrionment_comment,
 							assigned_by,
 							assigned_date,
 							assignment_type_value_id,
 							back_office_sign_off_by,
 							back_office_sign_off_date,
 							book_transfer_id,
 							compliance_year,
 							confirm_rule,
 							confirm_status_type,
 							deal_locked,
 							deal_rules,
 							generation_source,
 							generator_id,
 							rec_formula_id,
 							rec_price,
 							risk_sign_off_by,
 							risk_sign_off_date,
 							rolling_avg,
 							state_value_id,
 							status_date,
 							status_value_id,
 							sub_book,
 							verified_by,
 							verified_date
 							'
				SET @sql_header1 = @sql_header1 + '
							,timezone_id
							,counterparty_id2,
							trader_id2,
							pricing_type,
 							tier_value_id,
							profile_granularity,
							fas_deal_type_value_id, 
							internal_counterparty, 
							counterparty_trader,														
							fx_conversion_market, 
							fx_rounding, 
							fx_option,
							counterparty2_trader,
							clearing_counterparty_id,
							reporting_jurisdiction_id,
							reporting_tier_id,
							reporting_group1,
							reporting_group2,
							reporting_group3,
							reporting_group4,
							reporting_group5
				)
 				OUTPUT INSERTED.source_deal_header_id, INSERTED.profile_granularity
 				INTO #inserted_deals(source_deal_header_id, profile_granularity)			
 				SELECT		a.[source_system_id] 
 							,a.deal_id
 							,a.deal_date
 							,a.ext_deal_id
 							,a.physical_financial_flag
 							,a.structured_deal_id
 							,a.counterparty_id
 							,a.entire_term_start
 							,a.entire_term_end
 							,a.source_deal_type_id
 							,a.deal_sub_type_type_id
 							,a.option_flag
 							,a.option_type
 							,a.option_excercise_type
 							,a.source_system_book_id1
 							,a.source_system_book_id2
 							,a.source_system_book_id3
 							,a.source_system_book_id4
 							,a.description1
 							,a.description2
 							,a.description3
 							,a.[description4]
 							,a.deal_category_value_id
 							,a.trader_id
 							,a.header_buy_sell_flag
 							,a.broker_id
 							,a.contract_id
 							,a.legal_entity
 							,a.internal_desk_id 
 							,a.product_id
 							,a.internal_portfolio_id
 							,a.commodity_id 
 							,a.reference
 							,a.[block_type] 
 							,a.[block_define_id] --sdv
 							,a.[granularity_id] --sdv
 							,a.[Pricing]  --sdv
 							,a.[unit_fixed_flag]
 							,a.[broker_unit_fees]
 							,a.[broker_fixed_cost]
 							,a.[broker_currency_id] --scur
 							,a.[term_frequency]  
 							,a.[option_settlement_date]
 							,a.[template_id]
 							,a.[close_reference_id]
 							,a.deal_reference_type_id  
 							,a.deal_status
 							,a.internal_deal_type_value_id
 							,a.internal_deal_subtype_value_id
 							,a.aggregate_environment
 							,a.aggregate_envrionment_comment
 							,a.assigned_by
 							,a.assigned_date
 							,a.assignment_type_value_id
 							,a.back_office_sign_off_by
 							,a.back_office_sign_off_date
 							,a.book_transfer_id
 							,a.compliance_year
 							,a.confirm_rule
 							,a.confirm_status_type
 							,a.deal_locked,
 							a.deal_rules,
 							a.generation_source,
 							a.generator_id,
 							a.rec_formula_id,
 							a.rec_price,
 							a.risk_sign_off_by,
 							a.risk_sign_off_date,
 							a.rolling_avg,
 							a.state_value_id,
 							a.status_date,
 							a.status_value_id,
 							a.sub_book,
 							a.verified_by,
 							a.verified_date
 							,a.timezone_id
							,a.counterparty_id2,
							a.trader_id2,
							a.pricing_type,
							a.tier_id,
							a.profile_granularity,
							a.fas_deal_type_value_id,
							a.internal_counterparty, 
							a.counterparty_trader, 														
							a.fx_conversion_market, 
							a.fx_rounding, 
							a.fx_option,
							a.counterparty2_trader,
							a.clearing_counterparty_id,
							a.reporting_jurisdiction_id,
							a.reporting_tier_id,					
							a.reporting_group1,
							a.reporting_group2,
							a.reporting_group3,
							a.reporting_group4,
							a.reporting_group5
 				FROM #temp_deal_header a 
 				LEFT JOIN source_deal_header b 
 					ON a.deal_id = b.deal_id 
 					AND b.source_system_id = a.source_system_id
 				WHERE b.deal_id IS NULL'
 		--PRINT(@sql_header1)
 		EXEC(@sql_header1)
 	
 	DECLARE @inserted_deals NVARCHAR(MAX)
 	SELECT @inserted_deals = COALESCE(@inserted_deals + ',', '') + CAST(a.source_deal_header_id AS NVARCHAR(20))
 	FROM #inserted_deals a
 	
 	IF @exec_mode = 6
 	BEGIN
 		DECLARE @today DATETIME
 		SET @today = GETDATE()
 		
 		IF EXISTS (SELECT 1 FROM #temp_deal_header WHERE deal_id = 'Expected to occur')
 		BEGIN
 			INSERT INTO #temp_process_table_name([name]) VALUES('ALL')
 			--EXEC spa_calc_dynamic_limit @today, 'c'
 		END
 		ELSE
 		BEGIN
 			DECLARE @COUNTERPARTY_ID NVARCHAR(500)
 			CREATE TABLE #temp(counterparty_id NVARCHAR(MAX) COLLATE DATABASE_DEFAULT)
 			INSERT INTO #temp(counterparty_id) 
 			SELECT STUFF((
 					SELECT ',' + sdv.code 
 					FROM static_data_type sdt
 					INNER JOIN static_data_value sdv ON sdv.[type_id] = sdt.[type_id]
 						AND sdt.[type_id] = 19100
 					FOR XML PATH('')
 				), 1, 1, '') AS counterparty_id
 		    
 			SELECT @COUNTERPARTY_ID = counterparty_id FROM #temp
 			
 			IF EXISTS (
 						SELECT 1 
 						FROM source_deal_header sdh 
 						INNER JOIN #temp_deal_header tdh ON tdh.deal_id = sdh.deal_id
 						INNER JOIN source_counterparty sc ON  sc.source_counterparty_id = tdh.counterparty_id
 						INNER JOIN dbo.SplitCommaSeperatedValues(@COUNTERPARTY_ID) scsv ON scsv.Item = sc.counterparty_id
 						)
 			BEGIN
 				DECLARE @source_updated_deal_table NVARCHAR(500)
 				SET @source_updated_deal_table = dbo.FNAProcessTableName('deal_header_id', @user_login_id, @process_id)
 				INSERT INTO #temp_process_table_name([name]) VALUES(@source_updated_deal_table)
 				
 				SET @sql = 'IF OBJECT_ID(''' + @source_updated_deal_table + ''') IS NULL
 								CREATE TABLE ' + @source_updated_deal_table + ' (source_deal_header_id INT, term_start DATETIME, term_end DATETIME)'
 				EXEC(@sql)
 
 				SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
 							INSERT INTO ' + @source_updated_deal_table	 + ' (source_deal_header_id, term_start, term_end) 
 							SELECT sdh.source_deal_header_id, tdh.term_start, tdh.term_end 
							FROM #temp_deal_header tdh
 							INNER JOIN source_deal_header sdh ON sdh.deal_id = tdh.deal_id
 							INNER JOIN  source_counterparty sc ON  sc.source_counterparty_id = tdh.counterparty_id
 							INNER JOIN dbo.SplitCommaSeperatedValues(''' + @COUNTERPARTY_ID + ''') scsv ON scsv.Item = sc.counterparty_id
 							--INNER JOIN source_system_book_map ssbm 
 							--ON ssbm.source_system_book_id1 = tdh.source_system_book_id1
 							--	AND ssbm.source_system_book_id2 = tdh.source_system_book_id2
 							--	AND ssbm.source_system_book_id3 = tdh.source_system_book_id3
 							--	AND ssbm.source_system_book_id4 = tdh.source_system_book_id4
 							--	AND ssbm.fas_deal_type_value_id = 410
 							'
 				EXEC(@sql)
 			END
 		END
 		
 		/* UK Limit*/
 		DECLARE @POWER_LIMIT_ID INT
 		DECLARE @NATURAL_GAS_LIMIT_ID INT
 		DECLARE @COAL_LIMIT_ID INT
 
 		SELECT @POWER_LIMIT_ID = mapping_table_id FROM generic_mapping_header WHERE mapping_name = 'UK Power Dynamic Limit'
 		SELECT @NATURAL_GAS_LIMIT_ID = mapping_table_id FROM generic_mapping_header WHERE mapping_name = 'UK Gas Dynamic Limit'
 		SELECT @COAL_LIMIT_ID = mapping_table_id FROM generic_mapping_header WHERE mapping_name = 'UK Coal Dynamic Limit'
 		
 		IF EXISTS(SELECT 1	 
 		FROM generic_mapping_values gmv
 		INNER JOIN #temp_deal_header sdh ON sdh.source_system_book_id1 = gmv.[clm1_value]
 			AND sdh.source_system_book_id2 = gmv.[clm2_value]
 			AND sdh.source_system_book_id3 = gmv.[clm3_value]
 			AND sdh.source_system_book_id4 = gmv.[clm4_value]
 		WHERE mapping_table_id IN (@POWER_LIMIT_ID, @NATURAL_GAS_LIMIT_ID, @COAL_LIMIT_ID))
 		BEGIN
 			INSERT INTO #temp_process_table_name_UK([name]) VALUES('yes')
 		END
 		ELSE 
 		BEGIN
 			INSERT INTO #temp_process_table_name_UK([name]) VALUES('no')
 		END 
 	END 
 
    
 
 -- to update the close_reference_id of IntraBook Deals
 	IF @exec_mode = 12 
 	BEGIN 
 		UPDATE sdh
 		SET sdh.close_reference_id = b.deal_header_id
 			   --SELECT a.sdh AS a ,b.sdh AS b ,sdh.source_deal_header_id,*
 		FROM (
 			   SELECT sdh.source_deal_header_id AS deal_header_id,
 					  t.deal_seperator_id,
 					  sdh.close_reference_id AS deal_close_reference_id
 			   FROM   #temp_deal_header t
 			   INNER JOIN source_deal_header sdh
 							   ON  t.deal_id = sdh.deal_id
 			   ) a
 			   INNER JOIN (
 						SELECT sdh.source_deal_header_id AS deal_header_id,
 							   t.deal_seperator_id,
 							   sdh.close_reference_id AS deal_close_reference_id
 						FROM   #temp_deal_header t
 							   INNER JOIN source_deal_header sdh
 									ON  t.deal_id = sdh.deal_id
 					) b
 					ON  a.deal_seperator_id = b.deal_close_reference_id
 			   INNER JOIN source_deal_header sdh
 					ON  a.deal_header_id = sdh.source_deal_header_id
 	END	
 	
 	--PRINT 'Start Delete: '+CONVERT(NVARCHAR,GETDATE(),109)	
 	--PRINT 'SOURCE DEAL DETAIL UPDATE'
 	
 	CREATE TABLE #updated_deals_confirm (deal_header_id INT,deal_id NVARCHAR(250) COLLATE DATABASE_DEFAULT ,curve_id NVARCHAR(250) COLLATE DATABASE_DEFAULT ,curve_id_p NVARCHAR(250) COLLATE DATABASE_DEFAULT 
 			,term_start DATETIME,term_end DATETIME, buy_sell NVARCHAR(1) COLLATE DATABASE_DEFAULT , buy_sell_p NVARCHAR(1) COLLATE DATABASE_DEFAULT 
 			, volume NUMERIC(38,20),volume_p NUMERIC(38,20), price NUMERIC(38,20), price_p NUMERIC(38,20))
 	
 	
 	IF ISNULL(@deal_detail_audit_log,1) = 2 AND EXISTS(SELECT 1 FROM #temp_deal_header WHERE source_system_id IN ('3', '20'))
 	BEGIN
 		
 		SET @sql= CAST('' AS NVARCHAR(MAX)) + N' 
 			INSERT #updated_deals_confirm (deal_header_id ,deal_id ,curve_id ,curve_id_p,term_start,term_end, buy_sell ,buy_sell_p, volume,volume_p , price ,price_p)
 			select d.source_deal_header_id,h.deal_id,a.curve_id,c.curve_id,a.term_start,a.term_end, a.buy_sell_flag,d.buy_sell_flag ,a.deal_volume,d.deal_volume,round(a.fixed_price,2) ,round(d.fixed_price,2)
 			FROM source_deal_detail d inner join source_deal_header h on
 						h.source_deal_header_id=d.source_deal_header_id inner join
 					'+@import_temp_table_name+' a on a.deal_id=h.deal_id AND h.source_system_id=a.source_system_id 
 					AND cast(a.term_start as datetime)=d.term_start 
 					AND cast(a.term_end as datetime)=d.term_end 
 					AND a.leg=d.leg
 			 LEFT JOIN source_price_curve_def c ON c.source_curve_def_id = d.curve_id AND h.source_system_id=c.source_system_id
			 OUTER APPLY (
						SELECT temp_id 
						FROM #error_status es
						INNER JOIN message_log_template mlt 
							ON mlt.message_number = es.error_number
						WHERE a.temp_id = es.temp_id
							AND mlt.message_status = ''ERROR''
			) es
 			WHERE es.temp_id IS NULL 
				AND a.curve_id<>c.curve_id 
				OR a.buy_sell_flag<>d.buy_sell_flag 
				OR round(cast(a.deal_volume as numeric(38,20)),0)<>round(d.deal_volume,0)
 				OR round(cast(a.fixed_price as numeric(38,20)),0)<>round(d.fixed_price,0)	 '
 		--PRINT(@sql)
 		EXEC(@sql)
 	END
 	
 	-- delete all details which is not present in a Import Source START
 	IF OBJECT_ID('tempdb..#temp_junk_deal') IS NOT NULL
 		DROP TABLE #temp_junk_deal
 	
 	CREATE TABLE #temp_junk_deal (deal_detail_id INT, term_start DATETIME, leg INT) 
 	
 	SET @sql = 'INSERT INTO #temp_junk_deal (deal_detail_id, term_start, leg)
 				SELECT DISTINCT d.source_deal_detail_id, d.term_start, d.leg
 				FROM 
 				(SELECT DISTINCT deal_id FROM #temp_deal_header) temp
 				INNER JOIN source_deal_header h ON h.deal_id = temp.deal_id
 				INNER JOIN source_deal_detail d ON  h.source_deal_header_id = d.source_deal_header_id
 				LEFT JOIN ' + @import_temp_table_name + ' a
 					  ON  a.deal_id = h.deal_id
 					  AND h.source_system_id = a.source_system_id
 					  AND d.term_start = a.term_start 
 					  AND d.leg = ISNULL(a.leg, 1) 					
 				WHERE a.temp_id IS NULL'
 	exec spa_print @sql
 	EXEC(@sql)

 	DELETE cfv
 	FROM calc_formula_value AS cfv
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = cfv.deal_id
	
	DELETE sddh
	FROM source_deal_detail_hour sddh
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = sddh.source_deal_detail_id
	
	DELETE aa
	FROM assignment_audit aa
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = aa.source_deal_header_id

	DELETE gc
	FROM Gis_Certificate gc
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = gc.source_deal_header_id
	
	DELETE udddf
	FROM user_defined_deal_detail_fields udddf
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = udddf.source_deal_detail_id
	
	DELETE ded
	FROM deal_exercise_detail ded
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = ded.source_deal_detail_id
	
	DELETE daf
	FROM deal_attestation_form daf
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = daf.source_deal_detail_id
	
	DELETE dpbd
	FROM deal_position_break_down dpbd
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = dpbd.source_deal_detail_id	

	DELETE sdd
	FROM source_deal_detail sdd
	INNER JOIN #temp_junk_deal AS tjd ON tjd.deal_detail_id = sdd.source_deal_detail_id
	
	DROP TABLE #temp_junk_deal	
	-- delete all details which is not present in a Import Source END
	 	
 	DECLARE @deal_detail_insert_batch_ts	DATETIME
 	DECLARE @deal_detail_insert_ts			DATETIME
 	SET @deal_detail_insert_ts = GETDATE()
 	SET @deal_detail_insert_batch_ts = GETDATE()
 	 	
 	IF OBJECT_ID('tempdb..#temp_inserting_deal') IS NOT NULL
 		DROP TABLE #temp_inserting_deal	
 		
 	CREATE TABLE #temp_inserting_deal (
 		temp_id INT,
 		source_uom_id INT,
 		source_curve_def_id INT
 	)
 
 	SET @sql1 = 'INSERT INTO #temp_inserting_deal(temp_id,source_uom_id,source_curve_def_id)
 				SELECT a.temp_id,d.source_uom_id,c.source_curve_def_id 
 				FROM ' + @import_temp_table_name + ' a
 				OUTER APPLY (
						SELECT temp_id 
						FROM #error_status es
						INNER JOIN message_log_template mlt 
							ON mlt.message_number = es.error_number
						WHERE a.temp_id = es.temp_id
							AND mlt.message_status = ''ERROR''
				) es
 				LEFT JOIN source_uom d ON a.source_system_id = d.source_system_id 
 					AND a.deal_volume_uom_id = d.uom_id
 				LEFT JOIN source_price_curve_def c ON a.source_system_id = c.source_system_id 
 					AND c.curve_id = a.curve_id
 				WHERE es.temp_id IS NULL'
 	--PRINT @sql1
 	EXEC(@sql1)
 	
 	EXEC('IF NOT EXISTS (
 	             SELECT OBJECT_NAME(OBJECT_ID)
 	             FROM   adiha_process.sys.indexes
 	             WHERE  NAME = ''idx_2' + @process_id + ''' AND OBJECT_ID = OBJECT_ID('''+@import_temp_table_name+''')
 	         )
 	      BEGIN
 	          CREATE INDEX idx_2' + @process_id + ' ON ' + @import_temp_table_name + ' (temp_id)
 	      END'
 	)
 	EXEC('IF NOT EXISTS (
 	             SELECT OBJECT_NAME(OBJECT_ID)
 	             FROM   adiha_process.sys.indexes
 	             WHERE  NAME = ''idx_3' + @process_id + ''' AND OBJECT_ID = OBJECT_ID('''+@import_temp_table_name+''')
 	         )
 	      BEGIN
 	          CREATE INDEX idx_3'+@process_id+' ON ' + @import_temp_table_name +' (curve_id)
 	      END'
 	)
 	CREATE INDEX idx_1 ON #temp_inserting_deal(temp_id)
 	
 	--PRINT('Saved error free deals to be inserted in temp table. Process took ' + dbo.FNACalculateTimestamp(@deal_detail_insert_ts))
 	SET @deal_detail_insert_ts = GETDATE()
 	SET @sql1 = CAST('' AS NVARCHAR(MAX)) + N' 
 		UPDATE sdd 
 		SET
 			sdd.term_start = a.term_start, 
 			sdd.term_end = a.term_end, 
 			sdd.Leg = ISNULL(a.Leg, sddt.leg), 
 			sdd.contract_expiration_date = a.contract_expiration_date, 
 			sdd.fixed_float_leg = ISNULL(a.fixed_float_leg, sddt.fixed_float_leg), 
 			sdd.buy_sell_flag = ISNULL(a.buy_sell_flag, sddt.buy_sell_flag), 
 			sdd.curve_id = COALESCE(t.source_curve_def_id, sml.term_pricing_index, sddt.curve_id), 
 			sdd.fixed_price = a.fixed_price,
 			sdd.fixed_price_currency_id = e.source_currency_id, 
 			sdd.option_strike_price = a.option_strike_price,
 			sdd.deal_volume = abs(a.deal_volume), 
 			sdd.deal_volume_frequency = ISNULL(a.deal_volume_frequency, sddt.deal_volume_frequency), 
 			sdd.deal_volume_uom_id = ISNULL(t.source_uom_id, sddt.deal_volume_uom_id), 
 			sdd.block_description = a.block_description, 
 			sdd.deal_detail_description = a.deal_detail_description,
 			sdd.update_user = ''' + @user_login_id + ''', 
 			sdd.update_ts = GETDATE(),
 			sdd.[settlement_volume] = abs(a.[settlement_volume]),
 			sdd.[settlement_uom] = suom_set.source_uom_id,
 			sdd.[price_adder] = a.[price_adder],
 			sdd.[price_multiplier] = a.[price_multiplier],
 			sdd.[settlement_date] = a.[settlement_date],
 			sdd.[day_count_id] = sdv_day.value_id,
 			sdd.[location_id] = ISNULL(sml.source_minor_location_id, sddt.location_id), 
 			sdd.[meter_id] = mi.[meter_id],   
 			sdd.[physical_financial_flag] = COALESCE(CASE WHEN physical_financial_flag_detail = ''Physical'' THEN ''p'' 
												 WHEN physical_financial_flag_detail = ''p'' THEN ''p'' 
												 WHEN physical_financial_flag_detail = ''Financial'' THEN ''f'' 
												 WHEN physical_financial_flag_detail = ''f'' THEN ''f'' 
												 ELSE NULL
											END, sddt.physical_financial_flag, second_leg.physical_financial_flag, ''p''),
 			sdd.[fixed_cost] = a.[fixed_cost],
 			sdd.[multiplier] = a.[multiplier],
 			sdd.[adder_currency_id] = sc_adder_currency_id.[source_currency_id],
 			sdd.[fixed_cost_currency_id] = sc_fixed_cost_currency_id.[source_currency_id],
 			sdd.[formula_currency_id] = sc_formula_currency_id.[source_currency_id],
 			sdd.[price_adder2] = a.[price_adder2],
 			sdd.[price_adder_currency2] = sc_price_adder_currency2.[source_currency_id],
 			sdd.[volume_multiplier2] = a.[volume_multiplier2],
 			sdd.[pay_opposite] = COALESCE(a.[pay_opposite], sddt.pay_opposite, sddt1.pay_opposite),
 			sdd.[capacity] = a.[capacity],
 			sdd.[settlement_currency] = a.settlement_currency,
 			sdd.[standard_yearly_volume] = a.[standard_yearly_volume],
 			sdd.[price_uom_id] = a.price_uom_id,
 			sdd.[category] = a.category,
 			sdd.[profile_code] = a.profile_code,
 			sdd.[profile_id] = fp.profile_id,
 			sdd.[pv_party] = a.pv_party,
 			sdd.[formula_id] = formula.formula_id,
 			sdd.Booked = a.Booked,
 			sdd.process_deal_status = a.process_deal_status,
 			sdd.formula_curve_id = formula_curve.source_curve_def_id,
 			sdd.actual_volume = a.actual_volume,
			sdd.schedule_volume = a.schedule_volume,
			sdd.position_uom = so_uo.source_uom_id,
			sdd.vintage = sdv_vintage.value_id,
			sdd.status = sdv_status.value_id,
			sdd.contractual_volume = a.contractual_volume,
			sdd.fx_conversion_rate = a.fx_conversion_rate,
			sdd.upstream_contract = a.upstream_contract,
			sdd.upstream_counterparty = ucp.source_counterparty_id,
			sdd.strike_granularity = sdv_sg.value_id,
			sdd.no_of_strikes = a.no_of_strikes,
			sdd.payment_date = a.payment_date,
			sdd.delivery_date = a.delivery_date,
			sdd.shipper_code1 = ISNULL(scmd1_default.shipper_code_mapping_detail_id, scmd1_multi.shipper_code_mapping_detail_id),
			sdd.shipper_code2 = ISNULL(scmd2_default.shipper_code_mapping_detail_id, scmd2_multi.shipper_code_mapping_detail_id)
		'
 		SET @sql1 += ' FROM 
 		#temp_inserting_deal t
 		INNER JOIN ' + @import_temp_table_name + ' a ON a.temp_id = t.temp_id
		INNER JOIN source_counterparty cpty ON cpty.counterparty_id = a.counterparty_id
 		INNER JOIN source_deal_header b ON a.deal_id = b.deal_id AND b.source_system_id=a.source_system_id 
 		LEFT JOIN source_currency e ON e.source_system_id = a.source_system_id 
 			AND e.currency_id = a.fixed_price_currency_id
 		LEFT JOIN static_data_value sdv_day on sdv_day.code=a.[day_count_id]
		LEFT JOIN source_uom so_uo ON so_uo.uom_id = a.position_uom
 		LEFT JOIN source_uom suom_set ON suom_set.source_system_id = a.source_system_id 
 			AND suom_set.uom_id = a.[settlement_uom]
 		LEFT JOIN source_minor_location sml ON sml.source_system_id = a.source_system_id 
 			AND sml.location_id = a.[location_id]
 		LEFT JOIN meter_id mi ON mi.recorderid= a.[meter_id]
 		LEFT JOIN source_currency sc_adder_currency_id ON a.source_system_id = sc_adder_currency_id.source_system_id
 			AND a.[adder_currency_id] = sc_adder_currency_id.currency_id	
 		LEFT JOIN source_currency sc_fixed_cost_currency_id ON a.source_system_id = sc_fixed_cost_currency_id.source_system_id
 			AND a.[fixed_cost_currency_id] = sc_fixed_cost_currency_id.currency_id
 		LEFT JOIN source_currency sc_formula_currency_id ON a.source_system_id = sc_formula_currency_id.source_system_id
 			AND a.[formula_currency_id] = sc_formula_currency_id.currency_id		
 		LEFT JOIN source_currency sc_price_adder_currency2 ON a.source_system_id = sc_price_adder_currency2.source_system_id
 			AND a.[price_adder_currency2] = sc_price_adder_currency2.currency_id
 		INNER join source_deal_header_template sdht on sdht.template_id = b.template_id
 		LEFT JOIN source_deal_detail_template sddt ON sdht.template_id = sddt.template_id and sddt.leg = isnull(a.leg, 1) 
		LEFT JOIN source_deal_detail_template sddt1 ON sdht.template_id = sddt1.template_id and sddt1.leg = 1
		OUTER APPLY ( SELECT physical_financial_flag 
					  FROM source_deal_detail_template sddt_inner 
					  WHERE sddt_inner.template_id = sdht.template_id 
						AND sddt_inner.leg = 1 
		) second_leg
 		LEFT JOIN source_price_curve_def formula_curve ON formula_curve.curve_id = a.formula_curve_id
 		LEFT JOIN (
 					SELECT MAX(fe.formula_id) formula_id, fe.formula
 					FROM formula_editor fe
 					INNER JOIN ' + @import_temp_table_name + ' a ON  fe.formula_id = a.formula_id
 					GROUP BY fe.formula
 		) formula ON formula.formula_id = a.formula_id
 		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = b.source_deal_header_id
 			AND sdd.term_start = a.term_start
 			AND sdd.term_end = a.term_end
 			AND sdd.leg = ISNULL(a.Leg, sddt.leg)
		LEFT JOIN static_data_value sdv_status on sdv_status.code = a.[status] 
			AND sdv_status.type_id = 25000
		LEFT JOIN forecast_profile fp ON fp.external_id = a.profile_id OR (isnumeric(a.profile_id) = 1 
			AND cast(fp.profile_id as NVARCHAR(50)) = cast(a.profile_id as NVARCHAR(50)))
		LEFT JOIN static_data_value sdv_vintage ON sdv_vintage.code = a.[vintage_id] 
			AND sdv_vintage.type_id = 10092
		LEFT JOIN source_counterparty ucp ON ucp.counterparty_id = a.upstream_counterparty '

		SET @sql1 += '
		LEFT JOIN shipper_code_mapping scm
			ON scm.counterparty_id = cpty.source_counterparty_id
		OUTER APPLY -- get default value for latest effective date lower than term start
		(
			SELECT scmd1_fil.shipper_code_mapping_detail_id, scmd1_fil.shipper_code1 FROM
			(SELECT * FROM
				(SELECT scmd1_def.shipper_code_mapping_detail_id , 
					scmd1_def.shipper_code1, 
					scmd1_def.effective_date,
					ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY scmd1_def.effective_date DESC) rn
						FROM shipper_code_mapping_detail scmd1_def
						WHERE scmd1_def.shipper_code1 = a.shipper_code1 
							AND scmd1_def.location_id = sml.source_minor_location_id 
							AND scmd1_def.effective_date <= CAST(a.term_start AS DATE)
							AND scmd1_def.shipper_code_id = scm.shipper_code_id
							AND scmd1_def.is_active = ''y''	
				) a WHERE rn =1
			) b 
			INNER JOIN shipper_code_mapping_detail scmd1_fil ON scmd1_fil.shipper_code1 = b.shipper_code1 
				AND b.effective_date = scmd1_fil.effective_date  AND scmd1_fil.location_id = sml.source_minor_location_id 
				AND scmd1_fil.is_active = ''y'' AND scmd1_fil.shipper_code_id = scm.shipper_code_id
			AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''y''
		) scmd1_default
		OUTER APPLY -- get min shipper detail for latest effective date lower than term start
		( SELECT c.shipper_code_mapping_detail_id FROM 
			(SELECT * FROM
				(SELECT shipper_code_mapping_detail_id, effective_date, shipper_code1,ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY effective_date DESC) rn
					FROM shipper_code_mapping_detail scmd1_inn_m
				WHERE scmd1_inn_m.shipper_code1 = a.shipper_code1 
					AND scmd1_inn_m.location_id = sml.source_minor_location_id 
					AND scmd1_inn_m.effective_date <= CAST(a.term_start AS DATE)
					AND scmd1_inn_m.shipper_code_id = scm.shipper_code_id
					AND ISNULL(NULLIF(scmd1_inn_m.shipper_code1_is_default, ''''), ''n'') = ''n''	
					AND scmd1_inn_m.is_active = ''y''	
				) a WHERE rn = 1 
			) b 
			CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd1_fil WHERE scmd1_fil.shipper_code1 = b.shipper_code1 
				AND b.effective_date = scmd1_fil.effective_date AND scmd1_fil.location_id = sml.source_minor_location_id
				AND scmd1_fil.shipper_code_id = scm.shipper_code_id AND scmd1_fil.is_active = ''y''	
				AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''n''	
				ORDER BY shipper_code_mapping_detail_id ASC
			) c
		) scmd1_multi  	'	
		SET @sql1 += '
		OUTER APPLY 
		( SELECT scmd2_fil.shipper_code_mapping_detail_id, scmd2_fil.shipper_code FROM
			(SELECT * FROM
				(SELECT scmd2_def.shipper_code_mapping_detail_id , 
					scmd2_def.shipper_code, 
					scmd2_def.effective_date,
					ROW_NUMBER() OVER (PARTITION BY scmd2_def.shipper_code ORDER BY scmd2_def.effective_date DESC) rn
				FROM shipper_code_mapping_detail scmd2_def
				WHERE scmd2_def.shipper_code = a.shipper_code2 
					AND scmd2_def.location_id = sml.source_minor_location_id 
					AND scmd2_def.effective_date <= CAST(a.term_start AS DATE)
					AND scmd2_def.shipper_code_id = scm.shipper_code_id
					AND scmd2_def.is_active = ''y''	
				) a WHERE rn =1
			) b 
			INNER JOIN shipper_code_mapping_detail scmd2_fil ON scmd2_fil.shipper_code = b.shipper_code
				AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = sml.source_minor_location_id 
				AND scmd2_fil.is_active = ''y'' AND scmd2_fil.shipper_code_id = scm.shipper_code_id
			AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''y''	
		) scmd2_default
		OUTER APPLY
		(SELECT c.shipper_code_mapping_detail_id FROM 
			(SELECT * FROM
				(SELECT shipper_code_mapping_detail_id, effective_date, scmd2_inn_m.shipper_code,ROW_NUMBER() OVER (PARTITION BY scmd2_inn_m.shipper_code ORDER BY scmd2_inn_m.effective_date DESC) rn
					FROM shipper_code_mapping_detail scmd2_inn_m
				WHERE scmd2_inn_m.shipper_code = a.shipper_code2 
					AND scmd2_inn_m.location_id = sml.source_minor_location_id 
					AND scmd2_inn_m.effective_date <= CAST(a.term_start AS DATE)
					AND scmd2_inn_m.shipper_code_id = scm.shipper_code_id
					AND ISNULL(NULLIF(scmd2_inn_m.is_default, ''''), ''n'') = ''n''	
					AND scmd2_inn_m.is_active = ''y''	
				) a WHERE rn = 1 
			) b 
			CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd2_fil WHERE scmd2_fil.shipper_code = b.shipper_code
				AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = sml.source_minor_location_id
				AND scmd2_fil.shipper_code_id = scm.shipper_code_id AND scmd2_fil.is_active = ''y''	AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''n''
				ORDER BY shipper_code_mapping_detail_id ASC
			) c		
		) scmd2_multi
		LEFT JOIN static_data_value sdv_sg 
			ON sdv_sg.code = a.strike_granularity 
			AND sdv_sg.type_id = 978
 	'		
	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN
		--DECLARE @rebuild_updt_stmt NVARCHAR(MAX), @rebuild_status NVARCHAR(MAX)
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql1, @dest_columns_to_exclude)
  		
		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
		EXEC(@sql1)
	END
	
	SET @sql1 = CAST('' AS NVARCHAR(MAX)) + N'INSERT INTO source_deal_detail (
 						 source_deal_header_id, 
 						 term_start, 
 						 term_end, 
 						 Leg, 
 						 contract_expiration_date, 
 						 fixed_float_leg, 
 						 buy_sell_flag, 
 						 curve_id, 
 						 fixed_price, 
 						 fixed_price_currency_id, 
 						 option_strike_price, 
 						 deal_volume, 
 						 deal_volume_frequency, 
 						 deal_volume_uom_id, 
 						 block_description, 
 						 deal_detail_description, 
 						 create_user, 
 						 create_ts,
 						[settlement_volume],
 						[settlement_uom] , --suom_set
 						[price_adder],
 						[price_multiplier],
 						[settlement_date],
 						[day_count_id],  --sdv_day
 						[location_id], --select * from source_minor_location
 						[meter_id],   -- select * from source_minor_location_meter
 						[physical_financial_flag],
 						[fixed_cost],
 						[multiplier],
 						[adder_currency_id],
 						[fixed_cost_currency_id],
 						[formula_currency_id],
 						[price_adder2],
 						[price_adder_currency2],
 						[volume_multiplier2],
 						[pay_opposite],
 						[capacity],
 						[settlement_currency],
 						[standard_yearly_volume],
 						[price_uom_id],
 						[category],
 						[profile_code],
 						[profile_id],
 						[pv_party],
 						[formula_id],
 						Booked,
 						process_deal_status,
 						formula_curve_id,
						actual_volume,
						schedule_volume,
						vintage,
						status,
						position_uom,
						contractual_volume,
						fx_conversion_rate,
						upstream_contract,
						upstream_counterparty,
						strike_granularity,
						no_of_strikes,
						payment_date,
						delivery_date,
						shipper_code1,
						shipper_code2
 		)'
 			
 		SET @sql1 +=	'	SELECT  DISTINCT 
 							b.source_deal_header_id, 
 							a.term_start
 							, a.term_end
 							, ISNULL(a.Leg, sddt.leg) leg
 							, ISNULL(a.contract_expiration_date, a.term_end)
 							, ISNULL(a.fixed_float_leg, sddt.fixed_float_leg) fixed_float_leg
 							, ISNULL(a.buy_sell_flag, sddt.buy_sell_flag) buy_sell_flag
 							, COALESCE(t.source_curve_def_id, sml.term_pricing_index, sddt.curve_id) source_curve_def_id
 							, a.fixed_price
 							, e.source_currency_id
 							, a.option_strike_price
 							, abs(a.deal_volume)
 							, ISNULL(a.deal_volume_frequency, sddt.deal_volume_frequency) deal_volume_frequency
 							, ISNULL(t.source_uom_id, sddt.deal_volume_uom_id) source_uom_id
 							, a.block_description
 							, a.deal_detail_description
 							, ''' + @user_login_id + '''
 							, GETDATE()
 							,abs(a.[settlement_volume]),
 							suom_set.source_uom_id [settlement_uom] , --suom_set
 							a.[price_adder],
 							ISNULL(a.[price_multiplier], 1) price_multiplier,
 							a.[settlement_date],
 							sdv_day.value_id [day_count_id],  
 							ISNULL(sml.source_minor_location_id, sddt.location_id) [location_id], 
 							mi.[meter_id] [meter_id],  
							COALESCE(CASE WHEN physical_financial_flag_detail = ''Physical'' THEN ''p'' 
												 WHEN physical_financial_flag_detail = ''p'' THEN ''p'' 
												 WHEN physical_financial_flag_detail = ''Financial'' THEN ''f'' 
												 WHEN physical_financial_flag_detail = ''f'' THEN ''f'' 
												 ELSE NULL
											END, sddt.physical_financial_flag, second_leg.physical_financial_flag, ''p''),
 							a.[fixed_cost],
 							a.[multiplier],
 							sc_adder_currency_id.[source_currency_id],
 							sc_fixed_cost_currency_id.[source_currency_id],
 							sc_formula_currency_id.[source_currency_id],
 							a.[price_adder2],
 							sc_price_adder_currency2.[source_currency_id],
 							a.[volume_multiplier2],
 							COALESCE(a.[pay_opposite], sddt.pay_opposite, sddt1.pay_opposite) pay_opposite,
 							a.[capacity],
 							a.settlement_currency,		--	sc_settlement_currency.[source_currency_id],
 							a.[standard_yearly_volume],
 							a.price_uom_id,				--	su.[source_uom_id],
 							a.category,					--	sdv_category.[value_id],
 							a.profile_code,				--	sdv_profile_code.[value_id],
 							fp.profile_id,
 							a.pv_party,					--	sdv_pv_party.[value_id],
 							formula.formula_id,
 							a.Booked,
 							a.process_deal_status,
 							formula_curve.source_curve_def_id,
							a.actual_volume,
							a.schedule_volume,
							sdv_vintage.value_id,
							ISNULL(sdv_status.value_id,sddt.status),
							so_uo.source_uom_id,
							a.contractual_volume,
							a.fx_conversion_rate,
							a.upstream_contract,
							ucp.source_counterparty_id,
							sdv_sg.value_id,
							a.no_of_strikes,
							a.payment_date,
							a.delivery_date,
							ISNULL(scmd1_default.shipper_code_mapping_detail_id, scmd1_multi.shipper_code_mapping_detail_id),
							ISNULL(scmd2_default.shipper_code_mapping_detail_id, scmd2_multi.shipper_code_mapping_detail_id)
							'
 				SET @sql1 += '	FROM #temp_inserting_deal t
 					INNER JOIN ' + @import_temp_table_name + ' a ON a.temp_id = t.temp_id
					INNER JOIN source_counterparty cpty ON cpty.counterparty_id = a.counterparty_id
 					INNER JOIN source_deal_header b ON a.deal_id = b.deal_id AND b.source_system_id=a.source_system_id 
 					LEFT JOIN source_currency e ON e.source_system_id = a.source_system_id 
 						AND e.currency_id = a.fixed_price_currency_id
					LEFT JOIN source_uom so_uo ON so_uo.uom_id = a.position_uom
 					LEFT JOIN static_data_value sdv_day on sdv_day.code=a.[day_count_id]
 					LEFT JOIN source_uom suom_set ON suom_set.source_system_id = a.source_system_id 
 						AND suom_set.uom_id = a.[settlement_uom]
 					LEFT JOIN source_minor_location sml ON sml.source_system_id = a.source_system_id 
 						AND  sml.location_id = a.[location_id]
 					LEFT JOIN meter_id mi ON mi.recorderid= a.[meter_id] 					
 					LEFT JOIN source_currency sc_adder_currency_id ON a.source_system_id = sc_adder_currency_id.source_system_id
 						AND a.[adder_currency_id] = sc_adder_currency_id.currency_id	
 					LEFT JOIN source_currency sc_fixed_cost_currency_id ON a.source_system_id = sc_fixed_cost_currency_id.source_system_id
 						AND a.[fixed_cost_currency_id] = sc_fixed_cost_currency_id.currency_id
 					LEFT JOIN source_currency sc_formula_currency_id ON a.source_system_id = sc_formula_currency_id.source_system_id
 						AND a.[formula_currency_id] = sc_formula_currency_id.currency_id		
 					LEFT JOIN source_currency sc_price_adder_currency2 ON a.source_system_id = sc_price_adder_currency2.source_system_id
 						AND a.[price_adder_currency2] = sc_price_adder_currency2.currency_id	 					
 					INNER JOIN source_deal_header_template sdht on sdht.template_id = b.template_id
 					LEFT JOIN source_deal_detail_template sddt ON sdht.template_id = sddt.template_id AND ISNULL(a.leg, 1) = sddt.leg
					LEFT JOIN source_deal_detail_template sddt1 ON sdht.template_id = sddt1.template_id AND sddt1.leg = 1
					OUTER APPLY ( SELECT physical_financial_flag FROM source_deal_detail_template sddt_inner WHERE sddt_inner.template_id = sdht.template_id AND sddt_inner.leg = 1 ) second_leg
 					LEFT JOIN source_price_curve_def formula_curve ON formula_curve.curve_id = a.formula_curve_id
 					LEFT JOIN (
 								SELECT MAX(fe.formula_id) formula_id, fe.formula
 								FROM formula_editor fe
 								INNER JOIN ' + @import_temp_table_name + ' a ON  fe.formula_id = a.formula_id
 								GROUP BY fe.formula
 					) formula ON formula.formula_id = a.formula_id
 					LEFT JOIN source_deal_detail sdd 
 						ON sdd.source_deal_header_id = b.source_deal_header_id
 						AND sdd.term_start = a.term_start
 						AND sdd.term_end = a.term_end
 						AND sdd.leg = ISNULL(a.Leg, sddt.leg)
					LEFT JOIN static_data_value sdv_status on sdv_status.code=a.[status] AND sdv_status.type_id = 25000
					LEFT JOIN forecast_profile fp ON fp.external_id = a.profile_id OR (isnumeric(a.profile_id)=1 AND cast(fp.profile_id as NVARCHAR(50))= cast(a.profile_id as NVARCHAR(50)))
					LEFT JOIN static_data_value sdv_vintage on sdv_vintage.code=a.[vintage_id] AND sdv_vintage.type_id = 10092
					LEFT JOIN source_counterparty ucp ON ucp.counterparty_id = a.upstream_counterparty '

			SET @sql1 += '
					LEFT JOIN shipper_code_mapping scm
						ON scm.counterparty_id = cpty.source_counterparty_id
					OUTER APPLY -- get default value for latest effective date lower than term start
					(
						SELECT scmd1_fil.shipper_code_mapping_detail_id, scmd1_fil.shipper_code1 FROM
						(SELECT * FROM
							(SELECT scmd1_def.shipper_code_mapping_detail_id , 
								scmd1_def.shipper_code1, 
								scmd1_def.effective_date,
								ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY scmd1_def.effective_date DESC) rn
									FROM shipper_code_mapping_detail scmd1_def
									WHERE (
											(NULLIF(a.shipper_code1, '''') IS NOT NULL AND scmd1_def.shipper_code1 = a.shipper_code1 )
											OR
											(NULLIF(a.shipper_code1, '''') IS NULL)
										)
										AND scmd1_def.location_id = sml.source_minor_location_id 
										AND scmd1_def.effective_date <= CAST(a.term_start AS DATE)
										AND scmd1_def.shipper_code_id = scm.shipper_code_id
										AND scmd1_def.is_active = ''y''	
							) a WHERE rn =1
						) b 
						INNER JOIN shipper_code_mapping_detail scmd1_fil ON scmd1_fil.shipper_code1 = b.shipper_code1 
							AND b.effective_date = scmd1_fil.effective_date  AND scmd1_fil.location_id = sml.source_minor_location_id 
							AND scmd1_fil.is_active = ''y'' AND scmd1_fil.shipper_code_id = scm.shipper_code_id
						AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''y''
					) scmd1_default
					OUTER APPLY -- get min shipper detail for latest effective date lower than term start
					( SELECT c.shipper_code_mapping_detail_id FROM 
						(SELECT * FROM
							(SELECT shipper_code_mapping_detail_id, effective_date, shipper_code1,ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY effective_date DESC) rn
								FROM shipper_code_mapping_detail scmd1_inn_m
							WHERE scmd1_inn_m.shipper_code1 = a.shipper_code1 
								AND scmd1_inn_m.location_id = sml.source_minor_location_id 
								AND scmd1_inn_m.effective_date <= CAST(a.term_start AS DATE)
								AND scmd1_inn_m.shipper_code_id = scm.shipper_code_id
								AND ISNULL(NULLIF(scmd1_inn_m.shipper_code1_is_default, ''''), ''n'') = ''n''	
								AND scmd1_inn_m.is_active = ''y''	
							) a WHERE rn = 1 
						) b 
						CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd1_fil WHERE scmd1_fil.shipper_code1 = b.shipper_code1 
							AND b.effective_date = scmd1_fil.effective_date AND scmd1_fil.location_id = sml.source_minor_location_id
							AND scmd1_fil.shipper_code_id = scm.shipper_code_id AND scmd1_fil.is_active = ''y''	
							AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''n''	
							ORDER BY shipper_code_mapping_detail_id ASC
						) c
					) scmd1_multi  	'	
				SET @sql1 += ' OUTER APPLY 
					( SELECT scmd2_fil.shipper_code_mapping_detail_id, scmd2_fil.shipper_code FROM
						(SELECT * FROM
							(SELECT scmd2_def.shipper_code_mapping_detail_id , 
								scmd2_def.shipper_code, 
								scmd2_def.effective_date,
								ROW_NUMBER() OVER (PARTITION BY scmd2_def.shipper_code ORDER BY scmd2_def.effective_date DESC) rn
							FROM shipper_code_mapping_detail scmd2_def
							WHERE 
								(
									(NULLIF(a.shipper_code2, '''') IS NOT NULL AND scmd2_def.shipper_code = a.shipper_code2 )
									OR
									(NULLIF(a.shipper_code2, '''') IS NULL)
								)
								AND scmd2_def.location_id = sml.source_minor_location_id 
								AND scmd2_def.effective_date <= CAST(a.term_start AS DATE)
								AND scmd2_def.shipper_code_id = scm.shipper_code_id
								AND scmd2_def.is_active = ''y''	
							) a WHERE rn =1
						) b 
						INNER JOIN shipper_code_mapping_detail scmd2_fil ON scmd2_fil.shipper_code = b.shipper_code
							AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = sml.source_minor_location_id 
							AND scmd2_fil.is_active = ''y'' AND scmd2_fil.shipper_code_id = scm.shipper_code_id
						AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''y''	
					) scmd2_default
					OUTER APPLY
					(SELECT c.shipper_code_mapping_detail_id FROM 
						(SELECT * FROM
							(SELECT shipper_code_mapping_detail_id, effective_date, scmd2_inn_m.shipper_code,ROW_NUMBER() OVER (PARTITION BY scmd2_inn_m.shipper_code ORDER BY scmd2_inn_m.effective_date DESC) rn
								FROM shipper_code_mapping_detail scmd2_inn_m
							WHERE scmd2_inn_m.shipper_code = a.shipper_code2 
								AND scmd2_inn_m.location_id = sml.source_minor_location_id 
								AND scmd2_inn_m.effective_date <= CAST(a.term_start AS DATE)
								AND scmd2_inn_m.shipper_code_id = scm.shipper_code_id
								AND ISNULL(NULLIF(scmd2_inn_m.is_default, ''''), ''n'') = ''n''	
								AND scmd2_inn_m.is_active = ''y''	
							) a WHERE rn = 1 
						) b 
						CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd2_fil WHERE scmd2_fil.shipper_code = b.shipper_code
							AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = sml.source_minor_location_id
							AND scmd2_fil.shipper_code_id = scm.shipper_code_id AND scmd2_fil.is_active = ''y''	AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''n''
							ORDER BY shipper_code_mapping_detail_id ASC
						) c		
					) scmd2_multi
					LEFT JOIN static_data_value sdv_sg 
						ON sdv_sg.code = a.strike_granularity 
						AND sdv_sg.type_id = 978
 				WHERE sdd.source_deal_detail_id IS NULL	
 				'
 	EXEC spa_print @sql1
 	EXEC(@sql1)
 	
	UPDATE sdh
	SET sdh.pricing_type = CASE
								WHEN sdh.physical_financial_flag = 'f' THEN CASE WHEN sdd.formula_curve_id IS NULL THEN 46704 ELSE 46705 END
								ELSE CASE WHEN sdd.formula_curve_id IS NULL THEN 46700 ELSE 46701 END
							END
	FROM source_deal_header sdh
	INNER JOIN #inserted_deals th ON sdh.source_deal_header_id = th.source_deal_header_id
	OUTER APPLY (
		SELECT MAX(sdd.formula_curve_id) formula_curve_id, source_deal_header_id 
		FROM source_deal_detail sdd 
		WHERE sdd.source_deal_header_id = sdh.source_deal_header_id 
		AND sdd.formula_curve_id IS NOT NULL
		GROUP BY sdd.source_deal_header_id
	) sdd
	WHERE sdh.pricing_type IS NULL

	UPDATE sdh
	SET profile_granularity = COALESCE(
		th.profile_granularity,
		sdh.profile_granularity, 
		ddv.volume_frequency, 
		sdht.profile_granularity, 
		CASE 
				WHEN sdd.deal_volume_frequency = 'x' THEN 987
				WHEN sdd.deal_volume_frequency = 'y' THEN 989
				WHEN sdd.deal_volume_frequency = 'a' THEN 993
				WHEN sdd.deal_volume_frequency = 'd' THEN 981
				WHEN sdd.deal_volume_frequency IN ('h', 't') THEN 982
				WHEN sdd.deal_volume_frequency = 'm' THEN 980
				ELSE 982 
		END
	)
	FROM source_deal_header sdh
	INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
	INNER JOIN #inserted_deals th ON sdh.source_deal_header_id = th.source_deal_header_id
	INNER JOIN source_deal_header_template sdht ON sdht.template_id = sdh.template_id
	OUTER APPLY (SELECT * FROM deal_default_value ddv WHERE ddv.deal_type_id = sdh.source_deal_type_id 
	AND ((pricing_type IS NULL AND sdh.pricing_type IS NULL) OR pricing_type = sdh.pricing_type)
	AND commodity = sdh.commodity_id
	AND (buy_sell_flag IS NULL OR ISNULL(buy_sell_flag, 'x') = ISNULL(sdh.header_buy_sell_flag, 'y'))
	) ddv 

	IF OBJECT_ID('tempdb..#temp_deal_groups_update') IS NOT NULL
		DROP TABLE #temp_deal_groups_update
	
	CREATE TABLE #temp_deal_groups_update (
		source_deal_groups_id INT,
		source_deal_header_id INT,
		leg	INT
	)

	INSERT INTO source_deal_groups ( 
		source_deal_header_id,
		source_deal_groups_name,
		leg
	)
	OUTPUT INSERTED.source_deal_groups_id, INSERTED.source_deal_header_id, INSERTED.leg INTO #temp_deal_groups_update(source_deal_groups_id, source_deal_header_id, leg)	
	SELECT sdd.source_deal_header_id, dbo.FNADateFormat(MIN(sdd.term_start)) + ' - ' + dbo.FNADateFormat(MAX(sdd.term_end)), sdd.Leg
	FROM source_deal_detail sdd
	LEFT JOIN source_deal_groups sdg ON sdd.source_deal_header_id = sdg.source_deal_header_id
	WHERE sdg.source_deal_groups_id IS NULL 
	GROUP by sdd.source_deal_header_id, sdd.Leg
	ORDER by sdd.source_deal_header_id

	-- For those deals in which few source_deal_groups_id is NULL in detail
	INSERT INTO #temp_deal_groups_update (source_deal_groups_id, source_deal_header_id, leg)
	SELECT DISTINCT sdg.source_deal_groups_id, sdd.source_deal_header_id, sdd.Leg
	FROM source_deal_detail sdd
	INNER JOIN source_deal_groups sdg ON sdd.source_deal_header_id = sdg.source_deal_header_id
	WHERE sdd.source_deal_group_id IS NULL 
	ORDER by sdd.source_deal_header_id
	
	UPDATE sdd
	SET source_deal_group_id = temp.source_deal_groups_id
	FROM source_deal_detail sdd
	INNER JOIN #temp_deal_groups_update temp ON temp.source_deal_header_id = sdd.source_deal_header_id AND sdd.Leg = temp.leg
 	
	/* Update transfer/offset deal of parent deal 
	   Only parent deals are updated from import rule.
	**/
	IF OBJECT_ID('tempdb..#temp_updated_transfer_deals') IS NOT NULL
 		DROP TABLE #temp_updated_transfer_deals
	CREATE TABLE #temp_updated_transfer_deals (source_deal_header_id INT)

	UPDATE  sdh1
		SET deal_date = sdh.deal_date,
		    counterparty_id = sdh.counterparty_id,
			contract_id = sdh.contract_id
	OUTPUT INSERTED.source_deal_header_id INTO #temp_updated_transfer_deals(source_deal_header_id)
	FROM  #temp_deal_header th
	INNER JOIN source_deal_header sdh 
		ON sdh.deal_id = th.deal_id
		AND sdh.close_reference_id IS NULL
	INNER JOIN source_deal_header sdh1
		ON  sdh1.close_reference_id = sdh.source_deal_header_id
	WHERE sdh1.deal_date <> sdh.deal_date
	OR sdh1.counterparty_id <> sdh.counterparty_id
	OR sdh1.contract_id <> sdh.contract_id

	UPDATE  sdd1  
			SET		sdd1.deal_volume = sdd.deal_volume,
					sdd1.fixed_price = sdd.fixed_price, 
					sdd1.fixed_cost = sdd.fixed_cost,
					sdd1.curve_id = sdd.curve_id,
					sdd1.fixed_price_currency_id = sdd.fixed_price_currency_id,
					sdd1.option_strike_price = sdd.option_strike_price,
					sdd1.deal_volume_frequency = sdd.deal_volume_frequency,
					sdd1.deal_volume_uom_id= sdd.deal_volume_uom_id,
					sdd1.price_adder = sdd.price_adder,
					sdd1.price_multiplier = sdd.price_multiplier,
					sdd1.multiplier = sdd.multiplier,
					sdd1.formula_curve_id = sdd.formula_curve_id,
					sdd1.location_id = sdd.location_id
			OUTPUT INSERTED.source_deal_header_id INTO #temp_updated_transfer_deals(source_deal_header_id)		
			FROM  #temp_deal_header th
			INNER JOIN source_deal_header sdh 
				ON sdh.deal_id = th.deal_id
				 AND sdh.close_reference_id IS NULL
			INNER JOIN 	source_deal_detail sdd
				ON sdd.source_deal_header_id = sdh.source_deal_header_id 			
			INNER JOIN source_deal_header sdh1
				 ON  sdh1.close_reference_id = sdh.source_deal_header_id
			INNER JOIN source_deal_detail sdd1
				 ON  sdd1.source_deal_header_id = sdh1.source_deal_header_id
				 AND sdd1.term_start = sdd.term_start
				 AND sdd1.leg = sdd1.leg  
			WHERE sdd1.deal_volume <> sdd.deal_volume OR 
					sdd1.fixed_price <> sdd.fixed_price OR  
					sdd1.fixed_cost <> sdd.fixed_cost OR 
					sdd1.curve_id <> sdd.curve_id OR 
					sdd1.fixed_price_currency_id <> sdd.fixed_price_currency_id OR 
					sdd1.option_strike_price <> sdd.option_strike_price OR 
					sdd1.deal_volume_frequency <> sdd.deal_volume_frequency OR 
					sdd1.deal_volume_uom_id<> sdd.deal_volume_uom_id OR 
					sdd1.price_adder <> sdd.price_adder OR 
					sdd1.price_multiplier <> sdd.price_multiplier OR 
					sdd1.multiplier <> sdd.multiplier OR 
					sdd1.formula_curve_id <> sdd.formula_curve_id OR
					sdd1.location_id <> sdd.location_id
		
		
		-- update offset deal
		UPDATE  sdh1
		SET deal_date = sdh.deal_date,
		    counterparty_id = sdh.counterparty_id,
			contract_id = sdh.contract_id
		OUTPUT INSERTED.source_deal_header_id INTO #temp_updated_transfer_deals(source_deal_header_id)
		FROM  #temp_updated_transfer_deals t1
		INNER JOIN source_deal_header sdh 
			ON  sdh.source_deal_header_id = t1.source_deal_header_id
		INNER JOIN source_deal_header sdh1
			 ON  sdh1.close_reference_id = sdh.source_deal_header_id
			 AND sdh1.deal_reference_type_id = 12503
		WHERE sdh1.deal_date <> sdh.deal_date
		OR sdh1.counterparty_id <> sdh.counterparty_id
		OR sdh1.contract_id <> sdh.contract_id


		UPDATE  sdd1  
		SET		sdd1.deal_volume = sdd.deal_volume,
				sdd1.fixed_price = sdd.fixed_price, 
				sdd1.fixed_cost = sdd.fixed_cost,
				sdd1.curve_id = sdd.curve_id,
				sdd1.fixed_price_currency_id = sdd.fixed_price_currency_id,
				sdd1.option_strike_price = sdd.option_strike_price,
				sdd1.deal_volume_frequency = sdd.deal_volume_frequency,
				sdd1.deal_volume_uom_id= sdd.deal_volume_uom_id,
				sdd1.price_adder = sdd.price_adder,
				sdd1.price_multiplier = sdd.price_multiplier,
				sdd1.multiplier = sdd.multiplier,
				sdd1.formula_curve_id = sdd.formula_curve_id,
				sdd1.location_id = sdd.location_id
		OUTPUT INSERTED.source_deal_header_id INTO #temp_updated_transfer_deals(source_deal_header_id)		
		FROM  #temp_updated_transfer_deals t1
		INNER JOIN source_deal_header sdh 
			ON  sdh.source_deal_header_id = t1.source_deal_header_id
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = t1.source_deal_header_id
		INNER JOIN source_deal_header sdh1
			 ON  sdh1.close_reference_id = sdh.source_deal_header_id
			 AND sdh1.deal_reference_type_id = 12503
		INNER JOIN source_deal_detail sdd1
			 ON  sdd1.source_deal_header_id = sdh1.source_deal_header_id
			 AND sdd1.term_start = sdd.term_start
			 AND sdd1.leg = sdd1.leg  
		WHERE sdd1.deal_volume <> sdd.deal_volume OR 
				sdd1.fixed_price <> sdd.fixed_price OR  
				sdd1.fixed_cost <> sdd.fixed_cost OR 
				sdd1.curve_id <> sdd.curve_id OR 
				sdd1.fixed_price_currency_id <> sdd.fixed_price_currency_id OR 
				sdd1.option_strike_price <> sdd.option_strike_price OR 
				sdd1.deal_volume_frequency <> sdd.deal_volume_frequency OR 
				sdd1.deal_volume_uom_id<> sdd.deal_volume_uom_id OR 
				sdd1.price_adder <> sdd.price_adder OR 
				sdd1.price_multiplier <> sdd.price_multiplier OR 
				sdd1.multiplier <> sdd.multiplier OR
				sdd1.formula_curve_id <> sdd.formula_curve_id OR 
				sdd1.location_id <> sdd.location_id
	
	/**End of logic for updating transfer/offset*/


 	--PRINT('Inserting error free deal details. Process took ' + dbo.FNACalculateTimestamp(@deal_detail_insert_ts))
 	--DROP temp table
 	
 	--PRINT('Source Deal Detail INSERT COMPLETED. Process took ' + dbo.FNACalculateTimestamp(@deal_detail_insert_batch_ts))	
 	
	

	DECLARE @select_udf_stmt NVARCHAR(MAX)
	
	SELECT c.ixp_columns_name	
		, iidm.udf_field_id
	INTO #ixp_udf_mapped_columns
	FROM ixp_import_data_mapping iidm 
	INNER JOIN static_data_value sdv on sdv.value_id = iidm.udf_field_id and sdv.type_id=5500
	INNER JOIN ixp_tables t ON t.ixp_tables_id = iidm.dest_table_id
	INNER JOIN ixp_columns c ON c.ixp_columns_id = iidm.dest_column  AND c.ixp_table_id = t.ixp_tables_id 
	WHERE iidm.ixp_rules_id = @rules_id AND t.ixp_tables_name = @table_name
	ORDER BY c.seq	

	/*As per mapped in rule UDF import logic starts. Mapped udf field id must be static data value with type id 5500. */
 	IF OBJECT_ID('tempdb..#ixp_udf_mapped_columns') IS NOT NULL
 	BEGIN			
		IF OBJECT_ID('tempdb..#temp_udf_data') IS NOT NULL
 			DROP TABLE #temp_udf_data

		CREATE TABLE #temp_udf_data(
			source_deal_header_id INT,
			template_id INT,
			leg INT,
			term_start DATETIME,
			term_end DATETIME,
			udf_field_id INT,
			udf_value NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
			udf_type NCHAR(1) COLLATE DATABASE_DEFAULT
		)
		
		SELECT @select_udf_stmt = COALESCE(@select_udf_stmt + ' UNION ' ,'') + 
				'
				SELECT b.source_deal_header_id , b.template_id, a.leg,a.term_start,a.term_end,	''' + CAST(imc.udf_field_id AS NVARCHAR(16)) + ''' udf_field_id,a.' + imc.ixp_columns_name  + ', uddft.udf_type
				 FROM ' + @import_temp_table_name + '  a 
				 INNER JOIN source_deal_header b ON a.deal_id = b.deal_id 
					AND b.source_system_id=a.source_system_id 
				 INNER JOIN user_defined_deal_fields_template uddft ON uddft.field_id = ''' + CAST(imc.udf_field_id AS NVARCHAR(16))  + ''' 
					AND uddft.template_id = b.template_id
				 --WHERE NULLIF(a.udf_value1,'''') IS NOT NULL
				 '
		FROM #ixp_udf_mapped_columns imc
		WHERE imc.ixp_columns_name like '%udf_value%' AND NULLIF(imc.udf_field_id,'') IS NOT NULL
		SET @sql = 'INSERT INTO #temp_udf_data (source_deal_header_id, template_id, leg, term_start,term_end, udf_field_id, udf_value, udf_type)' + @select_udf_stmt
		--select @select_udf_stmt

		EXEC(@sql)

		/* Dump code value pair of dropdown and checkbox field in temp table to resolve id from value. Logic starts */
		DECLARE @field_id INT, @cmb_sql_string NVARCHAR(MAX), @cmb_pre_sql_string  NVARCHAR(MAX) = ''
		IF OBJECT_ID (N'tempdb..#udf_combo_value') IS NOT NULL
		DROP TABLE #udf_combo_value
		IF OBJECT_ID (N'tempdb..#udf_combo') IS NOT NULL
		DROP TABLE #udf_combo

		CREATE TABLE #udf_combo_value(udf_field_id INT, id NVARCHAR(50) COLLATE DATABASE_DEFAULT, code NVARCHAR(MAX) COLLATE DATABASE_DEFAULT)
		CREATE TABLE #udf_combo ([id] NVARCHAR(50) COLLATE DATABASE_DEFAULT 
			, [code] NVARCHAR(500) COLLATE DATABASE_DEFAULT 
			, [state] NVARCHAR(10) DEFAULT 'enable' COLLATE DATABASE_DEFAULT)

		BEGIN TRY 
			DECLARE cur_udf_cmb CURSOR LOCAL FAST_FORWARD FOR 
			SELECT field_id, sql_string 
			FROM user_defined_fields_template udft 
			INNER JOIN #ixp_udf_mapped_columns temp ON temp.udf_field_id = udft.field_id
			WHERE 1 = 1 
				AND udft.field_type in ('d','c')
			OPEN cur_udf_cmb
			FETCH NEXT FROM cur_udf_cmb INTO @field_id, @cmb_sql_string
			WHILE @@FETCH_STATUS = 0 
			BEGIN 
				--Prevents same query execution.
				IF @cmb_pre_sql_string <> @cmb_sql_string
				BEGIN					
					TRUNCATE TABLE #udf_combo
					BEGIN TRY
						SET @sql = 'INSERT INTO #udf_combo([id],[code]) ' + @cmb_sql_string
						EXEC (@sql)
					END TRY
					BEGIN CATCH
						SET @sql = 'INSERT INTO #udf_combo([id],[code],[state]) ' + @cmb_sql_string
						EXEC (@sql)
					END CATCH					 
				END

				INSERT INTO #udf_combo_value(udf_field_id, id, code)
				SELECT @field_id, id, code
				FROM #udf_combo
				
				SET @cmb_pre_sql_string = @cmb_sql_string
				FETCH NEXT FROM cur_udf_cmb INTO  @field_id, @cmb_sql_string
			END 
			CLOSE cur_udf_cmb 
			DEALLOCATE cur_udf_cmb 
		END TRY 
		BEGIN CATCH 
				IF CURSOR_STATUS ('local', 'cur_udf_cmb') > 0 
				BEGIN 
						CLOSE cur_udf_cmb 
						DEALLOCATE cur_udf_cmb 
				END 
		END CATCH

		/* UDF combo field cide, value pair logic ends */

		/*Process header UDF values */
		--Update old udf data
		IF OBJECT_ID(N'tempdb..#header_udf_data') IS NOT NULL
		DROP TABLE #header_udf_data

		SELECT DISTINCT source_deal_header_id,template_id,udf_field_id,udf_value 
		INTO #header_udf_data	
		FROM #temp_udf_data tud 
		WHERE leg = 1 AND udf_type = 'h'

		UPDATE uddf
		SET udf_value = ISNULL(ucv.id, IIF(uddft.Field_type IN ('d','c'), NULL, NULLIF(hud.udf_value,'')))
		FROM #header_udf_data hud
		INNER JOIN user_defined_deal_fields_template uddft ON uddft.field_id = hud.udf_field_id
				AND uddft.template_id = hud.template_id
		INNER JOIN user_defined_deal_fields uddf ON uddf.source_deal_header_id = hud.source_deal_header_id
			AND uddf.udf_template_id = uddft.udf_template_id
		LEFT JOIN #udf_combo_value ucv ON ucv.udf_field_id = hud.udf_field_id
			AND ucv.code = hud.udf_value

		----Insert new udf data
		INSERT INTO user_defined_deal_fields (source_deal_header_id, udf_template_id, udf_value) 
		SELECT hud.source_deal_header_id, uddft.udf_template_id, ISNULL(ucv.id, IIF(uddft.Field_type IN ('d','c'), NULL, NULLIF(hud.udf_value,'')))
		FROM #header_udf_data hud
		INNER JOIN user_defined_deal_fields_template uddft
				ON uddft.field_id = hud.udf_field_id
				AND uddft.template_id = hud.template_id
		LEFT JOIN user_defined_deal_fields uddf
			ON uddf.source_deal_header_id = hud.source_deal_header_id
			AND uddf.udf_template_id = uddft.udf_template_id
		LEFT JOIN #udf_combo_value ucv ON ucv.udf_field_id = hud.udf_field_id
			AND ucv.code = hud.udf_value
		WHERE uddf.udf_deal_id IS NULL

		/*End of inserting header UDF values*/
 	
		/* Start detail UDF */
	
		--Update deal udf detail
		UPDATE udddf
		SET udf_value = ISNULL(ucv.id, IIF(uddft.Field_type IN ('d','c'), NULL, NULLIF(tud.udf_value,'')))
		FROM #temp_udf_data tud
		INNER JOIN user_defined_deal_fields_template uddft
				ON uddft.field_id = tud.udf_field_id
				AND uddft.template_id = tud.template_id
				AND uddft.udf_type = tud.udf_type
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = tud.source_deal_header_id
			AND sdd.term_start = tud.term_start
			AND sdd.term_end = tud.term_end
			AND sdd.leg = tud.leg
		INNER JOIN user_defined_deal_detail_fields udddf
			ON udddf.source_deal_detail_id = sdd.source_deal_detail_id
			AND udddf.udf_template_id = uddft.udf_template_id
		LEFT JOIN #udf_combo_value ucv ON ucv.udf_field_id = tud.udf_field_id
			AND ucv.code = tud.udf_value
		WHERE tud.udf_type = 'd'

		--insert deal udf detail
		INSERT INTO user_defined_deal_detail_fields(source_deal_detail_id, udf_template_id, udf_value)
		SELECT  sdd.source_deal_detail_id
			, uddft.udf_template_id
			, ISNULL(ucv.id, IIF(uddft.Field_type IN ('d','c'), NULL, NULLIF(tud.udf_value,'')))
		FROM #temp_udf_data tud
		INNER JOIN user_defined_deal_fields_template uddft
				ON uddft.field_id = tud.udf_field_id
				AND uddft.template_id = tud.template_id
				AND uddft.udf_type = tud.udf_type
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = tud.source_deal_header_id
			AND sdd.term_start = tud.term_start
			AND sdd.term_end = tud.term_end
			AND sdd.leg = tud.leg
		LEFT JOIN user_defined_deal_detail_fields udddf
			ON udddf.source_deal_detail_id = sdd.source_deal_detail_id
			AND udddf.udf_template_id = uddft.udf_template_id
		LEFT JOIN #udf_combo_value ucv ON ucv.udf_field_id = tud.udf_field_id
			AND ucv.code = tud.udf_value
		WHERE tud.udf_type = 'd' AND udddf.udf_deal_id IS NULL

		/*Ends detail udf import */

	END	/* UDF import logic ends */



 	DECLARE @process_id3        NVARCHAR(300),
 	        @pos_job_name       NVARCHAR(600),
 	        @search_table		NVARCHAR(400)
 	        
 	SET @process_id3 = REPLACE(newid(),'-','_')
 	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @process_id3)
 	SET @search_table = dbo.FNAProcessTableName('search_table', @user_login_id, @process_id3)	
 	
 	EXEC ('CREATE TABLE ' + @report_position_deals + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
 	EXEC ('CREATE TABLE ' + @search_table + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
 	
 	SET @sql = 'INSERT INTO ' + @report_position_deals + '(source_deal_header_id,action) 
 				SELECT sdh.source_deal_header_id,
 				       ''i''
 				FROM #temp_inserting_deal t
 		        INNER JOIN ' + @import_temp_table_name + ' a ON  a.temp_id = t.temp_id
 		        INNER JOIN source_deal_header sdh
 		            ON  a.deal_id = sdh.deal_id
 		            AND sdh.source_system_id = a.source_system_id 
 		        GROUP BY sdh.source_deal_header_id'
 	EXEC(@sql)
 	
	/*Insert collected transfer and offset deals*/
	IF EXISTS(SELECT 1 FROM #temp_updated_transfer_deals)
	BEGIN
		SET @sql = 'INSERT INTO ' + @report_position_deals + '(source_deal_header_id,action) 
 					SELECT DISTINCT source_deal_header_id,  ''i''
					FROM #temp_updated_transfer_deals'
 		EXEC(@sql)

		/*Collect updated offset/transfer deals for audit job*/
		SELECT @updated_deals = COALESCE(@updated_deals + ',', '') + CAST(a.source_deal_header_id AS NVARCHAR(20))
 		FROM (SELECT DISTINCT source_deal_header_id 
		      FROM #temp_updated_transfer_deals) a

	END
 	
 	EXEC('INSERT INTO ' + @search_table + ' (source_deal_header_id, action)
 	      SELECT DISTINCT source_deal_header_id,
 	             action
 	      FROM ' + @report_position_deals + '')
 	      
 	SET @alert_process_table = 'adiha_process.dbo.alert_deal_' + @process_id3 + '_ad'
 		
 	EXEC ('CREATE TABLE ' + @alert_process_table + ' (
 	       	source_deal_header_id  NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 	       	deal_date              DATETIME,
 	       	term_start             DATETIME,
 	       	counterparty_id        NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 	       	confirm_status_id	   INT,
        	hyperlink1             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink2             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink3             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink4             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink5             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
			trader_id			   NVARCHAR(250) COLLATE DATABASE_DEFAULT
 	       )')
 	SET @sql = 'INSERT INTO ' + @alert_process_table + ' (
 	                source_deal_header_id,
 	                deal_date,
 	                term_start,
 	                counterparty_id,
 	                hyperlink1,
 	                hyperlink2,
					trader_id
 	              )
 	            SELECT st.source_deal_header_id,
 	                   sdh.deal_date,
 	                   sdh.entire_term_start,
 	                   sdh.counterparty_id,
 	                   dbo.FNATrmHyperlink(''i'', 10131010, ''Deal #'' + CAST(st.source_deal_header_id AS NVARCHAR(20)), st.source_deal_header_id, ''n'',DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT),
 	                   dbo.FNATrmHyperlink(''i'',10131020,''Review Trade Ticket'',st.source_deal_header_id,DEFAULT,''n'',DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT),
					   stt.user_login_id
 	            FROM ' + @search_table + ' st
 	            INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = st.source_deal_header_id
				LEFT JOIN source_traders stt ON sdh.trader_id = stt.source_trader_id'
 	--PRINT(@sql)
 	EXEC(@sql)
 	
	--Added logic to update Prorated Volume for gas daily deals
	DECLARE @sdh_ids NVARCHAR(MAX), @check_gas_daily BIT = 0

	SELECT @sdh_ids = ISNULL(@sdh_ids + ',', '') + CAST(a.source_deal_header_id AS NVARCHAR(10)),
		   @check_gas_daily = 1
	FROM (
		SELECT DISTINCT sdh.source_deal_header_id
		FROM #temp_deal_header t
		INNER JOIN source_deal_header sdh
			ON sdh.deal_id = t.deal_id	
		INNER JOIN source_deal_header_template sdht
			ON sdht.template_id = sdh.template_id
				AND sdht.is_gas_daily = 'y'
	) a

	IF @check_gas_daily = 1
	BEGIN
		SET @sql = 'spa_update_prorated_volume ''u'', ''' + @sdh_ids + ''''
 		SET @job_name = 'UpdateProratedVolume_' + @process_id3
		EXEC spa_run_sp_as_job @job_name, @sql, 'UpdateProratedVolume', @user_login_id
	END 

 	SET @pos_job_name =  'calc_position_breakdown_' + @process_id3
-- 	SET @sql = 'spa_update_deal_total_volume NULL,'''+@process_id3+''',0,1,''' + @user_login_id + ''''
 	SET @sql = 'spa_calc_deal_position_breakdown NULL,'''+@process_id3+''''

 	EXEC spa_run_sp_as_job @pos_job_name,  @sql, 'generating_report_table', @user_login_id
 	
	IF ISNULL(@deal_detail_audit_log,1) = 2
	BEGIN
 		IF @inserted_deals IS NOT NULL
 		BEGIN
 			SET @sql = 'spa_insert_update_audit ''i'',''' + @inserted_deals + '''' + ',''Inserted from Import/Export.'''
 			SET @job_name = 'spa_insert_update_audit_inserted_' + @process_id3
 		
 			EXEC spa_run_sp_as_job @job_name, @sql, 'spa_insert_update_audit_inserted', @user_login_id
 		END
 	
 		IF @updated_deals IS NOT NULL
 		BEGIN
 			SET @sql = 'spa_insert_update_audit ''u'',''' + @updated_deals + '''' + ',''Inserted from Import/Export.'''
 			SET @job_name = 'spa_insert_update_audit_updated_' + @process_id3
 		
 			EXEC spa_run_sp_as_job @job_name, @sql, 'spa_insert_update_audit_updated', @user_login_id
 		END
 	END

 	EXEC spa_master_deal_view 'u', NULL, @search_table
 	--PRINT('Source Deal Detail INSERT COMPLETED. Process took ' + dbo.FNACalculateTimestamp(@deal_detail_insert_batch_ts))
	
	--deal transfer starts(changed as per change in sp:referring issue id 31029)
	DECLARE @inserted_source_deal_header_id NVARCHAR(MAX)

	SELECT @inserted_source_deal_header_id = STUFF(( SELECT  ', ' + CONVERT(NVARCHAR(38), source_deal_header_id)
													 FROM    ( SELECT DISTINCT 
																	  source_deal_header_id
													            FROM #inserted_deals
													          ) x
													 FOR
													 XML PATH('')
											      ), 1, 2, '') 

	EXEC spa_auto_transfer @source_deal_header_id = @inserted_source_deal_header_id
	--deal transfer ends
END 

IF @table_name IN ('ixp_15mins_allocation_data_template', 'ixp_mv90_data_template')
 BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @import_temp_table_name)

	IF OBJECT_ID('tempdb..#temp_hour_mapping') IS NOT NULL
		DROP TABLE #temp_hour_mapping

	--	EXEC('select * from '+ @import_temp_table_name)

	---- aded to map hour to origina form as for hourly ) 01:00 = 00:00
	CREATE TABLE #temp_hour_mapping (
		clm_name NVARCHAR(10) COLLATE DATABASE_DEFAULT
		,alias_name NVARCHAR(10) COLLATE DATABASE_DEFAULT
		,is_dst BIT
		,granularity INT
		)

	SET @sql = ' DECLARE @max_input_date DATE
				 DECLARE @min_input_date DATE
				 SELECT @max_input_date = MAX(date), @min_input_date = MIN(date) FROM ' + @import_temp_table_name + '
				 INSERT INTO #temp_hour_mapping(clm_name,alias_name,is_dst,granularity) 
					SELECT clm_name, alias_name, is_dst,982 FROM FNAGetPivotGranularityColumn(@min_input_date,@max_input_date,982,' + CAST(@dst_group_value_id AS NVARCHAR(20)) + ') UNION ALL
					SELECT clm_name, alias_name, is_dst,987 FROM FNAGetPivotGranularityColumn(@min_input_date,@max_input_date,987,' + CAST(@dst_group_value_id AS NVARCHAR(20)) + ') UNION ALL
					SELECT clm_name, alias_name, is_dst,989 FROM FNAGetPivotGranularityColumn(@min_input_date,@max_input_date,989,' + CAST(@dst_group_value_id AS NVARCHAR(20)) + ') 

	'

	EXEC (@sql)

	EXEC (
			'UPDATE ittn SET [hour] = LEFT(thm.clm_name,2)+'':''+RIGHT(thm.clm_name,2) from #temp_hour_mapping thm  INNER JOIN ' + @import_temp_table_name + ' ittn ON REPLACE(thm.alias_name,''DST'','''') = RIGHT(''00''+ittn.[hour],5)
	INNER JOIN meter_id mi ON mi.recorderid = ittn.meter_id AND thm.granularity = mi.granularity
	AND ittn.is_dst = thm.is_dst
	'
			)
			
			
	--EXEC('select * from '+ @import_temp_table_name)	
	--return
 	        
 	--PRINT('***total no of data***')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + a.[hour] + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT [meter_id],[channel],[date],[hour], COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY [meter_id],[channel],[date],[hour]
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.[meter_id] = b.[meter_id] AND a.[channel] = b.[channel] AND a.[date] = b.[date] AND a.[hour] = b.[hour]')
 	
 	--PRINT('***duplicate data***')
 	
 	BEGIN TRY
 		-- Insert data into temporary from staging table
 		IF @drilldown_level = 1
 		BEGIN
		

		EXEC ('INSERT INTO '+@import_temp_table_name+'(date,value,source_system_id,channel,meter_id,hour,is_dst) SELECT  date,value,source_system_id,channel,meter_id,''24:''+CAST(RIGHT(hour,2) as NVARCHAR(15)),0 FROM '+ @import_temp_table_name +  ' a WHERE a.is_dst = 1') 
		
		EXEC ('UPDATE ' + @import_temp_table_name + ' SET hour = ''0:00'' WHERE hour IS NULL') 
		
		EXEC ('INSERT INTO #tmp_staging_table([meter_id],[channel],[date],[hour],[value],is_dst) 
					SELECT [meter_id], ISNULL([channel],1), [dbo].[FNAClientToSqlDate]([date]), [hour], [value],is_dst FROM ' + @import_temp_table_name)
 			exec spa_print '***tmp_staging_table data***'
		
 		END
 		ELSE IF @drilldown_level = 2
 		BEGIN
 			EXEC ('INSERT INTO #tmp_staging_table ([meter_id],[channel],[date],[hour],[value], [h_filename],
 				       [h_error],
 				       [d_filename],
 				       [d_error],
 				       [granularity])
 				SELECT [meter_id],
 				       ISNULL([channel], 1),
 				       [dbo].[FNAClientToSqlDate]([date]),
 				       CASE WHEN [granularity] = ''h'' THEN RIGHT(''0'' + CAST(ISNULL(NULLIF((CAST(SUBSTRING([hour], 1, ISNULL(NULLIF(CHARINDEX('':'', [hour])-1, -1), LEN([hour]))) AS INT) - 1), -1), 1) AS NVARCHAR(10)) + '':00'', 5) 
 							WHEN [granularity] = ''m'' THEN ''00:00'' 
 							ELSE [hour] 
 					    END,
 				       [value],
 				       [h_filename],
 				       [h_error],
 				       [d_filename],
 				       [d_error],
 				       [granularity]
 				FROM  ' + @import_temp_table_name)
 		END	
 		
 	END TRY
 	BEGIN CATCH
 		SET @error_msg = 'Error: ' + ERROR_MESSAGE()
 		SET @error_code = 'e'
 		--PRINT @error_msg
 		
 		INSERT INTO source_system_data_import_status (
 			process_id,
 			code,
 			MODULE,
 			[source],
 			[TYPE],
 			[description],
 			recommendation,
 			rules_name
 		  )
 		  EXEC (
 				 'SELECT DISTINCT ' 
 				 + '''' + @process_id + '''' + ',' 
 				 + '''Error'''  + ',' 
 				 + '''Import Allocation Data(15 mins)''' + ',' 
 				 + '''' + @table_name + '''' + ',' 
 				 +  '''Error''' + ',' 
 				 + '''' + @error_msg + '''' + ',' + 
 				 '''Please check if the date format provided matches the Users Date format.''' + ',' 
 				 + '''' + @rules_names + '''' +
 				 ' FROM ' + @import_temp_table_name
 		  )
 		
 		--PRINT('***error data***')
 		
 		SELECT @url_desc = './dev/spa_html.php?__user_name__=' + @user_login_id +
 			   '&spa=exec spa_get_import_process_status ''' + @process_id + ''',''' 
 			   + @user_login_id + ''''
 		
 		SELECT @desc = '<a target="_blank" href="' + @url_desc + '">' +
 			   'Allocation data import process completed' +
 			   CASE 
 					WHEN (@error_code = 'e') THEN ' (ERRORS found)'
 					ELSE ''
 			   END +  ' </a>'
 				IF NOT EXISTS( SELECT error_message_id from ixp_import_data_source iids 
						   INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id 
						   WHERE rules_id = @rules_id)
				BEGIN
 		                       EXEC spa_NotificationUserByRole 2, @process_id, 'Import Allocation Data(15 mins)', @desc , @error_code, @job_name, 1
 				END
 		RETURN
 	END CATCH
 	
 	-- missing meter logic is only valid for import except in Ebase Interface(In Ebase missing meter is handled in Adaptor level)
 	INSERT INTO #tmp_missing_meter_id (meter_id)
 	SELECT	DISTINCT tmp.meter_id
 	FROM #tmp_staging_table tmp
 	LEFT JOIN meter_id mi
 		ON mi.recorderid = tmp.meter_id
 	WHERE mi.recorderid IS NULL
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + ISNULL(a.[hour], ''NULL'') + '' (Meter ID: '' + a.meter_id + '' not found in the system.)'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN #tmp_missing_meter_id b
 		  ON  a.[meter_id] = b.[meter_id]')
 		
 	--SELECT * FROM #tmp_staging_table ta
 	CREATE TABLE [#tmp_mv90_data_mins] (
 		[meter_id] INT, [channel] INT, [prod_date] DATETIME,
 		[Hr1_15] FLOAT, [Hr1_30] FLOAT,[Hr1_45] FLOAT, [Hr1_60] FLOAT,
 		[Hr2_15] FLOAT, [Hr2_30] FLOAT, [Hr2_45] FLOAT, [Hr2_60] FLOAT, 
 		[Hr3_15] FLOAT, [Hr3_30] FLOAT, [Hr3_45] FLOAT, [Hr3_60] FLOAT, 
 		[Hr4_15] FLOAT, [Hr4_30] FLOAT, [Hr4_45] FLOAT, [Hr4_60] FLOAT, 
 		[Hr5_15] FLOAT, [Hr5_30] FLOAT, [Hr5_45] FLOAT, [Hr5_60] FLOAT, 
 		[Hr6_15] FLOAT, [Hr6_30] FLOAT, [Hr6_45] FLOAT, [Hr6_60] FLOAT, 
 		[Hr7_15] FLOAT, [Hr7_30] FLOAT, [Hr7_45] FLOAT, [Hr7_60] FLOAT, 
 		[Hr8_15] FLOAT, [Hr8_30] FLOAT, [Hr8_45] FLOAT, [Hr8_60] FLOAT, 
 		[Hr9_15] FLOAT, [Hr9_30] FLOAT, [Hr9_45] FLOAT, [Hr9_60] FLOAT, 
 		[Hr10_15] FLOAT, [Hr10_30] FLOAT, [Hr10_45] FLOAT, [Hr10_60] FLOAT, 
 		[Hr11_15] FLOAT, [Hr11_30] FLOAT, [Hr11_45] FLOAT, [Hr11_60] FLOAT, 
 		[Hr12_15] FLOAT, [Hr12_30] FLOAT, [Hr12_45] FLOAT, [Hr12_60] FLOAT, 
 		[Hr13_15] FLOAT, [Hr13_30] FLOAT, [Hr13_45] FLOAT, [Hr13_60] FLOAT, 
 		[Hr14_15] FLOAT, [Hr14_30] FLOAT, [Hr14_45] FLOAT, [Hr14_60] FLOAT, 
 		[Hr15_15] FLOAT, [Hr15_30] FLOAT, [Hr15_45] FLOAT, [Hr15_60] FLOAT, 
 		[Hr16_15] FLOAT, [Hr16_30] FLOAT, [Hr16_45] FLOAT, [Hr16_60] FLOAT, 
 		[Hr17_15] FLOAT, [Hr17_30] FLOAT, [Hr17_45] FLOAT, [Hr17_60] FLOAT, 
 		[Hr18_15] FLOAT, [Hr18_30] FLOAT, [Hr18_45] FLOAT, [Hr18_60] FLOAT, 
 		[Hr19_15] FLOAT, [Hr19_30] FLOAT, [Hr19_45] FLOAT, [Hr19_60] FLOAT, 
 		[Hr20_15] FLOAT, [Hr20_30] FLOAT, [Hr20_45] FLOAT, [Hr20_60] FLOAT, 
 		[Hr21_15] FLOAT, [Hr21_30] FLOAT, [Hr21_45] FLOAT, [Hr21_60] FLOAT, 
 		[Hr22_15] FLOAT, [Hr22_30] FLOAT, [Hr22_45] FLOAT, [Hr22_60] FLOAT, 
 		[Hr23_15] FLOAT, [Hr23_30] FLOAT, [Hr23_45] FLOAT, [Hr23_60] FLOAT, 
 		[Hr24_15] FLOAT, [Hr24_30] FLOAT, [Hr24_45] FLOAT, [Hr24_60] FLOAT, 
 		[Hr25_15] FLOAT, [Hr25_30] FLOAT, [Hr25_45] FLOAT, [Hr25_60] FLOAT
 		
 	)
	--SELECT * FROM #tmp_mv90_data_mins
 	--	SELECT	[meter_id], [channel], [DATE], 
 	--		[00:00], [00:15], [00:30], [00:45], 
 	--		[01:00], [01:15], [01:30], [01:45], 
 	--		[02:00], [02:15], [02:30], [02:45], 
 	--		[03:00], [03:15], [03:30], [03:45], 
 	--		[04:00], [04:15], [04:30], [04:45], 
 	--		[05:00], [05:15], [05:30], [05:45], 
 	--		[06:00], [06:15], [06:30], [06:45], 
 	--		[07:00], [07:15], [07:30], [07:45], 
 	--		[08:00], [08:15], [08:30], [08:45], 
 	--		[09:00], [09:15], [09:30], [09:45], 
 	--		[10:00], [10:15], [10:30], [10:45], 
 	--		[11:00], [11:15], [11:30], [11:45], 
 	--		[12:00], [12:15], [12:30], [12:45], 
 	--		[13:00], [13:15], [13:30], [13:45], 
 	--		[14:00], [14:15], [14:30], [14:45], 
 	--		[15:00], [15:15], [15:30], [15:45], 
 	--		[16:00], [16:15], [16:30], [16:45], 
 	--		[17:00], [17:15], [17:30], [17:45], 
 	--		[18:00], [18:15], [18:30], [18:45], 
 	--		[19:00], [19:15], [19:30], [19:45], 
 	--		[20:00], [20:15], [20:30], [20:45], 
 	--		[21:00], [21:15], [21:30], [21:45], 
 	--		[22:00], [22:15], [22:30], [22:45], 
 	--		[23:00], [23:15], [23:30], [23:45], 
 	--		[24:00], [24:15], [24:30], [24:45]
 	--FROM	(
 	--			SELECT meter_id, [date], [hour], [channel], [value]  FROM (
 	--			SELECT	mi.meter_id,
 	--					tmp.[channel],
 	--					tmp.[date] [DATE],--CONVERT(DATETIME, tmp.[date], 102) [date],
 	--					RIGHT('00'+tmp.[hour],5)[HOUR],						
 	--					CASE 
 	--						--WHEN ( CONVERT(DATETIME, tmp.[date], 102) = md.[date] AND CAST(STUFF(tmp.[hour], CHARINDEX(':', tmp.[hour]),3,'') AS INT) + 1 = md.[hour])
 	--						WHEN ( tmp.[date] = md.[date] AND CAST(STUFF(tmp.[hour], CHARINDEX(':', tmp.[hour]),3,'') AS INT) + 1 = md.[hour])
 	--						THEN 0
 	--						ELSE CAST(tmp.[value] AS FLOAT) 
 	--					END [VALUE]
 	--			FROM [#tmp_staging_table] tmp
 	--								INNER JOIN [meter_id] mi ON  mi.[recorderid] = tmp.[meter_id]
 	--								LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id AND tmp.channel = rp.channel
 	--					LEFT JOIN [mv90_DST] md 
 	--						--ON md.[year] = YEAR(CONVERT(DATETIME, tmp.[date], 102)) 
 	--						ON md.[year] = YEAR(tmp.[date]) AND md.[insert_delete] = 'd' ) a
 	--			GROUP BY meter_id, [date], [hour], [channel], [value]
 	--		) DataTable
 	--PIVOT	(
 	--			SUM([VALUE]) 
 	--			FOR [HOUR] IN (
 	--							[00:00], [00:15], [00:30], [00:45], 
 	--							[01:00], [01:15], [01:30], [01:45], 
 	--							[02:00], [02:15], [02:30], [02:45], 
 	--							[03:00], [03:15], [03:30], [03:45], 
 	--							[04:00], [04:15], [04:30], [04:45], 
 	--							[05:00], [05:15], [05:30], [05:45], 
 	--							[06:00], [06:15], [06:30], [06:45], 
 	--							[07:00], [07:15], [07:30], [07:45], 
 	--							[08:00], [08:15], [08:30], [08:45], 
 	--							[09:00], [09:15], [09:30], [09:45], 
 	--							[10:00], [10:15], [10:30], [10:45], 
 	--							[11:00], [11:15], [11:30], [11:45], 
 	--							[12:00], [12:15], [12:30], [12:45], 
 	--							[13:00], [13:15], [13:30], [13:45], 
 	--							[14:00], [14:15], [14:30], [14:45], 
 	--							[15:00], [15:15], [15:30], [15:45], 
 	--							[16:00], [16:15], [16:30], [16:45], 
 	--							[17:00], [17:15], [17:30], [17:45], 
 	--							[18:00], [18:15], [18:30], [18:45], 
 	--							[19:00], [19:15], [19:30], [19:45], 
 	--							[20:00], [20:15], [20:30], [20:45], 
 	--							[21:00], [21:15], [21:30], [21:45], 
 	--							[22:00], [22:15], [22:30], [22:45], 
 	--							[23:00], [23:15], [23:30], [23:45], 
 	--							[24:00], [24:15], [24:30], [24:45]
 	--						)
 	--		) PivotTable
	

 INSERT INTO [#tmp_mv90_data_mins]
 	SELECT	[meter_id], [channel], [DATE], 
 			[00:00], [00:15], [00:30], [00:45], 
 			[01:00], [01:15], [01:30], [01:45], 
 			[02:00], [02:15], [02:30], [02:45], 
 			[03:00], [03:15], [03:30], [03:45], 
 			[04:00], [04:15], [04:30], [04:45], 
 			[05:00], [05:15], [05:30], [05:45], 
 			[06:00], [06:15], [06:30], [06:45], 
 			[07:00], [07:15], [07:30], [07:45], 
 			[08:00], [08:15], [08:30], [08:45], 
 			[09:00], [09:15], [09:30], [09:45], 
 			[10:00], [10:15], [10:30], [10:45], 
 			[11:00], [11:15], [11:30], [11:45], 
 			[12:00], [12:15], [12:30], [12:45], 
 			[13:00], [13:15], [13:30], [13:45], 
 			[14:00], [14:15], [14:30], [14:45], 
 			[15:00], [15:15], [15:30], [15:45], 
 			[16:00], [16:15], [16:30], [16:45], 
 			[17:00], [17:15], [17:30], [17:45], 
 			[18:00], [18:15], [18:30], [18:45], 
 			[19:00], [19:15], [19:30], [19:45], 
 			[20:00], [20:15], [20:30], [20:45], 
 			[21:00], [21:15], [21:30], [21:45], 
 			[22:00], [22:15], [22:30], [22:45], 
 			[23:00], [23:15], [23:30], [23:45], 
 			[24:00], [24:15], [24:30], [24:45]
 	FROM	(
 				SELECT meter_id, [date], [hour], [channel], [value]  FROM (
 				SELECT	mi.meter_id,
 						tmp.[channel],
 						tmp.[date] [DATE],--CONVERT(DATETIME, tmp.[date], 102) [date],
 						RIGHT('00'+tmp.[hour],5)[HOUR],						
 						CASE 
 							--WHEN ( CONVERT(DATETIME, tmp.[date], 102) = md.[date] AND CAST(STUFF(tmp.[hour], CHARINDEX(':', tmp.[hour]),3,'') AS INT) + 1 = md.[hour])
 							WHEN ( tmp.[date] = md.[date] AND CAST(STUFF(tmp.[hour], CHARINDEX(':', tmp.[hour]),3,'') AS INT) + 1 = md.[hour])
 							THEN 0
 							ELSE CAST(tmp.[value] AS FLOAT) 
 						END [VALUE]
 				FROM [#tmp_staging_table] tmp
 									INNER JOIN [meter_id] mi ON  mi.[recorderid] = tmp.[meter_id]
 									LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id AND tmp.channel = rp.channel
 						LEFT JOIN [mv90_DST] md 
 							--ON md.[year] = YEAR(CONVERT(DATETIME, tmp.[date], 102)) 
 							ON md.[year] = YEAR(tmp.[date]) AND md.[insert_delete] = 'd'
							AND md.dst_group_value_id = @dst_group_value_id
							where tmp.is_dst <> 1 
							 ) a
 				GROUP BY meter_id, [date], [hour], [channel], [value]
 			) DataTable
 	PIVOT	(
 				SUM([VALUE]) 
 				FOR [HOUR] IN (
 								[00:00], [00:15], [00:30], [00:45], 
 								[01:00], [01:15], [01:30], [01:45], 
 								[02:00], [02:15], [02:30], [02:45], 
 								[03:00], [03:15], [03:30], [03:45], 
 								[04:00], [04:15], [04:30], [04:45], 
 								[05:00], [05:15], [05:30], [05:45], 
 								[06:00], [06:15], [06:30], [06:45], 
 								[07:00], [07:15], [07:30], [07:45], 
 								[08:00], [08:15], [08:30], [08:45], 
 								[09:00], [09:15], [09:30], [09:45], 
 								[10:00], [10:15], [10:30], [10:45], 
 								[11:00], [11:15], [11:30], [11:45], 
 								[12:00], [12:15], [12:30], [12:45], 
 								[13:00], [13:15], [13:30], [13:45], 
 								[14:00], [14:15], [14:30], [14:45], 
 								[15:00], [15:15], [15:30], [15:45], 
 								[16:00], [16:15], [16:30], [16:45], 
 								[17:00], [17:15], [17:30], [17:45], 
 								[18:00], [18:15], [18:30], [18:45], 
 								[19:00], [19:15], [19:30], [19:45], 
 								[20:00], [20:15], [20:30], [20:45], 
 								[21:00], [21:15], [21:30], [21:45], 
 								[22:00], [22:15], [22:30], [22:45], 
 								[23:00], [23:15], [23:30], [23:45], 
 								[24:00], [24:15], [24:30], [24:45]
 							)
 			) PivotTable
		
 	-- sum of the DST hours in the Hr3_15 = Hr3_15 + Hr25_00  
 	SELECT @col = 'Hr' + CAST(md.hour AS NVARCHAR) + '_15 = Hr' + CAST(md.hour AS NVARCHAR) + '_15 + ISNULL(Hr25_15, 0),  
 	   Hr' + CAST(md.hour AS NVARCHAR) + '_30 = Hr' + CAST(md.hour AS NVARCHAR) + '_30 + ISNULL(Hr25_30, 0),  
 	   Hr' + CAST(md.hour AS NVARCHAR) + '_45 = Hr' + CAST(md.hour AS NVARCHAR) + '_45 + ISNULL(Hr25_45, 0),  
 	   Hr' + CAST(md.hour AS NVARCHAR) + '_60 = Hr' + CAST(md.hour AS NVARCHAR) + '_60 + ISNULL(Hr25_60, 0) '  
 	FROM	#tmp_mv90_data_mins tmp
 			INNER JOIN mv90_DST md
 			ON  md.date = tmp.prod_date
 				   AND md.insert_delete = 'i'
				   AND md.dst_group_value_id = @dst_group_value_id


 	SET @sql = '
 				UPDATE	tmp
 				SET	' + @col + '
 				FROM #tmp_mv90_data_mins tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.prod_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(20)) + '
 				'
 	
 	EXEC(@sql)
	
	
				
	
 	-- insert data into mv90_data summary table
 	SELECT tf.[meter_id],
 		   CONVERT(NVARCHAR(7),tf.[prod_date],120)+'-01' [gen_date],
 		   CONVERT(NVARCHAR(7),tf.[prod_date],120)+'-01' [from_date],
 		   DATEADD(MONTH, 1,  CONVERT(NVARCHAR(7),tf.[prod_date],120)+'-01') -1 [to_date],
 		   tf.[channel],
 		   SUM(
 	   			ISNULL(tf.[Hr1_15], 0) + ISNULL(tf.[Hr1_30], 0) + ISNULL(tf.[Hr1_45], 0) + ISNULL(tf.[Hr1_60], 0) + 
 	   			ISNULL(tf.[Hr2_15], 0) + ISNULL(tf.[Hr2_30], 0) + ISNULL(tf.[Hr2_45], 0) + ISNULL(tf.[Hr2_60], 0) + 
 	   			ISNULL(tf.[Hr3_15], 0) + ISNULL(tf.[Hr3_30], 0) + ISNULL(tf.[Hr3_45], 0) + ISNULL(tf.[Hr3_60], 0) + 
 	   			ISNULL(tf.[Hr4_15], 0) + ISNULL(tf.[Hr4_30], 0) + ISNULL(tf.[Hr4_45], 0) + ISNULL(tf.[Hr4_60], 0) + 
 	   			ISNULL(tf.[Hr5_15], 0) + ISNULL(tf.[Hr5_30], 0) + ISNULL(tf.[Hr5_45], 0) + ISNULL(tf.[Hr5_60], 0) + 
 	   			ISNULL(tf.[Hr6_15], 0) + ISNULL(tf.[Hr6_30], 0) + ISNULL(tf.[Hr6_45], 0) + ISNULL(tf.[Hr6_60], 0) + 
 	   			ISNULL(tf.[Hr7_15], 0) + ISNULL(tf.[Hr7_30], 0) + ISNULL(tf.[Hr7_45], 0) + ISNULL(tf.[Hr7_60], 0) + 
 	   			ISNULL(tf.[Hr8_15], 0) + ISNULL(tf.[Hr8_30], 0) + ISNULL(tf.[Hr8_45], 0) + ISNULL(tf.[Hr8_60], 0) + 
 	   			ISNULL(tf.[Hr9_15], 0) + ISNULL(tf.[Hr9_30], 0) + ISNULL(tf.[Hr9_45], 0) + ISNULL(tf.[Hr9_60], 0) + 
 	   			ISNULL(tf.[Hr10_15], 0) + ISNULL(tf.[Hr10_30], 0) + ISNULL(tf.[Hr10_45], 0) + ISNULL(tf.[Hr10_60], 0) + 
 	   			ISNULL(tf.[Hr11_15], 0) + ISNULL(tf.[Hr11_30], 0) + ISNULL(tf.[Hr11_45], 0) + ISNULL(tf.[Hr11_60], 0) + 
 	   			ISNULL(tf.[Hr12_15], 0) + ISNULL(tf.[Hr12_30], 0) + ISNULL(tf.[Hr12_45], 0) + ISNULL(tf.[Hr12_60], 0) + 
 	   			ISNULL(tf.[Hr13_15], 0) + ISNULL(tf.[Hr13_30], 0) + ISNULL(tf.[Hr13_45], 0) + ISNULL(tf.[Hr13_60], 0) + 
 	   			ISNULL(tf.[Hr14_15], 0) + ISNULL(tf.[Hr14_30], 0) + ISNULL(tf.[Hr14_45], 0) + ISNULL(tf.[Hr14_60], 0) + 
 	   			ISNULL(tf.[Hr15_15], 0) + ISNULL(tf.[Hr15_30], 0) + ISNULL(tf.[Hr15_45], 0) + ISNULL(tf.[Hr15_60], 0) + 
 	   			ISNULL(tf.[Hr16_15], 0) + ISNULL(tf.[Hr16_30], 0) + ISNULL(tf.[Hr16_45], 0) + ISNULL(tf.[Hr16_60], 0) + 
 	   			ISNULL(tf.[Hr17_15], 0) + ISNULL(tf.[Hr17_30], 0) + ISNULL(tf.[Hr17_45], 0) + ISNULL(tf.[Hr17_60], 0) + 
 	   			ISNULL(tf.[Hr18_15], 0) + ISNULL(tf.[Hr18_30], 0) + ISNULL(tf.[Hr18_45], 0) + ISNULL(tf.[Hr18_60], 0) + 
 	   			ISNULL(tf.[Hr19_15], 0) + ISNULL(tf.[Hr19_30], 0) + ISNULL(tf.[Hr19_45], 0) + ISNULL(tf.[Hr19_60], 0) + 
 	   			ISNULL(tf.[Hr20_15], 0) + ISNULL(tf.[Hr20_30], 0) + ISNULL(tf.[Hr20_45], 0) + ISNULL(tf.[Hr20_60], 0) + 
 	   			ISNULL(tf.[Hr21_15], 0) + ISNULL(tf.[Hr21_30], 0) + ISNULL(tf.[Hr21_45], 0) + ISNULL(tf.[Hr21_60], 0) + 
 	   			ISNULL(tf.[Hr22_15], 0) + ISNULL(tf.[Hr22_30], 0) + ISNULL(tf.[Hr22_45], 0) + ISNULL(tf.[Hr22_60], 0) + 
 	   			ISNULL(tf.[Hr23_15], 0) + ISNULL(tf.[Hr23_30], 0) + ISNULL(tf.[Hr23_45], 0) + ISNULL(tf.[Hr23_60], 0) + 
 	   			ISNULL(tf.[Hr24_15], 0) + ISNULL(tf.[Hr24_30], 0) + ISNULL(tf.[Hr24_45], 0) + ISNULL(tf.[Hr24_60], 0) 
 		   ) [volume]
 		
 	INTO [#temp_summary]
 	FROM [#tmp_mv90_data_mins] tf
 	GROUP BY tf.[meter_id], tf.[channel], CONVERT(NVARCHAR(7),tf.[prod_date],120)+'-01', DATEADD(MONTH, 1,  CONVERT(NVARCHAR(7),tf.[prod_date],120)+'-01') -1
 	
 	IF @drilldown_level = 1
 	BEGIN		
 		DELETE mdm
 		FROM [mv90_data_mins] mdm
 		INNER JOIN [mv90_data] md ON  md.[meter_data_id] = mdm.[meter_data_id]
 		INNER JOIN #tmp_mv90_data_mins tf
 			ON  tf.[meter_id] = md.[meter_id]
 			AND md.[channel] = tf.[channel]
 			AND mdm.[prod_date] = tf.[prod_date]
 	
 		
 		DELETE mdm
 		FROM [mv90_data_hour] mdm
 		INNER JOIN [mv90_data] md ON  md.[meter_data_id] = mdm.[meter_data_id]
 		INNER JOIN #tmp_mv90_data_mins tf
 			 ON tf.[meter_id] = md.[meter_id]
 			 AND md.[channel] = tf.[channel]
 			 AND mdm.[prod_date] = tf.[prod_date]
 		--WHERE tf.[granularity] = 'h' OR tf.[granularity] = 'q'
 					 
 		DELETE md
 		FROM [mv90_data] md
 		INNER JOIN [#temp_summary] ts
 			ON md.[meter_id] = ts.[meter_id]
 			AND md.[channel] = ts.[channel]
 			AND [dbo].[FNAgetcontractmonth](md.[from_date]) = [dbo].[FNAgetcontractmonth](ts.[from_date])
 		--WHERE ts.[]
 			
 		INSERT INTO [mv90_data] ( [meter_id], [gen_date], [from_date], [to_date], [channel], [volume], [uom_id] )
 		SELECT [meter_id], [gen_date], [from_date], [to_date], [channel], [volume], 0
 		FROM #temp_summary
 
 		--insert new data
 		INSERT INTO [mv90_data_mins] (
 				[meter_data_id], [prod_date], 
 				[Hr1_15], [Hr1_30], [Hr1_45], [Hr1_60], 
 				[Hr2_15], [Hr2_30], [Hr2_45], [Hr2_60], 
 				[Hr3_15], [Hr3_30], [Hr3_45], [Hr3_60], 
 				[Hr4_15], [Hr4_30], [Hr4_45], [Hr4_60], 
 				[Hr5_15], [Hr5_30], [Hr5_45], [Hr5_60], 
 				[Hr6_15], [Hr6_30], [Hr6_45], [Hr6_60], 
 				[Hr7_15], [Hr7_30], [Hr7_45], [Hr7_60], 
 				[Hr8_15], [Hr8_30], [Hr8_45], [Hr8_60], 
 				[Hr9_15], [Hr9_30], [Hr9_45], [Hr9_60], 
 				[Hr10_15], [Hr10_30], [Hr10_45], [Hr10_60], 
 				[Hr11_15], [Hr11_30], [Hr11_45], [Hr11_60], 
 				[Hr12_15], [Hr12_30], [Hr12_45], [Hr12_60], 
 				[Hr13_15], [Hr13_30], [Hr13_45], [Hr13_60], 
 				[Hr14_15], [Hr14_30], [Hr14_45], [Hr14_60], 
 				[Hr15_15], [Hr15_30], [Hr15_45], [Hr15_60], 
 				[Hr16_15], [Hr16_30], [Hr16_45], [Hr16_60], 
 				[Hr17_15], [Hr17_30], [Hr17_45], [Hr17_60], 
 				[Hr18_15], [Hr18_30], [Hr18_45], [Hr18_60], 
 				[Hr19_15], [Hr19_30], [Hr19_45], [Hr19_60], 
 				[Hr20_15], [Hr20_30], [Hr20_45], [Hr20_60], 
 				[Hr21_15], [Hr21_30], [Hr21_45], [Hr21_60], 
 				[Hr22_15], [Hr22_30], [Hr22_45], [Hr22_60], 
 				[Hr23_15], [Hr23_30], [Hr23_45], [Hr23_60], 
 				[Hr24_15], [Hr24_30], [Hr24_45], [Hr24_60], 
 				[Hr25_15], [Hr25_30], [Hr25_45], [Hr25_60],
 				[uom_id]
 		)
 		SELECT	md.[meter_data_id], [prod_date], 
 				[Hr1_15], [Hr1_30], [Hr1_45], [Hr1_60], 
 				[Hr2_15], [Hr2_30], [Hr2_45], [Hr2_60], 
 				[Hr3_15], [Hr3_30], [Hr3_45], [Hr3_60], 
 				[Hr4_15], [Hr4_30], [Hr4_45], [Hr4_60], 
 				[Hr5_15], [Hr5_30], [Hr5_45], [Hr5_60], 
 				[Hr6_15], [Hr6_30], [Hr6_45], [Hr6_60], 
 				[Hr7_15], [Hr7_30], [Hr7_45], [Hr7_60], 
 				[Hr8_15], [Hr8_30], [Hr8_45], [Hr8_60], 
 				[Hr9_15], [Hr9_30], [Hr9_45], [Hr9_60], 
 				[Hr10_15], [Hr10_30], [Hr10_45], [Hr10_60], 
 				[Hr11_15], [Hr11_30], [Hr11_45], [Hr11_60], 
 				[Hr12_15], [Hr12_30], [Hr12_45], [Hr12_60], 
 				[Hr13_15], [Hr13_30], [Hr13_45], [Hr13_60], 
 				[Hr14_15], [Hr14_30], [Hr14_45], [Hr14_60], 
 				[Hr15_15], [Hr15_30], [Hr15_45], [Hr15_60], 
 				[Hr16_15], [Hr16_30], [Hr16_45], [Hr16_60], 
 				[Hr17_15], [Hr17_30], [Hr17_45], [Hr17_60], 
 				[Hr18_15], [Hr18_30], [Hr18_45], [Hr18_60], 
 				[Hr19_15], [Hr19_30], [Hr19_45], [Hr19_60], 
 				[Hr20_15], [Hr20_30], [Hr20_45], [Hr20_60], 
 				[Hr21_15], [Hr21_30], [Hr21_45], [Hr21_60], 
 				[Hr22_15], [Hr22_30], [Hr22_45], [Hr22_60], 
 				[Hr23_15], [Hr23_30], [Hr23_45], [Hr23_60], 
 				[Hr24_15], [Hr24_30], [Hr24_45], [Hr24_60], 
 				[Hr25_15], [Hr25_30], [Hr25_45], [Hr25_60],
 				md.[uom_id]
 		FROM [#tmp_mv90_data_mins] tmdm
 		INNER JOIN [mv90_data] md
 			ON md.[meter_id] = tmdm.[meter_id]
 			AND md.[from_date] =  CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01'
 			AND md.channel = tmdm.channel
 		--WHERE tmdm.granularity = 'q'
 
 		INSERT INTO mv90_data_hour(meter_data_id,prod_date,
 		   Hr1, Hr2, Hr3, Hr4,
 		   Hr5, Hr6, Hr7, Hr8,
 		   Hr9, Hr10, Hr11, Hr12,
 		   Hr13, Hr14, Hr15, Hr16,
 		   Hr17, Hr18, Hr19, Hr20,
 		   Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)
 		SELECT	md.meter_data_id,prod_date,
 				SUM(ISNULL(Hr1_15, 0) + ISNULL(Hr1_30, 0) + ISNULL(Hr1_45, 0) + ISNULL(Hr1_60, 0)),
 				SUM(ISNULL(Hr2_15, 0) + ISNULL(Hr2_30, 0) + ISNULL(Hr2_45, 0) + ISNULL(Hr2_60, 0)),
 				SUM(ISNULL(Hr3_15, 0) + ISNULL(Hr3_30, 0) + ISNULL(Hr3_45, 0) + ISNULL(Hr3_60, 0)),
 				SUM(ISNULL(Hr4_15, 0) + ISNULL(Hr4_30, 0) + ISNULL(Hr4_45, 0) + ISNULL(Hr4_60, 0)),
 				SUM(ISNULL(Hr5_15, 0) + ISNULL(Hr5_30, 0) + ISNULL(Hr5_45, 0) + ISNULL(Hr5_60, 0)),
 				SUM(ISNULL(Hr6_15, 0) + ISNULL(Hr6_30, 0) + ISNULL(Hr6_45, 0) + ISNULL(Hr6_60, 0)),
 				SUM(ISNULL(Hr7_15, 0) + ISNULL(Hr7_30, 0) + ISNULL(Hr7_45, 0) + ISNULL(Hr7_60, 0)),
 				SUM(ISNULL(Hr8_15, 0) + ISNULL(Hr8_30, 0) + ISNULL(Hr8_45, 0) + ISNULL(Hr8_60, 0)),
 				SUM(ISNULL(Hr9_15, 0) + ISNULL(Hr9_30, 0) + ISNULL(Hr9_45, 0) + ISNULL(Hr9_60, 0)),
 				SUM(ISNULL(Hr10_15, 0) + ISNULL(Hr10_30, 0) + ISNULL(Hr10_45, 0) + ISNULL(Hr10_60, 0)),
 				SUM(ISNULL(Hr11_15, 0) + ISNULL(Hr11_30, 0) + ISNULL(Hr11_45, 0) + ISNULL(Hr11_60, 0)),
 				SUM(ISNULL(Hr12_15, 0) + ISNULL(Hr12_30, 0) + ISNULL(Hr12_45, 0) + ISNULL(Hr12_60, 0)),
 				SUM(ISNULL(Hr13_15, 0) + ISNULL(Hr13_30, 0) + ISNULL(Hr13_45, 0) + ISNULL(Hr13_60, 0)),
 				SUM(ISNULL(Hr14_15, 0) + ISNULL(Hr14_30, 0) + ISNULL(Hr14_45, 0) + ISNULL(Hr14_60, 0)),
 				SUM(ISNULL(Hr15_15, 0) + ISNULL(Hr15_30, 0) + ISNULL(Hr15_45, 0) + ISNULL(Hr15_60, 0)),
 				SUM(ISNULL(Hr16_15, 0) + ISNULL(Hr16_30, 0) + ISNULL(Hr16_45, 0) + ISNULL(Hr16_60, 0)),
 				SUM(ISNULL(Hr17_15, 0) + ISNULL(Hr17_30, 0) + ISNULL(Hr17_45, 0) + ISNULL(Hr17_60, 0)),
 				SUM(ISNULL(Hr18_15, 0) + ISNULL(Hr18_30, 0) + ISNULL(Hr18_45, 0) + ISNULL(Hr18_60, 0)),
 				SUM(ISNULL(Hr19_15, 0) + ISNULL(Hr19_30, 0) + ISNULL(Hr19_45, 0) + ISNULL(Hr19_60, 0)),
 				SUM(ISNULL(Hr20_15, 0) + ISNULL(Hr20_30, 0) + ISNULL(Hr20_45, 0) + ISNULL(Hr20_60, 0)),
 				SUM(ISNULL(Hr21_15, 0) + ISNULL(Hr21_30, 0) + ISNULL(Hr21_45, 0) + ISNULL(Hr21_60, 0)),
 				SUM(ISNULL(Hr22_15, 0) + ISNULL(Hr22_30, 0) + ISNULL(Hr22_45, 0) + ISNULL(Hr22_60, 0)),
 				SUM(ISNULL(Hr23_15, 0) + ISNULL(Hr23_30, 0) + ISNULL(Hr23_45, 0) + ISNULL(Hr23_60, 0)),
 				SUM(ISNULL(Hr24_15, 0) + ISNULL(Hr24_30, 0) + ISNULL(Hr24_45, 0) + ISNULL(Hr24_60, 0)),
 				SUM(ISNULL(Hr25_15, 0) + ISNULL(Hr25_30, 0) + ISNULL(Hr25_45, 0) + ISNULL(Hr25_60, 0)),
 				md.[uom_id]
 		FROM [#tmp_mv90_data_mins] tmdm
 		INNER JOIN [mv90_data] md
 			ON md.[meter_id] = tmdm.[meter_id]
 			AND md.[from_date] = CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01'
 			AND md.channel = tmdm.channel
 		--WHERE tmdm.granularity = 'h' OR tmdm.granularity = 'q'
 		GROUP BY meter_data_id, prod_date, md.uom_id

 	END
 	ELSE
 	BEGIN
 		-- insert if doesn't exists
 		EXEC('INSERT INTO [mv90_data] ( [meter_id], [gen_date], [from_date], [to_date], [channel], [volume], [uom_id] )
 			SELECT t.[meter_id], t.[gen_date], t.[from_date], t.[to_date], t.[channel], ABS(t.[volume]), su.source_uom_id
 			FROM   #temp_summary t 
 			INNER JOIN meter_id mi ON mi.meter_id = t.meter_id 
 			INNER JOIN (
 				SELECT DISTINCT meter_id, uom FROM ' + @temp_header_table + '
 				UNION ALL
 				SELECT DISTINCT mi_sub.recorderid [meter_id], h_sub.uom [uom] FROM ' + @temp_header_table + ' h_sub
 				INNER JOIN meter_id mi ON mi.recorderid = h_sub.meter_id
 				INNER JOIN meter_id mi_sub ON mi_sub.meter_id = mi.sub_meter_id
 				INNER JOIN #temp_summary ts ON ts.meter_id = mi_sub.meter_id
 				WHERE ts.volume < 0
 			) h ON h.meter_id = mi.recorderid 
 			INNER JOIN source_uom su ON su.uom_id = h.uom 
 			LEFT JOIN mv90_data mv ON mv.meter_id = t.meter_id AND mv.from_date = t.from_date AND mv.channel = t.[channel]
 			WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ') 
 				AND mv.meter_id IS NULL 
 			')
 
 		UPDATE t SET t.Hr1_15 = ABS(t.Hr1_15), t.Hr1_30 = ABS(t.Hr1_30), t.Hr1_45 = ABS(t.Hr1_45), t.Hr1_60 = ABS(t.Hr1_60), 
 			t.Hr2_15 = ABS(t.Hr2_15), t.Hr2_30 = ABS(t.Hr2_30), t.Hr2_45 = ABS(t.Hr2_45), t.Hr2_60 = ABS(t.Hr2_60), 
 			t.Hr3_15 = ABS(t.Hr3_15), t.Hr3_30 = ABS(t.Hr3_30), t.Hr3_45 = ABS(t.Hr3_45), t.Hr3_60 = ABS(t.Hr3_60), 
 			t.Hr4_15 = ABS(t.Hr4_15), t.Hr4_30 = ABS(t.Hr4_30), t.Hr4_45 = ABS(t.Hr4_45), t.Hr4_60 = ABS(t.Hr4_60), 
 			t.Hr5_15 = ABS(t.Hr5_15), t.Hr5_30 = ABS(t.Hr5_30), t.Hr5_45 = ABS(t.Hr5_45), t.Hr5_60 = ABS(t.Hr5_60), 
 			t.Hr6_15 = ABS(t.Hr6_15), t.Hr6_30 = ABS(t.Hr6_30), t.Hr6_45 = ABS(t.Hr6_45), t.Hr6_60 = ABS(t.Hr6_60), 
 			t.Hr7_15 = ABS(t.Hr7_15), t.Hr7_30 = ABS(t.Hr7_30), t.Hr7_45 = ABS(t.Hr7_45), t.Hr7_60 = ABS(t.Hr7_60), 
 			t.Hr8_15 = ABS(t.Hr8_15), t.Hr8_30 = ABS(t.Hr8_30), t.Hr8_45 = ABS(t.Hr8_45), t.Hr8_60 = ABS(t.Hr8_60), 
 			t.Hr9_15 = ABS(t.Hr9_15), t.Hr9_30 = ABS(t.Hr9_30), t.Hr9_45 = ABS(t.Hr9_45), t.Hr9_60 = ABS(t.Hr9_60), 
 			t.Hr10_15 = ABS(t.Hr10_15), t.Hr10_30 = ABS(t.Hr10_30), t.Hr10_45 = ABS(t.Hr10_45), t.Hr10_60 = ABS(t.Hr10_60), 
 			t.Hr11_15 = ABS(t.Hr11_15), t.Hr11_30 = ABS(t.Hr11_30), t.Hr11_45 = ABS(t.Hr11_45), t.Hr11_60 = ABS(t.Hr11_60),
 			t.Hr12_15 = ABS(t.Hr12_15), t.Hr12_30 = ABS(t.Hr12_30), t.Hr12_45 = ABS(t.Hr12_45), t.Hr12_60 = ABS(t.Hr12_60), 
 			t.Hr13_15 = ABS(t.Hr13_15), t.Hr13_30 = ABS(t.Hr13_30), t.Hr13_45 = ABS(t.Hr13_45), t.Hr13_60 = ABS(t.Hr13_60), 
 			t.Hr14_15 = ABS(t.Hr14_15), t.Hr14_30 = ABS(t.Hr14_30), t.Hr14_45 = ABS(t.Hr14_45), t.Hr14_60 = ABS(t.Hr14_60), 
 			t.Hr15_15 = ABS(t.Hr15_15), t.Hr15_30 = ABS(t.Hr15_30), t.Hr15_45 = ABS(t.Hr15_45), t.Hr15_60 = ABS(t.Hr15_60), 
 			t.Hr16_15 = ABS(t.Hr16_15), t.Hr16_30 = ABS(t.Hr16_30), t.Hr16_45 = ABS(t.Hr16_45), t.Hr16_60 = ABS(t.Hr16_60), 
 			t.Hr17_15 = ABS(t.Hr17_15), t.Hr17_30 = ABS(t.Hr17_30), t.Hr17_45 = ABS(t.Hr17_45), t.Hr17_60 = ABS(t.Hr17_60), 
 			t.Hr18_15 = ABS(t.Hr18_15), t.Hr18_30 = ABS(t.Hr18_30), t.Hr18_45 = ABS(t.Hr18_45), t.Hr18_60 = ABS(t.Hr18_60), 
 			t.Hr19_15 = ABS(t.Hr19_15), t.Hr19_30 = ABS(t.Hr19_30), t.Hr19_45 = ABS(t.Hr19_45), t.Hr19_60 = ABS(t.Hr19_60), 
 			t.Hr20_15 = ABS(t.Hr20_15), t.Hr20_30 = ABS(t.Hr20_30), t.Hr20_45 = ABS(t.Hr20_45), t.Hr20_60 = ABS(t.Hr20_60), 
 			t.Hr21_15 = ABS(t.Hr21_15), t.Hr21_30 = ABS(t.Hr21_30), t.Hr21_45 = ABS(t.Hr21_45), t.Hr21_60 = ABS(t.Hr21_60), 
 			t.Hr22_15 = ABS(t.Hr22_15), t.Hr22_30 = ABS(t.Hr22_30), t.Hr22_45 = ABS(t.Hr22_45), t.Hr22_60 = ABS(t.Hr22_60), 
 			t.Hr23_15 = ABS(t.Hr23_15), t.Hr23_30 = ABS(t.Hr23_30), t.Hr23_45 = ABS(t.Hr23_45), t.Hr23_60 = ABS(t.Hr23_60), 
 			t.Hr24_15 = ABS(t.Hr24_15), t.Hr24_30 = ABS(t.Hr24_30), t.Hr24_45 = ABS(t.Hr24_45), t.Hr24_60 = ABS(t.Hr24_60), 
 			t.Hr25_15 = ABS(t.Hr25_15), t.Hr25_30 = ABS(t.Hr25_30), t.Hr25_45 = ABS(t.Hr25_45), t.Hr25_60 = ABS(t.Hr25_60) 
 		FROM [#tmp_mv90_data_mins] t
 
 		--update  values if already exists
 		UPDATE mdm SET
 			mdm.Hr1_15 = ISNULL(tmdm.Hr1_15, mdm.Hr1_15), mdm.Hr1_30 = ISNULL(tmdm.Hr1_30, mdm.Hr1_30), mdm.Hr1_45 = ISNULL(tmdm.Hr1_45, mdm.Hr1_45), mdm.Hr1_60 = ISNULL(tmdm.Hr1_60, mdm.Hr1_60), 
 			mdm.Hr2_15 = ISNULL(tmdm.Hr2_15, mdm.Hr2_15), mdm.Hr2_30 = ISNULL(tmdm.Hr2_30, mdm.Hr2_30), mdm.Hr2_45 = ISNULL(tmdm.Hr2_45, mdm.Hr2_45), mdm.Hr2_60 = ISNULL(tmdm.Hr2_60, mdm.Hr2_60), 
 			mdm.Hr3_15 = ISNULL(tmdm.Hr3_15, mdm.Hr3_15), mdm.Hr3_30 = ISNULL(tmdm.Hr3_30, mdm.Hr3_30), mdm.Hr3_45 = ISNULL(tmdm.Hr3_45, mdm.Hr3_45), mdm.Hr3_60 = ISNULL(tmdm.Hr3_60, mdm.Hr3_60), 
 			mdm.Hr4_15 = ISNULL(tmdm.Hr4_15, mdm.Hr4_15), mdm.Hr4_30 = ISNULL(tmdm.Hr4_30, mdm.Hr4_30), mdm.Hr4_45 = ISNULL(tmdm.Hr4_45, mdm.Hr4_45), mdm.Hr4_60 = ISNULL(tmdm.Hr4_60, mdm.Hr4_60), 
 			mdm.Hr5_15 = ISNULL(tmdm.Hr5_15, mdm.Hr5_15), mdm.Hr5_30 = ISNULL(tmdm.Hr5_30, mdm.Hr5_30), mdm.Hr5_45 = ISNULL(tmdm.Hr5_45, mdm.Hr5_45), mdm.Hr5_60 = ISNULL(tmdm.Hr5_60, mdm.Hr5_60), 
 			mdm.Hr6_15 = ISNULL(tmdm.Hr6_15, mdm.Hr6_15), mdm.Hr6_30 = ISNULL(tmdm.Hr6_30, mdm.Hr6_30), mdm.Hr6_45 = ISNULL(tmdm.Hr6_45, mdm.Hr6_45), mdm.Hr6_60 = ISNULL(tmdm.Hr6_60, mdm.Hr6_60), 
 			mdm.Hr7_15 = ISNULL(tmdm.Hr7_15, mdm.Hr7_15), mdm.Hr7_30 = ISNULL(tmdm.Hr7_30, mdm.Hr7_30), mdm.Hr7_45 = ISNULL(tmdm.Hr7_45, mdm.Hr7_45), mdm.Hr7_60 = ISNULL(tmdm.Hr7_60, mdm.Hr7_60), 
 			mdm.Hr8_15 = ISNULL(tmdm.Hr8_15, mdm.Hr8_15), mdm.Hr8_30 = ISNULL(tmdm.Hr8_30, mdm.Hr8_30), mdm.Hr8_45 = ISNULL(tmdm.Hr8_45, mdm.Hr8_45), mdm.Hr8_60 = ISNULL(tmdm.Hr8_60, mdm.Hr8_60), 
 			mdm.Hr9_15 = ISNULL(tmdm.Hr9_15, mdm.Hr9_15), mdm.Hr9_30 = ISNULL(tmdm.Hr9_30, mdm.Hr9_30), mdm.Hr9_45 = ISNULL(tmdm.Hr9_45, mdm.Hr9_45), mdm.Hr9_60 = ISNULL(tmdm.Hr9_60, mdm.Hr9_60), 
 			mdm.Hr10_15 = ISNULL(tmdm.Hr10_15, mdm.Hr10_15), mdm.Hr10_30 = ISNULL(tmdm.Hr10_30, mdm.Hr10_30), mdm.Hr10_45 = ISNULL(tmdm.Hr10_45, mdm.Hr10_45), mdm.Hr10_60 = ISNULL(tmdm.Hr10_60, mdm.Hr10_60), 
 			mdm.Hr11_15 = ISNULL(tmdm.Hr11_15, mdm.Hr11_15), mdm.Hr11_30 = ISNULL(tmdm.Hr11_30, mdm.Hr11_30), mdm.Hr11_45 = ISNULL(tmdm.Hr11_45, mdm.Hr11_45), mdm.Hr11_60 = ISNULL(tmdm.Hr11_60, mdm.Hr11_60), 
 			mdm.Hr12_15 = ISNULL(tmdm.Hr12_15, mdm.Hr12_15), mdm.Hr12_30 = ISNULL(tmdm.Hr12_30, mdm.Hr12_30), mdm.Hr12_45 = ISNULL(tmdm.Hr12_45, mdm.Hr12_45), mdm.Hr12_60 = ISNULL(tmdm.Hr12_60, mdm.Hr12_60), 
 			mdm.Hr13_15 = ISNULL(tmdm.Hr13_15, mdm.Hr13_15), mdm.Hr13_30 = ISNULL(tmdm.Hr13_30, mdm.Hr13_30), mdm.Hr13_45 = ISNULL(tmdm.Hr13_45, mdm.Hr13_45), mdm.Hr13_60 = ISNULL(tmdm.Hr13_60, mdm.Hr13_60), 
 			mdm.Hr14_15 = ISNULL(tmdm.Hr14_15, mdm.Hr14_15), mdm.Hr14_30 = ISNULL(tmdm.Hr14_30, mdm.Hr14_30), mdm.Hr14_45 = ISNULL(tmdm.Hr14_45, mdm.Hr14_45), mdm.Hr14_60 = ISNULL(tmdm.Hr14_60, mdm.Hr14_60), 
 			mdm.Hr15_15 = ISNULL(tmdm.Hr15_15, mdm.Hr15_15), mdm.Hr15_30 = ISNULL(tmdm.Hr15_30, mdm.Hr15_30), mdm.Hr15_45 = ISNULL(tmdm.Hr15_45, mdm.Hr15_45), mdm.Hr15_60 = ISNULL(tmdm.Hr15_60, mdm.Hr15_60), 
 			mdm.Hr16_15 = ISNULL(tmdm.Hr16_15, mdm.Hr16_15), mdm.Hr16_30 = ISNULL(tmdm.Hr16_30, mdm.Hr16_30), mdm.Hr16_45 = ISNULL(tmdm.Hr16_45, mdm.Hr16_45), mdm.Hr16_60 = ISNULL(tmdm.Hr16_60, mdm.Hr16_60), 
 			mdm.Hr17_15 = ISNULL(tmdm.Hr17_15, mdm.Hr17_15), mdm.Hr17_30 = ISNULL(tmdm.Hr17_30, mdm.Hr17_30), mdm.Hr17_45 = ISNULL(tmdm.Hr17_45, mdm.Hr17_45), mdm.Hr17_60 = ISNULL(tmdm.Hr17_60, mdm.Hr17_60), 
 			mdm.Hr18_15 = ISNULL(tmdm.Hr18_15, mdm.Hr18_15), mdm.Hr18_30 = ISNULL(tmdm.Hr18_30, mdm.Hr18_30), mdm.Hr18_45 = ISNULL(tmdm.Hr18_45, mdm.Hr18_45), mdm.Hr18_60 = ISNULL(tmdm.Hr18_60, mdm.Hr18_60), 
 			mdm.Hr19_15 = ISNULL(tmdm.Hr19_15, mdm.Hr19_15), mdm.Hr19_30 = ISNULL(tmdm.Hr19_30, mdm.Hr19_30), mdm.Hr19_45 = ISNULL(tmdm.Hr19_45, mdm.Hr19_45), mdm.Hr19_60 = ISNULL(tmdm.Hr19_60, mdm.Hr19_60), 
 			mdm.Hr20_15 = ISNULL(tmdm.Hr20_15, mdm.Hr20_15), mdm.Hr20_30 = ISNULL(tmdm.Hr20_30, mdm.Hr20_30), mdm.Hr20_45 = ISNULL(tmdm.Hr20_45, mdm.Hr20_45), mdm.Hr20_60 = ISNULL(tmdm.Hr20_60, mdm.Hr20_60), 
 			mdm.Hr21_15 = ISNULL(tmdm.Hr21_15, mdm.Hr21_15), mdm.Hr21_30 = ISNULL(tmdm.Hr21_30, mdm.Hr21_30), mdm.Hr21_45 = ISNULL(tmdm.Hr21_45, mdm.Hr21_45), mdm.Hr21_60 = ISNULL(tmdm.Hr21_60, mdm.Hr21_60), 
 			mdm.Hr22_15 = ISNULL(tmdm.Hr22_15, mdm.Hr22_15), mdm.Hr22_30 = ISNULL(tmdm.Hr22_30, mdm.Hr22_30), mdm.Hr22_45 = ISNULL(tmdm.Hr22_45, mdm.Hr22_45), mdm.Hr22_60 = ISNULL(tmdm.Hr22_60, mdm.Hr22_60), 
 			mdm.Hr23_15 = ISNULL(tmdm.Hr23_15, mdm.Hr23_15), mdm.Hr23_30 = ISNULL(tmdm.Hr23_30, mdm.Hr23_30), mdm.Hr23_45 = ISNULL(tmdm.Hr23_45, mdm.Hr23_45), mdm.Hr23_60 = ISNULL(tmdm.Hr23_60, mdm.Hr23_60), 
 			mdm.Hr24_15 = ISNULL(tmdm.Hr24_15, mdm.Hr24_15), mdm.Hr24_30 = ISNULL(tmdm.Hr24_30, mdm.Hr24_30), mdm.Hr24_45 = ISNULL(tmdm.Hr24_45, mdm.Hr24_45), mdm.Hr24_60 = ISNULL(tmdm.Hr24_60, mdm.Hr24_60), 
 			mdm.Hr25_15 = ISNULL(tmdm.Hr25_15, mdm.Hr25_15), mdm.Hr25_30 = ISNULL(tmdm.Hr25_30, mdm.Hr25_30), mdm.Hr25_45 = ISNULL(tmdm.Hr25_45, mdm.Hr25_45), mdm.Hr25_60 = ISNULL(tmdm.Hr25_60, mdm.Hr25_60)		
 		FROM [#tmp_mv90_data_mins]  tmdm
 		INNER JOIN [mv90_data] md ON md.[meter_id] = tmdm.[meter_id] AND md.[from_date] = CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01'
 		INNER JOIN mv90_data_mins mdm ON md.meter_data_id = mdm.meter_data_id AND tmdm.prod_date = mdm.prod_date
 
 		--insert new data if not exists
 		INSERT INTO [mv90_data_mins] (
 				[meter_data_id], [prod_date], 
 				[Hr1_15], [Hr1_30], [Hr1_45], [Hr1_60], 
 				[Hr2_15], [Hr2_30], [Hr2_45], [Hr2_60], 
 				[Hr3_15], [Hr3_30], [Hr3_45], [Hr3_60], 
 				[Hr4_15], [Hr4_30], [Hr4_45], [Hr4_60], 
 				[Hr5_15], [Hr5_30], [Hr5_45], [Hr5_60], 
 				[Hr6_15], [Hr6_30], [Hr6_45], [Hr6_60], 
 				[Hr7_15], [Hr7_30], [Hr7_45], [Hr7_60], 
 				[Hr8_15], [Hr8_30], [Hr8_45], [Hr8_60], 
 				[Hr9_15], [Hr9_30], [Hr9_45], [Hr9_60], 
 				[Hr10_15], [Hr10_30], [Hr10_45], [Hr10_60], 
 				[Hr11_15], [Hr11_30], [Hr11_45], [Hr11_60], 
 				[Hr12_15], [Hr12_30], [Hr12_45], [Hr12_60], 
 				[Hr13_15], [Hr13_30], [Hr13_45], [Hr13_60], 
 				[Hr14_15], [Hr14_30], [Hr14_45], [Hr14_60], 
 				[Hr15_15], [Hr15_30], [Hr15_45], [Hr15_60], 
 				[Hr16_15], [Hr16_30], [Hr16_45], [Hr16_60], 
 				[Hr17_15], [Hr17_30], [Hr17_45], [Hr17_60], 
 				[Hr18_15], [Hr18_30], [Hr18_45], [Hr18_60], 
 				[Hr19_15], [Hr19_30], [Hr19_45], [Hr19_60], 
 				[Hr20_15], [Hr20_30], [Hr20_45], [Hr20_60], 
 				[Hr21_15], [Hr21_30], [Hr21_45], [Hr21_60], 
 				[Hr22_15], [Hr22_30], [Hr22_45], [Hr22_60], 
 				[Hr23_15], [Hr23_30], [Hr23_45], [Hr23_60], 
 				[Hr24_15], [Hr24_30], [Hr24_45], [Hr24_60], 
 				[Hr25_15], [Hr25_30], [Hr25_45], [Hr25_60],
 				[uom_id]
 		)
 		SELECT	md.[meter_data_id], tmdm.[prod_date], 
 				tmdm.[Hr1_15], tmdm.[Hr1_30], tmdm.[Hr1_45], tmdm.[Hr1_60], 
 				tmdm.[Hr2_15], tmdm.[Hr2_30], tmdm.[Hr2_45], tmdm.[Hr2_60], 
 				tmdm.[Hr3_15], tmdm.[Hr3_30], tmdm.[Hr3_45], tmdm.[Hr3_60], 
 				tmdm.[Hr4_15], tmdm.[Hr4_30], tmdm.[Hr4_45], tmdm.[Hr4_60], 
 				tmdm.[Hr5_15], tmdm.[Hr5_30], tmdm.[Hr5_45], tmdm.[Hr5_60], 
 				tmdm.[Hr6_15], tmdm.[Hr6_30], tmdm.[Hr6_45], tmdm.[Hr6_60], 
 				tmdm.[Hr7_15], tmdm.[Hr7_30], tmdm.[Hr7_45], tmdm.[Hr7_60], 
 				tmdm.[Hr8_15], tmdm.[Hr8_30], tmdm.[Hr8_45], tmdm.[Hr8_60], 
 				tmdm.[Hr9_15], tmdm.[Hr9_30], tmdm.[Hr9_45], tmdm.[Hr9_60], 
 				tmdm.[Hr10_15], tmdm.[Hr10_30], tmdm.[Hr10_45], tmdm.[Hr10_60], 
 				tmdm.[Hr11_15], tmdm.[Hr11_30], tmdm.[Hr11_45], tmdm.[Hr11_60], 
 				tmdm.[Hr12_15], tmdm.[Hr12_30], tmdm.[Hr12_45], tmdm.[Hr12_60], 
 				tmdm.[Hr13_15], tmdm.[Hr13_30], tmdm.[Hr13_45], tmdm.[Hr13_60], 
 				tmdm.[Hr14_15], tmdm.[Hr14_30], tmdm.[Hr14_45], tmdm.[Hr14_60], 
 				tmdm.[Hr15_15], tmdm.[Hr15_30], tmdm.[Hr15_45], tmdm.[Hr15_60], 
 				tmdm.[Hr16_15], tmdm.[Hr16_30], tmdm.[Hr16_45], tmdm.[Hr16_60], 
 				tmdm.[Hr17_15], tmdm.[Hr17_30], tmdm.[Hr17_45], tmdm.[Hr17_60], 
 				tmdm.[Hr18_15], tmdm.[Hr18_30], tmdm.[Hr18_45], tmdm.[Hr18_60], 
 				tmdm.[Hr19_15], tmdm.[Hr19_30], tmdm.[Hr19_45], tmdm.[Hr19_60], 
 				tmdm.[Hr20_15], tmdm.[Hr20_30], tmdm.[Hr20_45], tmdm.[Hr20_60], 
 				tmdm.[Hr21_15], tmdm.[Hr21_30], tmdm.[Hr21_45], tmdm.[Hr21_60], 
 				tmdm.[Hr22_15], tmdm.[Hr22_30], tmdm.[Hr22_45], tmdm.[Hr22_60], 
 				tmdm.[Hr23_15], tmdm.[Hr23_30], tmdm.[Hr23_45], tmdm.[Hr23_60], 
 				tmdm.[Hr24_15], tmdm.[Hr24_30], tmdm.[Hr24_45], tmdm.[Hr24_60], 
 				tmdm.[Hr25_15], tmdm.[Hr25_30], tmdm.[Hr25_45], tmdm.[Hr25_60],
 				md.[uom_id]
 		FROM	[#tmp_mv90_data_mins] tmdm
 		INNER JOIN [mv90_data] md
 			ON md.[meter_id] = tmdm.[meter_id]
 			AND md.[from_date] = CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01'
 			AND tmdm.channel = md.channel
 		LEFT JOIN [mv90_data_mins] mdm ON mdm.meter_data_id = md.meter_data_id AND tmdm.prod_date = mdm.prod_date
 		WHERE mdm.meter_data_id IS NULL 
		--AND tmdm.granularity = 'q'
 
 
 		--update  values if already exists
 		UPDATE mdh SET
 			mdh.Hr1 = (ISNULL(Hr1_15, 0) + ISNULL(Hr1_30, 0) + ISNULL(Hr1_45, 0) + ISNULL(Hr1_60, 0)), 
 			mdh.Hr2 = (ISNULL(Hr2_15, 0) + ISNULL(Hr2_30, 0) + ISNULL(Hr2_45, 0) + ISNULL(Hr2_60, 0)), 
 			mdh.Hr3 = (ISNULL(Hr3_15, 0) + ISNULL(Hr3_30, 0) + ISNULL(Hr3_45, 0) + ISNULL(Hr3_60, 0)), 
 			mdh.Hr4 = (ISNULL(Hr4_15, 0) + ISNULL(Hr4_30, 0) + ISNULL(Hr4_45, 0) + ISNULL(Hr4_60, 0)), 
 			mdh.Hr5 = (ISNULL(Hr5_15, 0) + ISNULL(Hr5_30, 0) + ISNULL(Hr5_45, 0) + ISNULL(Hr5_60, 0)), 
 			mdh.Hr6 = (ISNULL(Hr6_15, 0) + ISNULL(Hr6_30, 0) + ISNULL(Hr6_45, 0) + ISNULL(Hr6_60, 0)), 
 			mdh.Hr7 = (ISNULL(Hr7_15, 0) + ISNULL(Hr7_30, 0) + ISNULL(Hr7_45, 0) + ISNULL(Hr7_60, 0)), 
 			mdh.Hr8 = (ISNULL(Hr8_15, 0) + ISNULL(Hr8_30, 0) + ISNULL(Hr8_45, 0) + ISNULL(Hr8_60, 0)), 
 			mdh.Hr9 = (ISNULL(Hr9_15, 0) + ISNULL(Hr9_30, 0) + ISNULL(Hr9_45, 0) + ISNULL(Hr9_60, 0)), 
 			mdh.Hr10 = (ISNULL(Hr10_15, 0) + ISNULL(Hr10_30, 0) + ISNULL(Hr10_45, 0) + ISNULL(Hr10_60, 0)), 
 			mdh.Hr11 = (ISNULL(Hr11_15, 0) + ISNULL(Hr11_30, 0) + ISNULL(Hr11_45, 0) + ISNULL(Hr11_60, 0)), 
 			mdh.Hr12 = (ISNULL(Hr12_15, 0) + ISNULL(Hr12_30, 0) + ISNULL(Hr12_45, 0) + ISNULL(Hr12_60, 0)), 
 			mdh.Hr13 = (ISNULL(Hr13_15, 0) + ISNULL(Hr13_30, 0) + ISNULL(Hr13_45, 0) + ISNULL(Hr13_60, 0)),
 			mdh.Hr14 = (ISNULL(Hr14_15, 0) + ISNULL(Hr14_30, 0) + ISNULL(Hr14_45, 0) + ISNULL(Hr14_60, 0)), 
 			mdh.Hr15 = (ISNULL(Hr15_15, 0) + ISNULL(Hr15_30, 0) + ISNULL(Hr15_45, 0) + ISNULL(Hr15_60, 0)), 
 			mdh.Hr16 = (ISNULL(Hr16_15, 0) + ISNULL(Hr16_30, 0) + ISNULL(Hr16_45, 0) + ISNULL(Hr16_60, 0)), 
 			mdh.Hr17 = (ISNULL(Hr17_15, 0) + ISNULL(Hr17_30, 0) + ISNULL(Hr17_45, 0) + ISNULL(Hr17_60, 0)), 
 			mdh.Hr18 = (ISNULL(Hr18_15, 0) + ISNULL(Hr18_30, 0) + ISNULL(Hr18_45, 0) + ISNULL(Hr18_60, 0)), 
 			mdh.Hr19 = (ISNULL(Hr19_15, 0) + ISNULL(Hr19_30, 0) + ISNULL(Hr19_45, 0) + ISNULL(Hr19_60, 0)), 
 			mdh.Hr20 = (ISNULL(Hr20_15, 0) + ISNULL(Hr20_30, 0) + ISNULL(Hr20_45, 0) + ISNULL(Hr20_60, 0)), 
 			mdh.Hr21 = (ISNULL(Hr21_15, 0) + ISNULL(Hr21_30, 0) + ISNULL(Hr21_45, 0) + ISNULL(Hr21_60, 0)), 
 			mdh.Hr22 = (ISNULL(Hr22_15, 0) + ISNULL(Hr22_30, 0) + ISNULL(Hr22_45, 0) + ISNULL(Hr22_60, 0)), 
 			mdh.Hr23 = (ISNULL(Hr23_15, 0) + ISNULL(Hr23_30, 0) + ISNULL(Hr23_45, 0) + ISNULL(Hr23_60, 0)), 
 			mdh.Hr24 = (ISNULL(Hr24_15, 0) + ISNULL(Hr24_30, 0) + ISNULL(Hr24_45, 0) + ISNULL(Hr24_60, 0)), 
 			mdh.Hr25 = (ISNULL(Hr25_15, 0) + ISNULL(Hr25_30, 0) + ISNULL(Hr25_45, 0) + ISNULL(Hr25_60, 0))
 		FROM [#tmp_mv90_data_mins] tmdm
 		INNER JOIN [mv90_data] md ON md.[meter_id] = tmdm.[meter_id] AND md.[from_date] = CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01' AND tmdm.channel = md.channel
 		INNER JOIN mv90_data_hour mdh ON md.meter_data_id = mdh.meter_data_id
 			AND tmdm.prod_date = mdh.prod_date
 
 		--insert new data if not exists
 		INSERT INTO mv90_data_hour(meter_data_id,prod_date,
 		   Hr1, Hr2, Hr3, Hr4,
 		   Hr5, Hr6, Hr7, Hr8,
 		   Hr9, Hr10, Hr11, Hr12,
 		   Hr13, Hr14, Hr15, Hr16,
 		   Hr17, Hr18, Hr19, Hr20,
 		   Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)
 		SELECT	md.meter_data_id,tmdm.prod_date,
 				SUM(ISNULL(Hr1_15, 0) + ISNULL(Hr1_30, 0) + ISNULL(Hr1_45, 0) + ISNULL(Hr1_60, 0)),
 				SUM(ISNULL(Hr2_15, 0) + ISNULL(Hr2_30, 0) + ISNULL(Hr2_45, 0) + ISNULL(Hr2_60, 0)),
 				SUM(ISNULL(Hr3_15, 0) + ISNULL(Hr3_30, 0) + ISNULL(Hr3_45, 0) + ISNULL(Hr3_60, 0)),
 				SUM(ISNULL(Hr4_15, 0) + ISNULL(Hr4_30, 0) + ISNULL(Hr4_45, 0) + ISNULL(Hr4_60, 0)),
 				SUM(ISNULL(Hr5_15, 0) + ISNULL(Hr5_30, 0) + ISNULL(Hr5_45, 0) + ISNULL(Hr5_60, 0)),
 				SUM(ISNULL(Hr6_15, 0) + ISNULL(Hr6_30, 0) + ISNULL(Hr6_45, 0) + ISNULL(Hr6_60, 0)),
 				SUM(ISNULL(Hr7_15, 0) + ISNULL(Hr7_30, 0) + ISNULL(Hr7_45, 0) + ISNULL(Hr7_60, 0)),
 				SUM(ISNULL(Hr8_15, 0) + ISNULL(Hr8_30, 0) + ISNULL(Hr8_45, 0) + ISNULL(Hr8_60, 0)),
 				SUM(ISNULL(Hr9_15, 0) + ISNULL(Hr9_30, 0) + ISNULL(Hr9_45, 0) + ISNULL(Hr9_60, 0)),
 				SUM(ISNULL(Hr10_15, 0) + ISNULL(Hr10_30, 0) + ISNULL(Hr10_45, 0) + ISNULL(Hr10_60, 0)),
 				SUM(ISNULL(Hr11_15, 0) + ISNULL(Hr11_30, 0) + ISNULL(Hr11_45, 0) + ISNULL(Hr11_60, 0)),
 				SUM(ISNULL(Hr12_15, 0) + ISNULL(Hr12_30, 0) + ISNULL(Hr12_45, 0) + ISNULL(Hr12_60, 0)),
 				SUM(ISNULL(Hr13_15, 0) + ISNULL(Hr13_30, 0) + ISNULL(Hr13_45, 0) + ISNULL(Hr13_60, 0)),
 				SUM(ISNULL(Hr14_15, 0) + ISNULL(Hr14_30, 0) + ISNULL(Hr14_45, 0) + ISNULL(Hr14_60, 0)),
 				SUM(ISNULL(Hr15_15, 0) + ISNULL(Hr15_30, 0) + ISNULL(Hr15_45, 0) + ISNULL(Hr15_60, 0)),
 				SUM(ISNULL(Hr16_15, 0) + ISNULL(Hr16_30, 0) + ISNULL(Hr16_45, 0) + ISNULL(Hr16_60, 0)),
 				SUM(ISNULL(Hr17_15, 0) + ISNULL(Hr17_30, 0) + ISNULL(Hr17_45, 0) + ISNULL(Hr17_60, 0)),
 				SUM(ISNULL(Hr18_15, 0) + ISNULL(Hr18_30, 0) + ISNULL(Hr18_45, 0) + ISNULL(Hr18_60, 0)),
 				SUM(ISNULL(Hr19_15, 0) + ISNULL(Hr19_30, 0) + ISNULL(Hr19_45, 0) + ISNULL(Hr19_60, 0)),
 				SUM(ISNULL(Hr20_15, 0) + ISNULL(Hr20_30, 0) + ISNULL(Hr20_45, 0) + ISNULL(Hr20_60, 0)),
 				SUM(ISNULL(Hr21_15, 0) + ISNULL(Hr21_30, 0) + ISNULL(Hr21_45, 0) + ISNULL(Hr21_60, 0)),
 				SUM(ISNULL(Hr22_15, 0) + ISNULL(Hr22_30, 0) + ISNULL(Hr22_45, 0) + ISNULL(Hr22_60, 0)),
 				SUM(ISNULL(Hr23_15, 0) + ISNULL(Hr23_30, 0) + ISNULL(Hr23_45, 0) + ISNULL(Hr23_60, 0)),
 				SUM(ISNULL(Hr24_15, 0) + ISNULL(Hr24_30, 0) + ISNULL(Hr24_45, 0) + ISNULL(Hr24_60, 0)),
 				SUM(ISNULL(Hr25_15, 0) + ISNULL(Hr25_30, 0) + ISNULL(Hr25_45, 0) + ISNULL(Hr25_60, 0)),
 				md.[uom_id]
 		FROM [#tmp_mv90_data_mins] tmdm
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdm.[meter_id]
 					AND tmdm.channel = md.channel
 				AND md.[from_date] = CONVERT(NVARCHAR(7),tmdm.[prod_date],120)+'-01'
 				LEFT JOIN [mv90_data_hour] mdh ON mdh.meter_data_id = md.meter_data_id AND tmdm.prod_date = mdh.prod_date
 				--CROSS APPLY dbo.fnagetdaywisedate(md.from_date,DATEADD(m,1,md.from_date)-1)  d
 				--LEFT JOIN [mv90_data_hour] mdh ON mdh.meter_data_id = md.meter_data_id AND mdh.prod_date = d.day_date
 		WHERE mdh.recid IS NULL
 		GROUP BY md.meter_data_id, tmdm.prod_date, md.uom_id
 
 			-- update only vol if exists
 		UPDATE mv SET mv.volume = mdv.vol_sum  
 		FROM (
 				SELECT SUM(mdh.Hr1 + mdh.Hr2 + mdh.Hr3 + mdh.Hr4 + mdh.Hr5 + mdh.Hr6 + 
 					mdh.Hr7 + mdh.Hr8 + mdh.Hr9 + mdh.Hr10 + mdh.Hr11 + mdh.Hr12 + mdh.Hr13 + mdh.Hr14 + mdh.Hr15 + 
 					mdh.Hr16 + mdh.Hr17 + mdh.Hr18 + mdh.Hr19 + mdh.Hr20 + mdh.Hr21 + mdh.Hr22 + 
 					mdh.Hr23 + mdh.Hr24 ) vol_sum, meter_data_id
 				FROM mv90_data_hour mdh 
 				GROUP BY mdh.meter_data_id
 			) mdv
 		INNER JOIN mv90_data mv ON mv.meter_data_id = mdv.meter_data_id
 		INNER JOIN #temp_summary t ON t.meter_id = mv.meter_id
 
 		--############### logic to import aggregate_to_meter as defined in group_meter_mapping
 
 		EXEC('
 			UPDATE md SET md.volume = meter_agg.agg_volume 
 			FROM ' + @temp_header_table + ' h 
 			INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 			LEFT JOIN recorder_properties rp ON  md.meter_id = rp.meter_id 
 			INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 			INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 			INNER JOIN
 			(
 				SELECT gmm2.aggregate_to_meter agg_meter_id, md.from_date, SUM(md.volume) agg_volume
 				FROM group_meter_mapping gmm2 
 				INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 				WHERE gmm2.aggregate_to_meter IS NOT NULL
 				GROUP BY gmm2.aggregate_to_meter, md.from_date
 			) meter_agg ON meter_agg.agg_meter_id = md.meter_id
 				AND meter_agg.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND ISNULL(rp.channel, 1) = md.channel
 		')
 
 		EXEC('
 			INSERT INTO mv90_data (meter_id, gen_date, from_date, to_date, channel, volume, uom_id, descriptions)
 			SELECT gmm.aggregate_to_meter, MAX(md.gen_date) gen_date, md.from_date, MAX(md.to_date) to_date, MAX(md.channel) channel, SUM(md.volume) volume, MAX(md.uom_id) uom_id, MAX(md.descriptions) descriptions
 			FROM mv90_data md 
 			INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 			LEFT JOIN recorder_properties rp ON  md.meter_id = rp.meter_id 
 			INNER JOIN ' + @temp_header_table + ' h ON h.meter_id = mi.recorderid
 			INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 			LEFT JOIN mv90_data md2 ON md2.meter_id = gmm.aggregate_to_meter
 				AND md2.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND md2.meter_id IS NULL
 				AND gmm.aggregate_to_meter IS NOT NULL
 				 AND ISNULL(rp.channel, 1) = md.channel
 			GROUP BY gmm.aggregate_to_meter, md.from_date	
 		')
 
 		EXEC('
 		UPDATE mdh SET mdh.Hr1 = meter_agg.agg_volume_hr1, mdh.Hr2 = meter_agg.agg_volume_hr2, mdh.Hr3 = meter_agg.agg_volume_hr3, 
 					   mdh.Hr4 = meter_agg.agg_volume_hr4, mdh.Hr5 = meter_agg.agg_volume_hr5, mdh.Hr6 = meter_agg.agg_volume_hr6, 
 					   mdh.Hr7 = meter_agg.agg_volume_hr7, mdh.Hr8 = meter_agg.agg_volume_hr8, mdh.Hr9 = meter_agg.agg_volume_hr9, 
 					   mdh.Hr10 = meter_agg.agg_volume_hr10, mdh.Hr11 = meter_agg.agg_volume_hr11, mdh.Hr12 = meter_agg.agg_volume_hr12, 
 					   mdh.Hr13 = meter_agg.agg_volume_hr13, mdh.Hr14 = meter_agg.agg_volume_hr14, mdh.Hr15 = meter_agg.agg_volume_hr15, 
 					   mdh.Hr16 = meter_agg.agg_volume_hr16, mdh.Hr17 = meter_agg.agg_volume_hr17, mdh.Hr18 = meter_agg.agg_volume_hr18, 
 					   mdh.Hr19 = meter_agg.agg_volume_hr19, mdh.Hr20 = meter_agg.agg_volume_hr20, mdh.Hr21 = meter_agg.agg_volume_hr21, 
 					   mdh.Hr22 = meter_agg.agg_volume_hr22, mdh.Hr23 = meter_agg.agg_volume_hr23, mdh.Hr24 = meter_agg.agg_volume_hr24, 
 					   mdh.Hr25 = meter_agg.agg_volume_hr25
 		FROM ' + @temp_header_table + ' h 
 		INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 		INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 		INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 		INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 		INNER JOIN
 		(
 			SELECT gmm2.aggregate_to_meter agg_meter_id, mdh.prod_date, 
 				SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 				SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 				SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 				SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 				SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 				SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 				SUM(mdh.Hr25) agg_volume_hr25
 			FROM group_meter_mapping gmm2 
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 			WHERE gmm2.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 		) meter_agg ON meter_agg.agg_meter_id = md.meter_id	AND meter_agg.prod_date = mdh.prod_date
 		WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 		INSERT INTO mv90_data_hour(meter_data_id, prod_date, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13, 
 												 Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)					
 			--  SELECT gmm2.aggregate_to_meter, mdh.prod_date
 			  SELECT MAX(md_agg.meter_data_id) meter_data_id, mdh.prod_date,
 			  SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 			  SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 			  SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 			  SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 			  SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 			  SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 			  SUM(mdh.Hr25) agg_volume_hr25
 			  , MAX(md_agg.uom_id) uom_id		  
 			FROM
 			(
 				SELECT DISTINCT gmm.aggregate_to_meter
 				FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				WHERE h.error_code = ''0''
 			) gmm_agg
 			INNER JOIN group_meter_mapping gmm2 ON gmm2.aggregate_to_meter = gmm_agg.aggregate_to_meter
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 			INNER JOIN mv90_data md_agg ON md_agg.meter_id = gmm2.aggregate_to_meter
 				AND md_agg.from_date = md.from_date
 			LEFT JOIN mv90_data_hour mdh_old ON mdh_old.meter_data_id = md_agg.meter_data_id
 				AND mdh_old.prod_date = mdh.prod_date
 			WHERE 1 = 1
 				AND mdh_old.recid IS NULL
 				AND gmm2.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 			')
 
 		EXEC('
 		UPDATE mdh SET
 			mdh.Hr1_15 = meter_agg.agg_volume_hr1_15, mdh.Hr1_30 = meter_agg.agg_volume_hr1_30, mdh.Hr1_45 = meter_agg.agg_volume_hr1_45, mdh.Hr1_60 = meter_agg.agg_volume_hr1_60, 
 			mdh.Hr2_15 = meter_agg.agg_volume_hr2_15, mdh.Hr2_30 = meter_agg.agg_volume_hr2_30, mdh.Hr2_45 = meter_agg.agg_volume_hr2_45, mdh.Hr2_60 = meter_agg.agg_volume_hr2_60, 
 			mdh.Hr3_15 = meter_agg.agg_volume_hr3_15, mdh.Hr3_30 = meter_agg.agg_volume_hr3_30, mdh.Hr3_45 = meter_agg.agg_volume_hr3_45, mdh.Hr3_60 = meter_agg.agg_volume_hr3_60, 
 			mdh.Hr4_15 = meter_agg.agg_volume_hr4_15, mdh.Hr4_30 = meter_agg.agg_volume_hr4_30, mdh.Hr4_45 = meter_agg.agg_volume_hr4_45, mdh.Hr4_60 = meter_agg.agg_volume_hr4_60, 
 			mdh.Hr5_15 = meter_agg.agg_volume_hr5_15, mdh.Hr5_30 = meter_agg.agg_volume_hr5_30, mdh.Hr5_45 = meter_agg.agg_volume_hr5_45, mdh.Hr5_60 = meter_agg.agg_volume_hr5_60, 
 			mdh.Hr6_15 = meter_agg.agg_volume_hr6_15, mdh.Hr6_30 = meter_agg.agg_volume_hr6_30, mdh.Hr6_45 = meter_agg.agg_volume_hr6_45, mdh.Hr6_60 = meter_agg.agg_volume_hr6_60, 
 			mdh.Hr7_15 = meter_agg.agg_volume_hr7_15, mdh.Hr7_30 = meter_agg.agg_volume_hr7_30, mdh.Hr7_45 = meter_agg.agg_volume_hr7_45, mdh.Hr7_60 = meter_agg.agg_volume_hr7_60, 
 			mdh.Hr8_15 = meter_agg.agg_volume_hr8_15, mdh.Hr8_30 = meter_agg.agg_volume_hr8_30, mdh.Hr8_45 = meter_agg.agg_volume_hr8_45, mdh.Hr8_60 = meter_agg.agg_volume_hr8_60, 
 			mdh.Hr9_15 = meter_agg.agg_volume_hr9_15, mdh.Hr9_30 = meter_agg.agg_volume_hr9_30, mdh.Hr9_45 = meter_agg.agg_volume_hr9_45, mdh.Hr9_60 = meter_agg.agg_volume_hr9_60, 
 			mdh.Hr10_15 = meter_agg.agg_volume_hr10_15,mdh.Hr10_30 = meter_agg.agg_volume_hr10_30,mdh.Hr10_45 = meter_agg.agg_volume_hr10_45,mdh.Hr10_60 = meter_agg.agg_volume_hr10_60, 
 			mdh.Hr11_15 = meter_agg.agg_volume_hr11_15,mdh.Hr11_30 = meter_agg.agg_volume_hr11_30,mdh.Hr11_45 = meter_agg.agg_volume_hr11_45,mdh.Hr11_60 = meter_agg.agg_volume_hr11_60, 
 			mdh.Hr12_15 = meter_agg.agg_volume_hr12_15,mdh.Hr12_30 = meter_agg.agg_volume_hr12_30,mdh.Hr12_45 = meter_agg.agg_volume_hr12_45,mdh.Hr12_60 = meter_agg.agg_volume_hr12_60, 
 			mdh.Hr13_15 = meter_agg.agg_volume_hr13_15,mdh.Hr13_30 = meter_agg.agg_volume_hr13_30,mdh.Hr13_45 = meter_agg.agg_volume_hr13_45,mdh.Hr13_60 = meter_agg.agg_volume_hr13_60,
 			mdh.Hr14_15 = meter_agg.agg_volume_hr14_15,mdh.Hr14_30 = meter_agg.agg_volume_hr14_30,mdh.Hr14_45 = meter_agg.agg_volume_hr14_45,mdh.Hr14_60 = meter_agg.agg_volume_hr14_60, 
 			mdh.Hr15_15 = meter_agg.agg_volume_hr15_15,mdh.Hr15_30 = meter_agg.agg_volume_hr15_30,mdh.Hr15_45 = meter_agg.agg_volume_hr15_45,mdh.Hr15_60 = meter_agg.agg_volume_hr15_60, 
 			mdh.Hr16_15 = meter_agg.agg_volume_hr16_15,mdh.Hr16_30 = meter_agg.agg_volume_hr16_30,mdh.Hr16_45 = meter_agg.agg_volume_hr16_45,mdh.Hr16_60 = meter_agg.agg_volume_hr16_60, 
 			mdh.Hr17_15 = meter_agg.agg_volume_hr17_15,mdh.Hr17_30 = meter_agg.agg_volume_hr17_30,mdh.Hr17_45 = meter_agg.agg_volume_hr17_45,mdh.Hr17_60 = meter_agg.agg_volume_hr17_60, 
 			mdh.Hr18_15 = meter_agg.agg_volume_hr18_15,mdh.Hr18_30 = meter_agg.agg_volume_hr18_30,mdh.Hr18_45 = meter_agg.agg_volume_hr18_45,mdh.Hr18_60 = meter_agg.agg_volume_hr18_60, 
 			mdh.Hr19_15 = meter_agg.agg_volume_hr19_15,mdh.Hr19_30 = meter_agg.agg_volume_hr19_30,mdh.Hr19_45 = meter_agg.agg_volume_hr19_45,mdh.Hr19_60 = meter_agg.agg_volume_hr19_60,
 			mdh.Hr20_15 = meter_agg.agg_volume_hr20_15,mdh.Hr20_30 = meter_agg.agg_volume_hr20_30,mdh.Hr20_45 = meter_agg.agg_volume_hr20_45,mdh.Hr20_60 = meter_agg.agg_volume_hr20_60, 
 			mdh.Hr21_15 = meter_agg.agg_volume_hr21_15,mdh.Hr21_30 = meter_agg.agg_volume_hr21_30,mdh.Hr21_45 = meter_agg.agg_volume_hr21_45,mdh.Hr21_60 = meter_agg.agg_volume_hr21_60, 
 			mdh.Hr22_15 = meter_agg.agg_volume_hr22_15,mdh.Hr22_30 = meter_agg.agg_volume_hr22_30,mdh.Hr22_45 = meter_agg.agg_volume_hr22_45,mdh.Hr22_60 = meter_agg.agg_volume_hr22_60, 
 			mdh.Hr23_15 = meter_agg.agg_volume_hr23_15,mdh.Hr23_30 = meter_agg.agg_volume_hr23_30,mdh.Hr23_45 = meter_agg.agg_volume_hr23_45,mdh.Hr23_60 = meter_agg.agg_volume_hr23_60, 
 			mdh.Hr24_15 = meter_agg.agg_volume_hr24_15,mdh.Hr24_30 = meter_agg.agg_volume_hr24_30,mdh.Hr24_45 = meter_agg.agg_volume_hr24_45,mdh.Hr24_60 = meter_agg.agg_volume_hr24_60, 
 			mdh.Hr25_15 = meter_agg.agg_volume_hr25_15,mdh.Hr25_30 = meter_agg.agg_volume_hr25_30,mdh.Hr25_45 = meter_agg.agg_volume_hr25_45,mdh.Hr25_60 = meter_agg.agg_volume_hr25_60
 		FROM ' + @temp_header_table + ' h 
 		INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 		INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 		INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 		INNER JOIN mv90_data_mins mdh ON mdh.meter_data_id = md.meter_data_id
 		INNER JOIN
 		(
 			SELECT gmm2.aggregate_to_meter agg_meter_id, mdh.prod_date, 
 				SUM(Hr1_15)agg_volume_hr1_15, SUM(Hr1_30)agg_volume_hr1_30, SUM(Hr1_45)agg_volume_hr1_45, SUM(Hr1_60)agg_volume_hr1_60,
 				SUM(Hr2_15)agg_volume_hr2_15, SUM(Hr2_30)agg_volume_hr2_30, SUM(Hr2_45)agg_volume_hr2_45, SUM(Hr2_60)agg_volume_hr2_60,
 				SUM(Hr3_15)agg_volume_hr3_15, SUM(Hr3_30)agg_volume_hr3_30, SUM(Hr3_45)agg_volume_hr3_45, SUM(Hr3_60)agg_volume_hr3_60,
 				SUM(Hr4_15)agg_volume_hr4_15, SUM(Hr4_30)agg_volume_hr4_30, SUM(Hr4_45)agg_volume_hr4_45, SUM(Hr4_60)agg_volume_hr4_60,
 				SUM(Hr5_15)agg_volume_hr5_15, SUM(Hr5_30)agg_volume_hr5_30, SUM(Hr5_45)agg_volume_hr5_45, SUM(Hr5_60)agg_volume_hr5_60,
 				SUM(Hr6_15)agg_volume_hr6_15, SUM(Hr6_30)agg_volume_hr6_30, SUM(Hr6_45)agg_volume_hr6_45, SUM(Hr6_60)agg_volume_hr6_60,
 				SUM(Hr7_15)agg_volume_hr7_15, SUM(Hr7_30)agg_volume_hr7_30, SUM(Hr7_45)agg_volume_hr7_45, SUM(Hr7_60)agg_volume_hr7_60,
 				SUM(Hr8_15)agg_volume_hr8_15, SUM(Hr8_30)agg_volume_hr8_30, SUM(Hr8_45)agg_volume_hr8_45, SUM(Hr8_60)agg_volume_hr8_60,
 				SUM(Hr9_15)agg_volume_hr9_15, SUM(Hr9_30)agg_volume_hr9_30, SUM(Hr9_45)agg_volume_hr9_45, SUM(Hr9_60)agg_volume_hr9_60,
 				SUM(Hr10_15)agg_volume_hr10_15, SUM(Hr10_30)agg_volume_hr10_30, SUM(Hr10_45)agg_volume_hr10_45, SUM(Hr10_60)agg_volume_hr10_60,
 				SUM(Hr11_15)agg_volume_hr11_15, SUM(Hr11_30)agg_volume_hr11_30, SUM(Hr11_45)agg_volume_hr11_45, SUM(Hr11_60)agg_volume_hr11_60,
 				SUM(Hr12_15)agg_volume_hr12_15, SUM(Hr12_30)agg_volume_hr12_30, SUM(Hr12_45)agg_volume_hr12_45, SUM(Hr12_60)agg_volume_hr12_60,
 				SUM(Hr13_15)agg_volume_hr13_15, SUM(Hr13_30)agg_volume_hr13_30, SUM(Hr13_45)agg_volume_hr13_45, SUM(Hr13_60)agg_volume_hr13_60,
 				SUM(Hr14_15)agg_volume_hr14_15, SUM(Hr14_30)agg_volume_hr14_30, SUM(Hr14_45)agg_volume_hr14_45, SUM(Hr14_60)agg_volume_hr14_60,
 				SUM(Hr15_15)agg_volume_hr15_15, SUM(Hr15_30)agg_volume_hr15_30, SUM(Hr15_45)agg_volume_hr15_45, SUM(Hr15_60)agg_volume_hr15_60,
 				SUM(Hr16_15)agg_volume_hr16_15, SUM(Hr16_30)agg_volume_hr16_30, SUM(Hr16_45)agg_volume_hr16_45, SUM(Hr16_60)agg_volume_hr16_60,
 				SUM(Hr17_15)agg_volume_hr17_15, SUM(Hr17_30)agg_volume_hr17_30, SUM(Hr17_45)agg_volume_hr17_45, SUM(Hr17_60)agg_volume_hr17_60,
 				SUM(Hr18_15)agg_volume_hr18_15, SUM(Hr18_30)agg_volume_hr18_30, SUM(Hr18_45)agg_volume_hr18_45, SUM(Hr18_60)agg_volume_hr18_60,
 				SUM(Hr19_15)agg_volume_hr19_15, SUM(Hr19_30)agg_volume_hr19_30, SUM(Hr19_45)agg_volume_hr19_45, SUM(Hr19_60)agg_volume_hr19_60,
 				SUM(Hr20_15)agg_volume_hr20_15, SUM(Hr20_30)agg_volume_hr20_30, SUM(Hr20_45)agg_volume_hr20_45, SUM(Hr20_60)agg_volume_hr20_60,
 				SUM(Hr21_15)agg_volume_hr21_15, SUM(Hr21_30)agg_volume_hr21_30, SUM(Hr21_45)agg_volume_hr21_45, SUM(Hr21_60)agg_volume_hr21_60,
 				SUM(Hr22_15)agg_volume_hr22_15, SUM(Hr22_30)agg_volume_hr22_30, SUM(Hr22_45)agg_volume_hr22_45, SUM(Hr22_60)agg_volume_hr22_60,
 				SUM(Hr23_15)agg_volume_hr23_15, SUM(Hr23_30)agg_volume_hr23_30, SUM(Hr23_45)agg_volume_hr23_45, SUM(Hr23_60)agg_volume_hr23_60,
 				SUM(Hr24_15)agg_volume_hr24_15, SUM(Hr24_30)agg_volume_hr24_30, SUM(Hr24_45)agg_volume_hr24_45, SUM(Hr24_60)agg_volume_hr24_60,
 				SUM(Hr25_15)agg_volume_hr25_15, SUM(Hr25_30)agg_volume_hr25_30, SUM(Hr25_45)agg_volume_hr25_45, SUM(Hr25_60)agg_volume_hr25_60
 			FROM group_meter_mapping gmm2 
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_mins mdh ON mdh.meter_data_id = md.meter_data_id
 			WHERE gmm2.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 		) meter_agg ON meter_agg.agg_meter_id = md.meter_id	AND meter_agg.prod_date = mdh.prod_date
 		WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 		INSERT INTO mv90_data_mins(meter_data_id, prod_date, [Hr1_15], [Hr1_30], [Hr1_45], [Hr1_60], 
 				[Hr2_15], [Hr2_30], [Hr2_45], [Hr2_60], 
 				[Hr3_15], [Hr3_30], [Hr3_45], [Hr3_60], 
 				[Hr4_15], [Hr4_30], [Hr4_45], [Hr4_60], 
 				[Hr5_15], [Hr5_30], [Hr5_45], [Hr5_60], 
 				[Hr6_15], [Hr6_30], [Hr6_45], [Hr6_60], 
 				[Hr7_15], [Hr7_30], [Hr7_45], [Hr7_60], 
 				[Hr8_15], [Hr8_30], [Hr8_45], [Hr8_60], 
 				[Hr9_15], [Hr9_30], [Hr9_45], [Hr9_60], 
 				[Hr10_15], [Hr10_30], [Hr10_45], [Hr10_60], 
 				[Hr11_15], [Hr11_30], [Hr11_45], [Hr11_60], 
 				[Hr12_15], [Hr12_30], [Hr12_45], [Hr12_60], 
 				[Hr13_15], [Hr13_30], [Hr13_45], [Hr13_60], 
 				[Hr14_15], [Hr14_30], [Hr14_45], [Hr14_60], 
 				[Hr15_15], [Hr15_30], [Hr15_45], [Hr15_60], 
 				[Hr16_15], [Hr16_30], [Hr16_45], [Hr16_60], 
 				[Hr17_15], [Hr17_30], [Hr17_45], [Hr17_60], 
 				[Hr18_15], [Hr18_30], [Hr18_45], [Hr18_60], 
 				[Hr19_15], [Hr19_30], [Hr19_45], [Hr19_60], 
 				[Hr20_15], [Hr20_30], [Hr20_45], [Hr20_60], 
 				[Hr21_15], [Hr21_30], [Hr21_45], [Hr21_60], 
 				[Hr22_15], [Hr22_30], [Hr22_45], [Hr22_60], 
 				[Hr23_15], [Hr23_30], [Hr23_45], [Hr23_60], 
 				[Hr24_15], [Hr24_30], [Hr24_45], [Hr24_60], 
 				[Hr25_15], [Hr25_30], [Hr25_45], [Hr25_60],uom_id)					
 			  SELECT MAX(md_agg.meter_data_id) meter_data_id, mdh.prod_date,
 	  			SUM(mdh.Hr1_15), SUM(mdh.Hr1_30), SUM(mdh.Hr1_45), SUM(mdh.Hr1_60),
 				SUM(mdh.Hr2_15), SUM(mdh.Hr2_30), SUM(mdh.Hr2_45), SUM(mdh.Hr2_60),
 				SUM(mdh.Hr3_15), SUM(mdh.Hr3_30), SUM(mdh.Hr3_45), SUM(mdh.Hr3_60),
 				SUM(mdh.Hr4_15), SUM(mdh.Hr4_30), SUM(mdh.Hr4_45), SUM(mdh.Hr4_60),
 				SUM(mdh.Hr5_15), SUM(mdh.Hr5_30), SUM(mdh.Hr5_45), SUM(mdh.Hr5_60),
 				SUM(mdh.Hr6_15), SUM(mdh.Hr6_30), SUM(mdh.Hr6_45), SUM(mdh.Hr6_60),
 				SUM(mdh.Hr7_15), SUM(mdh.Hr7_30), SUM(mdh.Hr7_45), SUM(mdh.Hr7_60),
 				SUM(mdh.Hr8_15), SUM(mdh.Hr8_30), SUM(mdh.Hr8_45), SUM(mdh.Hr8_60),
 				SUM(mdh.Hr9_15), SUM(mdh.Hr9_30), SUM(mdh.Hr9_45), SUM(mdh.Hr9_60),
 				SUM(mdh.Hr10_15), SUM(mdh.Hr10_30), SUM(mdh.Hr10_45), SUM(mdh.Hr10_60),
 				SUM(mdh.Hr11_15), SUM(mdh.Hr11_30), SUM(mdh.Hr11_45), SUM(mdh.Hr11_60),
 				SUM(mdh.Hr12_15), SUM(mdh.Hr12_30), SUM(mdh.Hr12_45), SUM(mdh.Hr12_60),
 				SUM(mdh.Hr13_15), SUM(mdh.Hr13_30), SUM(mdh.Hr13_45), SUM(mdh.Hr13_60),
 				SUM(mdh.Hr14_15), SUM(mdh.Hr14_30), SUM(mdh.Hr14_45), SUM(mdh.Hr14_60),
 				SUM(mdh.Hr15_15), SUM(mdh.Hr15_30), SUM(mdh.Hr15_45), SUM(mdh.Hr15_60),
 				SUM(mdh.Hr16_15), SUM(mdh.Hr16_30), SUM(mdh.Hr16_45), SUM(mdh.Hr16_60),
 				SUM(mdh.Hr17_15), SUM(mdh.Hr17_30), SUM(mdh.Hr17_45), SUM(mdh.Hr17_60),
 				SUM(mdh.Hr18_15), SUM(mdh.Hr18_30), SUM(mdh.Hr18_45), SUM(mdh.Hr18_60),
 				SUM(mdh.Hr19_15), SUM(mdh.Hr19_30), SUM(mdh.Hr19_45), SUM(mdh.Hr19_60),
 				SUM(mdh.Hr20_15), SUM(mdh.Hr20_30), SUM(mdh.Hr20_45), SUM(mdh.Hr20_60),
 				SUM(mdh.Hr21_15), SUM(mdh.Hr21_30), SUM(mdh.Hr21_45), SUM(mdh.Hr21_60),
 				SUM(mdh.Hr22_15), SUM(mdh.Hr22_30), SUM(mdh.Hr22_45), SUM(mdh.Hr22_60),
 				SUM(mdh.Hr23_15), SUM(mdh.Hr23_30), SUM(mdh.Hr23_45), SUM(mdh.Hr23_60),
 				SUM(mdh.Hr24_15), SUM(mdh.Hr24_30), SUM(mdh.Hr24_45), SUM(mdh.Hr24_60),
 				SUM(mdh.Hr25_15), SUM(mdh.Hr25_30), SUM(mdh.Hr25_45), SUM(mdh.Hr25_60),
 				MAX(md_agg.uom_id) uom_id	
 			FROM
 			(
 				SELECT DISTINCT gmm.aggregate_to_meter
 				FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				WHERE h.error_code = ''0''
 			) gmm_agg
 			INNER JOIN group_meter_mapping gmm2 ON gmm2.aggregate_to_meter = gmm_agg.aggregate_to_meter
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_mins mdh ON mdh.meter_data_id = md.meter_data_id
 			INNER JOIN mv90_data md_agg ON md_agg.meter_id = gmm2.aggregate_to_meter
 				AND md_agg.from_date = md.from_date
 			LEFT JOIN mv90_data_mins mdh_old ON mdh_old.meter_data_id = md_agg.meter_data_id
 				AND mdh_old.prod_date = mdh.prod_date
 			WHERE 1 = 1
 				AND mdh_old.recid IS NULL
 				AND gmm2.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 			')
 	END	
 		
 	SET @error_code = 's'  
 	IF EXISTS(SELECT * FROM #tmp_missing_meter_id)
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 		SELECT @process_id, 'Error', 'Import Data', @table_name, 'Data Error', 'Data error for Generator Id : ' + meter_id, '', @rules_names
 		FROM #tmp_missing_meter_id
 		SET @error_code = 'e'
 	END 
END
 
IF @table_name IN ('ixp_hourly_allocation_data_template', 'ixp_10mins_allocation_data_template')
BEGIN
	/***update user date to sql date***/		
	
	EXEC('UPDATE a
		  SET date = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.date = dd.user_date
	')	
	/***END OF date update***/

	/*start of validation*/
	EXEC ('DELETE ' + @field_compare_table)
 	        
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data'',''channel'',''channel'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''meter_id'',''recorderid'',''meter_id'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_DST'',''date'',''date'')')	
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''period'',''hour'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''period'',''period'')')				
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''hr1'',''value'')')	
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_DST'',''id'',''is_dst'')')	
 	 	
 	SET @source_table = @import_temp_table_name    
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name

	EXEC('DELETE 
 	      FROM   '+@import_temp_table_name+'
 	      WHERE  meter_id IS NULL
 	             AND channel IS NULL
 	             AND date IS NULL
 	             AND hour IS NULL 	             
				 AND value IS NULL')
 	        
	--PRINT('***total no of data***') 	
      EXEC ('DELETE FROM ' + @import_temp_table_name + ' WHERE channel IS NULL AND [date] IS NULL AND [hour] IS NULL AND meter_id IS NULL AND period IS NULL AND VALUE IS NULL') 
 	--EXEC ('UPDATE ' + @import_temp_table_name + ' SET [hour] = 1')        
 	 	
 	-- data repetition error handeling starts 	
 	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
 	            10007,
 	              dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID, Channel, Date, Hour, Period''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', a.meter_id' + ' + '', '' + ' + 'a.channel' + ' + '', '' + ' + 'a.date' + ' + '', '' + ' + 'a.hour' + ' + '', '' + ' + 'a.period ),
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
                   SELECT [meter_id],
						  ISNULL([channel], 1) [channel], 
						  [date],
						  [hour], 
						  [period], 
						  COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY [meter_id],ISNULL([channel], 1),[date],[hour], [period]
 				  HAVING COUNT(*) > 1
 			  ) b
			ON  a.[meter_id] = b.[meter_id] 
			AND ISNULL(a.[channel], 1) = ISNULL(b.[channel], 1) 
			AND a.[date] = b.[date] 
			AND a.[hour] = b.[hour] 
			AND a.[period] = b.[period]
			')

	--Validation for empty value for meter_id, channel, date, hour and period
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10001,
		  CASE 
			  WHEN a.meter_id IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID'')
			  WHEN a.channel IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Channel'')
			  WHEN a.date IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Date'')
			  WHEN a.value IS NULL THEN
				  dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume'')			  
		  END,
		  a.import_file_name
 	      FROM ' + @import_temp_table_name + ' a
 	      WHERE (a.meter_id) IS NULL OR
				(a.channel) IS NULL OR 
				(a.date) IS NULL OR 
				(a.value) IS NULL 				
	')

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly meter id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
			     dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Hour''),
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN meter_id mi 
			  ON mi.recorderid = a.meter_id
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
		  	  AND mi.granularity IN (994, 987, 989, 995, 982)
			  AND a.hour IS NULL
	')
 	
	-- validation for non existent static data validation of debt_rating and rating_type
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10002,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Meter ID''), ''<column_value>'', a.meter_id),
		  a.import_file_name
		  FROM   ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status 
			  ON a.temp_id = #error_status.temp_id 						  
		  LEFT JOIN meter_id mi
			  ON mi.recorderid = a.meter_id
 		  WHERE #error_status.temp_id IS NULL AND
				mi.meter_id IS NULL
	')	
	-- Data Mismatch VOlume
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume''), ''<column_value>'', a.value),
			a.import_file_name
			FROM   ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status 
				ON a.temp_id = #error_status.temp_id 						  
 			WHERE #error_status.temp_id IS NULL AND
				ISNUMERIC(a.value) = 0 '
		)
		
	-- Not matched Channel
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Channel''), ''<column_value>'', a.channel), ''<column_name1>'', ''meter_id:'' + a.meter_id),
			a.import_file_name
			FROM   ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status 
				ON a.temp_id = #error_status.temp_id
			INNER JOIN meter_id mi
				ON mi.recorderid = a.meter_id
			LEFT JOIN recorder_properties rp
				ON rp.meter_id = mi.meter_id
				AND a.channel = rp.channel
 			WHERE #error_status.temp_id IS NULL AND
				rp.meter_id IS NULL'
		)	

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10016,
		  dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''',''<column_value>'', a.is_dst), ''<column_name>'', ''IS DST''),
		  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		  WHERE  #error_status.temp_id IS NULL
		  	AND a.is_dst NOT IN (0, 1)
 	')

	--Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		')

 	BEGIN TRY	
 
 		IF @drilldown_level = 1
 		BEGIN
 		EXEC('INSERT INTO #tmp_staging_table([meter_id],[channel],[date],[hour],[value], [period], [is_dst]) 
					SELECT  [meter_id], ISNULL([channel],1), [date], [hour], [value], [period], CASE WHEN [hour] = 25 THEN 1 ELSE 0 END
					FROM ' + @import_temp_table_name + '
					--CROSS JOIN seq
					--	WHERE DATEADD(DAY,n-1,[date]) <= ISNULL(end_date, ISNULL(end_date, DATEADD(Month,1,[date])-1) AND n < 32
					ORDER BY meter_id')
							
		END
 		ELSE IF @drilldown_level = 2
 		BEGIN
 		EXEC ('INSERT INTO #tmp_staging_table 
				   SELECT a.[meter_id], ISNULL(a.[channel],1), a.[date], a.[hour], a.[.value], [h_filename], [h_error], [d_filename], [d_error] 
				   FROM ' + @import_temp_table_name + ' a
				   LEFT JOIN #error_status
						ON #error_status.temp_id = a.temp_id
				   WHERE #error_status.temp_id IS NULL
				   ')
 		END

		--DECLARE @max_10min_date DATE,  @min_10min_date DATE
		--select @max_10min_date = MAX(date), @min_10min_date = MIN(date) from #tmp_staging_table

		--IF OBJECT_ID('tempdb.. #temp_10min_5min_mapping') IS NOT NULL
			--DROP TABLE  #temp_10min_5min_mapping

		--CREATE TABLE #temp_10min_5min_mapping(clm_name NVARCHAR(10),alias_name NVARCHAR(10),is_dst INT,granularity INT)

				--INSERT INTO #temp_10min_5min_mapping(clm_name,alias_name,is_dst,granularity) 
				--SELECT clm_name, alias_name, is_dst,994 FROM FNAGetPivotGranularityColumn(@min_10min_date,@max_10min_date,994,@dst_group_value_id) UNION ALL
				--SELECT clm_name, alias_name, is_dst,995 FROM FNAGetPivotGranularityColumn(@min_10min_date,@max_10min_date,995,@dst_group_value_id) 
		
 		--UPDATE t SET HOUR = SUBSTRING(HOUR, 1,CHARINDEX(':', HOUR)-1) FROM #tmp_staging_table t WHERE HOUR LIKE '%:%'
		--UPDATE tst SET [hour] = CAST(LEFT(tm.clm_name,2) AS INT) FROM #temp_10min_5min_mapping tm  INNER JOIN  #tmp_staging_table tst ON REPLACE(tm.alias_name,'DST','') = RIGHT('00'+tst.[hour],5)
		--	INNER JOIN meter_id mi ON mi.recorderid = tst.meter_id AND tm.granularity = mi.granularity
 		SET @error_code = 's'
 	END TRY
 	BEGIN CATCH	
 		SET @error_msg = 'Error: ' + ERROR_MESSAGE()
 		SET @error_code = 'e'
 		--PRINT @error_msg
 		
 		INSERT INTO source_system_data_import_status (
 			process_id,
 			code,
 			MODULE,
 			[source],
 			[TYPE],
 			[description],
 			recommendation,
 			rules_name
 		  )
 		  EXEC (
 				 'SELECT DISTINCT ' 
 					 + '''' + @process_id + '''' + ',' 
 					 + '''Error'''  + ',' 
 					 + '''Import Data''' + ',' 
 					 + '''' + @table_name + '''' + ',' 
 					 +  '''Error''' + ',' 
 					 + '''' + @error_msg + '''' + ',' + 
 					 '''Please check if the date format provided matches the Users Date format.''' +  ','
 					 + '''' + @rules_names + '''' +
 				 ' FROM ' + @import_temp_table_name
 		  )
 		
 		SELECT @url_desc = './dev/spa_html.php?__user_name__=' + @user_login_id +
 						   '&spa=exec spa_get_import_process_status ''' + @process_id + ''',''' 
 						   + @user_login_id + ''''
 		
 		SELECT @desc = '<a target="_blank" href="' + @url_desc + '">' +
 					   'Allocation data import process completed' +
 					   CASE 
 							WHEN (@error_code = 'e') THEN ' (ERRORS found)'
 							ELSE ''
 					   END +  ' </a>'
 				IF NOT EXISTS(SELECT error_message_id from ixp_import_data_source iids
							  INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id  
							  WHERE rules_id = @rules_id)
				BEGIN
 	 	                        EXEC spa_NotificationUserByRole 2, @process_id, 'Import Allocation Data(Hourly)', @desc , @error_code, @job_name, 1	
 				END
 		RETURN
 	END CATCH 
 	
 	-- missing meter logic is only valid for import except in Ebase Interface(In Ebase missing meter is handled in Adaptor level)
 	INSERT INTO #tmp_missing_meter_id (meter_id)
 	SELECT	DISTINCT tmp.meter_id
 	FROM #tmp_staging_table tmp
 	LEFT JOIN meter_id mi
 		ON mi.recorderid = tmp.meter_id
 	WHERE mi.recorderid IS NULL
 	
 	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	--	  SELECT a.temp_id,
 	--			 '''+ @process_id+''',
 	--			 ''Error'',
 	--			 ''Import Data'',
 	--			 '''+ @table_name+''',
 	--			 ''Data Error'',
 	--			 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + ISNULL(a.[hour], ''NULL'') + '' (Meter ID: '' + a.meter_id + '' not found in the system.)'',
 	--			 ''Please CHECK your Data'',
 	--			 a.import_file_name
 	--	  FROM ' + @import_temp_table_name + ' a
 	--	  INNER JOIN #tmp_missing_meter_id b
 	--	  ON  a.[meter_id] = b.[meter_id]')
 	 	
 	 						
 	IF @drilldown_level = 1
 	BEGIN
 		INSERT INTO [#tmp_mv90_data_hour]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([01]) Hr1, ([02]) Hr2, ([03]) Hr3, ([04]) Hr4, ([05]) Hr5, ([06]) Hr6, 
 				([07]) Hr7, ([08]) Hr8, ([09]) Hr9, ([10]) Hr10, ([11]) Hr11, ([12]) Hr12,
 				([13]) Hr13, ([14]) Hr14, ([15]) Hr15, ([16]) Hr16, ([17]) Hr17, ([18]) Hr18, 
 				([19]) Hr19, ([20]) Hr20, ([21]) Hr21, ([22]) Hr22, ([23]) Hr23, ([24]) Hr24, ([25]) Hr25,period
 		FROM	(  
 					SELECT meter_id, [prod_date], [hour], [channel], [value], [period] FROM (
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.[date] [prod_date],
 							CASE 
								WHEN tmp.is_dst = 1 
									THEN RIGHT('0' + CAST(ISNULL(tmp.[hour],0) AS NVARCHAR(10)), 2) 
								ELSE RIGHT('0' + CAST(ISNULL(tmp.[hour],0)+1 AS NVARCHAR(10)), 2) 
							END 
							[hour],	
 							CASE 
 								WHEN ( tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT)+1 = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 								END [value],
 								[period]
 					FROM	#tmp_staging_table tmp
 								INNER JOIN [meter_id] mi ON mi.[recorderid] = tmp.[meter_id]
 								LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id AND tmp.channel = rp.channel
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR( tmp.[date]) 
 									AND md.[insert_delete] = 'd'
									AND md.dst_group_value_id = @dst_group_value_id) a
 					GROUP BY meter_id, [prod_date], [hour], [channel], [value], [period]			
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24], [25])
 			 ) pvt		
 	END
 	ELSE 
 	BEGIN
 		INSERT INTO [#tmp_mv90_data_hour]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([0]) Hr1, ([1]) Hr2, ([2]) Hr3, ([3]) Hr4, ([4]) Hr5, ([5]) Hr6, 
 				([6]) Hr7, ([7]) Hr8, ([8]) Hr9, ([9]) Hr10, ([10]) Hr11, ([11]) Hr12,
 				([12]) Hr13, ([13]) Hr14, ([14]) Hr15, ([15]) Hr16, ([16]) Hr17, ([17]) Hr18, 
 				([18]) Hr19, ([19]) Hr20, ([20]) Hr21, ([21]) Hr22, ([22]) Hr23, ([23]) Hr24, ([24]) Hr25, [period]
 		FROM	(  
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.date [prod_date], 
 							CAST(tmp.[hour] AS TINYINT)+1 [HOUR],
 							CASE 
 								WHEN (tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT) + 1 = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 							END [VALUE],[period]
 					FROM	#tmp_staging_table tmp
 							INNER JOIN [meter_id] mi 
 								ON mi.[recorderid] = tmp.[meter_id]
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR(tmp.[date]) 
 								AND md.[insert_delete] = 'd'
								AND md.dst_group_value_id = @dst_group_value_id				
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24])
 			 ) pvt		
 	END
 
 	-- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	SELECT	@col = 'Hr' + CAST(md.hour AS NVARCHAR) + ' = Hr' + CAST(md.hour AS NVARCHAR) + ' + ISNULL(Hr25, 0)'
 	FROM	#tmp_mv90_data_hour tmp
 	INNER JOIN mv90_DST md ON  md.date = tmp.prod_date AND md.insert_delete = 'i' AND md.dst_group_value_id = @dst_group_value_id
 
 	SET @sql = '
 				UPDATE	tmp
 				SET ' + @col + '
 				FROM #tmp_mv90_data_hour tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.prod_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(10)) + '
 				'
 	--PRINT @sql
 	EXEC(@sql)
 	
 	-- insert data into mv90_data summary table
	INSERT INTO  [#temp_summary1](
 					[meter_id] ,
 					[gen_date] ,
 					[from_date] ,
 					[to_date] ,
 					[channel] ,
 					[volume] ) 
 	SELECT	a.meter_id,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' gen_date,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' from_date,
 			DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1 to_date,
 			a.channel,
 			SUM(ISNULL(a.[Hr1],0) + ISNULL(a.[Hr2],0) + ISNULL(a.[Hr3],0) + ISNULL(a.[Hr4],0) + ISNULL(a.[Hr5],0) + ISNULL(a.[Hr6],0) + ISNULL(a.[Hr7],0) + ISNULL(a.[Hr8],0) + ISNULL(a.[Hr9],0) + ISNULL(a.[Hr10],0) + ISNULL(a.[Hr11],0) + ISNULL(a.[Hr12],0) + ISNULL(a.[Hr13],0) + ISNULL(a.[Hr14],0) + ISNULL(a.[Hr15],0) + ISNULL(a.[Hr16],0) + ISNULL(a.[Hr17],0) + ISNULL(a.[Hr18],0) + ISNULL(a.[Hr19],0) + ISNULL(a.[Hr20],0) + ISNULL(a.[Hr21],0) + ISNULL(a.[Hr22],0) + ISNULL(a.[Hr23],0) + ISNULL(a.[Hr24],0) ) volume
 	FROM [#tmp_mv90_data_hour] a
 	GROUP BY a.meter_id,a.channel,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01',DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1	
 
 	IF @drilldown_level = 1
 	BEGIN
 		DELETE	mdh
 		FROM [mv90_data_hour] mdh		
 		INNER JOIN [mv90_data] md ON  md.[meter_data_id] = mdh.[meter_data_id]
 		INNER JOIN [#tmp_mv90_data_hour] tf
 			ON  tf.[meter_id] = md.[meter_id]
 			AND md.[channel] = tf.[channel]
 			AND mdh.[prod_date] = tf.[prod_date]
 		            
 		DELETE	md
 		FROM [mv90_data] md
 		INNER JOIN [#temp_summary1] ts
 			ON md.[meter_id] = ts.[meter_id]
 			AND md.[channel] = ts.[channel]
 			AND [dbo].[FNAgetcontractmonth](md.[from_date]) = [dbo].[FNAgetcontractmonth](ts.[from_date])
 
 		INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id,granularity )
 		SELECT	t.meter_id, t.gen_date, t.from_date, t.to_date, t.channel, t.volume, 0, mi.granularity
 		FROM [#temp_summary1] t 
 		INNER JOIN meter_id mi 
			ON mi.meter_id = t.meter_id 
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- insert if doesn't exists
 		EXEC('INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id,granularity )
 			SELECT	t.meter_id, t.gen_date, t.from_date, t.to_date, t.channel, ABS(t.volume), su.source_uom_id, mi.granularity
 			FROM	[#temp_summary1] t 
 					INNER JOIN meter_id mi ON mi.meter_id = t.meter_id 
 					INNER JOIN (
 						SELECT DISTINCT meter_id, uom FROM ' + @temp_header_table + '
 						UNION
 						SELECT DISTINCT mi_sub.recorderid [meter_id], h_sub.uom [uom] 
 						FROM ' + @temp_header_table + ' h_sub
 								INNER JOIN meter_id mi ON mi.recorderid = h_sub.meter_id
 								INNER JOIN meter_id mi_sub ON mi_sub.meter_id = mi.sub_meter_id
 								INNER JOIN #temp_summary1 ts ON ts.meter_id = mi_sub.meter_id
 						WHERE ts.volume < 0	
 					) h ON h.meter_id = mi.recorderid 
 					INNER JOIN source_uom su ON su.uom_id = h.uom 
 					LEFT JOIN mv90_data mv ON mv.meter_id = t.meter_id AND mv.from_date = t.from_date AND mv.channel = t.[channel]
 			WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ')  
 			AND mv.meter_id IS NULL ')
 
 		UPDATE t SET t.Hr1 = ABS(t.Hr1), t.Hr2 = ABS(t.Hr2), t.Hr3 = ABS(t.Hr3), t.Hr4 = ABS(t.Hr4), t.Hr5 = ABS(t.Hr5), 
 		   t.Hr6 = ABS(t.Hr6), t.Hr7 = ABS(t.Hr7), t.Hr8 = ABS(t.Hr8), t.Hr9 = ABS(t.Hr9), t.Hr10 = ABS(t.Hr10), 
 		   t.Hr11 = ABS(t.Hr11), t.Hr12 = ABS(t.Hr12), t.Hr13 = ABS(t.Hr13), t.Hr14 = ABS(t.Hr14), t.Hr15 = ABS(t.Hr15), 
 		   t.Hr16 = ABS(t.Hr16), t.Hr17 = ABS(t.Hr17), t.Hr18 = ABS(t.Hr18), t.Hr19 = ABS(t.Hr19), t.Hr20 = ABS(t.Hr20), 
 		   t.Hr21 = ABS(t.Hr21), t.Hr22 = ABS(t.Hr22), t.Hr23 = ABS(t.Hr23), t.Hr24 = ABS(t.Hr24), t.Hr25 = ABS(t.Hr25) 
 		FROM [#tmp_mv90_data_hour] t
 			
 		--update  values if already exists
 		UPDATE mdh SET
 			mdh.Hr1 = ISNULL(tmdh.Hr1, mdh.Hr1), mdh.Hr2 = ISNULL(tmdh.Hr2, mdh.Hr2), mdh.Hr3 = ISNULL(tmdh.Hr3, mdh.Hr3), 
 			mdh.Hr4 = ISNULL(tmdh.Hr4, mdh.Hr4), mdh.Hr5 = ISNULL(tmdh.Hr5, mdh.Hr5), mdh.Hr6 = ISNULL(tmdh.Hr6, mdh.Hr6), 
 			mdh.Hr7 = ISNULL(tmdh.Hr7, mdh.Hr7), mdh.Hr8 = ISNULL(tmdh.Hr8, mdh.Hr8), mdh.Hr9 = ISNULL(tmdh.Hr9, mdh.Hr9), 
 			mdh.Hr10 = ISNULL(tmdh.Hr10, mdh.Hr10), mdh.Hr11 = ISNULL(tmdh.Hr11, mdh.Hr11), mdh.Hr12 = ISNULL(tmdh.Hr12, mdh.Hr12), 
 			mdh.Hr13 = ISNULL(tmdh.Hr13, mdh.Hr13), mdh.Hr14 = ISNULL(tmdh.Hr14, mdh.Hr14), mdh.Hr15 = ISNULL(tmdh.Hr15, mdh.Hr15), 
 			mdh.Hr16 = ISNULL(tmdh.Hr16, mdh.Hr16), mdh.Hr17 = ISNULL(tmdh.Hr17, mdh.Hr17), mdh.Hr18 = ISNULL(tmdh.Hr18, mdh.Hr18), 
 			mdh.Hr19 = ISNULL(tmdh.Hr19, mdh.Hr19), mdh.Hr20 = ISNULL(tmdh.Hr20, mdh.Hr20), mdh.Hr21 = ISNULL(tmdh.Hr21, mdh.Hr21), 
 			mdh.Hr22 = ISNULL(tmdh.Hr22, mdh.Hr22), mdh.Hr23 = ISNULL(tmdh.Hr23, mdh.Hr23), mdh.Hr24 = ISNULL(tmdh.Hr24, mdh.Hr24), 
 			mdh.Hr25 = ISNULL(tmdh.Hr25, mdh.Hr25) 
 		FROM [#tmp_mv90_data_hour]  tmdh
 			INNER JOIN [mv90_data] md ON md.[meter_id] = tmdh.[meter_id] AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 			INNER JOIN mv90_data_hour mdh ON md.meter_data_id = mdh.meter_data_id
 				AND tmdh.prod_date = mdh.prod_date
 
 		--insert new data if not exists
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period])
 		SELECT	md.[meter_data_id], tmdh.[prod_date], tmdh.[Hr1], tmdh.[Hr2], tmdh.[Hr3], tmdh.[Hr4], tmdh.[Hr5], tmdh.[Hr6], tmdh.[Hr7], tmdh.[Hr8], tmdh.[Hr9], tmdh.[Hr10], tmdh.[Hr11], tmdh.[Hr12], tmdh.[Hr13], tmdh.[Hr14], tmdh.[Hr15], tmdh.[Hr16], tmdh.[Hr17], tmdh.[Hr18], tmdh.[Hr19], tmdh.[Hr20], tmdh.[Hr21], tmdh.[Hr22], tmdh.[Hr23], tmdh.[Hr24], tmdh.[Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel
 				LEFT JOIN [mv90_data_hour] mdh ON mdh.meter_data_id = md.meter_data_id
 					AND tmdh.prod_date = mdh.prod_date
 		WHERE mdh.meter_data_id IS NULL
 	END
 	ELSE
 	BEGIN
 		--insert new data
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period] )
 		SELECT	md.[meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- update only vol if exists
 		EXEC('UPDATE mv SET mv.volume = mdv.vol_sum  
 			  FROM
 				(
 					SELECT SUM(ISNULL(mdh.Hr1,0) + ISNULL(mdh.Hr2,0) + ISNULL(mdh.Hr3,0) + ISNULL(mdh.Hr4,0) + ISNULL(mdh.Hr5,0) + ISNULL(mdh.Hr6,0) + 
 						ISNULL(mdh.Hr7,0) + ISNULL(mdh.Hr8,0) + ISNULL(mdh.Hr9,0) + ISNULL(mdh.Hr10,0) + ISNULL(mdh.Hr11,0) + ISNULL(mdh.Hr12,0) + ISNULL(mdh.Hr13,0) + ISNULL(mdh.Hr14,0) + ISNULL(mdh.Hr15,0) + 
 						ISNULL(mdh.Hr16,0) + ISNULL(mdh.Hr17,0) + ISNULL(mdh.Hr18,0) + ISNULL(mdh.Hr19,0) + ISNULL(mdh.Hr20,0) + ISNULL(mdh.Hr21,0) + ISNULL(mdh.Hr22,0) + 
 						ISNULL(mdh.Hr23,0) + ISNULL(mdh.Hr24,0) ) vol_sum, meter_data_id
 					FROM mv90_data_hour mdh GROUP BY mdh.meter_data_id
 				) mdv
 				INNER JOIN mv90_data mv ON mv.meter_data_id = mdv.meter_data_id
 				INNER JOIN #temp_summary1 t ON t.meter_id = mv.meter_id
 			   ')
 
 		-- logic to import aggregate_to_meter as defined in group_meter_mapping
 
 		EXEC('
 		UPDATE md SET md.volume = meter_agg.agg_volume 
 		FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 				INNER JOIN
 				(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, md.from_date, SUM(md.volume) agg_volume
 					FROM group_meter_mapping gmm2 
 					INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 					GROUP BY gmm2.aggregate_to_meter, md.from_date
 				) meter_agg ON meter_agg.agg_meter_id = md.meter_id
 					AND meter_agg.from_date = md.from_date
 		WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 			INSERT INTO mv90_data (meter_id, gen_date, from_date, to_date, channel, volume, uom_id, descriptions, granularity)
 			SELECT gmm.aggregate_to_meter, MAX(md.gen_date) gen_date, md.from_date, MAX(md.to_date) to_date, MAX(md.channel) channel, SUM(md.volume) volume, MAX(md.uom_id) uom_id, MAX(md.descriptions) descriptions, MAX(md.granularity)
 			FROM mv90_data md 
 				INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 				INNER JOIN ' + @temp_header_table + ' h ON h.meter_id = mi.recorderid
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				LEFT JOIN mv90_data md2 ON md2.meter_id = gmm.aggregate_to_meter
 					AND md2.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND md2.meter_id IS NULL AND gmm.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm.aggregate_to_meter, md.from_date	
 		')
 
 		EXEC('
 			UPDATE mdh SET mdh.Hr1 = meter_agg.agg_volume_hr1, mdh.Hr2 = meter_agg.agg_volume_hr2, mdh.Hr3 = meter_agg.agg_volume_hr3, 
 					   mdh.Hr4 = meter_agg.agg_volume_hr4, mdh.Hr5 = meter_agg.agg_volume_hr5, mdh.Hr6 = meter_agg.agg_volume_hr6, 
 					   mdh.Hr7 = meter_agg.agg_volume_hr7, mdh.Hr8 = meter_agg.agg_volume_hr8, mdh.Hr9 = meter_agg.agg_volume_hr9, 
 					   mdh.Hr10 = meter_agg.agg_volume_hr10, mdh.Hr11 = meter_agg.agg_volume_hr11, mdh.Hr12 = meter_agg.agg_volume_hr12, 
 					   mdh.Hr13 = meter_agg.agg_volume_hr13, mdh.Hr14 = meter_agg.agg_volume_hr14, mdh.Hr15 = meter_agg.agg_volume_hr15, 
 					   mdh.Hr16 = meter_agg.agg_volume_hr16, mdh.Hr17 = meter_agg.agg_volume_hr17, mdh.Hr18 = meter_agg.agg_volume_hr18, 
 					   mdh.Hr19 = meter_agg.agg_volume_hr19, mdh.Hr20 = meter_agg.agg_volume_hr20, mdh.Hr21 = meter_agg.agg_volume_hr21, 
 					   mdh.Hr22 = meter_agg.agg_volume_hr22, mdh.Hr23 = meter_agg.agg_volume_hr23, mdh.Hr24 = meter_agg.agg_volume_hr24, 
 					   mdh.Hr25 = meter_agg.agg_volume_hr25
 			FROM ' + @temp_header_table + ' h 
 					INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 					INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 					INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 					INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					INNER JOIN
 					(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, mdh.prod_date, 
 						SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 						SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 						SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 						SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 						SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 						SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 						SUM(mdh.Hr25) agg_volume_hr25
 					FROM group_meter_mapping gmm2 
 						INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 						INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 					--ORDER BY gmm2.aggregate_to_meter, prod_date
 					) meter_agg ON meter_agg.agg_meter_id = md.meter_id	AND meter_agg.prod_date = mdh.prod_date
 			WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 		INSERT INTO mv90_data_hour(meter_data_id, prod_date, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13, 
 								Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)					
 		--  SELECT gmm2.aggregate_to_meter, mdh.prod_date
 		SELECT MAX(md_agg.meter_data_id) meter_data_id, mdh.prod_date,
 		  SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 		  SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 		  SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 		  SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 		  SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 		  SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 		  SUM(mdh.Hr25) agg_volume_hr25
 		  , MAX(md_agg.uom_id) uom_id  
 		FROM (
 				SELECT DISTINCT gmm.aggregate_to_meter
 				FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				WHERE h.error_code = ''0''
 			) gmm_agg
 			INNER JOIN group_meter_mapping gmm2 ON gmm2.aggregate_to_meter = gmm_agg.aggregate_to_meter
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 			INNER JOIN mv90_data md_agg ON md_agg.meter_id = gmm2.aggregate_to_meter
 				AND md_agg.from_date = md.from_date
 			LEFT JOIN mv90_data_hour mdh_old ON mdh_old.meter_data_id = md_agg.meter_data_id
 				AND mdh_old.prod_date = mdh.prod_date
 		WHERE 1 = 1
 			AND mdh_old.recid IS NULL
 		GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 		')
 	END
 	
 	SET @error_code = 's'  
 	IF EXISTS(SELECT * FROM #tmp_missing_meter_id)
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 		SELECT @process_id, 'Error', 'Import Data', @table_name, 'Data Error', 'Data error for Generator Id : ' + meter_id, '', @rules_names
 		FROM #tmp_missing_meter_id
 		SET @error_code = 'e'
 	END 
END
 
IF @table_name = 'ixp_daily_hourly_allocation_data_template'
BEGIN
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @import_temp_table_name)
 	--PRINT('***total no of data***')
 	
 	EXEC ('DELETE FROM ' + @import_temp_table_name + ' WHERE channel IS NULL AND [date] IS NULL AND [hour] IS NULL AND meter_id IS NULL AND period IS NULL AND VALUE IS NULL') 
 	EXEC ('UPDATE ' + @import_temp_table_name + ' SET [hour] = 1')        
 	 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + ISNULL(a.[hour], ''NULL'') + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT [meter_id],ISNULL([channel], 1) [channel], [date],[hour], [period], COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY [meter_id],ISNULL([channel], 1),[date],[hour], [period]
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.[meter_id] = b.[meter_id] AND ISNULL(a.[channel], 1) = ISNULL(b.[channel], 1) AND a.[date] = b.[date] AND a.[hour] = b.[hour] AND a.[period] = b.[period]')
 	
	EXEC('UPDATE ' + @import_temp_table_name + ' SET value = ROUND(value,0)')
 	--PRINT('***duplicate data***')	
 	
 	BEGIN TRY	
 		IF @drilldown_level = 1
 		BEGIN
 			EXEC ('INSERT INTO #tmp_staging_table([meter_id],[channel],[date],[hour],[value], [period]) 
 					SELECT [meter_id], ISNULL([channel],1), [dbo].[FNAClientToSqlDate]([date]), [hour], [value], [period] 
 					FROM ' + @import_temp_table_name)
 		END
 		
 		ELSE IF @drilldown_level = 2
 		BEGIN
 			EXEC ('INSERT INTO #tmp_staging_table SELECT [meter_id], ISNULL([channel],1), [dbo].[FNAClientToSqlDate]([date]), [hour], [value], [h_filename], [h_error], [d_filename], [d_error] FROM ' + @import_temp_table_name)
 		END	
 
 		UPDATE t SET HOUR = SUBSTRING(HOUR, 1,CHARINDEX(':', HOUR)-1) FROM #tmp_staging_table t WHERE HOUR LIKE '%:%'
 		SET @error_code = 's'
 	END TRY
 	BEGIN CATCH	
 		SET @error_msg = 'Error: ' + ERROR_MESSAGE()
 		SET @error_code = 'e'
 		--PRINT @error_msg
 		
 		INSERT INTO source_system_data_import_status (
 			process_id,
 			code,
 			MODULE,
 			[source],
 			[TYPE],
 			[description],
 			recommendation,
 			rules_name
 		  )
 		  EXEC (
 				 'SELECT DISTINCT ' 
 					 + '''' + @process_id + '''' + ',' 
 					 + '''Error'''  + ',' 
 					 + '''Import Data''' + ',' 
 					 + '''' + @table_name + '''' + ',' 
 					 +  '''Error''' + ',' 
 					 + '''' + @error_msg + '''' + ',' + 
 					 '''Please check if the date format provided matches the Users Date format.''' +  ','
 					 + '''' + @rules_names + '''' +
 				 ' FROM ' + @import_temp_table_name
 		  )
 		
 		SELECT @url_desc = './dev/spa_html.php?__user_name__=' + @user_login_id +
 						   '&spa=exec spa_get_import_process_status ''' + @process_id + ''',''' 
 						   + @user_login_id + ''''
 		
 		SELECT @desc = '<a target="_blank" href="' + @url_desc + '">' +
 					   'Allocation data import process completed' +
 					   CASE 
 							WHEN (@error_code = 'e') THEN ' (ERRORS found)'
 							ELSE ''
 					   END +  ' </a>'
 				IF NOT EXISTS( SELECT error_message_id from ixp_import_data_source iids 
						   INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id 
						   WHERE rules_id = @rules_id)
				BEGIN
 		              EXEC spa_NotificationUserByRole 2, @process_id, 'Import Allocation Data(Hourly)', @desc , @error_code, @job_name, 1	
 				END
 		RETURN
 	END CATCH 
 	
 	-- missing meter logic is only valid for import except in Ebase Interface(In Ebase missing meter is handled in Adaptor level)
 	INSERT INTO #tmp_missing_meter_id (meter_id)
 	SELECT	DISTINCT tmp.meter_id
 	FROM #tmp_staging_table tmp
 	LEFT JOIN meter_id mi
 		ON mi.recorderid = tmp.meter_id
 	WHERE mi.recorderid IS NULL
 		
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + ISNULL(a.[hour], ''NULL'') + '' (Meter ID: '' + a.meter_id + '' not found in the system.)'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN #tmp_missing_meter_id b
 		  ON  a.[meter_id] = b.[meter_id]')
	
 	CREATE TABLE #tmp_mv90_data_hour_daily (
 		[meter_id] INT,
 		[channel] INT,
 		[prod_date] DATETIME,
 		[Hr1] FLOAT,
 		[Hr2] FLOAT,
 		[Hr3] FLOAT,
 		[Hr4] FLOAT,
 		[Hr5] FLOAT,
 		[Hr6] FLOAT,
 		[Hr7] FLOAT,
 		[Hr8] FLOAT,
 		[Hr9] FLOAT,
 		[Hr10] FLOAT,
 		[Hr11] FLOAT,
 		[Hr12] FLOAT,
 		[Hr13] FLOAT,
 		[Hr14] FLOAT,
 		[Hr15] FLOAT,
 		[Hr16] FLOAT,
 		[Hr17] FLOAT,
 		[Hr18] FLOAT,
 		[Hr19] FLOAT,
 		[Hr20] FLOAT,
 		[Hr21] FLOAT,
 		[Hr22] FLOAT,
 		[Hr23] FLOAT,
 		[Hr24] FLOAT,
 		[Hr25] FLOAT,
 		period INT)  
 						
 	IF @drilldown_level = 1
 	BEGIN	
 		INSERT INTO [#tmp_mv90_data_hour_daily]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([01]) Hr1, ([02]) Hr2, ([03]) Hr3, ([04]) Hr4, ([05]) Hr5, ([06]) Hr6, 
 				([07]) Hr7, ([08]) Hr8, ([09]) Hr9, ([10]) Hr10, ([11]) Hr11, ([12]) Hr12,
 				([13]) Hr13, ([14]) Hr14, ([15]) Hr15, ([16]) Hr16, ([17]) Hr17, ([18]) Hr18, 
 				([19]) Hr19, ([20]) Hr20, ([21]) Hr21, ([22]) Hr22, ([23]) Hr23, ([24]) Hr24, ([25]) Hr25,period
 		FROM	(  
 					SELECT meter_id, [prod_date], [hour], [channel], [value], [period] FROM (
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.[date] [prod_date],
 								RIGHT('0' + CAST(tmp.[hour] AS NVARCHAR(10)), 2) [hour],
 							CASE 
 								WHEN ( tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT) = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 								END [value],
 								[period]
 					FROM	#tmp_staging_table tmp
 								INNER JOIN [meter_id] mi ON mi.[recorderid] = tmp.[meter_id]
 								LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id AND tmp.channel = rp.channel
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR( tmp.[date]) 
 									AND md.[insert_delete] = 'd'
									AND md.dst_group_value_id = @dst_group_value_id) a
 					GROUP BY meter_id, [prod_date], [hour], [channel], [value], [period]			
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24], [25])
 			 ) pvt	
 	END
 	ELSE 
 	BEGIN
 		INSERT INTO [#tmp_mv90_data_hour_daily]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([0]) Hr1, ([1]) Hr2, ([2]) Hr3, ([3]) Hr4, ([4]) Hr5, ([5]) Hr6, 
 				([6]) Hr7, ([7]) Hr8, ([8]) Hr9, ([9]) Hr10, ([10]) Hr11, ([11]) Hr12,
 				([12]) Hr13, ([13]) Hr14, ([14]) Hr15, ([15]) Hr16, ([16]) Hr17, ([17]) Hr18, 
 				([18]) Hr19, ([19]) Hr20, ([20]) Hr21, ([21]) Hr22, ([22]) Hr23, ([23]) Hr24, ([24]) Hr25, [period]
 		FROM	(  
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.date [prod_date], 
 							CAST(tmp.[hour] AS TINYINT) [HOUR],
 							CASE 
 								WHEN (tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT) + 1 = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 							END [VALUE],[period]
 					FROM	#tmp_staging_table tmp
 							INNER JOIN [meter_id] mi 
 								ON mi.[recorderid] = tmp.[meter_id]
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR(tmp.[date]) 
 								AND md.[insert_delete] = 'd'
								AND md.dst_group_value_id = @dst_group_value_id				
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24])
 			 ) pvt		
 	END
 
 	-- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	SELECT	@col = 'Hr' + CAST(md.hour AS NVARCHAR) + ' = Hr' + CAST(md.hour AS NVARCHAR) + ' + ISNULL(Hr25, 0)'
 	FROM	#tmp_mv90_data_hour_daily tmp
 	INNER JOIN mv90_DST md ON  md.date = tmp.prod_date AND md.insert_delete = 'i'
		AND md.dst_group_value_id = @dst_group_value_id
 
 	SET @sql = '
 				UPDATE	tmp
 				SET ' + @col + '
 				FROM #tmp_mv90_data_hour_daily tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.prod_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(20)) + '
 				'
 	--PRINT @sql
 	EXEC(@sql)
 	
 	IF OBJECT_ID('tempdb..#temp_summary_daily') IS NOT NULL
		DROP TABLE #temp_summary_daily	
		 	
 	-- insert data into mv90_data summary table
 	SELECT	a.meter_id,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' gen_date,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' from_date,
 			DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1 to_date,
 			a.channel,
 			SUM(ISNULL(a.[Hr1],0) + ISNULL(a.[Hr2],0) + ISNULL(a.[Hr3],0) + ISNULL(a.[Hr4],0) + ISNULL(a.[Hr5],0) + ISNULL(a.[Hr6],0) + ISNULL(a.[Hr7],0) + ISNULL(a.[Hr8],0) + ISNULL(a.[Hr9],0) + ISNULL(a.[Hr10],0) + ISNULL(a.[Hr11],0) + ISNULL(a.[Hr12],0) + ISNULL(a.[Hr13],0) + ISNULL(a.[Hr14],0) + ISNULL(a.[Hr15],0) + ISNULL(a.[Hr16],0) + ISNULL(a.[Hr17],0) + ISNULL(a.[Hr18],0) + ISNULL(a.[Hr19],0) + ISNULL(a.[Hr20],0) + ISNULL(a.[Hr21],0) + ISNULL(a.[Hr22],0) + ISNULL(a.[Hr23],0) + ISNULL(a.[Hr24],0) ) volume
 	INTO [#temp_summary_daily]
 	FROM [#tmp_mv90_data_hour_daily] a
 	GROUP BY a.meter_id,a.channel,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01',DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1	

 	IF @drilldown_level = 1
 	BEGIN
 		DELETE	mdh
 		FROM [mv90_data_hour] mdh		
 		INNER JOIN [mv90_data] md ON  md.[meter_data_id] = mdh.[meter_data_id]
 		INNER JOIN [#tmp_mv90_data_hour_daily] tf
 			ON  tf.[meter_id] = md.[meter_id]
 			AND md.[channel] = tf.[channel]
 			AND mdh.[prod_date] = tf.[prod_date]
 		            
 		DELETE	md
 		FROM [mv90_data] md
 		INNER JOIN [#temp_summary_daily] ts
 			ON md.[meter_id] = ts.[meter_id]
 			AND md.[channel] = ts.[channel]
 			AND [dbo].[FNAgetcontractmonth](md.[from_date]) = [dbo].[FNAgetcontractmonth](ts.[from_date])
 
 		INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id )
 		SELECT	meter_id, gen_date, from_date, to_date, channel, volume, 0
 		FROM	[#temp_summary_daily]
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- insert if doesn't exists
 		EXEC('INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id )
 			SELECT	t.meter_id, t.gen_date, t.from_date, t.to_date, t.channel, ABS(t.volume), su.source_uom_id
 			FROM	[#temp_summary_daily] t 
 					INNER JOIN meter_id mi ON mi.meter_id = t.meter_id 
 					INNER JOIN (
 						SELECT DISTINCT meter_id, uom FROM ' + @temp_header_table + '
 						UNION
 						SELECT DISTINCT mi_sub.recorderid [meter_id], h_sub.uom [uom] 
 						FROM ' + @temp_header_table + ' h_sub
 								INNER JOIN meter_id mi ON mi.recorderid = h_sub.meter_id
 								INNER JOIN meter_id mi_sub ON mi_sub.meter_id = mi.sub_meter_id
 								INNER JOIN #temp_summary_daily ts ON ts.meter_id = mi_sub.meter_id
 						WHERE ts.volume < 0	
 					) h ON h.meter_id = mi.recorderid 
 					INNER JOIN source_uom su ON su.uom_id = h.uom 
 					LEFT JOIN mv90_data mv ON mv.meter_id = t.meter_id AND mv.from_date = t.from_date AND mv.channel = t.[channel]
 			WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ')  
 			AND mv.meter_id IS NULL ')
 
 		UPDATE t SET t.Hr1 = ABS(t.Hr1), t.Hr2 = ABS(t.Hr2), t.Hr3 = ABS(t.Hr3), t.Hr4 = ABS(t.Hr4), t.Hr5 = ABS(t.Hr5), 
 		   t.Hr6 = ABS(t.Hr6), t.Hr7 = ABS(t.Hr7), t.Hr8 = ABS(t.Hr8), t.Hr9 = ABS(t.Hr9), t.Hr10 = ABS(t.Hr10), 
 		   t.Hr11 = ABS(t.Hr11), t.Hr12 = ABS(t.Hr12), t.Hr13 = ABS(t.Hr13), t.Hr14 = ABS(t.Hr14), t.Hr15 = ABS(t.Hr15), 
 		   t.Hr16 = ABS(t.Hr16), t.Hr17 = ABS(t.Hr17), t.Hr18 = ABS(t.Hr18), t.Hr19 = ABS(t.Hr19), t.Hr20 = ABS(t.Hr20), 
 		   t.Hr21 = ABS(t.Hr21), t.Hr22 = ABS(t.Hr22), t.Hr23 = ABS(t.Hr23), t.Hr24 = ABS(t.Hr24), t.Hr25 = ABS(t.Hr25) 
 		FROM [#tmp_mv90_data_hour_daily] t
 			
 		--update  values if already exists
 		UPDATE mdh SET
 			mdh.Hr1 = ISNULL(tmdh.Hr1, mdh.Hr1), mdh.Hr2 = ISNULL(tmdh.Hr2, mdh.Hr2), mdh.Hr3 = ISNULL(tmdh.Hr3, mdh.Hr3), 
 			mdh.Hr4 = ISNULL(tmdh.Hr4, mdh.Hr4), mdh.Hr5 = ISNULL(tmdh.Hr5, mdh.Hr5), mdh.Hr6 = ISNULL(tmdh.Hr6, mdh.Hr6), 
 			mdh.Hr7 = ISNULL(tmdh.Hr7, mdh.Hr7), mdh.Hr8 = ISNULL(tmdh.Hr8, mdh.Hr8), mdh.Hr9 = ISNULL(tmdh.Hr9, mdh.Hr9), 
 			mdh.Hr10 = ISNULL(tmdh.Hr10, mdh.Hr10), mdh.Hr11 = ISNULL(tmdh.Hr11, mdh.Hr11), mdh.Hr12 = ISNULL(tmdh.Hr12, mdh.Hr12), 
 			mdh.Hr13 = ISNULL(tmdh.Hr13, mdh.Hr13), mdh.Hr14 = ISNULL(tmdh.Hr14, mdh.Hr14), mdh.Hr15 = ISNULL(tmdh.Hr15, mdh.Hr15), 
 			mdh.Hr16 = ISNULL(tmdh.Hr16, mdh.Hr16), mdh.Hr17 = ISNULL(tmdh.Hr17, mdh.Hr17), mdh.Hr18 = ISNULL(tmdh.Hr18, mdh.Hr18), 
 			mdh.Hr19 = ISNULL(tmdh.Hr19, mdh.Hr19), mdh.Hr20 = ISNULL(tmdh.Hr20, mdh.Hr20), mdh.Hr21 = ISNULL(tmdh.Hr21, mdh.Hr21), 
 			mdh.Hr22 = ISNULL(tmdh.Hr22, mdh.Hr22), mdh.Hr23 = ISNULL(tmdh.Hr23, mdh.Hr23), mdh.Hr24 = ISNULL(tmdh.Hr24, mdh.Hr24), 
 			mdh.Hr25 = ISNULL(tmdh.Hr25, mdh.Hr25) 
 		FROM [#tmp_mv90_data_hour_daily]  tmdh
 			INNER JOIN [mv90_data] md ON md.[meter_id] = tmdh.[meter_id] AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 			INNER JOIN mv90_data_hour mdh ON md.meter_data_id = mdh.meter_data_id
 				AND tmdh.prod_date = mdh.prod_date
 
 		--insert new data if not exists
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period])
 		SELECT	md.[meter_data_id], tmdh.[prod_date], tmdh.[Hr1], tmdh.[Hr2], tmdh.[Hr3], tmdh.[Hr4], tmdh.[Hr5], tmdh.[Hr6], tmdh.[Hr7], tmdh.[Hr8], tmdh.[Hr9], tmdh.[Hr10], tmdh.[Hr11], tmdh.[Hr12], tmdh.[Hr13], tmdh.[Hr14], tmdh.[Hr15], tmdh.[Hr16], tmdh.[Hr17], tmdh.[Hr18], tmdh.[Hr19], tmdh.[Hr20], tmdh.[Hr21], tmdh.[Hr22], tmdh.[Hr23], tmdh.[Hr24], tmdh.[Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour_daily] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel
 				LEFT JOIN [mv90_data_hour] mdh ON mdh.meter_data_id = md.meter_data_id
 					AND tmdh.prod_date = mdh.prod_date
 		WHERE mdh.meter_data_id IS NULL
 	END
 	ELSE
 	BEGIN
 		--insert new data
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period] )
 		SELECT	md.[meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour_daily] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- update only vol if exists
 		EXEC('UPDATE mv SET mv.volume = mdv.vol_sum  
 			  FROM
 				(
 					SELECT SUM(ISNULL(mdh.Hr1,0) + ISNULL(mdh.Hr2,0) + ISNULL(mdh.Hr3,0) + ISNULL(mdh.Hr4,0) + ISNULL(mdh.Hr5,0) + ISNULL(mdh.Hr6,0) + 
 						ISNULL(mdh.Hr7,0) + ISNULL(mdh.Hr8,0) + ISNULL(mdh.Hr9,0) + ISNULL(mdh.Hr10,0) + ISNULL(mdh.Hr11,0) + ISNULL(mdh.Hr12,0) + ISNULL(mdh.Hr13,0) + ISNULL(mdh.Hr14,0) + ISNULL(mdh.Hr15,0) + 
 						ISNULL(mdh.Hr16,0) + ISNULL(mdh.Hr17,0) + ISNULL(mdh.Hr18,0) + ISNULL(mdh.Hr19,0) + ISNULL(mdh.Hr20,0) + ISNULL(mdh.Hr21,0) + ISNULL(mdh.Hr22,0) + 
 						ISNULL(mdh.Hr23,0) + ISNULL(mdh.Hr24,0) ) vol_sum, meter_data_id
 					FROM mv90_data_hour mdh GROUP BY mdh.meter_data_id
 				) mdv
 				INNER JOIN mv90_data mv ON mv.meter_data_id = mdv.meter_data_id
 				INNER JOIN #temp_summary_daily t ON t.meter_id = mv.meter_id
 			   ')
 
 		-- logic to import aggregate_to_meter as defined in group_meter_mapping
 
 		EXEC('
 		UPDATE md SET md.volume = meter_agg.agg_volume 
 		FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 				INNER JOIN
 				(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, md.from_date, SUM(md.volume) agg_volume
 					FROM group_meter_mapping gmm2 
 					INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 					GROUP BY gmm2.aggregate_to_meter, md.from_date
 				) meter_agg ON meter_agg.agg_meter_id = md.meter_id
 					AND meter_agg.from_date = md.from_date
 		WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 			INSERT INTO mv90_data (meter_id, gen_date, from_date, to_date, channel, volume, uom_id, descriptions)
 			SELECT gmm.aggregate_to_meter, MAX(md.gen_date) gen_date, md.from_date, MAX(md.to_date) to_date, MAX(md.channel) channel, SUM(md.volume) volume, MAX(md.uom_id) uom_id, MAX(md.descriptions) descriptions
 			FROM mv90_data md 
 				INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 				INNER JOIN ' + @temp_header_table + ' h ON h.meter_id = mi.recorderid
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				LEFT JOIN mv90_data md2 ON md2.meter_id = gmm.aggregate_to_meter
 					AND md2.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND md2.meter_id IS NULL AND gmm.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm.aggregate_to_meter, md.from_date	
 		')
 
 		EXEC('
 			UPDATE mdh SET mdh.Hr1 = meter_agg.agg_volume_hr1, mdh.Hr2 = meter_agg.agg_volume_hr2, mdh.Hr3 = meter_agg.agg_volume_hr3, 
 					   mdh.Hr4 = meter_agg.agg_volume_hr4, mdh.Hr5 = meter_agg.agg_volume_hr5, mdh.Hr6 = meter_agg.agg_volume_hr6, 
 					   mdh.Hr7 = meter_agg.agg_volume_hr7, mdh.Hr8 = meter_agg.agg_volume_hr8, mdh.Hr9 = meter_agg.agg_volume_hr9, 
 					   mdh.Hr10 = meter_agg.agg_volume_hr10, mdh.Hr11 = meter_agg.agg_volume_hr11, mdh.Hr12 = meter_agg.agg_volume_hr12, 
 					   mdh.Hr13 = meter_agg.agg_volume_hr13, mdh.Hr14 = meter_agg.agg_volume_hr14, mdh.Hr15 = meter_agg.agg_volume_hr15, 
 					   mdh.Hr16 = meter_agg.agg_volume_hr16, mdh.Hr17 = meter_agg.agg_volume_hr17, mdh.Hr18 = meter_agg.agg_volume_hr18, 
 					   mdh.Hr19 = meter_agg.agg_volume_hr19, mdh.Hr20 = meter_agg.agg_volume_hr20, mdh.Hr21 = meter_agg.agg_volume_hr21, 
 					   mdh.Hr22 = meter_agg.agg_volume_hr22, mdh.Hr23 = meter_agg.agg_volume_hr23, mdh.Hr24 = meter_agg.agg_volume_hr24, 
 					   mdh.Hr25 = meter_agg.agg_volume_hr25
 			FROM ' + @temp_header_table + ' h 
 					INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 					INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 					INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 					INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					INNER JOIN
 					(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, mdh.prod_date, 
 						SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 						SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 						SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 						SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 						SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 						SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 						SUM(mdh.Hr25) agg_volume_hr25
 					FROM group_meter_mapping gmm2 
 						INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 						INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 					--ORDER BY gmm2.aggregate_to_meter, prod_date
 					) meter_agg ON meter_agg.agg_meter_id = md.meter_id	AND meter_agg.prod_date = mdh.prod_date
 			WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 		INSERT INTO mv90_data_hour(meter_data_id, prod_date, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13, 
 								Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)					
 		--  SELECT gmm2.aggregate_to_meter, mdh.prod_date
 		SELECT MAX(md_agg.meter_data_id) meter_data_id, mdh.prod_date,
 		  SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 		  SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 		  SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 		  SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 		  SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 		  SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 		  SUM(mdh.Hr25) agg_volume_hr25
 		  , MAX(md_agg.uom_id) uom_id  
 		FROM (
 				SELECT DISTINCT gmm.aggregate_to_meter
 				FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				WHERE h.error_code = ''0''
 			) gmm_agg
 			INNER JOIN group_meter_mapping gmm2 ON gmm2.aggregate_to_meter = gmm_agg.aggregate_to_meter
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 			INNER JOIN mv90_data md_agg ON md_agg.meter_id = gmm2.aggregate_to_meter
 				AND md_agg.from_date = md.from_date
 			LEFT JOIN mv90_data_hour mdh_old ON mdh_old.meter_data_id = md_agg.meter_data_id
 				AND mdh_old.prod_date = mdh.prod_date
 		WHERE 1 = 1
 			AND mdh_old.recid IS NULL
 		GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 		')
 	END
 	
 	SET @error_code = 's'  
 	IF EXISTS(SELECT * FROM #tmp_missing_meter_id)
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 		SELECT @process_id, 'Error', 'Import Data', @table_name, 'Data Error', 'Meter ID: ' + meter_id + ' not found in the system.', '', @rules_names
 		FROM #tmp_missing_meter_id
 		SET @error_code = 'e'
 	END 
END
 
IF @table_name = 'ixp_holiday_calendar_template' -- import rule for Holiday and Expiration
BEGIN
	/***update user date to sql date***/
	
	EXEC('UPDATE a
		  SET hol_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.hol_date = dd.user_date
	')	
	
	EXEC('UPDATE a
		  SET exp_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
		  ON a.exp_date = dd.user_date
	')	

	EXEC('UPDATE a
		  SET hol_date_to = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
		  ON a.hol_date_to = dd.user_date
	')		/***END OF date update***/

	-- Field description is mandatory for Holiday Calendar Definition but optional for Expiration Calendar Definition.
	EXEC ('
		UPDATE a
			SET a.description = ISNULL(a.hol_group_value_id, '' '')
		FROM ' + @import_temp_table_name + ' a
		WHERE a.description IS NULL
	')
 	EXEC ('DELETE ' + @field_compare_table)
 	SET @source_table = @import_temp_table_name
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a' 
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''holiday_group'', ''description'', ''description'')')
		
	EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a ON  es.temp_id = a.temp_id  
        LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
    ') 

	---- Validation For Date From lesser than Date To
	EXEC(' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
		SELECT a.temp_id, 
			10019,
			''
				{
					"column_name1": "'' + scmh.source_column_name + ''",
					"column_value1": "'' + a.hol_date + ''",
					"column_name2": "'' + scmhd.source_column_name + ''",
					"column_value2": "''+ a.hol_date_to +''"
				}
			'',
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a 
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''hol_date'' 
          ) scmh
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''hol_date_to'' 
          ) scmhd
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE a.hol_date  > a.hol_date_to
			AND #import_status.temp_id IS NULL
	')
	
 	-- static data insertion if new 
 	CREATE TABLE #temp_holiday_groups (holiday_group_name NVARCHAR(500) COLLATE DATABASE_DEFAULT)
 	EXEC('INSERT INTO #temp_holiday_groups
 		  SELECT DISTINCT hol_group_value_id
 		  FROM ' + @import_temp_table_name + ' a
 		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
 		  WHERE  #error_status.temp_id IS NULL
 	')
 	
 	IF EXISTS(SELECT 1 FROM #temp_holiday_groups)
 	BEGIN
		EXEC('
			DECLARE @calender_type_id INT
			SELECT @calender_type_id = [type_id] FROM static_data_type WHERE [type_name] = ''Calendar''
 
			DECLARE @cal_code AS NVARCHAR(20) = ''''
			SELECT @cal_code = CASE WHEN t.exp_date IS NOT NULL THEN ''Expiration'' ELSE ''Holiday'' END  
			FROM ( SELECT MAX(exp_date) exp_date FROM ' + @import_temp_table_name + ' ) t

 			INSERT INTO static_data_value ([type_id], code, [description], category_id)
 			SELECT @calender_type_id,
 				   temp_hol.holiday_group_name,
 						temp_hol.holiday_group_name,
 						sdv2.value_id
 			FROM #temp_holiday_groups temp_hol
 			LEFT JOIN static_data_value sdv ON sdv.code = temp_hol.holiday_group_name AND sdv.[type_id] = @calender_type_id
 				LEFT JOIN static_data_value sdv2 ON sdv2.code = @cal_code AND sdv2.[type_id] = 38700
 			WHERE sdv.value_id IS NULL
		')
 	END
 	
 	DECLARE @calendar_type_id INT
	SELECT @calendar_type_id = [type_id] FROM static_data_type WHERE [type_name] = 'Calendar'
 	
	IF OBJECT_ID('tempdb..#inserted_holiday_group') IS NOT NULL
		DROP TABLE #inserted_holiday_group 

	CREATE TABLE #inserted_holiday_group (hol_group_value_id INT)

 	EXEC('UPDATE holiday_group
 	      SET    hol_group_value_id = sdv.value_id,
 	             hol_date = a.hol_date,
 	             [description] = a.[description],
 	             exp_date = a.exp_date,
 	             settlement_date = a.settlement_date,
 	             hol_date_to = a.hol_date_to
		  --OUTPUT DELETED.hol_group_value_id, INSERTED.hol_group_value_id INTO #updated_holiday_group (hol_group_value_id_d, hol_group_value_id_i)	
		  OUTPUT INSERTED.hol_group_value_id INTO #inserted_holiday_group (hol_group_value_id)	
 	      FROM   ' + @import_temp_table_name + ' a
          INNER JOIN static_data_value sdv ON  sdv.code = a.hol_group_value_id AND sdv.type_id = ' + @calendar_type_id + '
          INNER JOIN holiday_group hg
              ON  hg.hol_group_value_id = sdv.value_id
              AND hg.hol_date = a.hol_date
              AND COALESCE(CONVERT(NVARCHAR(10), dbo.FNADateFormat(hg.exp_date), 120), ''1'') = COALESCE(CONVERT(NVARCHAR(10), dbo.FNADateFormat(a.exp_date), 120), ''1'')
          LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
 	      WHERE  #error_status.temp_id IS NULL	
 	')

 	EXEC(' INSERT INTO holiday_group (hol_group_value_id, hol_date, [description], exp_date, settlement_date, hol_date_to
		   ) OUTPUT INSERTED.hol_group_value_id INTO #inserted_holiday_group (hol_group_value_id)	
 		   SELECT sdv.value_id, a.hol_date, a.[description], a.exp_date, a.settlement_date, a.hol_date_to 
 		   FROM  ' + @import_temp_table_name + ' a
 		   INNER JOIN static_data_value sdv ON  sdv.code = a.hol_group_value_id AND sdv.type_id = ' + @calendar_type_id + '
 		   LEFT JOIN holiday_group hg
                ON  hg.hol_group_value_id = sdv.value_id
                AND hg.hol_date = a.hol_date
                AND COALESCE(CONVERT(NVARCHAR(10), dbo.FNADateFormat(hg.exp_date), 120), ''1'') = COALESCE(CONVERT(NVARCHAR(10), dbo.FNADateFormat(a.exp_date), 120), ''1'')
           LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
 	       WHERE  #error_status.temp_id IS NULL AND hg.hol_group_value_id IS NULL 		
 	')	

	DECLARE @hol_group_value_ids NVARCHAR(100) --to pass effective hol_group_value_id for position calculation

	SELECT TOP 1 @hol_group_value_ids = STUFF((SELECT ', ' + CAST(hol_group_value_id AS NVARCHAR(20))
					   FROM #inserted_holiday_group b 					   
					   GROUP BY hol_group_value_id
					   FOR XML PATH('')), 1, 2, '')	 
	FROM #inserted_holiday_group a
	GROUP BY hol_group_value_id	

	
	--TO DO: reverted as to break dependency. Need to be continued
		
	--EXEC spa_get_break_deal @flag = 'hourly block', @calendar_id = @hol_group_value_ids 
 	
END

IF @table_name = 'ixp_expiration_calendar_template' -- import rule for Holiday and Expiration
BEGIN
		/***update user date to sql date***/
	
	EXEC('UPDATE a
		  SET delivery_period = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.delivery_period = dd.user_date
	')
	EXEC('UPDATE a
		  SET expiration_from = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.expiration_from = dd.user_date
	')
	EXEC('UPDATE a
		  SET expiration_to = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.expiration_to = dd.user_date
	')
	

	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a' 

	---- Validation For Expiration From lesser than Expiration to
	EXEC(' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name) 
		SELECT a.temp_id, 
			10019,
			''
				{
					"column_name1": "'' + scmef.source_column_name + ''",
					"column_value1": "'' + a.expiration_from + ''",
					"column_name2": "'' + scmet.source_column_name + ''",
					"column_value2": "''+ a.expiration_to +''"
				}
			'',
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''expiration_from'' 
          ) scmef
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''expiration_to'' 
          ) scmet
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE a.expiration_from  > a.expiration_to
			AND #import_status.temp_id IS NULL
	') 

	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10013,
			''
			{
				"column_name": "'' + scm.source_column_name + ''", 
				"column_value": "'' + a.holiday_calendar + ''"
			}
			'',
			a.import_file_name
		FROM  ' + @import_temp_table_name + ' a
		CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''holiday_calendar'' 
          ) scm
		LEFT JOIN static_data_value sdv 
			ON sdv.code = a.holiday_calendar 
			AND sdv.category_id = 38700 
			AND sdv.[type_id] = 10017
		WHERE sdv.value_id IS NULL
		
	')
	
	EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a ON  es.temp_id = a.temp_id  
        LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
		')

	--PRINT 8
	IF OBJECT_ID('tempdb..#temp_holiday_groups_datas') IS NOT NULL
		DROP TABLE #temp_holiday_groups_datas

	CREATE TABLE #temp_holiday_groups_datas (holiday_group_name NVARCHAR(500) COLLATE DATABASE_DEFAULT)

	EXEC ('
		INSERT INTO #temp_holiday_groups_datas
 		SELECT DISTINCT expiration_calendar hol_group_value_id
 		FROM ' + @import_temp_table_name + ' a
 		LEFT JOIN #import_status 
			ON a.temp_id = #import_status.temp_id
 		WHERE #import_status.temp_id IS NULL
	')

	--PRINT 9
	IF EXISTS (
		SELECT 1
		FROM #temp_holiday_groups_datas
	)
	BEGIN
		EXEC ('
		DECLARE @calender_type_id INT
		SELECT @calender_type_id = [type_id] FROM static_data_type WHERE [type_name] = ''Calendar''
 
 		INSERT INTO static_data_value ([type_id], code, [description], category_id)
 		SELECT @calender_type_id,
 				temp_hol.holiday_group_name,
 					temp_hol.holiday_group_name,
 					sdv2.value_id
 		FROM #temp_holiday_groups_datas temp_hol
 		LEFT JOIN static_data_value sdv ON sdv.code = temp_hol.holiday_group_name AND sdv.[type_id] = @calender_type_id
 			LEFT JOIN static_data_value sdv2 ON sdv2.code = ''Expiration'' AND sdv2.[type_id] = 38700
 		WHERE sdv.value_id IS NULL
 	')
	END

	EXEC (
			'MERGE expiration_calendar AS ec
	USING (
		SELECT 
			sdv.value_id [calendar_id]
			,sdv2.value_id [holiday_calendar_id]
			,delivery_period [delivery_period]
			,expiration_from expiration_from
			,expiration_to expiration_to
		FROM ' + @import_temp_table_name + 
			' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.expiration_calendar AND sdv.[type_id] = 10017
		LEFT JOIN static_data_value sdv2 ON sdv2.code = a.holiday_calendar AND sdv2.category_id = 38700 AND sdv2.[type_id] = 10017
		) tec
		ON ec.[calendar_id] = tec.[calendar_id]
			AND ec.[delivery_period] = tec.[delivery_period]
			AND ec.[expiration_from] = tec.[expiration_from]
			AND ec.[expiration_to] = tec.[expiration_to]
			AND ec.[holiday_calendar] = tec.[holiday_calendar_id]
	WHEN NOT MATCHED BY TARGET
		THEN
			INSERT (
				calendar_id
				,holiday_calendar
				,delivery_period
				,expiration_from
				,expiration_to
				)
			VALUES (
				tec.[calendar_id]
				,tec.holiday_calendar_id
				,tec.delivery_period
				,tec.expiration_from
				,tec.expiration_to
				)
	WHEN MATCHED
		THEN
			UPDATE
			SET holiday_calendar = tec.[holiday_calendar_id]
				,delivery_period = tec.delivery_period
				,expiration_from = tec.expiration_from
				,expiration_to = tec.expiration_to;'
			)

	EXEC (
			'
	DECLARE @time_zone_id NVARCHAR(100),@weekend_first_day TINYINT,@weekend_second_day TINYINT
			
	SELECT @time_zone_id=var_value   --26
	FROM dbo.adiha_default_codes_values(nolock)
	WHERE instance_no = 1 AND default_code_id = 36 AND seq_no = 1
	--select @time_zone_id

	SELECT @weekend_first_day = ISNULL(NULLIF(weekend_first_day,''''),1), @weekend_second_day = ISNULL(NULLIF(weekend_second_day,''''),7)
	FROM time_zones WHERE TIMEZONE_ID = @time_zone_id

	-- insert data into holiday calendar
	;WITH CTE
	AS (
		SELECT sdv.value_id expiration_calendar
			,sdv2.value_id holiday_calendar
			,delivery_period
			,CAST(expiration_from AS DATETIME) expiration_from
			,CAST(expiration_to AS DATETIME) expiration_to
			,DATEADD(s, - 1, DATEADD(mm, DATEDIFF(m, 0, delivery_period) + 1, 0)) last_day_of_month
		FROM ' + @import_temp_table_name + 
			' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.expiration_calendar AND sdv.[type_id] = 10017
		LEFT JOIN static_data_value sdv2 ON sdv2.code = a.holiday_calendar AND sdv2.category_id = 38700 AND sdv2.[type_id] = 10017
		UNION ALL
		SELECT expiration_calendar
			,holiday_calendar
			,delivery_period
			,DATEADD(day, 1, expiration_from) expiration_from
			,expiration_to
			,DATEADD(s, - 1, DATEADD(mm, DATEDIFF(m, 0, delivery_period) + 1, 0)) last_day_of_month
		FROM CTE
		WHERE expiration_from < expiration_to
		)
	SELECT b.*
	INTO #temp_finilized_data
	FROM CTE b
	LEFT JOIN holiday_group hg ON hg.hol_date = b.expiration_from
		AND hg.hol_group_value_id = holiday_calendar
	WHERE hg.hol_date IS NULL
		AND (
			(DATEPART(dw, expiration_from)) <> @weekend_first_day
			AND DATEPART(dw, expiration_from) <> @weekend_second_day
			)
	ORDER BY expiration_from
	OPTION (MAXRECURSION 0)

	MERGE holiday_group AS hb
	USING (
		SELECT *
		FROM #temp_finilized_data
		) tfd
		ON hb.hol_group_value_id = tfd.expiration_calendar
			AND tfd.delivery_period = hb.hol_date
			AND tfd.expiration_from = hb.exp_date
	WHEN NOT MATCHED BY TARGET
		THEN
			INSERT (
				hol_group_value_id
				,hol_date
				,exp_date
				,hol_date_to
				)
			VALUES (
				tfd.expiration_calendar
				,tfd.delivery_period
				,tfd.expiration_from
				,tfd.last_day_of_month
				)
	WHEN MATCHED
		THEN
			UPDATE
			SET hol_date = tfd.delivery_period
				,exp_date = tfd.expiration_from
				,hol_date_to = tfd.last_day_of_month;'
			)
END
 
IF @table_name IN ('ixp_source_deal_detail_hour_template', 'ixp_source_deal_detail_15min_template')
BEGIN
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET term_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.term_date = dd.user_date
	')
	/***END OF date update***/

	EXEC('DELETE ' + @field_compare_table)
	
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''hr1'',''hr'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail_hour'',''period'',''minute'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail_hour'',''Is_dst'',''Is_dst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail_hour'',''Price'',''Price'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'',''Leg'',''Leg'')')
			
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	--Validation for empty value for hour/minute for 5 min,10 min, 15 min, 30 min and hourly meter id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
			     CASE 
					WHEN a.hr IS NULL AND a.minute IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + '', '' + scmm.source_column_name + ''"}''
					WHEN a.hr IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + ''"}''
					WHEN a.minute IS NULL THEN ''{"column_name": "'' + scmm.source_column_name + ''"}''
				 END,
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''hr'' -- ixp_columns_name
		  ) scmh
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''minute'' -- ixp_columns_name
		  ) scmm
		  INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND (
				  (a.hr IS NULL AND ISNULL(sdh.granularity_id, sdh.profile_granularity) IN (994, 987, 989, 995, 982))
				  OR
				  (a.minute IS NULL AND ISNULL(sdh.granularity_id, sdh.profile_granularity) IN (994, 987, 989, 995))
			  )
	')

	--Validation for empty value for volume, schedule_volume and actual_volume
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
			     ''{"column_name": "'' + scm_v.source_column_name + '', '' + scm_sv.source_column_name + '', '' + scm_av.source_column_name + ''"}''
				 ,
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''volume'' -- ixp_columns_name
		  ) scm_v
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''schedule_volume'' -- ixp_columns_name
		  ) scm_sv
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''actual_volume'' -- ixp_columns_name
		  ) scm_av
		  WHERE COALESCE(a.volume, a.schedule_volume, a.actual_volume) IS NULL
	')

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10016,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.is_dst + ''"
			  }'',
		      a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id 
		  INNER JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id
				AND a.term_date BETWEEN sdd.term_start AND sdd.term_end
				AND sdd.leg = a.leg
		  LEFT JOIN source_price_curve_def spcd ON spcd.source_curve_def_id = sdd.curve_id
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''is_dst'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  OUTER APPLY(SELECT  md.id
					FROM adiha_default_codes_values adcv
					INNER JOIN time_zones tz 
						ON tz.timezone_id = adcv.var_value
					INNER JOIN mv90_dst md
						ON md.dst_group_value_id = tz.dst_group_value_id
					WHERE adcv.default_code_id = 36
						AND a.term_date = CASE
							WHEN spcd.commodity_id = -1 
								THEN DATEADD(DAY,-1,md.date) 
							ELSE md.date 
							END
						AND a.hr = CASE 
							WHEN spcd.commodity_id = -1 
								THEN IIF(ISNULL(a.minute, '''') = 0 ,md.hour, md.hour - 1) + 18
							ELSE IIF(ISNULL(a.minute, '''') = 0 ,md.hour, md.hour - 1) 
							END
		  ) dst
		  WHERE #error_status.temp_id IS NULL
		      AND (a.is_dst NOT IN (0, 1)
					OR (dst.id is null and a.is_dst <> 0)
			  )
 	')
	
	--Trigger Start
	IF OBJECT_ID(N'tempdb..#temp_table_shaped') IS NOT NULL    
	DROP TABLE #temp_table_shaped
	
	CREATE TABLE #temp_table_shaped (
		[deal_id] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[term_date] NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		[hr] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[minute] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[is_dst] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[Volume] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[actual_volume] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[schedule_volume] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[Price] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[Leg] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[import_file_name] NVARCHAR(500) COLLATE DATABASE_DEFAULT,
		[granularity] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[source_system_id] NVARCHAR(10) COLLATE DATABASE_DEFAULT
	)
	
	EXEC('INSERT INTO #temp_table_shaped ([deal_id], [term_date], [hr], [minute],[is_dst], [Volume], [actual_volume], [schedule_volume], [Price], [Leg], [import_file_name], [source_system_id])
		  SELECT a.[deal_id], a.[term_date], a.[hr], a.[minute], a.[is_dst], a.[Volume], a.[actual_volume], a.[schedule_volume], a.[Price], a.[Leg], a.[import_file_name], a.[source_system_id]
		  FROM ' + @import_temp_table_name + ' a 
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
 		  WHERE #error_status.temp_id IS NULL
	')

	UPDATE t
	SET granularity = 
		CASE 
		WHEN sdh.profile_granularity = 994 THEN '10'
			WHEN sdh.profile_granularity = 987 THEN '15'
			WHEN sdh.profile_granularity = 989 THEN '30'
			WHEN sdh.profile_granularity = 995 THEN '5'
			WHEN sdh.profile_granularity = 993 THEN 'Annually'
			WHEN sdh.profile_granularity = 982 THEN 'Hourly'
			WHEN sdh.profile_granularity = 980 THEN 'Monthly'
			WHEN sdh.profile_granularity = 981 THEN 'Daily'
		END
	FROM #temp_table_shaped t
	LEFT JOIN source_deal_header sdh
		ON sdh.deal_id = t.[deal_id]

	UPDATE t
	SET hr = IIF(LEN(((hr*60 + minute)- granularity)/60) =1 , '0' + CAST(((hr*60 + minute)- granularity)/60 AS NVARCHAR(10)), CAST(((hr*60 + minute)- granularity)/60 AS NVARCHAR(10))) + ':' + 
		SUBSTRING('000'+ CAST(((hr*60 + minute) - granularity)%60  AS NVARCHAR(11)), LEN('000'+ CAST(((hr*60 + minute) - granularity)%60  AS NVARCHAR(11)))-1 , 15)
	FROM #temp_table_shaped t
	WHERE granularity IN ('5','10','15', '30')
	
	UPDATE t
	SET hr = IIF(LEN(t.[hr] - 1) = 2, CAST(t.[hr] - 1 AS NVARCHAR(10)), '0' + CAST(t.[hr] - 1 AS NVARCHAR(10))) + ':00'
	FROM #temp_table_shaped t
	WHERE granularity IN ('Hourly')
	
	UPDATE t
	SET hr = '00:00'
	FROM #temp_table_shaped t
	WHERE granularity IN ('Daily')

	EXEC('DELETE FROM ' + @import_temp_table_name)
	
	EXEC('INSERT INTO ' + @import_temp_table_name + ' ([deal_id], [term_date], [hr], [minute], [is_dst], [Volume], [actual_volume], [schedule_volume], [Price], [Leg], [import_file_name], [source_system_id])
		  SELECT [deal_id], [term_date], 
			  CASE WHEN CHARINDEX('':'', [hr])<0 THEN CAST([hr] AS NVARCHAR(20)) + '':00'' 
			       ELSE [hr] 
			  END [hr], 
		      [minute],
			  [is_dst],
			  [Volume],
			  [actual_volume],
			  [schedule_volume],
			  [Price],
			  [Leg],
			  [import_file_name],
			  [source_system_id]
		FROM #temp_table_shaped
	')
	--Trigger End	
	
 	IF OBJECT_ID('tempdb..#tmp_unique_deals') IS NOT NULL
 		DROP TABLE #tmp_unique_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_missing_deals') IS NOT NULL
 		DROP TABLE #tmp_missing_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_non_shaped_deals') IS NOT NULL
 		DROP TABLE #tmp_non_shaped_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_hour_block_term') IS NOT NULL
 	    DROP TABLE #tmp_hour_block_term
 	    
 	IF OBJECT_ID('tempdb..#tmp_invalid_deals') IS NOT NULL
 	    DROP TABLE #tmp_invalid_deals
 	 
 	 IF OBJECT_ID('tempdb..#hour_block_term') IS NOT NULL
 	    DROP TABLE #hour_block_term

 	IF OBJECT_ID('tempdb..#tmp_second_table') IS NOT NULL
 		DROP TABLE #tmp_second_table
 		
 	CREATE TABLE #tmp_second_table (
 		[source_deal_header_id]  INT,
 		[deal_id]                NVARCHAR(150) COLLATE DATABASE_DEFAULT,
 		[deal_detail_id]         INT,
 		[leg]                    INT,
 		[term_date]				 DATETIME,
 		hr						 NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 		[volume]                 FLOAT,
 		[price]                  FLOAT,
 		import_file_name         NVARCHAR(200) COLLATE DATABASE_DEFAULT,
 		[has_error]              BIT,
		[schedule_volume]        FLOAT,
 		[actual_volume]          FLOAT,
		[is_dst]				 BIT
 	)
 
 	--copy all data from staging table to second one
 	SET @sql = 'INSERT INTO #tmp_second_table(deal_id, source_deal_header_id, leg, [term_date], [hr], volume, price, [import_file_name], [schedule_volume], [actual_volume], is_dst)
 				SELECT a.deal_id,
 				       NULL,
 				       ISNULL(a.leg, 1) leg,
 				       CAST(a.term_date AS NVARCHAR(20)),
 				       CAST(a.[hr] AS NVARCHAR) [hr],
 				       a.volume  volume,
 				       CAST(a.price AS NUMERIC(38, 20)) price,
 				       a.import_file_name,
					   a.schedule_volume  volume,
					   a.actual_volume  volume,
					   a.is_dst
 				FROM  ' + @import_temp_table_name + ' a
				LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id 
				WHERE #error_status.temp_id IS NULL'
 	
 	--PRINT @sql
 	EXEC (@sql)
 	
	CREATE NONCLUSTERED INDEX ix_pt_tmp1 ON #tmp_second_table(deal_id, source_deal_header_id, deal_detail_id) INCLUDE(leg, term_date, hr)
	
	--PRINT '7'
 	SELECT @min_date = MIN(term_date), @max_date = MAX(term_date)
 	FROM #tmp_second_table
 	
 	SET @baseload_block_type = '12000'	-- Internal Static Data

	SELECT @baseload_block_define_id = CAST(value_id AS NVARCHAR(10))
 	FROM static_data_value 
 	WHERE [type_id] = 10018
 		AND code LIKE 'Base Load' -- External Static Data
 		
 	IF @baseload_block_define_id IS NULL
 		SET @baseload_block_define_id = 'NULL'
  	
 	-- @start_ts selected from create_ts when the job was run by  spa_interface_adaptor_job
 	SELECT @start_ts = ISNULL(MIN(create_ts),GETDATE()) FROM import_data_files_audit WHERE process_id = @process_id
 	
 	SET @sql = 'UPDATE ' + @import_temp_table_name + ' SET hr = 3 WHERE hr = ''3B'''  
 	EXEC (@sql)  
 	  
 	SET @sql = 'UPDATE ' + @import_temp_table_name + ' SET price = NULL WHERE price = ''0''' 
 	EXEC (@sql)
 	
 	--store unique deal_ids whose source_deal_header_id is not given
 	CREATE TABLE #tmp_unique_deals (
 		source_deal_header_id  INT,
 		deal_id NVARCHAR(100) COLLATE DATABASE_DEFAULT
 	)
 	
 	--insert unique deal_ids to map to its source_deal_header_id
 	INSERT INTO #tmp_unique_deals(source_deal_header_id, deal_id)
 	SELECT sdh.source_deal_header_id, tst.deal_id
 	FROM #tmp_second_table tst
 	LEFT JOIN source_deal_header sdh ON  tst.deal_id = sdh.deal_id
 	WHERE  tst.source_deal_header_id IS NULL AND tst.deal_id IS NOT NULL
	GROUP BY tst.deal_id, sdh.source_deal_header_id

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TUD ON #tmp_unique_deals (source_deal_header_id, deal_id)
	 	
 	--update source_deal_header_id for those whose deal_id is given in file, but not source_deal_header_id
 	--After updating, source_deal_header_id won't have NULL values in #tmp_second_table, but deal_id may be NULL
 	UPDATE tst 
 	SET tst.source_deal_header_id = tud.source_deal_header_id
 	FROM #tmp_second_table tst
 	LEFT JOIN #tmp_unique_deals tud ON  tst.deal_id = tud.deal_id
 	WHERE  tst.source_deal_header_id IS NULL AND tst.deal_id IS NOT NULL
 	
 	--PRINT 'update source_deal_header_id for those whose deal_id is given in file'
 	
 	--get deal_detail_id for all records
 	UPDATE tst
	SET tst.deal_detail_id = sdd.source_deal_detail_id
 	FROM #tmp_second_table tst
     INNER JOIN source_deal_detail sdd
         ON  tst.source_deal_header_id = sdd.source_deal_header_id
		AND tst.term_date BETWEEN sdd.term_start AND sdd.term_end
		AND ISNULL(tst.leg, 1) = sdd.leg
 	
 	--PRINT ('10')            
 	CREATE TABLE #tmp_missing_deals (
 		source_deal_header_id  INT ,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 	
 	CREATE TABLE #tmp_invalid_deals (
 		source_deal_header_id  INT ,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		term_date              DATETIME,
 		leg                    INT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 	
 	CREATE TABLE #tmp_non_shaped_deals (
 		source_deal_header_id  INT,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 
 	INSERT INTO #tmp_missing_deals (source_deal_header_id, deal_id, import_file_name)
 	SELECT tmp.source_deal_header_id, MAX(tmp.deal_id) deal_id, MAX(tmp.import_file_name) import_file_name
 	FROM #tmp_second_table tmp
 	LEFT JOIN source_deal_header sdh ON sdh.source_deal_header_id = tmp.source_deal_header_id
 	WHERE sdh.source_deal_header_id IS NULL AND sdh.deal_id IS NULL
 	GROUP BY tmp.source_deal_header_id
	
	 	--PRINT 'Data INSERTED INTO #tmp_missing_deals'
 	
 	-- get data mismatched deals (i.e. deals having non existing term or leg)
 	INSERT INTO #tmp_invalid_deals (source_deal_header_id,
 		deal_id,
 		term_date,
 		leg,
 		import_file_name
	)
 	SELECT tmp.source_deal_header_id,
 	       MAX(tmp.deal_id) deal_id,
 	       tmp.term_date,
 	       tmp.leg,
 	       MAX(tmp.import_file_name) import_file_name
 	FROM   #tmp_second_table tmp
 	WHERE  tmp.deal_detail_id IS NULL
 	       AND NOT EXISTS (
 	               SELECT 1
 	               FROM   #tmp_missing_deals
 	               WHERE  deal_id = tmp.deal_id) --exclude missing deals in this check
 	      AND (tmp.source_deal_header_id IS NOT NULL AND tmp.deal_id IS NOT NULL)
 	 GROUP BY tmp.source_deal_header_id, tmp.term_date, tmp.leg 
	 
	--PRINT 'Data INSERTED INTO #tmp_invalid_deals ' 
 	--PRINT ('12')
 		
     --get non shaped deals, as those deals won't be imported
 	INSERT INTO #tmp_non_shaped_deals(source_deal_header_id, deal_id, import_file_name)
 	SELECT tst.source_deal_header_id, MAX(tst.deal_id) deal_id, MAX(tst.import_file_name) import_file_name
 	FROM #tmp_second_table tst
 	INNER JOIN source_deal_header sdh ON tst.source_deal_header_id = sdh.source_deal_header_id
 	LEFT JOIN static_data_value sdv ON sdv.value_id = sdh.internal_desk_id
 	WHERE ISNULL(sdv.value_id, -1) NOT IN  (17302, 17300)
 	GROUP BY tst.source_deal_header_id
	
	--PRINT 'Data INSERTED INTO #tmp_non_shaped_deals '
 	
 		--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	 --     SELECT NULL,
 		--	 '''+ @process_id+''',
 		--	 ''Error'',
 		--	 ''Import Data'',
 		--	 '''+@table_name+''',
 		--	 ''Data Error'',
 		--	 ''Data error for deal id :'' + ISNULL(tmp.deal_id, ''NULL'') + '' is not present in system '',
 		--	 ''Please CHECK your Data'',
 		--	 tmp.import_file_name
 	 --     FROM  #tmp_missing_deals tmp ')
 	      
 	 -- validation for non existent static data validation of deal_id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT NULL,
			  10002,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + tmp.deal_id + ''"
			  }'',
 			  tmp.import_file_name
 	      FROM #tmp_missing_deals tmp
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''deal_id'' -- ixp_columns_name
		  ) scm
	')
 	      
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	      SELECT NULL,
			  10012,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + tmp.deal_id + ''",
				  "column_name1": "Shaped Deal",
				  "column_name2": "Deal Ref ID"
			  }'',
 			  tmp.import_file_name
 	      FROM #tmp_non_shaped_deals tmp
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''deal_id'' -- ixp_columns_name
		  ) scm
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT NULL,
		      10012,
			  ''{
				  "column_name": "Deal Ref ID",
				  "column_value": "'' + tmp.deal_id + ''",
				  "column_name1": "Valid Shaped Deal",
				  "column_name2": "Terms and Leg"
			  }'',
 			  tmp.import_file_name
 	      FROM #tmp_invalid_deals tmp
 	      INNER JOIN #tmp_second_table tmp_sec ON tmp.source_deal_header_id = tmp_sec.source_deal_header_id
 			  AND tmp_sec.term_date = tmp.term_date
 			  AND tmp_sec.leg = tmp.leg
	')

	--delete missing deals, non shaped deals and invalid deals from #tmp_invalid_deals for invalid deal ID
	EXEC('DELETE t
		  FROM #tmp_second_table t
		  LEFT JOIN #tmp_missing_deals m ON m.deal_id = t.deal_id
		  LEFT JOIN #tmp_non_shaped_deals ns ON ns.deal_id = t.deal_id
		  LEFT JOIN #tmp_invalid_deals i ON i.deal_id = t.deal_id
			  AND i.term_date = t.term_date
			  AND i.leg = t.leg
		  WHERE m.deal_id IS NOT NULL
			  OR ns.deal_id IS NOT NULL
		      OR i.deal_id IS NOT NULL
 	')

	--delete missing deals, non shaped deals and invalid deals from @import_temp_table_name for Invalid deal ID
	EXEC('DELETE t
		  FROM ' + @import_temp_table_name + ' t 			  
		  LEFT JOIN #tmp_missing_deals m ON m.deal_id = t.deal_id
		  LEFT JOIN #tmp_non_shaped_deals ns ON ns.deal_id = t.deal_id
		  LEFT JOIN #tmp_invalid_deals i ON i.deal_id = t.deal_id
			  AND i.term_date = t.term_date
			  AND i.leg = t.leg
		  WHERE m.deal_id IS NOT NULL
			  OR ns.deal_id IS NOT NULL
			  OR i.deal_id IS NOT NULL
 	')
 
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 		  INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')
  	
 	-- delete missing deals from staging table      
 	DELETE tmp
 	FROM   #tmp_second_table tmp
 	INNER JOIN #tmp_missing_deals tmd ON tmd.source_deal_header_id = tmp.source_deal_header_id
 	
 	-- delete non-shaped deals from staging table
 	DELETE tmp
 	FROM   #tmp_second_table tmp
     INNER JOIN #tmp_non_shaped_deals tnsd ON  tnsd.source_deal_header_id = tmp.source_deal_header_id
 	
 	--PRINT 'DELETE ERRORNEOUS DEALS'
 	-- delete errorneous deals
 	DELETE tmp
 	FROM #tmp_second_table tmp
    INNER JOIN #tmp_invalid_deals tid ON tmp.source_deal_header_id = tid.source_deal_header_id
 		AND tid.term_date = tmp.term_date
 		AND tid.leg = tmp.leg
 		 
 	--DELETE source_deal_detail_hour
 	--FROM source_deal_detail_hour sddh
  --  INNER JOIN #tmp_second_table t ON sddh.source_deal_detail_id = t.deal_detail_id
 	 
 	--PRINT 'delete invalid deal deals'           
     --copy the required portion of holiday_term_block for performance reasons		
 	CREATE TABLE #tmp_hour_block_term (
 		block_define_id   INT,
 		block_type        INT,
 		term_date         DATETIME,
 		hol_date          DATETIME,
 		term_start        DATETIME,
 		volume_mult       INT,
 		dst_applies       NVARCHAR(1) COLLATE DATABASE_DEFAULT,
 		add_dst_hour      INT,
 		on_peak_off_peak  INT,
 		[hour]            NVARCHAR(100) COLLATE DATABASE_DEFAULT
 	)
     	
     --PRINT ('13')
    
     --SELECT * INTO #hour_block_term FROM hour_block_term WHERE term_date BETWEEN @min_date AND @max_date 
 	SELECT hbt.* 
 	INTO #hour_block_term 
	FROM  hour_block_term hbt
 	INNER JOIN (
             SELECT DISTINCT COALESCE(spcd.block_type, sdh.block_type, @baseload_block_type)
                    block_type,
                    COALESCE(
                        spcd.block_define_id,
                        sdh.block_define_id,
                        @baseload_block_define_id
                    ) block_define_id,tz.dst_group_value_id
             FROM #tmp_second_table tst
             INNER JOIN source_deal_detail sdd ON tst.deal_detail_id = sdd.source_deal_detail_id
			 INNER JOIN vwDealTimezone tz on tz.source_deal_header_id = sdd.source_deal_header_id
				AND tz.curve_id = ISNULL(sdd.curve_id, -1)
				AND tz.location_id = ISNULL(sdd.location_id, -1)
             INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
             LEFT JOIN source_price_curve_def spcd ON  spcd.source_curve_def_id = sdd.curve_id
     ) sdd ON hbt.block_type = sdd.block_type AND hbt.block_define_id = sdd.block_define_id
	 AND hbt.dst_group_value_id = sdd.dst_group_value_id
    WHERE term_date BETWEEN @min_date AND @max_date 
     
 	--PRINT ('14')
 	CREATE NONCLUSTERED INDEX IX_TERM_DATE_HBT ON #hour_block_term (term_date)
	 	
 	INSERT INTO #tmp_hour_block_term(block_define_id, block_type, term_date, hol_date, term_start, volume_mult, dst_applies, add_dst_hour, on_peak_off_peak, [hour])
 	SELECT block_define_id,
 		   block_type,
 		   term_date,
 		   hol_date,
 		   term_start,
 		   volume_mult,
 		   dst_applies,
 		   add_dst_hour,
 		   on_peak_off_peak,
 		   REPLACE(hr, 'hr', '') [hour]
 	FROM   (
 			SELECT DISTINCT hb.block_define_id, hb.block_type, hb.term_date, hb.hol_date, hb.term_start, hb.volume_mult
 				, hb.dst_applies, hb.add_dst_hour, hb.Hr1, hb.Hr2, hb.Hr3, hb.Hr4, hb.Hr5, hb.Hr6, hb.Hr7, hb.Hr8, hb.Hr9
 				, hb.Hr10, hb.Hr11, hb.Hr12, hb.Hr13, hb.Hr14, hb.Hr15, hb.Hr16, hb.Hr17, hb.Hr18, hb.Hr19, hb.Hr20, hb.Hr21
 				, hb.Hr22, hb.Hr23, hb.Hr24 
 			FROM #tmp_second_table tst
 			INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = tst.source_deal_header_id
 			INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tst.deal_detail_id
 					AND sdd.source_deal_header_id = sdh.source_deal_header_id					

 			INNER JOIN #hour_block_term hb ON hb.term_date = tst.term_date 
 			WHERE hb.term_date BETWEEN @min_date AND @max_date
 		   ) hbt
 		   UNPIVOT(
 			   on_peak_off_peak FOR [hr] IN (Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, 
 											  Hr7, Hr8, Hr9, Hr10, Hr11, 
 											  Hr12, Hr13, Hr14, Hr15, Hr16, 
 											  Hr17, Hr18, Hr19, Hr20, Hr21, 
 											  Hr22, Hr23, Hr24)
 		   ) AS unpivot_hour
 	--PRINT ('15')
 	
     --insert new hourly data for each source_deal_detail_id
     --PRINT 'Data INSERTED INTO source_deal_detail_hour' 
    
	CREATE NONCLUSTERED INDEX IX_PT_TMP_THBT ON #tmp_hour_block_term(hour, term_date) INCLUDE(block_type, block_define_id, on_peak_off_peak)
	
	IF OBJECT_ID('tempdb..#sdh_temp') IS NOT NULL
		DROP TABLE #sdh_temp 
	
	IF OBJECT_ID('tempdb..#sdd_temp') IS NOT NULL
		DROP TABLE #sdd_temp 
		
	IF OBJECT_ID('tempdb..#spcd') IS NOT NULL
		DROP TABLE #spcd 
		
	SELECT sdh.source_deal_header_id
		, sdh.deal_id
		, MAX(sdh.internal_desk_id) internal_desk_id
		, MAX(sdh.profile_granularity) profile_granularity
		, MAX(sdh.block_define_id) block_define_id
		, MAX(sdh.block_type) block_type
		, MAX(template_id) template_id
		INTO #sdh_temp
	FROM source_deal_header sdh 
	INNER JOIN #tmp_second_table tst ON  
		1 = 1 
		--AND sdh.deal_id = tst.[deal_id] 
		AND sdh.source_deal_header_id = tst.source_deal_header_id
	GROUP BY sdh.source_deal_header_id, sdh.deal_id
	

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #sdh_temp (source_deal_header_id) INCLUDE(block_type, block_define_id, template_id)

	SELECT sdd.source_deal_header_id, sdd.source_deal_detail_id, MAX(sdd.curve_id) curve_id
		INTO #sdd_temp
	FROM source_deal_detail sdd 
	INNER JOIN #sdh_temp sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
	GROUP BY sdd.source_deal_header_id, sdd.source_deal_detail_id
	
	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #sdd_temp (source_deal_header_id, source_deal_detail_id) INCLUDE(curve_id)

	SELECT MAX(spcd.block_type) block_type, MAX(spcd.block_define_id) block_define_id, spcd.source_curve_def_id, sdd.source_deal_detail_id
		INTO #spcd
	FROM source_price_curve_def spcd 
	INNER JOIN #sdd_temp sdd ON sdd.curve_id = spcd.source_curve_def_id
	GROUP BY sdd.source_deal_detail_id, spcd.source_curve_def_id

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #spcd (source_curve_def_id) INCLUDE(block_define_id, block_type)

	IF OBJECT_ID('tempdb..#temp_source_deal_detail_hour_data') IS NOT NULL
		DROP TABLE #temp_source_deal_detail_hour_data 

	--select * from #tmp_second_table tst
	--select * from #sdh_temp 
	
	SELECT sdd.source_deal_detail_id,
 			tst.[term_date], --date in MMDDYYYY format
 			CASE WHEN @table_name = 'ixp_source_deal_detail_15min_template' THEN
 				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 			ELSE tst.[hr] END [hr],
 			MAX(CAST(tst.volume AS NUMERIC(16,8))) volume, 
 			MAX(CAST(tst.price AS NUMERIC(16,8))) price,
			tst.is_dst,
 			MAX(IIF(sdh.internal_desk_id=17300,NULL,COALESCE(sdh.profile_granularity, sdht.profile_granularity, sdht.hourly_position_breakdown, 982))) granularity,
			MAX(CAST(tst.schedule_volume AS NUMERIC(16,8))) schedule_volume,
			MAX(CAST(tst.actual_volume AS NUMERIC(16,8))) actual_volume
		INTO #temp_source_deal_detail_hour_data
 	FROM #tmp_second_table tst
 	INNER JOIN #sdh_temp sdh ON  1 = 1 
		--AND sdh.deal_id = tst.[deal_id]
 		AND sdh.source_deal_header_id = tst.source_deal_header_id
 	INNER JOIN #sdd_temp sdd ON  sdd.source_deal_detail_id = tst.deal_detail_id
 		AND sdd.source_deal_header_id = sdh.source_deal_header_id
 	INNER JOIN #spcd spcd ON spcd.source_curve_def_id = sdd.curve_id
		AND sdd.source_deal_detail_id = spcd.source_deal_detail_id
	INNER JOIN source_deal_header_template sdht ON sdh.template_id = sdht.template_id
	INNER JOIN source_deal_detail_template sddt ON sdht.template_id = sddt.template_id
 	LEFT JOIN #tmp_hour_block_term thbt 
 		ON thbt.hour = CASE WHEN @table_name = 'ixp_source_deal_detail_15min_template' then LEFT(tst.hr, CHARINDEX(':', tst.hr)-1) + 1 ELSE tst.hr END
 		AND  thbt.term_date = tst.term_date 
 		AND thbt.block_type =  COALESCE(spcd.block_type, sdh.block_type, @baseload_block_type )
 		AND thbt.block_define_id = COALESCE(spcd.block_define_id,
 											sdh.block_define_id,
 											@baseload_block_define_id )
 	LEFT JOIN source_deal_detail_hour sddh ON  sddh.source_deal_detail_id = tst.deal_detail_id
 		AND sddh.hr = CASE WHEN @table_name = 'ixp_source_deal_detail_15min_template' THEN
 				   				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 					  ELSE tst.[hr] END
		AND sddh.term_date = tst.term_date
	GROUP BY sdd.source_deal_detail_id,
 			tst.[term_date], CASE WHEN @table_name = 'ixp_source_deal_detail_15min_template' THEN
 				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 			ELSE tst.[hr] END, tst.is_dst
		 
	-- merge insert an update	 
	MERGE source_deal_detail_hour AS sddh
	USING (SELECT source_deal_detail_id	
			, term_date	
			, hr	
			, volume	
			, price	
			, is_dst	
			, granularity	
			, schedule_volume	
			, actual_volume
		FROM #temp_source_deal_detail_hour_data) AS tsddh
	ON sddh.source_deal_detail_id = tsddh.source_deal_detail_id
		AND sddh.term_date	= tsddh.term_date	
		AND sddh.[hr]		= tsddh.[hr]		
		AND sddh.is_dst		= tsddh.is_dst		 
	WHEN MATCHED THEN 
		UPDATE SET 
			 sddh.volume			= tsddh.volume			
			, sddh.price			= tsddh.price			
			, sddh.is_dst			= tsddh.is_dst			
			, sddh.granularity		= tsddh.granularity		
			, sddh.schedule_volume	= tsddh.schedule_volume	
			, sddh.actual_volume	= tsddh.actual_volume	
	WHEN NOT MATCHED THEN
		INSERT(source_deal_detail_id, term_date, hr, volume, price, is_dst, granularity, schedule_volume, actual_volume)
		VALUES(tsddh.source_deal_detail_id, tsddh.term_date, tsddh.hr, tsddh.volume, tsddh.price, tsddh.is_dst, tsddh.granularity, tsddh.schedule_volume, tsddh.actual_volume);
	      	  
     /*******************************************Update total monthly volume and price START********************************************************/
 	DECLARE @vol_frequency  NCHAR(1),
 	        @deal_volume    NUMERIC(38, 20),
 	        @price          NUMERIC(38, 20)
 	
 	CREATE TABLE #tmp_deal_volume(
 		average_vol  NUMERIC(38, 20),
 		sum_vol      NUMERIC(38, 20)
 	)
 	
 	SELECT @vol_frequency = sdd.deal_volume_frequency
 	FROM   #tmp_second_table tst
 	INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tst.deal_detail_id
	INNER JOIN #sdd_temp sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
	 
 	
 	UPDATE sdd
 	SET deal_volume = IIF(sum_sddh.internal_desk_id=17300, sdd.deal_volume, sum_sddh.deal_volume), sdd.deal_volume_frequency = sdd.deal_volume_frequency
 	FROM source_deal_detail sdd
	INNER JOIN #sdd_temp sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
 	INNER JOIN (SELECT tst.deal_detail_id,(AVG(sddh.volume)) deal_volume, MAX(tst.internal_desk_id) internal_desk_id
 				FROM  (SELECT deal_detail_id, MAX(sdh.internal_desk_id) internal_desk_id
 	                    FROM   #tmp_second_table tst1
						INNER JOIN #sdh_temp st ON st.source_deal_header_id = tst1.source_deal_header_id
						INNER JOIN source_deal_header sdh ON tst1.source_deal_header_id = sdh.source_deal_header_id
						GROUP BY sdh.source_deal_header_id, deal_detail_id
 						) tst
 	                INNER JOIN source_deal_detail_hour sddh
 	                ON  tst.deal_detail_id = sddh.source_deal_detail_id
 				GROUP BY deal_detail_id
 			) sum_sddh
 		ON  sum_sddh.deal_detail_id = sdd.source_deal_detail_id
      
     --PRINT 'dealvolume'	
 	IF NOT EXISTS (SELECT 'x' FROM #tmp_second_table WHERE  price IS NULL)
 	BEGIN
 	    UPDATE sdd
 	    SET   fixed_price = IIF(sum_sddh.internal_desk_id=17300,sdd.fixed_price,sum_sddh.fixed_price)
 	    FROM  source_deal_detail sdd
		INNER JOIN #sdd_temp sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
 	    INNER JOIN (SELECT deal_detail_id, MAX(sdh.internal_desk_id) internal_desk_id, (SUM(volume)) deal_volume
						, SUM(volume * price) / ISNULL(NULLIF(SUM(volume), 0), 1) [fixed_price]
 					FROM   #tmp_second_table tst1
					INNER JOIN #sdh_temp st ON st.source_deal_header_id = tst1.source_deal_header_id
					INNER JOIN source_deal_header sdh ON tst1.source_deal_header_id=sdh.source_deal_header_id
 	                GROUP BY deal_detail_id
 					) sum_sddh
 			ON sum_sddh.deal_detail_id = sdd.source_deal_detail_id
 	END

	------------------------------Update Actual Volume, schedule_volume
	UPDATE sdd 
	SET sdd.actual_volume = a.actual_volume,
		sdd.schedule_volume = a.schedule_volume		
	FROM source_deal_detail sdd 
	INNER JOIN #sdd_temp sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
	INNER JOIN (
		SELECT AVG(sddh.actual_volume) actual_volume,  AVG(sddh.schedule_volume) schedule_volume, sub_sdd.source_deal_detail_id source_deal_detail_id
		FROM source_deal_detail_hour sddh
		INNER JOIN #sdd_temp sub_sdd ON sub_sdd.source_deal_detail_id = sddh.source_deal_detail_id
 		GROUP BY sub_sdd.source_deal_detail_id
	) a
	ON a.source_deal_detail_id = sdd.source_deal_detail_id 
		AND sdd.source_deal_detail_id = sub_sdd.source_deal_detail_id
 	
 	DECLARE @report_position_deals4 NVARCHAR(300), @process_id4 NVARCHAR(300),@pos_job_name4 NVARCHAR(600)
 	SET @process_id4 = REPLACE(newid(),'-','_')
 	SET @report_position_deals4 = dbo.FNAProcessTableName('report_position', @user_login_id, @process_id4)
 	
 	EXEC ('CREATE TABLE ' + @report_position_deals4 + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT,source_deal_detail_id int)')
 	SET @sql = 'INSERT INTO ' + @report_position_deals4 + '(source_deal_header_id,action,source_deal_detail_id) 
 				SELECT distinct  t.source_deal_header_id, ''i'',t.deal_detail_id
 				FROM #tmp_second_table t
  		       '
 	EXEC(@sql)
 	
 	SET @pos_job_name4 =  'calc_position_breakdown_' + @process_id4
 	EXEC spa_update_deal_total_volume NULL, @process_id4, 0,1,@user_login_id

	--[TO DO]: Removed because this is called from Deal Transfer adjust alert
	----insert into process table for spa_transfer adjust call from post trigger in complex gas gas hour shaped import(enercity demo)
	--DECLARE @spa_transfer_adjust_process NVARCHAR(100)
	--SET @spa_transfer_adjust_process = dbo.FNAProcessTableName('spa_transfer_adjust', @user_login_id, @process_id)
	
	--EXEC ('CREATE TABLE ' + @spa_transfer_adjust_process + '(source_deal_header_id INT)')
	--SET @sql = 'INSERT INTO ' + @spa_transfer_adjust_process + '(source_deal_header_id) 
 --				SELECT  t.source_deal_header_id
 --				FROM #sdh_temp t
 -- 		        GROUP BY t.source_deal_header_id'
 --	EXEC(@sql)
END
 
IF @table_name = 'ixp_monthly_allocation_data_template'
BEGIN
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @import_temp_table_name)
 	        
 	--PRINT('***total no of data***')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + a.[hour] + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT [meter_id],[channel],[date],[hour], COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY [meter_id],[channel],[date],[hour]
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.[meter_id] = b.[meter_id] AND a.[channel] = b.[channel] AND a.[date] = b.[date] AND a.[hour] = b.[hour]')
 	
 	--PRINT('***duplicate data***')	
 	
 	BEGIN TRY	
 		IF @drilldown_level = 1
 		BEGIN
 			EXEC ('INSERT INTO #tmp_staging_table([meter_id],[channel],[date],[hour],[value]) 
 					SELECT [meter_id], ISNULL([channel],1), [dbo].[FNAClientToSqlDate]([date]), [hour], [value] 
 					FROM ' + @import_temp_table_name)
 		END
 		
 		ELSE IF @drilldown_level = 2
 		BEGIN
 			EXEC ('INSERT INTO #tmp_staging_table SELECT [meter_id], ISNULL([channel],1), [dbo].[FNAClientToSqlDate]([date]), [hour], [value], [h_filename], [h_error], [d_filename], [d_error] FROM ' + @import_temp_table_name)
 		END	
 
 		UPDATE t SET HOUR = SUBSTRING(HOUR, 1,CHARINDEX(':', HOUR)-1) FROM #tmp_staging_table t WHERE HOUR LIKE '%:%'
 		SET @error_code = 's'
 	END TRY
 	BEGIN CATCH	
 		SET @error_msg = 'Error: ' + ERROR_MESSAGE()
 		SET @error_code = 'e'
 		--PRINT @error_msg
 		
 		INSERT INTO source_system_data_import_status (
 			process_id,
 			code,
 			MODULE,
 			[source],
 			[TYPE],
 			[description],
 			recommendation,
 			rules_name
 		  )
 		  EXEC (
 				 'SELECT DISTINCT ' 
 					 + '''' + @process_id + '''' + ',' 
 					 + '''Error'''  + ',' 
 					 + '''Import Allocation Data(Monthly)''' + ',' 
 					 + '''' + @table_name + '''' + ',' 
 					 +  '''Error''' + ',' 
 					 + '''' + @error_msg + '''' + ',' + 
 					 '''Please check if the date format provided matches the Users Date format.''' + ',' 
 					 + '''' + @rules_names + '''' + 
 				 ' FROM ' + @import_temp_table_name
 		  )
 		
 		SELECT @url_desc = './dev/spa_html.php?__user_name__=' + @user_login_id +
 						   '&spa=exec spa_get_import_process_status ''' + @process_id + ''',''' 
 						   + @user_login_id + ''''
 		
 		SELECT @desc = '<a target="_blank" href="' + @url_desc + '">' +
 					   'Allocation data import process completed' +
 					   CASE 
 							WHEN (@error_code = 'e') THEN ' (ERRORS found)'
 							ELSE ''
 					   END +  ' </a>'
 				IF NOT EXISTS  (SELECT error_message_id from ixp_import_data_source iids
								INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id  
								WHERE rules_id = @rules_id)
				BEGIN
 		EXEC spa_NotificationUserByRole 2, @process_id, 'Import Allocation Data(Monthly)', @desc , @error_code, @job_name, 1	
 				END
 		RETURN
 	END CATCH 
 
 	-- missing meter logic is only valid for import except in Ebase Interface(In Ebase missing meter is handled in Adaptor level)
 	INSERT INTO #tmp_missing_meter_id (meter_id)
 	SELECT	DISTINCT tmp.meter_id
 	FROM #tmp_staging_table tmp
 	LEFT JOIN meter_id mi
 		ON mi.recorderid = tmp.meter_id
 	WHERE mi.recorderid IS NULL
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for [meter_id] :'' + ISNULL(a.[meter_id], ''NULL'') + '' [date] : '' + a.[date] + '' [hour] : '' + a.[hour] + '' (Meter ID: '' + a.meter_id + '' not found in the system.)'',
 				 ''Please CHECK your Data'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN #tmp_missing_meter_id b
 		  ON  a.[meter_id] = b.[meter_id]')
 
 	-- insert data into mv90_data summary table
 	SELECT	mi.meter_id [meter_id],
 			dbo.FNAGETContractmonth(a.date) gen_date,
 			dbo.FNAGETContractmonth(a.date) from_date,
 			DATEADD(MONTH,1,dbo.FNAGETContractmonth(a.date))-1 to_date,
 			a.channel,
 			SUM(Convert(numeric(38,20),VALUE )) volume
 	INTO [#temp_summary2]
 	FROM [#tmp_staging_table] a
 	INNER JOIN meter_id mi ON mi.recorderid = a.meter_id
 	GROUP BY mi.meter_id, a.channel,dbo.FNAGETContractmonth(a.date),DATEADD(MONTH,1,dbo.FNAGETContractmonth(a.date))-1	
 
 	-- Delete the Data if  exists	
 	DELETE	md
 	FROM	[mv90_data] md
 			INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 			INNER JOIN [#temp_summary2] ts
 				ON mi.meter_id = ts.meter_id  --ON md.[meter_id] = mi.meter_id --ts.[recorderid]
 				AND md.[channel] = ts.[channel]
 				AND [dbo].[FNAgetcontractmonth](md.[from_date]) = [dbo].[FNAgetcontractmonth](ts.[from_date])
 	
 	IF @drilldown_level = 1
 	BEGIN
 		INSERT INTO [mv90_data] (meter_id, gen_date, from_date, to_date,channel, volume,uom_id )
 		SELECT meter_id, gen_date, from_date, to_date, channel, volume, 0
 		FROM [#temp_summary2]
 		--PRINT 'insert mv90_data'
 	END	
 	
 	CREATE TABLE #inserted_monthly_data (meter_id INT)
 	
 	IF @drilldown_level = 2
 	BEGIN
 		-- insert if doesn't exists	
 		EXEC ('INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id )
 				OUTPUT inserted.meter_id INTO #inserted_monthly_data
 				SELECT	mi.meter_id, ts.gen_date, ts.from_date, ts.to_date, ts.channel, ABS(ts.volume), su.source_uom_id
 				FROM	[#temp_summary2] ts 
 				INNER JOIN meter_id mi ON mi.recorderid = ts.meter_id 
 				INNER JOIN (
 					SELECT DISTINCT meter_id, uom FROM ' + @temp_header_table +  '
 					UNION
 					SELECT DISTINCT mi_sub.recorderid [meter_id], h_sub.uom [uom] FROM ' + @temp_header_table  +  ' h_sub
 					INNER JOIN meter_id mi ON mi.recorderid = h_sub.meter_id
 					INNER JOIN meter_id mi_sub ON mi_sub.meter_id = mi.sub_meter_id
 					INNER JOIN #temp_summary2 ts ON ts.recorderid = mi_sub.recorderid
 					WHERE ts.volume < 0		
 				) h ON h.meter_id = mi.recorderid 
 				INNER JOIN source_uom su ON su.uom_id = h.uom 
 				WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name  + ')  
 				AND mv.meter_id IS NULL '
 	     )		
 	
 		-- update only vol if exists		
 		-- logic to import aggregate_to_meter as defined in group_meter_mapping
 		EXEC('
 		UPDATE md SET md.volume = meter_agg.agg_volume 
 		FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 				INNER JOIN
 				(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, md.from_date, SUM(md.volume) agg_volume
 					FROM group_meter_mapping gmm2 
 					INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 					GROUP BY gmm2.aggregate_to_meter, md.from_date
 				) meter_agg ON meter_agg.agg_meter_id = md.meter_id
 					AND meter_agg.from_date = md.from_date
 		WHERE h.error_code = ''0'' ')
 		
 	
 		EXEC('
 			INSERT INTO mv90_data (meter_id, gen_date, from_date, to_date, channel, volume, uom_id, descriptions)
 			SELECT gmm.aggregate_to_meter, MAX(md.gen_date) gen_date, md.from_date, MAX(md.to_date) to_date, MAX(md.channel) channel, SUM(md.volume) volume, MAX(md.uom_id) uom_id, MAX(md.descriptions) descriptions
 			FROM mv90_data md 
 				INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 				INNER JOIN ' + @temp_header_table + ' h ON h.meter_id = mi.recorderid
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				LEFT JOIN mv90_data md2 ON md2.meter_id = gmm.aggregate_to_meter
 					AND md2.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND md2.meter_id IS NULL AND gmm.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm.aggregate_to_meter, md.from_date')
 		
 	END
 	
 	SET @error_code = 's'  
 	IF EXISTS(SELECT * FROM #tmp_missing_meter_id)
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 		SELECT @process_id, 'Error', 'Import Data', @table_name, 'Data Error', 'Meter ID: ' + meter_id + ' not found in the system.', '', @rules_names
 		FROM #tmp_missing_meter_id
 		SET @error_code = 'e'
 	END 
END
 
IF @table_name = 'ixp_curve_correlation_template'
BEGIN
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET as_of_date = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.as_of_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET term1 = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.term1 = dd.user_date
	')

	EXEC('UPDATE a
		  SET term2 = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.term2 = dd.user_date
	')
	/***END OF date update***/	

 	EXEC ('DELETE ' + @field_compare_table)
 		
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_correlation'',''as_of_date'',''as_of_date'')')
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_correlation'',''term1'',''term1'')')
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_correlation'',''term2'',''term2'')')
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_correlation'',''value'',''value'')')
 			
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name
 	
 	--check data validation
 	EXEC(' INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					 '''+ @process_id+''',
 					 ''Error'',
 					 ''Import Data'',
 					 '''+ @table_name+''',
 					 ''Data Error'',
 					 ''Data error for As of Date: :'' + ISNULL(a.as_of_date, ''NULL'') + '' [CurveId From] : '' + a.curve_id_from + '' CurveId To:'' + a.[curve_id_to] + ''Term1:'' + a.Term1 + ''Term2: '' + a.Term2 + ''Curve Source ValueId:'' + a.curve_source_value_id +'' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 					 ''Please CHECK your Data'',
 					 a.import_file_name
 			  FROM ' + @import_temp_table_name + ' a
 			  INNER JOIN (SELECT as_of_date,
 									curve_id_from,
 									curve_id_to,
 									term1,
 									term2,
 									curve_source_value_id,
 									COUNT(*) notimes
 							 FROM   '+ @import_temp_table_name +'
 							 GROUP BY
 									as_of_date,
 									curve_id_from,
 									curve_id_to,
 									term1,
 									term2,
 									curve_source_value_id
 							 HAVING COUNT(*) > 1
 						 ) b 
 				ON a.as_of_date = b.as_of_date AND a.curve_id_from = b.curve_id_from AND a.curve_id_to = b.curve_id_to 
 				AND a.term1 = b.term1 AND a.term2 = b.term2 AND a.curve_source_value_id = b.curve_source_value_id')
 				
 	--Check for Foreign key validation		
 	EXEC(' INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Data error for CurveId From: '' + ISNULL(a.curve_id_from, ''CurveId From is'') + '' not found in system. Please add Curve id in the system and Import again.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status on a.temp_id = #import_status.temp_id
 			LEFT JOIN source_price_curve_def spcd on a.curve_id_from = spcd.curve_id
 			WHERE #import_status.temp_id IS NULL AND spcd.source_curve_def_id IS NULL')
 
 	EXEC(' INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Data error for CurveId To: '' + ISNULL(a.curve_id_to, ''CurveId To is'') + '' not found in system. Please add Curve id in the system and Import again.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status on a.temp_id = #import_status.temp_id
 			LEFT JOIN source_price_curve_def spcd1 on a.curve_id_to = spcd1.curve_id
 			WHERE #import_status.temp_id IS NULL AND spcd1.source_curve_def_id IS NULL')
 			
 			
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Date error for Source Curve Value Id: Source Curve Value Is NULL.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			LEFT JOIN static_data_value c ON c.code = a.curve_source_value_id
 			WHERE #import_status.temp_id IS NULL AND c.value_id IS NULL')
 	--TODO: not null check
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Date error for As Of Date: asofdate Is NULL.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.as_of_date IS NULL')	
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Date error for Term1: Term1 Is NULL.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.term1 IS NULL')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Date error for Term2: term2 Is NULL.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.term2 IS NULL')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 				'''+ @process_id+''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name+''',
 				''Data Error'',
 				''Date error for Value: value Is NULL.'',
 				''Please CHECK your Data'',
 				a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.value IS NULL')
 					
 	-- delete from temp table all the invalid data
 	EXEC('DELETE '+@import_temp_table_name + ' 
 	      FROM #import_status 
 	      INNER JOIN '+@import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')
 
 	 ---Update  actual table from temp table
 	SET @sql = 'UPDATE curve_correlation
 				SET    as_of_date = ISNULL(b.as_of_date, cc.as_of_date),
 						curve_id_from = ISNULL(spcd.source_curve_def_id, cc.curve_id_from),
 						curve_id_to = ISNULL(spcd1.source_curve_def_id, cc.curve_id_to),
 						term1 = ISNULL(b.term1, cc.term1),
 						term2 = ISNULL(b.term2, cc.term2),
 						curve_source_value_id = ISNULL(sdv.value_id, cc.curve_source_value_id),
 						[value] = ISNULL(b.[value], cc.[value]),
 						vol_cor_header_id = ISNULL(b.vol_cor_header_id, cc.vol_cor_header_id)
 				FROM ' + @import_temp_table_name + ' b
 				INNER JOIN static_data_value sdv ON sdv.code = b.curve_source_value_id AND sdv.type_id = 10007
 				INNER JOIN source_price_curve_def spcd ON  b.curve_id_from = spcd.curve_id
 				INNER JOIN source_price_curve_def spcd1 ON  b.curve_id_to = spcd1.curve_id
 				INNER JOIN curve_correlation cc 
 					ON  cc.curve_source_value_id = sdv.value_id
 					AND cc.as_of_date = b.as_of_date 
 					AND cc.curve_id_from = spcd.source_curve_def_id
 					AND cc.curve_id_to = spcd1.source_curve_def_id 
 					AND cc.term1 = b.term1
 					AND cc.term2 = b.term2
 					--AND cc.vol_cor_header_id = b.vol_cor_header_id 
 				LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
 				WHERE  #import_status.temp_id IS NULL'
 	EXEC(@sql)
 	
 	--insert into actual table from temp table
 	SET @sql = 'INSERT INTO [dbo].[curve_correlation]([as_of_date], [curve_id_from], [curve_id_to], [term1], [term2], [curve_source_value_id], [value], [vol_cor_header_id])
 				SELECT a.[as_of_date],
 					   spcd.source_curve_def_id,
 					   spcd1.source_curve_def_id,
 					   a.[term1],
 					   a.[term2],
 					   c.value_id,
 					   a.[value],
 					   a.[vol_cor_header_id]
 				FROM   ' + @import_temp_table_name + ' a
 				INNER JOIN static_data_value c ON  a.[curve_source_value_id] = c.code AND c.type_id = 10007
 				INNER JOIN source_price_curve_def spcd ON  a.curve_id_from = spcd.curve_id
 				INNER JOIN source_price_curve_def spcd1 ON  a.curve_id_to = spcd1.curve_id
 				LEFT JOIN [curve_correlation] cc 
 					ON  cc.[curve_source_value_id] = C.VALUE_ID
 					AND cc.[term1] = a.[term1] 
 					AND cc.[term2] = a.[term2]
 					AND a.as_of_date = cc.as_of_date 
 					AND cc.curve_id_from = spcd.source_curve_def_id
 					AND cc.curve_id_to = spcd1.source_curve_def_id
 					--AND cc.vol_cor_header_id = a.vol_cor_header_id
 				LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL AND cc.curve_id_to IS NULL'
 	EXEC(@sql)	
END
 
IF @table_name = 'ixp_curve_volatility_template'
BEGIN	
	
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET as_of_date = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.as_of_date = dd.user_date
	')

	EXEC('UPDATE a
		  SET term = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.term = dd.user_date
	')
	/***END OF date update***/	
	
 	EXEC ('DELETE ' + @field_compare_table)
 		
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_volatility'',''as_of_date'',''as_of_date'')')
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_volatility'',''term'',''term'')')
 	EXEC('insert into '+@field_compare_table+ ' values (''curve_volatility'',''value'',''value'')')
 	 
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name
 	
 	--check data repetation
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for As of Date: :'' + ISNULL(a.as_of_date, ''NULL'') + '' [CurveId] : '' + a.curve_id+ '' Term:'' + a.Term + ''Curve Source ValueId:'' + a.curve_source_value_id + '' (Data Repetition Error, No of times:''+ cast(b.notimes as NVARCHAR)+'' )'',
 					''Please CHECK your Data'',
 			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			INNER JOIN (SELECT as_of_date,
 								  curve_id,
 								  term,
 								  curve_source_value_id,
 								  COUNT(*) notimes
 						   FROM   '+ @import_temp_table_name+'
 						   GROUP BY as_of_date, curve_id,term, curve_source_value_id
 						   HAVING COUNT(*) > 1
 					   ) b 
 					ON a.as_of_date = b.as_of_date AND a.curve_id = b.curve_id 
 					AND a.term = b.term AND a.curve_source_value_id = b.curve_source_value_id')
 				
 	--Check for Foreign key validation and insert into #import_status(temp_id,process_id,ErrorCode,Module,Source,type,[description],nextstep) table if any invalid data found
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Source Curve Value Id:Source Curve Value Id  IS NULL:'',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			LEFT JOIN static_data_value sdv ON a.curve_source_value_id = sdv.code
 			WHERE #import_status.temp_id IS NULL AND sdv.value_id IS NULL')
 			
 	--EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 	--		SELECT a.temp_id,
 	--				'''+ @process_id+''',
 	--				''Error'',
 	--				''Import Data'',
 	--				'''+ @table_name+''',
 	--				''Data Error'',
 	--				''Data error for Granualarity:Granualarity IS NULL :'',
 	--				''Please CHECK your Data'',
 	--				a.import_file_name
 	--		FROM ' + @import_temp_table_name + ' a
 	--		LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 	--		LEFT JOIN static_data_value b ON b.CODE = a.granularity 
 	--		AND b.type_id = 700 WHERE #import_status.temp_id IS NULL AND b.value_id IS NULL ')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for AS OF DATE:As of date IS NULL :'',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.as_of_date IS NULL ')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for AS OF DATE:As of date IS NULL :'',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.as_of_date IS NULL ')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Curve Id: '' + a.curve_id + '' is not present in system. '',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			LEFT JOIN source_price_curve_def spcd ON a.curve_id = spcd.curve_id
 			WHERE #import_status.temp_id IS NULL AND spcd.source_curve_def_id IS NULL')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Term: Term IS NULL:'',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.term IS NULL')
 	
 	EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Value: Value IS NULL:'',
 					''Please CHECK your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.value IS NULL')
 									
 	-- delete from temp table all the invalid data
 	EXEC('DELETE '+@import_temp_table_name + ' 
 	      FROM #import_status 
 		  INNER JOIN '+ @import_temp_table_name + ' a ON #import_status.temp_id=a.temp_id')
 
 	 ---Update  actual table from temp table
 	SET @sql = 'UPDATE curve_volatility
 				SET  as_of_date = ISNULL(a.as_of_date, cv.as_of_date),
 					 curve_id = ISNULL(spcd.source_curve_def_id, cv.curve_id),
 					 term = ISNULL(a.term, cv.term),
 					 curve_source_value_id = ISNULL(c.value_id, cv.curve_source_value_id),
 					 [value] = ISNULL(a.[value], cv.[value]),
 					 granularity = ISNULL(sdv.value_id, cv.granularity),
 					 vol_cor_header_id = ISNULL(a.vol_cor_header_id, cv.vol_cor_header_id),
 					 strike_price = ISNULL(a.strike_price, cv.strike_price)
 					 
 				FROM   '+@import_temp_table_name+' a
 				INNER JOIN static_data_value c  ON  c.code = a.curve_source_value_id AND c.type_id = 10007
 				INNER JOIN source_price_curve_def spcd ON  a.curve_id = spcd.curve_id
 				LEFT JOIN static_data_value sdv  ON  sdv.code = a.granularity  AND sdv.type_id = 700
 				INNER JOIN curve_volatility cv 			
 					ON  cv.curve_source_value_id = C.value_id
 					AND cv.as_of_date = a.as_of_date  
 					AND cv.curve_id = spcd.source_curve_def_id
 					AND cv.term = a.term
 				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 				WHERE  #import_status.temp_id IS NULL'
 	          
 	EXEC(@sql)
 	
 	--insert into actual table from temp table
 	SET @sql = 'INSERT INTO [dbo].[curve_volatility] ([as_of_date], [curve_id], [term], [curve_source_value_id], [value], [granularity], [vol_cor_header_id], [strike_price])
 				 SELECT a.[as_of_date]
 						,spcd.source_curve_def_id
 						,a.[term]
 						,c.value_id
 						,a.[value]
 						,sdv.value_id
 						, a.vol_cor_header_id
 						, a.strike_price
 				FROM '+ @import_temp_table_name +' a 
 				INNER JOIN static_data_value c ON a.[curve_source_value_id] = c.code AND c.type_id = 10007
 				LEFT JOIN static_data_value sdv ON a.[granularity] = sdv.code AND sdv.type_id = 700
 				INNER JOIN source_price_curve_def spcd ON a.curve_id = spcd.curve_id
 				LEFT JOIN [curve_volatility] cv 
 					ON cv.[curve_source_value_id] = C.value_id 
 					AND cv.[term] = a.[term] 
 					AND a.as_of_date = cv.as_of_date 
 					AND cv.curve_id = spcd.source_curve_def_id 
 				LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id 
 				WHERE #import_status.temp_id IS NULL AND cv.curve_id IS NULL '
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_static_data_value_template'
BEGIN
	
 	EXEC ('DELETE ' + @field_compare_table)
 		
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''static_data_value'', ''code'', ''code'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''static_data_value'', ''description'', ''description'')')
 	
 	SET @source_table = @import_temp_table_name	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'
	
 	-- Static Data Type Name
 	SET @sql = '
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 	    SELECT a.temp_id,
			10002,
			''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.type_id + ''"
			}'',
 			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name 
            FROM #source_file_column_table 
            WHERE ixp_columns_name = ''type_id'' -- ixp_columns_name
        ) scm
		LEFT JOIN static_data_type sdt 
			ON sdt.type_name = a.type_id 
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id
		WHERE  #error_status.temp_id IS NULL
			AND sdt.type_id IS NULL
	'
 	EXEC(@sql)
 
 	-- Delete from temp table all the invalid data
	EXEC('
		DELETE ' + @import_temp_table_name + '
		FROM #error_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt 
			ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	') 

 	-- Update the static_data_value if the code is already present	  
 	SET @sql = '
		UPDATE sdv
 	    SET code = a.code
 	        , [description] = ISNULL(a.[description], a.code)
			, entity_id = ph.entity_id
			, xref_value_id = a.xref_value_id
			, xref_value = a.xref_value
			, category_id = a.category_id
 	    FROM ' + @import_temp_table_name + ' a
        INNER JOIN static_data_type sdt 
			ON  sdt.[type_name] = a.[type_id]
        INNER JOIN static_data_value sdv 
			ON  sdt.[type_id] = sdv.[type_id] 
				AND sdv.code = a.code
		LEFT JOIN portfolio_hierarchy ph
			ON ph.entity_name = a.entity_id
        LEFT JOIN #import_status 
			ON a.temp_id = #import_status.temp_id
 	    WHERE  #import_status.temp_id IS NULL 
			AND sdv.value_id IS NOT NULL
	'
 	EXEC(@sql)
 	
 	--insert into static_data_value table from temp table
 	SET @sql = '
		INSERT INTO [dbo].[static_data_value] (
			[code]
			, [description]
			, [type_id]
			, entity_id
			, xref_value_id
			, xref_value
			, category_id
		)
 		SELECT a.code
 			, ISNULL(a.[description], a.code)
 			, sdt.[type_id]
 			, ph.entity_id 
 			, a.xref_value_id
 			, a.xref_value
 			, a.category_id
 		FROM ' + @import_temp_table_name + ' a 
 		INNER JOIN static_data_type sdt 
			ON  sdt.[type_name] = a.[type_id]
 		LEFT JOIN portfolio_hierarchy ph 
			ON ph.entity_name = a.entity_id
 		LEFT JOIN static_data_value sdv 
			ON sdv.[type_id] = sdt.[type_id] 
				AND sdv.code = a.code
 		LEFT JOIN #import_status 
			ON a.temp_id = #import_status.temp_id 
 		WHERE #import_status.temp_id IS NULL 
			AND sdv.value_id IS NULL 
	'
 	EXEC(@sql)	 
END
 
IF @table_name = 'ixp_counterparty_credit_info_template'
BEGIN

	/***update user date to sql date***/
	
	EXEC('UPDATE a
		  SET limit_expiration = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.limit_expiration = dd.user_date
	')

	EXEC('UPDATE a
		  SET date_established = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.date_established = dd.user_date
	')	

	EXEC('UPDATE a
		  SET next_review_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.next_review_date = dd.user_date
	')	

	EXEC('UPDATE a
		  SET last_review_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.last_review_date = dd.user_date
	')	

	EXEC('UPDATE a
		  SET customer_since = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.customer_since = dd.user_date
	')	
	/***END OF date update***/
 		
 	EXEC('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Ticker_Symbol'',''Ticker_Symbol'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Date_Established'',''Date_Established'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Next_review_date'',''Next_review_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Last_review_date'',''Last_review_date'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Customer_since'',''Customer_since'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''analyst'',''analyst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''exclude_exposure_after'',''exclude_exposure_after'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''buy_notional_month'',''buy_notional_month'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''sell_notional_month'',''sell_notional_month'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_info'',''Counterparty_id'',''Duns_No'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),
			(''source_currency'', ''curreny_code'', ''b.currency_id = a.curreny_code'', ''e''),
			(''static_data_value'', ''debt_rating'', ''b.code = a.debt_rating AND b.type_id = 10098'', ''e''),
			(''static_data_value'', ''account_status'', ''b.code = a.account_status AND b.type_id = 10082'', ''e''),
			(''static_data_value'', ''risk_rating'', ''b.code = a.risk_rating AND b.type_id = 10097'', ''e''),
			(''static_data_value'', ''Debt_rating2'', ''b.code = a.Debt_rating2 AND b.type_id = 11099'', ''w''),
			(''static_data_value'', ''Debt_rating3'', ''b.code = a.Debt_rating3 AND b.type_id = 11100'', ''w''),
			(''static_data_value'', ''Debt_rating4'', ''b.code = a.Debt_rating4 AND b.type_id = 11101'', ''w''),
			(''static_data_value'', ''Debt_rating5'', ''b.code = a.Debt_rating5 AND b.type_id = 11102'', ''w''),
			(''static_data_value'', ''Industry_type1'', ''b.code = a.Industry_type1 AND b.type_id = 10083'', ''w''),
			(''static_data_value'', ''Industry_type2'', ''b.code = a.Industry_type2 AND b.type_id = 10084'', ''w''),
			(''static_data_value'', ''SIC_Code'', ''b.code = a.SIC_Code AND b.type_id = 10096'', ''w''),
			(''static_data_value'', ''rating_outlook'', ''b.code = a.rating_outlook AND b.type_id = 104900'', ''w''),
			(''static_data_value'', ''qualitative_rating'', ''b.code = a.qualitative_rating AND b.type_id = 106000'', ''w''),
			(''application_users'', ''analyst'', ''b.user_f_name + '''' '''' + ISNULL(NULLIF(CONCAT(b.user_m_name, '''' ''''), '''' ''''), '''''''') + b.user_l_name = a.analyst'', ''w''),
			(''application_users'', ''approved_by'', ''b.user_f_name + '''' '''' + ISNULL(NULLIF(CONCAT(b.user_m_name, '''' ''''), '''' ''''), '''''''') + b.user_l_name = a.approved_by'', ''w'')
			
	')
		
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	--Validation for Watch_list
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.watch_list + ''"
			  }'',
			  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''watch_list'' -- ixp_columns_name
         ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.Watch_list NOT IN (''Yes'', ''No'', ''y'', ''n'')
 	')

	--Validation for Do not calculate Credit Exposure
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.check_apply + ''"
			  }'',
			  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''check_apply'' -- ixp_columns_name
         ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		  WHERE #error_status.temp_id IS NULL
			AND a.check_apply NOT IN (''Yes'', ''No'', ''y'', ''n'')
 	')

 	EXEC('DELETE a
 	      FROM #error_status 
 	      INNER JOIN ' + @import_temp_table_name + ' a ON #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')
	/*************END OF VALIDATION******************/
 
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
 				UPDATE cpi
 				SET
 				   Counterparty_id = sc2.source_counterparty_id, 
 				   account_status = sdv_account_status.value_id,
 				   limit_expiration = a.limit_expiration,
 				   credit_limit = a.credit_limit,
 				   curreny_code = sc.source_currency_id,
 				   Tenor_limit = a.Tenor_limit,
 				   Industry_type1 = sdv_industry_type_1.value_id,
 				   Industry_type2 = sdv_industry_type_2.value_id,
 				   SIC_Code = sdv_sic_code.value_id,
 				   Duns_No = a.Duns_No,
 				   Risk_rating = sdv_rating.value_id,
 				   Debt_rating = sdv_debt_rating.value_id,
 				   Ticker_symbol = a.Ticker_symbol,
 				   Date_established = a.Date_established,
 				   Next_review_date = a.Next_review_date,
 				   Last_review_date = a.Last_review_date,
 				   Customer_since = a.Customer_since,
 				   Approved_by = au_apby.user_login_id,
 				   Watch_list = CASE WHEN a.Watch_list IN (''Yes'', ''y'') THEN ''y'' ELSE ''n'' END,
 				   Settlement_contact_name = a.Settlement_contact_name,
 				   Settlement_contact_address = a.Settlement_contact_address,
 				   Settlement_contact_address2 = a.Settlement_contact_address2,
 				   Settlement_contact_phone = a.Settlement_contact_phone,
 				   Settlement_contact_email = a.Settlement_contact_email,
 				   payment_contact_name = a.payment_contact_name,
 				   payment_contact_address = a.payment_contact_address,
 				   contactfax = a.contactfax,
 				   payment_contact_phone = a.payment_contact_phone,
 				   payment_contact_email = a.payment_contact_email,
 				   Debt_Rating2 = sdv_debt_rating_2.value_id,
 				   Debt_Rating3 = sdv_debt_rating_3.value_id,
 				   Debt_Rating4 = sdv_debt_rating_4.value_id,
 				   Debt_Rating5 = sdv_debt_rating_5.value_id,
 				   credit_limit_from = a.credit_limit_from,
 				   payment_contact_address2 = a.payment_contact_address2,
 				   max_threshold = a.max_threshold,
 				   min_threshold = a.min_threshold,
 				   check_apply = CASE WHEN a.check_apply IN (''Yes'', ''y'') THEN ''y'' ELSE ''n'' END,
 				   cva_data = CASE a.cva_data
 									WHEN ''Primary Debt Rating'' THEN 1 
 									WHEN ''Debt Rating2'' THEN 2
 									WHEN ''Debt Rating3'' THEN 3
 									WHEN ''Debt Rating4'' THEN 4
 									WHEN ''Debt Rating5'' THEN 5
 									WHEN ''Risk Rating'' THEN 6
 									WHEN ''Counterparty Default Values'' THEN  7
 									WHEN ''Counterparty Credit Spread'' THEN 8
 							  END,
 				   pfe_criteria = vmcd.id,
 				   exclude_exposure_after = a.exclude_exposure_after,
				   analyst = au_ast.user_login_id,
				   rating_outlook = sdv_rtg_out.value_id,
				   qualitative_rating = sdv_qt_rtg.value_id,
				   buy_notional_month = a.buy_notional_month,
				   sell_notional_month = a.sell_notional_month
 			'
		SET @sql +=  ' FROM  '+ @import_temp_table_name +' a
 				INNER JOIN source_counterparty sc2 ON sc2.counterparty_id = a.counterparty_id
 				INNER JOIN counterparty_credit_info cpi ON cpi.counterparty_id = sc2.source_counterparty_id
				LEFT JOIN application_users au_ast ON au_ast.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au_ast.user_m_name, '' ''), '' ''), '''') + au_ast.user_l_name = a.analyst
				LEFT JOIN application_users au_apby ON au_apby.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au_apby.user_m_name, '' ''), '' ''), '''') + au_apby.user_l_name = a.approved_by
				LEFT JOIN static_data_value sdv_rtg_out ON sdv_rtg_out.[code] = a.rating_outlook AND sdv_rtg_out.[type_id] = 104900
				LEFT JOIN static_data_value sdv_qt_rtg ON sdv_qt_rtg.[code] = a.qualitative_rating AND sdv_qt_rtg.[type_id] = 106000
 				LEFT JOIN static_data_value sdv_debt_rating ON sdv_debt_rating.[code] = a.Debt_rating AND sdv_debt_rating.[type_id] = 10098 
 				LEFT JOIN static_data_value sdv_debt_rating_2 ON sdv_debt_rating_2.[code] = a.Debt_rating2 AND sdv_debt_rating_2.[type_id] = 11099 
 				LEFT JOIN static_data_value sdv_debt_rating_3 ON sdv_debt_rating_3.[code] = a.Debt_rating3 AND sdv_debt_rating_3.[type_id] = 11100 
 				LEFT JOIN static_data_value sdv_debt_rating_4 ON sdv_debt_rating_4.[code] = a.Debt_rating4 AND sdv_debt_rating_4.[type_id] = 11101 
 				LEFT JOIN static_data_value sdv_debt_rating_5 ON sdv_debt_rating_5.[code] = a.Debt_rating5 AND sdv_debt_rating_5.[type_id] = 11102 
 				LEFT JOIN static_data_value sdv_account_status ON sdv_account_status.[code] = a.account_status AND sdv_account_status.[type_id] = 10082 
 				LEFT JOIN static_data_value sdv_rating ON sdv_rating.[code] = a.Risk_rating AND sdv_rating.[type_id] = 10097 
 				LEFT JOIN static_data_value sdv_industry_type_1 ON sdv_industry_type_1.[code] = a.Industry_type1 AND sdv_industry_type_1.[type_id] = 10083 
 				LEFT JOIN static_data_value sdv_industry_type_2 ON sdv_industry_type_2.[code] = a.Industry_type2 AND sdv_industry_type_2.[type_id] = 10084 
 				LEFT JOIN static_data_value sdv_sic_code ON sdv_sic_code.[code] = a.SIC_Code AND sdv_sic_code.[type_id] = 10096
 				LEFT JOIN var_measurement_criteria_detail vmcd ON a.pfe_criteria = vmcd.[name] AND vmcd.measure = 17355 
 				LEFT JOIN source_currency sc ON sc.currency_id = a.curreny_code 
 				OUTER APPLY (
							SELECT temp_id 
							FROM #error_status es
							INNER JOIN message_log_template mlt 
								ON mlt.message_number = es.error_number
							WHERE a.temp_id = es.temp_id
								AND mlt.message_status = ''ERROR''
				) es				 
				WHERE es.temp_id IS NULL
					AND cpi.counterparty_credit_info_id IS NOT NULL '
 	exec spa_print @sql
 	EXEC(@sql)
 
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
 				INSERT INTO counterparty_credit_info
 				  (
 					Counterparty_id, account_status, limit_expiration, credit_limit, curreny_code, Tenor_limit, Industry_type1, Industry_type2,
 					SIC_Code, Duns_No, Risk_rating, Debt_rating, Ticker_symbol, Date_established, Next_review_date, Last_review_date,
 					Customer_since, Approved_by, Watch_list, Settlement_contact_name, Settlement_contact_address, Settlement_contact_address2, Settlement_contact_phone,
 					Settlement_contact_email, payment_contact_name, payment_contact_address, contactfax, payment_contact_phone, payment_contact_email, Debt_Rating2,
 					Debt_Rating3, Debt_Rating4, Debt_Rating5, credit_limit_from, payment_contact_address2, max_threshold, min_threshold, check_apply,
 					cva_data, pfe_criteria, exclude_exposure_after, analyst, rating_outlook, qualitative_rating, buy_notional_month, sell_notional_month
 				  )
 				SELECT sc2.source_counterparty_id, 
 						sdv_account_status.value_id,
 						a.limit_expiration,
 						a.credit_limit,
 						sc.source_currency_id,
 						a.tenor_limit,
 						sdv_industry_type_1.value_id,
 						sdv_industry_type_2.value_id,
 						sdv_sic_code.value_id,
 						a.duns_no,
 						sdv_rating.value_id,
 						sdv_debt_rating.value_id,
 						a.ticker_symbol,
 						a.Date_established,
 						a.next_review_date,
 						a.Last_review_date,
 						a.Customer_since,
 						au_apby.user_login_id,
 						CASE WHEN a.watch_list IN (''Yes'', ''y'') THEN ''y'' ELSE ''n'' END,
 						a.Settlement_contact_name,
 						a.Settlement_contact_address,
 						a.Settlement_contact_address2,
 						a.Settlement_contact_phone,
 						a.Settlement_contact_email,
 						a.payment_contact_name,
 						a.payment_contact_address,
 						a.contactfax,
 						a.payment_contact_phone,
 						a.payment_contact_email,
 						sdv_debt_rating_2.value_id,
 						sdv_debt_rating_3.value_id,
 						sdv_debt_rating_4.value_id,
 						sdv_debt_rating_5.value_id,
 						a.credit_limit_from,
 						a.payment_contact_address2,
 						a.max_threshold,
 						a.min_threshold,
 						CASE WHEN a.check_apply IN (''Yes'', ''y'') THEN ''y'' ELSE ''n'' END,
 						CASE a.cva_data
 							WHEN ''Primary Debt Rating'' THEN 1 
 							WHEN ''Debt Rating2'' THEN 2
 							WHEN ''Debt Rating3'' THEN 3
 							WHEN ''Debt Rating4'' THEN 4
 							WHEN ''Debt Rating5'' THEN 5
 							WHEN ''Risk Rating'' THEN 6
 							WHEN ''Counterparty Default Values'' THEN  7
 							WHEN ''Counterparty Credit Spread'' THEN 8
 						END,
 						vmcd.id,
 						a.exclude_exposure_after,
						au_ast.user_login_id,
						sdv_rtg_out.value_id,
						sdv_qt_rtg.value_id,
						a.buy_notional_month,
						a.sell_notional_month
 				'
				
			SET @sql +=' FROM '+ @import_temp_table_name +' a
 				INNER JOIN source_counterparty sc2 ON sc2.counterparty_id = a.counterparty_id
				LEFT JOIN application_users au_ast ON au_ast.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au_ast.user_m_name, '' ''), '' ''), '''') + au_ast.user_l_name = a.analyst
				LEFT JOIN application_users au_apby ON au_apby.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au_apby.user_m_name, '' ''), '' ''), '''') + au_apby.user_l_name = a.approved_by
				LEFT JOIN static_data_value sdv_rtg_out ON sdv_rtg_out.[code] = a.rating_outlook AND sdv_rtg_out.[type_id] = 104900
				LEFT JOIN static_data_value sdv_qt_rtg ON sdv_qt_rtg.[code] = a.qualitative_rating AND sdv_qt_rtg.[type_id] = 106000
 				LEFT JOIN static_data_value sdv_debt_rating ON sdv_debt_rating.[code] = a.Debt_rating AND sdv_debt_rating.[type_id] = 10098 
 				LEFT JOIN static_data_value sdv_debt_rating_2 ON sdv_debt_rating_2.[code] = a.Debt_rating2 AND sdv_debt_rating_2.[type_id] = 11099 
 				LEFT JOIN static_data_value sdv_debt_rating_3 ON sdv_debt_rating_3.[code] = a.Debt_rating3 AND sdv_debt_rating_3.[type_id] = 11100 
 				LEFT JOIN static_data_value sdv_debt_rating_4 ON sdv_debt_rating_4.[code] = a.Debt_rating4 AND sdv_debt_rating_4.[type_id] = 11101 
 				LEFT JOIN static_data_value sdv_debt_rating_5 ON sdv_debt_rating_5.[code] = a.Debt_rating5 AND sdv_debt_rating_5.[type_id] = 11102 
 				LEFT JOIN static_data_value sdv_account_status ON sdv_account_status.[code] = a.account_status AND sdv_account_status.[type_id] = 10082 
 				LEFT JOIN static_data_value sdv_rating ON sdv_rating.[code] = a.Risk_rating AND sdv_rating.[type_id] = 10097 
 				LEFT JOIN static_data_value sdv_industry_type_1 ON sdv_industry_type_1.[code] = a.Industry_type1 AND sdv_industry_type_1.[type_id] = 10083 
 				LEFT JOIN static_data_value sdv_industry_type_2 ON sdv_industry_type_2.[code] = a.Industry_type2 AND sdv_industry_type_2.[type_id] = 10084 
 				LEFT JOIN static_data_value sdv_sic_code ON sdv_sic_code.[code] = a.SIC_Code AND sdv_sic_code.[type_id] = 10096
 				LEFT JOIN var_measurement_criteria_detail vmcd ON a.pfe_criteria = vmcd.[name] AND vmcd.measure = 17355 
 				LEFT JOIN source_currency sc ON sc.currency_id = a.curreny_code
 				LEFT JOIN counterparty_credit_info cpi ON cpi.counterparty_id = sc2.source_counterparty_id
 				OUTER APPLY (
							SELECT temp_id 
							FROM #error_status es
							INNER JOIN message_log_template mlt 
								ON mlt.message_number = es.error_number
							WHERE a.temp_id = es.temp_id
								AND mlt.message_status = ''ERROR''
					   ) es				 
				WHERE es.temp_id IS NULL
					AND cpi.counterparty_credit_info_id IS NULL '				
 	exec spa_print @sql
 	EXEC(@sql)
END

IF @table_name = 'ixp_counterparty_credit_rating_import'
BEGIN
	/** Collect data for look up table validation.
		 referred_table: lookup table to match value against
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),
		(''static_data_value'', ''debt_rating'', ''b.code = a.debt_rating AND b.type_id = 10098'', ''e''),
		(''static_data_value'', ''risk_rating'', ''b.code = a.risk_rating AND b.type_id = 10097'', ''e''),
		(''static_data_value'', ''Debt_rating2'', ''b.code = a.Debt_rating2 AND b.type_id = 11099'', ''w''),
		(''static_data_value'', ''Debt_rating3'', ''b.code = a.Debt_rating3 AND b.type_id = 11100'', ''w''),
		(''static_data_value'', ''Debt_rating4'', ''b.code = a.Debt_rating4 AND b.type_id = 11101'', ''w''),
		(''static_data_value'', ''rating_outlook'', ''b.code = a.rating_outlook AND b.type_id = 104900'', ''w''),
		(''static_data_value'', ''qualitative_rating'', ''b.code = a.qualitative_rating AND b.type_id = 106000'', ''w'')'
		)

 	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	/*************END OF VALIDATION******************/

	-- update
	SET @sql ='UPDATE cci
				SET
				Counterparty_id = sc2.source_counterparty_id, 
				Risk_rating = sdv_rating.value_id,
				Debt_rating = sdv_debt_rating.value_id,
				Debt_Rating2 = sdv_debt_rating_2.value_id,
				Debt_Rating3 = sdv_debt_rating_3.value_id,
				Debt_Rating4 = sdv_debt_rating_4.value_id,
				rating_outlook = sdv_rtg_out.value_id,
				qualitative_rating = sdv_qt_rtg.value_id
				FROM  '+ @import_temp_table_name +' a
				INNER JOIN source_counterparty sc2 ON sc2.counterparty_id = a.counterparty_id
				INNER JOIN counterparty_credit_info cci ON sc2.source_counterparty_id = cci.Counterparty_id
				LEFT JOIN static_data_value sdv_rtg_out ON sdv_rtg_out.[code] = a.rating_outlook AND sdv_rtg_out.[type_id] = 104900
				LEFT JOIN static_data_value sdv_qt_rtg ON sdv_qt_rtg.[code] = a.qualitative_rating AND sdv_qt_rtg.[type_id] = 106000
				LEFT JOIN static_data_value sdv_debt_rating ON sdv_debt_rating.[code] = a.Debt_rating AND sdv_debt_rating.[type_id] =   	10098 
				LEFT JOIN static_data_value sdv_debt_rating_2 ON sdv_debt_rating_2.[code] = a.Debt_rating2 AND sdv_debt_rating_2.		[type_id] =		11099 
				LEFT JOIN static_data_value sdv_debt_rating_3 ON sdv_debt_rating_3.[code] = a.Debt_rating3 AND sdv_debt_rating_3.		[type_id] =		11100 
				LEFT JOIN static_data_value sdv_debt_rating_4 ON sdv_debt_rating_4.[code] = a.Debt_rating4 AND sdv_debt_rating_4.		[type_id] =		11101 
				LEFT JOIN static_data_value sdv_rating ON sdv_rating.[code] = a.Risk_rating AND sdv_rating.[type_id] = 10097
				WHERE cci.counterparty_credit_info_id IS NOT NULL'
	exec spa_print @sql
 	EXEC(@sql)

	-- insert
	SET @sql ='INSERT INTO counterparty_credit_info
 				  (
 					Counterparty_id,  Risk_rating, Debt_rating, Debt_Rating2,
 					Debt_Rating3, Debt_Rating4, rating_outlook, qualitative_rating )
				SELECT  sc2.source_counterparty_id,
						sdv_rating.value_id,
						sdv_debt_rating.value_id, 
						sdv_debt_rating_2.value_id,
				 		sdv_debt_rating_3.value_id,
				 		sdv_debt_rating_4.value_id,
						sdv_rtg_out.value_id,
						sdv_qt_rtg.value_id
				FROM '+ @import_temp_table_name +' a
				INNER JOIN source_counterparty sc2 ON sc2.counterparty_id = a.counterparty_id
				LEFT JOIN static_data_value sdv_rtg_out ON sdv_rtg_out.[code] = a.rating_outlook AND sdv_rtg_out.[type_id] = 104900
				LEFT JOIN static_data_value sdv_qt_rtg ON sdv_qt_rtg.[code] = a.qualitative_rating AND sdv_qt_rtg.[type_id] = 106000
				LEFT JOIN static_data_value sdv_debt_rating ON sdv_debt_rating.[code] = a.Debt_rating AND sdv_debt_rating.[type_id] =   	10098 
				LEFT JOIN static_data_value sdv_debt_rating_2 ON sdv_debt_rating_2.[code] = a.Debt_rating2 AND sdv_debt_rating_2.		[type_id] =		11099 
				LEFT JOIN static_data_value sdv_debt_rating_3 ON sdv_debt_rating_3.[code] = a.Debt_rating3 AND sdv_debt_rating_3.		[type_id] =		11100 
				LEFT JOIN static_data_value sdv_debt_rating_4 ON sdv_debt_rating_4.[code] = a.Debt_rating4 AND sdv_debt_rating_4.		[type_id] =		11101 
				LEFT JOIN static_data_value sdv_rating ON sdv_rating.[code] = a.Risk_rating AND sdv_rating.[type_id] = 10097 
				LEFT JOIN counterparty_credit_info cpi ON cpi.counterparty_id = sc2.source_counterparty_id
									WHERE cpi.counterparty_credit_info_id IS NULL '
	exec spa_print @sql
 	EXEC(@sql)


	SET @alert_process_table = 'adiha_process.dbo.alert_counterparty_credit_info_' + @process_id + '_acci'
	DECLARE @set_up_as_of_date VARCHAR(30)
	SELECT @set_up_as_of_date = as_of_date FROM module_asofdate
	
	EXEC ('CREATE TABLE ' + @alert_process_table + ' (
 	       	counterparty_id		   INT,
 	       	counterparty_name	   NVARCHAR(400) COLLATE DATABASE_DEFAULT,
 	       	debt_rating			   NVARCHAR(400) COLLATE DATABASE_DEFAULT,
 	       	credit_limit           INT,
 	       	as_of_date			   NVARCHAR(50) COLLATE DATABASE_DEFAULT,
        	hyperlink1             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink2             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink3             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink4             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
        	hyperlink5             NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
 	       )')

 	SET @sql = 'INSERT INTO ' + @alert_process_table + ' (
 	                counterparty_id,
 	                counterparty_name,
 	                debt_rating,
					as_of_date
 	              )
 	            SELECT sc2.source_counterparty_id, sc2.counterparty_name, sdv_debt_rating.value_id, ''' + @set_up_as_of_date + '''
 	            FROM  '+ @import_temp_table_name +' a
				INNER JOIN source_counterparty sc2 ON sc2.counterparty_id = a.counterparty_id
				LEFT JOIN static_data_value sdv_debt_rating ON sdv_debt_rating.[code] = a.Debt_rating AND sdv_debt_rating.[type_id] = 10098 
				'
 	EXEC(@sql)
	EXEC spa_register_event 20604, 20507, @alert_process_table, 1, @process_id
	EXEC spa_register_event 20604, 20578, @alert_process_table, 1, @process_id

END


 IF @table_name = 'ixp_ice_security_definition'
BEGIN
		EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
 	        FROM   ' + @import_temp_table_name)

	EXEC('DELETE isd FROM ice_security_definition isd INNER JOIN ' + @import_temp_table_name +' a 
ON a.product_id = isd.product_id')

	EXEC('INSERT INTO ice_security_definition (
	product_id
			,exchange_name
			,product_name
			,granularity
			,tick_value
			,uom
			,hub_name
			,currency
			,cfi_code
			,price_unit
			,underlying_contract_multiplier
			,lot_size
			,hub_alias
			,security_definition_id			
			,symbol
			,leg_symbol
			,strip_name
	)
		SELECT
			a.product_id
			,a.exchangename
			,a.productname
			,sdv.value_id [granularity]
			,a.tickvalue
			,su.source_uom_id
			,a.hubName
			,sc.source_currency_id
			,a.cficode
			,a.priceunit
			,a.underlyingcontractmultiplier
			,a.lotsize		  
			,a.hubalias
			,a.SecurityDefinitionID
			,a.symbol
			,a.legsymbol
			,a.StripName
FROM '+ @import_temp_table_name +' a
		INNER JOIN source_currency sc ON sc.currency_id = a.Currency_id 
		INNER JOIN static_data_value sdv ON sdv.code = a.granularity AND sdv.type_id = 978 
		INNER JOIN source_uom su ON su.uom_id = a.uom_id')	
END

IF @table_name = 'ixp_source_deal_settlement_breakdown_template'
BEGIN  	
 	EXEC ('INSERT INTO #temp_tot_count
 			SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 			FROM   '+@import_temp_table_name)
    
     --check data repetition  
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	      SELECT a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''Data error for source_deal_header_id :'' + ISNULL(a.source_deal_header_id, ''NULL'') 
 	             + ''Data error for term_start :'' + ISNULL(a.term_start, ''NULL'') 
 	             + ''Data error for term_end :'' + ISNULL(a.term_end, ''NULL'') 
 	             + ''Data error for as_of_date :'' + ISNULL(a.as_of_date, ''NULL'') 
 	             + ''Data error for leg :'' + ISNULL(b.leg, ''NULL'')
 	             + ''Data error for hour :'' + ISNULL(b.hours, ''NULL'')
 	             + ''Data error for dst :'' + ISNULL(b.is_dst, ''NULL'')
 	             + '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 	             ''Please CHECK your Data'',
 	             a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
 				  SELECT sdh.source_deal_header_id, a.term_start, a.term_end, a.as_of_date, ISNULL(leg, 1) leg, a.term_date,a.hours,isnull(a.is_dst,0) is_dst, COUNT(*) notimes
 				  FROM   '+ @import_temp_table_name+' a
 				  INNER JOIN source_deal_header sdh on sdh.deal_id = a.deal_id
 				  GROUP BY sdh.source_deal_header_id, a.term_start, a.term_end, a.as_of_date, leg, a.term_date,a.hours,is_dst
 				  HAVING COUNT(*) > 1
 			 ) b
 			   ON  a.source_deal_header_id = b.source_deal_header_id AND a.term_start = b.term_start AND a.term_end = b.term_end 
 			   AND a.as_of_date = b.as_of_date AND a.leg = b.leg AND a.hours = b.hours AND ISNULL(a.is_dst, 0) = b.is_dst
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL')
        
     -- Deal existence check
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for deal_id :'' + ISNULL(a.deal_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please CHECK your Data'',
 				  a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN source_deal_header sdh ON  sdh.deal_id = a.deal_id 
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND sdh.deal_id IS NULL')
 			
     -- deal id is null
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for deal_id : Deal Id IS NULL '',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.deal_id IS NULL')
           
      -- term_end is null
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for term_end : Term End  IS NULL'',
 				 ''Please CHECK your Data'',
 				  a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.term_end IS NULL')
           
       -- term_start is null
     EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for term_start : Term Start IS NULL'',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.term_start IS NULL')
           
     -- fixed_price_currency_id is null
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for fixed_price_currency_id : Fixed Price Currency IS NULL'',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND fixed_price_currency_id IS NULL')
 			
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for Fixed Price Currency:'' + ISNULL(a.fixed_price_currency_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN source_currency  sc ON sc.currency_id = a.fixed_price_currency_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND sc.currency_id  IS NULL')
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for Deal Volume uom:'' + ISNULL(a.deal_volume_uom_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN source_uom  su ON su.uom_id = a.deal_volume_uom_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND su.uom_id IS NULL')
 			
 	 -- deal_volume_uom_id is null		
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+@table_name+''',
 				 ''Data Error'',
 				 ''Data error for deal_volume_uom_id : Deal Volume Uom IS NULL'',
 				 ''Please CHECK your Data'', a.import_file_name
 			FROM   '+@import_temp_table_name + ' a
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND a.deal_volume_uom_id IS NULL')
 			
 	EXEC('DELETE ' + @import_temp_table_name + '
           FROM #import_status
           INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id') 
            
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE sdsb
 				SET	as_of_date = ISNULL(a.as_of_date,sdsb.as_of_date),
 					source_deal_header_id = ISNULL(sdh.source_deal_header_id,sdsb.source_deal_header_id),
 					deal_id = ISNULL(a.deal_id,sdsb.deal_id),
 					term_date = ISNULL(a.term_date,sdsb.term_date),
 					hours = ISNULL(a.hours,sdsb.hours),
 					is_dst = ISNULL(a.is_dst,sdsb.is_dst),
 					period = ISNULL(a.period,sdsb.period),
 					term_start = ISNULL(a.term_start,sdsb.term_start),
 					term_end = ISNULL(a.term_end,sdsb.term_end),
 					curve_id = ISNULL(sdd.curve_id,sdsb.curve_id),
 					leg_mtm = ISNULL(a.leg_mtm,sdsb.leg_mtm),
 					leg_set = ISNULL(a.leg_set,sdsb.leg_set),
 					extrinsic_value = ISNULL(a.extrinsic_value,sdsb.extrinsic_value),
 					accrued_interest = ISNULL(a.accrued_interest,sdsb.accrued_interest),
 					volume = ISNULL(a.volume,sdsb.volume),
 					leg = ISNULL(a.leg,sdsb.leg),
 					price = ISNULL(a.price,sdsb.price),
 					discount_rate = ISNULL(a.discount_rate,sdsb.discount_rate),
 					no_days_left = ISNULL(a.no_days_left,sdsb.no_days_left),
 					days_year = ISNULL(a.days_year,sdsb.days_year),
 					discount_factor = ISNULL(a.discount_factor,sdsb.discount_factor),
 					expired_term = ISNULL(a.expired_term,sdsb.expired_term),
 					curve_as_of_date = ISNULL(a.curve_as_of_date,sdsb.curve_as_of_date),
 					internal_deal_type_value_id = ISNULL(sdt.source_deal_type_id,sdsb.internal_deal_type_value_id),
 					internal_deal_subtype_value_id = ISNULL(sdtsub.source_deal_type_id,sdsb.internal_deal_subtype_value_id),
 					curve_uom_conv_factor = ISNULL(a.curve_uom_conv_factor,sdsb.curve_uom_conv_factor),
 					curve_fx_conv_factor = ISNULL(a.curve_fx_conv_factor,sdsb.curve_fx_conv_factor),
 					price_fx_conv_factor = ISNULL(a.price_fx_conv_factor,sdsb.price_fx_conv_factor),
 					curve_value = ISNULL(a.curve_value,sdsb.curve_value),
 					fixed_cost = ISNULL(a.fixed_cost,sdsb.fixed_cost),
 					fixed_price = ISNULL(a.fixed_price,sdsb.fixed_price),
 					formula_value = ISNULL(a.formula_value,sdsb.formula_value),
 					price_adder = ISNULL(a.price_adder,sdsb.price_adder),
 					price_multiplier = ISNULL(a.price_multiplier,sdsb.price_multiplier),
 					strike_price = ISNULL(a.strike_price,sdsb.strike_price),
 					buy_sell_flag = ISNULL(sdd.buy_sell_flag,sdsb.buy_sell_flag),
 					physical_financial_flag = ISNULL(sdd.physical_financial_flag,sdsb.physical_financial_flag),
 					fixed_cost_fx_conv_factor = ISNULL(a.fixed_cost_fx_conv_factor,sdsb.fixed_cost_fx_conv_factor),
 					formula_fx_conv_factor = ISNULL(a.formula_fx_conv_factor,sdsb.formula_fx_conv_factor),
 					price_adder1_fx_conv_factor = ISNULL(a.price_adder1_fx_conv_factor,sdsb.price_adder1_fx_conv_factor),
 					price_adder2_fx_conv_factor = ISNULL(a.price_adder2_fx_conv_factor,sdsb.price_adder2_fx_conv_factor),
 					volume_multiplier = ISNULL(a.volume_multiplier,sdsb.volume_multiplier),
 					volume_multiplier2 = ISNULL(a.volume_multiplier2,sdsb.volume_multiplier2),
 					price_adder2 = ISNULL(a.price_adder2,sdsb.price_adder2),
 					pay_opposite = ISNULL(a.pay_opposite,sdsb.pay_opposite),
 					curve_uom_id = ISNULL(curve_uom.source_uom_id,sdsb.curve_uom_id),
 					deal_volume_uom_id = ISNULL(volume_uom.source_uom_id,sdsb.deal_volume_uom_id),
 					fixed_price_currency_id = ISNULL(price_currency.source_currency_id,sdsb.fixed_price_currency_id),
 					price_adder_currency = ISNULL(adder.source_currency_id,sdsb.price_adder_currency),
 					price_adder2_currency = ISNULL(adder2.source_currency_id, sdsb.price_adder2_currency),
 					func_cur_id = ISNULL(a.func_cur_id,sdsb.func_cur_id),
 					formula_currency = ISNULL(for_currency.source_currency_id,sdsb.formula_currency),
 					fixed_cost_currency = ISNULL(a.fixed_cost_currency,sdsb.fixed_cost_currency),
 					market_value = ISNULL(a.market_value,sdsb.market_value),
 					contract_value = ISNULL(a.contract_value,sdsb.contract_value),
 					formula_rounding = ISNULL(a.formula_rounding,sdsb.formula_rounding),
 					formula_conv_factor = ISNULL(a.formula_conv_factor,sdsb.formula_conv_factor),
 					formula_id = ISNULL(a.formula_id,sdsb.formula_id),
 					contract_id = ISNULL(cg.contract_id, sdsb.contract_id),
 					product_id = ISNULL(product.value_id,sdsb.product_id),
 					source_deal_detail_id = ISNULL(sdd.source_deal_detail_id,sdsb.source_deal_detail_id),
 					formula_curve_id = ISNULL(formula_curve.source_curve_def_id, sdsb.formula_curve_id),
 					allocation_volume = ISNULL(a.allocation_volume,sdsb.allocation_volume),
 					contract_price = ISNULL(a.contract_price,sdsb.contract_price),
 					market_price = ISNULL(a.market_price,sdsb.market_price),
 					deal_volume = ISNULL(sdd.deal_volume,sdsb.deal_volume),
 					create_user = dbo.FNADBUser(),
 					create_ts = GETDATE() 					
 	          '			  
			SET @sql +=  ' FROM '+ @import_temp_table_name + ' a
 				LEFT JOIN source_uom curve_uom  ON curve_uom.uom_id =  a.curve_uom_id
 				LEFT JOIN source_uom  volume_uom ON volume_uom.uom_id = a.deal_volume_uom_id
 				LEFT JOIN source_currency  price_currency ON price_currency.currency_id = a.fixed_price_currency_id
 				LEFT JOIN source_currency adder ON adder.currency_id = a.price_adder_currency
 				LEFT JOIN source_currency adder2   ON adder2.currency_id= a.price_adder2_currency
 				LEFT JOIN source_currency for_currency ON for_currency.currency_id = a.formula_currency
 				LEFT JOIN contract_group cg ON cg.source_contract_id = a.contract_id
 				LEFT JOIN static_data_value product ON product.value_id = a.product_id
 				LEFT JOIN source_price_curve_def formula_curve ON formula_curve.curve_id = a.formula_curve_id
 				LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.internal_deal_type_value_id
 				LEFT JOIN source_deal_type sdtsub ON sdtsub.deal_type_id = a.internal_deal_subtype_value_id
 				INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id 
 				INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
 				INNER JOIN source_deal_settlement_breakdown sdsb ON  sdsb.as_of_date = a.as_of_date
 					AND sdsb.source_deal_header_id = sdh.source_deal_header_id
 					AND sdsb.term_date = ISNULL(a.term_date, a.as_of_date)
 					AND ISNULL(sdsb.period,0) = 0 AND sdsb.hours = ISNULL(a.hours, 0)
 					AND ISNULL(a.is_dst,0) = sdsb.is_dst
 					AND ISNULL(a.leg,1) = sdsb.leg
 				LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL 
 				'
 	EXEC (@sql)
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO source_deal_settlement_breakdown (as_of_date, source_deal_header_id, deal_id, term_date, hours, is_dst, period, term_start, term_end, curve_id, leg_mtm, 
 																leg_set, extrinsic_value, accrued_interest, volume, leg, price, discount_rate, no_days_left, days_year, discount_factor, 
 																expired_term, curve_as_of_date, internal_deal_type_value_id, internal_deal_subtype_value_id, curve_uom_conv_factor, curve_fx_conv_factor, 
 																price_fx_conv_factor, curve_value, fixed_cost, fixed_price, formula_value, price_adder, price_multiplier, strike_price, buy_sell_flag,
 																physical_financial_flag, fixed_cost_fx_conv_factor, formula_fx_conv_factor, price_adder1_fx_conv_factor, price_adder2_fx_conv_factor, 
 																volume_multiplier, volume_multiplier2, price_adder2, pay_opposite, curve_uom_id, deal_volume_uom_id, fixed_price_currency_id, 
 																price_adder_currency, price_adder2_currency, func_cur_id, formula_currency, fixed_cost_currency, market_value, contract_value, 
 																formula_rounding, formula_conv_factor, formula_id, contract_id, product_id, source_deal_detail_id, formula_curve_id, allocation_volume, 
 																contract_price, market_price, deal_volume,create_user,create_ts)
 																
 				SELECT  a.as_of_date,
 						sdh.source_deal_header_id,
 						a.deal_id,
 						a.term_date,
 						a.hours,
 						ISNULL(a.is_dst, 0),
 						ISNULL(a.period, 0),
 						a.term_start,
 						a.term_end,
 						sdd.curve_id,
 						ISNULL(a.leg_mtm,0),
 						a.leg_set,
 						a.extrinsic_value,
 						a.accrued_interest,
 						a.volume,
 						ISNULL(a.leg,1),
 						ISNULL(a.price, 0),
 						a.discount_rate,
 						a.no_days_left,
 						a.days_year,
 						ISNULL(a.discount_factor, 1),
 						ISNULL(a.expired_term,''Y''),
 						a.curve_as_of_date,
 						ISNULL(sdt.source_deal_type_id,1),
 						ISNULL(sdtsub.source_deal_type_id,1),
 						ISNULL(a.curve_uom_conv_factor, 1),
 						ISNULL(a.curve_fx_conv_factor,1),
 						ISNULL(a.price_fx_conv_factor,1),
 						a.curve_value,
 						ISNULL(a.fixed_cost, 0),
 						ISNULL(a.fixed_price,0),
 						ISNULL(a.formula_value,0),
 						ISNULL(a.price_adder,0),
 						ISNULL(a.price_multiplier,1),
 						a.strike_price,
 						sdd.buy_sell_flag,
 						sdd.physical_financial_flag,
 						ISNULL(a.fixed_cost_fx_conv_factor,1),
 						ISNULL(a.formula_fx_conv_factor,1),
 						ISNULL(a.price_adder1_fx_conv_factor,1),
 						ISNULL(a.price_adder2_fx_conv_factor,1),
 						ISNULL(a.volume_multiplier,1),
 						ISNULL(a.volume_multiplier2,1),
 						ISNULL(a.price_adder2,0),
 						ISNULL(a.pay_opposite, ''N''),
 						ISNULL(curve_uom.source_uom_id,1),
 						ISNULL(volume_uom.source_uom_id,1),
 						ISNULL(price_currency.source_currency_id,sdd.fixed_price_currency_id),
 						ISNULL(adder.source_currency_id,sdd.adder_currency_id),
 						ISNULL(adder2.source_currency_id,sdd.price_adder2),
 						ISNULL(a.func_cur_id, 1),
 						ISNULL(for_currency.source_currency_id, sdd.formula_currency_id),
 						ISNULL(fix_cost_currency.source_currency_id,sdd.fixed_cost_currency_id),
 						ISNULL(a.market_value, 0),
 						ISNULL(a.contract_value, 0),
 						a.formula_rounding,
 						a.formula_conv_factor,
 						sdd.formula_id,
 						ISNULL(cg.contract_id, sdh.contract_id),
 						a.product_id,
 						sdd.source_deal_detail_id,
 						sdd.formula_curve_id,
 						a.allocation_volume,
 						ISNULL(a.contract_price,0),
 						ISNULL(a.market_price, 0),
 						sdd.deal_volume,
 						dbo.FNADBUser(),
 						GETDATE()
 														
 				'			  
			SET @sql +=  ' FROM ' + @import_temp_table_name + ' a
 				LEFT JOIN source_uom curve_uom  ON curve_uom.uom_id =  a.curve_uom_id
 				LEFT JOIN source_uom  volume_uom ON volume_uom.uom_id = a.deal_volume_uom_id
 				LEFT JOIN source_currency  price_currency ON price_currency.currency_id = a.fixed_price_currency_id
 				LEFT JOIN source_currency adder ON adder.currency_id = a.price_adder_currency
 				LEFT JOIN source_currency adder2 ON adder2.currency_id= a.price_adder2_currency
 				LEFT JOIN source_currency for_currency ON for_currency.currency_id = a.formula_currency
 				LEFT JOIN source_currency fix_cost_currency ON fix_cost_currency.currency_id = a.fixed_cost_currency
 				LEFT JOIN contract_group cg ON cg.source_contract_id = a.contract_id
 				LEFT JOIN static_data_value product ON product.value_id = a.product_id
 				LEFT JOIN source_price_curve_def formula_curve ON formula_curve.curve_id = a.formula_curve_id
 				LEFT JOIN source_deal_type sdt ON sdt.deal_type_id = a.internal_deal_type_value_id
 				LEFT JOIN source_deal_type sdtsub ON sdtsub.deal_type_id = a.internal_deal_subtype_value_id
 				INNER JOIN source_deal_header sdh ON a.deal_id = sdh.deal_id 
 				INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
 				LEFT JOIN source_deal_settlement_breakdown sdsb ON  sdsb.as_of_date = a.as_of_date
 					AND sdsb.source_deal_header_id = sdh.source_deal_header_id
 					AND sdsb.term_date = ISNULL(a.term_date, a.as_of_date)
 					AND ISNULL(a.is_dst,0) = sdsb.is_dst AND sdsb.period = ISNULL(sdsb.period, 0) 
 					AND sdsb.hours = ISNULL(a.hours, 0) 
 					AND ISNULL(a.leg,1) = sdsb.leg
 				LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 				WHERE #import_status.temp_id IS NULL AND sdsb.row_id IS NULL 
 					'
 	EXEC(@sql)
END
 
IF @table_name = 'ixp_counterparty_credit_enhancements_template'
BEGIN

 	/***update user date to sql date***/		
	EXEC('UPDATE a
		  SET eff_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.eff_date = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET expiration_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.expiration_date = dd.user_date
	')
	/***END OF date update***/

 	EXEC('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_enhancements'',''amount'',''amount'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_enhancements'',''internal_counterparty'',''deal_id'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_credit_info_id'', ''b.counterparty_id = a.counterparty_credit_info_id'', ''e''),
		(''source_currency'', ''currency_code'', ''b.currency_id = a.currency_code'', ''e''),
		(''static_data_value'', ''enhance_type'', ''b.code = a.enhance_type AND b.type_id = 10100'', ''e''),
		(''static_data_value'', ''collateral_status'', ''b.code = a.collateral_status AND b.type_id = 105200'', ''w''),
		(''source_counterparty'', ''internal_counterparty'', ''b.counterparty_id  =  a.internal_counterparty'', ''w''),
		(''source_counterparty'', ''guarantee_counterparty'', ''b.counterparty_id = a.guarantee_counterparty'', ''w''),
		(''application_users'', ''approved_by'', ''b.user_f_name + '''' '''' + ISNULL(NULLIF(CONCAT(b.user_m_name, '''' ''''), '''' ''''), '''''''') + b.user_l_name = a.approved_by'', ''w''),
		(''source_deal_header'', ''deal_id'', ''b.source_deal_header_id = a.deal_id'', ''e''),
		(''contract_group'', ''contract_id'', ''b.source_contract_id = a.contract_id'', ''w'')
	')
	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- validation for non existent static data 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.margin + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''margin'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL 
			  AND a.margin NOT IN (''yes'', ''no'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.is_primary + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''is_primary'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.is_primary NOT IN (''yes'', ''no'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.transferred + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''transferred'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.transferred NOT IN (''yes'', ''no'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.auto_renewal + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''auto_renewal'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.auto_renewal NOT IN (''yes'', ''no'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.blocked + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''blocked'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.blocked NOT IN (''yes'', ''no'',''y'',''n'')
	')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10013,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.exclude_collateral + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''exclude_collateral'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND a.exclude_collateral NOT IN (''yes'', ''no'',''y'',''n'')
	')

 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #error_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')
	/******End of data validation**********/

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE cce
 				SET counterparty_credit_info_id = cci.counterparty_credit_info_id,
 					enhance_type = sdv.value_id,
 					guarantee_counterparty = gc.source_counterparty_id,
 					comment = a.comment,
 					amount = a.amount,
 					currency_code = currency.source_currency_id,
 					eff_date = a.eff_date,
 					margin = CASE WHEN a.margin = ''Yes'' THEN ''y''
								  WHEN a.margin = ''y'' THEN ''y''
								  ELSE ''n''
							 END,
 					rely_self = a.rely_self,
 					approved_by = au.user_login_id,
 					expiration_date = a.expiration_date,
 					exclude_collateral = CASE WHEN a.exclude_collateral = ''Yes'' THEN ''y''
											  WHEN a.exclude_collateral = ''y'' THEN ''y''
											  ELSE ''n''
										 END,	
 					internal_counterparty = sc1.source_counterparty_id,
 					contract_id = cg.contract_id,
					deal_id = sdh.source_deal_header_id,
					collateral_status = sdv_cs.value_id,
					is_primary = CASE WHEN a.is_primary = ''Yes'' THEN 1
									  WHEN a.is_primary = ''y'' THEN 1
									  ELSE 0
								 END,
					transferred = CASE WHEN a.transferred = ''Yes'' THEN ''y''
									   WHEN a.transferred = ''y'' THEN ''y''
									   ELSE ''n''
								  END,
					blocked = CASE WHEN a.blocked = ''Yes'' THEN ''y''
								   WHEN a.blocked = ''y'' THEN ''y''
								   ELSE ''n''
							  END,
					auto_renewal = CASE WHEN a.auto_renewal = ''Yes'' THEN ''y''
										WHEN a.auto_renewal = ''y'' THEN ''y''
										ELSE ''n'' 
								   END
 	            FROM counterparty_credit_enhancements cce
 	            INNER JOIN counterparty_credit_info cci ON cce.counterparty_credit_info_id = cci.counterparty_credit_info_id 
 	            INNER JOIN source_counterparty sc ON sc.source_counterparty_id  =  cci.Counterparty_id
 	            INNER JOIN ' + @import_temp_table_name + ' a ON a.counterparty_credit_info_id = sc.counterparty_id
				LEFT JOIN source_deal_header sdh ON sdh.source_deal_header_id = a.deal_id
 	            LEFT JOIN source_currency currency ON currency.currency_id = a.currency_code 
 	            LEFT JOIN application_users au ON au.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au.user_m_name, '' ''), '' ''), '''') + au.user_l_name = a.approved_by
 	            LEFT JOIN static_data_value sdv ON sdv.code = a.enhance_type AND sdv.type_id = 10100
				LEFT JOIN static_data_value sdv_cs ON sdv_cs.code = a.collateral_status AND sdv_cs.type_id = 105200
 	            LEFT JOIN source_counterparty gc ON gc.counterparty_id = a.guarantee_counterparty
 	            LEFT JOIN source_counterparty sc1 ON sc1.counterparty_id  =  a.internal_counterparty
 	            LEFT JOIN contract_group cg  ON cg.source_contract_id = a.contract_id
 					OUTER APPLY (
							SELECT temp_id 
							FROM #error_status es
							INNER JOIN message_log_template mlt 
								ON mlt.message_number = es.error_number
							WHERE a.temp_id = es.temp_id
								AND mlt.message_status = ''ERROR''
					   ) es				 
				WHERE es.temp_id IS NULL
					AND ISNULL(cce.internal_counterparty, -1) = ISNULL(sc1.source_counterparty_id, -1)  
					AND ISNULL(cce.contract_id, -1) = ISNULL(cg.contract_id, -1) 
					AND cce.enhance_type = sdv.value_id
					AND cce.eff_date = a.eff_date' 	
 	EXEC (@sql)
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO counterparty_credit_enhancements(
					counterparty_credit_info_id,
					enhance_type,
					guarantee_counterparty,
					comment,
					amount,
					currency_code,
					eff_date,
					margin,
					rely_self,
					approved_by,
					expiration_date,
					exclude_collateral,
					internal_counterparty,
					contract_id,
					deal_id,
					collateral_status,
					is_primary,
					transferred,
					blocked,
					auto_renewal
				)
 				SELECT cci.counterparty_credit_info_id,
 						sdv.value_id,
 						gc.source_counterparty_id,
 						a.comment,
 						a.amount,
 						currency.source_currency_id,
 						a.eff_date,
 						CASE WHEN a.margin = ''Yes'' THEN ''y''
							 WHEN a.margin = ''y'' THEN ''y''
							 ELSE ''n''
						END,
 						a.rely_self,
 						au.user_login_id,
 						a.expiration_date,
 						CASE WHEN a.exclude_collateral = ''Yes'' THEN ''y''
							 WHEN a.exclude_collateral = ''y'' THEN ''y''
							 ELSE ''n''
						END,	
 						sc1.source_counterparty_id,
 						cg.contract_id,
					sdh.source_deal_header_id,
					sdv_cs.value_id,
					CASE WHEN a.is_primary = ''Yes'' THEN 1 WHEN a.is_primary = ''y'' THEN 1 ELSE 0 END,
					CASE WHEN a.transferred = ''Yes'' THEN ''y'' WHEN a.transferred = ''y'' THEN ''y'' ELSE ''n'' END,
					CASE WHEN a.blocked = ''Yes'' THEN ''y'' WHEN a.blocked = ''y'' THEN ''y'' ELSE ''n'' END,
					CASE WHEN a.auto_renewal = ''Yes'' THEN ''y'' WHEN a.auto_renewal = ''y'' THEN ''y'' ELSE ''n'' END
 				FROM ' + @import_temp_table_name  + ' a
				LEFT JOIN source_deal_header sdh ON sdh.source_deal_header_id = a.deal_id
				LEFT JOIN static_data_value sdv_cs ON sdv_cs.code = a.collateral_status AND sdv_cs.type_id = 105200
 	            LEFT JOIN static_data_value sdv ON sdv.code = a.enhance_type AND sdv.type_id = 10100
 	            LEFT JOIN source_counterparty gc ON gc.counterparty_id = a.guarantee_counterparty
 	            LEFT JOIN source_currency currency ON currency.currency_id = a.currency_code 
 	            LEFT JOIN application_users au ON au.user_f_name + '' '' + ISNULL(NULLIF(CONCAT(au.user_m_name, '' ''), '' ''), '''') + au.user_l_name = a.approved_by
 	            LEFT JOIN source_counterparty sc ON sc.counterparty_id  =  a.counterparty_credit_info_id 
 	            INNER JOIN counterparty_credit_info cci ON  cci.Counterparty_id = sc.source_counterparty_id
 	            LEFT JOIN source_counterparty sc1 ON sc1.counterparty_id  =  a.internal_counterparty
 	            LEFT JOIN contract_group cg  ON cg.source_contract_id = a.contract_id
 	            LEFT JOIN counterparty_credit_enhancements cce ON cce.counterparty_credit_info_id = cci.counterparty_credit_info_id 
					AND ISNULL(cce.internal_counterparty, -1) = ISNULL(sc1.source_counterparty_id, -1)  
					AND ISNULL(cce.contract_id, -1) = ISNULL(cg.contract_id, -1) 
					AND cce.enhance_type = sdv.value_id AND cce.eff_date = a.eff_date
 				OUTER APPLY (
						SELECT temp_id 
						FROM #error_status es
						INNER JOIN message_log_template mlt 
							ON mlt.message_number = es.error_number
						WHERE a.temp_id = es.temp_id
							AND mlt.message_status = ''ERROR''
						) es				 
				WHERE es.temp_id IS NULL
					AND cce.counterparty_credit_enhancement_id IS NULL'
 	EXEC (@sql)					
END

IF @table_name = 'ixp_counterparty_contract_address_template'
BEGIN
	/*Static query string is build at begining of this script. 
	Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
	*/
	SET @destination_table_name = N'counterparty_contract_address'
	SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
	EXEC(@sql)
	
	--Execute to populate data into #destination_column_name
	EXEC(@dest_col_qry)

	--Collect destination column to be excluded from update statement.
	SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
	FROM #destination_column_name

	/***update user date to sql date***/
		
	EXEC('UPDATE a
		  SET contract_start_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.contract_start_date = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET contract_end_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.contract_end_date = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET contract_date = CAST(dd.sql_date_value AS DATE)
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.contract_date = dd.user_date
	')	
	/***END OF date update***/

	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''threshold_provided'',''threshold_provided'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''threshold_received'',''threshold_received'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''comments'',''comments'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''min_transfer_amount'',''min_transfer_amount'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''billing_start_month'',''billing_start_month'')')
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''counterparty_contract_address'',''payment_days'',''payment_days'')')
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),  --error rows
			(''contract_group'', ''contract_id'', ''b.source_contract_id = a.contract_id'', ''e''),  --error rows
			(''source_counterparty'', ''internal_counterparty_id'', ''b.counterparty_id = a.internal_counterparty_id AND b.int_ext_flag = ''''i'''''', ''w''),
			(''static_data_value'', ''rounding'', ''b.code = a.rounding AND b.type_id = 39300'', ''w''),
			(''static_data_value'', ''margin_provision'', ''b.code = a.margin_provision AND b.type_id = 38800'', ''w''),
			(''static_data_value'', ''contract_status'', ''b.code = a.contract_status AND b.type_id = 1900'', ''w''),
			(''static_data_value'', ''offset_method'', ''b.code = a.offset_method AND b.type_id = 43500'', ''w''),
			(''source_price_curve_def'', ''interest_rate'', ''b.curve_name = a.interest_rate AND b.source_curve_type_value_id IN (577,579)'', ''w''),
			(''static_data_value'', ''interest_method'', ''b.code = a.interest_method AND b.type_id = 105600'', ''w''),
			(''static_data_value'', ''counterparty_trigger'', ''b.code = a.counterparty_trigger AND b.type_id = 32800'', ''w''),
			(''static_data_value'', ''company_trigger'', ''b.code = a.company_trigger AND b.type_id = 32900'', ''w''),
			(''counterparty_contacts'', ''receivables'', ''b.name = a.receivables AND b.contact_type = -32203'', ''w''),
			(''counterparty_contacts'', ''payables'', ''b.name = a.payables AND b.contact_type = -32202'', ''w''),
			(''counterparty_contacts'', ''confirmation'', ''b.name = a.confirmation AND b.contact_type = -32204'', ''w''),
			(''source_counterparty'', ''secondary_counterparty'', ''b.counterparty_id = a.secondary_counterparty'', ''w''),
			(''application_users'', ''analyst'', ''b.user_f_name + '''' '''' + b.user_l_name = a.analyst'', ''w''),
			(''time_zones'', ''time_zone'', ''b.timezone_name = a.time_zone'', ''w''),
			(''static_data_value'', ''invoice_due_date'', ''b.code = a.invoice_due_date AND b.type_id = 20000'', ''w''),
			(''static_data_value'', ''holiday_calendar_id'', ''b.code = a.holiday_calendar_id AND b.type_id = 10017'', ''w'')
	')
	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

 	-- validation for non existent static data 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  		  
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''",
                "column_value": "'' + a.apply_netting_rule + ''"
            }
          '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''apply_netting_rule''
          ) scm
		  WHERE a.apply_netting_rule NOT IN (''yes'', ''no'',''y'',''n'')
				AND NULLIF(a.apply_netting_rule, '' '') IS NOT NULL
	')	

	-- validation for non existent static data 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  		  
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''",
                "column_value": "'' + a.contract_active + ''"
            }
          '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''contract_active''
          ) scm
		  WHERE a.contract_active NOT IN (''yes'', ''no'',''y'',''n'')
				AND NULLIF(a.contract_active, '' '') IS NOT NULL
	')	

	-- Invalid month
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,		  		  
		  ''
            {
                "column_name": "'' + scm.source_column_name + ''",
                "column_value": "'' + a.billing_start_month + ''"
            }
          '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
		  CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''billing_start_month''
          ) scm
		  WHERE a.billing_start_month NOT BETWEEN 1 AND 12
		  
		  UPDATE ' + @import_temp_table_name + '
			SET billing_start_month = NULL
		  WHERE billing_start_month NOT BETWEEN 1 AND 12
	')
	
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
		') 
    
 		
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE cca
				SET
					address1 = a.address1,
					address2 = a.address2,
					address3 = a.address3,
					address4 = a.address4,
					contract_id = cg.contract_id,
					contract_active =	ISNULL(	
											CASE 
												WHEN a.contract_active IN (''yes'', ''y'') 
													THEN ''y''
												WHEN a.contract_active IN (''no'', ''n'')
													THEN ''n''
												ELSE
													NULL
											END
										, ''y''),
					email = a.email,
					fax = a.fax,
					telephone = a.telephone,
					counterparty_full_name = a.counterparty_full_name,
					contract_start_date = a.contract_start_date,
					contract_end_date = a.contract_end_date,
					apply_netting_rule = CASE WHEN a.apply_netting_rule = ''Yes'' THEN ''y'' WHEN a.apply_netting_rule = ''y'' THEN ''y'' ELSE ''n'' END,
					rounding = sdv1.value_id,
					margin_provision = sdv2.value_id,
					internal_counterparty_id = sc2.source_counterparty_id,
					billing_start_month = a.billing_start_month,
					interest_rate = spcd.source_curve_def_id,
					interest_method = sdv_interest.value_id,
					counterparty_trigger = sdv_ct.value_id, 
					company_trigger = sdv_comt.value_id, 
					payment_days = a.payment_days, 
					holiday_calendar_id = sdv_holiday.value_id,					
					invoice_due_date = sdv_pay_rule.value_id,
					contract_status = sdv_contract_status.value_id,
					contract_date = a.contract_date,
					threshold_provided = a.threshold_provided,
					threshold_received = a.threshold_received,
					offset_method = sdv_offset_method.value_id,
					secondary_counterparty = sc_sec.source_counterparty_id,
					analyst = au_ast.user_login_id,
					comments = a.comments,
					min_transfer_amount = a.min_transfer_amount,
					time_zone = tz.timezone_id
 	        '			  
			SET @sql +=  '     FROM ' + @import_temp_table_name + ' a
 	            INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id 
 	            INNER JOIN contract_group cg ON cg.source_contract_id = a.contract_id
				LEFT JOIN source_counterparty sc2 ON sc2.counterparty_id = a.internal_counterparty_id
				LEFT JOIN source_counterparty sc_sec ON sc_sec.counterparty_id = a.secondary_counterparty
				LEFT JOIN application_users au_ast ON au_ast.user_f_name + '' '' + au_ast.user_l_name = a.analyst
				LEFT JOIN time_zones tz ON tz.timezone_name = a.time_zone
				LEFT JOIN static_data_value sdv1 ON sdv1.code = a.rounding 
					AND sdv1.type_id = 39300
				LEFT JOIN static_data_value sdv2 ON sdv2.code = a.margin_provision 
					AND sdv2.type_id = 38800
 	            INNER JOIN counterparty_contract_address cca ON cca.counterparty_id = sc.source_counterparty_id
 					AND cca.contract_id = cg.contract_id
				LEFT JOIN static_data_value sdv_holiday ON sdv_holiday.code = a.holiday_calendar_id
					AND sdv_holiday.type_id = 10017
				LEFT JOIN static_data_value sdv_pay_rule ON sdv_pay_rule.code = a.invoice_due_date
					AND sdv_pay_rule.type_id = 20000
				LEFT JOIN static_data_value sdv_contract_status ON sdv_contract_status.code = a.contract_status
					AND sdv_contract_status.type_id = 1900
				LEFT JOIN static_data_value sdv_offset_method ON sdv_offset_method.code = a.offset_method
					AND sdv_offset_method.type_id = 43500
				OUTER APPLY (
					SELECT source_curve_def_id 
					FROM source_price_curve_def spcd
					INNER JOIN ' + @import_temp_table_name + ' a	
						ON spcd.curve_name = a.interest_rate
					INNER JOIN static_data_value sdv 
						ON spcd.source_curve_type_value_id = sdv.value_id
						AND sdv.value_id IN (577, 579)
				) spcd			
				LEFT JOIN static_data_value sdv_ct ON sdv_ct.code = a.counterparty_trigger
					AND sdv_ct.type_id = 32800
				LEFT JOIN static_data_value sdv_comt ON sdv_comt.code = a.company_trigger
					AND sdv_comt.type_id = 32900
				LEFT JOIN static_data_value sdv_interest ON sdv_interest.code = a.interest_method 
					AND sdv_interest.type_id = 105600				
				OUTER APPLY (
								SELECT temp_id 
								FROM #error_status es
								INNER JOIN message_log_template mlt 
									ON mlt.message_number = es.error_number
								WHERE a.temp_id = es.temp_id
									AND mlt.message_status = ''ERROR''
						   ) es				 
				WHERE es.temp_id IS NULL		
					AND cca.counterparty_contract_address_id IS NOT NULL
				'
	
	
	IF @dest_columns_to_exclude IS NOT NULL
	BEGIN		
		SELECT @rebuild_updt_stmt = update_query
			, @rebuild_status = output_status 
		FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
		--SELECT @rebuild_updt_stmt , @rebuild_status

		IF @rebuild_status = 'success'
		BEGIN
 			EXEC(@rebuild_updt_stmt)
		END
		ELSE
		BEGIN
			RAISERROR
				(N'Failed to rebuild update statement. Check update statement',
				10, -- Severity.
				1 -- State.
				);
		END	
	END	
	ELSE
	BEGIN
	EXEC(@sql)
	END
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  INSERT INTO counterparty_contract_address (
					address1,
					address2,
					address3,
					address4,
					contract_id,
					contract_active,
					email,
					fax,
					telephone,
					counterparty_id,
					counterparty_full_name,
					contract_start_date,
					contract_end_date,
					apply_netting_rule,
					rounding,
					margin_provision,
					internal_counterparty_id,
					billing_start_month,
					interest_rate,
					interest_method,
					counterparty_trigger, 
					company_trigger, 
					payment_days, 
					holiday_calendar_id, 
					receivables,
					payables, 
					confirmation,
					invoice_due_date,
					contract_status,
					contract_date,
					threshold_provided,
					threshold_received,
					offset_method,
					secondary_counterparty,
					analyst,
					comments,
					min_transfer_amount,
					time_zone
				)
				SELECT a.address1,
						a.address2,
						a.address3,
						a.address4,
						cg.contract_id,
						ISNULL(	CASE
									WHEN a.contract_active IN (''yes'', ''y'')
										THEN ''y''
									WHEN a.contract_active IN (''no'', ''n'')
										THEN ''n''
									ELSE
										NULL
								END
						, ''y''),
						a.email,
						a.fax,
						a.telephone,
						sc.source_counterparty_id,
						a.counterparty_full_name,
						a.contract_start_date,
						a.contract_end_date,
						CASE WHEN a.apply_netting_rule = ''Yes'' THEN ''y'' WHEN a.apply_netting_rule = ''y'' THEN ''y'' ELSE ''n'' END,
						sdv1.value_id,
						sdv2.value_id,
						sc2.source_counterparty_id,
						a.billing_start_month,
						spcd.source_curve_def_id,--a.interest_rate,
						sdv_interest.value_id,
						sdv_ct.value_id, 
						sdv_comt.value_id, 
						a.payment_days, 
						sdv_holiday.value_id, 
						cc1.counterparty_contact_id,
						cc3.counterparty_contact_id,
						cc2.counterparty_contact_id,
						sdv_pay_rule.value_id,
						sdv_contract_status.value_id,
						a.contract_date,
						a.threshold_provided,
					    a.threshold_received,
					    sdv_offset_method.value_id,
						sc_sec.source_counterparty_id,
						au_ast.user_login_id,
						a.comments,
						a.min_transfer_amount,
						tz.timezone_id
 	       '			  
			SET @sql +=  '      FROM ' + @import_temp_table_name + ' a
 	            INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id 
 	            INNER JOIN contract_group cg ON cg.source_contract_id = a.contract_id
				LEFT JOIN source_counterparty sc2 ON sc2.counterparty_id = a.internal_counterparty_id 
					AND sc2.int_ext_flag = ''i''
				LEFT JOIN source_counterparty sc_sec ON sc_sec.counterparty_id = a.secondary_counterparty
				LEFT JOIN application_users au_ast ON au_ast.user_f_name + '' '' + au_ast.user_l_name = a.analyst
				LEFT JOIN time_zones tz ON tz.timezone_name = a.time_zone
				LEFT JOIN static_data_value sdv1 
					ON sdv1.code = a.rounding 
					AND sdv1.type_id = 39300
				LEFT JOIN static_data_value sdv2 
					ON sdv2.code = a.margin_provision 
					AND sdv2.type_id = 38800
 	            LEFT JOIN counterparty_contract_address cca 
 					ON cca.counterparty_id = sc.source_counterparty_id
 					AND cca.contract_id = cg.contract_id
				LEFT JOIN static_data_value sdv_holiday
					ON sdv_holiday.code = a.holiday_calendar_id
					AND sdv_holiday.type_id = 10017
				LEFT JOIN static_data_value sdv_pay_rule 
					ON sdv_pay_rule.code = a.invoice_due_date 
					AND sdv_pay_rule.type_id = 20000
				LEFT JOIN counterparty_contacts cc3 ON CC3.counterparty_id = sc.source_counterparty_id
 					AND cc3.name = a.payables 
					AND cc3.contact_type = -32202	
				LEFT JOIN counterparty_contacts cc1 ON cc1.counterparty_id = sc.source_counterparty_id 					
					AND cc1.name = a.receivables 
					AND cc1.contact_type = -32203	
				LEFT JOIN counterparty_contacts cc2 ON cc2.counterparty_id = sc.source_counterparty_id 					
					AND cc2.name = a.confirmation 
					AND cc2.contact_type = -32204
				LEFT JOIN static_data_value sdv_contract_status
					ON sdv_contract_status.code = a.contract_status
					AND sdv_contract_status.type_id = 1900
				LEFT JOIN static_data_value sdv_offset_method
					ON sdv_offset_method.code = a.offset_method
					AND sdv_offset_method.type_id = 43500
				OUTER APPLY (
					SELECT source_curve_def_id 
					FROM source_price_curve_def spcd
					INNER JOIN ' + @import_temp_table_name + ' a	
						ON spcd.curve_name = a.interest_rate
					INNER JOIN static_data_value sdv 
						ON spcd.source_curve_type_value_id = sdv.value_id 
						AND sdv.value_id IN (577, 579)
				) spcd	
				LEFT JOIN static_data_value sdv_ct
					ON sdv_ct.code = a.counterparty_trigger
					AND sdv_ct.type_id = 32800
				LEFT JOIN static_data_value sdv_comt
					ON sdv_comt.code = a.company_trigger
					AND sdv_comt.type_id = 32900
				LEFT JOIN static_data_value sdv_interest 
					ON sdv_interest.code = a.interest_method 
					AND sdv_interest.type_id = 105600				
				OUTER APPLY (
								SELECT temp_id 
								FROM #error_status es
								INNER JOIN message_log_template mlt 
									ON mlt.message_number = es.error_number
								WHERE a.temp_id = es.temp_id
									AND mlt.message_status = ''ERROR''
						   ) es				 
				WHERE es.temp_id IS NULL
					AND cca.counterparty_contract_address_id IS NULL
				'
	EXEC(@sql)	
END
IF @table_name = 'ixp_rec_rps_import_template'
BEGIN 
	/***update user date to sql date***/
		
	EXEC('UPDATE a
		  SET delivery_date = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.delivery_date = dd.user_date
	')	

	EXEC('IF NOT EXISTS(SELECT 1 FROM adiha_process.sys.columns WHERE [name] = N''certificate_from_part'' AND [object_id] = OBJECT_ID(N''' + @import_temp_table_name + '''))
		BEGIN
			ALTER TABLE ' +  @import_temp_table_name + ' ADD certificate_from_part NVARCHAR(500)
		END

		IF NOT EXISTS(SELECT 1 FROM adiha_process.sys.columns WHERE [name] = N''certificate_to_part'' AND [object_id] = OBJECT_ID(N''' + @import_temp_table_name + '''))
		BEGIN
			ALTER TABLE ' +  @import_temp_table_name + ' ADD certificate_to_part NVARCHAR(500)
		END
	')
	
	EXEC('UPDATE ' +  @import_temp_table_name + ' SET certificate_from_part = REVERSE(SUBSTRING(REVERSE(certificate_from), CHARINDEX(''-'', REVERSE(certificate_from), 1) +1, 1000)) ')
	EXEC('UPDATE ' +  @import_temp_table_name + ' SET certificate_to_part = REVERSE(SUBSTRING(REVERSE(certificate_to), CHARINDEX(''-'', REVERSE(certificate_to), 1) +1, 1000)) ')
	
	/***END OF date update***/
		
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''compliance_period'', ''b.code = a.compliance_period AND b.type_id = 10092'', ''e''),  --error rows
			(''static_data_value'', ''retirement_types'', ''b.code = a.retirement_types AND b.type_id = 10013'', ''e''),  --error rows		
			(''static_data_value'', ''jurisdiction'', ''b.code = a.jurisdiction AND b.type_id = 10002'', ''e''),  --error rows
			(''static_data_value'', ''tier'', ''b.code = a.tier AND b.type_id = 15000'', ''e''),  --error rows
			(''source_counterparty'', ''transferor_counterparty'', ''b.counterparty_id = a.transferor_counterparty AND a.transferor_counterparty IS NOT NULL'', ''w''), 
			(''source_counterparty'', ''transferee_counterparty'', ''b.counterparty_id = a.transferee_counterparty'', ''e'')
	')
		
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'	
			
 	-- Data Missing Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
		  10001,
		  CASE 
			WHEN a.compliance_period IS NULL AND a.retirement_types =''RPS'' THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Compliance Period for Retirement Types:RPS'')
			WHEN a.vintage_month IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Month'')
			WHEN a.vintage_year IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Year'')	
			WHEN a.volume IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume'')	
			WHEN a.jurisdiction IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction'')	
			WHEN a.tier IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Tier'')	
			WHEN a.certificate_from IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Certificate From'')	
			WHEN a.certificate_to IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Certificate To'')	
			WHEN a.sequence_from IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Sequence From'')
			WHEN a.sequence_to IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Sequence To'')	
			WHEN a.transferee_counterparty IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Transferee Counterparty'')
			WHEN a.retirement_types IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Retirement Types'')				
		  END
 		  ,a.import_file_name
			FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
			  AND ((a.compliance_period IS NULL AND a.retirement_types =''RPS'')
				   OR a.vintage_month IS NULL
				   OR a.vintage_year IS NULL
				   OR a.volume IS NULL
				   OR a.jurisdiction IS NULL
				   OR a.tier IS NULL
				   OR a.certificate_from IS NULL
				   OR a.certificate_to IS NULL
				   OR a.sequence_from IS NULL
				   OR a.sequence_to IS NULL
				   OR a.transferee_counterparty IS NULL
				   OR a.retirement_types IS NULL				 
				)
	')	

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Compliance Period''),''<column_value>'', a.compliance_period),
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		WHERE #error_status.temp_id IS NULL AND a.compliance_period IS NOT NULL
			AND ISNUMERIC(a.compliance_period) = 0'
	)

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Year''),''<column_value>'', a.vintage_year),
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		WHERE #error_status.temp_id IS NULL 
			AND ISNUMERIC(a.vintage_year) = 0'
	)
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Vintage Month''),''<column_value>'', a.vintage_month),
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		WHERE #error_status.temp_id IS NULL 
			AND ISNUMERIC(a.vintage_month) = 0'
	)
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Delivery Date''),''<column_value>'', a.delivery_date),
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		WHERE #error_status.temp_id IS NULL 
			AND ISDATE(a.delivery_date) = 0 AND a.delivery_date IS NOT NULL'
		)
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
		SELECT a.temp_id,
			NULL,
			''Either Generator or Transferor Counterparty is missing.'',
			a.import_file_name, ''Error'', ''Data Error'', ''Please correct data and re-import.''
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
			ON a.temp_id = #error_status.temp_id 						  
 		WHERE #error_status.temp_id IS NULL AND a.transferor_counterparty IS NULL AND a.generator IS NULL '
		)

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,		  
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Volume''),''<column_value>'', a.volume),
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a		
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
 		WHERE #error_status.temp_id IS NULL AND ISNUMERIC(a.Volume) = 0 ')
	
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
		10013,		  
		dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Generator''),''<column_value>'', a.generator),
		a.import_file_name
	FROM ' + @import_temp_table_name + ' a		
	LEFT JOIN rec_generator rg ON rg.code = a.generator 
	LEFT JOIN gis_certificate gc ON gc.unit_id = a.generator 
	LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
 	WHERE #error_status.temp_id IS NULL AND a.generator IS NOT NULL AND (rg.generator_id IS NULL AND gc.source_certificate_number IS NULL) ')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,		  
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Sequence From''),''<column_value>'', a.sequence_from),
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		WHERE ISNUMERIC(a.sequence_from) = 0 AND #error_status.temp_id IS NULL')

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10004,		  
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Sequence To''),''<column_value>'',a.sequence_to),
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a		
		LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
 		WHERE #error_status.temp_id IS NULL AND ISNUMERIC(a.sequence_to) = 0 ')

	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE ISNULL(mlt.message_status, #error_status.message_status) = ''Error''
		') 

	DECLARE @complicance_year_start DATETIME , @complicance_year_end DATETIME , @product_view_proc_id NVARCHAR(100)
	, @prod_view_process_table  NVARCHAR(200), @cs_jurisdiction_id NVARCHAR(MAX) , @cs_tier_id NVARCHAR(MAX)
	SET @product_view_proc_id = dbo.FNAGetNewID()
	
	IF OBJECT_ID('tempdb..#compliance_year') IS NOT NULL
		DROP TABLE #compliance_year
	CREATE TABLE #compliance_year(
		complicance_year_start NVARCHAR(5) COLLATE DATABASE_DEFAULT,
		complicance_year_end NVARCHAR(5) COLLATE DATABASE_DEFAULT,
		tier_value_ids NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		juridiction_ids NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
	)

	EXEC('
	INSERT INTO #compliance_year(complicance_year_start, complicance_year_end)
	SELECT MIN(term_start), MAX(term_end) FROM (
		SELECT MIN(compliance_period) term_start, MAX(compliance_period) term_end, temp_id FROM ' + @import_temp_table_name + ' GROUP BY temp_id
		UNION  
		SELECT MIN(vintage_year) term_start, MAX(vintage_year) term_end, temp_id FROM ' + @import_temp_table_name + ' GROUP BY temp_id
	) a
	
	DECLARE @cs_jurisdiction_id NVARCHAR(MAX), @cs_tier_id NVARCHAR(MAX)
	SELECT 
	@cs_jurisdiction_id = COALESCE(@cs_jurisdiction_id + '', '', '''') + CAST(b.jurisdiction_id AS NVARCHAR(20)), 
	@cs_tier_id = COALESCE(@cs_tier_id + '', '', '''') + CAST(b.tier_id AS NVARCHAR(20))	
	FROM	
		(SELECT DISTINCT sdv.value_id jurisdiction_id, sdvt.value_id tier_id
			FROM ' + @import_temp_table_name + '  a
			LEFT JOIN static_data_value sdv ON sdv.code = a.jurisdiction and sdv.type_id = 10002
			LEFT JOIN static_data_value sdvt ON sdvt.code = a.tier and sdvt.type_id = 15000
	) b

	UPDATE #compliance_year SET tier_value_ids = @cs_tier_id, juridiction_ids = @cs_jurisdiction_id
	') 
	 
	/* 
	Substracted 1 from Term Start and added 1 in Term End to collect deals which are eligible in Fiscal Year for 
	Retirement type = Sold/Transfer with deal match_type (source_deal_header) = Yearly
	*/
	
	SELECT @complicance_year_start = CONVERT(DATETIME, CAST(complicance_year_start - 1 AS NVARCHAR(5)) + '-01-01' , 120), 
		@complicance_year_end = CONVERT(DATETIME, CAST(complicance_year_end + 1 AS NVARCHAR(5)) + '-12-31' , 120),
		@cs_jurisdiction_id = juridiction_ids,
		@cs_tier_id = tier_value_ids
	FROM #compliance_year
	
	SET @prod_view_process_table = dbo.FNAProcessTableName('product_view', dbo.FNADBUser(), @product_view_proc_id)
	
	EXEC spa_product_information @term_start = @complicance_year_start, 
	@term_end = @complicance_year_end, @process_id = @product_view_proc_id, 
	@jurisdiction_id = @cs_jurisdiction_id, @tier_id = @cs_tier_id,
	@call_from = 'import'

	EXEC('IF NOT EXISTS(SELECT 1 FROM adiha_process.sys.columns WHERE [name] = N''certificate_from_part'' AND [object_id] = OBJECT_ID(N''' + @prod_view_process_table + '''))
		BEGIN
			ALTER TABLE ' +  @prod_view_process_table + ' ADD certificate_from_part NVARCHAR(500)
		END

		IF NOT EXISTS(SELECT 1 FROM adiha_process.sys.columns WHERE [name] = N''certificate_to_part'' AND [object_id] = OBJECT_ID(N''' + @prod_view_process_table + '''))
		BEGIN
			ALTER TABLE ' +  @prod_view_process_table + ' ADD certificate_to_part NVARCHAR(500)
		END
	')
	
	EXEC('UPDATE ' +  @prod_view_process_table + ' SET certificate_from_part = REVERSE(SUBSTRING(REVERSE(gis_certificate_number_from), CHARINDEX(''-'', REVERSE(gis_certificate_number_from), 1) +1, 1000)) ')
	EXEC('UPDATE ' +  @prod_view_process_table + ' SET certificate_to_part = REVERSE(SUBSTRING(REVERSE(gis_certificate_number_to), CHARINDEX(''-'', REVERSE(gis_certificate_number_to), 1) +1, 1000)) ')

	SET @sql =  ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 	    SELECT a.temp_id,
 	        NULL,
 	            ''Certificate '' + a.certificate_from + '' to '' + a.certificate_to + '' is already in use in Link ID '' + CAST(mdhi.link_id AS NVARCHAR(10)),
 	            a.import_file_name, ''Error'', ''Data Error'', ''Please correct data and re-import.''
 	FROM 
	' + @import_temp_table_name + ' a
	INNER JOIN ' + @prod_view_process_table + ' b 
		ON b.tier_type = a.tier AND b.jurisdiction = a.jurisdiction AND YEAR(b.term_start) = a.vintage_year
		AND MONTH(b.term_start) = a.vintage_month 
		AND a.sequence_from BETWEEN b.sequence_from AND b.sequence_to  
		AND a.sequence_to BETWEEN b.sequence_from AND b.sequence_to 
		AND a.certificate_from_part = b.certificate_from_part
		AND a.certificate_to_part = b.certificate_to_part
	LEFT JOIN rec_generator rg ON rg.code = a.generator
	LEFT JOIN gis_certificate gc ON gc.unit_id = a.generator
	LEFT jOIN source_counterparty sc ON sc.counterparty_id = a.transferor_counterparty
	INNER JOIN source_deal_header sdh ON sdh.source_Deal_header_id = b.source_Deal_header_id
		AND sdh.header_buy_sell_flag = ''b'' AND sdh.is_environmental = ''y''
	LEFT JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id 
		AND sdd.source_deal_detail_id = b.source_deal_detail_id
	INNER JOIN matching_header_detail_info mdhi ON mdhi.source_deal_detail_id_from = b.source_deal_detail_id 
		AND mdhi.state_value_id = b.jurisdiction_id AND mdhi.tier_value_id = b.tier_id
	WHERE ( 
			(a.generator IS NOT NULL AND (ISNULL(rg.generator_id, -1) = ISNULL(sdh.generator_id, -1) OR ISNULL(gc.source_deal_header_id, -1) = sdd.source_deal_detail_id) ) 
			OR 
			(a.transferor_counterparty IS NOT NULL AND ISNULL(sc.source_counterparty_id, -1) = ISNULL(sdh.counterparty_id, -1) )
		)			
	')
	EXEC(@sql)	
	-- Validation for Buy deals with combination generator, transferor_counterparty, vintage_year, vintage_month, tier, jurisdiction not present in the system 
	SET @sql =  ('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 	      SELECT aa.temp_id,
 	            NULL,
 	             ''Buy deal doesn''''t exists for Term: '' + aa.vintage_year + ''/'' + aa.vintage_month + '', Jurisdiction: '' + aa.jurisdiction + '', Tier: '' + aa.tier + '', Generator: '' + ISNULL(aa.generator, '''') + '', Counterparty: '' + ISNULL(aa.transferor_counterparty, '''') + '', Certificate From: '' + aa.certificate_from + '', Certificate To: '' + aa.certificate_to + '' and Volume: '' + aa.volume + '' in system.'',
 	             aa.import_file_name, ''Error'', ''Data Error'', ''Please correct data and re-import.''
 		FROM 
			(SELECT generator, transferor_counterparty, vintage_year, vintage_month, tier, jurisdiction, volume, temp_id, import_file_name, certificate_from, certificate_to
			FROM ' + @import_temp_table_name + '
			EXCEPT
			SELECT DISTINCT a.generator, a.transferor_counterparty, a.vintage_year, a.vintage_month, a.tier, a.jurisdiction, a.volume, a.temp_id, a.import_file_name, a.certificate_from, a.certificate_to
			FROM 
			' + @import_temp_table_name + ' a
			INNER JOIN ' + @prod_view_process_table + ' b 
				ON b.tier_type = a.tier AND b.jurisdiction = a.jurisdiction AND YEAR(b.term_start) = a.vintage_year
				AND MONTH(b.term_start) = a.vintage_month 
				AND a.sequence_from BETWEEN b.sequence_from AND b.sequence_to  
				AND a.sequence_to BETWEEN b.sequence_from AND b.sequence_to 
				AND a.certificate_from_part = b.certificate_from_part
				AND a.certificate_to_part = b.certificate_to_part
			LEFT JOIN rec_generator rg ON rg.code = a.generator
			LEFT JOIN gis_certificate gc ON gc.unit_id = a.generator
			LEFT jOIN source_counterparty sc ON sc.counterparty_id = a.transferor_counterparty
			INNER JOIN source_deal_header sdh ON sdh.source_Deal_header_id = b.source_Deal_header_id
				AND sdh.header_buy_sell_flag = ''b'' AND sdh.is_environmental = ''y''
			LEFT JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id 
				AND sdd.source_deal_detail_id = b.source_deal_detail_id
			WHERE sdd.volume_left >= CAST(a.volume AS NUMERIC(38,28)) 
			AND ( 
					(a.generator IS NOT NULL AND (ISNULL(rg.generator_id, -1) = ISNULL(sdh.generator_id, -1) OR ISNULL(gc.source_deal_header_id, -1) = sdd.source_deal_detail_id) ) 
					OR 
					(a.transferor_counterparty IS NOT NULL AND ISNULL(sc.source_counterparty_id, -1) = ISNULL(sdh.counterparty_id, -1) )
				)
			) aa
		 ')	
	
	EXEC(@sql)
	--Validation end
	
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		LEFT JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE ISNULL(mlt.message_status, #error_status.message_status) = ''Error''
		') 

	IF OBJECT_ID('tempdb..#deal_header_detail') IS NOT NULL
		DROP TABLE #deal_header_detail
	CREATE TABLE #deal_header_detail
	(
		source_deal_header_id INT, source_deal_detail_id INT, sub_book_id INT, deal_date DATE, trader_id INT,
		counterparty_id INT, physical_financial_flag NCHAR(1) COLLATE DATABASE_DEFAULT,
		state_value_id INT, tier_value_id INT, product_classification INT,
		pricing_type INT, template_id INT, term_start DATE, term_end DATE, 
		curve_id INT, deal_volume_uom_id INT, deal_volume_frequency NCHAR(1) COLLATE DATABASE_DEFAULT,
		status INT, source_deal_type_id INT, commodity_id INT, leg INT, match_volume INT, assignment_type INT,
		buy_deal_expiration_date DATE, delivery_date DATE, sequence_from INT , sequence_to INT
	)

	IF OBJECT_ID('tempdb..#inserted_deal_header') IS NOT NULL
		DROP TABLE #inserted_deal_header
	CREATE TABLE #inserted_deal_header
	(
		temp_id INT,
		sell_source_deal_header_id INT,
		sell_source_deal_detail_id INT, 
		buy_source_deal_header_id INT, 
		buy_source_deal_detail_id INT, 
		quantity FLOAT,
		assignment_type INT,
		vintage_year INT,
		vintage_month INT,
		buy_deal_expiration_date DATE, 
		tier_value_id INT,
		state_value_id INT,
		sequence_from INT,
		sequence_to INT
	)
--select * from adiha_process.dbo.product_view_farrms_admin_6F15E357_D57A_42A1_9A10_31C5F824C0C2
	-- Collect BUY and Sell deals (which haven't been matched) which are already available in the system.
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  		
		SELECT DISTINCT IDENTITY (INT, 1, 1) ID,  sell_deal.source_deal_header_id sell_source_deal_header_id, sell_deal.source_deal_detail_id sell_deal_source_deal_detail_id
		, buy_deal.source_deal_header_id buy_source_deal_header_id, buy_deal.source_deal_detail_id buy_source_deal_detail_id,
		a.volume quantity, sell_deal.volume_left sell_volume_left, buy_deal.volume_left buy_volume_left, sell_deal.deal_date,
		sdv_agn_typ.value_id assignment_type, a.vintage_year, a.vintage_month,
		buy_deal.certificate_expiration_date_from buy_deal_expiration_date, 
		buy_deal.tier_id tier_value_id, buy_deal.jurisdiction_id state_value_id, a.sequence_from, a.sequence_to, a.temp_id
		INTO #unfiltered_inserted_deal_header
		FROM ' + @import_temp_table_name + ' a
		OUTER APPLY (		
			SELECT DISTINCT inner_buy_deal.source_deal_header_id, inner_buy_deal.certificate_expiration_date_from, 
			inner_buy_deal.tier_id, inner_buy_deal.jurisdiction_id, sdh_buy.generator_id, sdh_buy.counterparty_id, sdd_buy.source_deal_detail_id, sdd_buy.volume_left
			FROM ' + @prod_view_process_table + ' inner_buy_deal
			INNER JOIN source_deal_header sdh_buy ON sdh_buy.source_deal_header_id = inner_buy_deal.source_deal_header_id AND sdh_buy.header_buy_sell_flag = ''b''
					AND sdh_buy.is_environmental = ''y''
			INNER JOIN source_deal_detail sdd_buy ON sdd_buy.source_deal_header_id = sdh_buy.source_deal_header_id 
				AND sdd_buy.source_deal_detail_id = inner_buy_deal.source_deal_detail_id
			WHERE YEAR(inner_buy_deal.term_start) = a.vintage_year 
				AND MONTH(inner_buy_deal.term_start) = a.vintage_month 
				AND a.tier= inner_buy_deal.tier_type
				AND a.jurisdiction = inner_buy_deal.jurisdiction
				AND a.sequence_from BETWEEN inner_buy_deal.sequence_from AND inner_buy_deal.sequence_to  
				AND a.sequence_to BETWEEN inner_buy_deal.sequence_from AND inner_buy_deal.sequence_to 
				AND a.certificate_from_part = inner_buy_deal.certificate_from_part
				AND a.certificate_to_part = inner_buy_deal.certificate_to_part
		) buy_deal	
		LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.transferor_counterparty			
		INNER JOIN source_counterparty sell_counterparty ON sell_counterparty.counterparty_id = a.transferee_counterparty	
		OUTER APPLY (SELECT value_id FROM static_data_value WHERE code = ''Compliance Target'' AND type_id = 107400) sdv_prod_clas		  
 		INNER JOIN static_data_value sdv_agn_typ ON sdv_agn_typ.code = a.retirement_types AND sdv_agn_typ.type_id = 10013 
		CROSS APPLY (	
			SELECT DISTINCT inner_sell_deal.source_deal_header_id, sell_sdd.source_deal_detail_id, sell_sdd.volume_left,sdh_sell.deal_date
			FROM ' + @prod_view_process_table + ' inner_sell_deal 
			INNER JOIN source_deal_header sdh_sell ON sdh_sell.source_deal_header_id = inner_sell_deal.source_deal_header_id 
			AND sdh_sell.header_buy_sell_flag = ''s'' AND sdh_sell.is_environmental = ''y'' 
			AND ISNULL(sdh_sell.product_classification, -1) = CASE WHEN a.retirement_types = ''RPS'' THEN sdv_prod_clas.value_id
				ELSE -1 END
			AND sdh_sell.counterparty_id = sell_counterparty.source_counterparty_id	 
			LEFT JOIN state_properties sp ON sp.state_value_id = inner_sell_deal.jurisdiction_id
			INNER JOIN source_deal_detail sell_sdd ON sell_sdd.source_deal_header_id = sdh_sell.source_deal_header_id
			AND
			((a.retirement_types = ''RPS'' AND YEAR(sell_sdd.term_start) = CAST(a.compliance_period AS INT))
			OR
			(a.retirement_types = ''Sold/Transfer'' AND sell_sdd.term_start = CASE 
								WHEN sdh_sell.match_type = ''m'' 
									THEN CONVERT(DATE, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120) 
								WHEN sdh_sell.match_type = ''y'' 
									THEN 
										CASE 
										WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
											THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
										ELSE 
											CASE 
											WHEN a.vintage_month > sp.calendar_to_month 
												THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
											ELSE CONVERT(DATE, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-01-01'' , 120) 
											END
										END
								END)
			)

			AND (
			(a.retirement_types = ''RPS'' AND YEAR(sell_sdd.term_end) = CAST(a.compliance_period AS INT ) )
			OR
			(a.retirement_types = ''Sold/Transfer'' AND sell_sdd.term_end = CASE 
							WHEN sdh_sell.match_type = ''m'' 
								THEN EOMONTH(CONVERT(DATETIME, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120)) 
							WHEN sdh_sell.match_type = ''y'' 
								THEN
									CASE 
									WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
										THEN CONVERT(DATE, a.vintage_year + ''-12-31'' , 120)
									ELSE 
										CASE 
										WHEN a.vintage_month > sp.calendar_to_month 
											THEN CONVERT(DATETIME, a.vintage_year + ''-12-31'' , 120)
										ELSE CONVERT(DATETIME, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-12-31'' , 120)
										END
									END
							END)
			)
			WHERE 1=1
			AND a.tier = inner_sell_deal.tier_type
			AND a.jurisdiction = inner_sell_deal.jurisdiction
		) sell_deal
			'
	SET @sql2 =	CAST('' AS NVARCHAR(MAX)) + N' LEFT JOIN rec_generator rg ON rg.[code] = a.generator 
		LEFT JOIN gis_certificate gc ON gc.unit_id = a.generator		
		LEFT JOIN matching_detail md ON md.source_deal_header_id = sell_deal.source_deal_header_id
		WHERE 
		( 
			(a.generator IS NOT NULL AND (ISNULL(rg.generator_id, -1) = ISNULL(buy_deal.generator_id, -1) OR ISNULL(gc.source_deal_header_id, -1) = buy_deal.source_deal_detail_id) ) 
			OR 
			(a.transferor_counterparty IS NOT NULL AND ISNULL(sc.source_counterparty_id, -1) = ISNULL(buy_deal.counterparty_id, -1) )
		)	
		AND fas_link_detail_id IS NULL AND a.volume <= sell_deal.volume_left 
		ORDER BY deal_date ASC

		DECLARE @id INT
		DECLARE filter_deal CURSOR LOCAL FOR
			SELECT id FROM #unfiltered_inserted_deal_header ORDER BY deal_date ASC, sequence_from ASC

		OPEN filter_deal
		FETCH NEXT FROM filter_deal INTO @id
		WHILE @@FETCH_STATUS = 0
		BEGIN	
			INSERT INTO #inserted_deal_header (temp_id, sell_source_deal_header_id, sell_source_deal_detail_id, buy_source_deal_header_id, buy_source_deal_detail_id, quantity, assignment_type, vintage_year, vintage_month, buy_deal_expiration_date, tier_value_id, state_value_id, sequence_from, sequence_to)
			SELECT
			temp_deals.temp_id, temp_deals.sell_source_deal_header_id, temp_deals.sell_deal_source_deal_detail_id, temp_deals.buy_source_deal_header_id, temp_deals.buy_source_deal_detail_id, temp_deals.quantity, 
			temp_deals.assignment_type, temp_deals.vintage_year, temp_deals.vintage_month, temp_deals.buy_deal_expiration_date, temp_deals.tier_value_id, temp_deals.state_value_id, temp_deals.sequence_from, temp_deals.sequence_to
			FROM #unfiltered_inserted_deal_header temp_deals
			OUTER APPLY (SELECT SUM(quantity) quantity FROM #inserted_deal_header idh 
				WHERE idh.sell_source_deal_header_id = temp_deals.sell_source_deal_header_id
			)  idh 
			WHERE 1=1 AND ISNULL(idh.quantity, 0)+ temp_deals.quantity <= temp_deals.sell_volume_left
			AND temp_deals.buy_source_deal_detail_id NOT IN (SELECT buy_source_deal_detail_id FROM #inserted_deal_header)
			AND temp_deals.id = @id
			FETCH NEXT FROM filter_deal INTO @id
		END;
		CLOSE filter_deal 
		DEALLOCATE filter_deal 
		
		--Selected if sell deal has remaining quantity and matching volume is greater, so take partial volume equal to remaining sell deal volume for match and create new sell deal with remaining match quantity
		INSERT INTO #inserted_deal_header (temp_id, sell_source_deal_header_id, sell_source_deal_detail_id, buy_source_deal_header_id, buy_source_deal_detail_id, quantity, assignment_type, vintage_year, vintage_month, buy_deal_expiration_date, tier_value_id, state_value_id, sequence_from, sequence_to)
		SELECT 
		temp_deals.temp_id, temp_deals.sell_source_deal_header_id, temp_deals.sell_deal_source_deal_detail_id, temp_deals.buy_source_deal_header_id, temp_deals.buy_source_deal_detail_id, 
		temp_deals.sell_volume_left - idh.matched_quantity matchable_quantity, 
		temp_deals.assignment_type, temp_deals.vintage_year, temp_deals.vintage_month, temp_deals.buy_deal_expiration_date, temp_deals.tier_value_id, temp_deals.state_value_id, temp_deals.sequence_from, temp_deals.sequence_to
		FROM #unfiltered_inserted_deal_header  temp_deals
		OUTER APPLY (SELECT SUM(quantity) matched_quantity FROM #inserted_deal_header idh 
				WHERE idh.sell_source_deal_header_id = temp_deals.sell_source_deal_header_id
			)  idh 
		WHERE temp_id NOT IN (SELECT temp_id FROM #inserted_deal_header ) AND  temp_deals.sell_volume_left - idh.matched_quantity > 0
		
		--SELECT * INTO ' + @import_temp_table_name + '_pre FROM ' + @import_temp_table_name + ' a

		--Update remaining_volume_to_match to create new sell deal
		UPDATE temp
		SET volume = temp_deals.quantity- (temp_deals.sell_volume_left - idh.matched_quantity) 
		FROM ' + @import_temp_table_name + ' temp
		INNER JOIN #unfiltered_inserted_deal_header  temp_deals ON temp_deals.temp_id = temp.temp_id
		OUTER APPLY (SELECT SUM(quantity) matched_quantity FROM #inserted_deal_header idh 
				WHERE idh.sell_source_deal_header_id = temp_deals.sell_source_deal_header_id
			)  idh 
		WHERE temp_deals.temp_id NOT IN (SELECT temp_id FROM #inserted_deal_header ) AND  temp_deals.sell_volume_left - idh.matched_quantity > 0			
		'	
	EXEC(@sql + @sql2)	

	-- Collect details to insert SELL Deals which are not available in system BASED on BUY deal details given in the file
	-- Insert new Sell deal if qualified Sell deals have already been matched and insert until Volume of the file is greater Volume left(detail) of buy deal.
	-- Volume left condition is not checked here since Buy Deals with Less Volume than Import files are removed in the validation part of the Import.
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #deal_header_detail (source_deal_header_id, source_deal_detail_id, sub_book_id, deal_date, trader_id ,
			counterparty_id , physical_financial_flag,
			state_value_id, tier_value_id, product_classification ,
			pricing_type, template_id, term_start, term_end,
			curve_id, deal_volume_uom_id, deal_volume_frequency,
			status, source_deal_type_id, commodity_id, leg , match_volume, assignment_type,buy_deal_expiration_date, delivery_date, sequence_from, sequence_to
		)
		SELECT DISTINCT
		sdh_buy.source_deal_header_id,sdd_buy.source_deal_detail_id,
		book_deal_type_map_id sub_book, 
		CONVERT(DATETIME, a.vintage_year + ''-'' + a.vintage_month + ''-'' + ''01'', 120) deal_date	,
		deal_template.trader_id,
		sell_counterparty.source_counterparty_id,
		deal_template.physical_financial_flag,
		buy_deal.jurisdiction_id, 
		buy_deal.tier_id tier_value_id,
		CASE WHEN a.retirement_types = ''RPS'' THEN sdv_prod_clas.value_id
			ELSE NULL END product_classification,
		deal_template.pricing_type,
		ISNULL(gmv.clm1_value, gm.template_id) template_id,
		CASE 
			WHEN a.retirement_types = ''RPS'' 
				THEN CONVERT(DATE, a.compliance_period + ''-01-01'' , 120)
			WHEN a.retirement_types = ''Sold/Transfer''
				THEN 
					CASE 
					WHEN deal_template.match_type = ''m'' 
						THEN CONVERT(DATE, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120)
					WHEN deal_template.match_type = ''y'' 
						THEN 
							CASE 
							WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
								THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
							ELSE 
								CASE 
								WHEN a.vintage_month > sp.calendar_to_month 
									THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
								ELSE CONVERT(DATE, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-01-01'' , 120)
								END
							END
					END
		END term_start,
		CASE 
			WHEN a.retirement_types = ''RPS'' 
				THEN CONVERT(DATETIME, a.compliance_period + ''-12-31'' , 120)
			WHEN a.retirement_types = ''Sold/Transfer''  
				THEN  
					CASE 
					WHEN deal_template.match_type = ''m'' 
						THEN EOMONTH(CONVERT(DATETIME, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120))
					WHEN deal_template.match_type = ''y'' 
						THEN
							CASE 
							WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
								THEN CONVERT(DATE, a.vintage_year + ''-12-31'' , 120)
							ELSE 
								CASE 
								WHEN a.vintage_month > sp.calendar_to_month 
									THEN CONVERT(DATETIME, a.vintage_year + ''-12-31'' , 120)
								ELSE CONVERT(DATETIME, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-12-31'' , 120)
								END
							END
					END
		END term_end, 
		deal_template.curve_id,
		deal_template.deal_volume_uom_id,
		deal_template.deal_volume_frequency,
		25003,-- actual
		deal_template.source_deal_type_id,
		deal_template.commodity_id,
		deal_template.leg,
		a.volume,		
		sdv_agn_typ.value_id, 
		buy_deal.certificate_expiration_date_from,
		a.delivery_Date,
		a.sequence_from, a.sequence_to
		FROM ' + @import_temp_table_name + '  a
		INNER JOIN ' + @prod_view_process_table + ' buy_deal
			ON YEAR(buy_deal.term_start) = a.vintage_year 
			AND MONTH(buy_deal.term_start) = a.vintage_month 
			AND a.tier = buy_deal.tier_type
			AND a.jurisdiction = buy_deal.jurisdiction	
			AND a.sequence_from BETWEEN buy_deal.sequence_from AND buy_deal.sequence_to  
			AND a.sequence_to BETWEEN buy_deal.sequence_from AND buy_deal.sequence_to 
			AND a.certificate_from_part = buy_deal.certificate_from_part
			AND a.certificate_to_part = buy_deal.certificate_to_part
		INNER JOIN source_deal_header sdh_buy ON sdh_buy.source_deal_header_id = buy_deal.source_Deal_header_id 
			AND sdh_buy.header_buy_sell_flag = ''b'' AND sdh_buy.is_environmental = ''y''
		INNER JOIN source_deal_detail sdd_buy ON sdd_buy.source_deal_header_id = sdh_buy.source_deal_header_id 
			AND sdd_buy.source_deal_detail_id = buy_deal.source_deal_detail_id
		INNER JOIN source_system_book_map ssbm ON 
			ssbm.source_system_book_id1 = sdh_buy.source_system_book_id1
			AND ssbm.source_system_book_id2 = sdh_buy.source_system_book_id2
			AND ssbm.source_system_book_id3 = sdh_buy.source_system_book_id3
			AND ssbm.source_system_book_id4 = sdh_buy.source_system_book_id4
		INNER JOIN static_data_value sdv_agn_typ ON sdv_agn_typ.code = a.retirement_types AND sdv_agn_typ.type_id = 10013 
		INNER JOIN source_counterparty sell_counterparty ON sell_counterparty.counterparty_id = a.transferee_counterparty
		LEFT JOIN rec_generator rg ON rg.[code] = a.generator
		LEFT JOIN gis_certificate gc ON gc.unit_id = a.generator
		LEFT JOIN static_data_value sdv_jur ON sdv_jur.code = a.jurisdiction AND sdv_jur.type_id = 10002
		LEFT JOIN source_counterparty sc_buy ON sc_buy.counterparty_id = a.transferor_counterparty				
		OUTER APPLY (SELECT value_id FROM static_data_value WHERE code = ''Compliance Target'' AND type_id = 107400) sdv_prod_clas
		LEFT JOIN state_properties sp ON sp.state_value_id = buy_deal.jurisdiction_id
		LEFT JOIN static_data_value sdv_vin ON sdv_vin.code = a.vintage_year AND sdv_vin.type_id= 10092		
		INNER JOIN ' + @prod_view_process_table + ' sell_deal
			ON a.tier = sell_deal.tier_type AND a.jurisdiction = sell_deal.jurisdiction
		LEFT JOIN source_deal_header sdh_sell 
			ON sdh_sell.source_deal_header_id = sell_deal.source_deal_header_id
			AND ISNULL(sdh_sell.product_classification, -1) = IIF( a.retirement_types = ''RPS'', sdv_prod_clas.value_id, -1)
			AND sdh_sell.counterparty_id = sell_counterparty.source_counterparty_id
			AND sdh_sell.is_environmental = ''y'' AND sdh_sell.header_buy_sell_flag = ''s''
		LEFT JOIN source_deal_detail sell_sdd ON sell_sdd.source_deal_header_id = sdh_sell.source_deal_header_id
			AND
			((a.retirement_types = ''RPS'' AND YEAR(sell_sdd.term_start) = CAST(a.compliance_period AS INT))
			OR
			(a.retirement_types = ''Sold/Transfer'' AND sell_sdd.term_start = CASE 
								WHEN sdh_sell.match_type = ''m'' 
									THEN CONVERT(DATE, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120) 
								WHEN sdh_sell.match_type = ''y'' 
									THEN 
										CASE 
										WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
											THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
										ELSE 
											CASE 
											WHEN a.vintage_month > sp.calendar_to_month 
												THEN CONVERT(DATE, a.vintage_year + ''-01-01'' , 120)
											ELSE CONVERT(DATE, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-01-01'' , 120) 
											END
										END
								END)
			)

			AND (
			(a.retirement_types = ''RPS'' AND YEAR(sell_sdd.term_end) = CAST(a.compliance_period AS INT ) )
			OR
			(a.retirement_types = ''Sold/Transfer'' AND sell_sdd.term_end = CASE 
							WHEN sdh_sell.match_type = ''m'' 
								THEN EOMONTH(CONVERT(DATETIME, a.vintage_year + ''-'' + a.vintage_month + ''-01'' , 120)) 
							WHEN sdh_sell.match_type = ''y'' 
								THEN
									CASE 
									WHEN sp.calendar_from_month = 1 AND sp.calendar_to_month = 12
										THEN CONVERT(DATE, a.vintage_year + ''-12-31'' , 120)
									ELSE 
										CASE 
										WHEN a.vintage_month > sp.calendar_to_month 
											THEN CONVERT(DATETIME, a.vintage_year + ''-12-31'' , 120)
										ELSE CONVERT(DATETIME, CAST(a.vintage_year - 1 AS NVARCHAR(4)) + ''-12-31'' , 120)
										END
									END
							END)
			)	
		'			  
	SET @sql +=  CAST('' AS NVARCHAR(MAX)) + N' INNER JOIN static_data_Value sdv_retire ON sdv_retire.code = a.retirement_types AND sdv_retire.type_id = 10013
		LEFT JOIN generic_mapping_values gmv on gmv.clm2_value = CAST(sdv_jur.value_id AS NVARCHAR(15)) AND  gmv.clm3_value =  CAST(sdv_retire.value_id AS NVARCHAR(15))
		LEFT JOIN generic_mapping_header gmh ON gmh.mapping_table_id = gmv.mapping_table_id AND gmh.mapping_name = ''REC Transfer/Surrender Template''
		OUTER APPLY (
			SELECT clm1_value template_id
			FROM generic_mapping_header gmh_inner 
			INNER JOIN generic_mapping_values gmv_inner on gmv_inner.mapping_table_id = gmh_inner.mapping_table_id	
			WHERE gmh_inner.mapping_name = ''REC Transfer/Surrender Template'' AND gmv_inner.clm2_value IS NULL AND gmv_inner.clm3_value = CAST(sdv_retire.value_id AS NVARCHAR(15))
		) gm		
		OUTER APPLY ( 
			SELECT sdht1.template_id, sdht1.commodity_id, sdht1.pricing_type, sdht1.physical_financial_flag, sdht1.counterparty_id, sdht1.source_deal_type_id, 
				sdht1.option_flag, sdht1.deal_category_value_id, sdht1.trader_id, sdht1.match_type,
				sddt.status, sddt.curve_id,sddt.leg, sddt.contract_expiration_date, sddt.fixed_float_leg, sddt.buy_sell_flag, sddt.deal_volume_frequency, sddt.deal_volume_uom_id
			FROM source_deal_header_template sdht1
			INNER JOIN source_deal_detail_template sddt ON sddt.template_id = sdht1.template_id
			WHERE sdht1.template_id = ISNULL(gmv.clm1_value, gm.template_id)
		) deal_template
		LEFT JOIN matching_detail md ON md.source_deal_header_id = sell_deal.source_deal_header_id
		OUTER APPLY (SELECT SUM(quantity) matched_volume, buy_source_deal_detail_id FROM #inserted_deal_header idh WHERE idh.buy_source_deal_detail_id = sdd_buy.source_deal_detail_id GROUP BY idh.buy_source_deal_detail_id) rem_vol
		WHERE 		
		( 
			(a.generator IS NOT NULL AND (ISNULL(rg.generator_id, -1) = ISNULL(sdh_buy.generator_id, -1) OR ISNULL(gc.source_deal_header_id, -1) = sdd_buy.source_deal_detail_id) ) 
			OR 
			(a.transferor_counterparty IS NOT NULL AND ISNULL(sc_buy.source_counterparty_id, -1) = ISNULL(sdh_buy.counterparty_id, -1) )
		)
		AND fas_link_detail_id IS NULL 
		AND sdh_sell.source_deal_header_id IS NULL 
		AND ((rem_vol.matched_volume IS NOT NULL AND rem_vol.matched_volume - a.volume > 0) OR (rem_vol.matched_volume IS NULL AND 1=1))
		'
	EXEC(@sql)

	-- SET vintage blank for retirement type Sold/Transfer for match type Vintage Month else it will create Yearly Deal
	/*UPDATE dhd
	SET dhd.vintage = ''
	FROM  #deal_header_detail dhd
	INNER JOIN source_deal_header_template sdht ON sdht.template_id = dhd.template_Id
	WHERE sdht.match_type ='m' AND dhd.product_classification IS NULL
	*/
	DECLARE @rbuy_source_Deal_header_id INT, @rbuy_source_deal_detail_id INT, @rsub_book_id INT, @rdeal_date DATE, @rtrader_id INT,
	@rcounterparty_id INT, @rphysical_financial_flag NCHAR(1),
	@rstate_value_id INT, @rtier_value_id INT, @rproduct_classification INT,
	@rpricing_type INT, @rterm_start DATE, @rterm_end DATE,
	@rcurve_id INT, @rdeal_volume_uom_id INT, @rdeal_volume_frequency NCHAR(1),
	@rstatus INT, @rsource_deal_type_id INT, @rcommodity_id INT, @rleg INT, @rtemplate_id INT, 
	@rmatch_volume INT, @rassignment_type INT, @rbuy_deal_expiration_date DATE, @rdelivery_date DATE, @rsequence_from INT, @rsequence_to INT
	
	DECLARE cur_deals CURSOR LOCAL FOR
	SELECT source_deal_header_id, source_deal_detail_id, sub_book_id, 
		 deal_date, 
		 trader_id,	
		counterparty_id,
		physical_financial_flag,
		state_value_id, 
		tier_value_id,
		product_classification,
		pricing_type,
		template_id,
		term_start,
		term_end,
		curve_id,
		deal_volume_uom_id,
		deal_volume_frequency,
		status,
		source_deal_type_id,
		commodity_id,
		leg,
		match_volume,
		assignment_type,
		ISNULL(buy_deal_expiration_date,'') buy_deal_expiration_date,
		delivery_date,
		sequence_from, 
		sequence_to
	FROM #deal_header_detail

	OPEN cur_deals
	FETCH NEXT FROM cur_deals INTO @rbuy_source_Deal_header_id, @rbuy_source_deal_detail_id, @rsub_book_id, @rdeal_date, @rtrader_id, @rcounterparty_id, @rphysical_financial_flag
		, @rstate_value_id, @rtier_value_id, @rproduct_classification, @rpricing_type, @rtemplate_id, @rterm_start, @rterm_end
		, @rcurve_id, @rdeal_volume_uom_id,  @rdeal_volume_frequency ,@rstatus, @rsource_deal_type_id, @rcommodity_id, @rleg, @rmatch_volume, @rassignment_type, @rbuy_deal_expiration_date, @rdelivery_date, @rsequence_from, @rsequence_to
	WHILE @@FETCH_STATUS = 0
	BEGIN	
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			DECLARE @return_output INT
			EXEC spa_insert_blotter_deal  @flag=''i'',@call_from=''scheduler'',@template_id=' + CAST(@rtemplate_id AS NVARCHAR(10)) + ',
			@header_xml=''<GridXML><GridRow row_id="1"  sub_book="'+ CAST(@rsub_book_id AS NVARCHAR(10)) +'" deal_id="" 
			deal_date="' + CAST(@rdeal_date AS NVARCHAR(20)) + '" trader_id="' + ISNULL(CAST(@rtrader_id  AS NVARCHAR(10)), '')  + '" 
			header_buy_sell_flag="s" counterparty_id="' + CAST(@rcounterparty_id AS NVARCHAR(10)) + '"  
			state_value_id="' + CAST(@rstate_value_id AS NVARCHAR(10)) + '" tier_value_id="' + CAST(@rtier_value_id AS NVARCHAR(10)) + '" fas_deal_type_value_id=""
			 product_classification="' + ISNULL(CAST(@rproduct_classification AS NVARCHAR(10)), '') + '" is_environmental="y" 
			 profile_granularity="" pricing_type="' + CAST(@rpricing_type AS NVARCHAR(10)) + '"></GridRow></GridXML>'',
			@detail_xml=''<GridXML><GridRow row_id="1"  deal_group="New Group" group_id="1" 
			detail_flag="0" blotterleg="' + CAST(@rleg AS NVARCHAR(10)) + '" source_deal_detail_id="NEW_1" lock_deal_detail="n" 
			term_start="' + CAST(@rterm_start AS NVARCHAR(10)) + '" term_end="' + CAST(@rterm_end AS NVARCHAR(10)) 
			+ '" curve_id="' + CAST(@rcurve_id AS NVARCHAR(10)) + '" contractual_volume=""
			 schedule_volume="' + CAST(@rmatch_volume AS NVARCHAR(10)) + '" deal_volume_uom_id="' + CAST(@rdeal_volume_uom_id AS NVARCHAR(10)) + '" deal_volume_frequency="' + @rdeal_volume_frequency + '" fixed_price="" 
			 delivery_date="' + ISNULL(CAST(@rdelivery_date AS NVARCHAR(20)),'') + '" status="' + CAST(@rstatus AS NVARCHAR(10)) + '"></GridRow></GridXML>'',
			@deal_type_id=' + CAST(@rsource_deal_type_id AS NVARCHAR(10)) + ',
			@pricing_type=' + CAST(@rcommodity_id AS NVARCHAR(10)) + ',
			@term_frequency=' + CAST(@rdeal_volume_frequency AS NVARCHAR(10)) + ',
			@shaped_process_id='''',
			@header_cost_xml=NULL,@formula_process_id=NULL,
			@commodity_id=' + CAST(@rcommodity_id AS NVARCHAR(10)) + ',@environment_process_id=''''
			,@certificate_process_id='''',@deal_price_data_process_id='''',@deal_provisional_price_data_process_id=''''
			, @return_output = @return_output OUTPUT

			IF @return_output IS NOT NULL
			BEGIN
				INSERT INTO #inserted_deal_header(sell_source_deal_header_id, buy_source_deal_header_id, buy_source_deal_detail_id, quantity, assignment_type, vintage_year, vintage_month, buy_deal_expiration_date, tier_value_id, state_value_id, sequence_from, sequence_to)
				SELECT @return_output, ' + CAST(@rbuy_source_deal_header_id AS NVARCHAR(20)) + ',' + CAST(@rbuy_source_deal_detail_id AS NVARCHAR(20)) + ', ' + CAST(@rmatch_volume AS NVARCHAR(20)) + ',' + CAST(@rassignment_type AS NVARCHAR(10)) + ',' + CAST(YEAR(@rdeal_date) AS NVARCHAR(20)) + ',' + CAST(MONTH(@rdeal_date) AS NVARCHAR(20)) + ',''' + CAST(@rbuy_deal_expiration_date AS NVARCHAR(20)) + ''',' + CAST(@rtier_value_id AS NVARCHAR(10)) + ', ' + CAST(@rstate_value_id AS NVARCHAR(10)) + ', ' + CAST(@rsequence_from AS NVARCHAR(10)) + ', ' + CAST(@rsequence_to AS NVARCHAR(10)) + '
				UPDATE idh SET sell_source_deal_detail_id = sdd.source_deal_detail_id FROM #inserted_deal_header idh INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = idh.sell_source_deal_header_id AND idh.sell_source_deal_header_id = @return_output
			END
			'
		EXEC(@sql)

		FETCH NEXT FROM cur_deals INTO @rbuy_source_Deal_header_id, @rbuy_source_deal_detail_id, @rsub_book_id, @rdeal_date, @rtrader_id, @rcounterparty_id, @rphysical_financial_flag
		, @rstate_value_id, @rtier_value_id, @rproduct_classification, @rpricing_type, @rtemplate_id, @rterm_start, @rterm_end
		, @rcurve_id, @rdeal_volume_uom_id,  @rdeal_volume_frequency ,@rstatus, @rsource_deal_type_id, @rcommodity_id, @rleg, @rmatch_volume, @rassignment_type, @rbuy_deal_expiration_date, @rdelivery_date
		, @rsequence_from, @rsequence_to
	END;

	CLOSE cur_deals 
	DEALLOCATE cur_deals 
	
	--	SELECT * FROM  #inserted_deal_header

	/*start of deal matching*/
	
	IF OBJECT_ID('tempdb..#match_deal') IS NOT NULL
		DROP TABLE #match_deal

	SELECT GETDATE() match_date,			   
		   a.quantity total_matched_volume,
		   sell.volume_left AS sell_volume_left
		   , a.sell_source_deal_header_id , a.buy_source_deal_header_id,
		   sdd_buy.source_deal_detail_id source_deal_detail_id_buy, sell.source_deal_detail_id source_deal_detail_id_sell
		   , a.state_value_id, a.tier_value_id, a.assignment_type, a.vintage_year, NULLIF(a.buy_deal_expiration_date, '1900-01-01') buy_deal_expiration_date, a.sequence_from, a.sequence_to
	INTO #match_deal
	FROM  #inserted_deal_header a		
	INNER JOIN source_deal_detail sdd_buy ON sdd_buy.source_deal_detail_id = a.buy_source_deal_detail_id		
	OUTER APPLY(
		SELECT sdd_sell.volume_left, sdd_sell.source_deal_detail_id 
		FROM source_deal_detail sdd_sell
		INNER JOIN source_deal_header sdh_sell ON sdd_sell.source_deal_header_id = sdh_sell.source_deal_header_id 
			AND sdd_sell.source_deal_Detail_id = a.sell_source_Deal_detail_id
		WHERE a.sell_source_deal_header_id = sdd_sell.source_deal_header_id 
	) sell
	WHERE CAST(a.quantity AS NUMERIC(38,17)) <= sdd_buy.volume_left AND CAST(a.quantity AS NUMERIC(38,17)) <= sell.volume_left
		/*
	DECLARE @xml NVARCHAR(MAX), @process_id NVARCHAR(100) = dbo.fnagetnewid()
	DECLARE @source_deal_header_id INT
	--*/
	DECLARE @match_status INT, @source_deal_detail_id_sell INT	
	
	DECLARE deal_cursor CURSOR FOR
	SELECT DISTINCT sell_source_deal_header_id, source_deal_detail_id_sell
	FROM #match_deal 

	OPEN deal_cursor
	FETCH NEXT FROM deal_cursor
	INTO @source_deal_header_id, @source_deal_detail_id_sell
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SELECT @match_status = CASE 
			WHEN MAX(sell_volume_left) - CAST(SUM(total_matched_volume)  AS NUMERIC(38,17)) = 0	THEN 27201 --Matched
			WHEN MAX(sell_volume_left) - CAST(SUM(total_matched_volume)  AS NUMERIC(38,17)) > 0 THEN 27207 -- Incomplete
			ELSE 27207 END 
		FROM #match_deal 
		WHERE sell_source_deal_header_id = @source_deal_header_id AND source_deal_detail_id_sell = @source_deal_detail_id_sell
		
		SELECT @xml = '<Root><FormXML  link_id="" process_id="' + @process_id + '" description="" effective_date="' + CAST(match_date AS NVARCHAR(20)) + '" group1="" group2="" group3="" 
						group4="" hedging_relationship_type="" link_type="" match_status="' + CAST(@match_status AS NVARCHAR(10)) + '" total_matched_volume ="' + CAST(total_matched_volume AS NVARCHAR(50))+ '" assignment_type="' + CAST(assignment_type AS NVARCHAR(50))+ '"></FormXML>
						<Grid>' FROM #match_deal 
						WHERE sell_source_deal_header_id = @source_deal_header_id AND source_deal_detail_id_sell = @source_deal_detail_id_sell
		SELECT @xml += '<GridRow source_deal_header_id="' + CAST(sell_source_deal_header_id AS NVARCHAR(10)) + '" source_deal_detail_id="' + CAST(source_deal_detail_id_sell AS NVARCHAR(10)) + '" matched="' + CAST(SUM(total_matched_volume) AS NVARCHAR(50)) + '" set_id="1" state_value_id="' + CAST(state_value_id AS NVARCHAR(10)) + '" tier_value_id="' + CAST(tier_value_id AS NVARCHAR(10)) + '" vintage_year="' + CAST(vintage_year AS NVARCHAR(10)) + '"></GridRow>' 
						FROM #match_deal WHERE sell_source_deal_header_id = @source_deal_header_id AND source_deal_detail_id_sell = @source_deal_detail_id_sell
						GROUP BY sell_source_deal_header_id, source_deal_detail_id_sell, state_value_id, tier_value_id, vintage_year
		SELECT @xml += '<GridRow source_deal_header_id="' + CAST(buy_source_deal_header_id AS NVARCHAR(10)) + '" source_deal_detail_id="' + CAST(source_deal_detail_id_buy AS NVARCHAR(10)) + '" matched="' + CAST(total_matched_volume AS NVARCHAR(50)) + '" set_id="2" state_value_id="' + CAST(state_value_id AS NVARCHAR(10)) + '" tier_value_id="' + CAST(tier_value_id AS NVARCHAR(10)) + '" vintage_year="' + CAST(vintage_year AS NVARCHAR(10)) + '" expiration_date="' + ISNULL(CAST(buy_deal_expiration_date AS NVARCHAR(20)),'') + '" sequence_from="' + CAST(IIF (seq.sequence_to IS NOT NULL, seq.sequence_to + 1,md.sequence_from) AS NVARCHAR(20)) + '" sequence_to="' + CAST(md.sequence_to AS NVARCHAR(20)) + '" ></GridRow>' 
						FROM #match_deal md
						OUTER APPLY (SELECT TOP 1 mdhi.sequence_from ,  mdhi.sequence_to FROM matching_header_detail_info mdhi 
							WHERE mdhi.source_Deal_detail_id_from = md.source_deal_detail_id_buy ORDER BY id DESC
						) seq 		
						WHERE md.sell_source_deal_header_id = @source_deal_header_id AND source_deal_detail_id_sell = @source_deal_detail_id_sell
		SELECT @xml += '</Grid></Root>'

		--select @xml, @process_id
	
		EXEC spa_buy_sell_match @flag='i', @link_id='0', @xmlValue=@xml, @process_id=@process_id

		UPDATE matching_header SET link_description = link_id WHERE link_description IS NULL
		FETCH NEXT FROM deal_cursor INTO @source_deal_header_id,  @source_deal_detail_id_sell
	END
	CLOSE deal_cursor
	DEALLOCATE deal_cursor
END

IF @table_name = 'ixp_counterparty_credit_limits_template'
BEGIN 
 	
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET effective_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.effective_date = dd.user_date
	')
	/***END OF date update***/

 	EXEC('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_limits'',''Credit_Limit'',''Credit_Limit'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_limits'',''Credit_limit_to_us'',''Credit_limit_to_us'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_limits'',''Tenor_Limit'',''Tenor_Limit'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_limits'',''Max_Threshold'',''Max_Threshold'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''counterparty_credit_limits'',''Min_Threshold'',''Min_Threshold'')')				

	/** Collect data for look up table validation.
		 referred_table: lookup table to match value against
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 

	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),
		(''contract_group'', ''contract_id'', ''b.source_contract_id = a.contract_id'', ''w''),
		(''source_counterparty'', ''internal_counterparty_id'', ''b.counterparty_id = a.internal_counterparty_id'', ''w''),
		(''static_data_value'', ''limit_status'', ''b.code = a.limit_status AND b.type_id = 105400'', ''w''),
		(''source_currency'', ''currency_id'', ''b.currency_id = a.currency_id'', ''e'')
	')

 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Check for contract and counterparty mapping 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10011,
				 ''{
					 "column_name": "'' + scm.source_column_name + ''",
					 "column_value": "'' + a.contract_id + ''",
					 "column_name1": "'' + scm1.source_column_name + ''",
					 "column_value1": "'' + a.counterparty_id + ''"
				 }'',
 				a.import_file_name
 		 FROM ' + @import_temp_table_name + '  a
		 CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''contract_id'' -- ixp_columns_name
         ) scm
		 CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''counterparty_id'' -- ixp_columns_name
         ) scm1
		 INNER JOIN source_counterparty sc  ON sc.counterparty_id = a.Counterparty_id 
 		 INNER JOIN source_counterparty scpt ON scpt.counterparty_id = a.counterparty_id
		 INNER JOIN contract_group cg ON cg.source_contract_id = a.contract_id
		 OUTER APPLY (
		 	 SELECT DISTINCT cca.contract_id 
		 	 FROM counterparty_contract_address cca 
		     WHERE cca.contract_id = cg.contract_id 
		 		 AND cca.counterparty_id = scpt.source_counterparty_id 
		) cca_id
		LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		WHERE #error_status.temp_id IS NULL 
			AND cca_id.contract_id IS NULL
	')

	-- Validation when Min Threshold is greater than Max Threshold
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
				 10020,
				 ''{
					 "column_name1": "'' + scmin.source_column_name + ''",
					 "column_value1": "'' + a.min_threshold + ''",
					 "column_name2": "'' + scmax.source_column_name + ''",
					 "column_value2": "'' + a.max_threshold + ''"
				 }'',
 				a.import_file_name
 		 FROM ' + @import_temp_table_name + '  a
		 CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''min_threshold'' -- ixp_columns_name
         ) scmin
		 CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''max_threshold'' -- ixp_columns_name
         ) scmax
		LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		WHERE #error_status.temp_id IS NULL 
			AND a.min_threshold > a.max_threshold
	')
 			
 	EXEC('DELETE '+@import_temp_table_name + ' 
		  FROM #error_status 
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
 				UPDATE cpl
 				SET cpl.effective_Date = a.effective_Date,
					cpl.credit_limit = a.credit_limit,
					cpl.credit_limit_to_us = a.credit_limit_to_us,
					cpl.tenor_limit = a.tenor_limit,
					cpl.max_threshold = CASE WHEN a.min_threshold > a.max_threshold THEN NULL ELSE a.max_threshold END,
					cpl.min_threshold = CASE WHEN a.min_threshold > a.max_threshold THEN NULL ELSE a.min_threshold END,
					cpl.counterparty_id = scpt.source_counterparty_id,
					cpl.internal_counterparty_id = scpt2.source_counterparty_id,
					cpl.contract_id = z.contract_id,
					cpl.currency_id = sc.source_currency_id,
					cpl.limit_status = sdv.value_id
 				FROM  '+ @import_temp_table_name +' a
 				LEFT JOIN source_currency sc ON sc.currency_id = a.currency_id
				INNER JOIN source_counterparty scpt ON scpt.counterparty_id = a.counterparty_id
				LEFT JOIN source_counterparty scpt2 ON scpt2.counterparty_id = a.internal_counterparty_id
				LEFT JOIN contract_group cg ON cg.contract_name = a.contract_id
				LEFT JOIN static_data_value sdv ON sdv.code = a.limit_status AND sdv.type_id = 105400
				OUTER APPLY (SELECT DISTINCT cca.contract_id from counterparty_contract_address cca 
				            WHERE cca.contract_id = cg.contract_id AND cca.counterparty_id = scpt.source_counterparty_id ) z
				INNER JOIN counterparty_credit_limits cpl ON cpl.counterparty_id = scpt.source_counterparty_id
					AND ISNULL(cpl.internal_counterparty_id, -1) = ISNULL(scpt2.source_counterparty_id, -1)
					AND ISNULL(cpl.contract_id, -1) = ISNULL(z.contract_id, -1)
					AND ISNULL(dbo.FNADateFormat(cpl.effective_Date), ''01/01/1900'') = ISNULL(dbo.FNADateFormat(a.effective_Date), ''01/01/1900'')				
					OUTER APPLY (
								SELECT temp_id 
								FROM #error_status es
								INNER JOIN message_log_template mlt 
									ON mlt.message_number = es.error_number
								WHERE a.temp_id = es.temp_id
									AND mlt.message_status = ''ERROR''
						   ) es				 
				WHERE es.temp_id IS NULL
				'
 	EXEC spa_print @sql
 	EXEC(@sql)
 
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
 				INSERT INTO counterparty_credit_limits
 				(
					effective_Date,
					credit_limit,
					credit_limit_to_us,
					tenor_limit,
					max_threshold,
					min_threshold,
					counterparty_id,
					internal_counterparty_id,
					contract_id,
					currency_id,
					limit_status
				)
 				SELECT a.effective_Date,
					a.credit_limit,
					a.credit_limit_to_us,
					a.tenor_limit,
					CASE WHEN a.min_threshold > a.max_threshold THEN NULL ELSE a.max_threshold END,
					CASE WHEN a.min_threshold > a.max_threshold THEN NULL ELSE a.min_threshold END,
					scpt.source_counterparty_id,
					scpt2.source_counterparty_id,
					z.contract_id,
					sc.source_currency_id,
					sdv.value_id
 				FROM '+ @import_temp_table_name +' a
 				LEFT JOIN source_currency sc ON sc.currency_id = a.currency_id
				INNER JOIN source_counterparty scpt ON scpt.counterparty_id = a.counterparty_id
				LEFT JOIN source_counterparty scpt2 ON scpt2.counterparty_id = a.internal_counterparty_id
				LEFT JOIN contract_group cg ON cg.source_contract_id = a.contract_id
				LEFT JOIN static_data_value sdv ON sdv.code = a.limit_status AND sdv.type_id = 105400
				OUTER APPLY (SELECT DISTINCT cca.contract_id from counterparty_contract_address cca 
				            WHERE cca.contract_id = cg.contract_id AND cca.counterparty_id = scpt.source_counterparty_id ) z
				LEFT JOIN counterparty_credit_limits cpl ON cpl.counterparty_id = scpt.source_counterparty_id
					AND ISNULL(cpl.internal_counterparty_id, -1) = ISNULL(scpt2.source_counterparty_id, -1)
					AND ISNULL(cpl.contract_id, -1) = ISNULL(z.contract_id, -1)
					AND ISNULL(dbo.fnadateformat(cpl.effective_Date), ''01/01/1900'') = ISNULL(dbo.fnadateformat(a.effective_Date), ''01/01/1900'')
					OUTER APPLY (
								SELECT temp_id 
								FROM #error_status es
								INNER JOIN message_log_template mlt 
									ON mlt.message_number = es.error_number
								WHERE a.temp_id = es.temp_id
									AND mlt.message_status = ''ERROR''
						   ) es				 
				WHERE es.temp_id IS NULL
					AND cpl.counterparty_credit_limit_id IS NULL 					
				'				
 	EXEC spa_print @sql
 	EXEC(@sql)
END

IF @table_name = 'ixp_netting_group_detail_contract_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	        
	EXEC  ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 					'''+ @process_id + ''',
 					''Error'',
 					''Import Data'',
 					''' + @table_name + ''',
 					''Data Error'',
 					''Data error for counterparty_id :'' + ISNULL(a.counterparty_id, ''NULL'') 
 					+ '' and contract_id :'' + ISNULL(a.source_contract_id, ''NULL'')
 					+ '' and netting_parent_group_id :'' + ISNULL(a.netting_parent_group_id, ''NULL'')
 					+ '' and netting_group_name :'' + ISNULL(a.netting_group_name, ''NULL'')    
 					+ '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 					''Please check your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			INNER JOIN (
 				SELECT a.counterparty_id, a.source_contract_id, a.netting_group_name, a.netting_parent_group_id, COUNT(*) notimes
 				FROM ' + @import_temp_table_name + ' a
 				GROUP BY a.counterparty_id, a.source_contract_id, a.netting_group_name, a.netting_parent_group_id
 				HAVING COUNT(*) > 1
 			) b
 			ON b.counterparty_id  = a.counterparty_id AND  b.source_contract_id = a.source_contract_id 
 			AND b.netting_group_name  = a.netting_group_name AND  b.netting_parent_group_id = a.netting_parent_group_id')
 			
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Netting Group Parent :'' + ISNULL(a.netting_parent_group_id, ''NULL'') + '' Counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') +  ''. Counterparty '' + ISNULL(a.counterparty_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please check your Data'',
 				  a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND sc.source_counterparty_id IS NULL')
 			
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Netting Group Parent :'' + ISNULL(a.netting_parent_group_id, ''NULL'') + '' AND Counterparty :'' + ISNULL(a.counterparty_id, ''NULL'') +  ''. Contract '' + ISNULL(a.source_contract_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please check your Data'',
 				  a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN contract_group cg ON cg.source_contract_id = a.source_contract_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND cg.contract_id IS NULL')
 	
 	
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Netting Group Parent :'' + ISNULL(a.netting_parent_group_id, ''NULL'') +  ''. Netting Group Parent '' + ISNULL(a.netting_parent_group_id, ''NULL'') +  '' is not present in system.)'',
 				 ''Please check your Data'',
 				  a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			LEFT JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND ngp.netting_parent_group_id IS NULL')
 			
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id') 
 	      				
 	-- Insert netting group
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE ng
				SET
					netting_parent_group_id = ngp.netting_parent_group_id,
					netting_group_name = a.netting_group_name,
					effective_date = ISNULL(a.effective_date, ng.effective_date),
					end_date = ISNULL(a.end_date, ng.end_date),
					sub_entity_id = ISNULL(fs.fas_subsidiary_id, ng.sub_entity_id),
					strategy_entity_id = ISNULL(fs2.fas_strategy_id, ng.strategy_entity_id),
					book_entity_id = ISNULL(fb.fas_book_id , ng.book_entity_id),
					source_commodity_id = ISNULL(sc.source_commodity_id, ng.source_commodity_id),
					physical_financial_flag = CASE WHEN ISNULL(a.physical_financial_flag, ng.physical_financial_flag) IN (''Physical'', ''p'') THEN ''p'' 
												   WHEN ISNULL(a.physical_financial_flag, ng.physical_financial_flag) IN (''Financial'', ''f'') THEN ''f''
											  END,
					source_deal_type_id = ISNULL(sdt.source_deal_type_id, ng.source_deal_type_id),
					source_deal_sub_type_id = ISNULL(sdt2.source_deal_type_id, ng.source_deal_sub_type_id),
					hedge_type_value_id = ISNULL(sdv.value_id, ng.hedge_type_value_id),
					gl_id_gross_revenue = ISNULL(gl_gross.gl_number_id, ng.gl_id_gross_revenue),
					gl_id_net_revenue = ISNULL(gl_net.gl_number_id, ng.gl_id_net_revenue),
					gl_id_gross_expense = ISNULL(gl_gross_exp.gl_number_id, ng.gl_id_gross_expense),
					gain_loss_flag = ISNULL(a.gain_loss_flag, ng.gain_loss_flag),
					source_system_id = ISNULL(ssd.source_system_id, ng.source_system_id),
					legal_entity = ISNULL(sdv_legal.value_id, ng.legal_entity)
				FROM ' + @import_temp_table_name + ' a 
 	            INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_id
 	            LEFT JOIN portfolio_hierarchy AS ph ON ph.entity_name = a.sub_entity_id AND ph.hierarchy_level = 2
 	            LEFT JOIN fas_subsidiaries AS fs ON fs.fas_subsidiary_id = ph.entity_id
 	            LEFT JOIN portfolio_hierarchy AS ph2 ON ph.entity_name = a.sub_entity_id AND ph2.hierarchy_level = 1
 	            LEFT JOIN fas_strategy AS fs2 ON fs2.fas_strategy_id = ph2.entity_id
 	            LEFT JOIN portfolio_hierarchy AS ph3 ON ph.entity_name = a.book_entity_id AND ph3.hierarchy_level = 0
 	            LEFT JOIN fas_books AS fb ON fb.fas_book_id = ph3.entity_id
 	            LEFT JOIN source_commodity AS sc ON sc.commodity_id = a.source_commodity_id
 	            LEFT JOIN source_deal_type AS sdt ON sdt.deal_type_id = a.source_deal_type_id
 	            LEFT JOIN source_deal_type AS sdt2 ON sdt2.deal_type_id = a.source_deal_sub_type_id
 	            LEFT JOIN static_data_value AS sdv ON sdv.code = a.hedge_type_value_id
 	            LEFT JOIN gl_system_mapping AS gl_gross ON gl_gross.gl_account_name = a.gl_id_gross_revenue
 	            LEFT JOIN gl_system_mapping AS gl_net ON gl_net.gl_account_name = a.gl_id_net_revenue
 	            LEFT JOIN gl_system_mapping AS gl_gross_exp ON gl_gross_exp.gl_account_name = a.gl_id_gross_expense
 	            LEFT JOIN source_system_description AS ssd ON ssd.source_system_name = a.source_system_id 
 	            LEFT JOIN static_data_value AS sdv_legal ON sdv_legal.code = a.legal_entity
 	            INNER JOIN netting_group ng
 					ON ng.netting_group_name = a.netting_group_name
 					AND ng.netting_parent_group_id = ngp.netting_parent_group_id
 	            '
 	exec spa_print @sql
 	EXEC(@sql)
 	
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO netting_group (netting_parent_group_id, netting_group_name, effective_date, end_date, sub_entity_id, strategy_entity_id, book_entity_id, source_commodity_id, physical_financial_flag, source_deal_type_id, source_deal_sub_type_id, hedge_type_value_id, gl_id_gross_revenue, gl_id_net_revenue, gl_id_gross_expense, gain_loss_flag, source_system_id, legal_entity)
 				SELECT DISTINCT
 					ngp.netting_parent_group_id,
 					a.netting_group_name,
 					a.effective_date,
 					a.end_date,
 					fs.fas_subsidiary_id,
 					fs2.fas_strategy_id,
 					fb.fas_book_id,
 					sc.source_commodity_id,
 					CASE WHEN a.physical_financial_flag IN (''Physical'', ''p'') THEN ''p'' 
						 WHEN a.physical_financial_flag IN (''Financial'', ''f'') THEN ''f''
					END,
					sdt.source_deal_type_id,
					sdt2.source_deal_type_id,
					sdv.value_id,
					gl_gross.gl_number_id,
					gl_net.gl_number_id,
					gl_gross_exp.gl_number_id,
					a.gain_loss_flag,
					ssd.source_system_id,
					sdv_legal.value_id
 	            FROM ' + @import_temp_table_name + ' a 
 	            INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_name = a.netting_parent_group_id
 	            LEFT JOIN portfolio_hierarchy AS ph ON ph.entity_name = a.sub_entity_id AND ph.hierarchy_level = 2
 	            LEFT JOIN fas_subsidiaries AS fs ON fs.fas_subsidiary_id = ph.entity_id
 	            LEFT JOIN portfolio_hierarchy AS ph2 ON ph.entity_name = a.sub_entity_id AND ph2.hierarchy_level = 1
 	            LEFT JOIN fas_strategy AS fs2 ON fs2.fas_strategy_id = ph2.entity_id
 	            LEFT JOIN portfolio_hierarchy AS ph3 ON ph.entity_name = a.book_entity_id AND ph3.hierarchy_level = 0
 	            LEFT JOIN fas_books AS fb ON fb.fas_book_id = ph3.entity_id
 	            LEFT JOIN source_commodity AS sc ON sc.commodity_id = a.source_commodity_id
 	            LEFT JOIN source_deal_type AS sdt ON sdt.deal_type_id = a.source_deal_type_id
 	            LEFT JOIN source_deal_type AS sdt2 ON sdt2.deal_type_id = a.source_deal_sub_type_id
 	            LEFT JOIN static_data_value AS sdv ON sdv.code = a.hedge_type_value_id
 	            LEFT JOIN gl_system_mapping AS gl_gross ON gl_gross.gl_account_name = a.gl_id_gross_revenue
 	            LEFT JOIN gl_system_mapping AS gl_net ON gl_net.gl_account_name = a.gl_id_net_revenue
 	            LEFT JOIN gl_system_mapping AS gl_gross_exp ON gl_gross_exp.gl_account_name = a.gl_id_gross_expense
 	            LEFT JOIN source_system_description AS ssd ON ssd.source_system_name = a.source_system_id 
 	            LEFT JOIN static_data_value AS sdv_legal ON sdv_legal.code = a.legal_entity
 	            LEFT JOIN netting_group ng
 					ON ng.netting_group_name = a.netting_group_name
 					AND ng.netting_parent_group_id = ngp.netting_parent_group_id
 				WHERE ng.netting_group_id IS NULL
 				'
 	exec spa_print @sql  
 	EXEC(@sql)
 	  
 	 
 	-- insert into netting_group_detail 	 
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE nga
				SET
					netting_group_id = ng.netting_group_id,
					source_counterparty_id = sc.source_counterparty_id,
					gl_number_id_st_asset = ISNULL(st_asset.gl_number_id, nga.gl_number_id_st_asset),
					gl_number_id_st_liab = ISNULL(st_liab.gl_number_id, nga.gl_number_id_st_liab),
					gl_number_id_lt_asset = ISNULL(lt_asset.gl_number_id, nga.gl_number_id_lt_asset),
					gl_number_id_lt_liab = ISNULL(lt_liab.gl_number_id, nga.gl_number_id_lt_liab)  
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN netting_group AS ng ON ng.netting_group_name = a.netting_group_name
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_id = ng.netting_parent_group_id
				INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
				LEFT JOIN gl_system_mapping AS st_asset ON st_asset.gl_number_id = a.gl_number_id_st_asset
				LEFT JOIN gl_system_mapping AS st_liab ON st_liab.gl_number_id = a.gl_number_id_st_liab
				LEFT JOIN gl_system_mapping AS lt_asset ON lt_asset.gl_number_id = a.gl_number_id_lt_asset
				LEFT JOIN gl_system_mapping AS lt_liab ON lt_liab.gl_number_id = a.gl_number_id_lt_liab
				INNER JOIN netting_group_detail nga 
 					ON nga.netting_group_id = ng.netting_group_id
 					AND nga.source_counterparty_id = sc.source_counterparty_id
 	              '     
	exec spa_print @sql
	EXEC(@sql)
	
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO netting_group_detail (netting_group_id, source_counterparty_id, gl_number_id_st_asset, gl_number_id_st_liab, gl_number_id_lt_asset, gl_number_id_lt_liab)
				SELECT DISTINCT 
					ng.netting_group_id,
					sc.source_counterparty_id,
					st_asset.gl_number_id,
					st_liab.gl_number_id,
					lt_asset.gl_number_id,
					lt_liab.gl_number_id				
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN netting_group AS ng ON ng.netting_group_name = a.netting_group_name
				INNER JOIN netting_group_parent ngp ON ngp.netting_parent_group_id = ng.netting_parent_group_id
				INNER JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
				LEFT JOIN gl_system_mapping AS st_asset ON st_asset.gl_number_id = a.gl_number_id_st_asset
				LEFT JOIN gl_system_mapping AS st_liab ON st_liab.gl_number_id = a.gl_number_id_st_liab
				LEFT JOIN gl_system_mapping AS lt_asset ON lt_asset.gl_number_id = a.gl_number_id_lt_asset
				LEFT JOIN gl_system_mapping AS lt_liab ON lt_liab.gl_number_id = a.gl_number_id_lt_liab
				LEFT JOIN netting_group_detail nga 
 					ON nga.netting_group_id = ng.netting_group_id
 					AND nga.source_counterparty_id = sc.source_counterparty_id
	            WHERE nga.netting_group_detail_id IS NULL'
	--PRINT(@sql)
	EXEC(@sql) 
	
	-- netting_
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE ngdc
				SET
					netting_group_detail_id = ISNULL(ng.netting_group_id, ngdc.netting_group_detail_id),
					source_contract_id = ISNULL(cg.contract_id, ngdc.source_contract_id)	
	            FROM ' + @import_temp_table_name + ' a
	            INNER JOIN netting_group AS ng ON ng.netting_group_name = a.netting_group_name
				INNER JOIN netting_group_parent AS ngp ON ngp.netting_parent_group_id = ng.netting_parent_group_id
				INNER JOIN netting_group_detail AS ngd ON ngd.netting_group_id = ng.netting_group_id
				INNER JOIN contract_group AS cg ON cg.source_contract_id = a.source_contract_id
				INNER JOIN netting_group_detail_contract AS ngdc 
					ON ngdc.netting_group_detail_id = ng.netting_group_id
					AND ngdc.source_contract_id = cg.contract_id 
	            '	
	--PRINT(@sql)
	EXEC(@sql) 
	
	SET @sql = 'INSERT INTO netting_group_detail_contract (netting_group_detail_id, source_contract_id)
				SELECT DISTINCT 
					ng.netting_group_id, 
					cg.contract_id
				FROM ' + @import_temp_table_name + ' a
	            INNER JOIN netting_group AS ng ON ng.netting_group_name = a.netting_group_name
				INNER JOIN netting_group_parent AS ngp ON ngp.netting_parent_group_id = ng.netting_parent_group_id
				INNER JOIN netting_group_detail AS ngd ON ngd.netting_group_id = ng.netting_group_id
				INNER JOIN contract_group AS cg ON cg.source_contract_id = a.source_contract_id
				LEFT JOIN netting_group_detail_contract AS ngdc 
					ON ngdc.netting_group_detail_id = ng.netting_group_id
					AND ngdc.source_contract_id = cg.contract_id
	            WHERE ngdc.netting_contract_id IS NULL
				'
	--PRINT(@sql)
	EXEC(@sql)
END

IF @table_name = 'ixp_pipeline_cut_data_template'
BEGIN
	DECLARE @stage_pipelinecut_header NVARCHAR(500)
	DECLARE @file_desc NVARCHAR(MAX) = ''
	DECLARE @caught BIT = 0
	
	SELECT @stage_pipelinecut_header = dbo.FNAProcessTableName('pipelinecut_header', @user_login_id, @process_id)		 
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	        
 	IF OBJECT_ID(N'tempdb..#purchase_report_count') IS NOT NULL DROP TABLE #purchase_report_count
	IF OBJECT_ID(N'tempdb..#transport_report_count') IS NOT NULL DROP TABLE #transport_report_count
	IF OBJECT_ID(N'tempdb..#error_code') IS NOT NULL DROP TABLE #error_code
	IF OBJECT_ID(N'tempdb..#deal_vol') IS NOT NULL DROP TABLE #deal_vol
	IF OBJECT_ID(N'tempdb..#deal_vol_new') IS NOT NULL DROP TABLE #deal_vol_new
	IF OBJECT_ID(N'tempdb..#vol_diff') IS NOT NULL DROP TABLE #vol_diff
	IF OBJECT_ID(N'tempdb..#vol_diff_child') IS NOT NULL DROP TABLE #vol_diff_child
	IF OBJECT_ID(N'tempdb..#total_phy_deals') IS NOT NULL DROP TABLE #total_phy_deals
	IF OBJECT_ID(N'tempdb..#total_phy_deals_val') IS NOT NULL DROP TABLE #total_phy_deals_val
	IF OBJECT_ID(N'tempdb..#total_phy_deals_sum') IS NOT NULL DROP TABLE #total_phy_deals_sum
	IF OBJECT_ID(N'tempdb..#total_scheduled_deals') IS NOT NULL DROP TABLE #total_scheduled_deals
	IF OBJECT_ID(N'tempdb..#transport_deal_vol') IS NOT NULL DROP TABLE #transport_deal_vol
	IF OBJECT_ID(N'tempdb..#scheduled_deal_log') IS NOT NULL DROP TABLE #scheduled_deal_log
	IF OBJECT_ID(N'tempdb..#physical_deal_log') IS NOT NULL DROP TABLE #physical_deal_log
	IF OBJECT_ID(N'tempdb..#file_info') IS NOT NULL DROP TABLE #file_info
	IF OBJECT_ID(N'tempdb..#file_info_valid') IS NOT NULL DROP TABLE #file_info_valid
	IF OBJECT_ID(N'tempdb..#deal_vol_md_mr') IS NOT NULL DROP TABLE #deal_vol_md_mr
	IF OBJECT_ID(N'tempdb..#pipe_rs') IS NOT NULL DROP TABLE #pipe_rs
	IF OBJECT_ID(N'tempdb..#total_86T_deals') IS NOT NULL DROP TABLE #total_86T_deals
	IF OBJECT_ID(N'tempdb..#updated_deals') IS NOT NULL DROP TABLE #updated_deals
	IF OBJECT_ID(N'tempdb..#contract_mismatch_deals') IS NOT NULL DROP TABLE #contract_mismatch_deals
	IF OBJECT_ID(N'tempdb..#process_table') IS NOT NULL DROP TABLE #process_table
	IF OBJECT_ID(N'tempdb..#md_deal_inserted') IS NOT NULL DROP TABLE #md_deal_inserted
	
	
	CREATE TABLE #scheduled_deal_log (
		id                    INT IDENTITY(1, 1),
		svc_req               NVARCHAR(150) COLLATE DATABASE_DEFAULT,
		physical_deal         NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		scheduled_deal        NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		leg                   NVARCHAR(2) COLLATE DATABASE_DEFAULT,
		pkg_id                NVARCHAR(150) COLLATE DATABASE_DEFAULT,
		counterparty          NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		receipt_location      NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
		delivery_location     NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		old_vol               NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		new_vol               NVARCHAR(100) COLLATE DATABASE_DEFAULT
	)
		
	CREATE TABLE #physical_deal_log (
		id                   INT IDENTITY(1, 1),
		svc_req              NVARCHAR(150) COLLATE DATABASE_DEFAULT,
		phy_deal_id          INT,
		physical_deal        NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		counterparty         NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		receipt_location     NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
		old_vol              NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		new_vol              NVARCHAR(100) COLLATE DATABASE_DEFAULT
	)
	
	CREATE TABLE #error_code ([type] NCHAR(1) COLLATE DATABASE_DEFAULT)	
	CREATE TABLE #purchase_report_count (row_count INT)
	CREATE TABLE #transport_report_count (row_count INT)
	
	CREATE TABLE #total_phy_deals (
			phy_deal_id            INT,
			svc_req                NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			package_id             NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			delivery_date_from     NVARCHAR(25) COLLATE DATABASE_DEFAULT,
			counterparty           NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			receipt_location       NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			[contract]             NVARCHAR(30) COLLATE DATABASE_DEFAULT
		)
		
		CREATE TABLE #total_phy_deals_val (
			phy_deal_id            INT,
			svc_req                NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			leg_1                  FLOAT,
			leg_2                  FLOAT,
			delivery_date_from     NVARCHAR(25) COLLATE DATABASE_DEFAULT,
			delivery_date_to       NVARCHAR(25) COLLATE DATABASE_DEFAULT,
			package_id             NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			counterparty           NVARCHAR(50) COLLATE DATABASE_DEFAULT
		)
		
		CREATE TABLE #total_scheduled_deals (
			[contract]            NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			phy_deal_id           INT,
			scheduled_deal_id     INT,
			schedule_id           INT,
			path_id               INT,
			path_detail_id        INT
		)
		
		CREATE TABLE #transport_deal_vol (
			up_pkg_id                  NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			scheduled_receipt_sum      FLOAT,
			scheduled_delivery_sum     FLOAT,
			delivery_date_from         NVARCHAR(25) COLLATE DATABASE_DEFAULT,
			delivery_date_to           NVARCHAR(25) COLLATE DATABASE_DEFAULT,
			receipt_location           NVARCHAR(100) COLLATE DATABASE_DEFAULT,
			delivery_location          NVARCHAR(100) COLLATE DATABASE_DEFAULT
		)
		
		CREATE TABLE #pipe_rs (
			up_pkg_id                    NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			delivery_date_from           NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			delivery_date_to             NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			generic_mapping_value_id     NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			transport_contract           NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			scheduled_receipt            FLOAT,
			scheduled_delivery           FLOAT,
			receipt_location             INT,
			delivery_location            INT,
			term_pricing_index_leg1      INT,
			term_pricing_index_leg2      INT
		)	
		
		CREATE TABLE #md_deal_inserted (deals NVARCHAR(1000) COLLATE DATABASE_DEFAULT)
		
		CREATE TABLE #deal_vol_md_mr (
			id                        INT IDENTITY(1, 1),
			from_deal_id              INT,
			template_name             NVARCHAR(250) COLLATE DATABASE_DEFAULT,
			source_deal_header_id     INT,
			leg                       INT,
			deal_vol                  NUMERIC(38, 20),
			new_vol                   NUMERIC(38, 20),
			location                  NVARCHAR(500) COLLATE DATABASE_DEFAULT,
			delivery_date_from        NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			up_pkg_id                 NVARCHAR(25) COLLATE DATABASE_DEFAULT
		)
		
		CREATE TABLE #total_86T_deals (
			id INT IDENTITY(1, 1),
			up_pkg_id NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			delivery_date_from NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			delivery_date_to NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			[from_deal_id] INT,
			source_deal_header_id INT,
			template_id INT,
			template_name NVARCHAR(50) COLLATE DATABASE_DEFAULT,
			generic_mapping_value_id NVARCHAR(20) COLLATE DATABASE_DEFAULT,
			transport_contract NVARCHAR(50) COLLATE DATABASE_DEFAULT
		)
			
	EXEC('INSERT INTO #purchase_report_count SELECT COUNT(1) FROM ' + @import_temp_table_name + ' WHERE file_type = ''p''')
	EXEC('INSERT INTO #transport_report_count SELECT COUNT(1) FROM ' + @import_temp_table_name  + ' WHERE file_type = ''t''')
	
	IF EXISTS (SELECT 1 FROM #purchase_report_count WHERE row_count > 0) OR EXISTS (SELECT 1 FROM #transport_report_count WHERE row_count > 0)
	BEGIN
		DECLARE @deal_sn                     INT = 1,
		        @sub_process_id              NVARCHAR(100),
		        @inserted_deal_tbl           NVARCHAR(255),
		        @deal_table                  NVARCHAR(255),
		        @term_start                  DATETIME,
		        @term_end                    DATETIME,
		        @deal_date                   DATETIME,
		        @sub_book                    INT,
		        @contract_id                 INT,
		        @leg1_vol                    FLOAT,
		        @leg2_vol                    FLOAT,
		        @receipt_location_id         INT,
		        @delivery_location_id        INT,
		        @term_pricing_index_leg1     INT,
		        @term_pricing_index_leg2     INT
		
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #total_phy_deals(phy_deal_id, svc_req, package_id, delivery_date_from, counterparty, receipt_location, contract)
					SELECT ISNULL(MAX(uddf.source_deal_header_id), sdh.source_deal_header_id) phy_deal_id,
							main_tb.svc_req,
							MAX(uddf.udf_value) [package_id],
							main_tb.delivery_date_from,
							MAX(main_tb.counterparty) counterparty,
							MAX(main_tb.receipt_location) receipt_location,
							MAX(main_tb.contract) up_k_id
					FROM ' + @import_temp_table_name + ' main_tb
					INNER JOIN pipeline_up_down_service_k imp_tbl ON imp_tbl. serv_req_k = main_tb.svc_req AND imp_tbl.up_k = main_tb.[contract]
					INNER JOIN source_deal_header sdh ON sdh.counterparty_id = imp_tbl.counterparty_id 
						AND sdh.entire_term_start = CAST(main_tb.delivery_date_from AS DATETIME) AND sdh.entire_term_end = CAST(main_tb.delivery_date_to AS DATETIME)
						AND sdh.header_buy_sell_flag = ''b'' AND sdh.source_deal_type_id = 2
					INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
						AND CONVERT(NVARCHAR(8),sdd.term_start, 112) = main_tb.delivery_date_from
						AND sdd.buy_sell_flag = ''b'' 
						AND sdd.location_id = imp_tbl.receipt_point 
						AND sdd.Leg = 1
					LEFT JOIN user_defined_deal_fields_template uddft ON uddft.template_id = sdh.template_id
					LEFT JOIN user_defined_deal_fields uddf ON uddf.udf_template_id = uddft.udf_template_id 
						AND uddf.source_deal_header_id = sdh.source_deal_header_id
						AND uddft.field_id = -5630 AND uddf.udf_value = main_tb.package_id	
						AND NULLIF(main_tb.package_id, '''') IS NOT NULL
					WHERE main_tb.file_type = ''p''
					GROUP BY main_tb.svc_req, sdh.source_deal_header_id,main_tb.delivery_date_from '
		EXEC(@sql)
		
		SET @sql = 'INSERT INTO #total_phy_deals_val(phy_deal_id, svc_req, leg_1, leg_2, delivery_date_from, delivery_date_to, package_id, counterparty)
					SELECT phy.phy_deal_id,
					       phy.svc_req,
					       CAST(p.scheduled_receipt AS FLOAT) leg_1,
					       CAST(p.scheduled_delivery AS FLOAT) leg_2,
					       p.delivery_date_from,
					       p.delivery_date_to,
					       NULLIF(p.package_id, '''') package_id,
					       p.counterparty
					FROM #total_phy_deals phy
					INNER JOIN ' + @import_temp_table_name + ' p 
						ON p.svc_req = phy.svc_req 
						AND ISNULL(nullif(p.package_id, ''''), -1) = ISNULL(phy.package_id, -1)
						AND p.counterparty = phy.counterparty 
						AND p.delivery_date_from = phy.delivery_date_from 
					WHERE p.file_type = ''p''
			'
		EXEC(@sql)
		
		SELECT phy.phy_deal_id,
		       phy.svc_req,
		       SUM(phy.leg_1) leg_1_sum,
		       SUM(phy.leg_2) leg_2_sum,
		       phy.delivery_date_from,
		       phy.delivery_date_to
		INTO #total_phy_deals_sum
		FROM #total_phy_deals_val phy
		GROUP BY phy.svc_req, phy.delivery_date_from, phy.delivery_date_to, phy.phy_deal_id

		DECLARE @sdv_from_deal INT 
		SELECT @sdv_from_deal = value_id
		FROM static_data_value
		WHERE [TYPE_ID] = 5500 AND code = 'From Deal'
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #total_scheduled_deals(contract, phy_deal_id, scheduled_deal_id, schedule_id, path_id, path_detail_id)
					SELECT svc_req,
					       phy_deal_id,
					       scheduled_deal_id,
					       [Scheduled ID] schedule_id,
					       [Delivery Path] path_id,
					       [Path Detail ID] path_detail_id
					FROM (
						SELECT t.svc_req,
						       tpd.phy_deal_id,
						       uddf_sch.source_deal_header_id 
						       [scheduled_deal_id],
						       uddft_sch.Field_label,
						       uddf_sch.udf_value udf_value --, tmp_tbl.delivery_poi , mi2.recorderid
						FROM   user_defined_deal_fields uddf
						INNER JOIN 	[user_defined_deal_fields_template] uddft 
							ON uddft.udf_template_id = uddf.udf_template_id
							AND uddft.field_id = ' + CAST(@sdv_from_deal AS NVARCHAR(20)) + '
						INNER JOIN #total_phy_deals tpd ON CAST(tpd.phy_deal_id AS NVARCHAR) = uddf.udf_value
						INNER JOIN pipeline_up_down_service_k tmp_tbl ON tmp_tbl.serv_req_k = tpd.svc_req
						INNER JOIN ' + @import_temp_table_name + ' t 
							ON t.up_pkg_id = tmp_tbl.serv_req_k
							AND t.receipt_location_id = tmp_tbl.receipt_poi
							AND t.delivery_location_id =  tmp_tbl.delivery_poi
						INNER JOIN user_defined_deal_fields uddf_sch ON uddf_sch.source_deal_header_id = uddf.source_deal_header_id
						INNER JOIN source_deal_detail sdd_1 
							ON sdd_1.source_deal_header_id = uddf_sch.source_deal_header_id
							AND sdd_1.Leg = 1 AND tmp_tbl.receipt_point = sdd_1.location_id
							AND CONVERT(NVARCHAR(8),sdd_1.term_start, 112) = t.delivery_date_from
							AND CONVERT(NVARCHAR(8),sdd_1.term_end, 112) = t.delivery_date_to		
						INNER JOIN source_minor_location_meter smlm1 on 	smlm1.source_minor_location_id = sdd_1.location_id
						INNER JOIN meter_id mi1 ON mi1.meter_id = smlm1.meter_id AND t.receipt_location_id = mi1.recorderid
						INNER JOIN source_deal_detail sdd_2 
							ON sdd_2.source_deal_header_id = uddf_sch.source_deal_header_id
							AND sdd_2.Leg = 2 AND tmp_tbl.delivery_point = sdd_2.location_id
						INNER JOIN source_minor_location_meter smlm2 on 	smlm2.source_minor_location_id = sdd_2.location_id
						INNER JOIN meter_id mi2 ON mi2.meter_id = smlm2.meter_id AND t.delivery_location_id = mi2.recorderid
						INNER JOIN user_defined_deal_fields_template uddft_sch ON uddft_sch.udf_template_id = uddf_sch.udf_template_id	
						WHERE t.file_type = ''t'' 
					) s1
					PIVOT(MAX(udf_value) FOR Field_label IN ([Scheduled ID], [Delivery Path], [Path Detail ID])) AS a '
		EXEC(@sql)	
		
		--- update UDF values for scheduled deal as from physical deal
		--updating schedule deal's udf value  pkg ID(-5630) as defined in its physical deal.
		UPDATE uddf_scv
		SET    udf_value = tpd.package_id
		FROM   user_defined_deal_fields uddf_scv
		INNER JOIN #total_scheduled_deals tsd ON  tsd.scheduled_deal_id = uddf_scv.source_deal_header_id
		INNER JOIN #total_phy_deals tpd ON  tpd.phy_deal_id = tsd.phy_deal_id
		INNER JOIN user_defined_deal_fields_template uddft_pkg
		    ON  uddft_pkg.udf_template_id = uddf_scv.udf_template_id
		    AND uddft_pkg.field_id = -5630
		    
		--updating schedule deal's udf value scv req k(-5631) as defined in its physical deal.
		UPDATE uddf_scv
		SET udf_value = tpd.svc_req 
		FROM user_defined_deal_fields uddf_scv
		INNER JOIN #total_scheduled_deals tsd ON  tsd.scheduled_deal_id = uddf_scv.source_deal_header_id
		INNER JOIN #total_phy_deals tpd ON  tpd.phy_deal_id = tsd.phy_deal_id
		INNER JOIN user_defined_deal_fields_template uddft_pkg
		    ON  uddft_pkg.udf_template_id = uddf_scv.udf_template_id
		    AND uddft_pkg.field_id = -5631 
		    
		-- Update K ID in scheduled deal ( udf detail level)
		UPDATE udddf_scv
		SET udf_value = CASE sdd.leg WHEN 1 THEN tpd.contract WHEN 2 THEN tpd.svc_req ELSE NULL END
		FROM #total_scheduled_deals tsd
		INNER JOIN #total_phy_deals tpd ON  tpd.phy_deal_id = tsd.phy_deal_id
		INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = tsd.scheduled_deal_id
		INNER JOIN user_defined_deal_fields_template uddft_pkg
			ON  uddft_pkg.template_id = sdh.template_id
			AND uddft_pkg.field_id = -5635
		INNER JOIN source_deal_detail sdd
			ON  sdd.source_deal_header_id = sdh.source_deal_header_id
			AND sdd.leg = uddft_pkg.leg
		INNER JOIN user_defined_deal_detail_fields udddf_scv
			ON  udddf_scv.source_deal_detail_id = sdd.source_deal_detail_id
			AND udddf_scv.udf_template_id = uddft_pkg.udf_template_id 
		
		-- update Up K Id and Down K Id in physical deal ( udf header level)
		UPDATE uddf
		SET uddf.udf_value = CASE uddft.Field_id WHEN -5634 THEN p.contract WHEN -5631 THEN p.svc_req ELSE NULL END
		FROM user_defined_deal_fields uddf
		INNER JOIN #total_phy_deals p ON  p.phy_deal_id = uddf.source_deal_header_id
		INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = uddf.source_deal_header_id
		INNER JOIN user_defined_deal_fields_template uddft
			ON  uddft.template_id = sdh.template_id
			AND uddft.field_name IN (-5634, -5631)
			AND uddft.udf_template_id = uddf.udf_template_id 
		
		SELECT id = IDENTITY(INT, 1, 1),
		       tsd.phy_deal_id,
		       sdd.source_deal_header_id,
		       sdd.leg,
		       deal_volume,
		       phy.svc_req,
		       phy.package_id,
		       phy.counterparty,
		       phy.delivery_date_from,
		       cg.contract_name
		INTO #deal_vol
		FROM   #total_scheduled_deals tsd
		INNER JOIN #total_phy_deals phy ON  phy.phy_deal_id = tsd.phy_deal_id
		INNER JOIN source_deal_detail sdd ON  sdd.source_deal_header_id = tsd.scheduled_deal_id
		INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = sdd.source_deal_header_id
		LEFT JOIN contract_group cg ON  cg.contract_id = sdh.contract_id
		
		-- extract mismatch contract for scheduled deals
		SELECT id = IDENTITY(INT, 1, 1),
		       MAX(dd.svc_req)       svc_req,
		       t.scheduled_deal_id,
		       MAX(t.[contract])     transport_contract,
		       MAX(dd.contract_name) deal_contract 
		INTO #contract_mismatch_deals
		FROM #total_scheduled_deals t
		LEFT JOIN #deal_vol d
		    ON  t.scheduled_deal_id = d.source_deal_header_id
		    AND d.contract_name = t.contract
		LEFT JOIN #deal_vol dd ON dd.source_deal_header_id = t.scheduled_deal_id
		WHERE  d.id IS NULL
		GROUP BY t.scheduled_deal_id
		
		SELECT unpvt.phy_deal_id,
		       unpvt.svc_req,
		       dbo.FNAGetSplitPart(unpvt.leg, '_', 2) leg,
		       unpvt.diff sum_diff 
		INTO #vol_diff 
		FROM (
			SELECT (phy.leg_1_sum - l.leg1) leg_1 , (phy.leg_2_sum - l.leg2) leg_2, phy.svc_req, phy.phy_deal_id 
			FROM (
				SELECT phy_deal_id, svc_req, (SUM([1])) leg1, (SUM([2])) leg2 
				FROM #deal_vol AS s
				PIVOT (	SUM(deal_volume) FOR leg IN ([1],[2]) ) AS p  
				GROUP BY p.phy_deal_id, p.svc_req
			) l
			INNER JOIN #total_phy_deals_sum phy ON phy.svc_req = l.svc_req AND phy.phy_deal_id = l.phy_deal_id
		) p
		UNPIVOT(diff FOR leg IN (leg_1, leg_2)) AS unpvt 
		
		---- update scheduled deals ( using purchase file)
		UPDATE sdd
		SET sdd.deal_volume = CASE WHEN SUBSTRING(PARSENAME(sdd.deal_volume + (sdd.deal_volume / p.leg_sum * vd.sum_diff), 1), 1, 2) >= 50 
										THEN CEILING(sdd.deal_volume + (sdd.deal_volume / p.leg_sum * vd.sum_diff))
		                              ELSE FLOOR(sdd.deal_volume + (sdd.deal_volume / p.leg_sum * vd.sum_diff))
		                      END
		FROM #deal_vol d
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = d.source_deal_header_id AND sdd.leg = d.leg
		INNER JOIN #vol_diff vd ON vd.phy_deal_id = d.phy_deal_id AND vd.svc_req = d.svc_req AND vd.leg = d.Leg
		INNER JOIN (
			SELECT svc_req,
			        phy_deal_id,
			        leg,
			        SUM(deal_volume) leg_sum
			 FROM   #deal_vol
			 GROUP BY leg, svc_req, phy_deal_id 
		) p ON p.phy_deal_id = d.phy_deal_id AND p.leg = d.leg AND p.svc_req = d.svc_req
		LEFT JOIN #contract_mismatch_deals c ON c.svc_req = d.svc_req -- ignore all deals with mismatch contract svc_req
		WHERE vd.sum_diff <> 0 AND c.id IS NULL
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #transport_deal_vol(up_pkg_id, scheduled_receipt_sum, scheduled_delivery_sum, delivery_date_from, delivery_date_to, receipt_location, delivery_location)
					SELECT t.up_pkg_id,
					       SUM(CAST(t.scheduled_receipt AS FLOAT)) scheduled_receipt_sum,
					       SUM(CAST(t.scheduled_delivery AS FLOAT)) scheduled_delivery_sum,
					       t.delivery_date_from,
					       t.delivery_date_to,
					       MAX(receipt_location_id),
					       MAX(delivery_location_id)
					FROM ' + @import_temp_table_name + ' t
					INNER JOIN (
						SELECT svc_req,
						       MAX(delivery_date_from) delivery_date_from,
						       MAX(delivery_date_to) delivery_date_to
						FROM   #total_phy_deals_sum
						GROUP BY svc_req
					) phy ON phy.svc_req = t.up_pkg_id 
						  AND cast(phy.delivery_date_from AS DATETIME) = cast(t.delivery_date_from AS DATETIME) 
						  AND cast(phy.delivery_date_to AS DATETIME) = cast(t.delivery_date_to AS DATETIME)
					WHERE t.file_type = ''t''
					GROUP BY t.up_pkg_id,t.delivery_date_from, t.delivery_date_to '
		EXEC(@sql)
		
		------------- Extract MD , MR deal with srv req, PIPE
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #pipe_rs(up_pkg_id, delivery_date_from, delivery_date_to, generic_mapping_value_id, transport_contract, scheduled_receipt, scheduled_delivery, receipt_location, delivery_location, term_pricing_index_leg1, term_pricing_index_leg2)
					SELECT up_pkg_id,
					       delivery_date_from,
					       delivery_date_to,
					       generic_mapping_value_id,
					       MAX(svc_req),
					       MAX(scheduled_receipt),
					       MAX(scheduled_delivery),
					       MAX(receipt_location),
					       MAX(delivery_location),
					       MAX(term_pricing_index_leg1),
					       MAX(term_pricing_index_leg2)
					FROM (
						SELECT CASE 
								WHEN rs_t.up_pkg_id = ''pipe'' AND rs_t.delivery_location_id = 216821 THEN 5	--MR
								WHEN rs_t.up_pkg_id = ''pipe'' AND rs_t.delivery_location_id <> 216821 THEN 4	--MD
							END generic_mapping_value_id
							, rs_t.up_pkg_id
							, rs_t.delivery_date_from
							, rs_t.delivery_date_to
							, rs_t.delivery_location_id
							, MAX(rs_t.svc_req) svc_req
							, MAX(CAST(scheduled_receipt AS FLOAT)) scheduled_receipt 
							, MAX(CAST(scheduled_delivery AS FLOAT)) scheduled_delivery
							, MAX(smlm_r.source_minor_location_id) receipt_location
							, MAX(smlm_d.source_minor_location_id) delivery_location
							, MAX(sml_r.term_pricing_index) term_pricing_index_leg1
							, MAX(sml_d.term_pricing_index) term_pricing_index_leg2
						FROM ' + @import_temp_table_name + ' rs_t
						LEFT JOIN meter_id mi_r_loc ON mi_r_loc.recorderid = rs_t.receipt_location_id
						LEFT JOIN source_minor_location_meter smlm_r ON smlm_r.meter_id = mi_r_loc.meter_id
						LEFT JOIN source_minor_location sml_r ON sml_r.source_minor_location_id = smlm_r.source_minor_location_id
						LEFT JOIN meter_id mi_d_loc ON mi_d_loc.recorderid = rs_t.delivery_location_id
						LEFT JOIN source_minor_location_meter smlm_d ON smlm_d.meter_id = mi_d_loc.meter_id 
						LEFT JOIN source_minor_location sml_d ON sml_d.source_minor_location_id = smlm_d.source_minor_location_id
						WHERE rs_t.up_pkg_id = ''pipe'' AND rs_t.file_type = ''t''
						GROUP BY  rs_t.up_pkg_id, rs_t.delivery_date_from, rs_t.delivery_date_to,rs_t.delivery_location_id
					) t
					GROUP BY generic_mapping_value_id,up_pkg_id,delivery_date_from,delivery_date_to
					HAVING COUNT(t.up_pkg_id) = 1'
		EXEC(@sql)
		
		--SELECT * FROM #total_86T_deals
		
		
		INSERT INTO #total_86T_deals (up_pkg_id, delivery_date_from, delivery_date_to, from_deal_id, source_deal_header_id, template_id, template_name, generic_mapping_value_id, transport_contract)
		SELECT rs_t.up_pkg_id,
		       rs_t.delivery_date_from,
		       rs_t.delivery_date_to,
		       MAX(uddf.udf_value) [from_deal_id],
		       sdh.source_deal_header_id,
		       MAX(sdht.template_id) template_id,
		       MAX(sdht.template_name) template_name,
		       MAX(rs_t.generic_mapping_value_id) generic_mapping_value_id,
		       MAX(rs_t.transport_contract) transport_contract
		FROM  #pipe_rs rs_t
		INNER JOIN generic_mapping_header gmh ON gmh.mapping_name = 'Imbalance Report'
		INNER JOIN generic_mapping_values gmv
		    ON gmh.mapping_table_id = gmv.mapping_table_id
		    AND ISNUMERIC(gmv.clm1_value) = 1
		    AND gmv.clm1_value = rs_t.generic_mapping_value_id
		INNER JOIN source_deal_header_template sdht ON CAST(sdht.template_id AS NVARCHAR(100)) = gmv.clm3_value
		INNER JOIN source_deal_header sdh ON  sdh.template_id = sdht.template_id
		INNER JOIN source_deal_detail sdd
		    ON  sdd.source_deal_header_id = sdh.source_deal_header_id
		    AND CONVERT(NVARCHAR(8), sdd.term_start, 112) = rs_t.delivery_date_from
		LEFT JOIN user_defined_deal_fields_template uddft ON  uddft.template_id = sdh.template_id
		LEFT JOIN user_defined_deal_fields uddf
		    ON  uddf.udf_template_id = uddft.udf_template_id
		    AND uddft.field_id = @sdv_from_deal
		    AND uddf.source_deal_header_id = sdh.source_deal_header_id
		WHERE  rs_t.up_pkg_id = 'pipe' --AND rs_t.total_rs = 1
		GROUP BY rs_t.up_pkg_id, rs_t.delivery_date_from, rs_t.delivery_date_to, sdh.source_deal_header_id
		
		--SELECT * FROM #total_86T_deals
		
		--------- logic to create MD Deals if not found ------------
		
		DECLARE @md_template_id INT, @contract_deal INT
		
		SELECT TOP 1 @md_template_id = gmv.clm3_value
		FROM  generic_mapping_values gmv
		INNER JOIN generic_mapping_header gmh ON  gmh.mapping_table_id = gmv.mapping_table_id
		WHERE  gmh.mapping_name = 'Imbalance Report' AND gmv.clm1_value = '4'
		
		--SET @sub_book = 78 
		
		
		IF CURSOR_STATUS('local','pipeline_cursor') > = -1
		BEGIN
			DEALLOCATE pipeline_cursor
		END
		
		DECLARE pipeline_cursor CURSOR LOCAL FOR
		SELECT CONVERT(DATETIME, p.delivery_date_from, 120) deliver_date_from,
		       CONVERT(DATETIME, p.delivery_date_to, 120) deliver_date_to,
		       cg.contract_id,
		       p.scheduled_receipt,
		       p.scheduled_delivery,
		       p.receipt_location,
		       p.delivery_location,
		       p.term_pricing_index_leg1,
		       p.term_pricing_index_leg2
		FROM   #pipe_rs p
		LEFT JOIN #total_86T_deals t ON  t.generic_mapping_value_id = p.generic_mapping_value_id
		LEFT JOIN contract_group cg ON  cg.contract_name = p.transport_contract
		WHERE  p.generic_mapping_value_id = 4
		       AND t.id IS NULL
		       AND p.up_pkg_id IS NOT NULL
		
		OPEN pipeline_cursor 
		FETCH NEXT FROM pipeline_cursor 
		INTO @term_start, @term_end, @contract_id, @leg1_vol, @leg2_vol, @receipt_location_id, @delivery_location_id, @term_pricing_index_leg1, @term_pricing_index_leg2
		WHILE @@FETCH_STATUS = 0
		BEGIN
			SET @contract_deal = NULL
			SET @sub_book = NULL

			SELECT DISTINCT TOP 1 @contract_deal = sdh.source_deal_header_id FROM #pipe_rs p 
			INNER JOIN contract_group cg ON cg.contract_name = p.transport_contract
			INNER JOIN (
				SELECT clm5_value template_id, gmv.clm9_value contract_id from generic_mapping_values gmv 
				INNER JOIN generic_mapping_header gmh ON gmh.mapping_table_id = gmv.mapping_table_id 
				WHERE gmh.mapping_name = 'Imbalance Deal'
			) g ON g.contract_id = cg.contract_id
			INNER JOIN source_deal_header sdh ON sdh.contract_id = cg.contract_id AND sdh.template_id = g.template_id 
			--AND p.delivery_date_from BETWEEN sdh.entire_term_start AND sdh.entire_term_end
			WHERE cg.contract_id = @contract_id AND p.generic_mapping_value_id = 4		
			
			select DISTINCT TOP 1 @sub_book = ssbm.book_deal_type_map_id FROM source_deal_header sdh
			INNER JOIN source_system_book_map ssbm ON ssbm.source_system_book_id1 = sdh.source_system_book_id1
			 AND ssbm.source_system_book_id2 = sdh.source_system_book_id2
			 AND ssbm.source_system_book_id3 = sdh.source_system_book_id3
			 AND ssbm.source_system_book_id4 = sdh.source_system_book_id4
			WHERE sdh.source_deal_header_id = @contract_deal

			CREATE TABLE #process_table (process_table_name NVARCHAR(200) COLLATE DATABASE_DEFAULT)
			
			SET @deal_date = @term_start
			INSERT INTO #process_table (process_table_name)
			EXEC spa_blotter_deal 't', @md_template_id, 1, @term_start, @term_end, @deal_date
			
			SELECT @deal_table = process_table_name FROM #process_table
			
			-- Adding columns which may be hidden in template
			SET @sql = 'IF NOT EXISTS(SELECT * FROM sys.columns WHERE [name] = N''d_curve_id'' AND [object_id] = OBJECT_ID(N''' + STUFF(@deal_table, 1, 18, '') + '''))
						BEGIN
							ALTER TABLE ' +  @deal_table + ' ADD d_curve_id INT NULL
						END

						IF NOT EXISTS(SELECT * FROM sys.columns WHERE [name] = N''d_settlement_date'' AND [object_id] = OBJECT_ID(N''' + STUFF(@deal_table, 1, 18, '') + '''))
						BEGIN
							ALTER TABLE ' +  @deal_table + ' ADD d_settlement_date DATETIME NULL
						END
						'
			EXEC(@sql)
			
			EXEC('ALTER TABLE ' +  @deal_table + ' ALTER COLUMN leg NVARCHAR(10)')
			EXEC('UPDATE ' + @deal_table + ' SET row_id = leg, leg = ''1__'' + leg')
			
			-- Update Deal Header
			SET @sql = 'UPDATE ' + @deal_table + '
			            SET    h_sub_book = ' + CAST(@sub_book AS NVARCHAR(20)) + ',
			                   h_deal_date = ''' + CONVERT(NVARCHAR(10), @term_start, 120)  + ''',
			                   h_contract_id = ''' + CONVERT(NVARCHAR(10), @contract_id, 120) + ''' 
			            '
			EXEC(@sql)
			
			-- leg 1
			SET @sql = 'UPDATE ' + @deal_table + ' 
						SET d_term_start = ''' + CONVERT(NVARCHAR(10), @term_start, 120) + ''' ' +  
							',  d_term_end = ''' + CONVERT(NVARCHAR(10), @term_end, 120) + ''' ' + 
							ISNULL(', d_settlement_date = ''' + CONVERT(NVARCHAR(10), @term_end, 120) + ''' ', '') + 
							ISNULL(', d_deal_volume = ' + CAST(@leg1_vol AS NVARCHAR(50)), '') +
							ISNULL(', d_location_id = ' + CAST(@receipt_location_id AS NVARCHAR(50)), '') +
							ISNULL(', d_curve_id = ' + CAST(@term_pricing_index_leg1 AS NVARCHAR(50)), '') +						
						' WHERE leg = ''1__1'' '
			--PRINT(@sql)
			EXEC(@sql)
			
			-- leg 2
			SET @sql = 'UPDATE ' + @deal_table + ' 
						SET d_term_start = ''' + CONVERT(NVARCHAR(10), @term_start, 120) + ''' ' + 
							', d_term_end = ''' + CONVERT(NVARCHAR(10), @term_end, 120) + ''' ' + 
							ISNULL(', d_settlement_date = ''' + CONVERT(NVARCHAR(10), @term_end, 120) + ''' ', '') + 
							ISNULL(', d_deal_volume = ' + CAST(@leg2_vol AS NVARCHAR(50)), '') +
							ISNULL(', d_location_id = ' + CAST(@delivery_location_id AS NVARCHAR(50)), '') +
							ISNULL(', d_curve_id = ' + CAST(@term_pricing_index_leg2 AS NVARCHAR(50)), '') +
						' WHERE leg = ''1__2'' '
			--PRINT(@sql)
			EXEC(@sql)
			
			SET @sub_process_id = @process_id + '_' + CAST(@deal_sn AS NVARCHAR(3))
			EXEC spa_insert_template_deal @md_template_id, @sub_book, @deal_table, @sub_process_id
			
			SET @inserted_deal_tbl = dbo.FNAProcessTableName('deal_inserted', @user_login_id, @sub_process_id)
			
			EXEC ('INSERT INTO #md_deal_inserted(deals) SELECT deals FROM ' + @inserted_deal_tbl)

			DROP TABLE #process_table
			SET @deal_sn = @deal_sn + 1
					
			FETCH NEXT FROM pipeline_cursor INTO @term_start, @term_end, @contract_id, @leg1_vol, @leg2_vol, @receipt_location_id, @delivery_location_id, @term_pricing_index_leg1, @term_pricing_index_leg2
		END
		CLOSE pipeline_cursor
		DEALLOCATE pipeline_cursor
		
		
		-- extract mismatch contract from md/mr deals
		INSERT INTO #contract_mismatch_deals(svc_req, scheduled_deal_id, transport_contract, deal_contract)
		SELECT t.up_pkg_id,
		       sdh.source_deal_header_id,
		       t.transport_contract,
		       cg.contract_name
		FROM source_deal_header sdh
		INNER JOIN contract_group cg ON  cg.contract_id = sdh.contract_id
		INNER JOIN #total_86T_deals t ON  t.source_deal_header_id = sdh.source_deal_header_id
		LEFT JOIN #contract_mismatch_deals c
		    ON  c.scheduled_deal_id = t.source_deal_header_id
		    AND c.svc_req = t.up_pkg_id
		WHERE  t.transport_contract <> cg.contract_name
		
		SELECT tsd.phy_deal_id,
		       sdd.source_deal_header_id,
		       sdd.leg,
		       deal_volume,
		       phy.svc_req,
		       phy.package_id,
		       phy.counterparty,
		       phy.delivery_date_from
		INTO #deal_vol_new
		FROM #total_scheduled_deals tsd
		INNER JOIN #total_phy_deals phy ON phy.phy_deal_id = tsd.phy_deal_id
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = tsd.scheduled_deal_id
		LEFT JOIN #total_86T_deals mr ON mr.source_deal_header_id  = sdd.source_deal_header_id AND mr.generic_mapping_value_id = 5
		WHERE mr.id IS NULL
		
		SELECT unpvt.svc_req, unpvt.delivery_date_from, unpvt.leg_sum sum_diff, dbo.FNAGetSplitPart(leg, '_', 2) leg
		INTO  #vol_diff_child
		FROM (
			SELECT phy.svc_req,
			       phy.delivery_date_from,
			       t.scheduled_receipt_sum - phy.leg_1_sum leg_1_diff,
			       t.scheduled_delivery_sum - phy.leg_2_sum leg_2_diff
			FROM (
				SELECT svc_req,
				       (SUM([1]))     leg_1_sum,
				       (SUM([2]))     leg_2_sum,
				       delivery_date_from
				FROM   #deal_vol_new s
				PIVOT(SUM(deal_volume) FOR leg IN ([1], [2])) AS p
				GROUP BY p.svc_req, delivery_date_from	
			) phy 
			INNER JOIN #transport_deal_vol t ON t.up_pkg_id = phy.svc_req AND t.delivery_date_from = phy.delivery_date_from
		) pp
		UNPIVOT (leg_sum FOR leg IN (leg_1_diff, leg_2_diff)) AS unpvt 
		
		
		---- update scheduled deal volume (comparing with transport file)
		UPDATE sdd 
		SET sdd.deal_volume = CASE WHEN SUBSTRING(PARSENAME(sdd.deal_volume + (sdd.deal_volume/p.leg_sum * vd.sum_diff), 1), 1, 2) >= 50 
										THEN CEILING(sdd.deal_volume + (sdd.deal_volume/p.leg_sum * vd.sum_diff))
								   ELSE FLOOR(sdd.deal_volume + (sdd.deal_volume/p.leg_sum * vd.sum_diff)) 
		                      END
		FROM #deal_vol_new d
		INNER JOIN #vol_diff_child vd ON vd.svc_req = d.svc_req AND vd.leg = d.Leg AND vd.delivery_date_from = d.delivery_date_from
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = d.source_deal_header_id AND sdd.leg = d.leg
		INNER JOIN (
			SELECT d.phy_deal_id,
			       d.source_deal_header_id,
			       d.leg,
			       d.svc_req,
			       s.leg_sum 
			FROM #deal_vol_new d 
			INNER JOIN (
			    SELECT svc_req,
			            leg,
			            SUM(deal_volume) leg_sum
			    FROM #deal_vol_new
			    GROUP BY leg, svc_req
			) s ON s.svc_req = d.svc_req AND s.Leg = d.Leg
		) p ON p.phy_deal_id = d.phy_deal_id AND p.leg = d.leg AND p.source_deal_header_id = d.source_deal_header_id
		LEFT JOIN #contract_mismatch_deals c ON c.svc_req = d.svc_req 
		WHERE vd.sum_diff <> 0 AND c.id IS NULL
		
		----scheduled deal logging			
		INSERT INTO #scheduled_deal_log(svc_req, physical_deal, scheduled_deal, leg, pkg_id, counterparty, receipt_location, delivery_location, old_vol, new_vol)
		SELECT svc_req,
		       MAX(sdh_p.deal_id),
		       sdh_s.deal_id,
		       d.leg,
		       d.package_id,
		       MAX(sc.counterparty_name),
		       MAX(sml_r.Location_Name),
		       MAX(sml_d.Location_Name),
		       MAX(d.deal_volume),
		       MAX(sdd.deal_volume)
		FROM #deal_vol d
		INNER JOIN source_deal_header sdh_p ON sdh_p.source_deal_header_id = d.phy_deal_id
		INNER JOIN source_deal_header sdh_s ON sdh_s.source_deal_header_id = d.source_deal_header_id
		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh_s.source_deal_header_id AND sdd.leg = d.leg
		INNER JOIN source_counterparty sc ON sc.source_counterparty_id = sdh_s.counterparty_id
		LEFT JOIN source_minor_location sml_r ON sml_r.source_minor_location_id = sdd.location_id AND sdd.leg = 1
		LEFT JOIN source_minor_location sml_d ON sml_d.source_minor_location_id = sdd.location_id AND sdd.leg = 2
		LEFT JOIN #total_86T_deals mr ON mr.source_deal_header_id  = sdd.source_deal_header_id AND mr.generic_mapping_value_id = 5
		WHERE mr.id IS NULL		
		GROUP BY svc_req, sdh_s.deal_id, d.leg, d.package_id
		
		------------- Using MD , MR template to map deal with srv req, PIPE
		
		SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #deal_vol_md_mr(from_deal_id, template_name, source_deal_header_id, leg, deal_vol, new_vol, location, delivery_date_from, up_pkg_id)
					SELECT t.from_deal_id,
					       t.template_name,
					       t.source_deal_header_id,
					       ISNULL(d.leg, sdd.leg),
					       MAX(ISNULL(d.deal_volume, sdd.deal_volume)),
					       CASE ISNULL(d.leg, sdd.leg)
					            WHEN 1 THEN MAX(rs_t.scheduled_receipt)
					            WHEN 2 THEN MAX(rs_t.scheduled_delivery)
					       END new_vol,
					       CASE ISNULL(d.leg, sdd.leg)
					            WHEN 1 THEN MAX(sml_r.Location_Name)
					            WHEN 2 THEN MAX(sml_d.Location_Name)
					       END,
					       t.delivery_date_from,
					       MAX(rs_t.up_pkg_id)
					FROM   #total_86T_deals t
					INNER JOIN ' + @import_temp_table_name + ' rs_t 
						 ON rs_t.up_pkg_id = t.up_pkg_id
						 AND rs_t.delivery_date_from = t.delivery_date_from
						 AND rs_t.delivery_date_to = t.delivery_date_to
						 AND ((t.generic_mapping_value_id = 5 AND rs_t.delivery_location_id = 216821)
							  OR (t.generic_mapping_value_id = 4 AND rs_t.delivery_location_id <> 216821))
					INNER JOIN source_deal_detail sdd2 
						ON sdd2.source_deal_header_id = t.source_deal_header_id 
						AND CONVERT(NVARCHAR(8), sdd2.term_start, 112) = t.delivery_date_from 
						AND CONVERT(NVARCHAR(8), sdd2.term_end, 112) = t.delivery_date_to
					LEFT JOIN #deal_vol d 
						ON d.source_deal_header_id = t.source_deal_header_id 
						AND d.delivery_date_from = t.delivery_date_from
					LEFT JOIN source_deal_detail sdd ON sdd.source_deal_header_id = t.source_deal_header_id
					LEFT JOIN source_minor_location sml_r 
						ON sml_r.source_minor_location_id = sdd.location_id 
						AND sdd.leg = 1
					LEFT JOIN source_minor_location sml_d 
						ON sml_d.source_minor_location_id = sdd.location_id 
						AND sdd.leg = 2
					WHERE rs_t.file_type = ''t''
					GROUP BY  t.from_deal_id, t.template_name, t.source_deal_header_id, ISNULL(d.leg, sdd.leg), t.delivery_date_from
					'
		EXEC(@sql)
		
		-- updating deal for MD/MR
		UPDATE sdd 
		SET sdd.deal_volume = CASE WHEN SUBSTRING(PARSENAME(d.new_vol, 1), 1, 2) >=50 
										THEN CEILING(d.new_vol) 
								   ELSE FLOOR(d.new_vol) 
		                      END 
		FROM source_deal_detail sdd
		INNER JOIN #deal_vol_md_mr d 
			ON d.source_deal_header_id = sdd.source_deal_header_id 
			AND d.leg = sdd.leg
		LEFT JOIN #contract_mismatch_deals c ON c.svc_req = d.up_pkg_id
		WHERE d.deal_vol <> d.new_vol AND c.id IS NULL
		
		----physical deal logging			
		INSERT INTO #physical_deal_log(svc_req, phy_deal_id, physical_deal, counterparty, receipt_location, old_vol, new_vol)
		SELECT phy.svc_req,
		       sdh.source_deal_header_id,
		       sdh.deal_id,
		       MAX(sc.counterparty_name),
		       MAX(sml_r.Location_Name),
		       MAX(sdd_phy.deal_volume),
		       MAX(p.new_phy_volume) 
		FROM (
			SELECT tsd.phy_deal_id,
			       sdd.leg,
			       SUM(sdd.deal_volume) new_phy_volume
			FROM   #total_scheduled_deals tsd
			INNER JOIN source_deal_detail sdd
			    ON  sdd.source_deal_header_id = tsd.scheduled_deal_id
			    AND leg = 1
			GROUP BY tsd.phy_deal_id, sdd.leg
		) p 
		INNER JOIN source_deal_detail sdd_phy 
			ON sdd_phy.source_deal_header_id = p.phy_deal_id 
			AND sdd_phy.leg = p.leg
		INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd_phy.source_deal_header_id
		INNER JOIN #total_phy_deals phy ON phy.phy_deal_id = p.phy_deal_id
		INNER JOIN source_counterparty sc ON sc.source_counterparty_id = sdh.counterparty_id
		INNER JOIN source_minor_location sml_r 
			ON sml_r.source_minor_location_id = sdd_phy.location_id 
			AND sdd_phy.leg = 1
		GROUP BY phy.svc_req, sdh.source_deal_header_id, sdh.deal_id
		
		---- update physical deal volume
		UPDATE sdd
		SET    sdd.deal_volume = CASE WHEN SUBSTRING(PARSENAME(p.new_vol, 1), 1, 2) >= 50 THEN CEILING(p.new_vol)
		                              ELSE FLOOR(p.new_vol)
		                         END
		FROM   source_deal_detail sdd
		INNER JOIN #physical_deal_log p
		    ON  p.phy_deal_id = sdd.source_deal_header_id
		    AND sdd.leg = 1
		
		-- updating physical deal for MR case
		UPDATE sdd 
		SET sdd.deal_volume = CASE WHEN SUBSTRING(PARSENAME(d.new_vol, 1), 1, 2) >= 50 THEN CEILING(d.new_vol) 
								   ELSE FLOOR(d.new_vol) 
		                      END 
		FROM source_deal_detail sdd
		INNER JOIN #deal_vol_md_mr d 
			ON d.from_deal_id = sdd.source_deal_header_id 
			AND d.leg = 1
		LEFT JOIN #physical_deal_log phy ON phy.phy_deal_id = d.from_deal_id
		WHERE d.deal_vol <> d.new_vol AND phy.id IS NULL
		
		-- logging for MD deal insertion
		EXEC ('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			    SELECT DISTINCT ''' + @process_id +  ''',
			            ''Success'',
			            ''Import           DATA'',
			            ''Pipeline Cut     DATA'',
			            ''Results'',
			            ''MD deal : '' + ISNULL(sdh.deal_id, '''') + '' 
			            INSERTED           successfully''
			    FROM   #md_deal_inserted d
			    INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = dbo.FNAGetSplitPart(d.deals, '','', 1)
			')
		
		-- logging for MD/MR deal update
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			    SELECT DISTINCT ''' + @process_id + ''',
			            ''Success'',
			            ''Import           DATA'',
			            ''Pipeline Cut     DATA'',
			            ''Results'',
			            ISNULL(d.template_name, '''') + '' deal : '' + ISNULL(sdh.deal_id, '''') 
							+ '' Leg : '' + ISNULL(CAST(d.leg AS NVARCHAR(2)), '''') 
							+ '' Term : '' + ISNULL(d.delivery_date_from, '''') + CASE d.leg WHEN 1 THEN '', Receipt location : '' WHEN 2 THEN '', Delivery location : '' END 
							+ ISNULL(d.location, '''') +
							''. PRIOR volume : '' + ISNULL(dbo.FNARemoveTrailingZero(deal_vol), '''') + '', CURRENT volume : '' + ISNULL( dbo.FNARemoveTrailingZero(
			                    CASE 
			                        WHEN SUBSTRING(PARSENAME(d.new_vol, 1), 1, 2) 
			                            >= 50 THEN CEILING(d.new_vol)
			                        ELSE FLOOR(d.new_vol)
			                    END
			                ),
			                ''''
			            )
			    FROM   #deal_vol_md_mr d
			    INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = d.source_deal_header_id
			    LEFT JOIN #contract_mismatch_deals c ON  c.svc_req = d.up_pkg_id
			    WHERE  d.deal_vol <> d.new_vol AND c.id IS NULL
		')
			
		-- logging for MR physical deal update
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			    SELECT DISTINCT ''' + @process_id + ''',
			            ''Success'',
			            ''Import Data'',
			            ''Pipeline Cut Data'',
			            ''Results'',
			            ''MR Physical deal : '' + ISNULL(sdh.deal_id, '''') + '' Leg : '' + ISNULL(CAST(d.leg AS NVARCHAR(2)), '''') + ''. PRIOR volume : '' + ISNULL(dbo.FNARemoveTrailingZero(deal_vol), '''') + '',
			            CURRENT volume : '' + ISNULL(
			                dbo.FNARemoveTrailingZero(
			                    CASE 
			                        WHEN SUBSTRING(PARSENAME(d.new_vol, 1), 1, 2) 
			                            >= 50 THEN CEILING(d.new_vol)
			                        ELSE FLOOR(d.new_vol)
			                    END
			                ),
			                ''''
			            )
			    FROM   #deal_vol_md_mr d
			    INNER JOIN source_deal_header sdh ON  sdh.source_deal_header_id = d.from_deal_id
			    LEFT JOIN #physical_deal_log p ON  p.phy_deal_id = d.from_deal_id
			    WHERE  d.leg = 1
			    AND d.deal_vol <> d.new_vol AND p.id IS        NULL -- do not log MR phyiscal deal which has schedule deal as well
		')		
				
		-- logging for md/mr which doesn't update any deal	
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			    SELECT DISTINCT ''' + @process_id + ''',
			            ''Warning'',
			            ''Import           DATA'',
			            ''Pipeline Cut     DATA'',
			            ''Results'',
			            '' No '' + CASE t.generic_mapping_value_id WHEN 4 THEN ''MD'' WHEN 5 THEN ''MR'' ELSE ''NULL'' END + '' deal updated FOR Term : '' + ISNULL(t.delivery_date_from, '''')
			    FROM   #total_86T_deals t
			    LEFT JOIN #deal_vol_md_mr d ON  d.source_deal_header_id = t.source_deal_header_id AND d.deal_vol <> d.new_vol
			    WHERE  d.id IS NULL
			')

		-- logging for deals not updated due to contract mismatch
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			    SELECT DISTINCT ''' + @process_id + ''',
			            ''Warning'',
			            ''Import           DATA'',
			            ''Pipeline Cut     DATA'',
			            ''Results'',
			            '' CONTRACT mismatch FOR deal '' + sdh.deal_id + ''. Svc Req : '' + ISNULL(c.svc_req, NULL) + ''. Transport CONTRACT : '' + ISNULL(c.transport_contract, ''NULL'') + '',
			            Deal CONTRACT : '' + ISNULL(c.deal_contract, ''NULL'')
			    FROM   #contract_mismatch_deals c
			    INNER JOIN source_deal_header sdh
			        ON  sdh.source_deal_header_id = c.scheduled_deal_id
			')
				
		-- scheduled deal update logging
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			SELECT ''' + @process_id + ''',
					''Success'',
					''Import           DATA'',
					''Pipeline Cut     DATA'',
					''Results'',
					'' Scheduled deal updated FOR deal : '' + ISNULL(scheduled_deal, '''') + '',
					Leg : '' + ISNULL(leg, '''') + '',
					Respective physical deal : '' + ISNULL(physical_deal, '''') + '',
					package ID : '' + ISNULL(pkg_id, ''NULL'') + '',
					svc req : '' + ISNULL(svc_req, '''') + '',
					Counterparty : '' + ISNULL(counterparty, '''')
					+ CASE leg
							WHEN 1      THEN '', Receipt location : '' + ISNULL(receipt_location, '''')
							WHEN 2      THEN '', Delivery location : '' + ISNULL(delivery_location, '''')
						END 
					+ ''. PRIOR volume : '' + ISNULL(dbo.FNARemoveTrailingZero(old_vol), '''') 
					+ '',
					CURRENT volume : '' + ISNULL(dbo.FNARemoveTrailingZero(new_vol), '''')
			FROM   #scheduled_deal_log
			WHERE  old_vol <> new_vol
			')
			
		-- physical deal update logging
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
			SELECT ''' + @process_id + ''',
				    ''Success'',
				    ''Import           DATA'',
				    ''Pipeline Cut     DATA'',
				    ''Results'',
				    '' Physical deal updated FOR deal : '' + ISNULL(physical_deal, '''') 
				    + '' WITH respective svc req : '' + ISNULL(svc_req, '''') 
				                + '', Counterparty : '' + ISNULL(counterparty, '''') 
				                + '', receipt_location : '' + ISNULL(receipt_location, '''') 
				                + ''. PRIOR volume : '' + ISNULL(dbo.FNARemoveTrailingZero(old_vol), '''') 
				                + '', CURRENT volume : '' + ISNULL(dbo.FNARemoveTrailingZero(new_vol), '''')
			FROM   #physical_deal_log
			WHERE  old_vol <> new_vol
			')


		-- logging for svc req where no records is found and which doesn't update any deal	
		EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
				SELECT DISTINCT ''' + @process_id + ''',
					    CASE 
					        WHEN s.id IS NULL THEN ''ERROR''
					        ELSE ''Warning''
					    END,
					    ''Import DATA'',
					    ''Pipeline Cut DATA'',
					    ''Results'',
					    CASE WHEN s.old_vol = s.new_vol AND ss.id IS NULL THEN ''No records updated ''
					         WHEN s.id IS NULL THEN ''No records found ''
					         ELSE ''NULL''
					    END + ''FOR Svc Req K : '' + p.svc_req + '', Term : '' + ISNULL(p.delivery_date_from, '''')
				FROM ' + @import_temp_table_name + ' p
				LEFT JOIN #scheduled_deal_log s ON  s.svc_req = p.svc_req
				LEFT JOIN (
					    SELECT MAX(id) id,
					            MAX(svc_req) svc_req
					    FROM   #scheduled_deal_log s
					    WHERE  old_vol <> new_vol
					    GROUP BY old_vol, new_vol
				) ss ON  ss.svc_req = s.svc_req
				WHERE  p.svc_req IS NOT NULL AND ss.id IS NULL AND p.file_type = ''p''
			')
		
		CREATE TABLE #file_info([file_name] NVARCHAR(255) COLLATE DATABASE_DEFAULT, file_type NVARCHAR(8) COLLATE DATABASE_DEFAULT, error_code INT, p_row_count INT, t_row_count INT)

		EXEC('INSERT INTO #file_info (FILE_NAME, file_type, error_code, p_row_count, t_row_count)
			    SELECT h.file_name,
			           h.file_type,
			           h.error_code,
			           COUNT(p.purchase_report_id) p_row_count,
			           COUNT(t.transport_report_id) t_row_count
			    FROM ' + @stage_pipelinecut_header + ' h
			    LEFT JOIN ' + @import_temp_table_name +  ' p
			        ON  p.filename = h.file_name
			        AND p.file_type = ''p''
			    LEFT JOIN ' + @import_temp_table_name +  ' t
			        ON  t.filename = h.file_name
			        AND t.file_type = ''t''
			    GROUP BY h.file_name, h.file_type, h.error_code'
		)
		
		SELECT file_type,
			    STUFF((
			            SELECT ', ' + [file_name]
			            FROM   #file_info t
			            WHERE  t.file_type = tt.file_type
			            AND t.error_code = 0
			            AND CASE file_type
			                     WHEN 'p' THEN p_row_count
			                     WHEN 't' THEN t_row_count
			                END > 0
			            ORDER BY [file_name] FOR XML PATH('')
			        ),
			        1,
			        2,
			        ''
			    ) AS [file_name]
			    INTO #file_info_valid
		FROM   #file_info     tt
		WHERE  file_type IN ('p', 't')
		GROUP BY file_type
		
		SELECT @file_desc = '<br/>Purchase files: ' + FILE_NAME + ' imported out of ' + 
							CAST((
									SELECT COUNT(FILE_NAME)
									FROM   #file_info
									WHERE  file_type = 'p'
								) AS NVARCHAR(5)
							) + ' files.<br/>'
		FROM   #file_info_valid
		WHERE  file_type = 'p'
			
		SELECT @file_desc = @file_desc + 'Transport files: ' + [file_name] + 
							' imported out of ' + CAST((
									SELECT COUNT(FILE_NAME)
									FROM   #file_info
									WHERE  file_type = 't'
								) AS NVARCHAR(5)
							) + ' files.'
		FROM   #file_info_valid
		WHERE  file_type = 't'
			
			
		SELECT @error_code = CASE WHEN (SELECT COUNT(1) FROM #file_info) = (
			                            SELECT COUNT(1)
			                            FROM   #file_info
			                            WHERE  file_type IN ('p', 't')
			                                AND error_code = 0
			                                AND CASE file_type WHEN 'p' THEN p_row_count
			                                            WHEN 't' THEN t_row_count
			                                    END > 0
			                        ) THEN 's'
			                ELSE 'e'
		               END
		
	END
	
	-- log for error files
	EXEC('INSERT INTO source_system_data_import_status (Process_id, code, module, source, [type], [description])
		  OUTPUT CASE WHEN INSERTED.[code] = ''ERROR'' THEN ''e'' ELSE ''s'' END  
		  INTO #error_code
		  SELECT ''' + @process_id + ''',
			    ''ERROR'',
			    ''Import DATA'',
			    ''Pipeline Cut Purchase Report DATA Import('' + s.file_name + '')
			    '',
			    ''Results'',
			    s.error_msg
			FROM   ' + @stage_pipelinecut_header + ' s
			WHERE  s.error_code <> ''0'' ')
	
	IF @caught = 1 
	BEGIN
		SET @error_code = 'e'
	END
	ELSE
	BEGIN
		IF EXISTS (SELECT 1 FROM #error_code WHERE [type] = 'e')
			SET @error_code = 'e'
		ELSE 
			SET @error_code = 's'
		
		IF EXISTS(SELECT 1 FROM source_system_data_import_status WHERE Process_id = @process_id AND TYPE IN ('Error', 'Warning'))
			SET @error_code = 'e'
	END
	
	--------------- Position CALC and Audit for deals ----------------------	
	--Collects deal ids for audit, position, update deal volume calc
	CREATE TABLE #updated_deals (source_deal_header_id INT)
	
	INSERT INTO #updated_deals(source_deal_header_id)
	SELECT DISTINCT phy_deal_id FROM #total_phy_deals WHERE phy_deal_id IS NOT NULL
	UNION
	SELECT DISTINCT scheduled_deal_id FROM #total_scheduled_deals WHERE scheduled_deal_id IS NOT NULL
	UNION
	SELECT DISTINCT source_deal_header_id FROM #total_86T_deals WHERE source_deal_header_id IS NOT NULL
	
	DECLARE @total_deals NVARCHAR(MAX)
	SELECT @total_deals = COALESCE(@total_deals + ',', '') + CAST(source_deal_header_id AS NVARCHAR(10))
	FROM #updated_deals

	--Deal audit logic for update deals starts	  
	EXEC spa_insert_update_audit 'u', @total_deals

	--Position calc
	DECLARE @spa NVARCHAR(MAX), @pipeline_job_name NVARCHAR(MAX), @pipeline_process_id NVARCHAR(200), @pp_job_name NVARCHAR(500)
	SET @pipeline_process_id = dbo.FNAGetNewID()
	SET @pp_job_name =  'calc_position_breakdown_' + @pipeline_process_id
	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @pipeline_process_id)
	EXEC ('CREATE TABLE ' + @report_position_deals + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
			
	SET @sql = 'INSERT INTO ' + @report_position_deals + '(source_deal_header_id,action) SELECT source_deal_header_id, ''i''  from #updated_deals '
	EXEC (@sql)

	SET @spa = 'spa_update_deal_total_volume NULL,''' + CAST(@pipeline_process_id AS NVARCHAR(200)) + '''' 
	SET @pipeline_job_name = 'spa_update_deal_total_volume_' + @pipeline_process_id 
	EXEC spa_run_sp_as_job @pp_job_name, @spa, 'spa_update_deal_total_volume', @user_login_id
END

IF @table_name  = 'ixp_deal_volume_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	        
 	EXEC ('DELETE FROM ' + @import_temp_table_name + ' WHERE deal_volume LIKE ''%"%''') 
 	EXEC ('DELETE FROM ' + @import_temp_table_name + ' WHERE deal_volume IS NULL AND deal_id IS NULL AND form_code IS NULL AND term_date IS NULL')

 	--check duplicate data   
 	--   
	EXEC  ('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 					'''+ @process_id + ''',
 					''Error'',
 					''Import Data'',
 					''' + @table_name + ''',
 					''Data Error'',
 					''Data error for deal_id  :'' + ISNULL(a.deal_id,'''') + ''0'' + ISNULL(a.form_code, '''')
 					+ '' and term_date :'' + ISNULL(a.term_date, ''NULL'')
 					+ '' (Data Repetition Error, No OF times:'' + CAST(b.notimes AS NVARCHAR) + '' )'',
 					''Please check your Data'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + '  a
			INNER JOIN (
 				SELECT ISNULL(a.deal_id, '''') + ''0'' + ISNULL(a.form_code, '''') deal_id, a.term_date, COUNT(*) notimes
 				FROM ' + @import_temp_table_name + ' a
 				GROUP BY ISNULL(a.deal_id, '''') + ''0'' + ISNULL(a.form_code, ''''), a.term_date
 				HAVING COUNT(*) > 1
 			) b
 			ON ISNULL(a.deal_id, '''') + ''0'' + ISNULL(a.form_code, '''') = b.deal_id AND a.term_date = b.term_date')
 			
 	 
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 --			SELECT a.temp_id,
 --				 ''' + @process_id + ''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 ''' + @table_name + ''',
 --				 ''Data Error'',
 --				 ''Data error for  deal_id  :'' + ISNULL(ISNULL(a.deal_id, '''') + ''0'' + ISNULL(a.form_code, '''') , ''NULL'')  + ''. Invalid Term Date Format:''+ a.term_date,
 --				 ''Please check your Data'',
 --				  a.import_file_name
 --			FROM   ' + @import_temp_table_name + ' a
 --			WHERE ISDATE(a.term_date)=0')

	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 --			SELECT a.temp_id,
 --				 ''' + @process_id + ''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 ''' + @table_name + ''',
 --				 ''Data Error'',
 --				 ''Data error for  deal_id  :'' + ISNULL(ISNULL(a.deal_id, '''') + ''0'' + ISNULL(a.form_code, '''') , ''NULL'')   +  ''. Invalid Meter Volume:''+ ISNULL(a.deal_volume, ''0''),
 --				 ''Please check your Data'',
 --				  a.import_file_name
 --			FROM   ' + @import_temp_table_name + ' a
 --			WHERE ISNUMERIC(a.deal_volume)=0')
 	
 	--check existence for deal_id
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				 ''' + @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 ''' + @table_name + ''',
 				 ''Data Error'',
 				 ''Data error for Deal ID with prefix '' + ISNULL(ISNULL(a.deal_id, '''')  + '' AND postfix '' + ISNULL(a.form_code, ''None''), ''NULL'')  +  '' is not present in the system.'',
 				 ''Please check your Data'',
 				  a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN source_deal_header sdh ON a.deal_id = LEFT(sdh.deal_id, LEN(a.deal_id)) AND ISNULL(a.form_code, '''') = RIGHT(sdh.deal_id, LEN(ISNULL(a.form_code, '''')))
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE #import_status.temp_id IS NULL AND sdh.deal_id IS NULL
 			')
 			
	----check mapping meter for deal_id
 --	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 --			SELECT a.temp_id,
 --				 ''' + @process_id + ''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 ''' + @table_name + ''',
 --				 ''Data Error'',
 --				 ''Data error for Deal:'' + ISNULL(a.deal_id, ''NULL'')  +  '' is not mapping for meter '' + ISNULL(a.deal_id,''NULL'') +'' .)'',
 --				 ''Please check your Data'',
 --				  a.import_file_name
 --			FROM   ' + @import_temp_table_name + ' a
 --			INNER JOIN source_deal_header sdh  ON sdh.deal_id = a.deal_id
 --			INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id  AND sdd.term_start = a.term_date
	--		LEFT JOIN meter_id mi ON mi.meter_id = sdd.meter_id AND mi.[description] = a.deal_id
 --			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 --			WHERE #import_status.temp_id IS NULL AND mi.recorderid IS NULL')
 			
 				
 	--Check existence for deal_date	
	--EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 --			SELECT a.temp_id,
 --				 ''' + @process_id + ''',
 --				 ''Error'',
 --				 ''Import Data'',
 --				 ''' + @table_name + ''',
 --				 ''Data Error'',
 --				 ''Data error for Term Date:'' + ISNULL(a.term_date, ''NULL'')  +  ''. Term date is out of range for Deal ID with prefix '' + ISNULL(a.deal_id, '''')  + '' AND postfix '' + ISNULL(a.form_code, ''''), 
 --				 ''Please check your Data'',
 --				  a.import_file_name
 --			FROM   ' + @import_temp_table_name + ' a
 --			LEFT JOIN source_deal_header sdh ON a.deal_id = LEFT(sdh.deal_id, LEN(a.deal_id)) AND ISNULL(a.form_code, '''') = RIGHT(sdh.deal_id, LEN(ISNULL(a.form_code, '''')))
 --			LEFT JOIN source_deal_detail sdd ON sdh.source_deal_header_id = sdd.source_deal_header_id AND sdd.term_start = a.term_date
 --			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 --			WHERE ISDATE(a.term_date)=1 AND #import_status.temp_id IS NULL AND sdd.term_start IS NULL')
 	--EXEC ('SELECT * FROM  #import_status')
 	--PRINT '1'
 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id') 
 	  				
 	-- update  deal_volume at source_deal_detail
 	
 	--SET @sql = ' UPDATE sdd
		--		 SET	deal_volume = ISNULL(a.deal_volume, sdd.deal_volume)
		--		FROM ' + @import_temp_table_name + ' a 
		--		INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
		--		INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id  AND sdd.term_start = a.term_date
		--		INNER JOIN meter_id mi ON mi.meter_id = sdd.meter_id AND mi.[description] = a.deal_id
		--		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		--		WHERE  #import_status.temp_id IS NULL
 	--            '
 	 	
 	SET @sql = 'UPDATE sdd
 				SET sdd.deal_volume = ISNULL(CAST(a.deal_volume AS INT), sdd.deal_volume)
 				FROM source_deal_detail sdd 
 				INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
 				INNER JOIN ' + @import_temp_table_name + ' a
 					ON a.deal_id = LEFT(sdh.deal_id, LEN(a.deal_id)) AND ISNULL(a.form_code, '''') = RIGHT(sdh.deal_id, LEN(ISNULL(a.form_code, '''')))
 					AND LEN(REPLACE(REPLACE(sdh.deal_id,LEFT(sdh.deal_id, LEN(a.deal_id)),''''), RIGHT(sdh.deal_id, LEN(ISNULL(a.form_code, ''''))), '''')) < 3
 				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
				WHERE  1=1
				AND #import_status.temp_id IS NULL
 				AND DAY(sdd.term_start) >= DAY(a.term_date) AND MONTH(sdd.term_start) = MONTH(a.term_date) AND YEAR(sdd.term_start) = YEAR(a.term_date)           
 	            '
 	--PRINT(@sql)
 	EXEC(@sql)
 	
 	IF OBJECT_ID('tempdb..#deal_volume') IS NOT NULL
		DROP TABLE #deal_volume    
    
 	CREATE TABLE  #deal_volume(
 		source_deal_header_id INT
 	)
 	
 	SET @sql = 'INSERT INTO #deal_volume(source_deal_header_id)
 				SELECT sdh.source_deal_header_id
				FROM ' + @import_temp_table_name + ' a 
				INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
				INNER JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id  AND sdd.term_start = a.term_date
				INNER JOIN meter_id mi ON mi.meter_id = sdd.meter_id AND mi.[description] = a.deal_id
				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
				WHERE  #import_status.temp_id IS NULL
 				'

	EXEC(@sql)
	
 	DECLARE @spa_ NVARCHAR(MAX)
 			, @deal_volume_job_name NVARCHAR(MAX)
 			, @deal_volume_process_id NVARCHAR(200)
 			
	SET @deal_volume_process_id = dbo.FNAGetNewID()
	SET @deal_volume_job_name =  'calc_position_breakdown_' + @deal_volume_process_id
	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @deal_volume_process_id)
	EXEC ('CREATE TABLE ' + @report_position_deals + '( source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')
			
	SET @sql = 'INSERT INTO ' + @report_position_deals + '(source_deal_header_id,action) SELECT source_deal_header_id, ''i''  from #deal_volume '
	EXEC (@sql)

	SET @spa_ = 'spa_update_deal_total_volume NULL,''' + CAST(@deal_volume_process_id AS NVARCHAR(200)) + '''' 
	SET @deal_volume_job_name = 'spa_update_deal_total_volume_' + @deal_volume_process_id 
	EXEC spa_run_sp_as_job @deal_volume_job_name, @spa_, 'spa_update_deal_total_volume', @user_login_id
 	
END 

IF @table_name = 'ixp_counterparty_bank_info'
BEGIN

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 

	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty_id'', ''b.counterparty_id = a.counterparty_id'', ''e''),
		(''source_currency'', ''currency'', ''b.currency_name = a.currency'', ''e'')
	')

	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	')

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  UPDATE sbi
		SET sbi.bank_name = a.bank_name,
			sbi.ACH_ABA = a.ACH_ABA,
			sbi.wire_ABA = a.wire_ABA,
			sbi.currency = scu.source_currency_id,
			sbi.Address1 = a.Address1,
			sbi.Address2 = a.Address2,
			sbi.reference = a.reference,
			sbi.primary_account = CASE a.primary_account 
				WHEN ''No'' THEN ''n'' 
				WHEN ''Yes'' THEN ''y'' 
				WHEN ''y'' THEN ''y''
				WHEN ''n'' THEN ''n''
				END
		FROM   ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id
		INNER JOIN counterparty_bank_info sbi
			ON sbi.accountname = a.account_name AND sbi.account_no = a.account_no AND sbi.counterparty_id = sc.source_counterparty_id
		INNER JOIN source_currency scu
			ON scu.currency_name = a.currency
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND sbi.bank_id IS NOT NULL'

	EXEC (@sql)

	SET @sql = 
	    CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO counterparty_bank_info
		  (
		    counterparty_id,
			bank_name,
			accountname,
			Account_no,
			ACH_ABA,
			wire_ABA,
			currency,
			Address1,
			Address2,
			reference,
			primary_account
		  )
		SELECT sc.source_counterparty_id,
		       a.bank_name,
		       a.account_name,
		       a.Account_no,
		       a.ACH_ABA,
			   a.wire_ABA,
			   scu.source_currency_id,
			   a.Address1,
			   a.Address2,
			   a.reference,
			   CASE a.primary_account 
				WHEN ''No'' THEN ''n'' 
				WHEN ''Yes'' THEN ''y'' 
				WHEN ''y'' THEN ''y''
				WHEN ''n'' THEN ''n''
				END [primary_account]
		FROM   ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty_id
		LEFT JOIN counterparty_bank_info sbi
			ON sbi.accountname = a.account_name AND sbi.account_no = a.account_no AND sbi.counterparty_id = sc.source_counterparty_id
		INNER JOIN source_currency scu
			ON scu.currency_name = a.currency
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND sbi.bank_id IS NULL
		'
 	EXEC (@sql)
END

-- Meter Definition import
IF @table_name  = 'ixp_meter_id_template'
BEGIN
	EXEC('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''recorder_properties'',''channel'',''channel'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''recorder_properties'',''mult_factor'',''mult_factor'')')
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 

	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''granularity'', ''b.code = a.granularity AND b.type_id = 978'', ''e''),
			(''source_uom'', ''source_uom_id'', ''b.uom_id = a.source_uom_id'', ''e''),
			(''source_commodity'', ''commodity_id'', ''a.commodity_id = b.commodity_id'', ''w''),
			(''source_counterparty'', ''counterparty_id'', ''a.counterparty_id = b.counterparty_id'', ''w'')
	')	
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	')
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			UPDATE mi SET 
				mi.description = ISNULL(a.description, mi.description),
				mi.meter_manufacturer = ISNULL(a.meter_manufacturer, mi.meter_manufacturer),
				mi.meter_type = ISNULL(a.meter_type, mi.meter_type),
				mi.meter_serial_number = ISNULL(a.meter_serial_number, mi.meter_serial_number),
				mi.meter_certification = ISNULL([dbo].[FNAGetSQLStandardDate](a.meter_certification), mi.meter_certification),
				mi.sub_meter_id = ISNULL(a.sub_meter_id, mi.sub_meter_id),
				mi.counterparty_id = ISNULL(sc.source_counterparty_id, mi.counterparty_id),
				mi.commodity_id = ISNULL(sc1.source_commodity_id, mi.commodity_id),
				mi.country_id = ISNULL(sdv.value_id, mi.country_id),
				mi.allocation_type = ISNULL(sdv_all.value_id, mi.allocation_type),
				mi.granularity = ISNULL(sdv_granularity.value_id, mi.granularity),
				mi.multiple_location = ISNULL(a.multiple_location, mi.multiple_location ),
				mi.source_uom_id = ISNULL(su.source_uom_id, mi.source_uom_id)
			FROM ' + @import_temp_table_name + ' a 
			INNER JOIN meter_id mi ON mi.recorderid = a.recorderid
			LEFT JOIN source_uom su ON su.uom_id = a.source_uom_id
			LEFT JOIN source_counterparty sc ON a.counterparty_id = sc.counterparty_id
			LEFT JOIN source_commodity sc1 ON a.commodity_id = sc1.commodity_id
			LEFT JOIN Static_data_value sdv on sdv.code = a.country_id
				AND sdv.type_id = 14000
			LEFT JOIN Static_data_value sdv_all on sdv_all.code = a.allocation_type
				AND sdv_all.type_id = 20400
			LEFT JOIN Static_data_value sdv_granularity on sdv_granularity.code = a.granularity
				AND sdv_granularity.type_id = 978
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
				WHERE  #import_status.temp_id IS NULL'
	--PRINT @sql
	EXEC (@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO meter_id (
				recorderid,
				DESCRIPTION,
				meter_manufacturer,
				meter_type,
				meter_serial_number,
				meter_certification,
				sub_meter_id,
				counterparty_id,
				commodity_id,
				country_id,
				allocation_type,
				granularity,
				multiple_location,
				source_uom_id
			  )
 			SELECT DISTINCT a.recorderid, a.description, a.meter_manufacturer, a.meter_type, a.meter_serial_number, [dbo].[FNAGetSQLStandardDate](a.meter_certification), a.sub_meter_id,
			sc.source_counterparty_id, sc1.source_commodity_id,sdv.value_id, sdv_all.value_id, sdv_granularity.value_id, a.multiple_location, su.source_uom_id
			FROM ' + @import_temp_table_name + ' a 
			LEFT JOIN source_uom su ON su.uom_id = a.source_uom_id
			LEFT JOIN source_counterparty sc ON a.counterparty_id = sc.counterparty_id
			LEFT JOIN meter_id mi ON mi.recorderid = a.recorderid
			LEFT JOIN source_commodity sc1 ON a.commodity_id = sc1.commodity_id
			LEFT JOIN Static_data_value sdv on sdv.code = a.country_id
				AND sdv.type_id = 14000
			LEFT JOIN Static_data_value sdv_all on sdv_all.code = a.allocation_type
				AND sdv_all.type_id = 20400
			LEFT JOIN Static_data_value sdv_granularity on sdv_granularity.code = a.granularity
				AND sdv_granularity.type_id = 978
			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
				WHERE  #import_status.temp_id IS NULL AND mi.meter_id IS NULL'
 				
	--PRINT @sql
	EXEC (@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			UPDATE rp SET 
				rp.channel = ISNULL(a.channel, rp.channel),
				rp.channel_description = ISNULL(a.channel_description, rp.channel_description),
				rp.mult_factor = ISNULL(a.mult_factor, rp.mult_factor),
				rp.uom_id = ISNULL(su.source_uom_id, mi.source_uom_id)
			FROM ' + @import_temp_table_name + ' a 
			INNER JOIN meter_id mi ON mi.recorderid = a.recorderid
			INNER JOIN source_uom su ON su.uom_id = a.source_uom_id
			INNER JOIN recorder_properties rp ON rp.meter_id = mi.meter_id
				AND rp.channel = a.channel
			WHERE rp.meter_id IS NOT NULL'
	--PRINT @sql
	EXEC (@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			INSERT INTO recorder_properties (
				meter_id,
				channel,
				mult_factor,
				channel_description,
				uom_id
			)
 			SELECT mi.meter_id, a.channel, a.mult_factor, a.channel_description, ISNULL(su.source_uom_id, mi.source_uom_id)
			FROM ' + @import_temp_table_name + ' a 
			INNER JOIN meter_id mi ON mi.recorderid = a.recorderid
			LEFT JOIN source_uom su ON su.uom_id = a.source_uom_id
			LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id
				AND rp.channel = a.channel
			WHERE rp.meter_id IS NULL'
 				
	--PRINT @sql
	EXEC (@sql)

END

--Added for power outage rule.
IF @table_name = 'ixp_power_outage'
BEGIN
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, '''+ @table_name +'''
		FROM ' + @import_temp_table_name
	)
	
	--EXEC ('SELECT * FROM ' + @import_temp_table_name + 
	--	' SELECT * FROM ' + @import_temp_table_name + ' a ' +
	--	'WHERE a.type_name NOT IN (''Outage'',''Operational Derate'',''Seasonal Derate'') OR ' +
	--	'a.status NOT IN (''Planned'',''Emergency'',''Informational'') OR ' +
	--	'a.status NOT IN (''Accepted'',''Cancelled'',''Submitted'') OR ' +
	--	'CAST(a.derate_mw AS FLOAT) < 1 OR ' +
	--	'CAST(a.derate_percent AS FLOAT) < 1 OR ' +
	--	'CAST(a.derate_percent AS FLOAT) > 100')
	--RETURN
	--EXEC ('SELECT ISDATE(a.actual_start),* FROM ' + @import_temp_table_name + ' a WHERE ISDATE(a.actual_start) = 0 AND a.actual_start IS NOT NULL') RETURN

	--PRINT()
	-- validation for duplicate data
	--EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
	--		SELECT a.temp_id,
	--			 ''' + @process_id + ''',
	--			 ''Error'',
	--			 ''Import Data'',
	--			 ''' + @table_name + ''',
	--			 ''Data Error'',
	--			 ''Duplicate Row'',
	--			 ''Please check your Data'',
	--			 a.import_file_name
	--		FROM ' + @import_temp_table_name + ' a 
	--		INNER JOIN power_outage po 
	--			ON ISNULL(cast(CASE WHEN ISDATE(a.planned_start) = 1 THEN DATEADD(hour,0,a.planned_start) ELSE a.planned_start END AS NVARCHAR(100)), 1) = ISNULL(cast(po.planned_start AS NVARCHAR(100)), 1)
	--			AND ISNULL(cast(CASE WHEN ISDATE(a.planned_end) = 1 THEN DATEADD(hour,0,a.planned_end) ELSE a.planned_end END AS NVARCHAR(100)), 1) = ISNULL(cast(po.planned_end AS NVARCHAR(100)), 1) 
	--			AND CASE   
	--					WHEN a.request_type = ''Planned'' THEN ''p''
	--					WHEN a.request_type = ''Emergency'' THEN ''e''
	--					WHEN a.request_type = ''Informational'' THEN ''i''
	--					ELSE NULL
	--				END = po.request_type
	--			AND CASE   
	--					WHEN a.status = ''Accepted'' THEN ''a''
	--					WHEN a.status = ''Cancelled'' THEN ''c''
	--					WHEN a.status = ''Submitted'' THEN ''s''
	--					ELSE NULL
	--				END = po.status
	--			AND CASE    
	--					WHEN a.type_name = ''Outage'' THEN ''o''
	--					WHEN a.type_name = ''Operational Derate'' THEN ''d''
	--					WHEN a.type_name = ''Seasonal Derate'' THEN ''s''
	--					ELSE NULL
	--				END = po.type_name
			
	--			AND 
			
	--		INNER JOIN source_minor_location AS sml 
	--			ON sml.Location_Name = a.source_generator_id 
	--			AND a.source_generator_id =  sml.Location_Name')

	
	-- validation for required type_name
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Type is Required.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.type_name IS NULL')
	
	-- validation for invalid actual start date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Actual Start Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE ISDATE(a.actual_start) = 0 AND a.actual_start IS NOT NULL')
	
	-- validation for invalid actual end date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Actual End Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE ISDATE(a.actual_end) = 0 AND a.actual_end IS NOT NULL')
	
	-- validation for invalid planned start date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Planned Start Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE ISDATE(a.planned_start) = 0 AND a.planned_start IS NOT NULL')
	
	-- validation for planned interval start date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Planned Interval Start Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.planned_interval_start IS NULL OR a.planned_interval_start > 24 OR a.planned_interval_start < 0')
	
			-- validation for planned interval end date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Planned Interval End Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.planned_interval_end IS NULL OR a.planned_interval_end > 24 OR a.planned_interval_end < 0')


	-- validation for actual_interval_start
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Actual Interval Start Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.actual_interval_start IS NULL OR a.actual_interval_start > 24 OR a.actual_interval_start < 0')
					
	-- validation for actual_interval_end
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Actual Interval End Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.actual_interval_end IS NOT NULL AND a.actual_interval_end > 24 OR a.actual_interval_end < 0')


	-- validation for planned interval end date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Planned Interval End should be greater than Planned Interval Start.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.actual_interval_end IS NULL OR a.actual_interval_end > 24 OR a.actual_interval_end < 0')
	
	-- validation for planned interval end date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Actual Interval End should be greater than Actual Interval Start.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.actual_interval_end is NOT NULL AND a.actual_interval_start is NOT NULL AND CAST(a.actual_interval_end AS INT)<CAST(a.actual_interval_start AS INT)')


	-- validation for invalid planned end date
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Invalid Planned End Date.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE ISDATE(a.planned_end) = 0 AND a.planned_end IS NOT NULL')

	-- validation for required request_type
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Request Type is Required.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.request_type IS NULL')

	-- validation for required status
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Status is Required.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.status IS NULL')

	--validation for invaid type_name
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Type is not Valid.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.type_name NOT IN (''Outage'',''Operational Derate'',''Seasonal Derate'')')
	
	--validation for invaid status
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Status is not Valid.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.status NOT IN (''Accepted'',''Cancelled'',''Submitted'')')
	
	--validation for invaid request_type
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Request Type is not Valid.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.request_type NOT IN (''Planned'',''Emergency'',''Informational'')')
	
	--validation for negative derate_mw
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Derate MW should be a positive value.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE CAST(a.derate_mw AS FLOAT) < 1')
			
	--validation for negative derate_percent
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Derate Percent should be a positive value.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE CAST(a.derate_percent AS FLOAT) < 1')
			
	--validation for derate_percent greater than 100
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Derate Percent should not exceed 100'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE CAST(a.derate_percent AS FLOAT) > 100')
	
	--validation for non-existent generator
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				''' + @process_id + ''',
 				''Error'',
 				''Import Data'',
 				''' + @table_name + ''',
 				''Data Error'',
 				''Generator Id  :'' + ISNULL(a.source_generator_id , ''NULL'') + '' does not exist in System'',
 				''Please check your Data'',
 				a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN source_minor_location AS sml ON  sml.Location_Name = a.source_generator_id
 			WHERE sml.Location_Name IS NULL')
	
	--validation for missing both derate_mw and derate_percent if type is operational or seasonal derate.
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				''' + @process_id + ''',
 				''Error'',
 				''Import Data'',
 				''' + @table_name + ''',
 				''Data Error'',
 				''Derate MW or Derate Percent missing in Generator ID :'' + ISNULL(a.source_generator_id , ''NULL''),
 				''Please check your Data'',
 				a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN source_minor_location AS sml ON  sml.Location_Name = a.source_generator_id
 			WHERE a.derate_mw IS NULL AND a.derate_percent IS NULL AND type_name <> ''Outage''')
	
	-- validation for required type_name
	EXEC ('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
			SELECT a.temp_id,
				 ''' + @process_id + ''',
				 ''Error'',
				 ''Import Data'',
				 ''' + @table_name + ''',
				 ''Data Error'',
				 ''Type is Required.'',
				 ''Please check your Data'',
				 a.import_file_name
			FROM ' + @import_temp_table_name + ' a WHERE a.type_name IS NULL')
	
	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('
		DELETE ' + @import_temp_table_name + '
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id'
	)
		
	EXEC ('	DELETE po 
			FROM ' + @import_temp_table_name + ' a 
			INNER JOIN power_outage po 
				ON ISNULL(cast(CASE WHEN ISDATE(a.planned_start) = 1 THEN DATEADD(hour,0,a.planned_start) ELSE a.planned_start END AS NVARCHAR(100)), 1) = ISNULL(cast(po.planned_start AS NVARCHAR(100)), 1)
				AND ISNULL(cast(CASE WHEN ISDATE(a.planned_end) = 1 THEN DATEADD(hour,0,a.planned_end) ELSE a.planned_end END AS NVARCHAR(100)), 1) = ISNULL(cast(po.planned_end AS NVARCHAR(100)), 1) 
				AND CASE   
						WHEN a.request_type = ''Planned'' THEN ''p''
						WHEN a.request_type = ''Emergency'' THEN ''e''
						WHEN a.request_type = ''Informational'' THEN ''i''
						ELSE NULL
					END = po.request_type
				AND CASE   
						WHEN a.status = ''Accepted'' THEN ''a''
						WHEN a.status = ''Cancelled'' THEN ''c''
						WHEN a.status = ''Submitted'' THEN ''s''
						ELSE NULL
					END = po.status
				AND CASE    
						WHEN a.type_name = ''Outage'' THEN ''o''
						WHEN a.type_name = ''Operational Derate'' THEN ''d''
						WHEN a.type_name = ''Seasonal Derate'' THEN ''s''
						ELSE NULL
					END = po.type_name
					
				AND  ISNULL(a.comments, -1) = ISNULL(po.comments, -1)
			
			INNER JOIN source_minor_location AS sml 
				ON sml.source_minor_location_id = po.source_generator_id 
				AND a.source_generator_id =  sml.Location_Name')

	EXEC('
		INSERT INTO power_outage
		(
			CONCAT(planned_start, '' '', (CAST(planned_interval_start AS INT)-1),'' '', '':00''),
			CONCAT(planned_end, '' '', (CAST(planned_interval_end AS INT)-1),'' '', '':00''),
			CONCAT(actual_start, '' '', (CAST(actual_interval_start AS INT)-1),'' '', '':00''),
			CONCAT(actual_end, '' '', (CAST(actual_interval_end AS INT)-1),'' '', '':00''),
			granularity,
			status,
			request_type,
			outage,
			derate_mw,
			derate_percent,
			type_name,
			comments
		)
		SELECT sml.source_minor_location_id,
			planned_start,
			planned_end,
			actual_start,
			actual_end,
			granularity,
			status = CASE   
				WHEN status = ''Accepted'' THEN ''a''
				WHEN status = ''Cancelled'' THEN ''c''
				WHEN status = ''Submitted'' THEN ''s''
				ELSE NULL
			END,
			request_type = CASE   
				WHEN request_type = ''Planned'' THEN ''p''
				WHEN request_type = ''Emergency'' THEN ''e''
				WHEN request_type = ''Informational'' THEN ''i''
				ELSE NULL
			END,
			outage,
			derate_mw = CASE
				WHEN type_name = ''Outage'' THEN NULL
				WHEN type_name <> ''Outage'' AND derate_mw IS NOT NULL AND derate_percent IS NOT NULL THEN derate_mw
				ELSE derate_mw
			END,
			derate_percent = CASE
				WHEN type_name = ''Outage'' THEN NULL
				WHEN type_name <> ''Outage'' AND derate_mw IS NOT NULL AND derate_percent IS NOT NULL THEN NULL
				ELSE derate_percent
			END,
			type_name = CASE   
				WHEN type_name = ''Outage'' THEN ''o''
				WHEN type_name = ''Operational Derate'' THEN ''d''
				WHEN type_name = ''Seasonal Derate'' THEN ''s''
				ELSE NULL
			END,
			comments	   
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_minor_location AS sml ON  sml.Location_Name = a.source_generator_id'
	)
	
END

-- transportation_rate_schedule import
IF @table_name  = 'ixp_transportation_rate_schedule_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.name , ''NULL'')   +  ''. Name Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.name IS NULL')

	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN '+@import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

	
 --	SET @sql = ' DELETE sdv
	--			FROM ' + @import_temp_table_name + ' a 
	--			INNER JOIN static_data_value sdv ON sdv.code = a.name and sdv.type_id = 1800 '
 --print @sql
 --EXEC(@sql)
 

SET @sql = 'UPDATE b SET 
		   		code = ISNULL(a.name, b.code), 
				description = isnull(a.description,b.description)
		 FROM static_data_value b
            INNER JOIN ' + @import_temp_table_name + ' a ON  b.code = a.name
            AND b.type_id = 1800
            LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 	    WHERE  #import_status.temp_id IS NULL'
--print @sql
exec(@sql)
  
SET @sql = 'INSERT INTO static_data_value (
		    type_id,
		    code,
		    description
		  )

 		SELECT DISTINCT 1800, a.name, a.DESCRIPTION
		FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN static_data_value sdv on sdv.code = a.name and type_id = 1800
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL and sdv.code is NULL'

--print @sql
EXEC (@sql)

	SET @sql = 'INSERT INTO transportation_rate_schedule (
		    rate_schedule_id,
			rate_type_id,
			rate,
			effective_date,
			uom_id
		  )

 		SELECT sdv.value_id, SDV1.value_id, a.rate, [dbo].[FNAGetSQLStandardDate](a.effective_date), su.source_uom_id
		FROM ' + @import_temp_table_name + ' a 
		LEFT join static_data_value sdv on a.name = sdv.code
		AND  sdv.type_id = 1800
		LEFT JOIN static_data_value sdv1 on a.charge_type = sdv1.code
		AND sdv1.type_id = 5500
		LEFT JOIN source_uom su on a.uom = su.uom_id
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL'
 				
--print @sql
EXEC (@sql)

END

IF @table_name  = 'ixp_default_probability_template'
BEGIN	
	
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET effective_date = dd.sql_date_value
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.effective_date = dd.user_date
	')
	/***END OF date update***/	

	-- data repetition error handeling starts 
 	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name+''',
 				 ''Data Error'',
 				 ''Data error for effective_date :'' + ISNULL(a.effective_date, ''NULL'') 
 				 + '' AND Debt Rating : '' + ISNULL(a.debt_rating, ''NULL'') 
 				 + '' AND Month : '' + ISNULL(a.months, ''NULL'')
 				 + '' AND Recovery : '' + ISNULL(a.[recovery], ''NULL'') 
				 + '' AND Rating Type : '' + ISNULL(a.[rating_type], ''NULL'')
 				 + '' (Data Repetition Error, No of times:'' + CAST(b.notimes AS NVARCHAR) + '')'',
 				 ''Please check your data.'',
 				 a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
 				  SELECT effective_date, debt_rating, [recovery], [months], [rating_type], COUNT(*) notimes
 				  FROM ' + @import_temp_table_name + '
 				  GROUP BY  effective_date, debt_rating, [recovery], [months], [rating_type]
 				  HAVING COUNT(*) > 1
 			  ) b
 		  ON  a.effective_date = b.effective_date AND a.debt_rating = b.debt_rating AND a.[months] = b.[months] AND a.[recovery] = b.[recovery] AND a.[rating_type] = b.[rating_type]')
 	
 	-- NULL check for Effective Date
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Effective Date NULL is not permited.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			WHERE a.effective_date IS NULL
 	')
 	
 	-- NULL check for Recovery
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Recovery : '' + ISNULL(a.[recovery], ''NULL'') + '' is not permited.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			WHERE a.[recovery] IS NULL OR LOWER(a.[recovery]) NOT IN (''n'', ''no'', ''y'', ''yes'') 
 	')
 	
 	-- NULL check for Month
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Month : '' + ISNULL(a.[months], ''NULL'') + '' is not permited.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			WHERE ISNUMERIC(ISNULL(a.[months], 0)) = 0 
 	')
 	
 	-- NULL check for Month
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Month : '' + ISNULL(a.[months], ''NULL'') + '' is not permited.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			WHERE ISNUMERIC(ISNULL(a.[months], 0)) = 0 
 	')
 	
 	-- NULL check for probability
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for probability : '' + ISNULL(a.[probability], ''NULL'') + '' is not permited.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			WHERE ISNUMERIC(ISNULL(a.[probability], 0)) = 0 
 	')

	-- NULL check for debt rating
 	EXEC('  INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data error for Debt Rating: '' + ISNULL(a.debt_rating, ''NULL'') + '' Rating Type: '' + ISNULL(REPLACE(a.rating_type, ''Internal Rating'', ''Risk Rating''), ''NULL'') + '' is not present.'' ,
 					''Please check your data.'',
 					a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN static_data_type AS sdt ON a.rating_type = sdt.type_name
 			LEFT JOIN static_data_value sdv ON sdv.code = a.debt_rating AND sdv.type_id = sdt.type_id
 			LEFT JOIN #import_status ON a.temp_id = #import_status.temp_id
 			WHERE sdv.code IS NULL AND a.debt_rating IS NOT NULL') 
 	
	EXEC('DELETE ' + @import_temp_table_name + '
	      FROM   #import_status
	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id') 

 	-- update
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE dp
				SET effective_date = a.effective_date,
					debt_rating = sdv.value_id,
					[recovery] = CASE WHEN LOWER(a.recovery) IN (''n'', ''no'') THEN ''n'' ELSE ''y'' END,
					months = a.months,
					probability = a.probability
				FROM default_probability AS dp
				INNER JOIN static_data_value AS sdv ON dp.debt_rating = sdv.value_id
				INNER JOIN ' + @import_temp_table_name + ' a
					ON a.effective_date = dp.effective_date
					AND a.debt_rating = sdv.code
					AND a.months = dp.months
				LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
				WHERE  #import_status.temp_id IS NULL 
 	            '
 	exec spa_print @sql
 	EXEC(@sql)

 	-- insert
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  INSERT INTO default_probability (effective_date, debt_rating, [recovery], months, probability)
 				 SELECT a.effective_date,
 				        sdv.value_id,
 				        CASE WHEN LOWER(a.recovery) IN (''n'', ''no'') THEN ''n'' ELSE ''y'' END,
 				        a.months,
 				        a.probability
 				 FROM ' + @import_temp_table_name + ' a
 				 INNER JOIN static_data_type AS sdt ON a.rating_type = sdt.type_name
				 INNER JOIN static_data_value sdv ON sdv.type_id = sdt.type_id AND a.debt_rating = sdv.code
 				 LEFT JOIN default_probability AS dp
 					ON a.effective_date = dp.effective_date
					AND dp.debt_rating = sdv.value_id
					AND a.months = dp.months 
 				 LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
				 WHERE  #import_status.temp_id IS NULL AND dp.id IS NULL'
 	
	exec spa_print @sql
 	EXEC(@sql)
	
END

IF @table_name = 'ixp_cash_apply'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
	        SELECT COUNT(*) AS totcount, ''' + @table_name + '''
	       FROM ' + @import_temp_table_name )

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Counterparty Id  :'' + ISNULL(a.Counterparty, ''NULL'')   +  ''. Counterparty Cannot be null'',
 			''Please check your Data'',
 			a.Counterparty
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.Counterparty IS NULL')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Contract :'' + ISNULL(a.Contract, ''NULL'')   +  ''. Contract Cannot be null'',
 			''Please check your Data'',
 			 a.Contract
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.Contract IS NULL')

		EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  charge Type :'' + ISNULL(a.[charge Type], ''NULL'')   +  ''. charge type Cannot be null'',
 			''Please check your Data'',
 			a.[charge Type]
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.[charge Type] IS NULL')

		EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Amount :'' + ISNULL(a.Amount, ''NULL'')   +  ''. Amount type Cannot be null'',
 			''Please check your Data'',
 			a.Amount
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.Amount IS NULL')

			EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Pay/Recieve :'' + ISNULL(a.[Pay/Receive], ''NULL'')   +  ''. Pay/Recieve type Cannot be null'',
 			''Please check your Data'',
 			a.[Pay/Receive]
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.[Pay/Receive] IS NULL')

	
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Payment Date :'' + ISNULL(a.[Payment Date], ''NULL'')   +  ''. Payment Date Cannot be null'',
 			''Please check your Data'',
 			a.[Payment Date]
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.[Payment Date] IS NULL')

		EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Production Month :'' + ISNULL(a.[Production Month], ''NULL'')   +  ''. Production Month Cannot be null'',
 			''Please check your Data'',
 			a.[Production Month]
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.[Production Month] IS NULL')

		EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT DISTINCT b.temp_id,
 					 ''' + @process_id + ''',
 					 ''Error'',
 					 ''Import Data'',
 					 ''' + @table_name + ''',
 					 ''Data Error'',
 					 ''Duplicate Data for Counterparty: '' + b.Counterparty + '' and Contract: '' + b.contract + '' in csv file for the month '' + b.[Production Month] + '' '',
 					 ''Please check your Data'',
 					 b.import_file_name
		FROM ' + @import_temp_table_name + ' b
		INNER JOIN (
			SELECT a.[Counterparty], 
				   a.[Contract], 
				   a.[charge Type],
				   a.[Production Month],
				   COUNT(1) count
			FROM ' + @import_temp_table_name + ' a
			GROUP BY a.[Counterparty], a.[Contract],a.[charge Type], a.[Production Month]
			HAVING COUNT(1) > 1
		) c ON b.[Counterparty] = c.[Counterparty] 
				AND b.[Contract] = c.[Contract] 
				AND b.[charge Type] = c.[charge Type]
				AND b.[Production Month] = c.[Production Month]
 	')


				EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Unfinalized Transaction'',
 				 ''Invoice is not finalized yet for Counterparty: '' + a.Counterparty + '' and Contract: '' + a.contract + '' for the month '' + a.[Production Month] + ''. Please finalize invoice first before apply cash.'', 
 				 ''Please verify the data.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.Counterparty 
		INNER JOIN contract_group cg ON cg.source_contract_id= a.CONTRACT
		INNER JOIN static_data_value sdv on sdv.code = a.[charge Type] and sdv.type_id = 10019 
		INNER JOIN calc_invoice_volume_variance civv 
		ON civv.counterparty_id = sc.source_counterparty_id 
		AND civv.contract_id = cg.contract_id 
		INNER JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id and civ.invoice_line_item_id = sdv.value_id 
		WHERE	civ.finalized = ''n'' and civ.prod_date = a.[Production Month]')

				EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Invoice not avaliable'',
 				 ''Invoice is not avaliable for Counterparty: '' + a.Counterparty + '' and Contract: '' + a.contract + '' for the month '' + a.[Production Month] + ''. Please process and finalize Invoice before apply cash.'', 
 				 ''Please verify the data.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.Counterparty 
		INNER JOIN contract_group cg ON cg.source_contract_id= a.CONTRACT
		INNER JOIN static_data_value sdv on sdv.code = a.[charge Type] and sdv.type_id = 10019 
		LEFT JOIN calc_invoice_volume_variance civv 
		ON civv.counterparty_id = sc.source_counterparty_id 
		AND civv.contract_id = cg.contract_id AND civv.prod_Date = dbo.FNAClientToSqlDate(a.[Production Month])
		LEFT JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id and civ.invoice_line_item_id = sdv.value_id 
		WHERE civv.calc_id IS NULL ')

			EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 		  SELECT a.temp_id,
 				 '''+ @process_id+''',
 				 ''Error'',
 				 ''Import Data'',	
 				 '''+ @table_name + ''',
 				 ''Cash Already applied'',
				 ''Cash already applied for Counterparty: '' + a.Counterparty + '' and Contract: '' + a.contract + '' for the month '' + a.[Production Month] +''. Please delete existing cash and apply again.'',
 				 ''Please verify the data.'', a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
 		INNER JOIN source_counterparty sc ON sc.counterparty_id = a.Counterparty 
		INNER JOIN contract_group cg ON cg.source_contract_id= a.CONTRACT
		INNER JOIN static_data_value sdv on sdv.code = a.[charge Type] and sdv.type_id = 10019 
		INNER JOIN calc_invoice_volume_variance civv 
		ON civv.counterparty_id = sc.source_counterparty_id 
		AND civv.contract_id = cg.contract_id 
		INNER JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id and civ.invoice_line_item_id = sdv.value_id 
		INNER JOIN invoice_cash_received icr ON icr.save_invoice_detail_id = civ.calc_detail_id')
	

EXEC('DELETE ' + @import_temp_table_name + '
	  FROM   #import_status
	  INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

set @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO invoice_Cash_received (save_invoice_detail_id, received_date, cash_received, invoice_type, settle_status, variance_amount)
SELECT 
civ.calc_detail_id,
a.[Payment Date] Payment_Date,
CASE WHEN  a.[Pay/Receive] = ''Pay'' then (-1*CAST(a.Amount AS FLOAT)) else a.Amount end ,
CASE WHEN a.[Pay/Receive] = ''Pay'' THEN ''p'' ELSE ''r'' end pay_recieve,
CASE WHEN civ.value = a.Amount THEN ''s'' WHEN (a.[Pay/Receive] = ''Pay'' and abs(civ.value) = a.Amount) THEN ''s'' ELSE ''o'' end settle_status, 
CASE WHEN (a.[Pay/Receive] = ''Pay'' and abs(civ.value) = a.Amount) THEN 0 
WHEN (a.[Pay/Receive] = ''Pay'' and abs(civ.value) != a.Amount) THEN (civ.value - a.Amount) 
WHEN (a.[Pay/Receive]  = ''Receive'' and civ.value = a.Amount) THEN 0
ELSE (civ.value-a.Amount) end variance
FROM ' + @import_temp_table_name + ' a
INNER JOIN source_counterparty sc ON sc.counterparty_id = a.Counterparty 
INNER JOIN contract_group cg ON cg.source_contract_id= a.CONTRACT
INNER JOIN static_data_value sdv on sdv.code = a.[charge Type] and sdv.type_id = 10019 
INNER JOIN calc_invoice_volume_variance civv 
	ON civv.counterparty_id = sc.source_counterparty_id 
	AND civv.contract_id = cg.contract_id AND civv.prod_Date = dbo.FNAClientToSqlDate(a.[Production Month]) 
	INNER JOIN calc_invoice_volume civ ON civ.calc_id = civv.calc_id and civ.invoice_line_item_id = sdv.value_id
	LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
    WHERE  #import_status.temp_id IS NULL
GROUP BY civ.calc_detail_id , a.[Payment Date], a.Amount, a.[Pay/Receive],civ.value'
EXEC (@sql)
END

IF @table_name  = 'ixp_counterparty_products_template'
BEGIN	
	EXEC (' INSERT INTO #temp_tot_count
	        SELECT COUNT(*) AS totcount, ''' + @table_name + '''
	        FROM ' + @import_temp_table_name)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 	INSERT INTO counterparty_products(counterparty_id, buy_sell, commodity_id,commodity_origin_id, is_organic, commodity_form_id, commodity_form_attribute1, commodity_form_attribute2, commodity_form_attribute3, commodity_form_attribute4, commodity_form_attribute5)
					SELECT DISTINCT
						sc.source_counterparty_id,
						CASE WHEN a.buy_sell = ''Buys'' THEN ''b''
						WHEN a.buy_sell = ''Sells'' THEN ''s''
						WHEN a.buy_sell = ''Buys + Sells'' THEN ''a''
						ELSE ''b''
						END [buy_sell],
						scc.source_commodity_id,
						co.commodity_origin_id,
						CASE WHEN a.is_organic = ''Yes'' THEN ''y''
						ELSE ''n''
						END [is_organic],
						cf.commodity_form_id,
						at1.[attribute1_id],
						at2.[attribute2_id],
						at3.[attribute3_id],
						at4.[attribute4_id],
						at5.[attribute5_id]
					FROM ' + @import_temp_table_name + ' a
					LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.counterparty_id
					LEFT JOIN source_commodity scc ON scc.commodity_name = a.commodity_id

					LEFT JOIN static_data_value sdv_o ON sdv_o.code = a.commodity_origin_id AND sdv_o.type_id = 14000
					LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = scc.source_commodity_id
					LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.commodity_form_id AND sdv_commodity_form.[type_id] = 43700
					LEFT JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = scc.commodity_type
					LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND co.commodity_origin_id = cf.commodity_origin_id

					OUTER APPLY (
						SELECT TOP 1 caf1.commodity_form_attribute1_id [attribute1_id], sdv_attb1.code 
						FROM commodity_attribute ca
						INNER JOIN commodity_attribute_form caf ON ca.commodity_attribute_id = caf.commodity_attribute_id
						INNER JOIN static_data_value sdv_attb1 ON caf.commodity_attribute_value = sdv_attb1.value_id AND sdv_attb1.type_id = 43200
						AND sdv_attb1.code = a.commodity_form_attribute1
						INNER JOIN commodity_form_attribute1 caf1 ON caf.commodity_attribute_form_id = caf1.attribute_form_id AND caf1.commodity_form_id = cf.commodity_form_id
					) at1
					OUTER APPLY (
						SELECT TOP 1 caf2.commodity_form_attribute2_id [attribute2_id], sdv_attb2.code FROM commodity_attribute ca
						INNER JOIN commodity_attribute_form caf ON ca.commodity_attribute_id = caf.commodity_attribute_id
						INNER JOIN static_data_value sdv_attb2 ON caf.commodity_attribute_value = sdv_attb2.value_id AND sdv_attb2.type_id = 43200
						AND sdv_attb2.code = a.commodity_form_attribute2
						INNER JOIN commodity_form_attribute2 caf2 ON caf.commodity_attribute_form_id = caf2.attribute_form_id AND caf2.commodity_form_attribute1_id = at1.attribute1_id
					) at2
					'
			SET @sql += '	OUTER APPLY (
						SELECT TOP 1 caf3.commodity_form_attribute3_id [attribute3_id], sdv_attb3.code FROM commodity_attribute ca
						INNER JOIN commodity_attribute_form caf ON ca.commodity_attribute_id = caf.commodity_attribute_id
						INNER JOIN static_data_value sdv_attb3 ON caf.commodity_attribute_value = sdv_attb3.value_id AND sdv_attb3.type_id = 43200
						AND sdv_attb3.code = a.commodity_form_attribute3
						INNER JOIN commodity_form_attribute3 caf3 ON caf.commodity_attribute_form_id = caf3.attribute_form_id AND caf3.commodity_form_attribute2_id = at2.attribute2_id
					) at3

					OUTER APPLY (
						SELECT TOP 1 caf4.commodity_form_attribute4_id [attribute4_id], sdv_attb4.code FROM commodity_attribute ca
						INNER JOIN commodity_attribute_form caf ON ca.commodity_attribute_id = caf.commodity_attribute_id
						INNER JOIN static_data_value sdv_attb4 ON caf.commodity_attribute_value = sdv_attb4.value_id AND sdv_attb4.type_id = 43200
						AND sdv_attb4.code = a.commodity_form_attribute4
						INNER JOIN commodity_form_attribute4 caf4 ON caf.commodity_attribute_form_id = caf4.attribute_form_id AND caf4.commodity_form_attribute3_id = at3.attribute3_id
					) at4
					OUTER APPLY (
						SELECT TOP 1 caf5.commodity_form_attribute5_id [attribute5_id], sdv_attb5.code FROM commodity_attribute ca
						INNER JOIN commodity_attribute_form caf ON ca.commodity_attribute_id = caf.commodity_attribute_id
						INNER JOIN static_data_value sdv_attb5 ON caf.commodity_attribute_value = sdv_attb5.value_id AND sdv_attb5.type_id = 43200
						AND sdv_attb5.code = a.commodity_form_attribute5
						INNER JOIN commodity_form_attribute5 caf5 ON caf.commodity_attribute_form_id = caf5.attribute_form_id AND caf5.commodity_form_attribute4_id = at4.attribute4_id
					) at5
					LEFT JOIN counterparty_products cp ON sc.source_counterparty_id = cp.counterparty_id
						AND CASE WHEN a.buy_sell = ''Buys'' THEN ''b'' WHEN a.buy_sell = ''Sells'' THEN ''s'' ELSE ''a'' END = cp.buy_sell 
						AND scc.source_commodity_id = cp.commodity_id
						AND co.commodity_origin_id = cp.commodity_origin_id
						AND CASE WHEN a.is_organic = ''Yes'' THEN ''y'' ELSE ''n'' END = cp.is_organic
						AND cf.commodity_form_id = cp.commodity_form_id
						AND ISNULL(at1.[attribute1_id], '''') = ISNULL(cp.commodity_form_attribute1, '''')
						AND ISNULL(at2.[attribute2_id], '''') = ISNULL(cp.commodity_form_attribute2, '''')
						AND ISNULL(at3.[attribute3_id], '''') = ISNULL(cp.commodity_form_attribute3, '''')
						AND ISNULL(at4.[attribute4_id], '''') = ISNULL(cp.commodity_form_attribute4, '''')
						AND ISNULL(at5.[attribute5_id], '''') = ISNULL(cp.commodity_form_attribute5, '''')
					WHERE cp.counterparty_product_id IS NULL
			   '
	EXEC (@sql)
END

IF @table_name = 'ixp_product_grading_structure_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
	-- Preliminaries for Product Grading Structure
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			-- Insert Commodity Type
				INSERT INTO commodity_type(data_type, commodity_name, commodity_description)
				SELECT DISTINCT 4070, a.commodity_type, a.commodity_type 
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_type ct ON ct.commodity_name = a.commodity_type AND data_type = 4070
				WHERE ct.commodity_type_id IS NULL
			-- Insert Commodity Type Form
				-- Insert into static data value if new value imported.
				INSERT INTO static_data_value([type_id],code,[description])
				SELECT DISTINCT 43700,a.form,a.form
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value AS sdv ON sdv.code = a.form AND sdv.[type_id] = 43700
				WHERE sdv.code IS NULL
				-- Insert into commodity type form	
				INSERT INTO commodity_type_form(commodity_type_id, commodity_form_value)
				SELECT DISTINCT ct.commodity_type_id, sdv_commodity_form.value_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_type ct ON ct.commodity_name = a.commodity_type AND data_type = 4070
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				LEFT JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = ct.commodity_type_id
				WHERE ctf.commodity_type_form_id IS NULL
			-- Insert Commodity
				INSERT INTO source_commodity(source_system_id, commodity_id, commodity_name, commodity_type)
				SELECT DISTINCT 2, a.commodity, a.commodity, ct.commodity_type_id
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN source_commodity sc ON sc.commodity_id = a.commodity
				LEFT JOIN commodity_type ct ON ct.commodity_name = a.commodity_type AND data_type = 4070
				WHERE sc.source_commodity_id IS NULL
			-- Insert Origin
				INSERT INTO static_data_value(type_id, code, description)
				SELECT DISTINCT 14000, a.origin, a.origin
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_o ON sdv_o.code = a.origin AND sdv_o.type_id = 14000
				WHERE sdv_o.value_id IS NULL
			-- Insert Attribute Value
			'
		SET @sql +=  ' INSERT INTO static_data_value(type_id, code, description)
				SELECT DISTINCT 43200, attribute1, attribute1
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute1 AND sdv_av.type_id = 43200
				WHERE sdv_av.value_id IS NULL AND a.attribute1 IS NOT NULL
				UNION
				SELECT DISTINCT 43200, attribute2, attribute2
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute2 AND sdv_av.type_id = 43200
				WHERE sdv_av.value_id IS NULL AND a.attribute2 IS NOT NULL
				UNION
				SELECT DISTINCT 43200, attribute3, attribute3
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute3 AND sdv_av.type_id = 43200
				WHERE sdv_av.value_id IS NULL AND a.attribute3 IS NOT NULL
				UNION
				SELECT DISTINCT 43200, attribute4, attribute4
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute4 AND sdv_av.type_id = 43200
				WHERE sdv_av.value_id IS NULL AND a.attribute4 IS NOT NULL
				UNION
				SELECT DISTINCT 43200, attribute5, attribute5
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute5 AND sdv_av.type_id = 43200
				WHERE sdv_av.value_id IS NULL AND a.attribute5 IS NOT NULL
			-- Insert Attribute
				INSERT INTO commodity_attribute(data_type, commodity_name, commodity_description)
				SELECT DISTINCT 4071, a.attribute1_type, a.attribute1_type
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute1_type AND ca.data_type = 4071
				WHERE ca.commodity_attribute_id IS NULL AND a.attribute1_type IS NOT NULL
				UNION
				SELECT DISTINCT 4071, a.attribute2_type, a.attribute2_type
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute2_type AND ca.data_type = 4071
				WHERE ca.commodity_attribute_id IS NULL AND a.attribute2_type IS NOT NULL
				UNION
				SELECT DISTINCT 4071, a.attribute3_type, a.attribute3_type
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute3_type AND ca.data_type = 4071
				WHERE ca.commodity_attribute_id IS NULL AND a.attribute3_type IS NOT NULL
				UNION
				SELECT DISTINCT 4071, a.attribute4_type, a.attribute4_type
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute4_type AND ca.data_type = 4071
				WHERE ca.commodity_attribute_id IS NULL AND a.attribute4_type IS NOT NULL
				UNION
				SELECT DISTINCT 4071, a.attribute5_type, a.attribute5_type
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute5_type AND ca.data_type = 4071
				WHERE ca.commodity_attribute_id IS NULL AND a.attribute5_type IS NOT NULL
				'
	EXEC(@sql)
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
			-- Map Attribute and Attribute Value
				INSERT INTO commodity_attribute_form(commodity_attribute_id, commodity_attribute_value)
				SELECT DISTINCT ca.commodity_attribute_id, sdv_av.value_id [commodity_attribute_value]
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute1_type AND ca.data_type = 4071
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute1 AND sdv_av.type_id = 43200
				LEFT JOIN commodity_attribute_form caf ON caf.commodity_attribute_id = ca.commodity_attribute_id AND caf.commodity_attribute_value = sdv_av.value_id
				WHERE caf.commodity_attribute_form_id IS NULL AND  a.attribute1 IS NOT NULL
				UNION
				SELECT DISTINCT ca.commodity_attribute_id, sdv_av.value_id [commodity_attribute_value]
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute2_type AND ca.data_type = 4071
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute2 AND sdv_av.type_id = 43200
				LEFT JOIN commodity_attribute_form caf ON caf.commodity_attribute_id = ca.commodity_attribute_id AND caf.commodity_attribute_value = sdv_av.value_id
				WHERE caf.commodity_attribute_form_id IS NULL AND  a.attribute2 IS NOT NULL
				UNION
				SELECT DISTINCT ca.commodity_attribute_id, sdv_av.value_id [commodity_attribute_value]
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute3_type AND ca.data_type = 4071
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute3 AND sdv_av.type_id = 43200
				LEFT JOIN commodity_attribute_form caf ON caf.commodity_attribute_id = ca.commodity_attribute_id AND caf.commodity_attribute_value = sdv_av.value_id
				WHERE caf.commodity_attribute_form_id IS NULL AND  a.attribute3 IS NOT NULL
				UNION
				SELECT DISTINCT ca.commodity_attribute_id, sdv_av.value_id [commodity_attribute_value]
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute4_type AND ca.data_type = 4071
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute4 AND sdv_av.type_id = 43200
				LEFT JOIN commodity_attribute_form caf ON caf.commodity_attribute_id = ca.commodity_attribute_id AND caf.commodity_attribute_value = sdv_av.value_id
				WHERE caf.commodity_attribute_form_id IS NULL AND  a.attribute4 IS NOT NULL
				UNION
				SELECT DISTINCT ca.commodity_attribute_id, sdv_av.value_id [commodity_attribute_value]
				FROM ' + @import_temp_table_name + ' a
				LEFT JOIN commodity_attribute ca ON ca.commodity_name = a.attribute5_type AND ca.data_type = 4071
				LEFT JOIN static_data_value sdv_av ON sdv_av.code = a.attribute5 AND sdv_av.type_id = 43200
				LEFT JOIN commodity_attribute_form caf ON caf.commodity_attribute_id = ca.commodity_attribute_id AND caf.commodity_attribute_value = sdv_av.value_id
				WHERE caf.commodity_attribute_form_id IS NULL AND  a.attribute5 IS NOT NULL
				'
	EXEC(@sql)
	-- Product Grading Structure
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
				-- Insert Origin
				INSERT INTO commodity_origin(source_commodity_id, origin)
				SELECT DISTINCT sc.source_commodity_id, sdv_o.value_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				WHERE co.commodity_origin_id IS NULL
				-- Insert Form
				INSERT INTO commodity_form(commodity_origin_id, form)
				SELECT DISTINCT co.commodity_origin_id,ctf.commodity_type_form_id
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id 
					AND cf.commodity_origin_id = co.commodity_origin_id 
				WHERE cf.commodity_form_id IS NULL
				-- Insert Attribute 1
				INSERT INTO commodity_form_attribute1(commodity_form_id, attribute_id, attribute_form_id)
				SELECT DISTINCT cf.commodity_form_id,ca.commodity_attribute_id [attribute_id],caf.commodity_attribute_form_id [attribute_form_id]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN commodity_attribute ca ON ca.commodity_name = a.attribute1_type
				LEFT JOIN static_data_value sdv_at1 ON sdv_at1.code = a.attribute1 AND sdv_at1.type_id = 43200
				INNER JOIN commodity_attribute_form caf ON caf.commodity_attribute_value = sdv_at1.value_id AND caf.commodity_attribute_id = ca.commodity_attribute_id
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND cf.commodity_origin_id = co.commodity_origin_id
				LEFT JOIN commodity_form_attribute1 cfa1 ON cfa1.commodity_form_id = cf.commodity_form_id
					AND cfa1.attribute_id = ca.commodity_attribute_id 
					AND cfa1.attribute_form_id = caf.commodity_attribute_form_id
				WHERE cfa1.commodity_form_attribute1_id IS NULL
				-- Insert Attribute 2
				INSERT INTO commodity_form_attribute2(commodity_form_attribute1_id, attribute_id, attribute_form_id)
				SELECT DISTINCT cfa1.commodity_form_attribute1_id,ca.commodity_attribute_id [attribute_id],caf.commodity_attribute_form_id [attribute_form_id]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN commodity_attribute ca ON ca.commodity_name = a.attribute2_type
				LEFT JOIN static_data_value sdv_at2 ON sdv_at2.code = a.attribute2 AND sdv_at2.type_id = 43200
				INNER JOIN commodity_attribute_form caf ON caf.commodity_attribute_value = sdv_at2.value_id AND caf.commodity_attribute_id = ca.commodity_attribute_id
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND cf.commodity_origin_id = co.commodity_origin_id
				LEFT JOIN commodity_attribute ca1 ON ca1.commodity_name = a.attribute1_type
				LEFT JOIN static_data_value sdv_at1 ON sdv_at1.code = a.attribute1
				LEFT JOIN commodity_attribute_form caf1 ON caf1.commodity_attribute_value = sdv_at1.value_id
				INNER JOIN commodity_form_attribute1 cfa1 ON cfa1.commodity_form_id = cf.commodity_form_id
					AND cfa1.attribute_id = ca1.commodity_attribute_id 
					AND cfa1.attribute_form_id = caf1.commodity_attribute_form_id
				LEFT JOIN commodity_form_attribute2 cfa2 ON  cfa2.commodity_form_attribute1_id = cfa1.commodity_form_attribute1_id 
					AND cfa2.attribute_id = ca.commodity_attribute_id 
					AND cfa2.attribute_form_id = caf.commodity_attribute_form_id
				WHERE cfa2.commodity_form_attribute2_id IS NULL
				'
	EXEC(@sql)
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' -- Insert Attribute 3
				INSERT INTO commodity_form_attribute3(commodity_form_attribute2_id, attribute_id, attribute_form_id)
				SELECT DISTINCT cfa2.commodity_form_attribute2_id,ca.commodity_attribute_id [attribute_id],caf.commodity_attribute_form_id [attribute_form_id]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN commodity_attribute ca ON ca.commodity_name = a.attribute3_type
				LEFT JOIN static_data_value sdv_at3 ON sdv_at3.code = a.attribute3 AND sdv_at3.type_id = 43200
				INNER JOIN commodity_attribute_form caf ON caf.commodity_attribute_value = sdv_at3.value_id AND caf.commodity_attribute_id = ca.commodity_attribute_id
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND cf.commodity_origin_id = co.commodity_origin_id
				LEFT JOIN commodity_attribute ca1 ON ca1.commodity_name = a.attribute1_type
				LEFT JOIN static_data_value sdv_at1 ON sdv_at1.code = a.attribute1
				LEFT JOIN commodity_attribute_form caf1 ON caf1.commodity_attribute_value = sdv_at1.value_id AND sdv_at1.type_id = 43200
				INNER JOIN commodity_form_attribute1 cfa1 ON cfa1.commodity_form_id = cf.commodity_form_id
					AND cfa1.attribute_id = ca1.commodity_attribute_id 
					AND cfa1.attribute_form_id = caf1.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca2 ON ca2.commodity_name = a.attribute2_type
				LEFT JOIN static_data_value sdv_at2 ON sdv_at2.code = a.attribute2
				LEFT JOIN commodity_attribute_form caf2 ON caf2.commodity_attribute_value = sdv_at2.value_id  AND sdv_at2.type_id = 43200
				INNER JOIN commodity_form_attribute2 cfa2 ON  cfa2.commodity_form_attribute1_id = cfa1.commodity_form_attribute1_id
					AND cfa2.attribute_id = ca2.commodity_attribute_id 
					AND cfa2.attribute_form_id = caf2.commodity_attribute_form_id
				LEFT JOIN commodity_form_attribute3 cfa3 ON  cfa3.commodity_form_attribute2_id = cfa2.commodity_form_attribute2_id 
					AND cfa3.attribute_id = ca.commodity_attribute_id 
					AND cfa3.attribute_form_id = caf.commodity_attribute_form_id
				WHERE cfa3.commodity_form_attribute3_id IS NULL
				'
	EXEC(@sql)
	SET @sql =	CAST('' AS NVARCHAR(MAX)) + N' -- Insert Attribute 4
				INSERT INTO commodity_form_attribute4(commodity_form_attribute3_id, attribute_id, attribute_form_id)
				SELECT DISTINCT cfa3.commodity_form_attribute3_id,ca.commodity_attribute_id [attribute_id],caf.commodity_attribute_form_id [attribute_form_id]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN commodity_attribute ca ON ca.commodity_name = a.attribute4_type
				LEFT JOIN static_data_value sdv_at4 ON sdv_at4.code = a.attribute4 AND sdv_at4.type_id = 43200
				INNER JOIN commodity_attribute_form caf ON caf.commodity_attribute_value = sdv_at4.value_id AND caf.commodity_attribute_id = ca.commodity_attribute_id
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND cf.commodity_origin_id = co.commodity_origin_id
				LEFT JOIN commodity_attribute ca1 ON ca1.commodity_name = a.attribute1_type
				LEFT JOIN static_data_value sdv_at1 ON sdv_at1.code = a.attribute1
				LEFT JOIN commodity_attribute_form caf1 ON caf1.commodity_attribute_value = sdv_at1.value_id AND sdv_at1.type_id = 43200
				INNER JOIN commodity_form_attribute1 cfa1 ON cfa1.commodity_form_id = cf.commodity_form_id
					AND cfa1.attribute_id = ca1.commodity_attribute_id 
					AND cfa1.attribute_form_id = caf1.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca2 ON ca2.commodity_name = a.attribute2_type
				LEFT JOIN static_data_value sdv_at2 ON sdv_at2.code = a.attribute2
				LEFT JOIN commodity_attribute_form caf2 ON caf2.commodity_attribute_value = sdv_at2.value_id  AND sdv_at2.type_id = 43200
				INNER JOIN commodity_form_attribute2 cfa2 ON  cfa2.commodity_form_attribute1_id = cfa1.commodity_form_attribute1_id
					AND cfa2.attribute_id = ca2.commodity_attribute_id 
					AND cfa2.attribute_form_id = caf2.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca3 ON ca3.commodity_name = a.attribute3_type
				LEFT JOIN static_data_value sdv_at3 ON sdv_at3.code = a.attribute3
				LEFT JOIN commodity_attribute_form caf3 ON caf3.commodity_attribute_value = sdv_at3.value_id  AND sdv_at3.type_id = 43200
				INNER JOIN commodity_form_attribute3 cfa3 ON  cfa3.commodity_form_attribute2_id = cfa2.commodity_form_attribute2_id 
					AND cfa3.attribute_id = ca3.commodity_attribute_id 
					AND cfa3.attribute_form_id = caf3.commodity_attribute_form_id
				LEFT JOIN commodity_form_attribute4 cfa4 ON  cfa4.commodity_form_attribute3_id = cfa3.commodity_form_attribute3_id 
					AND cfa4.attribute_id = ca.commodity_attribute_id 
					AND cfa4.attribute_form_id = caf.commodity_attribute_form_id
				WHERE cfa4.commodity_form_attribute4_id IS NULL
				-- Insert Attribute 5
			'
		SET @sql += 	' INSERT INTO commodity_form_attribute5(commodity_form_attribute4_id, attribute_id, attribute_form_id)
				SELECT DISTINCT cfa4.commodity_form_attribute4_id,ca.commodity_attribute_id [attribute_id],caf.commodity_attribute_form_id [attribute_form_id]
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN commodity_attribute ca ON ca.commodity_name = a.attribute5_type
				LEFT JOIN static_data_value sdv_at5 ON sdv_at5.code = a.attribute5 AND sdv_at5.type_id = 43200
				INNER JOIN commodity_attribute_form caf ON caf.commodity_attribute_value = sdv_at5.value_id AND caf.commodity_attribute_id = ca.commodity_attribute_id
				INNER JOIN static_data_value sdv_o ON a.origin = sdv_o.code AND sdv_o.type_id = 14000
				INNER JOIN source_commodity sc ON sc.commodity_name = a.commodity
				LEFT JOIN commodity_origin co ON co.origin = sdv_o.value_id AND co.source_commodity_id = sc.source_commodity_id
				LEFT JOIN static_data_value sdv_commodity_form ON sdv_commodity_form.code = a.form AND sdv_commodity_form.[type_id] = 43700
				INNER JOIN commodity_type_form ctf ON ctf.commodity_form_value = sdv_commodity_form.value_id AND ctf.commodity_type_id = sc.commodity_type
				LEFT JOIN commodity_form cf ON cf.form = ctf.commodity_type_form_id AND cf.commodity_origin_id = co.commodity_origin_id
				LEFT JOIN commodity_attribute ca1 ON ca1.commodity_name = a.attribute1_type
				LEFT JOIN static_data_value sdv_at1 ON sdv_at1.code = a.attribute1
				LEFT JOIN commodity_attribute_form caf1 ON caf1.commodity_attribute_value = sdv_at1.value_id AND sdv_at1.type_id = 43200
				INNER JOIN commodity_form_attribute1 cfa1 ON cfa1.commodity_form_id = cf.commodity_form_id
					AND cfa1.attribute_id = ca1.commodity_attribute_id 
					AND cfa1.attribute_form_id = caf1.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca2 ON ca2.commodity_name = a.attribute2_type
				LEFT JOIN static_data_value sdv_at2 ON sdv_at2.code = a.attribute2
				LEFT JOIN commodity_attribute_form caf2 ON caf2.commodity_attribute_value = sdv_at2.value_id  AND sdv_at2.type_id = 43200
				INNER JOIN commodity_form_attribute2 cfa2 ON  cfa2.commodity_form_attribute1_id = cfa1.commodity_form_attribute1_id
					AND cfa2.attribute_id = ca2.commodity_attribute_id 
					AND cfa2.attribute_form_id = caf2.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca3 ON ca3.commodity_name = a.attribute3_type
				LEFT JOIN static_data_value sdv_at3 ON sdv_at3.code = a.attribute3
				LEFT JOIN commodity_attribute_form caf3 ON caf3.commodity_attribute_value = sdv_at3.value_id  AND sdv_at3.type_id = 43200
				INNER JOIN commodity_form_attribute3 cfa3 ON  cfa3.commodity_form_attribute2_id = cfa2.commodity_form_attribute2_id 
					AND cfa3.attribute_id = ca3.commodity_attribute_id 
					AND cfa3.attribute_form_id = caf3.commodity_attribute_form_id
				LEFT JOIN commodity_attribute ca4 ON ca4.commodity_name = a.attribute4_type
				LEFT JOIN static_data_value sdv_at4 ON sdv_at4.code = a.attribute4
				LEFT JOIN commodity_attribute_form caf4 ON caf4.commodity_attribute_value = sdv_at4.value_id  AND sdv_at4.type_id = 43200
				LEFT JOIN commodity_form_attribute4 cfa4 ON  cfa4.commodity_form_attribute3_id = cfa3.commodity_form_attribute3_id 
					AND cfa4.attribute_id = ca4.commodity_attribute_id 
					AND cfa4.attribute_form_id = caf4.commodity_attribute_form_id
				LEFT JOIN commodity_form_attribute5 cfa5 ON  cfa5.commodity_form_attribute4_id = cfa4.commodity_form_attribute4_id 
					AND cfa5.attribute_id = ca.commodity_attribute_id 
					AND cfa5.attribute_form_id = caf.commodity_attribute_form_id
				WHERE cfa5.commodity_form_attribute5_id IS NULL
				'
	EXEC(@sql)
END

IF @table_name = 'ixp_source_energy_escalation_price'
BEGIN
 	EXEC('DELETE '+@field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'',''as_of_date'',''as_of_date'')')
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_price_curve'',''curve_value'',''curve_value'')')
 	--Pre validataing Data Type
 	SET @source_table = @import_temp_table_name
 	
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	        
	 	
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name
 	
  	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 	      SELECT 
 				 a.temp_id,
 	             '''+ @process_id+''',
 	             ''Error'',
 	             ''Import Data'',
 	             '''+ @table_name+''',
 	             ''Data Error'',
 	             ''As of date '' + ISNULL(CAST(a.as_of_date AS NVARCHAR(10)), ''NULL'') +  '' has been locked. Please unlock first to proceed.'',
 	             ''Please CHECK your Data'',
 	               a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
          INNER JOIN lock_as_of_date b
          ON  a.as_of_date = b.close_date')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
				 '''+ @process_id+''',
				 ''Error'',
				 ''Import Data'',
				 '''+@table_name+''',
				 ''Data Error'',
				 ''Data error for source_curve_def_id :'' + ISNULL(a.source_curve_def_id, ''NULL'')
 				 + ''.( Curve : '' + ISNULL(a.source_curve_def_id, ''NULL'') + ''  is not present in system.)'',
 				 ''Please CHECK your Data'', a.import_file_name
 		  FROM   '+@import_temp_table_name + ' a
 		  LEFT JOIN source_price_curve_def spcd ON  spcd.curve_id = a.source_curve_def_id
 		  WHERE spcd.source_curve_def_id IS NULL')



		  EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT a.temp_id,
 					'''+ @process_id+''',
 					''Error'',
 					''Import Data'',
 					'''+ @table_name+''',
 					''Data Error'',
 					''Data Repetition error for As of Date: '' +  a.as_of_date  + '' (Data Repetition Error, No of times:''+ cast(b.notimes as NVARCHAR)+'' )'',
 					''Please CHECK your Data'',
 			a.import_file_name
 			FROM ' + @import_temp_table_name + ' a
 			INNER JOIN (SELECT as_of_date, source_curve_def_id,
 							   COUNT(*) notimes
 						   FROM   '+ @import_temp_table_name+'
 						   GROUP BY as_of_date, source_curve_def_id
 						   HAVING COUNT(*) > 1
 					   ) b 
 					ON a.as_of_date = b.as_of_date 
					AND a.source_curve_def_id = b.source_curve_def_id 
					')


 	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM #import_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

		SET @sql = 'UPDATE source_price_curve
 	            SET    as_of_date = CONVERT(DATETIME, b.[as_of_date], 120),
 	                   maturity_date = CONVERT(DATETIME, b.[as_of_date], 120),
 	                   bid_value = 0,
 					   ask_value = 0,
 					   is_dst = 0,
 					   curve_value = b.[Curve_Value]
 	            FROM source_price_curve spc
 	            INNER JOIN source_price_curve_def spcd ON  spcd.source_curve_def_id = spc.source_curve_def_id
 	            INNER JOIN ' + @import_temp_table_name + ' b
                     ON  spcd.curve_id = b.source_curve_def_id
                     AND spc.as_of_date = b.as_of_date
                LEFT JOIN #import_status ON  b.temp_id = #import_status.temp_id
 	            WHERE  #import_status.temp_id IS NULL'
 	
 	EXEC(@sql)
		  	
 		SET @sql = 'INSERT INTO source_price_curve (source_curve_def_id, as_of_date, Assessment_curve_type_value_id, curve_source_value_id, maturity_date, curve_value, bid_value, ask_value, is_dst)
 	             SELECT spcd.source_curve_def_id,
 	                    CONVERT(DATETIME, a.[as_of_date], 120),
 	                    77,
 	                    4500,
 	                    CONVERT(DATETIME, a.[as_of_date], 120),
 	                    a.[Curve_Value], 
 	                    0, 
 	                    0, 
 	                    0	                  
 	             FROM ' + @import_temp_table_name + ' a
 	             INNER JOIN source_price_curve_def spcd ON  spcd.curve_id = a.source_curve_def_id AND spcd.source_system_id = a.source_system_id
                  LEFT JOIN source_price_curve spc ON  spc.source_curve_def_id = spcd.source_curve_def_id
 						AND spc.as_of_date = a.[as_of_date]
 				 LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
 	             WHERE  #import_status.temp_id IS NULL AND spc.source_curve_def_id IS NULL
				 '
  	exec(@sql)

END

IF @table_name = 'ixp_delivery_path_mdq'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
	
	SET @sql =  'DELETE dpm
				 FROM ' + @import_temp_table_name + ' a
				 INNER JOIN delivery_path dp ON dp.path_name = a.path_name
				 INNER JOIN delivery_path_mdq dpm ON dpm.path_id = dp.path_id  
				 INNER JOIN contract_group cg on cg.source_contract_id = a.contract_id
				 WHERE a.path_name = dp.path_name 
				 AND dbo.FNAGetSQLStandardDateTime(a.effective_date) = dpm.effective_date
				 AND a.contract_id = CAST(cg.source_contract_id as NVARCHAR(50)) 				 
			 '
	exec (@sql)
		
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.path_name , ''NULL'')   +  ''. Path Name Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.path_name IS NULL')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.contract_id , ''NULL'')   +  ''. Contract ID Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.contract_id IS NULL')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.effective_date , ''NULL'')   +  ''. Effective Date Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.effective_date IS NULL')

	
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.MDQ, ''NULL'')   +  ''. MDQ Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.MDQ IS NULL')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.Rec_del, ''NULL'')   +  ''. Rec/Del Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.Rec_del IS NULL')

	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN '+@import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

	SET @sql = 'INSERT INTO delivery_path_mdq(
		    path_id,
			effective_date,
			contract_id,
			mdq,
			rec_del
		  )

 		SELECT dp.path_id, a.effective_date, cg.contract_id, a.mdq, a.rec_del
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN delivery_path dp on dp.path_name = a.path_name
		INNER JOIN contract_group cg on cg.source_contract_id = a.contract_id
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL'

EXEC (@sql)
END

IF @table_name = 'ixp_contract_mdq'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)

	SET @sql =  'DELETE tcm
				 FROM ' + @import_temp_table_name + ' a
				 INNER JOIN contract_group cg ON CAST(cg.source_contract_id as NVARCHAR(50)) = a.[contract_name]
				 INNER JOIN transportation_contract_mdq tcm ON tcm.contract_id = cg.contract_id		
				 WHERE tcm.contract_id = cg.contract_id 
				 AND dbo.FNAGetSQLStandardDateTime(a.effective_date) = tcm.effective_date
			 '
	EXEC (@sql)

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Name :'' + ISNULL(a.contract_name, ''NULL'')   +  ''. Contract Name Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.[contract_name] IS NULL')

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  Date :'' + ISNULL(a.effective_date , ''NULL'')   +  ''. Effective Date Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.effective_date IS NULL')


	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 	SELECT a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Data error for  MDQ :'' + ISNULL(a.MDQ, ''NULL'')   +  ''. MDQ Cannot be null.'',
 			''Please check your Data'',
 			a.import_file_name
 	FROM   ' + @import_temp_table_name + ' a
 	WHERE a.MDQ IS NULL')
	

	EXEC('DELETE '+@import_temp_table_name + '
 	      FROM   #import_status
 	      INNER JOIN '+@import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')

	SET @sql = 'INSERT INTO transportation_contract_mdq(
		    contract_id,
			effective_date,
			mdq
			)
 		SELECT cg.contract_id, a.effective_date, a.mdq
		FROM ' + @import_temp_table_name + ' a 
		LEFT JOIN contract_group cg on cg.source_contract_id = a.[contract_name]
		LEFT JOIN #import_status ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL'
 				
--PRINT (@sql)

EXEC (@sql)
END

-- Book Structure
IF @table_name = 'ixp_subsidiary_template'
BEGIN

 	EXEC('DELETE FROM  '+@import_temp_table_name+'
 	      WHERE source_system_id IS NULL
 	            AND  name IS NULL
				AND	functional_currency IS NULL
				AND	primary_counterparty IS NULL
				AND	fx_conversion_market IS NULL
				AND	entity_type IS NULL
				AND	source_discount_values IS NULL
				AND	discount_type IS NULL
				AND	risk_free_interest_rate_curve IS NULL
				AND	discount_rate IS NULL
				AND	discount_param IS NULL
				AND	long_term_months IS NULL
				AND	tax_percentage IS NULL
				AND	timezone IS NULL
				 ')
 	             
 	EXEC ('INSERT INTO #temp_tot_count
 	       SELECT COUNT(*) AS totcount,
 	              '''+ @table_name+'''
 	       FROM   '+@import_temp_table_name)
 	
	-- Data Repetition
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Repetition'',
 				 ''Data repetition found for column : Subsdiary 
					value: a.name No of times: CAST(b.notimes AS NVARCHAR).'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT name, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
               GROUP BY name
               HAVING COUNT(*) > 1
               ) b
           ON  a.name = b.name')
	
	-- Missing value
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Missing Value'',
 				 ''Data missing for any columns : Subsidiary, Functional Currency, Entity Type or Source of Discount Values.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      WHERE a.name IS NULL OR a.functional_currency IS NULL OR a.entity_type IS NULL OR a.source_discount_values IS NULL')

      -- Invalid Data
	  EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Warning'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: Primary Counterparty.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN source_counterparty sc ON sc.counterparty_id = a.primary_counterparty
		  WHERE sc.source_counterparty_id IS NULL
			AND a.primary_counterparty IS NOT NULL')     
	
	 EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: Functional Currency.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN source_currency sc ON sc.currency_id = a.functional_currency
		  WHERE sc.source_currency_id IS NULL')

	 EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data not found for column: Entity Type or Source of Discount Values.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN static_data_value sdv_entity ON a.entity_type = sdv_entity.code AND sdv_entity.type_id = 650
		  LEFT JOIN static_data_value sdv_srcdisc ON a.source_discount_values = sdv_srcdisc.code AND sdv_srcdisc.type_id = 100
		  WHERE sdv_entity.value_id IS NULL OR sdv_srcdisc.value_id IS NULL
		  ')

 	EXEC('DELETE a
		FROM #import_status 
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id=a.temp_id
		WHERE #import_status.error_code = ''Error''')


	SET @SQL = 'INSERT INTO portfolio_hierarchy(entity_name, entity_type_value_id, hierarchy_level, parent_entity_id)
				SELECT name, 525, 2, NULL FROM ' + @import_temp_table_name + ' a
				LEFT JOIN portfolio_hierarchy p1 ON p1.entity_name = a.name AND p1.entity_type_value_id = 525 AND p1.hierarchy_level = 2 AND parent_entity_id IS NULL
				WHERE p1.entity_id IS NULL
	'
	EXEC(@sql)


 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' UPDATE f SET     
 	            f.days_in_year = a.discount_param,
				f.func_cur_value_id = sc.source_currency_id,
				f.counterparty_id = scp.source_counterparty_id,
				f.fx_conversion_market = fcm.value_id,
				f.entity_type_value_id = et.value_id,
				f.disc_source_value_id = sdv.value_id,
				f.disc_type_value_id = dt.value_id,
				f.risk_free_curve_id = rfirc.source_curve_def_id,
				f.discount_curve_id = dr.source_curve_def_id,
				f.long_term_months =  a.long_term_months,
				f.tax_perc = a.tax_percentage,
				f.timezone_id = tz.timezone_id,
				f.entity_name = a.name,
				f.address1 = a.address1,
				f.address2 = a.address2,
				f.city = a.city,
				f.state_value_id = a.state_value_id,
				f.zip_code = a.zip_code,
				f.country_value_id = a.country_value_id,
				f.entity_url = a.entity_url,
				f.tax_payer_id = a.tax_payer_id,
				f.contact_user_id = a.contact_user_id,
				f.primary_naics_code_id = a.primary_naics_code_id,
				f.secondary_naics_code_id = a.secondary_naics_code_id,
				f.entity_category_id = eci.value_id,
				f.entity_sub_category_id = esci.value_id,
				f.utility_type_id = uti.value_id,
				f.ticker_symbol_id = a.ticker_symbol_id,
				f.ownership_status = a.ownership_status,
				f.partners = a.partners,
				f.holding_company = a.holding_company,
				f.domestic_vol_initiatives = a.domestic_vol_initiatives,
				f.domestic_registeries = a.domestic_registeries,
				f.international_registeries = a.international_registeries,
				f.confidentiality_info = a.confidentiality_info,
				f.exclude_indirect_emissions = a.exclude_indirect_emissions,
				f.organization_boundaries = ob.value_id,
				f.base_year_from = a.base_year_from,
				f.base_year_to = a.base_year_to,
				f.update_user = dbo.fnadbuser(),
				f.update_ts = GETDATE(),
				f.node_level = a.node_level
 	            FROM fas_subsidiaries f
				 INNER JOIN portfolio_hierarchy ph ON ph.entity_id = f.fas_subsidiary_id AND ph.entity_type_value_id = 525 
                 INNER JOIN ' + @import_temp_table_name + ' a ON  a.name = ph.entity_name
				 LEFT JOIN source_currency sc ON sc.currency_id = a.functional_currency
				 LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty
                 LEFT JOIN static_data_value fcm ON fcm.code = a.fx_conversion_market AND fcm.type_id = 29700
                 LEFT JOIN static_data_value et ON et.code = a.entity_type AND et.type_id = 650
                 LEFT JOIN static_data_value sdv ON sdv.code = a.source_discount_values AND sdv.type_id = 100
                 LEFT JOIN static_data_value dt ON dt.code = a.discount_type AND dt.type_id = 125
                 LEFT JOIN static_data_value eci ON eci.code = a.entity_category_id AND eci.type_id = 1125
                 LEFT JOIN static_data_value esci ON esci.code = a.entity_sub_category_id AND esci.type_id = 1150
                 LEFT JOIN static_data_value uti ON uti.code = a.utility_type_id AND uti.type_id = 1175
                 LEFT JOIN static_data_value ob ON ob.code = a.organization_boundaries AND ob.type_id = 1100
                 LEFT JOIN source_price_curve_def rfirc ON rfirc.curve_name = a.risk_free_interest_rate_curve
                 LEFT JOIN source_price_curve_def dr ON dr.curve_name = a.discount_rate
				 LEFT JOIN time_zones tz ON tz.timezone_name = a.timezone
                 '
 	
 	EXEC(@sql)
 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
				INSERT INTO [dbo].[fas_subsidiaries]([fas_subsidiary_id], [entity_type_value_id], [disc_source_value_id], [disc_type_value_id], [func_cur_value_id], [days_in_year], [long_term_months], 
				[entity_name], [address1], [address2], [city], [state_value_id], [zip_code], [country_value_id], [entity_url], [tax_payer_id], [contact_user_id], [primary_naics_code_id], 
				[secondary_naics_code_id], [entity_category_id], [entity_sub_category_id], [utility_type_id], [ticker_symbol_id], [ownership_status], [partners], [holding_company], 
				[domestic_vol_initiatives], [domestic_registeries], [international_registeries], [confidentiality_info], [exclude_indirect_emissions], [organization_boundaries], [base_year_from], 
				[base_year_to], [tax_perc], [discount_curve_id], [risk_free_curve_id], [counterparty_id], [timezone_id], [node_level], 
				[fx_conversion_market])

				SELECT ph.entity_id, et.value_id, sdv.value_id, dt.value_id, sc.source_currency_id, a.discount_param, a.long_term_months, ph.entity_name, a.address1, a.address2, a.city,
				a.state_value_id, a.zip_code, a.country_value_id, a.entity_url, a.tax_payer_id, a.contact_user_id, a.primary_naics_code_id, a.secondary_naics_code_id, eci.value_id,
				esci.value_id, uti.value_id, a.ticker_symbol_id, a.ownership_status, a.partners, a.holding_company, a.domestic_vol_initiatives, a.domestic_registeries, 
				a.international_registeries, a.confidentiality_info, a.exclude_indirect_emissions, ob.value_id, a.base_year_from, a.base_year_to, a.tax_percentage, 
				dr.source_curve_def_id, rfirc.source_curve_def_id, scp.source_counterparty_id, tz.timezone_id, a.node_level, fcm.value_id
				FROM portfolio_hierarchy ph
                INNER JOIN ' + @import_temp_table_name + ' a ON  a.name = ph.entity_name
				 LEFT JOIN source_currency sc ON sc.currency_id = a.functional_currency
				 LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty
                 LEFT JOIN static_data_value fcm ON fcm.code = a.fx_conversion_market AND fcm.type_id = 29700
                 LEFT JOIN static_data_value et ON et.code = a.entity_type AND et.type_id = 650
                 LEFT JOIN static_data_value sdv ON sdv.code = a.source_discount_values AND sdv.type_id = 100
                 LEFT JOIN static_data_value dt ON dt.code = a.discount_type AND dt.type_id = 125
                 LEFT JOIN static_data_value eci ON eci.code = a.entity_category_id AND eci.type_id = 1125
                 LEFT JOIN static_data_value esci ON esci.code = a.entity_sub_category_id AND esci.type_id = 1150
                 LEFT JOIN static_data_value uti ON uti.code = a.utility_type_id AND uti.type_id = 1175
                 LEFT JOIN static_data_value ob ON ob.code = a.organization_boundaries AND ob.type_id = 1100
                 LEFT JOIN source_price_curve_def rfirc ON rfirc.curve_name = a.risk_free_interest_rate_curve
                 LEFT JOIN source_price_curve_def dr ON dr.curve_name = a.discount_rate
				 LEFT JOIN time_zones tz ON tz.timezone_name = a.timezone			
				 LEFT JOIN fas_subsidiaries f ON f.fas_subsidiary_id = ph.entity_id
				 WHERE ph.entity_type_value_id = 525 AND f.fas_subsidiary_id IS NULL
				 '
 	--PRINT(@sql)
 	EXEC(@sql)
END

IF @table_name = 'ixp_strategy_template'
BEGIN
	EXEC ('INSERT INTO #temp_tot_count
 	       SELECT COUNT(*) AS totcount,
 	              '''+ @table_name+'''
 	       FROM   '+@import_temp_table_name)

	--Data Repetition
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Repetition'',
 				 ''Data repetition found for column : Subsidiary, Strategy Name. No of times: CAST(b.notimes AS NVARCHAR).'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT name, parent_entity_name, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
               GROUP BY name, parent_entity_name
               HAVING COUNT(*) > 1
               ) b
           ON  a.name = b.name AND a.parent_entity_name = b.parent_entity_name')

  	-- Missing value
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				'''+ @process_id + ''',
 				''Error'',
 				''Import Data'',
 				'''+ @table_name + ''',
 				''Missing Value'',
 				''Data missing for column : ''+
				CASE 
				WHEN a.fas_strategy_id IS NULL THEN ''Strategy'' 
				WHEN a.parent_entity_name IS NULL THEN ''Subsidiary''
				WHEN a.hedge_type_value_id IS NULL THEN ''Accounting Type'' 
				WHEN a.test_range_from IS NULL THEN ''Test Range From 1''
				WHEN a.test_range_to IS NULL THEN ''Test Range To 1''
				END,
 				''Please check your Data'',
 				a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      WHERE a.fas_strategy_id IS NULL OR a.parent_entity_name IS NULL OR a.hedge_type_value_id IS NULL OR a.test_range_from IS NULL OR a.test_range_to IS NULL')

	-- Invalid Data
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data not found for column: Accounting Type.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN static_data_value sdv_hedge ON a.hedge_type_value_id = sdv_hedge.code AND sdv_hedge.type_id = 150
		  WHERE sdv_hedge.value_id IS NULL
		  ')
	
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: Subsidiary.''
					,
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN portfolio_hierarchy ph ON a.parent_entity_name = ph.entity_name AND ph.entity_type_value_id = 525
		  WHERE ph.entity_id IS NULL')

	-- warning for invalid value in relationship_to_entity
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Warning'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: No Link Relationship Type.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
		  OUTER APPLY(
				SELECT eff_test_profile_id				  
				FROM fas_eff_hedge_rel_type hedge_rel
				INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
				INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
				INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
				WHERE a.relationship_to_entity = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
			) b
			WHERE b.eff_test_profile_id IS NULL
				AND a.no_links_fas_eff_test_profile_id IS NOT NULL
 	      ')

	EXEC('DELETE '+@import_temp_table_name + '
 			FROM #import_status
 			INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id
			WHERE error_code = ''error'''
		)

	SET @SQL = 'INSERT INTO portfolio_hierarchy(entity_name, entity_type_value_id, hierarchy_level, parent_entity_id)
				SELECT fas_strategy_id, 526, 1, p1.entity_id FROM ' + @import_temp_table_name + ' a
				INNER JOIN portfolio_hierarchy p1 ON p1.entity_name = a.parent_entity_name AND p1.entity_type_value_id = 525 AND p1.hierarchy_level = 2 AND parent_entity_id IS NULL
				LEFT JOIN portfolio_hierarchy p2 ON p2.entity_name = a.fas_strategy_id AND p2.entity_type_value_id = 526 AND p2.hierarchy_level = 1 AND p2.parent_entity_id = p1.entity_id
				WHERE p2.entity_id IS NULL
	'
	EXEC(@sql)


SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
UPDATE f
   SET f.[hedge_type_value_id] = ac.value_id
      ,f.[fx_hedge_flag] = CASE a.fx_hedge_flag WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[mes_gran_value_id] = mg.value_id
      ,f.[gl_grouping_value_id] = glg.value_id
      ,f.[no_links] = CASE a.no_links WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[no_links_fas_eff_test_profile_id] = rte.eff_test_profile_id
      ,f.[mes_cfv_value_id] = mcv.value_id
      ,f.[mes_cfv_values_value_id] = ev.value_id
      ,f.[mismatch_tenor_value_id] = rhf.value_id
      ,f.[strip_trans_value_id] = st.value_id
      ,f.[asset_liab_calc_value_id] = a.asset_liab_calc_value_id
      ,f.[test_range_from] = a.test_range_from
      ,f.[test_range_to] = a.test_range_to
      ,f.[additional_test_range_from] = a.additional_test_range_from
      ,f.[additional_test_range_to] = a.additional_test_range_to
      ,f.[include_unlinked_hedges] = CASE a.include_unlinked_hedges WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[include_unlinked_items] = CASE a.include_unlinked_items WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[gl_number_id_st_asset] = NULL
      ,f.[gl_number_id_st_liab] = NULL
      ,f.[gl_number_id_lt_asset] = NULL
      ,f.[gl_number_id_lt_liab] = NULL
      ,f.[gl_number_id_item_st_asset] = NULL
      ,f.[gl_number_id_item_st_liab] = NULL
      ,f.[gl_number_id_item_lt_asset] = NULL
      ,f.[gl_number_id_item_lt_liab] = NULL
      ,f.[gl_number_id_aoci] = NULL
      ,f.[gl_number_id_pnl] = NULL
      ,f.[gl_number_id_set] = NULL
      ,f.[gl_number_id_cash] = NULL
      ,f.[oci_rollout_approach_value_id] = ocir.value_id
      ,f.[additional_test_range_from2] = a.additional_test_range_from2
      ,f.[additional_test_range_to2] = a.additional_test_range_to2
      ,f.[gl_number_id_inventory] = NULL
      ,f.[gl_number_id_expense] = NULL
      ,f.[options_premium_approach] = NULL
      ,f.[gl_number_id_gross_set] = NULL
      ,f.[gl_id_amortization] = NULL
      ,f.[gl_id_interest] = NULL
      ,f.[base_year_from] = NULL
      ,f.[base_year_to] = NULL 
      ,f.[subentity_name] = NULL 
      ,f.[subentity_desc] = NULL 
      ,f.[relationship_to_entity] = NULL
      ,f.[distinct_estimation_method] = NULL 
      ,f.[distinct_output_metrics] = NULL
      ,f.[distinct_foreign_country] = NULL
      ,f.[primary_naics_code_id] = NULL
      ,f.[secondary_naics_code_id] = NULL
      ,f.[organization_boundary_id] = NULL
      ,f.[sub_entity] = NULL
      ,f.[rollout_per_type] = rpt.value_id
      ,f.[first_day_pnl_threshold] = a.first_day_pnl_threshold
      ,f.[gl_first_day_pnl] = NULL
      ,f.[gl_id_st_tax_asset] = NULL
      ,f.[gl_id_st_tax_liab] = NULL
      ,f.[gl_id_lt_tax_asset] = NULL
      ,f.[gl_id_lt_tax_liab] = NULL
      ,f.[gl_id_tax_reserve] = NULL
      ,f.[update_user] = dbo.fnadbuser()
      ,f.[update_ts] = GETDATE()
      ,f.[gl_tenor_option] = CASE WHEN a.gl_tenor_option = ''Show All'' THEN ''a''
								  WHEN a.gl_tenor_option = ''Show Settlement Values Only'' THEN ''s''
								  WHEN a.gl_tenor_option = ''Show Current and Forward Month Only'' THEN ''c''
								  WHEN a.gl_tenor_option = ''Show Forward Month Only'' THEN ''f'' END
      ,f.[fun_cur_value_id] = fc.source_currency_id
      ,f.[gl_number_unhedged_der_st_asset] = NULL
      ,f.[gl_number_unhedged_der_lt_asset] = NULL
      ,f.[gl_number_unhedged_der_st_liab] = NULL 
      ,f.[gl_number_unhedged_der_lt_liab] = NULL 
      ,f.[node_level] = NULL
      ,f.[primary_counterparty_id] = scp.source_counterparty_id
      FROM ' + @import_temp_table_name + ' a
	  INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.parent_entity_name AND ph.entity_type_value_id = 525 AND ph.parent_entity_id IS NULL
  	  INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.fas_strategy_id AND ph2.entity_type_value_id = 526 AND ph2.parent_entity_id = ph.entity_id
	  INNER JOIN fas_strategy f ON f.fas_strategy_id = ph2.entity_id
	  LEFT JOIN static_data_value ac ON ac.code = a.hedge_type_value_id AND ac.type_id = 150
	  LEFT JOIN static_data_value mg ON mg.code = a.mes_gran_value_id AND mg.type_id = 175
	  LEFT JOIN static_data_value glg ON glg.code = a.gl_grouping_value_id AND glg.type_id = 350
	  LEFT JOIN static_data_value mcv ON mcv.code = a.mes_cfv_value_id AND mcv.type_id = 200
	  LEFT JOIN static_data_value ev ON ev.code = a.mes_cfv_values_value_id AND ev.type_id = 225
	  LEFT JOIN static_data_value rhf ON rhf.code = a.mismatch_tenor_value_id AND rhf.type_id = 250
	  LEFT JOIN static_data_value st ON st.code = a.strip_trans_value_id AND st.type_id = 625
	  LEFT JOIN static_data_value ocir ON ocir.code = a.oci_rollout_approach_value_id AND ocir.type_id = 500
	  LEFT JOIN static_data_value rpt ON rpt.code = a.rollout_per_type AND rpt.type_id = 520
	  LEFT JOIN source_currency fc ON fc.currency_id = a.fun_cur_value_id
	  LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
	  OUTER APPLY ( 
			SELECT eff_test_profile_id				  
			FROM fas_eff_hedge_rel_type hedge_rel
			INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
			INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
			INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
			where a.no_links_fas_eff_test_profile_id = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
	  ) rte
	  WHERE ph2.entity_type_value_id = 526 AND f.fas_strategy_id IS NOT NULL
	 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
	INSERT INTO [dbo].[fas_strategy]([fas_strategy_id], [source_system_id], [hedge_type_value_id], [fx_hedge_flag], [mes_gran_value_id], [gl_grouping_value_id], [no_links], 
	[no_links_fas_eff_test_profile_id], [mes_cfv_value_id], [mes_cfv_values_value_id], [mismatch_tenor_value_id], [strip_trans_value_id], [asset_liab_calc_value_id], [test_range_from], 
	[test_range_to], [additional_test_range_from], [additional_test_range_to], [include_unlinked_hedges], [include_unlinked_items], [gl_number_id_st_asset], [gl_number_id_st_liab], 
	[gl_number_id_lt_asset], [gl_number_id_lt_liab], [gl_number_id_item_st_asset], [gl_number_id_item_st_liab], [gl_number_id_item_lt_asset], [gl_number_id_item_lt_liab], [gl_number_id_aoci], 
	[gl_number_id_pnl], [gl_number_id_set], [gl_number_id_cash], [oci_rollout_approach_value_id], [additional_test_range_from2], [additional_test_range_to2], [gl_number_id_inventory], 
	[gl_number_id_expense], [options_premium_approach], [gl_number_id_gross_set], [gl_id_amortization], [gl_id_interest], [base_year_from], [base_year_to], [subentity_name], [subentity_desc], 
	[relationship_to_entity], [distinct_estimation_method], [distinct_output_metrics], [distinct_foreign_country], [primary_naics_code_id], [secondary_naics_code_id], 
	[organization_boundary_id], [sub_entity], [rollout_per_type], [first_day_pnl_threshold], [gl_first_day_pnl], [gl_id_st_tax_asset], [gl_id_st_tax_liab], [gl_id_lt_tax_asset], 
	[gl_id_lt_tax_liab], [gl_id_tax_reserve], [create_user], [create_ts], [update_user], [update_ts], [gl_tenor_option], [fun_cur_value_id], [gl_number_unhedged_der_st_asset], 
	[gl_number_unhedged_der_lt_asset], [gl_number_unhedged_der_st_liab], [gl_number_unhedged_der_lt_liab], [node_level], [primary_counterparty_id])
 
 	SELECT ph2.entity_id, a.[source_system_id], ac.value_id, CASE a.fx_hedge_flag WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END, mg.value_id, glg.value_id, 
	CASE a.no_links WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END, rte.eff_test_profile_id,  mcv.value_id, ev.value_id, rhf.value_id, st.value_id, 
	a.[asset_liab_calc_value_id], a.[test_range_from], a.[test_range_to], a.[additional_test_range_from], a.[additional_test_range_to], 
	CASE a.include_unlinked_hedges WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END, CASE a.include_unlinked_items WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END, 
	NULL [gl_number_id_st_asset], NULL [gl_number_id_st_liab], 	NULL [gl_number_id_lt_asset], NULL [gl_number_id_lt_liab], NULL [gl_number_id_item_st_asset], NULL [gl_number_id_item_st_liab], 
	NULL [gl_number_id_item_lt_asset], NULL [gl_number_id_item_lt_liab], NULL [gl_number_id_aoci], NULL [gl_number_id_pnl], NULL [gl_number_id_set], NULL [gl_number_id_cash], 
	ocir.value_id [oci_rollout_approach_value_id], a.additional_test_range_from2, a.additional_test_range_to2, NULL [gl_number_id_inventory], NULL [gl_number_id_expense], 
	NULL [options_premium_approach], NULL [gl_number_id_gross_set], NULL [gl_id_amortization], NULL [gl_id_interest], NULL [base_year_from], NULL [base_year_to], NULL [subentity_name], 
	NULL [subentity_desc], NULL [relationship_to_entity], NULL [distinct_estimation_method], NULL [distinct_output_metrics], NULL [distinct_foreign_country], NULL [primary_naics_code_id], 
	NULL [secondary_naics_code_id], NULL [organization_boundary_id], NULL [sub_entity], rpt.value_id, a.first_day_pnl_threshold, NULL [gl_first_day_pnl], 
	NULL [gl_id_st_tax_asset], NULL [gl_id_st_tax_liab], NULL [gl_id_lt_tax_asset], NULL [gl_id_lt_tax_liab], NULL [gl_id_tax_reserve], dbo.fnadbuser() [create_user], GETDATE() [create_ts], 
	NULL [update_user], NULL [update_ts], 
	CASE WHEN a.gl_tenor_option = ''Show All'' THEN ''a''
		 WHEN a.gl_tenor_option = ''Show Settlement Values Only'' THEN ''s''
		 WHEN a.gl_tenor_option = ''Show Current and Forward Month Only'' THEN ''c''
		 WHEN a.gl_tenor_option = ''Show Forward Month Only'' THEN ''f'' END, 
	fc.source_currency_id [fun_cur_value_id], NULL [gl_number_unhedged_der_st_asset], NULL [gl_number_unhedged_der_lt_asset], 
	NULL [gl_number_unhedged_der_st_liab], NULL [gl_number_unhedged_der_lt_liab], NULL [node_level], scp.source_counterparty_id [primary_counterparty_id]

   ' 
   SET @sql += '  FROM ' + @import_temp_table_name + ' a
	  INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.parent_entity_name AND ph.entity_type_value_id = 525 AND ph.parent_entity_id IS NULL
  	  INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.fas_strategy_id AND ph2.entity_type_value_id = 526 AND ph2.parent_entity_id = ph.entity_id
	  LEFT JOIN static_data_value ac ON ac.code = a.hedge_type_value_id AND ac.type_id = 150
	  LEFT JOIN static_data_value mg ON mg.code = a.mes_gran_value_id AND mg.type_id = 175
	  LEFT JOIN static_data_value glg ON glg.code = a.gl_grouping_value_id AND glg.type_id = 350
	  LEFT JOIN static_data_value mcv ON mcv.code = a.mes_cfv_value_id AND mcv.type_id = 200
	  LEFT JOIN static_data_value ev ON ev.code = a.mes_cfv_values_value_id AND ev.type_id = 225
	  LEFT JOIN static_data_value rhf ON rhf.code = a.mismatch_tenor_value_id AND rhf.type_id = 250
	  LEFT JOIN static_data_value st ON st.code = a.strip_trans_value_id AND st.type_id = 625
	  LEFT JOIN static_data_value ocir ON ocir.code = a.oci_rollout_approach_value_id AND ocir.type_id = 500
	  LEFT JOIN static_data_value rpt ON rpt.code = a.rollout_per_type AND rpt.type_id = 520
	  LEFT JOIN source_currency fc ON fc.currency_id = a.fun_cur_value_id
	  LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
	  OUTER APPLY (		
			SELECT eff_test_profile_id				  
			FROM fas_eff_hedge_rel_type hedge_rel
			INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
			INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
			INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
			WHERE a.no_links_fas_eff_test_profile_id = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
	  ) rte
		LEFT JOIN fas_strategy f ON f.fas_strategy_id = ph2.entity_id
		WHERE ph2.entity_type_value_id = 526 AND f.fas_strategy_id IS NULL
	'
	EXEC(@sql)

END

IF @table_name = 'ixp_book_template'
BEGIN
	EXEC ('INSERT INTO #temp_tot_count
 	       SELECT COUNT(*) AS totcount,
 	              '''+ @table_name+'''
 	       FROM   '+@import_temp_table_name)
	
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Data Repetition'',
 				 ''Data repetition found for column : Subsidiary, Book. No of times: CAST(b.notimes AS NVARCHAR).'',
 				 ''Please check your Data'',
 				 a.import_file_name
 		  FROM   '+ @import_temp_table_name + ' a
           INNER JOIN (
               SELECT name, parent_entity_name, COUNT(*) notimes
               FROM   '+ @import_temp_table_name + '
               GROUP BY name, parent_entity_name
               HAVING COUNT(*) > 1
               ) b
           ON  a.name = b.name AND a.parent_entity_name = b.parent_entity_name')
	
	-- Missing value
  	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Import Data'',
 				 '''+ @table_name + ''',
 				 ''Missing Value'',
 				 ''Data missing for column : Subsidiary, Strategy or Book.'',
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      WHERE a.name IS NULL OR a.parent_entity_name IS NULL OR a.strategy_name IS NULL')
        
	-- Invalid Data
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Error'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: Subsidiary or Strategy.'',
 				 ''Please check your Data'',
 				 a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
 	      LEFT JOIN portfolio_hierarchy ph_strategy ON a.parent_entity_name = ph_strategy.entity_name AND ph_strategy.entity_type_value_id = 525
		  LEFT JOIN portfolio_hierarchy ph_subsidiary ON a.strategy_name = ph_subsidiary.entity_name AND ph_subsidiary.entity_type_value_id = 526
		  WHERE ph_strategy.entity_id IS NULL OR ph_subsidiary.entity_id IS NULL')
	
	-- warning for invalid value in no_links_fas_eff_test_profile_id and legal_entity
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		  SELECT a.temp_id,
 				 '''+ @process_id + ''',
 				 ''Warning'',
 				 ''Invalid Data'',
 				 '''+ @table_name + ''',
 				 ''Invalid Data'',
 				 ''Data value not found for column: No Link Relationship Type or Legal Entity.'',
 				 ''Please check your Data'',
 				 a.import_file_name
 	      FROM   ' + @import_temp_table_name + ' a
		  OUTER APPLY(
				SELECT eff_test_profile_id				  
				FROM fas_eff_hedge_rel_type hedge_rel
				INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
				INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
				INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
				WHERE a.no_links_fas_eff_test_profile_id = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
			) rte
			OUTER APPLY ( 
				SELECT sle.source_legal_entity_id					
				FROM  source_legal_entity sle 
				INNER JOIN source_System_Description ssd
					ON  ssd.source_System_id = sle.source_System_id
				WHERE a.legal_entity = sle.legal_entity_Name + CASE WHEN ssd.source_System_id = 2 THEN '''' ELSE ''.'' + ssd.source_System_Name END
			 ) le
			WHERE (rte.eff_test_profile_id IS NULL
					AND a.no_links_fas_eff_test_profile_id IS NOT NULL)
				OR (le.source_legal_entity_id IS NULL
					AND a.legal_entity IS NOT NULL)
 	      ')

 	-- Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE a
 		  FROM #import_status
 		  INNER JOIN ' + @import_temp_table_name + ' a 
		  ON #import_status.temp_id = a.temp_id
		  WHERE error_code = ''error'''
		)

	SET @SQL = 'INSERT INTO portfolio_hierarchy(entity_name, entity_type_value_id, hierarchy_level, parent_entity_id)
				SELECT name, 527, 0, p2.entity_id FROM ' + @import_temp_table_name + ' a
				INNER JOIN portfolio_hierarchy p1 ON p1.entity_name = a.parent_entity_name AND p1.entity_type_value_id = 525 AND p1.hierarchy_level = 2
				INNER JOIN portfolio_hierarchy p2 ON p2.entity_name = a.strategy_name AND p2.entity_type_value_id = 526 AND p2.hierarchy_level = 1
				LEFT JOIN portfolio_hierarchy p3 ON p3.entity_name = a.name AND p3.entity_type_value_id = 527 AND p3.hierarchy_level = 0 AND p3.parent_entity_id = p2.entity_id
				WHERE p3.entity_id IS NULL
	'
	EXEC(@sql)

SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  
UPDATE f

 SET  f.[no_link] = CASE a.no_link WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[no_links_fas_eff_test_profile_id] = rte.eff_test_profile_id
      ,f.[gl_number_id_st_asset] = NULL
      ,f.[gl_number_id_st_liab] = NULL
      ,f.[gl_number_id_lt_asset] = NULL
      ,f.[gl_number_id_lt_liab] = NULL
      ,f.[gl_number_id_item_st_asset] = NULL
      ,f.[gl_number_id_item_st_liab] = NULL
      ,f.[gl_number_id_item_lt_asset] = NULL
      ,f.[gl_number_id_item_lt_liab] = NULL
      ,f.[gl_number_id_aoci] = NULL
      ,f.[gl_number_id_pnl] = NULL
      ,f.[gl_number_id_set] = NULL
      ,f.[gl_number_id_cash] = NULL
      ,f.[gl_number_id_inventory] = NULL
      ,f.[gl_number_id_expense] = NULL
      ,f.[gl_number_id_gross_set] = NULL
      ,f.[gl_id_amortization] = NULL
      ,f.[gl_id_interest] = NULL
      ,f.[convert_uom_id] = su.source_uom_id
      ,f.[cost_approach_id] = ca.value_id
      ,f.[gl_id_st_tax_asset] = NULL
      ,f.[gl_id_st_tax_liab] = NULL
      ,f.[gl_id_lt_tax_asset] = NULL
      ,f.[gl_id_lt_tax_liab] = NULL
      ,f.[gl_id_tax_reserve] = NULL
      ,f.[update_user] = dbo.fnadbuser()
      ,f.[update_ts] = GETDATE()
      ,f.[legal_entity] = le.source_legal_entity_id
      ,f.[tax_perc] = a.tax_perc
      ,f.[hedge_item_same_sign] = CASE a.hedge_item_same_sign WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END
      ,f.[fun_cur_value_id] = fc.source_currency_id
      ,f.[gl_number_unhedged_der_st_asset] = NULL
      ,f.[gl_number_unhedged_der_lt_asset] = NULL
      ,f.[gl_number_unhedged_der_st_liab] = NULL
      ,f.[gl_number_unhedged_der_lt_liab] = NULL
      ,f.[hedge_type_value_id] = NULL
      ,f.[accounting_type] = ac.value_id
      ,f.[gl_first_day_pnl] = NULL
      ,f.[primary_counterparty_id] = scp.source_counterparty_id

      FROM ' + @import_temp_table_name + ' a
	  INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.parent_entity_name AND ph.entity_type_value_id = 525
	  INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.strategy_name AND ph2.entity_type_value_id = 526 AND ph2.parent_entity_id = ph.entity_id
  	  INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.name AND ph3.entity_type_value_id = 527 AND ph3.parent_entity_id = ph2.entity_id
	  INNER JOIN fas_books f ON f.fas_book_id = ph3.entity_id
	  LEFT JOIN source_currency fc ON fc.currency_id = a.fun_cur_value_id
	  LEFT JOIN static_data_value ac ON ac.code = a.accounting_type AND ac.type_id = 150
	  LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
	  LEFT JOIN static_data_value ca ON ca.code = a.cost_approach_id AND ca.type_id = 950
	  LEFT JOIN source_uom su ON su.uom_id = a.convert_uom_id
	  OUTER APPLY ( 
			SELECT eff_test_profile_id				  
			FROM fas_eff_hedge_rel_type hedge_rel
			INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
			INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
			INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
			WHERE a.no_links_fas_eff_test_profile_id = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
	  ) rte
	  OUTER APPLY ( 
			SELECT sle.source_legal_entity_id					
			FROM  source_legal_entity sle 
			INNER JOIN source_System_Description ssd
				ON  ssd.source_System_id = sle.source_System_id
			WHERE a.legal_entity = sle.legal_entity_Name + CASE WHEN ssd.source_System_id = 2 THEN '''' ELSE ''.'' + ssd.source_System_Name END
	  ) le
	 	'
	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
	INSERT INTO [dbo].[fas_books]([fas_book_id], [no_link], [no_links_fas_eff_test_profile_id], [gl_number_id_st_asset], [gl_number_id_st_liab], [gl_number_id_lt_asset], 
	[gl_number_id_lt_liab], [gl_number_id_item_st_asset], [gl_number_id_item_st_liab], [gl_number_id_item_lt_asset], [gl_number_id_item_lt_liab], [gl_number_id_aoci], 
	[gl_number_id_pnl], [gl_number_id_set], [gl_number_id_cash], [gl_number_id_inventory], [gl_number_id_expense], [gl_number_id_gross_set], [gl_id_amortization], [gl_id_interest], 
	[convert_uom_id], [cost_approach_id], [gl_id_st_tax_asset], [gl_id_st_tax_liab], [gl_id_lt_tax_asset], [gl_id_lt_tax_liab], [gl_id_tax_reserve], [create_user], [create_ts], 
	[update_user], [update_ts], [legal_entity], [tax_perc], [hedge_item_same_sign], [fun_cur_value_id], [gl_number_unhedged_der_st_asset], [gl_number_unhedged_der_lt_asset], 
	[gl_number_unhedged_der_st_liab], [gl_number_unhedged_der_lt_liab], [hedge_type_value_id], [accounting_type], [gl_first_day_pnl], [primary_counterparty_id])
 
 	SELECT ph3.entity_id, CASE a.no_link WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END [no_link], rte.eff_test_profile_id, NULL [gl_number_id_st_asset], NULL [gl_number_id_st_liab], NULL [gl_number_id_lt_asset], 
	NULL [gl_number_id_lt_liab], NULL [gl_number_id_item_st_asset], NULL [gl_number_id_item_st_liab], NULL [gl_number_id_item_lt_asset], NULL [gl_number_id_item_lt_liab], 
	NULL [gl_number_id_aoci], NULL [gl_number_id_pnl], NULL [gl_number_id_set], NULL [gl_number_id_cash], NULL [gl_number_id_inventory], NULL [gl_number_id_expense], 
	NULL [gl_number_id_gross_set], NULL [gl_id_amortization], NULL [gl_id_interest], su.source_uom_id [convert_uom_id], ca.value_id [cost_approach_id], NULL [gl_id_st_tax_asset], 
	NULL [gl_id_st_tax_liab], NULL [gl_id_lt_tax_asset], NULL [gl_id_lt_tax_liab], NULL [gl_id_tax_reserve], dbo.fnadbuser() [create_user], GETDATE() [create_ts], NULL [update_user], 
	NULL [update_ts], le.source_legal_entity_id, a.tax_perc, CASE a.hedge_item_same_sign WHEN ''No'' THEN ''n'' WHEN ''Yes'' THEN ''y'' END [hedge_item_same_sign], fc.source_currency_id [fun_cur_value_id], NULL [gl_number_unhedged_der_st_asset], 
	NULL [gl_number_unhedged_der_lt_asset], NULL [gl_number_unhedged_der_st_liab], NULL [gl_number_unhedged_der_lt_liab], NULL [hedge_type_value_id], ac.value_id [accounting_type], 
	NULL [gl_first_day_pnl], scp.source_counterparty_id [primary_counterparty_id]

     FROM ' + @import_temp_table_name + ' a
	  INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.parent_entity_name AND ph.entity_type_value_id = 525 AND ph.parent_entity_id IS NULL
  	  INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.strategy_name AND ph2.entity_type_value_id = 526 AND ph2.parent_entity_id = ph.entity_id
	  INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.name AND ph3.entity_type_value_id = 527 AND ph3.parent_entity_id = ph2.entity_id
	  LEFT JOIN source_currency fc ON fc.currency_id = a.fun_cur_value_id
	  LEFT JOIN static_data_value ac ON ac.code = a.accounting_type AND ac.type_id = 150
	  LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
	  LEFT JOIN static_data_value ca ON ca.code = a.cost_approach_id AND ca.type_id = 950
	  LEFT JOIN source_uom su ON su.uom_id = a.convert_uom_id
	  OUTER APPLY ( 
			SELECT eff_test_profile_id				  
			FROM fas_eff_hedge_rel_type hedge_rel
			INNER JOIN portfolio_hierarchy book ON book.entity_id = hedge_rel.fas_book_id AND book.hierarchy_level = 0
			INNER JOIN portfolio_hierarchy stra ON stra.entity_id = book.parent_entity_id AND stra.hierarchy_level = 1
			INNER JOIN portfolio_hierarchy sub ON sub.entity_id = stra.parent_entity_id AND sub.hierarchy_level = 2
			WHERE a.no_links_fas_eff_test_profile_id = eff_test_name + '': '' + sub.entity_name + ''|'' + stra.entity_name + ''|'' + book.entity_name 
	  ) rte
	  OUTER APPLY ( 
			SELECT sle.source_legal_entity_id					
			FROM  source_legal_entity sle 
			INNER JOIN source_System_Description ssd
				ON  ssd.source_System_id = sle.source_System_id
			WHERE a.legal_entity = sle.legal_entity_Name + CASE WHEN ssd.source_System_id = 2 THEN '''' ELSE ''.'' + ssd.source_System_Name END
	  ) le
		LEFT JOIN fas_books f ON f.fas_book_id = ph3.entity_id
		WHERE ph3.entity_type_value_id = 527 AND f.fas_book_id IS NULL
'
EXEC(@sql)

END

IF @table_name = 'ixp_sub_book_template'
BEGIN           
 	EXEC ('
		INSERT INTO #temp_tot_count
 	    SELECT COUNT(*) AS totcount, ''' + @table_name + '''
		FROM ' + @import_temp_table_name
	)
 	
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Import Data'', ''' + @table_name + ''', ''Data Repetition'', ''Data repetition found for column : Sub Book Name. No of times: CAST(b.notimes AS NVARCHAR).'', ''Please check your Data'', a.import_file_name
 	      FROM   '+@import_temp_table_name + ' a
           INNER JOIN (
               SELECT logical_name, COUNT(*) notimes
               FROM   '+ @import_temp_table_name+'
			GROUP BY logical_name HAVING COUNT(*) > 1
		) b ON  a.logical_name = b.logical_name
	')

	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Import Data'', ''' + @table_name + ''', ''Data Repetition'', ''Data repetition found for column : Tag1-4, Effective Date and End Date. No of times: CAST(b.notimes AS NVARCHAR).'', ''Please check your Data'', a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
 		  INNER JOIN (
                   SELECT source_system_book_id1, source_system_book_id2, source_system_book_id3, source_system_book_id4, effective_start_date, end_date, COUNT(1) notimes
 				  FROM ' + @import_temp_table_name + '
			GROUP BY source_system_book_id1, source_system_book_id2, source_system_book_id3, source_system_book_id4, effective_start_date, end_date HAVING COUNT(1) > 1
 		) b ON a.source_system_book_id1 = b.source_system_book_id1
			AND a.source_system_book_id2 = b.source_system_book_id2
			AND a.source_system_book_id3 = b.source_system_book_id3
			AND a.source_system_book_id4 = b.source_system_book_id4
			AND a.effective_start_date = b.effective_start_date
			AND a.end_date = b.end_date
			')
	
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Import Data'', ''' + @table_name + ''', ''Data Error'', ''Column : ''''Sub Book'''' value : '''''' + a.logical_name + '''''' already used by another Sub Book.'', ''Please check your Data'', a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.Subsidiary
			AND ph.entity_type_value_id = 525
		INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.Strategy
			AND ph2.entity_type_value_id = 526
			AND ph2.parent_entity_id = ph.entity_id
		INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.book
			AND ph3.entity_type_value_id = 527
			AND ph3.parent_entity_id = ph2.entity_id
	  INNER JOIN source_book sb1 ON sb1.source_book_name = a.source_system_book_id1
		LEFT JOIN static_data_value fd ON fd.code = a.fas_deal_type_value_id
			AND fd.type_id = 400
	  LEFT JOIN source_system_book_map f ON f.fas_book_id = ph3.entity_id 
	  LEFT JOIN source_system_book_map f1 ON f1.logical_name = a.logical_name
		WHERE f.book_deal_type_map_id IS NULL
			AND f1.book_deal_type_map_id IS NOT NULL
			')  

	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Import Data'', ''' + @table_name + ''', ''Missing Value'', ''Data missing for column : '' +
			   CASE WHEN a.logical_name IS NULL THEN ''Logical Name'' 
				 WHEN a.fas_deal_type_value_id IS NULL THEN ''Transaction Type'' 
				 WHEN a.Subsidiary IS NULL THEN ''Subsidiary'' 
				 WHEN a.Strategy IS NULL THEN ''Strategy'' 
				 WHEN a.book IS NULL THEN ''Book'' 
				 END,
 				''Please check your Data'',
 				a.import_file_name
		  FROM '+@import_temp_table_name + ' a
		WHERE a.Subsidiary IS NULL
			OR a.Strategy IS NULL
			OR a.book IS NULL
			OR a.logical_name IS NULL
			OR a.fas_deal_type_value_id IS NULL
	')

	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Invalid Data'', ''' + @table_name + ''', ''Invalid Data'', ''Data not found for column: Transaction Type.'', ''Please check your Data'', a.import_file_name
		  FROM   '+@import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv ON a.fas_deal_type_value_id = sdv.code
			AND sdv.type_id = 400
		  WHERE sdv.value_id IS NULL
		  ')

	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Invalid Data'', ''' + @table_name + ''', ''Invalid Data'', ''Data not found for column: Strategy, Subsidiary or Book. Details:- [<b>Subsidiary:</b> '' + a.Subsidiary + ''] [<b>Strategy:</b> '' + a.Strategy + ''] [<b>Book</b>: '' + a.Book + '']'', ''Please check your Data'', a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = a.Subsidiary
			AND ph.entity_type_value_id = 525
		LEFT JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.Strategy
			AND ph2.entity_type_value_id = 526
			AND ph2.parent_entity_id = ph.entity_id
  		LEFT JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.book
			AND ph3.entity_type_value_id = 527
			AND ph3.parent_entity_id = ph2.entity_id
 		WHERE ph.entity_id IS NULL
			OR ph2.entity_id IS NULL
			OR ph3.entity_id IS NULL
	')	
	-- combination of tag
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT a.temp_id, ''' + @process_id + ''', ''Error'', ''Invalid Data'', ''' + @table_name + ''', ''Invalid Data'', 
			''The combination of tagging fields: Tag1, Tag2, Tag3 and Tag4 | Values: '' + a.source_system_book_id1 + '', '' + a.source_system_book_id2 + '', '' + a.source_system_book_id3 + '' and '' + a.source_system_book_id4 + '' already exists.'', 
			''Please check your Data'', 
			a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN source_book sb1 ON sb1.source_system_book_id = a.source_system_book_id1
			AND sb1.source_system_book_type_value_id = 50
		LEFT JOIN source_book sb2 ON sb2.source_system_book_id = a.source_system_book_id2
			AND sb2.source_system_book_type_value_id = 51
		LEFT JOIN source_book sb3 ON sb3.source_system_book_id = a.source_system_book_id3
			AND sb3.source_system_book_type_value_id = 52
		LEFT JOIN source_book sb4 ON sb4.source_system_book_id = a.source_system_book_id4
			AND sb4.source_system_book_type_value_id = 53
		LEFT JOIN source_system_book_map ssbm ON ssbm.logical_name = a.logical_name
		LEFT JOIN source_system_book_map f 
			ON f.source_system_book_id1 = sb1.source_book_id
			AND f.source_system_book_id2 = ISNULL(sb2.source_book_id, -2)
			AND f.source_system_book_id3 = ISNULL(sb3.source_book_id, -3)
			AND f.source_system_book_id4 = ISNULL(sb4.source_book_id, -4)
		WHERE ( f.book_deal_type_map_id IS NOT NULL
		AND ssbm.book_deal_type_map_id <> f.book_deal_type_map_id)
		OR (
		ssbm.book_deal_type_map_id IS NULL
		AND f.book_deal_type_map_id IS NOT NULL
		)
	')	
	

 	EXEC ('
		DELETE a
 		  FROM #import_status
 		  INNER JOIN ' + @import_temp_table_name + ' a 
		  ON #import_status.temp_id = a.temp_id
	')
	
	--if tags and groups are not present in the source book and static data then insert	
	EXEC('
		IF NOT EXISTS (SELECT 1 FROM ' + @import_temp_table_name + ' a INNER JOIN source_book sb ON sb.source_system_book_id = a.source_system_book_id1 AND sb.source_system_book_type_value_id = 50)
		BEGIN
			INSERT INTO source_book (source_system_id, source_system_book_id, source_system_book_type_value_id, source_book_name, source_book_desc)
			SELECT DISTINCT 2, source_system_book_id1, 50, source_system_book_id1, source_system_book_id1 FROM ' + @import_temp_table_name + '
		END

		IF NOT EXISTS (SELECT 1 FROM ' + @import_temp_table_name + ' a INNER JOIN source_book sb ON sb.source_system_book_id = a.source_system_book_id2 AND sb.source_system_book_type_value_id = 51)
		BEGIN
			INSERT INTO source_book (source_system_id, source_system_book_id, source_system_book_type_value_id, source_book_name, source_book_desc)
			SELECT DISTINCT 2, source_system_book_id2, 51, source_system_book_id2, source_system_book_id2 FROM ' + @import_temp_table_name + '
		END

		IF NOT EXISTS (SELECT 1 FROM ' + @import_temp_table_name + ' a INNER JOIN source_book sb ON sb.source_system_book_id = a.source_system_book_id3 AND sb.source_system_book_type_value_id = 52)
		BEGIN
			INSERT INTO source_book (source_system_id, source_system_book_id, source_system_book_type_value_id, source_book_name, source_book_desc)
			SELECT DISTINCT 2, source_system_book_id3, 52, source_system_book_id3, source_system_book_id3 FROM ' + @import_temp_table_name + '
		END

		IF NOT EXISTS (SELECT 1 FROM ' + @import_temp_table_name + ' a INNER JOIN source_book sb ON sb.source_system_book_id = a.source_system_book_id4 AND sb.source_system_book_type_value_id = 53)
		BEGIN
			INSERT INTO source_book (source_system_id, source_system_book_id, source_system_book_type_value_id, source_book_name, source_book_desc)
			SELECT DISTINCT 2, source_system_book_id4, 53, source_system_book_id4, source_system_book_id4 FROM ' + @import_temp_table_name + '
		END

		INSERT INTO static_data_value (type_id, code, description)
		SELECT DISTINCT 31000, a.sub_book_group1, a.sub_book_group1 FROM ' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.sub_book_group1 AND sdv.type_id = 31000
		WHERE sdv.value_id IS NULL
			AND a.sub_book_group1 IS NOT NULL
		
		INSERT INTO static_data_value (type_id, code, description)
		SELECT DISTINCT 31100, a.sub_book_group2, a.sub_book_group2 FROM ' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.sub_book_group2 AND sdv.type_id = 31100
		WHERE sdv.value_id IS NULL
			AND a.sub_book_group2 IS NOT NULL
		
		INSERT INTO static_data_value (type_id, code, description)
		SELECT DISTINCT 31200, a.sub_book_group3, a.sub_book_group3 FROM ' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.sub_book_group3 AND sdv.type_id = 31200
		WHERE sdv.value_id IS NULL
			AND a.sub_book_group3 IS NOT NULL
		
		INSERT INTO static_data_value (type_id, code, description)
		SELECT DISTINCT 31300, a.sub_book_group4, a.sub_book_group4 FROM ' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv ON sdv.code = a.sub_book_group4 AND sdv.type_id = 31300
		WHERE sdv.value_id IS NULL
			AND a.sub_book_group4 IS NOT NULL
	')
	
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N'  
		UPDATE f
			SET [source_system_book_id1] = sb1.source_book_id,
				[source_system_book_id2] = ISNULL(sb2.source_book_id, -2),
				[source_system_book_id3] = ISNULL(sb3.source_book_id, -3),
				[source_system_book_id4] = ISNULL(sb4.source_book_id, -4),
				[fas_deal_type_value_id] = fd.value_id,
				[percentage_included] = a.percentage_included,
				[effective_start_date] = a.effective_start_date,
				[fas_deal_sub_type_value_id] = NULL,
				[update_user] = dbo.FNADBUser(),
				[update_ts] = GETDATE(),
				[end_date] = a.end_date,
				[sub_book_group1] = g1.value_id,
				[sub_book_group2] = g2.value_id,
				[sub_book_group3] = g3.value_id,
				[sub_book_group4] = g4.value_id,
				[primary_counterparty_id] = scp.source_counterparty_id
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.Subsidiary
			AND ph.entity_type_value_id = 525
		INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.Strategy
			AND ph2.entity_type_value_id = 526
			AND ph2.parent_entity_id = ph.entity_id
		INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.book
			AND ph3.entity_type_value_id = 527
			AND ph3.parent_entity_id = ph2.entity_id
		LEFT JOIN source_book sb1 ON sb1.source_system_book_id = a.source_system_book_id1
			AND sb1.source_system_book_type_value_id = 50
		LEFT JOIN source_book sb2 ON sb2.source_system_book_id = a.source_system_book_id2
			AND sb2.source_system_book_type_value_id = 51
		LEFT JOIN source_book sb3 ON sb3.source_system_book_id = a.source_system_book_id3
			AND sb3.source_system_book_type_value_id = 52
		LEFT JOIN source_book sb4 ON sb4.source_system_book_id = a.source_system_book_id4
			AND sb4.source_system_book_type_value_id = 53
		LEFT JOIN static_data_value fd ON fd.code = a.fas_deal_type_value_id
			AND fd.type_id = 400
		LEFT JOIN source_system_book_map f ON f.logical_name = a.logical_name
			AND f.source_system_book_id1 = sb1.source_book_id
			AND f.source_system_book_id2 = ISNULL(sb2.source_book_id, -2)
			AND f.source_system_book_id3 = ISNULL(sb3.source_book_id, -3)
			AND f.source_system_book_id4 = ISNULL(sb4.source_book_id, -4)
		LEFT JOIN static_data_value g1 ON g1.code = a.sub_book_group1
			AND g1.type_id = 31000
		LEFT JOIN static_data_value g2 ON g2.code = a.sub_book_group2
			AND g2.type_id = 31100
		LEFT JOIN static_data_value g3 ON g3.code = a.sub_book_group3
			AND g3.type_id = 31200
		LEFT JOIN static_data_value g4 ON g4.code = a.sub_book_group4
			AND g4.type_id = 31300
		LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
		WHERE f.book_deal_type_map_id IS NOT NULL
	'

	EXEC(@sql)

	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
		INSERT INTO [dbo].[source_system_book_map] (
			[fas_book_id], [source_system_book_id1], [source_system_book_id2], [source_system_book_id3], [source_system_book_id4], [fas_deal_type_value_id], 
			[percentage_included], [effective_start_date], [fas_deal_sub_type_value_id], [create_user], [create_ts], [end_date], [logical_name], 
			[sub_book_group1], [sub_book_group2], [sub_book_group3], [sub_book_group4], [primary_counterparty_id]
		)
		SELECT DISTINCT
			   ph3.entity_id, sb1.source_book_id, ISNULL(sb2.source_book_id, -2), ISNULL(sb3.source_book_id, -3), ISNULL(sb4.source_book_id, -4), fd.value_id,
			   a.percentage_included, a.effective_start_date, NULL fas_deal_sub_type_value_id, dbo.fnadbuser() [create_user], GETDATE() [create_ts], a.end_date,
			   a.logical_name, g1.value_id [sub_book_group1], g2.value_id [sub_book_group2], g3.value_id [sub_book_group3], g4.value_id [sub_book_group4],
			   scp.source_counterparty_id [primary_counterparty_id]
 		FROM ' + @import_temp_table_name + ' a
	    INNER JOIN portfolio_hierarchy ph ON ph.entity_name = a.Subsidiary
			AND ph.entity_type_value_id = 525
	    INNER JOIN portfolio_hierarchy ph2 ON ph2.entity_name = a.Strategy
			AND ph2.entity_type_value_id = 526
			AND ph2.parent_entity_id = ph.entity_id
  	    INNER JOIN portfolio_hierarchy ph3 ON ph3.entity_name = a.book
			AND ph3.entity_type_value_id = 527 AND ph3.parent_entity_id = ph2.entity_id
		INNER JOIN source_book sb1 ON sb1.source_system_book_id = a.source_system_book_id1 AND sb1.source_system_book_type_value_id = 50
		LEFT JOIN source_book sb2 ON sb2.source_system_book_id = a.source_system_book_id2 AND sb2.source_system_book_type_value_id = 51
		LEFT JOIN source_book sb3 ON sb3.source_system_book_id = a.source_system_book_id3 AND sb3.source_system_book_type_value_id = 52
		LEFT JOIN source_book sb4 ON sb4.source_system_book_id = a.source_system_book_id4 AND sb4.source_system_book_type_value_id = 53
		LEFT JOIN static_data_value fd ON fd.code = a.fas_deal_type_value_id
			AND fd.type_id = 400
		LEFT JOIN static_data_value g1 ON g1.code = a.sub_book_group1
			AND g1.type_id = 31000
		LEFT JOIN static_data_value g2 ON g2.code = a.sub_book_group2
			AND g1.type_id = 31100
		LEFT JOIN static_data_value g3 ON g3.code = a.sub_book_group3
			AND g1.type_id = 31200
		LEFT JOIN static_data_value g4 ON g4.code = a.sub_book_group4
			AND g1.type_id = 31300
		LEFT JOIN source_counterparty scp ON scp.counterparty_id = a.primary_counterparty_id
	    LEFT JOIN source_system_book_map f ON f.logical_name = a.logical_name
		WHERE f.book_deal_type_map_id IS NULL
	'

	EXEC(@sql)
END

--rec generator import
IF @table_name = 'ixp_source_facility_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
	        FROM   ' + @import_temp_table_name)

	IF @import_temp_table_name IS NOT NULL AND @job_name IS NULL
	BEGIN					
		EXEC('SELECT Book AS ''Book'',
				     Facility_Name as ''Facility Name'',
					 Facility_ID as ''Facility ID'',
					 Unit_ID as ''UNIT ID'',					 
					 Jurisdiction as ''Jurisdiction'',
					 [Facility_Owner] as ''Facility_Owner'',
					 start_Date as ''start_Date'',
					 Fuel_Type as ''Fuel_Type'',
					 Technology as ''Technology'',
					 Environment_Product as ''Environment_Product'',
					 Unit_Name as ''Unit_Name''
					 FROM '+@import_temp_table_name)
				
		RETURN
	END

	CREATE TABLE #temp_sourcefacility
	(
		Book                    INT,
		Sub                     INT,
		Facility_Name           NVARCHAR(300) COLLATE DATABASE_DEFAULT ,
		Facility_ID             NVARCHAR(100) COLLATE DATABASE_DEFAULT ,
		Unit_Name               NVARCHAR(300) COLLATE DATABASE_DEFAULT ,
		Unit_ID                 NVARCHAR(100) COLLATE DATABASE_DEFAULT ,
		Jurisdiction            INT,
		Facility_Owner          NVARCHAR(300) COLLATE DATABASE_DEFAULT ,
		[start_Date]            NVARCHAR(100) COLLATE DATABASE_DEFAULT ,
		[gen_state]             INT,
		Fuel_Type               INT,
		Technology              INT,
		Environment_Product     INT
	)



	-- Update the code as 'Error' if the mandatory fields are missing (NULL/Blank)

	CREATE TABLE #empty_columns(colname NVARCHAR(100) COLLATE DATABASE_DEFAULT , temp_id INT)

	EXEC('insert into #empty_columns(colname, temp_id) 
	select  ''Facility owner'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.[facility_owner], ''Xcel''), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Start Date'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.[start_date], ''2010-1-1''), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Technology'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.technology, Fuel_Type), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Book'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.book, ''NULL''), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Facility ID'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.Facility_ID, NULLIF(ISNULL(a.Unit_ID, ''NULL''), ''NULL'')), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Unit ID'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.Unit_ID, ''NULL''), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Jurisdiction'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.Jurisdiction, ''NULL''), ''NULL'') IS NULL GROUP BY temp_id
	UNION
	select  ''Unit Name'', temp_id FROM ' + @import_temp_table_name + ' a WHERE NULLIF(ISNULL(a.unit_name, ''NULL''), ''NULL'') IS NULL GROUP BY temp_id
		
	')
	
	EXEC('insert into #import_status(temp_id,process_id,Error_Code,Module,Source,type,[description],next_step) 
	SELECT e.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			e.colname + '' not provided.'', '' Please fill in '' + e.colname + '' column and re-import'' 
	FROM (SELECT MIN(temp_id) temp_id, colname FROM #empty_columns GROUP BY colname) e
	')
		

	EXEC('DELETE ' + @import_temp_table_name + '
	      FROM #import_status
	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id') 
	  
	  -- Error if the value does not exist in system
    		
 	EXEC('insert into #import_status(temp_id, process_id, Error_Code, Module, Source, type, [description], next_step) 
	select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			''Book: '' + a.book + '' does not exist.'',''Please check your book structure'' 
	FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN portfolio_hierarchy book(NOLOCK) ON book.entity_name = a.book
	WHERE book.entity_name IS NULL AND a.book IS NOT NULL
	')

 	EXEC('insert into #import_status(temp_id, process_id, Error_Code, Module, Source, type, [description], next_step) 
	select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			''Jurisdiction: '' + a.jurisdiction + '' does not exist.'',''Please check'' 
	FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN static_data_value sdv ON sdv.type_id = 10002 AND sdv.code = a.jurisdiction
	WHERE sdv.value_id IS NULL AND a.jurisdiction IS NOT NULL
	')	
	
 	EXEC('insert into #import_status(temp_id, process_id, Error_Code, Module, Source, type, [description], next_step) 
	select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			''Fuel Type: '' + ISNULL(a.fuel_type, '''') + '' does not exist.'',''Please check'' 
	FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN static_data_value sdv ON sdv.type_id = 10023 AND sdv.code = a.fuel_type
	WHERE sdv.value_id IS NULL AND a.fuel_type IS NOT NULL
	')	

 	EXEC('insert into #import_status(temp_id, process_id, Error_Code, Module, Source, type, [description], next_step) 
	select a.temp_id,'''+ @process_id+''',''Error'',''Import Data'','''+ @table_name+''',''Data Error'',
			''Technology: '' + ISNULL(a.technology,a.fuel_type) + '' does not exist.'',''Please check'' 
	FROM ' + @import_temp_table_name + ' a 
	LEFT JOIN static_data_value sdv ON sdv.code = ISNULL(a.technology,a.fuel_type)
	WHERE sdv.value_id IS NULL AND a.technology IS NOT NULL
	')	

	
	EXEC('DELETE ' + @import_temp_table_name + '
	      FROM #import_status
	      INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id') 
	     
	EXEC ('INSERT INTO #temp_sourcefacility (
						Book			,
						Sub			,
						Facility_Name	,
						Facility_ID	,
						Unit_Name		,
						Unit_ID		,
						Jurisdiction	,
						Facility_Owner	,
						[start_Date]	,
						[gen_state]	,
						Fuel_Type		,
						Technology		,	
						Environment_Product)
			SELECT ph.entity_id,
					ph2.entity_id,
					NULLIF(LTRIM(LTRIM(ISNULL(facility_name,  NULLIF(LTRIM(LTRIM(ISNULL(unit_name,''NULL''))),''NULL'') ))),''NULL''),
					CASE WHEN facility_id IS NULL THEN ''F '' ELSE '''' END + NULLIF(LTRIM(LTRIM(ISNULL(Facility_ID, NULLIF(LTRIM(LTRIM(ISNULL(Unit_ID,''NULL''))),''NULL'')))),''NULL''),
					NULLIF(LTRIM(LTRIM(unit_name)),''NULL''),
					NULLIF(LTRIM(LTRIM(Unit_ID)),''NULL''),
					sd_juris.value_id,
					NULLIF(LTRIM(LTRIM(ISNULL(Facility_Owner,''Xcel''))),''NULL''),
					CAST(NULLIF(LTRIM(LTRIM(ISNULL(start_Date,''2010-1-1''))),''NULL'') AS NVARCHAR),
					sd_state.value_id,
					sd_fuel.value_id,
					ISNULL(sd_tech.value_id,sd_fuel.value_id),
					sd_env.source_curve_def_id				
			FROM ' + @import_temp_table_name+'	 tmp
			LEFT JOIN portfolio_hierarchy ph ON ph.entity_name = LTRIM(RTRIM(tmp.book)) AND ph.hierarchy_level = 0
			LEFT JOIN portfolio_hierarchy ph1 ON ph.parent_entity_id = ph1.entity_id AND ph1.hierarchy_level = 1
			LEFT JOIN portfolio_hierarchy ph2 ON ph1.parent_entity_id = ph2.entity_id AND ph2.hierarchy_level = 2
			LEFT JOIN static_data_value sd_juris ON sd_juris.code=LTRIM(RTRIM(Jurisdiction)) AND sd_juris.type_id=10002
			LEFT JOIN static_data_value sd_state ON sd_state.code=LTRIM(RTRIM(Jurisdiction)) AND sd_state.type_id=10016
			LEFT JOIN static_data_value sd_fuel ON sd_fuel.code=LTRIM(RTRIM(Fuel_Type)) AND sd_fuel.type_id=10023
			LEFT JOIN static_data_value sd_tech ON sd_tech.code=LTRIM(RTRIM(Technology)) AND sd_tech.type_id=10009
			LEFT JOIN source_price_curve_def sd_env ON sd_env.curve_id=LTRIM(RTRIM(Environment_Product))')
	
	
	UPDATE rg
	SET [name] = ts.Unit_Name ,
		fas_book_id = ts.Book,
		legal_entity_value_id = ts.Sub,
		state_value_id = ts.Jurisdiction,
		[owner] = ts.Facility_Owner,
		first_gen_date = ts.[start_Date],
		fuel_value_id = ts.Fuel_Type,
		technology = ts.Technology,
		source_curve_def_id = ts.Environment_Product ,
		gen_state_value_id = ts.gen_state,
		facility_name = ts.Facility_Name,
		id = ts.Facility_ID,
		code = ts.Unit_ID
	FROM #temp_sourcefacility ts
	--INNER JOIN 	rec_generator rg ON ts.Facility_ID = rg.[id] AND ts.Unit_ID = rg.code
	INNER JOIN 	rec_generator rg ON ts.Unit_Name = rg.name
	
			
	INSERT INTO rec_generator([name],id,code,fas_book_id,legal_entity_value_id,state_value_id,[owner],first_gen_date,fuel_value_id,
								technology,source_curve_def_id,gen_state_value_id,registered,generator_type,facility_name)
	SELECT ts.Unit_Name,
		    ts.Facility_ID,
		    ts.Unit_ID,
		    ts.Book,
		    ts.Sub,
		    ts.Jurisdiction,
		    ts.Facility_Owner,
		    ts.[start_Date],
		    ts.Fuel_Type,
		    ts.Technology,
		    ts.Environment_Product,
		    ts.gen_state,
		    'y',
		    'r',
		    ts.Facility_Name
	FROM   #temp_sourcefacility ts
	LEFT JOIN rec_generator rg ON rg.name = ts.Unit_Name
	--LEFT JOIN rec_generator rg ON  ts.Facility_ID = rg.[id] AND ts.Unit_ID = rg.code
	WHERE  rg.generator_id IS NULL
	
		
END

--Added for Certificate Import
IF @table_name = 'ixp_certificate'
BEGIN
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, '''+ @table_name +'''
		FROM ' + @import_temp_table_name
	)

	-- Validate Generator ID
	exec ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 			SELECT a.temp_id,
 				''' + @process_id + ''',
 				''Error'',
 				''Import Data'',
 				''' + @table_name + ''',
 				''Data Error'',
 				''Generator Id  :'' + ISNULL(a.production_installation_id , ''NULL'') + '' does not exist in System'',
 				''Please check your Data'',
 				a.import_file_name
 			FROM   ' + @import_temp_table_name + ' a
 			LEFT JOIN rec_generator AS rg ON  rg.Name = a.production_installation_id
 			WHERE rg.name IS NULL
 	')

	--delete invalid rows
	EXEC('
		DELETE ' + @import_temp_table_name + '
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id'
	)

	IF OBJECT_ID('tempdb..#final_temp','u') IS NOT NULL
		DROP TABLE #final_temp

	CREATE TABLE #final_temp (
		[source_deal_detail_id]		INT
		, [certificate_start_id]	NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
		, [certificate_end_id]		NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
		, [issue_date]				DATETIME
		, [expiry_date]				DATETIME
		, [year]					INT
		, [tier]					INT
		, [juridiction]				INT
		, [certification_entity]	NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
		, [volume]					FLOAT
	)
	
	EXEC('
		INSERT INTO #final_temp
		SELECT DISTINCT sdd.source_deal_detail_id [source_deal_detail_id]
			, a.certificate_start_id [certificate_start_id]
			, a.certificate_end_id [certificate_end_id]
			, CONVERT(DATETIME, CONVERT(NVARCHAR(10), a.issue_date, 103), 120) [issue_date]
			, CONVERT(DATETIME, CONVERT(NVARCHAR(10), a.expiry_date, 103), 120) [expiry_date]
			, NULL --datepart(year, sdd.term_start) [year]
			, sdvt.value_id [tier]
			, sdvj.value_id [juridiction]
			, sdvce.value_id [certification_entity]
			, a.quantity [quantity]
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN rec_generator rg
			ON rg.name = a.production_installation_id
		INNER JOIN source_deal_header sdh
			ON sdh.generator_id = rg.generator_id
		INNER JOIN source_deal_detail sdd
			ON sdh.source_deal_header_id = sdd.source_deal_header_id
		LEFT JOIN static_data_value sdvt
			ON a.tier = sdvt.code
		LEFT JOIN static_data_value sdvj
			ON a.juridiction = sdvj.code
			AND sdvj.type_id = 10002
		LEFT JOIN static_data_value sdvce
			ON a.certification_entity = sdvce.code
		WHERE sdh.[certificate] = ''y''
		AND sdd.term_start = CONVERT(DATETIME, CONVERT(NVARCHAR(10),a.production_start_date, 103), 120)
		AND sdd.term_end = CONVERT(DATETIME, CONVERT(NVARCHAR(10),a.production_end_date, 103), 120) - 1
		AND sdd.contract_expiration_date = CONVERT(DATETIME, CONVERT(NVARCHAR(10),a.expiry_date, 103), 120) - 1
	')

	--/*
	-- Update deal details deal_volume
	UPDATE sdd
	SET sdd.actual_volume = ft.volume,
		sdd.deal_volume = ft.volume
	FROM #final_temp ft
	INNER JOIN source_deal_detail sdd
		ON ft.source_deal_detail_id = sdd.source_deal_detail_id

	--The update on deal_volume triggers update on volume_left so additional update is required for volume_left and status
	UPDATE sdd SET sdd.volume_left	= ft.volume
		, sdd.status = 25004 -- Certified
	FROM #final_temp ft
	INNER JOIN source_deal_detail sdd
		ON ft.source_deal_detail_id = sdd.source_deal_detail_id
	--*/

	MERGE gis_certificate AS T
	USING #final_temp AS S
	ON (T.source_deal_header_id = S.source_deal_detail_id AND T.state_value_id = S.juridiction) 
	WHEN NOT MATCHED BY TARGET 
		THEN INSERT(
			source_deal_header_id
			, gis_certificate_number_from
			, gis_certificate_number_to
			, gis_cert_date
			, contract_expiration_date
			, year
			, tier_type
			, state_value_id
			, certification_entity
		)
		VALUES(
			S.source_deal_detail_id
			, S.certificate_start_id 
			, S.certificate_end_id
			, S.issue_date
			, S.[expiry_date]
			, S.[year]
			, S.[tier]				
			, S.juridiction		
			, S.certification_entity
		)
	WHEN MATCHED 
		THEN UPDATE SET T.gis_certificate_number_from	= S.certificate_start_id
			, T.gis_certificate_number_to				= S.certificate_end_id
			, T.gis_cert_date							= S.issue_date
			, T.contract_expiration_date				= S.[expiry_date]
			, T.[year]									= S.[year]
			, T.tier_type								= S.[tier]	
			, T.certification_entity					= S.certification_entity;

END

IF @table_name = 'ixp_eligibility_mapping_template'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM ' + @import_temp_table_name)
	
	-- Generic Data Type Validate
	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''eligibility_mapping_template'', ''template_name'', ''template_name'')')
	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''jurisdiction_market'', ''a.jurisdiction_market = b.code AND b.type_id = 10002'', ''e''),
			(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''e'')
	')
		
	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'
	
	-- Data Missing Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 			  SELECT a.temp_id,
		  10001,
					  CASE 
						WHEN a.template_name IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Template Name'')
						WHEN a.jurisdiction_market IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Jurisdiction/Market'')
						WHEN a.tier IS NULL THEN
				dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Tier'')	
					  END
					  ,a.import_file_name
						FROM   '+ @import_temp_table_name + ' a
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE  #error_status.temp_id IS NULL
						  AND (a.template_name IS NULL
							   OR a.jurisdiction_market IS NULL
							   OR a.tier IS NULL
							)
				')

	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 			  SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Tier''), ''<column_value1>'', a.tier), ''<column_name>'', ''Jurisdiction''), ''<column_value>'', a.jurisdiction_market),
					a.import_file_name 
 					FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
					LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction_market AND sdv_jurisdiction.type_id = 10002 
					LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
					LEFT JOIN state_properties_details spd
						ON spd.state_value_id = sdv_jurisdiction.value_id
						AND spd.tier_id = sdv_tier.value_id
			WHERE #error_status.temp_id IS NULL
						AND spd.state_properties_details_id IS NULL 
			')
	
	EXEC('DELETE a
 	      FROM #error_status
			INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
			INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
			WHERE mlt.message_status = ''Error''
		')
	
	-- insert if not exists
	SET @sql = '
		INSERT INTO eligibility_mapping_template (template_name)
		SELECT a.template_name 
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN eligibility_mapping_template emt
			ON a.template_name = emt.template_name
		WHERE emt.template_id IS NULL
		GROUP BY a.template_name
		'
	EXEC(@sql)

	-- insert if not exists
	SET @sql = '
		INSERT INTO eligibility_mapping_template_detail(template_id, state_value_id, tier_id)
		SELECT emt.template_id, sdv_jm.value_id, sdv_tier.value_id
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN eligibility_mapping_template emt
			ON a.template_name = emt.template_name
		INNER JOIN static_data_value sdv_jm
			ON a.jurisdiction_market = sdv_jm.code AND sdv_jm.type_id = 10002
		INNER JOIN static_data_value sdv_tier
			ON a.tier = sdv_tier.code AND sdv_tier.type_id = 15000
		LEFT JOIN eligibility_mapping_template_detail emtd
			ON emt.template_id = emtd.template_id AND sdv_jm.value_id = emtd.state_value_id AND sdv_tier.value_id = emtd.tier_id
		WHERE emtd.template_detail_id IS NULL
		'
	EXEC(@sql)

END

IF @table_name = 'ixp_product_detail_template'
BEGIN
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''region'', ''a.region = b.code AND b.type_id = 11150'', ''w''),
			(''static_data_value'', ''jurisdiction'', ''a.jurisdiction = b.code AND b.type_id = 10002'', ''w''),
			(''static_data_value'', ''tier'', ''a.tier = b.code AND b.type_id = 15000'', ''w''),
			(''static_data_value'', ''technology'', ''a.technology = b.code AND b.type_id = 10009'', ''w''),
			(''static_data_value'', ''vintage'', ''a.vintage = b.code AND b.type_id = 10092'', ''w'')
	')
		
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'	
	
	-- Data Missing Validation
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10001,
			CASE 
				WHEN a.deal_id IS NULL THEN dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Deal ID'')
				WHEN a.in_or_not IS NULL THEN dbo.FNABuildNameValueXML('''', ''<column_name>'', ''In or Not'')
			END,
			a.import_file_name
			FROM   '+ @import_temp_table_name + ' a
			WHERE a.deal_id IS NULL 
				OR a.in_or_not IS NULL
			')
	
	-- Non-static data validate 
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10002,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''In or Not''), ''<column_value>'', a.in_or_not),
			a.import_file_name
			FROM   '+ @import_temp_table_name + ' a
				LEFT JOIN #error_status es ON es.temp_id = a.temp_id
			WHERE a.in_or_not NOT IN (''IN'', ''NOT'')
				AND NULLIF(a.in_or_not, '' '') IS NOT NULL
				AND es.temp_id IS NULL
			')

	-- Deal Validate
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
			10002,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Deal ID''), ''<column_value>'', a.deal_id),
			a.import_file_name
			FROM   '+ @import_temp_table_name + ' a
				LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
				LEFT JOIN #error_status es ON es.temp_id = a.temp_id
			WHERE sdh.source_deal_header_id IS NULL 
				AND es.temp_id IS NULL
			')

	-- Validation for  Jurisdiction and Tier mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 			  SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name1>'', ''Tier''), ''<column_value1>'', a.tier), ''<column_name>'', ''Jurisdiction''), ''<column_value>'', a.jurisdiction),
					a.import_file_name 
 					FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
			LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction AND sdv_jurisdiction.type_id = 10002 
			LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
			LEFT JOIN state_properties_details spd
				ON spd.state_value_id = sdv_jurisdiction.value_id
				AND spd.tier_id = sdv_tier.value_id
			WHERE #error_status.temp_id IS NULL
				AND spd.state_properties_details_id IS NULL AND a.tier IS NOT NULL AND a.jurisdiction IS NOT NULL
			')
	-- Validation for Tier and Technology mapping
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 			  SELECT a.temp_id,
			10011,
			dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''Technology''), ''<column_value>'', a.technology), ''<column_name1>'', ''Tier''),
					a.import_file_name 
 					FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
			LEFT JOIN static_data_value sdv_jurisdiction ON  sdv_jurisdiction.code = a.jurisdiction AND sdv_jurisdiction.type_id = 10002 
			LEFT JOIN static_data_value sdv_tier ON  sdv_tier.code = a.tier AND sdv_tier.type_id = 15000
			LEFT JOIN static_data_value sdv_tech ON a.technology = sdv_tech.code AND sdv_tech.type_id = 10009
			LEFT JOIN state_properties_details spd
				ON spd.state_value_id = sdv_jurisdiction.value_id
				AND spd.tier_id = sdv_tier.value_id
				AND spd.technology_id = sdv_tech.value_id
			WHERE #error_status.temp_id IS NULL 
				AND spd.state_properties_details_id IS NULL 
				AND a.jurisdiction IS NOT NULL 
				AND a.tier IS NOT NULL
				AND a.technology IS NOT NULL
			')

	-- delete from temp table all the invalid data
 	EXEC('DELETE a
 	      FROM #error_status 
			INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
			INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
			WHERE mlt.message_status = ''Error''
		')

	-- insert if not exists
	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' 
	INSERT INTO Gis_Product (source_deal_header_id, in_or_not, region_id, jurisdiction_id, tier_id, technology_id, vintage)
	SELECT sdh.source_deal_header_id
	, 
	CASE
		WHEN a.in_or_not = ''In'' THEN 1
		ELSE 0
	END
	[in_or_not]
	, sdv_region.value_id [region_id]
	, sdv_jur.value_id [jurisdiction_id]
	, sdv_tier.value_id [tier_id]
	, sdv_tech.value_id [technology_id]
	, sdv_vintage.value_id
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_deal_header sdh 
		ON a.deal_id = sdh.deal_id
	LEFT JOIN static_data_value sdv_region 
		ON a.region = sdv_region.code AND sdv_region.type_id = 11150
	LEFT JOIN static_data_value sdv_jur
		ON a.jurisdiction = sdv_jur.code AND sdv_jur.type_id = 10002
	LEFT JOIN static_data_value sdv_tier
		ON a.tier = sdv_tier.code AND sdv_tier.type_id = 15000
	LEFT JOIN static_data_value sdv_tech
		ON a.technology = sdv_tech.code AND sdv_tech.type_id = 10009
	LEFT JOIN static_data_value sdv_vintage
		ON a.vintage = sdv_vintage.code AND sdv_vintage.type_id = 10092
	LEFT JOIN Gis_Product gp	
		ON IIF(a.in_or_not = ''In'', 1, 0) = gp.in_or_not
		AND sdh.source_deal_header_id = gp.source_deal_header_id
		AND ISNULL(sdv_region.value_id, 0) = ISNULL(gp.region_id, 0)
		AND ISNULL(sdv_jur.value_id, 0) = ISNULL(gp.jurisdiction_id, 0)
		AND ISNULL(sdv_tier.value_id, 0) = ISNULL(gp.tier_id, 0)
		AND ISNULL(sdv_tech.value_id, 0) = ISNULL(gp.technology_id, 0)
		AND ISNULL(sdv_vintage.value_id, 0) = ISNULL(gp.vintage, 0)
	WHERE gp.source_product_number IS NULL
	'
	EXEC(@sql)

END

IF @table_name = 'ixp_storage_constraints_template'
BEGIN 
	--STEP 2
	/* update user date to sql date */

	EXEC('UPDATE a 
		SET effective_date = dd.sql_date_string  
		FROM ' + @import_temp_table_name + ' a 
		INNER JOIN #date_details dd 
			ON a.effective_date = dd.user_date 
	')
	/***END OF date update***/ 

	--STEP 3.1
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''code'', ''b.code = a.constraint_type'', ''e''),
			(''source_uom'', ''uom_id'', ''b.uom_id = a.uom'', ''e'')
	')
		
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'  

	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
		  10013,
		  ''
			{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.frequency + ''"
			}
		  '',
		  a.import_file_name
		  FROM  ' + @import_temp_table_name + ' a
          CROSS APPLY ( SELECT source_column_name 
                        FROM #source_file_column_table 
                        WHERE ixp_columns_name = ''frequency'' 
          ) scm
		  WHERE a.frequency NOT IN (''Daily'', ''d'')
	')

	EXEC('  
        DELETE ' + @import_temp_table_name + '  
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	') 

	-- UPDATE
	SET @sql = '
		UPDATE vsc
		SET vsc.value = ISNULL(a.value, vsc.value),
			vsc.uom = ISNULL(su.source_uom_id, vsc.uom)
			/* Commented because, effective date is now part of unique combination
			, vsc.effective_date = ISNULL(a.effective_date, vsc.effective_date)
			*/
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN general_assest_info_virtual_storage gaivs ON a.logical_name = gaivs.logical_name
		INNER JOIN static_data_value sdv_contype ON a.constraint_type = sdv_contype.code
			AND sdv_contype.type_id = 18600
		INNER JOIN source_uom su ON a.uom = su.uom_id
		INNER JOIN virtual_storage_constraint vsc ON vsc.general_assest_id = gaivs.general_assest_id
			AND sdv_contype.value_id = vsc.constraint_type
			AND vsc.effective_date = a.effective_date
	'
	EXEC(@sql)

	-- INSERT	
	SET @sql = '
		INSERT INTO virtual_storage_constraint (
			general_assest_id, constraint_type,	value, uom, frequency, effective_date
		)
		SELECT gaivs.general_assest_id,
			sdv_contype.value_id,
			a.value,
			su.source_uom_id,
			CASE WHEN a.frequency = ''Daily'' THEN ''d'' ELSE '''' END [frequency],
			a.effective_date
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN general_assest_info_virtual_storage gaivs ON a.logical_name = gaivs.logical_name
		INNER JOIN static_data_value sdv_contype ON a.constraint_type = sdv_contype.code
			AND sdv_contype.type_id = 18600
		INNER JOIN source_uom su ON a.uom = su.uom_id
		LEFT JOIN virtual_storage_constraint vsc ON vsc.general_assest_id = gaivs.general_assest_id
			AND sdv_contype.value_id = vsc.constraint_type
			AND vsc.effective_date = a.effective_date
		WHERE vsc.constraint_type IS NULL
	'
	EXEC(@sql)
END	


DECLARE @custom_temp_process_table NVARCHAR(300)

--Import Custome Tables
IF @table_name = 'ixp_custom_tables'
BEGIN
	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name +'''
 	        FROM ' + @import_temp_table_name)
		
	SET @custom_temp_process_table = dbo.FNAProcessTableName('custom_temp_import_data_table', @user_login_id, @process_id)
		
	IF OBJECT_ID( @custom_temp_process_table ) IS NOT NULL
	BEGIN
		EXEC('	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
 			SELECT  ROW_NUMBER() OVER(ORDER BY a.description ASC) AS ID, 
					a.process_id, 
					a.error_code, 
					a.[module], 
					a.[source], 
					a.[type], 
					a.[description], 
					a.[next_step], 
					a.[import_file_name]
 			FROM ' + @custom_temp_process_table + ' a
			')			
			
		-- Deleting the error data from the temporary table so reduce redundancy
		EXEC(' DELETE ' + @import_temp_table_name + '
				FROM #import_status
				INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id')
		
		--Drop custom process table for ixp_custom_tables after message generation		
		EXEC('DROP TABLE ' + @custom_temp_process_table)		
	END
		
END

IF @table_name = 'ixp_forecast_profile'
BEGIN
 	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''static_data_value'', ''profile_type'', ''b.code = a.profile_type AND b.[type_id] = 17500'', ''e''),
			(''static_data_value'', ''granularity'', ''b.code = a.granularity AND b.[type_id] = 978'', ''e''),
			(''source_uom'', ''uom_id'', ''b.uom_id = a.uom_id'', ''e'')
	')

	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	EXEC('  
        DELETE a 
        FROM   #error_status es 
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt
			ON mlt.message_number = es.error_number  
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''  
	')
	
	SET @sql = '
 		UPDATE fp
		SET profile_name = a.profile_name,			
			profile_type = sdv.value_id,
			granularity	= sdv1.value_id,
			uom_id = su.source_uom_id
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN forecast_profile AS fp
		    ON  a.profile_code = fp.external_id
		LEFT JOIN static_data_value AS sdv
		    ON  sdv.code = a.profile_type
		    AND sdv.[type_id] = 17500
		INNER JOIN static_data_value AS sdv1
		    ON  sdv1.code = a.granularity
		    AND sdv1.[type_id] = 978
		INNER JOIN source_uom su
			ON su.uom_id = a.uom_id
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND fp.profile_id IS NOT NULL
	'
	EXEC (@sql)	

	SET @sql = 
	    '
		INSERT INTO forecast_profile
		  (
		    external_id,
		    profile_name,
		    profile_type,
		    granularity,
		    uom_id
		  )
		SELECT a.profile_code,
		       a.profile_name,
		       sdv.value_id,
		       sdv1.value_id,
		       su.source_uom_id
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN forecast_profile AS fp
		    ON  a.profile_code = fp.external_id
		LEFT JOIN static_data_value AS sdv
		    ON  sdv.code = a.profile_type
		    AND sdv.[type_id] = 17500
		INNER JOIN static_data_value AS sdv1
		    ON  sdv1.code = a.granularity
		    AND sdv1.[type_id] = 978
		INNER JOIN source_uom su
			ON su.uom_id = a.uom_id
		LEFT JOIN #import_status
		    ON  a.temp_id = #import_status.temp_id
		WHERE  #import_status.temp_id IS NULL AND fp.profile_id IS NULL
		'
	EXEC (@sql)

END


--Added for Storage Asset Detail Import
IF @table_name = 'ixp_storage_asset_detail'
BEGIN
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, '''+ @table_name +'''
		FROM ' + @import_temp_table_name
	)

	-- Validation for Non existent Storage asset name
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Storage Asset Name: '' + ISNULL(a.storage_asset_name , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN storage_asset sa
			ON sa.asset_name = a.storage_asset_name
		WHERE sa.storage_asset_id IS NULL
	')
	--select @import_temp_table_name
	-- Validation for Non existent Contract
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT 
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Contract: '' + ISNULL(a.agreement , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN contract_group cg
			ON a.agreement = cg.contract_name
			AND contract_type_def_id = 38404
		WHERE cg.contract_name IS NULL
	')
	
	-- Validation for Non existent Storage Location
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Storage Location: '' + ISNULL(a.storage_location , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM  
		' + @import_temp_table_name + ' a
		LEFT JOIN source_minor_location sml
			ON sml.Location_Name = a.storage_location
		WHERE sml.source_minor_location_id IS NULL
	')

	
	-- Validation for Non existent Storage Type
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Storage Type: '' + ISNULL(a.storage_type , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON a.storage_type = sdv.code
			AND sdv.type_id = 18500
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Accounting Type
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Accounting Type: '' + ISNULL(a.accounting_type , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON a.accounting_type = sdv.code
			AND sdv.type_id = 45400
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Ownership Type
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Ownership Type: '' + ISNULL(a.ownership_type , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON a.ownership_type = sdv.code
			AND sdv.type_id = 45300
		WHERE sdv.value_id IS NULL
	')
	
	-- Validation for Non existent UOM
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''UOM: '' + ISNULL(a.volume_uom , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_uom su
			ON a.volume_uom = su.uom_name
		WHERE su.source_uom_id IS NULL
	')

	-- Validation for invalid Injection as Long
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Injection as Long: '' + ISNULL(a.injection_as_long , ''NULL'') + '' is invalid.'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.injection_as_long NOT IN (''yes'', ''no'')
	')

	-- Validation for invalid Include Product/Lot
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Include Product/Lot: '' + ISNULL(a.include_product_lot , ''NULL'') + '' is invalid.'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.include_product_lot NOT IN (''yes'', ''no'')
	')

	-- Validation for invalid Include Fees
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Include Fees: '' + ISNULL(a.include_fees , ''NULL'') + '' is invalid'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.include_fees NOT IN (''yes'', ''no'')
	')

	-- Validation for invalid Calculate MTM
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Calculate MTM: '' + ISNULL(a.calculate_mtm , ''NULL'') + '' is invalid'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.calculate_mtm NOT IN (''yes'', ''no'')
	')

	-- Validation for invalid include_non_standard_deals
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''include_non_standard_deals: '' + ISNULL(a.calculate_mtm , ''NULL'') + '' is invalid'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.calculate_mtm NOT IN (''yes'', ''no'')
	')

	--delete invalid rows
	EXEC('
		DELETE a
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a ON #import_status.temp_id = a.temp_id'
	)

	CREATE TABLE #temp_storage_asset_final (
		  storage_asset_id				NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, storage_location				INT
		, agreement						INT
		, logical_name					NVARCHAR(500) COLLATE DATABASE_DEFAULT
		, storage_type					INT
		, accounting_type				INT
		, ownership_type				INT
		, storage_capacity				FLOAT
		, volumn_uom					FLOAT
		, injection_template_id			INT
		, withdrawal_template_id		INT
		, injection_as_long				NCHAR(1) COLLATE DATABASE_DEFAULT
		, include_product_lot			NCHAR(1) COLLATE DATABASE_DEFAULT
		, include_fees					NCHAR(1) COLLATE DATABASE_DEFAULT
		, calculate_mtm					NCHAR(1) COLLATE DATABASE_DEFAULT
		, include_non_standard_deals	NCHAR(1) COLLATE DATABASE_DEFAULT
		, cost_currency					INT
		, general_assest_id				INT
	)


	--SELECT * FROM #import_status
	DECLARE @cost_currency INT
	select TOP 1 @cost_currency = source_currency_id from source_currency
	
	EXEC('
		INSERT INTO #temp_storage_asset_final (
			storage_asset_id
			, storage_location
			, agreement
			, logical_name
			, storage_type
			, accounting_type
			, ownership_type
			, storage_capacity
			, volumn_uom
			, injection_template_id
			, withdrawal_template_id
			, injection_as_long
			, include_product_lot
			, include_fees
			, calculate_mtm
			, include_non_standard_deals
			, cost_currency
			, general_assest_id
		)
		SELECT DISTINCT sa.storage_asset_id	[storage_asset_id]
			, sml.source_minor_location_id	[storage_location]
			, cg.contract_id [contract_id]		
			, a.logical_name [logical_name]
			, sdvst.value_id [storage_type]
			, sdvat.value_id [accounting_type]
			, sdvot.value_id [ownership_type]
			, a.storage_capacity [storage_capacity]
			, su.source_uom_id [volumn_uom]
			, sdhti.template_id [injection_template_id]
			, sdhtw.template_id [withdrawal_template_id]
			, IIF(a.injection_as_long = ''yes'', ''y'', ''n'')[injection_as_long]
			, IIF(a.include_product_lot = ''yes'', ''y'', ''n'')[include_product_lot]
			, IIF(a.include_fees = ''yes'', ''y'', ''n'')[include_fees]
			, IIF(a.calculate_mtm = ''yes'', ''y'', ''n'')[calculate_mtm]
			, IIF(a.include_non_standard_deals = ''yes'', ''y'', ''n'')[include_non_standard_deals]
			, ' + @cost_currency + ' [cost_currency]
			, gaivs.general_assest_id [general_assest_id]
		FROM
		' + @import_temp_table_name + ' a
		LEFT JOIN storage_asset sa
			ON a.storage_asset_name = sa.asset_name
		LEFT JOIN source_minor_location sml
			ON sml.Location_Name = a.storage_location
		LEFT JOIN contract_group cg
			ON a.agreement = cg.contract_name
			AND cg.contract_type_def_id = 38404
		LEFT JOIN static_data_value sdvst
			ON a.storage_type = sdvst.code
			AND sdvst.type_id = 18500
		LEFT JOIN static_data_value sdvat
			ON a.accounting_type = sdvat.code
			AND sdvat.type_id = 45400
		LEFT JOIN static_data_value sdvot
			ON a.ownership_type = sdvot.code
			AND sdvot.type_id = 45300
		LEFT JOIN source_uom su
			ON a.volume_uom = su.uom_name
		LEFT JOIN source_deal_header_template sdhti
			ON a.injection_template = sdhti.template_id
		LEFT JOIN source_deal_header_template sdhtw
			ON a.withdrawal_template = sdhtw.template_id
		LEFT JOIN general_assest_info_virtual_storage gaivs
			ON  cg.contract_id = gaivs.agreement
			AND sml.source_minor_location_id = gaivs.storage_location
	')
	--SELECT * FROM #temp_storage_asset_final
	--/*
	UPDATE gaivs 
	SET gaivs.storage_asset_id = tsaf.storage_asset_id
		, gaivs.storage_location = tsaf.storage_location
		, gaivs.agreement = COALESCE(tsaf.agreement, gaivs.agreement)
		, gaivs.logical_name = tsaf.logical_name
		, gaivs.storage_type = tsaf.storage_type
		, gaivs.accounting_type = tsaf.accounting_type
		, gaivs.ownership_type = tsaf.ownership_type
		, gaivs.storage_capacity = tsaf.storage_capacity
		, gaivs.volumn_uom = tsaf.volumn_uom
		, gaivs.injection_template_id = tsaf.injection_template_id
		, gaivs.withdrawal_template_id = tsaf.withdrawal_template_id
		, gaivs.injection_as_long = tsaf.injection_as_long
		, gaivs.include_product_lot = tsaf.include_product_lot
		, gaivs.include_fees = tsaf.include_fees
		, gaivs.calculate_mtm = tsaf.calculate_mtm
		, gaivs.include_non_standard_deals = tsaf.include_non_standard_deals
		, gaivs.cost_currency = tsaf.cost_currency
	FROM #temp_storage_asset_final tsaf
	LEFT JOIN general_assest_info_virtual_storage gaivs
		ON gaivs.general_assest_id = tsaf.general_assest_id
	WHERE gaivs.general_assest_id IS NOT NULL

	INSERT INTO general_assest_info_virtual_storage(
			storage_asset_id
			, storage_location
			, agreement
			, logical_name
			, storage_type
			, accounting_type
			, ownership_type
			, storage_capacity
			, volumn_uom
			, injection_template_id
			, withdrawal_template_id
			, injection_as_long
			, include_product_lot
			, include_fees
			, calculate_mtm
			, include_non_standard_deals
			, cost_currency
	)
	SELECT
		tsaf.storage_asset_id
		, tsaf.storage_location
		, tsaf.agreement
		, tsaf.logical_name
		, tsaf.storage_type
		, tsaf.accounting_type
		, tsaf.ownership_type
		, tsaf.storage_capacity
		, tsaf.volumn_uom
		, tsaf.injection_template_id
		, tsaf.withdrawal_template_id
		, tsaf.injection_as_long
		, tsaf.include_product_lot
		, tsaf.include_fees
		, tsaf.calculate_mtm
		, tsaf.include_non_standard_deals
		, tsaf.cost_currency
	FROM #temp_storage_asset_final tsaf
	LEFT JOIN general_assest_info_virtual_storage gaivs
		ON gaivs.general_assest_id = tsaf.general_assest_id
	WHERE gaivs.general_assest_id IS NULL
	--*/
	DROP TABLE #temp_storage_asset_final
END

--Added for Transportation Rate Schedule Import
IF @table_name = 'transportation_rate_schedule_rate_import'
BEGIN
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, '''+ @table_name +'''
		FROM ' + @import_temp_table_name + '
	')
	
	IF OBJECT_ID('tempdb..#temp_provider') IS NOT NULL
		DROP TABLE #temp_provider

	create table #temp_provider (
		source_counterparty_id INT,
		counterparty NVARCHAR(200) COLLATE DATABASE_DEFAULT
	)
	INSERT INTO #temp_provider
	EXEC spa_source_counterparty_maintain @flag = 'y', @type_of_entity= '301994'

	IF OBJECT_ID('tempdb..#temp_charge_types') IS NOT NULL
		DROP TABLE #temp_charge_types

	SELECT sdv.value_id [rate_type_id], sdv.code[code], sdv2.value_id [value_id]
	INTO #temp_charge_types
	FROM static_data_value sdv 
	INNER JOIN user_defined_fields_template udft 
		ON  sdv.value_id = udft.field_name 
	INNER JOIN static_data_value AS sdv2 
		ON udft.udf_category = sdv2.value_id 
	WHERE  sdv.TYPE_ID = 5500 AND sdv2.value_id IN (101900, 101901)

	-- Validation for empty Transportation Rate Schedule Name
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Transportation Rate Schedule Name cannot be empty'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE transportation_rate_schedule_name IS NULL
	')
	
	-- Validation for Non existent Rate Category
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Rate Category: '' + ISNULL(a.rate_category , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.rate_category
				AND type_id = 45200
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Provider
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Provider: '' + ISNULL(a.provider , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN #temp_provider tp
			ON a.provider = tp.counterparty
		WHERE tp.source_counterparty_id IS NULL
	')

	-- Validation for Non existent charge Type
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''charge Type: '' + ISNULL(a.charge_type, ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN #temp_charge_types tct
			ON a.charge_type = tct.code
		WHERE tct.rate_type_id IS NULL
	')

	-- Validation for Non existent Rate Granularity
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Rate Granularity: '' + ISNULL(a.rate_granularity , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.rate_granularity
				AND type_id = 106200
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Currency
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Currency: '' + ISNULL(a.currency , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_currency sc
			ON sc.currency_name = a.currency
		WHERE sc.source_currency_id IS NULL
	')

	-- Validation for Non existent UOM
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''UOM: '' + ISNULL(a.uom , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_uom su
			ON su.uom_name = a.uom
		WHERE su.source_uom_id IS NULL
	')

	-- Validation for Non existent Billing Frequency
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Billing Frequency: '' + ISNULL(a.billing_frequency , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.billing_frequency
				AND type_id = 106300
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Payment Calendar
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Payment Calendar: '' + ISNULL(a.payment_calendar , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.payment_calendar
				AND type_id = 10017
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non existent Settlement Calendar
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Settlement Calendar: '' + ISNULL(a.settlement_calendar , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.settlement_calendar
				AND type_id = 10017
		WHERE sdv.value_id IS NULL
	')

	--Delete Invalid Rows
	EXEC('
		DELETE a
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id'
	)

	IF OBJECT_ID('tempdb..#temp_rate_schedule') IS NOT NULL
		DROP TABLE #temp_rate_schedule

	CREATE TABLE #temp_rate_schedule (
		begin_date NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, billing_frequency INT
		, charge_type INT
		, currency INT
		, [description] NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, end_date NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, formula INT
		, payment_calendar INT
		, payment_date NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, [provider] INT
		, rate FLOAT
		, rate_category INT
		, rate_granularity INT
		, settlement_calendar INT
		, settlement_date NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, transportation_rate_schedule_name NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, uom INT
		, fixed_variable NCHAR(1) COLLATE DATABASE_DEFAULT
	)

	EXEC('
		INSERT INTO #temp_rate_schedule (
			begin_date
			, billing_frequency
			, charge_type
			, currency
			, description
			, end_date
			, formula
			, payment_calendar
			, payment_date
			, provider
			, rate
			, rate_category
			, rate_granularity
			, settlement_calendar
			, settlement_date
			, transportation_rate_schedule_name
			, uom
			, fixed_variable
		)
		SELECT a.begin_date
			, sdvbf.value_id [billing_frequency]
			, tct.rate_type_id [charge_type]
			, sc.source_currency_id [currency]
			, a.description
			, a.end_date
			, a.formula
			, sdvpc.value_id [payment_calendar]
			, a.payment_date
			, tp.source_counterparty_id [provider]
			, a.rate
			, sdvrc.value_id [rate_category]
			, sdvrg.value_id [rate_granularity]
			, sdvsc.value_id [settlement_calendar]
			, a.settlement_date
			, a.transportation_rate_schedule_name
			, su.source_uom_id [uom]
			, CASE WHEN tct.value_id = 101900 then ''f'' ELSE ''v'' END
		FROM
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdvbf
			ON sdvbf.code = a.billing_frequency
				AND sdvbf.type_id = 106300
		LEFT JOIN #temp_charge_types tct
			ON a.charge_type = tct.code
		LEFT JOIN source_currency sc
			ON sc.currency_name = a.currency
		LEFT JOIN static_data_value sdvpc
			ON sdvpc.code = a.payment_calendar
				AND sdvpc.type_id = 10017
		LEFT JOIN #temp_provider tp
			ON a.provider = tp.counterparty
		LEFT JOIN static_data_value sdvrc
			ON sdvrc.code = a.rate_category
				AND sdvrc.type_id = 45200
		LEFT JOIN static_data_value sdvrg
			ON sdvrg.code = a.rate_granularity
				AND sdvrg.type_id = 106200
		LEFT JOIN static_data_value sdvsc
			ON sdvsc.code = a.settlement_calendar
				AND sdvsc.type_id = 10017
		LEFT JOIN source_uom su
			ON su.uom_name = a.uom
	')

	UPDATE trc
	SET code = trs.transportation_rate_schedule_name
		, [description] = trs.[description]
		, rate_category = trs.rate_category
		, pipeline = trs.[provider]
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	WHERE trc.code IS NOT NULL

	INSERT INTO transportation_rate_category (
		code
		, [description]
		, rate_category
		, pipeline
	)
	SELECT 
		trs.transportation_rate_schedule_name
		, trs.[description]
		, trs.rate_category
		, trs.[provider]
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	WHERE trc.code IS NULL

	UPDATE tprs
	SET tprs.rate_schedule_id = trc.value_id
		, tprs.begin_date = trs.begin_date
		, tprs.billing_frequency = trs.billing_frequency
		, tprs.rate_type_id = trs.charge_type
		, tprs.currency_id = trs.currency
		, tprs.end_date = trs.end_date
		, tprs.formula_id = trs.formula
		, tprs.payment_calendar = trs.payment_calendar
		, tprs.payment_date = trs.payment_date
		, tprs.rate = trs.rate
		, tprs.rate_granularity = trs.rate_granularity
		, tprs.settlement_calendar = trs.settlement_calendar
		, tprs.settlement_date = trs.settlement_date
		, tprs.uom_id = trs.uom
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	LEFT JOIN transportation_rate_schedule tprs
		ON tprs.rate_type_id = trs.charge_type
		AND tprs.rate_schedule_id = trc.value_id
		AND tprs.begin_date = trs.begin_date
		AND tprs.end_date = trs.end_date
	WHERE tprs.rate_type_id IS NOT NULL
	AND trs.fixed_variable = 'f'
	

	INSERT INTO transportation_rate_schedule (
		rate_schedule_id
		, begin_date
		, billing_frequency
		, rate_type_id
		, currency_id
		, end_date
		, formula_id
		, payment_calendar
		, payment_date
		, rate
		, rate_granularity
		, settlement_calendar
		, settlement_date
		, uom_id
	)
	SELECT trc.value_id
		, trs.begin_date
		, trs.billing_frequency
		, trs.charge_type
		, trs.currency
		, trs.end_date
		, trs.formula
		, trs.payment_calendar
		, trs.payment_date
		, trs.rate
		, trs.rate_granularity
		, trs.settlement_calendar
		, trs.settlement_date
		, trs.uom
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	LEFT JOIN transportation_rate_schedule tprs
		ON tprs.rate_type_id = trs.charge_type
		AND tprs.rate_schedule_id = trc.value_id
		AND tprs.begin_date = trs.begin_date
		AND tprs.end_date = trs.end_date
	WHERE tprs.rate_type_id IS NULL
	AND trs.fixed_variable = 'f'

	UPDATE vc
	SET vc.rate_schedule_id = trc.value_id
		, vc.begin_date = trs.begin_date
		, vc.billing_frequency = trs.billing_frequency
		, vc.rate_type_id = trs.charge_type
		, vc.currency_id = trs.currency
		, vc.end_date = trs.end_date
		, vc.formula_id = trs.formula
		, vc.payment_calendar = trs.payment_calendar
		, vc.payment_date = trs.payment_date
		, vc.rate = trs.rate
		, vc.rate_granularity = trs.rate_granularity
		, vc.settlement_calendar = trs.settlement_calendar
		, vc.settlement_date = trs.settlement_date
		, vc.uom_id = trs.uom
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	LEFT JOIN variable_charge vc
		ON vc.rate_type_id = trs.charge_type
		AND vc.rate_schedule_id = trc.value_id
		AND vc.begin_date = trs.begin_date
		AND vc.end_date = trs.end_date
	WHERE vc.rate_type_id IS NOT NULL
		AND trs.fixed_variable = 'f'

	INSERT INTO variable_charge (
		rate_schedule_id
		, begin_date
		, billing_frequency
		, rate_type_id
		, currency_id
		, end_date
		, formula_id
		, payment_calendar
		, payment_date
		, rate
		, rate_granularity
		, settlement_calendar
		, settlement_date
		, uom_id
	)
	SELECT trc.value_id
		, trs.begin_date
		, trs.billing_frequency
		, trs.charge_type
		, trs.currency
		, trs.end_date
		, trs.formula
		, trs.payment_calendar
		, trs.payment_date
		, trs.rate
		, trs.rate_granularity
		, trs.settlement_calendar
		, trs.settlement_date
		, trs.uom
	FROM #temp_rate_schedule trs
	LEFT JOIN transportation_rate_category trc
		ON trc.code = trs.transportation_rate_schedule_name
		AND trc.[description] = trs.[description]
		AND trc.rate_category = trs.rate_category
		AND trc.pipeline = trs.[provider]
	LEFT JOIN variable_charge vc
		ON vc.rate_type_id = trs.charge_type
		AND vc.rate_schedule_id = trc.value_id
		AND vc.begin_date = trs.begin_date
		AND vc.end_date = trs.end_date
	WHERE vc.rate_type_id IS NULL
		AND trs.fixed_variable = 'v'

END

--Added for Storage Contract Import
IF @table_name = 'ixp_storage_contract'
BEGIN
	EXEC ('
		INSERT INTO #temp_tot_count
		SELECT COUNT(*) AS totcount, '''+ @table_name +'''
		FROM ' + @import_temp_table_name + '
	')

	-- Validation for Invalid Active
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Active: '' + ISNULL(a.active , ''NULL'') + '' is Invalid.'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.active IS NOT NULL
			AND a.active NOT IN (''yes'', ''no'')
	')

	-- Validation for Non Existent Commodity
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Commodity: '' + ISNULL(a.commodity , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_commodity sc
			ON sc.commodity_name = a.commodity
		WHERE sc.source_commodity_id IS NULL
	')

	-- Validation for Non Existent Contract Component Template
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Contract Component Template: '' + ISNULL(a.contract_component_template , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN contract_charge_type cct
			ON cct.contract_charge_desc = a.contract_component_template
		WHERE a.contract_component_template IS NOT NULL
			AND cct.contract_charge_type_id IS NULL
	')

	-- Validation for Non Existent Contract Status
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Contract Status: '' + ISNULL(a.contract_status , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN static_data_value sdv
			ON sdv.code = a.contract_status
				AND sdv.type_id = 1900
		WHERE sdv.value_id IS NULL
	')

	-- Validation for Non Existent Counterparty
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Counterparty: '' + ISNULL(a.counterparty , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_counterparty sc
			ON a.counterparty = sc.counterparty_name
		WHERE sc.source_counterparty_id IS NULL
	')

	-- Validation for Non Existent Currency
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Currency: '' + ISNULL(a.currency , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_currency sc
			ON a.currency = sc.currency_name
		WHERE sc.source_currency_id IS NULL
	')

	-- Validation for Invalid Netting Rule
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Netting Rule: '' + ISNULL(a.netting_rule , ''NULL'') + '' is Invalid.'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.netting_rule IS NOT NULL
			AND a.netting_rule NOT IN (''yes'', ''no'')
	')

	/* ### Commented because of new requirement :: Primary Contract is Optional
	-- Validation for Non Existent Primary Contract
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Primary Contract: '' + ISNULL(a.primary_contract , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN contract_group cg
			ON a.primary_contract = cg.contract_name
		WHERE cg.contract_id IS NULL
	')
	*/

	-- Validation for Non Existent Rate Schedule
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Rate Schedule: '' + ISNULL(a.rate_schedule , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN transportation_rate_category trc
			ON a.rate_schedule = trc.code
			AND trc.contract_type = ''s''
		WHERE trc.value_id IS NULL
	')

	-- Validation for Invalid Service Type
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Service Type: '' + ISNULL(a.service_type , ''NULL'') + '' is Invalid'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		WHERE a.service_type IS NOT NULL
			AND a.service_type NOT IN (''Fixed'', ''Flex'')
	')

	-- Validation for Non Existent Storage Asset
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''Storage Asset: '' + ISNULL(a.storage_asset , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN storage_asset sa
			ON sa.asset_name = a.storage_asset
		WHERE sa.storage_asset_id IS NULL
	')

	-- Validation for Non Existent UOM
	EXEC ('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
		SELECT
			a.temp_id,
 			''' + @process_id + ''',
 			''Error'',
 			''Import Data'',
 			''' + @table_name + ''',
 			''Data Error'',
 			''UOM: '' + ISNULL(a.uom , ''NULL'') + '' does not exist in System'',
 			''Please check your Data'',
 			a.import_file_name
		FROM 
		' + @import_temp_table_name + ' a
		LEFT JOIN source_uom su
			ON su.uom_name = a.uom
		WHERE su.source_uom_id IS NULL
	')

	--Delete Invalid Rows
	EXEC('
		DELETE a
		FROM #import_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON #import_status.temp_id = a.temp_id'
	)

	IF OBJECT_ID('tempdb..#temp_storage_contract') IS NOT NULL
		DROP TABLE #temp_storage_contract

	CREATE TABLE #temp_storage_contract (
		is_active NCHAR(1) COLLATE DATABASE_DEFAULT
		, commodity INT
		, contract_charge_type_id INT
		, source_contract_id NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, [contract_name] NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, contract_status INT
		, pipeline INT
		, currency INT
		, term_start NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, term_end NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, neting_rule NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, grouping_contract INT
		, maintain_rate_schedule INT
		, service_type NCHAR(1) COLLATE DATABASE_DEFAULT
		, storage_asset_id INT
		, volume_uom INT
	)

	EXEC('
		INSERT INTO #temp_storage_contract (
			is_active
			, commodity
			, contract_charge_type_id
			, source_contract_id
			, [contract_name]
			, contract_status
			, pipeline
			, currency
			, term_start
			, term_end
			, neting_rule
			, grouping_contract
			, maintain_rate_schedule
			, service_type
			, storage_asset_id
			, volume_uom
		)
		SELECT IIF(a.active = ''yes'', ''y'', ''n'') [active]
			, scm.source_commodity_id [commodity]
			, cct.contract_charge_type_id [contract_component_template]
			, a.contract_id
			, a.contract_name
			, sdvcs.value_id [contract_status]
			, scp.source_counterparty_id [counterparty]
			, sc.source_currency_id [currency]
			, a.effective_date
			, a.end_date
			, IIF(a.netting_rule = ''yes'', ''y'', ''n'') [netting_rule]
			, cg.contract_id [primary_contract]
			, trc.value_id [rate_schedule]
			, CASE 
				WHEN a.service_type = ''Fixed'' THEN ''i'' 
				WHEN a.service_type = ''Flex'' THEN ''l'' 
				ELSE NULL
			END [service_type]
			, sa.storage_asset_id [storage_asset]
			, su.source_uom_id [uom]
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN source_commodity scm
			ON scm.commodity_name = a.commodity
		LEFT JOIN contract_charge_type cct
			ON cct.contract_charge_desc = a.contract_component_template
		LEFT JOIN static_data_value sdvcs
			ON sdvcs.code = a.contract_status
				AND sdvcs.type_id = 1900
		LEFT JOIN source_counterparty scp
			ON a.counterparty = scp.counterparty_name
		LEFT JOIN source_currency sc
			ON a.currency = sc.currency_name
		LEFT JOIN contract_group cg
			ON a.primary_contract = cg.contract_name
		LEFT JOIN transportation_rate_category trc
			ON a.rate_schedule = trc.code
				AND trc.contract_type = ''s''
		LEFT JOIN storage_asset sa
			ON sa.asset_name = a.storage_asset
		LEFT JOIN source_uom su
			ON su.uom_name = a.uom
	')

	UPDATE cg
	SET cg.is_active = tsc.is_active
		, cg.commodity = tsc.commodity
		, cg.contract_charge_type_id = tsc.contract_charge_type_id
		, cg.source_contract_id = tsc.source_contract_id
		, cg.[contract_name] = tsc.[contract_name]
		, cg.contract_status = tsc.contract_status
		, cg.pipeline = tsc.pipeline
		, cg.currency = tsc.currency
		, cg.term_start = tsc.term_start
		, cg.term_end = tsc.term_end
		, cg.neting_rule = tsc.neting_rule
		, cg.grouping_contract = tsc.grouping_contract
		, cg.maintain_rate_schedule = tsc.maintain_rate_schedule
		, cg.service_type = tsc.service_type
		, cg.storage_asset_id = tsc.storage_asset_id
		, cg.volume_uom = tsc.volume_uom
	FROM #temp_storage_contract tsc
	LEFT JOIN contract_group cg
		ON cg.source_contract_id = tsc.source_contract_id
			AND cg.contract_type_def_id = 38404
	WHERE cg.contract_id IS NOT NULL


	INSERT INTO contract_group (
		is_active
		, commodity
		, contract_charge_type_id
		, source_contract_id
		, [contract_name]
		, contract_status
		, pipeline
		, currency
		, term_start
		, term_end
		, neting_rule
		, grouping_contract
		, maintain_rate_schedule
		, service_type
		, storage_asset_id
		, volume_uom
		, contract_type_def_id
	)
	SELECT tsc.is_active
		, tsc.commodity
		, tsc.contract_charge_type_id
		, tsc.source_contract_id
		, tsc.[contract_name]
		, tsc.contract_status
		, tsc.pipeline
		, tsc.currency
		, tsc.term_start
		, tsc.term_end
		, tsc.neting_rule
		, tsc.grouping_contract
		, tsc.maintain_rate_schedule
		, tsc.service_type
		, tsc.storage_asset_id
		, tsc.volume_uom
		, '38404'
	FROM #temp_storage_contract tsc
	LEFT JOIN contract_group cg
		ON cg.source_contract_id = tsc.source_contract_id
			AND cg.contract_type_def_id = 38404
	WHERE cg.contract_id IS NULL

END

IF @table_name = 'ixp_storage_ratchet'
BEGIN 	
	
	EXEC ('DELETE ' + @field_compare_table)
 	SET @source_table = @import_temp_table_name
	EXEC ('DELETE ' + @field_compare_table)
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''term_from'',''term_from'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''term_to'',''term_to'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''inventory_level_from'',''inventory_level_from'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''inventory_level_to'',''inventory_level_to'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''gas_in_storage_perc_from'',''gas_in_storage_perc_from'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''gas_in_storage_perc_to'',''gas_in_storage_perc_to'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''perc_of_contracted_storage_space'',''perc_of_contracted_storage_space'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''storage_ratchet'',''fixed_value'',''fixed_value'')') 
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'

	-- Non-existent value for Type column
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.type + ''"
			  }'',
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''type'' -- ixp_columns_name
		  ) scm
		WHERE a.type NOT IN (''Withdrawal'',''Injection'')
	')	
	
	-- logical Name not found
	EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10002,
			''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.general_assest_id + ''"
			  }'',
			a.import_file_name
		FROM   ' + @import_temp_table_name + ' a
		LEFT JOIN #error_status 
		ON  a.temp_id = #error_status.temp_id
		LEFT JOIN general_assest_info_virtual_storage gaivs
			ON gaivs.logical_name = a.general_assest_id
		CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''general_assest_id'' -- ixp_columns_name
		  ) scm
		WHERE #error_status.temp_id IS NULL
			AND gaivs.general_assest_id IS NULL
	')	
	
	 --Delete Invalid Rows
	EXEC('
		DELETE a
		FROM #error_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON #error_status.temp_id = a.temp_id'
	)
		  
	-- Insert data into table storage_ratchet
	SET @sql = '
		INSERT INTO storage_ratchet(general_assest_id,term_from,term_to,gas_in_storage_perc_from,gas_in_storage_perc_to,type,fixed_value,perc_of_contracted_storage_space,inventory_level_from,inventory_level_to)
		SELECT  gaivs.general_assest_id
			   ,a.term_from
			   ,a.term_to
			   ,a.gas_in_storage_perc_from
			   ,a.gas_in_storage_perc_to
			   ,CASE WHEN a.type = ''Injection'' THEN ''i''
					 WHEN a.type = ''Withdrawal'' THEN ''w''
					 ELSE ''i''
				END
			   ,a.fixed_value
			   ,a.perc_of_contracted_storage_space
			   ,a.inventory_level_from
			   ,a.inventory_level_to
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN general_assest_info_virtual_storage gaivs
			ON gaivs.logical_name = a.general_assest_id
		LEFT JOIN storage_ratchet sr ON sr.term_from = a.term_from AND sr.term_to = a.term_to AND sr.type = CASE WHEN a.type = ''Injection'' THEN ''i''
					 WHEN a.type = ''Withdrawal'' THEN ''w''
					 ELSE ''i''
		   END
		WHERE sr.storage_ratchet_id IS NULL
		'
	EXEC(@sql)

	-- Update
	SET @sql = '
	UPDATE sr
		SET sr.fixed_value = a.fixed_value,
			sr.perc_of_contracted_storage_space = a.perc_of_contracted_storage_space,
			sr.inventory_level_from = a.inventory_level_from,
			sr.inventory_level_to = a.inventory_level_to,
			sr.gas_in_storage_perc_from = a.gas_in_storage_perc_from,
			sr.gas_in_storage_perc_to = a.gas_in_storage_perc_to
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN general_assest_info_virtual_storage gaivs
		ON gaivs.logical_name = a.general_assest_id
	LEFT JOIN storage_ratchet sr ON sr.term_from = a.term_from AND sr.term_to = a.term_to AND sr.type = CASE WHEN a.type = ''Injection'' THEN ''i''
					WHEN a.type = ''Withdrawal'' THEN ''w''
					ELSE ''i''
		END
	WHERE sr.storage_ratchet_id IS NOT NULL
	'
	--PRINT @sql
	EXEC(@sql) 
END
--DEAL FEES IMPORT : START
IF @table_name = 'ixp_deal_fees'
BEGIN
	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET a.term = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.term = dd.user_date
	')
	/***END OF date update***/

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
 	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_deal_header'', ''deal_ref_id'', ''a.deal_ref_id = b.deal_id'', ''e''),
			(''source_currency'', ''currency'', ''a.currency = b.currency_id'', ''e''),
			(''source_uom'', ''uom'', ''a.uom = b.uom_id'', ''e''),
			(''source_counterparty'', ''counterparty'', ''a.counterparty = b.counterparty_id'', ''e''),
			(''contract_group'', ''contract'', ''a.contract = b.source_contract_id'', ''e'')
	')
	EXEC sp_validate_data_type @process_id, NULL, @import_temp_table_name, @table_name, @rules_id, 'a'

	-- Validation for Header Detail column value
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.header_detail + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''header_detail'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL
		AND a.header_detail NOT IN (''Header'',''Detail'')
 	')
	
	-- Validation for tab column value
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.tab + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''tab'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL
		AND a.tab NOT IN (''Cost'')
 	')

	-- Validation for invalid RecPay
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.rec_pay + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''rec_pay'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL
		AND NULLIF(a.rec_pay,'''') IS NOT NULL
		AND a.rec_pay NOT IN (''Receive'',''Pay'')
 	')

	-- Validation Invalid Format for term in case of Detail roq
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10004,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.term + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''term'' 
    ) scm
	LEFT JOIN #error_status
		ON a.temp_id = #error_status.temp_id
	WHERE #error_status.temp_id IS NULL 
		AND a.header_detail = ''Detail'' 
		AND ISDATE(a.term) = 0
 	')

	-- Validation for hidden cost tab
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
 	SELECT a.temp_id,
 		NULL,
 		''Cost Tab does not exist in Deal'',
 		a.import_file_name,
		''Error'',
		''Data Error'',
		''Please correct data and re-import.''
 	FROM ' + @import_temp_table_name + ' a
	LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
	INNER JOIN source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	INNER JOIN source_deal_header_template sdht on sdht.template_id = sdh.template_id
	LEFT JOIN maintain_field_template mft on mft.template_name = sdht.template_name
	WHERE #error_status.temp_id IS NULL AND ''n'' = 
				CASE a.header_detail 
					WHEN ''Header'' THEN mft.show_cost_tab 
					WHEN ''Detail'' THEN mft.show_detail_cost_tab 
					ELSE NULL 
				END
 	')

	-- Validation for invalid UDF name
	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
		SELECT a.temp_id,
		NULL,
		a.name + '' UDF does not exist in Deal.'',
		a.import_file_name,
		''Error'',
		''Data Error'',
		''Please correct data and re-import.''
 	FROM ' + @import_temp_table_name + ' a
	LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
	INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_ref_id
	INNER JOIN source_deal_header_template sdht ON sdht.template_id = sdh.template_id
	LEFT JOIN user_defined_deal_fields_template uddft ON uddft.template_id = sdh.template_id
		AND uddft.field_label = a.name
	WHERE #error_status.temp_id is null 
		AND uddft.udf_template_id is null
 	')

	-- Validation for numeric data type validation for column value
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
	SELECT a.temp_id,
		NULL,
		''Data type mismatch for Column: Value | UDF: '' + a.name + '' | Value: '' + a.[value],
		a.import_file_name,
		''Error'',
		''Data Error'',
		''Please correct data and re-import.''
 	FROM ' + @import_temp_table_name + ' a
	LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
	inner join source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	inner join source_deal_header_template sdht on sdht.template_id = sdh.template_id
	left join user_defined_deal_fields_template uddft on uddft.template_id = sdh.template_id
		and uddft.field_label = a.name
	WHERE #error_status.temp_id is null and uddft.data_type IN (''int'',''numeric(38,20)'',''datetime'')
		AND CASE WHEN uddft.data_type IN (''int'',''numeric(38,20)'') THEN ISNUMERIC(a.[value]) 
				 WHEN uddft.data_type = ''datetime'' THEN ISDATE(a.[value])
			END = 0
 	')

	-- Validation for invalid term for deal
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
	SELECT a.temp_id,
		NULL,
 		''Term '''''' + a.term + '''''' not found for Deal '''''' + a.deal_ref_id + ''''''.'',
 		a.import_file_name,
		''Error'',
		''Data Error'',
		''Please correct data and re-import.''
 	FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_ref_id
	LEFT JOIN source_deal_detail sdd ON sdd.source_deal_header_id = sdh.source_deal_header_id
		and sdd.term_start = IIF(ISDATE(a.term)=1,a.term,NULL)
	LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
	WHERE #error_status.temp_id IS NULL 
		AND sdd.term_start IS NULL 
		AND a.header_detail = ''Detail''
	')

	-- Validation for contract not mapped in counterparty (First contract validation)
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name, message_status, message_type, recommendation)
	SELECT a.temp_id,
		NULL,
 		''Contract '''''' + a.contract + '''''' not mapped for counterparty '''''' + a.counterparty + ''''''.'',
 		a.import_file_name,
		''Error'',
		''unmapped_contract'',
		''Please correct data and re-import.''
 	FROM ' + @import_temp_table_name + ' a
	LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
	LEFT JOIN source_counterparty sc on sc.counterparty_id = a.counterparty
	LEFT JOIN contract_group cg on cg.source_contract_id = a.contract
	LEFT JOIN counterparty_contract_address cca
		ON cca.counterparty_id = sc.source_counterparty_id
		AND cca.contract_id = cg.contract_id
	WHERE #error_status.temp_id IS NULL 
		AND NULLIF(a.counterparty,'''') IS NOT NULL 
		AND sc.source_counterparty_id IS NOT NULL 
		AND nullif(a.contract,'''') IS NOT NULL 
		AND cg.contract_id IS NOT NULL 
		AND cca.counterparty_contract_address_id IS NULL

	UPDATE a 
	SET a.contract = ''''
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN #error_status ON  a.temp_id = #error_status.temp_id AND #error_status.[message_type] = ''unmapped_contract''
 	')

	--Deleting the error data from the temporary table so reduce redundancy
	EXEC('
		DELETE a
		FROM #error_status
		INNER JOIN ' + @import_temp_table_name + ' a 
			ON  #error_status.temp_id = a.temp_id
		LEFT JOIN message_log_template mlt 
			ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error'' OR #error_status.message_status = ''Error''
	')

	--MAIN IMPORT LOGIC : START

	--delete existing header udf matched with import file
	EXEC('
	DELETE uddf
	FROM user_defined_deal_fields uddf
	INNER JOIN user_defined_deal_fields_template uddft on uddft.udf_template_id = uddf.udf_template_id 
		AND uddft.udf_type = ''h'' 
		AND uddft.deal_udf_type = ''c''
	INNER JOIN source_deal_header sdh on sdh.source_deal_header_id = uddf.source_deal_header_id 
		AND sdh.template_id = uddft.template_id
	INNER JOIN ' + @import_temp_table_name + ' a on a.deal_ref_id = sdh.deal_id
		AND a.name = uddft.field_label
		AND a.header_detail = ''Header''
	')

	--header udf insert
	EXEC('
	INSERT INTO user_defined_deal_fields(source_deal_header_id ,udf_template_id ,udf_value ,currency_id ,uom_id ,counterparty_id ,contract_id ,receive_pay, fixed_fx_rate)
	SELECT sdh.source_deal_header_id, uddft.udf_template_id, a.value [udf_value], cur.source_currency_id [currency_id], uom.source_uom_id [uom_id]
		, cpty.source_counterparty_id [counterparty_id], con.contract_id
		, case a.rec_pay when ''Pay'' then ''p'' when ''Receive'' then ''r'' else null end [receive_pay]
		, a.fixed_fx_rate
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_ref_id
	INNER JOIN source_deal_header_template sdht ON sdht.template_id = sdh.template_id
	INNER JOIN user_defined_deal_fields_template uddft ON uddft.field_label = a.name
		AND uddft.udf_type = ''h''
		AND uddft.deal_udf_type = ''c''
		AND uddft.template_id = sdht.template_id
	LEFT JOIN source_currency cur ON cur.currency_id = a.currency
	LEFT JOIN source_uom uom ON uom.uom_id = a.uom
	LEFT JOIN source_counterparty cpty ON cpty.counterparty_id = nullif(a.counterparty,'''')
	LEFT JOIN contract_group con ON con.contract_name = nullif(a.contract,'''')
	WHERE a.header_detail = ''Header''
	')

	--delete existing detail udf matched with import file
	EXEC('
	DELETE uddf
	FROM user_defined_deal_detail_fields uddf
	INNER JOIN user_defined_deal_fields_template uddft on uddft.udf_template_id = uddf.udf_template_id 
		AND uddft.udf_type = ''d'' 
		AND uddft.deal_udf_type = ''c''
	INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = uddf.source_deal_detail_id
	INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id 
		AND sdh.template_id = uddft.template_id
	INNER JOIN ' + @import_temp_table_name + ' a ON a.deal_ref_id = sdh.deal_id
		AND a.name =  uddft.field_label 
		AND a.header_detail = ''Detail''
		AND a.term = sdd.term_start
	')
	--detail udf insert
	exec('
	INSERT INTO user_defined_deal_detail_fields(source_deal_detail_id ,udf_template_id ,udf_value ,currency_id ,uom_id ,counterparty_id ,contract_id ,receive_pay)
	SELECT sdd.source_deal_detail_id, uddft.udf_template_id, a.value [udf_value], cur.source_currency_id [currency_id], uom.source_uom_id [uom_id]
		, cpty.source_counterparty_id [counterparty_id], con.contract_id
		, case a.rec_pay when ''Pay'' then ''p'' when ''Receive'' then ''r'' else null end [receive_pay]
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	INNER JOIN source_deal_header_template sdht on sdht.template_id = sdh.template_id
	INNER JOIN source_deal_detail sdd on sdd.source_deal_header_id = sdh.source_deal_header_id
		AND sdd.term_start = a.term
	INNER JOIN user_defined_deal_fields_template uddft on uddft.field_label = a.name
		AND uddft.udf_type = ''d''
		AND uddft.deal_udf_type = ''c''
		AND uddft.template_id = sdht.template_id
	LEFT JOIN source_currency cur ON cur.currency_id = a.currency
	LEFT JOIN source_uom uom ON uom.uom_id = a.uom
	LEFT JOIN source_counterparty cpty ON cpty.counterparty_id = NULLIF(a.counterparty,'''')
	LEFT JOIN contract_group con ON con.source_contract_id = NULLIF(a.contract,'''')
	WHERE a.header_detail = ''Detail''
	')
	--MAIN IMPORT LOGIC : END
end
--DEAL FEES IMPORT : END

--DEAL UDF IMPORT : START
IF @table_name = 'ixp_deal_udf_import'
BEGIN

	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET a.term = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.term = dd.user_date
	')
	/***END OF date update***/

	EXEC ('DELETE ' + @field_compare_table)
 --	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_header'', ''deal_id'', ''deal_ref_id'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''create_ts'', ''term'')') --selected nullable column of real table for data type validation
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail'', ''curve_id'', ''leg'')') --selected nullable column of real table for data type validation
 	
 	SET @source_table = @import_temp_table_name
	
	--select @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'
	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'
	
	-- 1. Validation for invalid Deal Ref Id
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.value + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''deal_ref_id'' 
    ) scm
	LEFT JOIN source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	WHERE sdh.source_deal_header_id IS NULL
 	')

	-- 2. Validation for invalid Header Detail column value
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.header_detail + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''header_detail'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL
		AND a.header_detail NOT IN (''Header'',''Detail'')
 	')
		
	-- 3. Validation for invalid UDF name (not in system)
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.name + '' (UDF Not in System)'' + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''name'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	LEFT JOIN user_defined_fields_template udft ON udft.field_label = a.name
		AND udft.udf_type IN (''h'',''d'')
	WHERE es.temp_id IS NULL
		AND udft.udf_template_id IS NULL
 	')

	-- 5. Validation for blank term in case of Detail row
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10001,
		''{
				"column_name": "'' + scm.source_column_name + ''"
			}'',
		a.import_file_name
	FROM ' + @import_temp_table_name + ' a
	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''term'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL 
		AND NULLIF(a.term,'''') IS NULL 
		AND a.header_detail = ''Detail''
 	')

	-- 6. Validation for blank leg in case of Detail row
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT a.temp_id,
		10001,
		''{
				"column_name": "'' + scm.source_column_name + ''"
			}'',
		a.import_file_name
	FROM ' + @import_temp_table_name + ' a
	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''leg'' 
    ) scm
	LEFT JOIN #error_status es ON a.temp_id = es.temp_id
	WHERE es.temp_id IS NULL 
		AND NULLIF(a.leg,'''') IS NULL 
		AND a.header_detail = ''Detail''
 	')
	
	--combo udf values store : start
	
	IF (SELECT CURSOR_STATUS('global','cursor_udf_sql_values')) >= -1
	BEGIN
		IF (SELECT CURSOR_STATUS('global','cursor_udf_sql_values')) > -1
		BEGIN
			CLOSE cursor_udf_sql_values
		END
		DEALLOCATE cursor_udf_sql_values
	END
	EXEC('
	DECLARE cursor_udf_sql_values cursor fast_forward
	FOR
	SELECT DISTINCT ''EXEC [spa_execute_query] '''''' + REPLACE(ISNULL(uds.sql_string, udft.sql_string),'''''''','''''''''''') + '''''''' [sql_string]
		, uddft.field_label
	FROM ' + @import_temp_table_name + ' a
	INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_ref_id
	INNER JOIN user_defined_deal_fields_template uddft ON uddft.field_label = a.name
		AND uddft.template_id = sdh.template_id
	INNER JOIN user_defined_fields_template udft 
		ON udft.field_name = uddft.field_name
		AND NULLIF(udft.sql_string,'''') IS NOT NULL
	LEFT JOIN udf_data_source uds 
		ON udft.data_source_type_id = uds.udf_data_source_id
		AND uds.udf_data_source_name <> ''Custom''
	')

	OPEN cursor_udf_sql_values
	FETCH NEXT FROM cursor_udf_sql_values INTO @sql_string_c, @field_label_c 

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF OBJECT_ID('tempdb..#tmp1') is not null DROP TABLE #tmp1
			CREATE TABLE #tmp1(a INT)
	
		
		EXEC spa_get_output_schema_or_data @sql_query = @sql_string_c
		,@process_table_name = '#tmp1'
		,@data_output_col_count = @total_columns OUTPUT
		,@flag = 'data'
		
		--rename first column to 'id' and second column to 'value', so that can be used on join condition confidently. :START
		DECLARE @col_id NVARCHAR(500),@col_value NVARCHAR(500)
		SELECT TOP 1 @col_id =  [name]
		FROM tempdb.sys.columns 
		WHERE object_id = object_id('tempdb..#tmp1') 
		ORDER BY column_id ASC

		SELECT TOP 1 @col_value =  [name]
		FROM tempdb.sys.columns 
		WHERE object_id = object_id('tempdb..#tmp1') and [name] <> @col_id
		ORDER BY column_id ASC

		SET @col_id = '[#tmp1].[' + @col_id + ']'
		SET @col_value = '[#tmp1].[' + @col_value + ']'
		EXEC tempdb.sys.sp_rename @col_id,N'id',N'COLUMN'
		EXEC tempdb.sys.sp_rename @col_value,N'value',N'COLUMN'
		--rename first column to 'id' and second column to 'value', so that can be used on join condition confidently. :END
		
		-- Insert Field label with it's combo list udf_value name and id to create master list inorder to validate  
		INSERT INTO #tmp_udf_values_combo(field_label, udf_value, value_id)
		SELECT @field_label_c, t.[value], t.[id]
		FROM #tmp1 t

		FETCH NEXT FROM cursor_udf_sql_values INTO @sql_string_c, @field_label_c 
	END
	CLOSE cursor_udf_sql_values
	DEALLOCATE cursor_udf_sql_values

	IF OBJECT_ID('tempdb..#tmp1') is not null DROP TABLE #tmp1

	--combo udf values store : end
	
	-- 7. Validation for invalid UDF name (not available on udf field selection)
 	EXEC('
	INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
	SELECT DISTINCT a.temp_id,
		10002,
		''{
				"column_name": "'' + scm.source_column_name + ''",
				"column_value": "'' + a.value  + ''"
			}'',
		a.import_file_name
	FROM   ' + @import_temp_table_name + ' a
 	CROSS APPLY ( 
		SELECT source_column_name 
        FROM #source_file_column_table 
        WHERE ixp_columns_name = ''value'' 
    ) scm
	INNER JOIN source_deal_header sdh ON sdh.deal_id = a.deal_ref_id
	LEFT JOIN #tmp_udf_values_combo tuvc 
		ON tuvc.field_label = a.name 
		AND tuvc.udf_value = a.value
	WHERE tuvc.udf_value IS NULL 
	AND EXISTS (SELECT 1 FROM #tmp_udf_values_combo aa WHERE aa.field_label = a.name)
		AND a.value IS NOT NULL
 	')

	--select * from #error_status
	--return

	--/* test
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON #error_status.temp_id = a.temp_id'
		  )
	--*/
	--MAIN IMPORT LOGIC : START

	--/* test
	--delete existing header udf matched with import file
	EXEC('
	delete uddf
	from user_defined_deal_fields uddf
	inner join user_defined_deal_fields_template uddft on uddft.udf_template_id = uddf.udf_template_id 
		and uddft.udf_type = ''h'' 
	inner join source_deal_header sdh on sdh.source_deal_header_id = uddf.source_deal_header_id 
		and sdh.template_id = uddft.template_id
	inner join ' + @import_temp_table_name + ' a on a.deal_ref_id = sdh.deal_id
		and a.name = uddft.field_label
		and a.header_detail = ''Header''
	')
	--*/

	--header udf insert
	EXEC('
	insert into user_defined_deal_fields(source_deal_header_id, udf_template_id, udf_value)
	SELECT sdh.source_deal_header_id
		, uddft.udf_template_id
		, ISNULL(udf_combo.value_id, a.value) [udf_value]
		--, uddft.field_label
	from ' + @import_temp_table_name + ' a
	inner join source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	inner join user_defined_deal_fields_template uddft on uddft.field_label = a.name
		and uddft.udf_type = ''h''
		and uddft.template_id = sdh.template_id
	LEFT JOIN #tmp_udf_values_combo udf_combo 
		ON udf_combo.field_label = a.name 
		AND udf_combo.udf_value = a.value
	left join #error_status es on es.temp_id = a.temp_id
	WHERE a.header_detail = ''Header''
	AND es.temp_id IS NULL
	')

	--/* test
	--delete existing detail udf matched with import file
	EXEC('
	delete uddf
	from user_defined_deal_detail_fields uddf
	inner join user_defined_deal_fields_template uddft on uddft.udf_template_id = uddf.udf_template_id 
		and uddft.udf_type = ''d'' 
	inner join source_deal_detail sdd on sdd.source_deal_detail_id = uddf.source_deal_detail_id
	inner join source_deal_header sdh on sdh.source_deal_header_id = sdd.source_deal_header_id 
		and sdh.template_id = uddft.template_id
	inner join ' + @import_temp_table_name + ' a on a.deal_ref_id = sdh.deal_id
		and a.name =  uddft.field_label 
		and a.header_detail = ''Detail''
		and a.term = sdd.term_start
	')
	--*/
	--detail udf insert
	EXEC('
	insert into user_defined_deal_detail_fields(source_deal_detail_id ,udf_template_id ,udf_value)
	select sdd.source_deal_detail_id
		, uddft.udf_template_id
		, ISNULL(udf_combo.value_id, a.value) [udf_value]
		--, uddft.field_label
	from ' + @import_temp_table_name + ' a
	inner join source_deal_header sdh on sdh.deal_id = a.deal_ref_id
	inner join source_deal_detail sdd on sdd.source_deal_header_id = sdh.source_deal_header_id
		and sdd.term_start = cast(a.term as datetime)
		and sdd.leg = a.leg
	inner join user_defined_deal_fields_template uddft on uddft.field_label = a.name
		and uddft.udf_type = ''d''
		and uddft.template_id = sdh.template_id
	LEFT JOIN #tmp_udf_values_combo udf_combo 
		ON udf_combo.field_label = a.name 
		AND udf_combo.udf_value = a.value
	left join #error_status es on es.temp_id = a.temp_id
	where a.header_detail = ''Detail'' and es.temp_id IS NULL
	')
	--MAIN IMPORT LOGIC : END
END
--DEAL UDF IMPORT : END

IF @table_name = 'ixp_meter_data_template'
BEGIN

	/***update user date to sql date***/

	EXEC('UPDATE a
		  SET date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.date = dd.user_date
	')
	/***END OF date update***/

	EXEC ('DELETE ' + @field_compare_table)
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''mv90_data_hour'', ''period'', ''is_dst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''mv90_data_hour'', ''period'', ''hour'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''mv90_data_hour'', ''period'', ''period'')')
 	
	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/ 
	
	EXEC('TRUNCATE TABLE ' + @look_up_tables
			+
		' INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''meter_id'', ''meter_id'', ''b.recorderid = a.meter_id'', ''e'')
	')

	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	---trigger starts
	IF OBJECT_ID(N'tempdb..#temp_table_meter') IS NOT NULL
	DROP TABLE #temp_table_meter

	CREATE TABLE #temp_table_meter (
		[hour] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[minute] NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		is_dst NVARCHAR(4) COLLATE DATABASE_DEFAULT,
		meter_id NVARCHAR(200) COLLATE DATABASE_DEFAULT,
		channel NVARCHAR(50) COLLATE DATABASE_DEFAULT,
		volume NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[date] NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		import_file_name NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		granularity	NVARCHAR(10) COLLATE DATABASE_DEFAULT
	)

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly curves
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			     10001,
				 CASE 
					WHEN a.hour IS NULL AND a.period IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + '', '' + scmm.source_column_name + ''"}''
					WHEN a.hour IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + ''"}''
					WHEN a.period IS NULL THEN ''{"column_name": "'' + scmm.source_column_name + ''"}''
				 END,
			     a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''hour'' -- ixp_columns_name
		  ) scmh
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''period'' -- ixp_columns_name
		  ) scmm
		  LEFT JOIN meter_id mi ON mi.recorderid = a.meter_id
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND ((a.hour IS NULL AND mi.granularity IN (994, 987, 989, 995, 982)) OR (a.period IS NULL AND mi.granularity IN (994, 987, 989, 995)))
	')

	EXEC('
		DELETE a
 	    FROM #error_status
 		INNER JOIN ' + @import_temp_table_name + ' a ON #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	EXEC('INSERT INTO #temp_table_meter (hour, minute, is_dst, meter_id, channel, volume, date, import_file_name)
		SELECT hour, period, [is_dst], [meter_id], channel, value, date, import_file_name
		FROM ' +  @import_temp_table_name )

	UPDATE b
	SET granularity = 
		CASE 
			WHEN mi.granularity = 994 THEN '10'
			WHEN mi.granularity = 987 THEN '15'
			WHEN mi.granularity = 989 THEN '30'
			WHEN mi.granularity = 995 THEN '5'
			WHEN mi.granularity = 993 THEN 'Annually'
			WHEN mi.granularity = 982 THEN 'Hourly'
			WHEN mi.granularity = 980 THEN 'Monthly'
			WHEN mi.granularity = 981 THEN 'Daily'
		END
	FROM meter_id mi
	INNER JOIN #temp_table_meter b ON mi.recorderid = b.meter_id
	INNER JOIN static_data_value sdv ON sdv.value_id = mi.granularity AND sdv.type_id = 978

	UPDATE f
	SET hour = ((hour * 60 + minute) - f.granularity ) / 60,
		minute = ((hour * 60 + minute) - f.granularity) % 60 
	FROM #temp_table_meter f
	WHERE granularity IN ('5','10','15', '30')
	
	INSERT INTO #temp_table_meter (hour, minute, is_dst, meter_id, channel, volume, date, import_file_name, granularity)
	SELECT 25 as [hour], [minute], 0, meter_id, channel, volume, [date], import_file_name, granularity
	FROM #temp_table_meter
	WHERE is_dst = 1

	DELETE FROM #temp_table_meter WHERE is_dst = 1

	UPDATE #temp_table_meter SET hour = CASE WHEN hour =  '' THEN '' ELSE  hour - 1 END
	WHERE granularity NOT IN ('5','10','15', '30')

	EXEC('DELETE FROM ' + @import_temp_table_name)

	EXEC('INSERT INTO ' + @import_temp_table_name + ' (hour, period, [is_dst], [meter_id], channel, value, date, import_file_name)
		SELECT hour, minute, is_dst, meter_id, channel, volume, date, import_file_name
		FROM #temp_table_meter
	')
	--trigger ends

	/*start of validation*/
	EXEC ('DELETE ' + @field_compare_table)
 	        
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data'',''channel'',''channel'')')
 	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_DST'',''date'',''date'')')		
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''period'',''period'')')				
	EXEC('INSERT INTO '+@field_compare_table+ ' VALUES (''mv90_data_hour'',''hr1'',''value'')')
 	 	
 	SET @source_table = @import_temp_table_name    
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @source_table, @table_name, @rules_id, 'a'

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10016,
			  ''{
				  "column_name": "'' + scm.source_column_name + ''",
				  "column_value": "'' + a.is_dst + ''"
			  }'',
			  a.import_file_name
 		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''is_dst'' -- ixp_columns_name
		  ) scm
		  LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		  WHERE #error_status.temp_id IS NULL
		  	AND a.is_dst NOT IN (0, 1)
 	')

	-- Not matched Channel
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		  SELECT a.temp_id,
			  10011,
			  ''{
				  "column_name": "'' + scmc.source_column_name + ''",
				  "column_value": "'' + a.channel + ''",
				  "column_name1": "'' + scmm.source_column_name + ''",
				  "column_value1": "'' + a.meter_id + ''"
			  }'',
			  a.import_file_name
		  FROM ' + @import_temp_table_name + ' a
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''meter_id'' -- ixp_columns_name
		  ) scmm
		  CROSS APPLY (
			  SELECT source_column_name
			  FROM #source_file_column_table
			  WHERE ixp_columns_name = ''channel'' -- ixp_columns_name
		  ) scmc
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  INNER JOIN meter_id mi ON mi.recorderid = a.meter_id
		  LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id
			  AND a.channel = rp.channel
 		  WHERE #error_status.temp_id IS NULL AND
			  rp.meter_id IS NULL'
	)

	--Deleting the error data from the temporary table so reduce redundancy
	EXEC('DELETE ' + @import_temp_table_name + '
 	      FROM   #error_status
 	      INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		  INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		  WHERE mlt.message_status = ''Error''
	')

 	BEGIN TRY
 		IF @drilldown_level = 1
 		BEGIN
 			EXEC('INSERT INTO #tmp_staging_table([meter_id],[channel],[date],[hour],[value], [period], [is_dst]) 
					SELECT  [meter_id], ISNULL([channel],1), [date], [hour], [value], [period], CASE WHEN [hour] = 25 THEN 1 ELSE 0 END
					FROM ' + @import_temp_table_name + '
					--CROSS JOIN seq
					--	WHERE DATEADD(DAY,n-1,[date]) <= ISNULL(end_date, ISNULL(end_date, DATEADD(Month,1,[date])-1) AND n < 32
					ORDER BY meter_id')
		END
 		ELSE IF @drilldown_level = 2
 		BEGIN
 		EXEC ('INSERT INTO #tmp_staging_table 
				   SELECT a.[meter_id], ISNULL(a.[channel],1), a.[date], a.[hour], a.[.value], [h_filename], [h_error], [d_filename], [d_error] 
				   FROM ' + @import_temp_table_name + ' a
				   LEFT JOIN #error_status
						ON #error_status.temp_id = a.temp_id
				   WHERE #error_status.temp_id IS NULL
				   ')
 		END

 		SET @error_code = 's'
 	END TRY
 	BEGIN CATCH	
 		SET @error_msg = 'Error: ' + ERROR_MESSAGE()
 		SET @error_code = 'e'
 		--PRINT @error_msg
 		
 		INSERT INTO source_system_data_import_status (
 			process_id,
 			code,
 			MODULE,
 			[source],
 			[TYPE],
 			[description],
 			recommendation,
 			rules_name
 		  )
 		  EXEC (
 				 'SELECT DISTINCT ' 
 					 + '''' + @process_id + '''' + ',' 
 					 + '''Error'''  + ',' 
 					 + '''Import Data''' + ',' 
 					 + '''' + @table_name + '''' + ',' 
 					 +  '''Error''' + ',' 
 					 + '''' + @error_msg + '''' + ',' + 
 					 '''Please check if the date format provided matches the Users Date format.''' +  ','
 					 + '''' + @rules_names + '''' +
 				 ' FROM ' + @import_temp_table_name
 		  )
 		
 		SELECT @url_desc = './dev/spa_html.php?__user_name__=' + @user_login_id +
 						   '&spa=exec spa_get_import_process_status ''' + @process_id + ''',''' 
 						   + @user_login_id + ''''
 		
 		SELECT @desc = '<a target="_blank" href="' + @url_desc + '">' +
 					   'Allocation data import process completed' +
 					   CASE 
 							WHEN (@error_code = 'e') THEN ' (ERRORS found)'
 							ELSE ''
 					   END +  ' </a>'
 				IF NOT EXISTS(SELECT error_message_id from ixp_import_data_source iids
								INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id  
								WHERE rules_id = @rules_id)
				BEGIN
 		EXEC spa_NotificationUserByRole 2, @process_id, 'Meter Data Import', @desc , @error_code, @job_name, 1	
 				END
 		RETURN
 	END CATCH 
 	
 	-- missing meter logic is only valid for import except in Ebase Interface(In Ebase missing meter is handled in Adaptor level)
 	INSERT INTO #tmp_missing_meter_id (meter_id)
 	SELECT	DISTINCT tmp.meter_id
 	FROM #tmp_staging_table tmp
 	LEFT JOIN meter_id mi
 		ON mi.recorderid = tmp.meter_id
 	WHERE mi.recorderid IS NULL
 	 						
 	IF @drilldown_level = 1
 	BEGIN
 		INSERT INTO [#tmp_mv90_data_hour]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([01]) Hr1, ([02]) Hr2, ([03]) Hr3, ([04]) Hr4, ([05]) Hr5, ([06]) Hr6, 
 				([07]) Hr7, ([08]) Hr8, ([09]) Hr9, ([10]) Hr10, ([11]) Hr11, ([12]) Hr12,
 				([13]) Hr13, ([14]) Hr14, ([15]) Hr15, ([16]) Hr16, ([17]) Hr17, ([18]) Hr18, 
 				([19]) Hr19, ([20]) Hr20, ([21]) Hr21, ([22]) Hr22, ([23]) Hr23, ([24]) Hr24, ([25]) Hr25,period
 		FROM	(  
 					SELECT meter_id, [prod_date], [hour], [channel], [value], [period] FROM (
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.[date] [prod_date],
 							CASE 
								WHEN tmp.is_dst = 1 
									THEN RIGHT('0' + CAST(ISNULL(tmp.[hour],0) AS NVARCHAR(10)), 2) 
								ELSE RIGHT('0' + CAST(ISNULL(tmp.[hour],0)+1 AS NVARCHAR(10)), 2) 
							END 
							[hour],	
 							CASE 
 								WHEN ( tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT)+1 = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 								END [value],
 								[period]
 					FROM	#tmp_staging_table tmp
 								INNER JOIN [meter_id] mi ON mi.[recorderid] = tmp.[meter_id]
 								LEFT JOIN recorder_properties rp ON rp.meter_id = mi.meter_id AND tmp.channel = rp.channel
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR( tmp.[date]) 
 									AND md.[insert_delete] = 'd'
									AND md.dst_group_value_id = @dst_group_value_id) a
 					GROUP BY meter_id, [prod_date], [hour], [channel], [value], [period]			
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([01], [02], [03], [04], [05], [06], [07], [08], [09], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24], [25])
 			 ) pvt		
 	END
 	ELSE 
 	BEGIN
 		INSERT INTO [#tmp_mv90_data_hour]
 		SELECT	[meter_id], [channel], [prod_date], 
 				([0]) Hr1, ([1]) Hr2, ([2]) Hr3, ([3]) Hr4, ([4]) Hr5, ([5]) Hr6, 
 				([6]) Hr7, ([7]) Hr8, ([8]) Hr9, ([9]) Hr10, ([10]) Hr11, ([11]) Hr12,
 				([12]) Hr13, ([13]) Hr14, ([14]) Hr15, ([15]) Hr16, ([16]) Hr17, ([17]) Hr18, 
 				([18]) Hr19, ([19]) Hr20, ([20]) Hr21, ([21]) Hr22, ([22]) Hr23, ([23]) Hr24, ([24]) Hr25, [period]
 		FROM	(  
 					SELECT	mi.[meter_id],
 							tmp.[channel], 
 							--CONVERT(DATETIME, tmp.[date], 103) [prod_date],
 							tmp.date [prod_date], 
 							CAST(tmp.[hour] AS TINYINT)+1 [HOUR],
 							CASE 
 								WHEN (tmp.[date] = md.[date] AND CAST(tmp.[hour] AS INT) + 1 = md.[hour])
 								THEN 0
 								ELSE CAST(tmp.[value] AS FLOAT) 
 							END [VALUE],[period]
 					FROM	#tmp_staging_table tmp
 							INNER JOIN [meter_id] mi 
 								ON mi.[recorderid] = tmp.[meter_id]
 							LEFT JOIN [mv90_DST] md 
 								ON md.[year] = YEAR(tmp.[date]) 
 								AND md.[insert_delete] = 'd'
								AND md.dst_group_value_id = @dst_group_value_id				
 				) p
 		PIVOT(
 				 SUM([VALUE]) FOR [HOUR] IN ([0], [1], [2], [3], [4], [5], [6], [7], [8], [9], 
 											[10], [11], [12], [13], [14], [15], [16], 
 											[17], [18], [19], [20], [21], [22], [23], 
 											[24])
 			 ) pvt		
 	END
 
 	-- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	SELECT	@col = 'Hr' + CAST(md.hour AS NVARCHAR) + ' = Hr' + CAST(md.hour AS NVARCHAR) + ' + ISNULL(Hr25, 0)'
 	FROM	#tmp_mv90_data_hour tmp
 	INNER JOIN mv90_DST md ON  md.date = tmp.prod_date AND md.insert_delete = 'i' AND md.dst_group_value_id = @dst_group_value_id
 
 	SET @sql = '
 				UPDATE	tmp
 				SET ' + @col + '
 				FROM #tmp_mv90_data_hour tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.prod_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(10)) + '
 				'
 	--PRINT @sql
 	EXEC(@sql)
 	
 	-- insert data into mv90_data summary table
	 
	INSERT INTO  [#temp_summary1](
 					[meter_id] ,
 					[gen_date] ,
 					[from_date] ,
 					[to_date] ,
 					[channel] ,
 					[volume] ) 
 	SELECT	a.meter_id,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' gen_date,
 			CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01' from_date,
 			DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1 to_date,
 			a.channel,
 			SUM(ISNULL(a.[Hr1],0) + ISNULL(a.[Hr2],0) + ISNULL(a.[Hr3],0) + ISNULL(a.[Hr4],0) + ISNULL(a.[Hr5],0) + ISNULL(a.[Hr6],0) + ISNULL(a.[Hr7],0) + ISNULL(a.[Hr8],0) + ISNULL(a.[Hr9],0) + ISNULL(a.[Hr10],0) + ISNULL(a.[Hr11],0) + ISNULL(a.[Hr12],0) + ISNULL(a.[Hr13],0) + ISNULL(a.[Hr14],0) + ISNULL(a.[Hr15],0) + ISNULL(a.[Hr16],0) + ISNULL(a.[Hr17],0) + ISNULL(a.[Hr18],0) + ISNULL(a.[Hr19],0) + ISNULL(a.[Hr20],0) + ISNULL(a.[Hr21],0) + ISNULL(a.[Hr22],0) + ISNULL(a.[Hr23],0) + ISNULL(a.[Hr24],0) ) volume
 	FROM [#tmp_mv90_data_hour] a
 	GROUP BY a.meter_id,a.channel,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01',DATEADD(MONTH,1,CONVERT(NVARCHAR(7),a.[prod_date],120)+'-01')-1	
 
 	IF @drilldown_level = 1
 	BEGIN
 		DELETE	mdh
 		FROM [mv90_data_hour] mdh		
 		INNER JOIN [mv90_data] md ON  md.[meter_data_id] = mdh.[meter_data_id]
 		INNER JOIN [#tmp_mv90_data_hour] tf
 			ON  tf.[meter_id] = md.[meter_id]
 			AND md.[channel] = tf.[channel]
 			AND mdh.[prod_date] = tf.[prod_date]
 		            
 		--DELETE	md
 		--FROM [mv90_data] md
 		--INNER JOIN [#temp_summary1] ts
 		--	ON md.[meter_id] = ts.[meter_id]
 		--	AND md.[channel] = ts.[channel]
 		--	AND [dbo].[FNAgetcontractmonth](md.[from_date]) = [dbo].[FNAgetcontractmonth](ts.[from_date])
 
 		INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id,granularity )
 		SELECT	t.meter_id, t.gen_date, t.from_date, t.to_date, t.channel, t.volume, 0, mi.granularity
 		FROM [#temp_summary1] t 
 			INNER JOIN meter_id mi ON mi.meter_id = t.meter_id 
			LEFT JOIN [mv90_data] mv ON mv.meter_id = mi.meter_id AND mv.channel = t.channel AND mv.from_date = t.from_date
		WHERE
			mv.meter_id IS NULL
		
		
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- insert if doesn't exists
 		EXEC('INSERT INTO [mv90_data] ( meter_id, gen_date, from_date, to_date,channel, volume,uom_id,granularity )
 			SELECT	t.meter_id, t.gen_date, t.from_date, t.to_date, t.channel, ABS(t.volume), su.source_uom_id, mi.granularity
 			FROM	[#temp_summary1] t 
 					INNER JOIN meter_id mi ON mi.meter_id = t.meter_id 
 					INNER JOIN (
 						SELECT DISTINCT meter_id, uom FROM ' + @temp_header_table + '
 						UNION
 						SELECT DISTINCT mi_sub.recorderid [meter_id], h_sub.uom [uom] 
 						FROM ' + @temp_header_table + ' h_sub
 								INNER JOIN meter_id mi ON mi.recorderid = h_sub.meter_id
 								INNER JOIN meter_id mi_sub ON mi_sub.meter_id = mi.sub_meter_id
 								INNER JOIN #temp_summary1 ts ON ts.meter_id = mi_sub.meter_id
 						WHERE ts.volume < 0	
 					) h ON h.meter_id = mi.recorderid 
 					INNER JOIN source_uom su ON su.uom_id = h.uom 
 					LEFT JOIN mv90_data mv ON mv.meter_id = t.meter_id AND mv.from_date = t.from_date AND mv.channel = t.[channel]
 			WHERE su.source_system_id = (SELECT TOP 1 source_system_id FROM ' + @import_temp_table_name + ')  
 			AND mv.meter_id IS NULL ')
 
 		UPDATE t SET t.Hr1 = ABS(t.Hr1), t.Hr2 = ABS(t.Hr2), t.Hr3 = ABS(t.Hr3), t.Hr4 = ABS(t.Hr4), t.Hr5 = ABS(t.Hr5), 
 		   t.Hr6 = ABS(t.Hr6), t.Hr7 = ABS(t.Hr7), t.Hr8 = ABS(t.Hr8), t.Hr9 = ABS(t.Hr9), t.Hr10 = ABS(t.Hr10), 
 		   t.Hr11 = ABS(t.Hr11), t.Hr12 = ABS(t.Hr12), t.Hr13 = ABS(t.Hr13), t.Hr14 = ABS(t.Hr14), t.Hr15 = ABS(t.Hr15), 
 		   t.Hr16 = ABS(t.Hr16), t.Hr17 = ABS(t.Hr17), t.Hr18 = ABS(t.Hr18), t.Hr19 = ABS(t.Hr19), t.Hr20 = ABS(t.Hr20), 
 		   t.Hr21 = ABS(t.Hr21), t.Hr22 = ABS(t.Hr22), t.Hr23 = ABS(t.Hr23), t.Hr24 = ABS(t.Hr24), t.Hr25 = ABS(t.Hr25) 
 		FROM [#tmp_mv90_data_hour] t
 			
 		--update  values if already exists
 		UPDATE mdh SET
 			mdh.Hr1 = ISNULL(tmdh.Hr1, mdh.Hr1), mdh.Hr2 = ISNULL(tmdh.Hr2, mdh.Hr2), mdh.Hr3 = ISNULL(tmdh.Hr3, mdh.Hr3), 
 			mdh.Hr4 = ISNULL(tmdh.Hr4, mdh.Hr4), mdh.Hr5 = ISNULL(tmdh.Hr5, mdh.Hr5), mdh.Hr6 = ISNULL(tmdh.Hr6, mdh.Hr6), 
 			mdh.Hr7 = ISNULL(tmdh.Hr7, mdh.Hr7), mdh.Hr8 = ISNULL(tmdh.Hr8, mdh.Hr8), mdh.Hr9 = ISNULL(tmdh.Hr9, mdh.Hr9), 
 			mdh.Hr10 = ISNULL(tmdh.Hr10, mdh.Hr10), mdh.Hr11 = ISNULL(tmdh.Hr11, mdh.Hr11), mdh.Hr12 = ISNULL(tmdh.Hr12, mdh.Hr12), 
 			mdh.Hr13 = ISNULL(tmdh.Hr13, mdh.Hr13), mdh.Hr14 = ISNULL(tmdh.Hr14, mdh.Hr14), mdh.Hr15 = ISNULL(tmdh.Hr15, mdh.Hr15), 
 			mdh.Hr16 = ISNULL(tmdh.Hr16, mdh.Hr16), mdh.Hr17 = ISNULL(tmdh.Hr17, mdh.Hr17), mdh.Hr18 = ISNULL(tmdh.Hr18, mdh.Hr18), 
 			mdh.Hr19 = ISNULL(tmdh.Hr19, mdh.Hr19), mdh.Hr20 = ISNULL(tmdh.Hr20, mdh.Hr20), mdh.Hr21 = ISNULL(tmdh.Hr21, mdh.Hr21), 
 			mdh.Hr22 = ISNULL(tmdh.Hr22, mdh.Hr22), mdh.Hr23 = ISNULL(tmdh.Hr23, mdh.Hr23), mdh.Hr24 = ISNULL(tmdh.Hr24, mdh.Hr24), 
 			mdh.Hr25 = ISNULL(tmdh.Hr25, mdh.Hr25) 
 		FROM [#tmp_mv90_data_hour]  tmdh
 			INNER JOIN [mv90_data] md ON md.[meter_id] = tmdh.[meter_id] AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 			INNER JOIN mv90_data_hour mdh ON md.meter_data_id = mdh.meter_data_id
 				AND tmdh.prod_date = mdh.prod_date
 
 		--insert new data if not exists
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period])
 		SELECT	md.[meter_data_id], tmdh.[prod_date], tmdh.[Hr1], tmdh.[Hr2], tmdh.[Hr3], tmdh.[Hr4], tmdh.[Hr5], tmdh.[Hr6], tmdh.[Hr7], tmdh.[Hr8], tmdh.[Hr9], tmdh.[Hr10], tmdh.[Hr11], tmdh.[Hr12], tmdh.[Hr13], tmdh.[Hr14], tmdh.[Hr15], tmdh.[Hr16], tmdh.[Hr17], tmdh.[Hr18], tmdh.[Hr19], tmdh.[Hr20], tmdh.[Hr21], tmdh.[Hr22], tmdh.[Hr23], tmdh.[Hr24], tmdh.[Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel
 				LEFT JOIN [mv90_data_hour] mdh ON mdh.meter_data_id = md.meter_data_id
 					AND tmdh.prod_date = mdh.prod_date
 		WHERE mdh.meter_data_id IS NULL
 	END
 	ELSE
 	BEGIN
 		--insert new data
 		INSERT INTO [mv90_data_hour] ( [meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], [uom_id],[period] )
 		SELECT	md.[meter_data_id], [prod_date], [Hr1], [Hr2], [Hr3], [Hr4], [Hr5], [Hr6], [Hr7], [Hr8], [Hr9], [Hr10], [Hr11], [Hr12], [Hr13], [Hr14], [Hr15], [Hr16], [Hr17], [Hr18], [Hr19], [Hr20], [Hr21], [Hr22], [Hr23], [Hr24], [Hr25], md.[uom_id],tmdh.[period]
 		FROM	[#tmp_mv90_data_hour] tmdh
 				INNER JOIN [mv90_data] md
 					ON md.[meter_id] = tmdh.[meter_id]
 					AND md.[from_date] = CONVERT(NVARCHAR(7),tmdh.[prod_date],120)+'-01'
 					AND tmdh.channel = md.channel

		--update summary volume
		UPDATE mv
			SET mv.volume = mvh.volume
 		FROM [#temp_summary1] t 
			INNER JOIN [mv90_data] mv ON mv.meter_id = t.meter_id AND mv.channel = t.channel AND mv.from_date = t.from_date
			CROSS APPLY(SELECT SUM(ISNULL(mdh.Hr1,0) + ISNULL(mdh.Hr2,0) + ISNULL(mdh.Hr3,0) + ISNULL(mdh.Hr4,0) + ISNULL(mdh.Hr5,0) + ISNULL(mdh.Hr6,0) + ISNULL(mdh.Hr7,0) + ISNULL(mdh.Hr8,0) + ISNULL(mdh.Hr9,0) + ISNULL(mdh.Hr10,0) + ISNULL(mdh.Hr11,0) + ISNULL(mdh.Hr12,0) + ISNULL(mdh.Hr13,0) + ISNULL(mdh.Hr14,0) + ISNULL(mdh.Hr15,0) + 
 						ISNULL(mdh.Hr16,0) + ISNULL(mdh.Hr17,0) + ISNULL(mdh.Hr18,0) + ISNULL(mdh.Hr19,0) + ISNULL(mdh.Hr20,0) + ISNULL(mdh.Hr21,0) + ISNULL(mdh.Hr22,0) + 
 						ISNULL(mdh.Hr23,0) + ISNULL(mdh.Hr24,0)) volume  FROM [mv90_data_hour] mdh WHERE mdh.meter_data_id = mv.meter_data_id) mvh
 	END
 
 	IF @drilldown_level = 2
 	BEGIN
 		-- update only vol if exists
 		EXEC('UPDATE mv SET mv.volume = mdv.vol_sum  
 			  FROM
 				(
 					SELECT SUM(ISNULL(mdh.Hr1,0) + ISNULL(mdh.Hr2,0) + ISNULL(mdh.Hr3,0) + ISNULL(mdh.Hr4,0) + ISNULL(mdh.Hr5,0) + ISNULL(mdh.Hr6,0) + 
 						ISNULL(mdh.Hr7,0) + ISNULL(mdh.Hr8,0) + ISNULL(mdh.Hr9,0) + ISNULL(mdh.Hr10,0) + ISNULL(mdh.Hr11,0) + ISNULL(mdh.Hr12,0) + ISNULL(mdh.Hr13,0) + ISNULL(mdh.Hr14,0) + ISNULL(mdh.Hr15,0) + 
 						ISNULL(mdh.Hr16,0) + ISNULL(mdh.Hr17,0) + ISNULL(mdh.Hr18,0) + ISNULL(mdh.Hr19,0) + ISNULL(mdh.Hr20,0) + ISNULL(mdh.Hr21,0) + ISNULL(mdh.Hr22,0) + 
 						ISNULL(mdh.Hr23,0) + ISNULL(mdh.Hr24,0) ) vol_sum, meter_data_id
 					FROM mv90_data_hour mdh GROUP BY mdh.meter_data_id
 				) mdv
 				INNER JOIN mv90_data mv ON mv.meter_data_id = mdv.meter_data_id
 				INNER JOIN #temp_summary1 t ON t.meter_id = mv.meter_id
 			   ')
 
 		-- logic to import aggregate_to_meter as defined in group_meter_mapping
 
 		EXEC('
 		UPDATE md SET md.volume = meter_agg.agg_volume 
 		FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 				INNER JOIN
 				(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, md.from_date, SUM(md.volume) agg_volume
 					FROM group_meter_mapping gmm2 
 					INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 					GROUP BY gmm2.aggregate_to_meter, md.from_date
 				) meter_agg ON meter_agg.agg_meter_id = md.meter_id
 					AND meter_agg.from_date = md.from_date
 		WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 			INSERT INTO mv90_data (meter_id, gen_date, from_date, to_date, channel, volume, uom_id, descriptions, granularity)
 			SELECT gmm.aggregate_to_meter, MAX(md.gen_date) gen_date, md.from_date, MAX(md.to_date) to_date, MAX(md.channel) channel, SUM(md.volume) volume, MAX(md.uom_id) uom_id, MAX(md.descriptions) descriptions, MAX(md.granularity)
 			FROM mv90_data md 
 				INNER JOIN meter_id mi ON mi.meter_id = md.meter_id
 				INNER JOIN ' + @temp_header_table + ' h ON h.meter_id = mi.recorderid
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				LEFT JOIN mv90_data md2 ON md2.meter_id = gmm.aggregate_to_meter
 					AND md2.from_date = md.from_date
 			WHERE h.error_code = ''0'' AND md2.meter_id IS NULL AND gmm.aggregate_to_meter IS NOT NULL
 			GROUP BY gmm.aggregate_to_meter, md.from_date	
 		')
 
 		EXEC('
 			UPDATE mdh SET mdh.Hr1 = meter_agg.agg_volume_hr1, mdh.Hr2 = meter_agg.agg_volume_hr2, mdh.Hr3 = meter_agg.agg_volume_hr3, 
 					   mdh.Hr4 = meter_agg.agg_volume_hr4, mdh.Hr5 = meter_agg.agg_volume_hr5, mdh.Hr6 = meter_agg.agg_volume_hr6, 
 					   mdh.Hr7 = meter_agg.agg_volume_hr7, mdh.Hr8 = meter_agg.agg_volume_hr8, mdh.Hr9 = meter_agg.agg_volume_hr9, 
 					   mdh.Hr10 = meter_agg.agg_volume_hr10, mdh.Hr11 = meter_agg.agg_volume_hr11, mdh.Hr12 = meter_agg.agg_volume_hr12, 
 					   mdh.Hr13 = meter_agg.agg_volume_hr13, mdh.Hr14 = meter_agg.agg_volume_hr14, mdh.Hr15 = meter_agg.agg_volume_hr15, 
 					   mdh.Hr16 = meter_agg.agg_volume_hr16, mdh.Hr17 = meter_agg.agg_volume_hr17, mdh.Hr18 = meter_agg.agg_volume_hr18, 
 					   mdh.Hr19 = meter_agg.agg_volume_hr19, mdh.Hr20 = meter_agg.agg_volume_hr20, mdh.Hr21 = meter_agg.agg_volume_hr21, 
 					   mdh.Hr22 = meter_agg.agg_volume_hr22, mdh.Hr23 = meter_agg.agg_volume_hr23, mdh.Hr24 = meter_agg.agg_volume_hr24, 
 					   mdh.Hr25 = meter_agg.agg_volume_hr25
 			FROM ' + @temp_header_table + ' h 
 					INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 					INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 					INNER JOIN mv90_data md ON md.meter_id = gmm.aggregate_to_meter
 					INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					INNER JOIN
 					(
 					SELECT gmm2.aggregate_to_meter agg_meter_id, mdh.prod_date, 
 						SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 						SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 						SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 						SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 						SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 						SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 						SUM(mdh.Hr25) agg_volume_hr25
 					FROM group_meter_mapping gmm2 
 						INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 						INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 					GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 					--ORDER BY gmm2.aggregate_to_meter, prod_date
 					) meter_agg ON meter_agg.agg_meter_id = md.meter_id	AND meter_agg.prod_date = mdh.prod_date
 			WHERE h.error_code = ''0''
 		')
 
 		EXEC('
 		INSERT INTO mv90_data_hour(meter_data_id, prod_date, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13, 
 								Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, uom_id)					
 		--  SELECT gmm2.aggregate_to_meter, mdh.prod_date
 		SELECT MAX(md_agg.meter_data_id) meter_data_id, mdh.prod_date,
 		  SUM(mdh.Hr1) agg_volume_hr1, SUM(mdh.Hr2) agg_volume_hr2, SUM(mdh.Hr3) agg_volume_hr3, SUM(mdh.Hr4) agg_volume_hr4, 
 		  SUM(mdh.Hr5) agg_volume_hr5, SUM(mdh.Hr6) agg_volume_hr6, SUM(mdh.Hr7) agg_volume_hr7, SUM(mdh.Hr8) agg_volume_hr8, 
 		  SUM(mdh.Hr9) agg_volume_hr9, SUM(mdh.Hr10) agg_volume_hr10, SUM(mdh.Hr11) agg_volume_hr11, SUM(mdh.Hr12) agg_volume_hr12, 
 		  SUM(mdh.Hr13) agg_volume_hr13, SUM(mdh.Hr14) agg_volume_hr14, SUM(mdh.Hr15) agg_volume_hr15, SUM(mdh.Hr16) agg_volume_hr16, 
 		  SUM(mdh.Hr17) agg_volume_hr17, SUM(mdh.Hr18) agg_volume_hr18, SUM(mdh.Hr19) agg_volume_hr19, SUM(mdh.Hr20) agg_volume_hr20, 
 		  SUM(mdh.Hr21) agg_volume_hr21, SUM(mdh.Hr22) agg_volume_hr22, SUM(mdh.Hr23) agg_volume_hr23, SUM(mdh.Hr24) agg_volume_hr24, 
 		  SUM(mdh.Hr25) agg_volume_hr25
 		  , MAX(md_agg.uom_id) uom_id  
 		FROM (
 				SELECT DISTINCT gmm.aggregate_to_meter
 				FROM ' + @temp_header_table + ' h 
 				INNER JOIN meter_id mi ON mi.recorderid = h.meter_id
 				INNER JOIN group_meter_mapping gmm ON gmm.meter_id = mi.meter_id
 				WHERE h.error_code = ''0''
 			) gmm_agg
 			INNER JOIN group_meter_mapping gmm2 ON gmm2.aggregate_to_meter = gmm_agg.aggregate_to_meter
 			INNER JOIN mv90_data md ON md.meter_id = gmm2.meter_id
 			INNER JOIN mv90_data_hour mdh ON mdh.meter_data_id = md.meter_data_id
 			INNER JOIN mv90_data md_agg ON md_agg.meter_id = gmm2.aggregate_to_meter
 				AND md_agg.from_date = md.from_date
 			LEFT JOIN mv90_data_hour mdh_old ON mdh_old.meter_data_id = md_agg.meter_data_id
 				AND mdh_old.prod_date = mdh.prod_date
 		WHERE 1 = 1
 			AND mdh_old.recid IS NULL
 		GROUP BY gmm2.aggregate_to_meter, mdh.prod_date
 		')
 	END
 	
 	SET @error_code = 's'  
 	IF EXISTS(SELECT * FROM #tmp_missing_meter_id)
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 		SELECT @process_id, 'Error', 'Import Data', @table_name, 'Data Error', 'Data error for Generator Id : ' + meter_id, '', @rules_names
 		FROM #tmp_missing_meter_id
 		SET @error_code = 'e'
 	END 
END

-- Logic for user defined tables
IF CHARINDEX('ixp_udt', @table_name) = 1
BEGIN
    DECLARE @udt_table_id INT
    DECLARE @udt_table_columns NVARCHAR(2000)
    DECLARE @udt_primary_column NVARCHAR(1000)
    DECLARE @udt_null_columns NVARCHAR(1000),
            @udt_null_columns_query NVARCHAR(1000),
            @table_name1 NVARCHAR(200)
    
    IF OBJECT_ID('tempdb..#table_exists') IS NOT NULL
        DROP TABLE #table_exists
 
    CREATE TABLE #table_exists (
         table_name NVARCHAR(100) COLLATE DATABASE_DEFAULT
    )
    EXEC (' INSERT INTO #temp_tot_count
             SELECT COUNT(*) AS totcount, '''+ @table_name+'''
             FROM   '+@import_temp_table_name)
    SET @sql = 'INSERT INTO #table_exists SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '''+ REPLACE(@table_name,'ixp_', '') + ''''
    EXEC(@sql)
    IF EXISTS(SELECT 1 FROM #table_exists)
    BEGIN
        SELECT @udt_table_id = udt_id FROM user_defined_tables
        WHERE udt_name = REPLACE(@table_name,'ixp_udt_', '')
 
        SELECT @udt_primary_column = column_name FROM user_defined_tables_metadata WHERE udt_id = @udt_table_id AND is_primary = 1
        SELECT @udt_null_columns_query = STUFF((SELECT ' OR ' + 'a.' + column_name + ' IS NULL'
                                    FROM user_defined_tables_metadata WHERE udt_id = @udt_table_id 
										AND column_nullable = 0
										AND is_primary = 0
                                    FOR XML PATH('')), 1, 3, '')
        SELECT @udt_null_columns = STUFF((SELECT ',' + column_name
                                    FROM user_defined_tables_metadata WHERE udt_id = @udt_table_id 
									AND column_nullable = 0
									AND is_primary = 0
                                    FOR XML PATH('')), 1, 1, '') 
    
        --IF @udt_primary_column IS NOT NULL
        --BEGIN
        --    SET @sql = 'INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
        --             SELECT a.temp_id,
        --                     '''+ @process_id+''',
        --                     ''Error'',
        --                     ''Import Data'',
        --                     '''+ @table_name+''',
        --                     ''Data Error'',
        --                     ''Duplicate data for '' + a.' + @udt_primary_column +'+ '' for column '+ @udt_primary_column +''',
        --                     ''Please check your data.'',
        --                     a.import_file_name
        --             FROM ' + REPLACE(@table_name,'ixp_', '') + 
        --            ' tbl INNER JOIN ' + @import_temp_table_name + ' a
        --             ON a.'+@udt_primary_column +'= tbl.'+@udt_primary_column
        --    EXEC(@sql)
        --END
 
        IF @udt_null_columns_query IS NOT NULL
        BEGIN
            SET @sql = 'INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
                     SELECT a.temp_id,
                             '''+ @process_id+''',
                             ''Error'',
                             ''Import Data'',
                             '''+ @table_name+''',
                             ''Data Error'',
                             ''Null value not allowed for column ' + @udt_null_columns +''',
                             ''Please check your data.'',
                             a.import_file_name
                     FROM ' + @import_temp_table_name + ' a
                     WHERE 1 = 1 AND
                    ' + @udt_null_columns_query
            EXEC(@sql)
        END
 
		--Check for data repetition
		DECLARE @des_column_name NVARCHAR(MAX), @des_column_value NVARCHAR(MAX), @join_clause NVARCHAR(MAX)
		SELECT @des_column_name = COALESCE(@des_column_name + ', ' ,'') + udtm.column_name
			, @des_column_value = COALESCE(@des_column_value + ' + '', '' + ','') + 
				CASE 
					WHEN udtm.column_type = 104304 THEN 'ISNULL(dbo.FNADateFormat(a.[' + udtm.column_name + ']), ''NULL'')'
					ELSE 'ISNULL(a.[' + udtm.column_name + '], ''NULL'')'
				END
				, @join_clause = COALESCE(@join_clause +' AND ' ,'') + 'ISNULL(a.[' + udtm.column_name + '], -1) = ISNULL(b.[' + udtm.column_name + '], -1)'
		FROM user_defined_tables_metadata udtm
		INNER JOIN user_defined_tables udt ON udt.udt_id = udtm.udt_id
		WHERE udtm.unique_combination = 1 AND udt.udt_name = REPLACE(@table_name,'ixp_udt_', '')
		ORDER BY udtm.sequence_no
	
		SET @sql = '
			INSERT INTO #error_status(temp_id, error_number, template_values, import_file_name)
			SELECT a.temp_id,
				10007 error_number,
				dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML(dbo.FNABuildNameValueXML('''', ''<column_name>'', ''' + @des_column_name + '''), ''<repetition_count>'', CAST(b.notimes AS NVARCHAR)), ''<column_value>'', '+@des_column_value+' ),
				a.import_file_name
			FROM ' + @import_temp_table_name + ' a
			LEFT JOIN #error_status es ON a.temp_id = es.temp_id
			INNER JOIN (
				SELECT ' + @des_column_name + ', COUNT(1) notimes
				FROM ' + @import_temp_table_name + '
				GROUP BY ' + @des_column_name + '
				HAVING COUNT(1) > 1
			) b ON 1 = 1
				AND es.temp_id IS NULL
				AND (
					'
					+ ISNULL(@join_clause, ' 1 = 1') + '
				)'
			
		EXEC(@sql)

		EXEC('
			INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
			SELECT es.temp_id, ''' + @process_id + ''', elt.message_status, ''Import Data'', ''' + @table_name + ''' , elt.message_type 
				, dbo.FNAReplaceEmailTemplateParams(elt.message, es.template_values), dbo.FNAReplaceEmailTemplateParams(elt.recommendation, es.template_values)
				, es.import_file_name
			FROM #error_status es
			INNER JOIN message_log_template elt ON elt.message_number = es.error_number
			')

		--data repetition check ends

        EXEC('DELETE ' + @import_temp_table_name + '
              FROM   #import_status
              INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
 
        SELECT @udt_table_columns = STUFF((SELECT ',' + column_name
            FROM user_defined_tables_metadata WHERE udt_id = @udt_table_id AND is_identity = 0
            FOR XML PATH('')), 1, 1, '') 
		
		--start delete if exists
		SET @join_clause = NULL	--Reset this variable before proceeding
		SELECT  @join_clause = COALESCE(@join_clause + ' AND ','') + 
								CASE WHEN column_type = 104304 THEN 'TRY_CAST(udt.' + column_name + ' AS DATE)'	
									ELSE 'CAST(udt.'+ column_name + ' AS  NVARCHAR(1000))'  END 
									+ ' = ' + CASE WHEN column_type = 104304 THEN 'dbo.FNAClientToSqlDate(tmp.' + column_name + ')' --Expected date format of @staging_column_name is user date format
										ELSE 'CAST(tmp.'+column_name + ' AS  NVARCHAR(1000))'  
								END


		FROM user_defined_tables_metadata WHERE udt_id = @udt_table_id AND unique_combination = 1
		--select @join_clause


		SET @sql = ''
		IF (@table_name NOT IN ('ixp_udt_customer_deals_header_info', 'ixp_udt_customer_monthly_volume_info'))
		BEGIN
			SELECT @sql = 'DELETE udt from udt_' +  REPLACE(@table_name,'ixp_udt_', '') + ' udt INNER JOIN ' + @import_temp_table_name + ' tmp ON ' + @join_clause
		END
		--select @sql

		EXEC(@sql)
		--ends delete if exists
		SET @sql = ''
		IF (@table_name = 'ixp_udt_component_criteria_score')
		BEGIN
			SET @sql = '
				INSERT INTO udt_component_criteria_score (
					component
					, component_weight
					, counterparty
					, criteria
					, criteria_weight
					, effective_date
					, lower_ratio
					, score
					, upper_ratio
				)
				SELECT component
					, a.component_weight
					, sc.source_counterparty_id
					, a.criteria
					, a.criteria_weight
					, a.effective_date
					, a.lower_ratio
					, a.score
					, a.upper_ratio 
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN source_counterparty sc
					ON a.counterparty = sc.counterparty_name
			'
		END
		ELSE IF (@table_name = 'ixp_udt_cpty_balance_sheet')
		BEGIN
			SET @sql = '
				INSERT INTO udt_cpty_balance_sheet (
					adjusted_assets
					, adjusted_common_equity
					, average_adjusted_assets
					, counterparty
					, effective_date
					, fx_rate
					, net_income
					, shareholders_equity
				)
				SELECT a.adjusted_assets
					, a.adjusted_common_equity
					, a.average_adjusted_assets
					, sc.source_counterparty_id
					, a.effective_date
					, a.fx_rate
					, a.net_income
					, a.shareholders_equity
				FROM ' + @import_temp_table_name + ' a
				INNER JOIN source_counterparty sc
					ON a.counterparty = sc.counterparty_name
			'
		END
		ELSE IF (@table_name NOT IN ('ixp_udt_customer_deals_header_info', 'ixp_udt_customer_monthly_volume_info'))
		BEGIN
			SET @sql = '
				INSERT INTO ' + REPLACE(@table_name,'ixp_', '') + ' (' + @udt_table_columns + ')
				SELECT ' +  @udt_table_columns + ' 
				FROM ' + @import_temp_table_name + '
			'
		END

 
        EXEC(@sql)
    END
    ELSE
    BEGIN
        SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name]) 
                     SELECT Top 1 a.temp_id,
                             '''+ @process_id+''',
                             ''Error'',
                             ''Import Data'',
                             '''+ @table_name+''',
                             ''Error'',
                             ''Table does not exists'',
                             ''Run script to create table'',
                             a.import_file_name
                     FROM ' + @import_temp_table_name + ' a
                    '
            EXEC(@sql)
        EXEC('DELETE FROM ' + @import_temp_table_name)
    END
END

IF @table_name  = 'ixp_demand_volume_template'
BEGIN
	EXEC (' 
		INSERT INTO #temp_tot_count
 	    SELECT COUNT(*) AS totcount, ''' + @table_name + '''
 	    FROM ' + @import_temp_table_name + '
	')
 	        
 	EXEC('
		INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[import_file_name])
 		SELECT a.temp_id
 			, ''' + @process_id + '''
 			, ''Error''
 			, ''Import Data''
 			, ''' + @table_name + '''
 			, ''Data Error''
 			, ''Data error for Location '' + ISNULL(a.location , ''NULL'') +  '' is not present in the system.''
 			, ''Please check your Data''
 			, a.import_file_name
 		FROM ' + @import_temp_table_name + ' a
 		LEFT JOIN source_minor_location sml 
			ON sml.location_id = a.location
 		LEFT JOIN #import_status ims
			ON a.temp_id = ims.temp_id
 		WHERE ims.temp_id IS NULL 
			AND sml.source_minor_location_id IS NULL
 	')      
 		 
 	 EXEC('
		DELETE a
 	    FROM #import_status ims
 	    INNER JOIN ' + @import_temp_table_name + ' a
			ON  ims.temp_id = a.temp_id
	')        
 	
	CREATE TABLE #updated_deals_demand_vol (
		source_deal_detail_id INT
		, source_deal_header_id INT
	)
	   
	SET @sql = '
		UPDATE sdd
 		SET sdd.deal_volume = ISNULL(a.volume, sdd.deal_volume)
		OUTPUT INSERTED.source_deal_detail_id, INSERTED.source_deal_header_id 
		INTO #updated_deals_demand_vol (source_deal_detail_id, source_deal_header_id)	
 		FROM ' + @import_temp_table_name + ' a  
 		LEFT JOIN source_minor_location sml 
			ON sml.location_id = a.location
 		LEFT JOIN source_deal_header_template AS sdht 
			ON sdht.template_name = ''Demand Deal''
 		INNER JOIN source_deal_header sdh 
			ON sdh.template_id = sdht.template_id
 	    INNER JOIN source_deal_detail sdd 
			ON sdd.source_deal_header_id = sdh.source_deal_header_id 
 				AND sdd.location_id = sml.source_minor_location_id 
				AND sdd.term_start >= a.term_start 
				AND sdd.term_end <= a.term_end
 		LEFT JOIN #import_status ims
			ON  a.temp_id = ims.temp_id
		WHERE  1=1
		AND ims.temp_id IS NULL
 	'

 	EXEC(@sql) 	

	-- position starts
	DECLARE @_process_id NVARCHAR(500) = dbo.FNAGetNewID()
	DECLARE @_user_login_id NVARCHAR(100) = dbo.FNADBUser()
	DECLARE @_report_position_deals NVARCHAR(600)

	SET @_report_position_deals = dbo.FNAProcessTableName('report_position', @_user_login_id, @_process_id)

	DECLARE @_sql NVARCHAR(MAX)
	SET @_sql = '
		SELECT source_deal_header_id [source_deal_header_id], ''u'' [action]
		INTO ' + @_report_position_deals + '
		FROM #updated_deals_demand_vol
		GROUP BY source_deal_header_id
	'
	EXEC(@_sql)

	DECLARE @_pos_job_name NVARCHAR(200) =  'calc_position_breakdown_' + @_process_id
	SET @_sql = 'spa_calc_deal_position_breakdown NULL,''' + @_process_id + ''''
	EXEC spa_run_sp_as_job @_pos_job_name,  @_sql, 'Position Calculation', @_user_login_id
END
IF @table_name = 'ixp_generic_mapping'
BEGIN	
	
	/** Error validate if not exists in  gmh */
	SET @sql = ' 
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id
			, 10002
			, ''
				{
				"column_name": "Mapping Name",
				"column_value": "'' + a.mapping_name + ''"
				}
				''
			, a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		LEFT JOIN generic_mapping_header gmh ON gmh.mapping_name = a.mapping_name
		LEFT JOIN generic_mapping_definition gmd ON gmd.mapping_table_id = gmh.mapping_table_id
		WHERE gmd.mapping_table_id IS NULL
		'
	
	EXEC(@sql)

	/*These process tables are created in ixp_rules. 
	These are equivalent to ixp_columns and ixp_import_data_source for generic mapping rule as its source column header is UDF label and unique/required definition are
	defiend in generic mapping definition table.
	*/
	DECLARE @tbl_ixp_columns NVARCHAR(200) = dbo.FNAProcessTableName('dyn_ixp_columns', @user_login_id, @process_id)
	, @tbl_ixp_import_data_mapping NVARCHAR(200) = dbo.FNAProcessTableName('dyn_ixp_import_data_mapping', @user_login_id, @process_id)

	IF OBJECT_ID('tempdb..#src_ixp_column_detail') IS NOT NULL 
	DROP TABLE #src_ixp_column_detail
	
	CREATE TABLE #src_ixp_column_detail(rule_id INT
		, ixp_tables_id INT
		, ixp_columns_id INT
		, ixp_columns_name NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, source_column_name NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, seq INT
		, is_major BIT
		, field_label NVARCHAR(200) COLLATE DATABASE_DEFAULT
		, field_type NCHAR(1) COLLATE DATABASE_DEFAULT
		, sql_string NVARCHAR(MAX) COLLATE DATABASE_DEFAULT
	)

	SET @sql = '
		INSERT INTO #src_ixp_column_detail(rule_id, ixp_tables_id, ixp_columns_id, ixp_columns_name, source_column_name, seq, is_major, field_label, field_type, sql_string)
		SELECT rs.rule_id, rs.ixp_tables_id, rs.ixp_columns_id, rs.ixp_columns_name, rs.source_column_name, rs.seq, rs.is_major
			, udft.Field_label,udft.Field_type
			, IIF(CHARINDEX(''sp'', LTRIM(udft.sql_string)) = 1, ''EXEC '' + udft.sql_string, NULLIF(udft.sql_string,'''')) sql_string
		FROM #source_file_column_table  rs
		INNER JOIN  ' + @tbl_ixp_import_data_mapping + '  sh ON sh.dest_column = rs.ixp_columns_id
		INNER join user_defined_fields_template udft ON udft.field_id = sh.udf_field_id '
		
	EXEC(@sql)
	
	--combo udf values store : start
	/* cursor ot store drop down value */
	DECLARE @gmv_col_id NVARCHAR(500) ,@gmv_col_value NVARCHAR(500)
	
	DECLARE cur_gm_udf_sql_values cursor fast_forward
	FOR
	SELECT DISTINCT 'EXEC [spa_execute_query] ''' + REPLACE(sql_string,'''','''''') + '''' [sql_string]
		, field_label
	FROM #src_ixp_column_detail 
	WHERE sql_string IS NOT NULL

	OPEN cur_gm_udf_sql_values
		FETCH NEXT FROM cur_gm_udf_sql_values INTO @sql_string_c, @field_label_c 

		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF OBJECT_ID('tempdb..#gmv_udf') is not null DROP TABLE #gmv_udf
				CREATE TABLE #gmv_udf(a INT)
			
			EXEC spa_get_output_schema_or_data @sql_query = @sql_string_c
				, @process_table_name = '#gmv_udf'
				, @data_output_col_count = @total_columns OUTPUT
				, @flag = 'data'

			--rename first column to 'id' and second column to 'value', so that can be used on join condition confidently. :START
			SET  @gmv_col_id = NUll 
			SET @gmv_col_value = NUll 

			SELECT TOP 1 @gmv_col_id =  [name]
			FROM tempdb.sys.columns 
			WHERE object_id = object_id('tempdb..#gmv_udf') 
			ORDER BY column_id ASC


			SELECT TOP 1 @gmv_col_value =  [name]
			FROM tempdb.sys.columns 
			WHERE object_id = object_id('tempdb..#gmv_udf') and [name] <> @gmv_col_id
			ORDER BY column_id ASC

			SET @gmv_col_id = '[#gmv_udf].[' + @gmv_col_id + ']'
			SET @gmv_col_value = '[#gmv_udf].[' + @gmv_col_value + ']'
			
			/*Rename first column to 'id' and second column to 'value', so that can be used on join condition.*/
			EXEC tempdb.sys.sp_rename @gmv_col_id,N'id',N'COLUMN'
			EXEC tempdb.sys.sp_rename @gmv_col_value,N'value',N'COLUMN'
			
			--/* Insert Field label with it's combo list udf_value name and id to create master list inorder to validate  */
			INSERT INTO #tmp_udf_values_combo(field_label, udf_value, value_id)
			SELECT @field_label_c, t.[value], t.id
			FROM  #gmv_udf t

			FETCH NEXT FROM cur_gm_udf_sql_values INTO @sql_string_c, @field_label_c 
		END
	CLOSE cur_gm_udf_sql_values
	DEALLOCATE cur_gm_udf_sql_values

	
	--Collection of combo udf values ends
	
	/*Resolve generic value */
	SELECT imd.ixp_columns_name, tuvc.udf_value, tuvc.value_id
	INTO  #gmv_value 
	FROM #src_ixp_column_detail  imd
	INNER JOIN #tmp_udf_values_combo tuvc ON tuvc.field_label = imd.Field_label
	
	/* Final step to insert generic mapping values. */

	DECLARE @sql_col NVARCHAR(MAX) 
		, @sql_select NVARCHAR(MAX) 
		, @sql_join NVARCHAR(MAX) 
		, @sql_clause NVARCHAR(MAX)
		, @where_clause NVARCHAR(MAX)
		, @sql_update_col  NVARCHAR(MAX)

	SELECT @sql_col = COALESCE(@sql_col + ',', '') + rs.ixp_columns_name
		, @sql_update_col = COALESCE(@sql_update_col + ',', '') 
			+  rs.ixp_columns_name + '=' + iif(rs.Field_type NOT IN ('c','d'), 'tmp.' + ixp_columns_name ,'rs' + REPLACE(rs.source_column_name, 'column','') + '.value_id')

		, @sql_select = COALESCE(@sql_select + ',', '') + iif(rs.Field_type NOT IN ('c','d'), 'tmp.' + ixp_columns_name ,'
					rs' + REPLACE(rs.source_column_name, 'column','') + '.value_id') + ' AS ' + rs.ixp_columns_name
		 
		, @sql_join = COALESCE(@sql_join , '') 
				+ iif(rs.Field_type NOT IN ('c','d'), '' ,'
					LEFT JOIN #gmv_value rs' + REPLACE(rs.source_column_name, 'column','') + ' ON tmp.' + rs.ixp_columns_name + ' = rs' + REPLACE(rs.source_column_name, 'column','') + '.udf_value AND rs' + REPLACE(rs.source_column_name, 'column','') + '.ixp_columns_name = ''' + rs.ixp_columns_name + '''
					')  
		, @sql_clause = COALESCE(@sql_clause , '') 
				+ ' AND ISNULL(gmv.' + + rs.ixp_columns_name + ','''')' + ' = ' + iif(rs.Field_type NOT IN ('c','d'), 'ISNULL(tmp.' + ixp_columns_name + ','''')' ,'ISNULL(rs' + REPLACE(rs.source_column_name, 'column','') + '.value_id,'''')' + '
					') 
	
	FROM  #src_ixp_column_detail rs 

	/* Remove error data from import process */
	EXEC('DELETE a
		FROM   #error_status es
		INNER JOIN ' + @import_temp_table_name + ' a ON es.temp_id = a.temp_id
		LEFT JOIN message_log_template mlt ON mlt.message_number = es.error_number  
		WHERE ISNULL(mlt.message_status, es.message_status) = ''Error'''
		)
	EXEC spa_validate_udf_data_type @flag = 'data_validate', @process_id = @process_id, @validate_table_name = @import_temp_table_name, @rules_id = @rules_id
	----Main import logic starts	
	IF OBJECT_ID(N'tempdb..#ic') IS NOT NULL
	DROP TABLE #ic

	CREATE TABLE #ic(ixp_columns_id INT
		, is_major INT
		, is_required INT
	)

	EXEC('INSERT INTO #ic(ixp_columns_id, is_major, is_required)
		SELECT ixp_columns_id, is_major, is_required FROM ' + @tbl_ixp_columns + ' ')

	IF EXISTS(SELECT 1 FROM #ic WHERE is_major = 1)
	BEGIN
		SET @sql_clause  = NULL
		SELECT @sql_clause = COALESCE(@sql_clause , '') 
				+ ' AND ISNULL(gmv.' + ixp_columns_name + ','''')' 
					+ ' = ' + iif(rs.Field_type NOT IN ('c','d'), 'ISNULL(tmp.' + ixp_columns_name + ','''')' ,'ISNULL(rs' + REPLACE(rs.source_column_name, 'column','') + '.value_id,'''')' + '
					') 
		FROM  #src_ixp_column_detail rs
		INNER JOIN #ic i ON i.ixp_columns_id = rs.ixp_columns_id
		WHERE i.is_major = 1
		-----------list missing option column to exclude from update statement-----------------
		/*Static query string is build at begining of this script. 
		Replace destination table name and execute to collect matched destination column name with ixp_columns_name dynamically. .
		*/
		SET @destination_table_name = N'generic_mapping_values'
		SET @sql = REPLACE(@dest_ixp_col_qry,'<destination_table_name>',@destination_table_name)			
		EXEC(@sql)

		/*
		Note:- Verify destination table and columns with ixp column. If any miss match data found then correct it.
		*/
		EXEC('UPDATE  i
			SET table_name = ''generic_mapping_values''
				, destination_column_name = ''mapping_table_id''
			FROM ' + @ixp_destination_column_mapping + ' i
			WHERE i.ixp_column_name = ''mapping_name''
		')
	
		--Execute to populate data into #destination_column_name
		EXEC(@dest_col_qry)

		--Collect destination column to be excluded from update statement.
		SELECT @dest_columns_to_exclude = COALESCE(@dest_columns_to_exclude + ',','') + destination_column_name
		FROM #destination_column_name
		----------------------- missing optional column list ends-----------------------------------------------

		/* Update generic_mapping_values if unique set of data exists */
		SELECT @sql =  'UPDATE gmv					 
			SET '
			+ @sql_update_col +
		
			+ '	FROM ' + @import_temp_table_name + ' tmp 
				INNER JOIN generic_mapping_header gmh ON gmh.mapping_name = tmp.mapping_name
				INNER JOIN generic_mapping_definition gmd ON gmd.mapping_table_id = gmh.mapping_table_id
			' 
				 + @sql_join 

				+ ' INNER JOIN generic_mapping_values gmv ON gmv.mapping_table_id = gmd.mapping_table_id '
				+ @sql_clause
		
		IF @dest_columns_to_exclude IS NOT NULL
		BEGIN		
			SELECT @rebuild_updt_stmt = update_query
				, @rebuild_status = output_status 
			FROM [FNARemoveColumnsFromUpdate] (@sql, @dest_columns_to_exclude)
  
			--select 'updated up sql', @rebuild_updt_stmt

			IF @rebuild_status = 'success'
			BEGIN
 				EXEC(@rebuild_updt_stmt)
			END
			ELSE
			BEGIN
				RAISERROR
					(N'Failed to rebuild update statement. Check update statement',
					10, -- Severity.
					1 -- State.
					);
			END	
		END	
		ELSE
		BEGIN
			--select 'update', @sql,@import_temp_table_name,@sql_join,@sql_clause,@dest_columns_to_exclude		
			EXEC(@sql)
		END
	END
		
	/* Insert into generic_mapping_values if unique set of data doesnot exists */
	SET @sql = 'INSERT INTO generic_mapping_values (mapping_table_id,'+ @sql_col + ')'		
		+ ' SELECT gmd.mapping_table_id,' + @sql_select + '
		FROM ' + @import_temp_table_name + ' tmp 
		INNER JOIN generic_mapping_header gmh ON gmh.mapping_name = tmp.mapping_name
		INNER JOIN generic_mapping_definition gmd ON gmd.mapping_table_id = gmh.mapping_table_id
		' 
			+ @sql_join 
		+ ' LEFT JOIN generic_mapping_values gmv ON gmv.mapping_table_id = gmd.mapping_table_id'
		+ @sql_clause
		+ ' WHERE  gmv.generic_mapping_values_id IS NULL'
	--select 'insert', @sql,@sql_col, @sql_select,@sql_join,@sql_clause
	EXEC(@sql)

END	--Generic Mapping Import : END
IF @table_name = 'ixp_generation_lt_import'
BEGIN
	Declare @final_table_gen_lt varchar(500)
	SELECT @final_table_gen_lt = concat(@import_temp_table_name,'_final')
	
	EXEC('UPDATE a
		  SET term_start = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.term_start = dd.user_date
	')

	EXEC('UPDATE a
		  SET term_end = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.term_end = dd.user_date
	')
	
	EXEC('UPDATE a
		  SET upload_date = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd
			ON a.upload_date = dd.user_date
	')

	Exec ('INSERT into udt_generation_lt 
			(upload_date, refrence_id, term_start,term_end,deal_volume,product,fixed_price,price_curve)
			select  upload_date, deal_id, term_start,term_end, volume,product,price, [index]  from ' + @import_temp_table_name)
	
	
	EXEC spa_calc_weighted_average_price @flag = 'c'
	, @source_process_table = @import_temp_table_name
	, @calc_process_table = @final_table_gen_lt

	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+ @final_table_gen_lt )

SET @sql = 'INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
 				SELECT temp_id,
 					   ''' + @process_id + ''', 
 					   ''Error'',
 					   ''Import Data'',
 					   ''' + @table_name+ ''',
 					   ''Error'',
 					   ''Deal not found in Application '',
 					   ''Please import after correcting deal values'',
 					   import_file_name
 				FROM  ' + @import_temp_table_name + ' a   
 				LEFT JOIN source_deal_header sdh ON sdh.deal_id = a.deal_id
				WHERE sdh.source_deal_header_id IS NULL
 				 '
 	--PRINT(@sql)
 	EXEC(@sql)
 	
 	EXEC('DELETE ' + @import_temp_table_name + '
 	    FROM #import_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #import_status.temp_id = a.temp_id')
		

	IF OBJECT_ID('tempdb..#tmp_gen_lt_deal_table') IS NOT NULL
 		DROP TABLE #tmp_deal_table
 		
 	CREATE TABLE #tmp_gen_lt_deal_table (
 			[source_deal_header_id]  INT,
 			[deal_id]                VARCHAR(150) COLLATE DATABASE_DEFAULT, 
 			[term_date]				 DATETIME, 
			[term_end]				 DATETIME,
 			[volume]                 FLOAT, 
			[price]					 FLOAT,
			[internal_desk_id]		 INT,
 			import_file_name         VARCHAR(200) COLLATE DATABASE_DEFAULT,
 			[has_error]              BIT,
			)
  
 	SET @sql = 'INSERT INTO #tmp_gen_lt_deal_table(deal_id, source_deal_header_id)
 				SELECT a.deal_id,
 				       sdh.source_deal_header_id 				       
 				FROM  ' + @final_table_gen_lt + ' a INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id'
 	
 	--PRINT @sql
  EXEC (@sql) 	

  SET @sql = 'INSERT INTO #tmp_gen_lt_deal_table(deal_id, source_deal_header_id)
 				SELECT sdh_2.deal_id,
 				       sdh_2.source_deal_header_id 				       
 				FROM  ' + @final_table_gen_lt + ' a 
				INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id
				INNER JOIN  source_deal_header sdh_2  On sdh_2.close_reference_id = sdh.source_deal_header_id'
 	
 	--PRINT @sql
  EXEC (@sql) 

   SET @sql = 'INSERT INTO #tmp_gen_lt_deal_table(deal_id, source_deal_header_id)
 				SELECT sdh_3.deal_id,
 				       sdh_3.source_deal_header_id 				       
 				FROM  ' + @final_table_gen_lt + ' a 
				INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id
				INNER JOIN  source_deal_header sdh_2  On sdh_2.close_reference_id = sdh.source_deal_header_id
				INNER JOIN source_deal_header sdh_3 on sdh_3.close_reference_id = sdh_2.source_deal_header_id
				'
 	
 	--PRINT @sql
  EXEC (@sql) 
	
	EXEC('UPDATE sdd 
		  set sdd.deal_volume = ISNULL(a.volume,sdd.deal_volume)
			 ,sdd.fixed_price =ISNULL(a.price,sdd.fixed_price)			
		  FROM '+ @final_table_gen_lt +' a INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id
		  INNER JOIN source_deal_detail sdd on sdd.source_deal_header_id = sdh.source_deal_header_id
											   AND sdd.term_start = a.term_start
											   AND sdd.term_end = a.term_end')
	EXEC (' UPDATE sdd 
			SET sdd.deal_volume = ISNULL(a.volume,sdd.deal_volume)
			 ,sdd.fixed_price =ISNULL(a.price,sdd.fixed_price)			
		  FROM '+ @final_table_gen_lt +' a 
		  INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id
		  INNER JOIN  source_deal_header sdh2 ON sdh2.close_reference_id  = sdh.source_deal_header_id
		  INNER JOIN source_deal_detail sdd on sdd.source_deal_header_id = sdh2.source_deal_header_id
											   AND sdd.term_start = a.term_start
											   AND sdd.term_end = a.term_end')
	EXEC (' UPDATE sdd 
			SET sdd.deal_volume = ISNULL(a.volume,sdd.deal_volume)
			 ,sdd.fixed_price =ISNULL(a.price,sdd.fixed_price)			
		  FROM '+ @final_table_gen_lt +' a 
		  INNER JOIN  source_deal_header sdh  On sdh.deal_id = a.deal_id
		  INNER JOIN  source_deal_header sdh2 ON sdh2.close_reference_id  = sdh.source_deal_header_id
		  INNER JOIN  source_deal_header sdh3 ON sdh3.close_reference_id  = sdh2.source_deal_header_id
		  INNER JOIN source_deal_detail sdd on sdd.source_deal_header_id = sdh3.source_deal_header_id
											   AND sdd.term_start = a.term_start
											   AND sdd.term_end = a.term_end')



	DECLARE @report_position_deals51 VARCHAR(300), 
			@process_id51 VARCHAR(300),
			@pos_job_name51 VARCHAR(600)
			
 	SET @process_id51 = REPLACE(newid(),'-','_')
 	SET @report_position_deals51 = dbo.FNAProcessTableName('report_position', @user_login_id, @process_id51)
 	
 	EXEC ('CREATE TABLE ' + @report_position_deals51 + '( source_deal_header_id INT, action CHAR(1))')
 	SET @sql = 'INSERT INTO ' + @report_position_deals51 + '(source_deal_header_id,action) 
 				SELECT  t.source_deal_header_id,
 				       ''i''
 				FROM #tmp_gen_lt_deal_table t
  		        GROUP BY t.source_deal_header_id'
 	EXEC(@sql)
 	
  	SET @pos_job_name5 =  'calc_position_breakdown_' + @process_id51
 	SET @sql = 'spa_update_deal_total_volume NULL,'''+@process_id51+''',0,1,''' + @user_login_id + ''''
 	EXEC spa_run_sp_as_job @pos_job_name5,  @sql, 'generating_report_table', @user_login_id

END

IF @table_name = 'renewable_forecast_import_template'
BEGIN
	/***update user date to sql date***/
	EXEC('UPDATE a
		  SET term = dd.sql_date_string
		  FROM ' + @import_temp_table_name + ' a
		  INNER JOIN #date_details dd ON a.term = dd.user_date
	')
	/***END OF date update***/

	EXEC('DELETE ' + @field_compare_table) 	
 	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''hr1'',''volume'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_detail_hour'',''is_dst'',''is_dst'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''period'',''hour'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''deal_detail_hour'',''period'',''minute'')')

	
 	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''forecast_profile'', ''profile_name'', ''b.external_id = a.profile_name'', ''e'')'
		)
	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'
	
 	EXEC ('
		IF NOT EXISTS(
 			SELECT 1
 			FROM adiha_process.sys.tables
 			WHERE [name] =  REPLACE(''' + @final_stg_table + ''',''adiha_process.dbo.'','''')
				AND [type] = ''U''
 		)
 		SELECT * INTO ' + @final_stg_table + ' FROM ' + @import_temp_table_name
	)

	-- Trigger Start
	IF OBJECT_ID(N'tempdb..#temp_table_forecast_renew') IS NOT NULL
		DROP TABLE #temp_table_forecast_renew

	CREATE TABLE #temp_table_forecast_renew (
		[Hour] NVARCHAR(10) COLLATE DATABASE_DEFAULT, 
		minute NVARCHAR(20) COLLATE DATABASE_DEFAULT, 
		is_dst NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		[profile_name] NVARCHAR(100) COLLATE DATABASE_DEFAULT, 
		term_date NVARCHAR(50) COLLATE DATABASE_DEFAULT, 
		volume NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		mapping_name NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		import_file_name NVARCHAR(MAX) COLLATE DATABASE_DEFAULT,
		source_system_id NVARCHAR(10) COLLATE DATABASE_DEFAULT, 
		granularity	NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		temp_id NVARCHAR(20) COLLATE DATABASE_DEFAULT
	)

	--Validation for empty value for hour for 5 min,10 min, 15 min, 30 min and hourly meter id
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
 		  SELECT a.temp_id,
			  10001,
			  CASE 
			  	  WHEN a.hour IS NULL AND a.minute IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + '', '' + scmm.source_column_name + ''"}''
			  	  WHEN a.hour IS NULL THEN ''{"column_name": "'' + scmh.source_column_name + ''"}''
			  	  WHEN a.minute IS NULL THEN ''{"column_name": "'' + scmm.source_column_name + ''"}''
			  END,
			  a.import_file_name
		  FROM ' + @final_stg_table + ' a
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''hour'' -- ixp_columns_name
          ) scmh
		  CROSS APPLY (
			 SELECT source_column_name
             FROM #source_file_column_table
             WHERE ixp_columns_name = ''minute'' -- ixp_columns_name
          ) scmm
		  LEFT JOIN forecast_profile fp ON fp.external_id = a.profile_name
		  LEFT JOIN #error_status ON a.temp_id = #error_status.temp_id
		  WHERE #error_status.temp_id IS NULL
			  AND ((a.hour IS NULL AND fp.granularity IN (994, 987, 989, 995, 982)) OR (a.minute IS NULL AND fp.granularity IN (994, 987, 989, 995)))
	')

	EXEC('
		DELETE a
 	    FROM #error_status
 		INNER JOIN ' + @final_stg_table + ' a ON #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')


	SET @sql = '
		UPDATE ' + @final_stg_table + '
		SET hour = 25
		WHERE is_dst = 1
	'
	EXEC (@sql)

	
	EXEC('INSERT INTO #temp_table_forecast_renew ([Hour], minute, is_dst, profile_name, term_date, volume, mapping_name, import_file_name, source_system_id,temp_id)
	SELECT [Hour], minute, is_dst, profile_name, term, volume, mapping_name,import_file_name, source_system_id, temp_id
	FROM ' + @final_stg_table)
	

	UPDATE b
	SET granularity = 
		CASE 
			WHEN fp.granularity = 994 THEN '10'
			WHEN fp.granularity = 987 THEN '15'
			WHEN fp.granularity = 989 THEN '30'
			WHEN fp.granularity = 995 THEN '5'
			WHEN fp.granularity = 993 THEN 'Annually'
			WHEN fp.granularity = 982 THEN 'Hourly'
			WHEN fp.granularity = 980 THEN 'Monthly'
			WHEN fp.granularity = 981 THEN 'Daily'
		END
	FROM forecast_profile fp
	INNER JOIN #temp_table_forecast_renew b ON b.[profile_name] = fp.profile_name
	INNER JOIN static_data_value sdv ON sdv.value_id = fp.granularity AND sdv.[type_id] = 978

	UPDATE f
	SET hour = ((hour * 60 + minute) - f.granularity ) / 60,
		minute = ((hour * 60 + minute) - f.granularity) % 60 
	FROM #temp_table_forecast_renew f
	WHERE granularity IN ('5','10','15', '30')

	UPDATE #temp_table_forecast_renew
	SET hour = hour + 1
	WHERE granularity IN ('5','10','15', '30')
		AND hour <> 25

		
	EXEC('DELETE FROM ' + @import_temp_table_name)

	EXEC ('INSERT INTO ' + @import_temp_table_name + '(Hour, minute, is_dst, profile_name, term, volume, mapping_name,import_file_name, source_system_id)
		SELECT Hour, minute, is_dst, profile_name, term_date, volume,mapping_name, import_file_name, source_system_id FROM #temp_table_forecast_renew
	')


	-- Trigger End


 	IF OBJECT_ID('tempdb..#tmp_import_profiles_renew') IS NOT NULL
 	DROP TABLE #tmp_import_profiles_renew
 	
 	IF OBJECT_ID('tempdb..#temp_deal_detail_hour_renew') IS NOT NULL
 	DROP TABLE #temp_deal_detail_hour_renew
 	
 	IF OBJECT_ID('tempdb..#tmp_location_profile_renew') IS NOT NULL
 	DROP TABLE #tmp_location_profile_renew
 	
 	CREATE TABLE #tmp_import_profiles_renew (profile_id INT)

	--Validation for is_dst
	EXEC('INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
		SELECT a.temp_id,
			10016,
			''{
				"column_value": "'' + a.is_dst + ''",
				"column_name": "'' + scm.source_column_name + ''"
			}'',
			a.import_file_name
		FROM ' + @import_temp_table_name + ' a
		CROSS APPLY (
			SELECT source_column_name
            FROM #source_file_column_table
            WHERE ixp_columns_name = ''is_dst'' -- ixp_columns_name
        ) scm
		LEFT JOIN #error_status ON  a.temp_id = #error_status.temp_id			
		WHERE  #error_status.temp_id IS NULL
			AND a.is_dst NOT IN (0, 1)
 	')
 	
 	--save profile id to be inserted in the tmep table
 	SET @sql = 'INSERT INTO #tmp_import_profiles_renew (profile_id)
 				SELECT profile_id FROM forecast_profile fp
 				INNER JOIN ( 
 					SELECT DISTINCT profile_name FROM ' + @import_temp_table_name + ' 
 				)tmp ON tmp.profile_name = fp.external_id'
 	EXEC(@sql)
	 	 
 	SELECT term_date, profile_id, Hr1, Hr2,
 	       Hr3, Hr4, Hr5, Hr6, Hr7, Hr8,
 	       Hr9, Hr10, Hr11, Hr12, Hr13, Hr14,
 	       Hr15, Hr16, Hr17, Hr18, Hr19, Hr20,
 	       Hr21, Hr22, Hr23, Hr24, Hr25,
 	       partition_value, [period]
 	INTO #temp_deal_detail_hour_renew
 	FROM deal_detail_hour
 	WHERE  1 = 2


 	EXEC('
		DELETE '+@import_temp_table_name + '
 	    FROM #error_status
 	    INNER JOIN ' + @import_temp_table_name + ' a ON  #error_status.temp_id = a.temp_id
		INNER JOIN message_log_template mlt ON mlt.message_number = #error_status.error_number
		WHERE mlt.message_status = ''Error''
	')

	--For Daily profiles if hour is null
	EXEC( 'UPDATE tmp SET hour = 1 
		   FROM ' + @import_temp_table_name + ' tmp
 		   INNER JOIN forecast_profile fp 
			   ON tmp.profile_name = fp.external_id
		   WHERE fp.granularity IN (980, 981, 993)
		   AND tmp.hour IS NULL
	')

 	SET @sql = CAST('' AS NVARCHAR(MAX)) + N' INSERT INTO #temp_deal_detail_hour_renew
 				(	term_date, profile_id,
 					Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13,
 					Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, partition_value, [period]
 				)
 				SELECT term --date in YYMMDD format
 					, profile_id
 					, [1] Hr1, [2] Hr2, [3] Hr3, [4] Hr4, [5] Hr5, [6] Hr6
 					, [7] Hr7, [8] Hr8, [9] Hr9, [10] Hr10, [11] Hr11, [12] Hr12
 					, [13] Hr13, [14] Hr14, [15] Hr15, [16] Hr16, [17] Hr17, [18] Hr18
 					, [19] Hr19, [20] Hr20, [21] Hr21, [22] Hr22, [23] Hr23, [24] Hr24, [25] Hr25
 					, profile_id partition_value, minute
 				FROM
 				(  SELECT fp.profile_id, tmp.term, tmp.hour, CAST(tmp.volume AS float) volume, tmp.import_file_name, tmp.minute
 					FROM ' + @import_temp_table_name + ' tmp
 					INNER JOIN forecast_profile fp ON tmp.profile_name = fp.external_id
 				) p
 				PIVOT
 				(MAX(volume)
 					 FOR [hour] IN 
 					 (	[1], [2], [3], [4], [5], [6], 
 						[7], [8], [9], [10], [11], [12], 
 						[13], [14], [15], [16], [17], [18], 
 						[19], [20], [21], [22], [23], [24], [25])
 				) pvt'
 				
 	EXEC spa_print @sql
 	EXEC(@sql)
 	   
 	--delete existing deal hourly data for incoming profiles
 	DELETE deal_detail_hour
 	FROM   deal_detail_hour ddh
 	INNER JOIN #temp_deal_detail_hour_renew ip ON  ddh.profile_id = ip.profile_id AND ip.term_date = ddh.term_date
 	
 
	-- sum of the DST hours in the Hr3 = Hr3 + Hr25   
 	SELECT	@col = 'Hr' + CAST(md.hour AS NVARCHAR) + ' = Hr' + CAST(md.hour AS NVARCHAR) + ' + ISNULL(Hr25, 0)'
 	FROM	#temp_deal_detail_hour_renew tmp
	INNER JOIN mv90_DST md ON  md.date = tmp.term_date AND md.insert_delete = 'i'
		AND md.dst_group_value_id = @dst_group_value_id
 
 	SET @sql = '
 				UPDATE	tmp
 				SET ' + @col + '
 				FROM #temp_deal_detail_hour_renew tmp
 				INNER JOIN mv90_DST md
 					ON  md.date = tmp.term_date
 					AND md.insert_delete = ''i''
					AND md.dst_group_value_id = ' + CAST(@dst_group_value_id AS NVARCHAR(10)) + '
 				'
 	--PRINT @sql
 	EXEC(@sql)
 	 
 	INSERT INTO deal_detail_hour
 	(	term_date, profile_id,
 		Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12, Hr13,
 		Hr14, Hr15, Hr16, Hr17, Hr18, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25, [period]
 	)
 	SELECT term_date 
 		, profile_id
 		, Hr1, Hr2, Hr3, Hr4, Hr5, Hr6
 		, Hr7, Hr8, Hr9, Hr10, Hr11, Hr12
 		, Hr13, Hr14, Hr15,  Hr16, Hr17, Hr18
 		, Hr19, Hr20, Hr21, Hr22, Hr23, Hr24, Hr25
 		, [period]
 	FROM #temp_deal_detail_hour_renew
 	
 	UPDATE forecast_profile SET available = 1
 	FROM forecast_profile fp
 	INNER JOIN #tmp_import_profiles_renew ip ON fp.profile_id = ip.profile_id
 	

	Declare @final_table_forecast varchar(500)
	SELECT @final_table_forecast = concat(@import_temp_table_name,'_renewable')

	EXEC spa_calc_weighted_average_price @flag = 'c'
	, @source_process_table = @import_temp_table_name
	, @calc_process_table = @final_table_forecast

		
	IF OBJECT_ID(N'tempdb..#temp_table_shaped_renew') IS NOT NULL    
	DROP TABLE #temp_table_shaped_renew
	
	CREATE TABLE #temp_table_shaped_renew (
		[deal_id] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[term_date] NVARCHAR(20) COLLATE DATABASE_DEFAULT,
		[hr] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[minute] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[is_dst] NVARCHAR(10) COLLATE DATABASE_DEFAULT,
		[Volume] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[Price] NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[granularity] 	NVARCHAR(100) COLLATE DATABASE_DEFAULT,
		[leg] NVARCHAR(10) COLLATE DATABASE_DEFAULT
	)
	
	EXEC('INSERT INTO #temp_table_shaped_renew ([deal_id], [term_date], [hr], [minute],[is_dst], [Volume],[Price])
		  SELECT a.[deal_id], a.[term_start], a.[hr], a.[period], a.[is_dst], a.[Volume], a.[Price]
		  FROM ' + @final_table_forecast + ' a ')

		  
	UPDATE t
	SET granularity = 
		CASE 
		WHEN sdh.profile_granularity = 994 THEN '10'
			WHEN sdh.profile_granularity = 987 THEN '15'
			WHEN sdh.profile_granularity = 989 THEN '30'
			WHEN sdh.profile_granularity = 995 THEN '5'
			WHEN sdh.profile_granularity = 993 THEN 'Annually'
			WHEN sdh.profile_granularity = 982 THEN 'Hourly'
			WHEN sdh.profile_granularity = 980 THEN 'Monthly'
			WHEN sdh.profile_granularity = 981 THEN 'Daily'
		END
	FROM #temp_table_shaped_renew t
	LEFT JOIN source_deal_header sdh
		ON sdh.deal_id = t.[deal_id]

		--select * from #temp_table_shaped

	UPDATE t
	SET hr = IIF(LEN(((hr*60 + minute)- granularity)/60) =1 , '0' + CAST(((hr*60 + minute)- granularity)/60 AS NVARCHAR(10)), 
		CAST(((hr*60 + minute)- granularity)/60 AS NVARCHAR(10))) + ':' + 
		SUBSTRING('000'+ CAST(((hr*60 + minute) - granularity)%60  AS NVARCHAR(11)), LEN('000'+ CAST(((hr*60 + minute) - granularity)%60  AS NVARCHAR(11)))-1 , 15)
	FROM #temp_table_shaped_renew t
	WHERE granularity IN ('5','10','15', '30')
	
	UPDATE t
	SET hr = IIF(LEN(t.[hr] - 1) = 2, CAST(t.[hr] - 1 AS NVARCHAR(10)), '0' + CAST(t.[hr] - 1 AS NVARCHAR(10))) + ':00'
	FROM #temp_table_shaped_renew t
	WHERE granularity IN ('Hourly')
	
	UPDATE t
	SET hr = '00:00'
	FROM #temp_table_shaped_renew t
	WHERE granularity IN ('Daily')

	EXEC('DELETE FROM ' + @final_table_forecast)
	
	EXEC ('ALter Table ' + @final_table_forecast + ' ALTER COLUMN hr VARCHAR(500)')

	EXEC ('INSERT INTO ' + @final_table_forecast + ' ([deal_id], [term_start], [hr], [period], [is_dst], [Volume], [Price])
		  SELECT [deal_id], [term_date], 
			  CASE WHEN CHARINDEX('':'', [hr])<0 THEN CAST([hr] AS NVARCHAR(20)) + '':00'' 
			       ELSE [hr] 
			  END [hr], 
		      [minute],
			  [is_dst],
			  [Volume],
			  [Price]			
		FROM #temp_table_shaped_renew
	')
			
 	IF OBJECT_ID('tempdb..#tmp_unique_deals') IS NOT NULL
 		DROP TABLE #tmp_unique_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_missing_deals') IS NOT NULL
 		DROP TABLE #tmp_missing_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_non_shaped_deals') IS NOT NULL
 		DROP TABLE #tmp_non_shaped_deals
 	
 	IF OBJECT_ID('tempdb..#tmp_hour_block_term') IS NOT NULL
 	    DROP TABLE #tmp_hour_block_term
 	    
 	IF OBJECT_ID('tempdb..#tmp_invalid_deals') IS NOT NULL
 	    DROP TABLE #tmp_invalid_deals
 	 
 	 IF OBJECT_ID('tempdb..#hour_block_term') IS NOT NULL
 	    DROP TABLE #hour_block_term

 	IF OBJECT_ID('tempdb..#tmp_second_table_renew') IS NOT NULL
 		DROP TABLE #tmp_second_table_renew
 		
 	CREATE TABLE #tmp_second_table_renew (
 		[source_deal_header_id]  INT,
 		[deal_id]                NVARCHAR(150) COLLATE DATABASE_DEFAULT,
 		[deal_detail_id]         INT,
 		[term_date]				 DATETIME,
 		hr						 NVARCHAR(100) COLLATE DATABASE_DEFAULT,
 		[volume]                 FLOAT,
 		[price]                  FLOAT,
 		[is_dst]				 BIT,
		leg						INT
 	)
 
 	--copy all data from staging table to second one
 	SET @sql = 'INSERT INTO #tmp_second_table_renew(deal_id, source_deal_header_id, [term_date], [hr], volume, price, is_dst)
 				SELECT a.deal_id,
 				       NULL,
 				       CAST(a.term_start AS NVARCHAR(20)),
 				       CAST(a.[hr] AS NVARCHAR) [hr],
 				       a.volume  volume,
 				       CAST(a.price AS NUMERIC(38, 20)) price,
 				       a.is_dst
 				FROM  ' + @final_table_forecast + ' a	'
 	
 	--PRINT @sql
 	EXEC (@sql)
 	
	CREATE NONCLUSTERED INDEX ix_pt_tmp1 ON #tmp_second_table_renew(deal_id, source_deal_header_id, deal_detail_id) INCLUDE( term_date, hr)
	
	----PRINT '7'
 	SELECT @min_date = MIN(term_date), @max_date = MAX(term_date)
 	FROM #tmp_second_table_renew
 	
 	SET @baseload_block_type = '12000'	-- Internal Static Data



	SELECT @baseload_block_define_id = CAST(value_id AS NVARCHAR(10))
 	FROM static_data_value 
 	WHERE [type_id] = 10018
 		AND code LIKE 'Base Load' -- External Static Data
 		
 	IF @baseload_block_define_id IS NULL
 		SET @baseload_block_define_id = 'NULL'
  	
 	-- @start_ts selected from create_ts when the job was run by  spa_interface_adaptor_job
 	SELECT @start_ts = ISNULL(MIN(create_ts),GETDATE()) FROM import_data_files_audit WHERE process_id = @process_id
 	
 	SET @sql = 'UPDATE ' + @final_table_forecast + ' SET hr = 3 WHERE hr = ''3B'''  
 	EXEC (@sql)  
 	  
 	SET @sql = 'UPDATE ' + @final_table_forecast + ' SET price = NULL WHERE price = ''0''' 
 	EXEC (@sql)
 	
 	--store unique deal_ids whose source_deal_header_id is not given
 	CREATE TABLE #tmp_unique_deals_renew (
 		source_deal_header_id  INT,
 		deal_id NVARCHAR(100) COLLATE DATABASE_DEFAULT
 	)
 	
 	--insert unique deal_ids to map to its source_deal_header_id
 	INSERT INTO #tmp_unique_deals_renew(source_deal_header_id, deal_id)
 	SELECT sdh.source_deal_header_id, tst.deal_id
 	FROM #tmp_second_table_renew tst
 	LEFT JOIN source_deal_header sdh ON  tst.deal_id = sdh.deal_id
 	WHERE  tst.source_deal_header_id IS NULL AND tst.deal_id IS NOT NULL
	GROUP BY tst.deal_id, sdh.source_deal_header_id

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TUD ON #tmp_unique_deals_renew (source_deal_header_id, deal_id)
	 	
 	--update source_deal_header_id for those whose deal_id is given in file, but not source_deal_header_id
 	--After updating, source_deal_header_id won't have NULL values in #tmp_second_table, but deal_id may be NULL
 	UPDATE tst 
 	SET tst.source_deal_header_id = tud.source_deal_header_id
 	FROM #tmp_second_table_renew tst
 	LEFT JOIN #tmp_unique_deals_renew tud ON  tst.deal_id = tud.deal_id
 	WHERE  tst.source_deal_header_id IS NULL AND tst.deal_id IS NOT NULL
 	
 	--PRINT 'update source_deal_header_id for those whose deal_id is given in file'
 	
 	--get deal_detail_id for all records
 	UPDATE tst
	SET tst.deal_detail_id = sdd.source_deal_detail_id
 	FROM #tmp_second_table_renew tst
     INNER JOIN source_deal_detail sdd
         ON  tst.source_deal_header_id = sdd.source_deal_header_id
		AND tst.term_date BETWEEN sdd.term_start AND sdd.term_end
		--AND ISNULL(tst.leg, 1) = sdd.leg

		 	
 	--PRINT ('10')            
 	CREATE TABLE #tmp_missing_deals_renew (
 		source_deal_header_id  INT ,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 	
 	CREATE TABLE #tmp_invalid_deals_renew (
 		source_deal_header_id  INT ,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		term_date              DATETIME,
 		leg                    INT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 	
 	CREATE TABLE #tmp_non_shaped_deals_renew (
 		source_deal_header_id  INT,
 		deal_id                NVARCHAR(1000) COLLATE DATABASE_DEFAULT,
 		import_file_name       NVARCHAR(200) COLLATE DATABASE_DEFAULT
 	)
 
 	INSERT INTO #tmp_missing_deals_renew (source_deal_header_id, deal_id)
 	SELECT tmp.source_deal_header_id, MAX(tmp.deal_id) deal_id
 	FROM #tmp_second_table_renew tmp
 	LEFT JOIN source_deal_header sdh ON sdh.source_deal_header_id = tmp.source_deal_header_id
 	WHERE sdh.source_deal_header_id IS NULL AND sdh.deal_id IS NULL
 	GROUP BY tmp.source_deal_header_id
	
	
 	-- get data mismatched deals (i.e. deals having non existing term or leg)
 	INSERT INTO #tmp_invalid_deals_renew (source_deal_header_id,
 		deal_id,
 		term_date,
 		leg 		
	)
 	SELECT tmp.source_deal_header_id,
 	       MAX(tmp.deal_id) deal_id,
 	       tmp.term_date,
 	       tmp.leg
 	FROM   #tmp_second_table_renew tmp
 	WHERE  tmp.deal_detail_id IS NULL
 	       AND NOT EXISTS (
 	               SELECT 1
 	               FROM   #tmp_missing_deals_renew
 	               WHERE  deal_id = tmp.deal_id) --exclude missing deals in this check
 	      AND (tmp.source_deal_header_id IS NOT NULL AND tmp.deal_id IS NOT NULL)
 	 GROUP BY tmp.source_deal_header_id, tmp.term_date, tmp.leg 
	 

	 		
     --get non shaped deals, as those deals won't be imported
 	INSERT INTO #tmp_non_shaped_deals_renew(source_deal_header_id, deal_id)
 	SELECT tst.source_deal_header_id, MAX(tst.deal_id) deal_id
 	FROM #tmp_second_table_renew tst
 	INNER JOIN source_deal_header sdh ON tst.source_deal_header_id = sdh.source_deal_header_id
 	LEFT JOIN static_data_value sdv ON sdv.value_id = sdh.internal_desk_id
 	WHERE ISNULL(sdv.value_id, -1) NOT IN  (17302, 17300)
 	GROUP BY tst.source_deal_header_id
	
 	
-- delete missing deals from staging table      
 	DELETE tmp
 	FROM   #tmp_second_table_renew tmp
 	INNER JOIN #tmp_missing_deals_renew tmd ON tmd.source_deal_header_id = tmp.source_deal_header_id
 	
 	-- delete non-shaped deals from staging table
 	DELETE tmp
 	FROM   #tmp_second_table_renew tmp
     INNER JOIN #tmp_non_shaped_deals_renew tnsd ON  tnsd.source_deal_header_id = tmp.source_deal_header_id
 	
 	--PRINT 'DELETE ERRORNEOUS DEALS'
 	-- delete errorneous deals
 	DELETE tmp
 	FROM #tmp_second_table_renew tmp
    INNER JOIN #tmp_invalid_deals_renew tid ON tmp.source_deal_header_id = tid.source_deal_header_id
 		AND tid.term_date = tmp.term_date
 		AND tid.leg = tmp.leg
      
     --copy the required portion of holiday_term_block for performance reasons		
 	CREATE TABLE #tmp_hour_block_term_renew (
 		block_define_id   INT,
 		block_type        INT,
 		term_date         DATETIME,
 		hol_date          DATETIME,
 		term_start        DATETIME,
 		volume_mult       INT,
 		dst_applies       NVARCHAR(1) COLLATE DATABASE_DEFAULT,
 		add_dst_hour      INT,
 		on_peak_off_peak  INT,
 		[hour]            NVARCHAR(100) COLLATE DATABASE_DEFAULT
 	)
     	
    --SELECT * INTO #hour_block_term FROM hour_block_term WHERE term_date BETWEEN @min_date AND @max_date 
 	SELECT hbt.* 
 	INTO #hour_block_term_renew 
	FROM  hour_block_term hbt
 	INNER JOIN (
             SELECT DISTINCT COALESCE(spcd.block_type, sdh.block_type, @baseload_block_type)
                    block_type,
                    COALESCE(
                        spcd.block_define_id,
                        sdh.block_define_id,
                        @baseload_block_define_id
                    ) block_define_id,tz.dst_group_value_id
             FROM #tmp_second_table_renew tst
             INNER JOIN source_deal_detail sdd ON tst.deal_detail_id = sdd.source_deal_detail_id
			 INNER JOIN vwDealTimezone tz on tz.source_deal_header_id = sdd.source_deal_header_id
				AND tz.curve_id = ISNULL(sdd.curve_id, -1)
				AND tz.location_id = ISNULL(sdd.location_id, -1)
             INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
             LEFT JOIN source_price_curve_def spcd ON  spcd.source_curve_def_id = sdd.curve_id
     ) sdd ON hbt.block_type = sdd.block_type AND hbt.block_define_id = sdd.block_define_id
	 AND hbt.dst_group_value_id = sdd.dst_group_value_id
    WHERE term_date BETWEEN @min_date AND @max_date 
     
 	--PRINT ('14')
 	CREATE NONCLUSTERED INDEX IX_TERM_DATE_HBT ON #hour_block_term_renew (term_date)
	 	
 	INSERT INTO #tmp_hour_block_term_renew(block_define_id, block_type, term_date, hol_date, term_start, volume_mult, dst_applies, add_dst_hour, on_peak_off_peak, [hour])
 	SELECT block_define_id,
 		   block_type,
 		   term_date,
 		   hol_date,
 		   term_start,
 		   volume_mult,
 		   dst_applies,
 		   add_dst_hour,
 		   on_peak_off_peak,
 		   REPLACE(hr, 'hr', '') [hour]
 	FROM   (
 			SELECT DISTINCT hb.block_define_id, hb.block_type, hb.term_date, hb.hol_date, hb.term_start, hb.volume_mult
 				, hb.dst_applies, hb.add_dst_hour, hb.Hr1, hb.Hr2, hb.Hr3, hb.Hr4, hb.Hr5, hb.Hr6, hb.Hr7, hb.Hr8, hb.Hr9
 				, hb.Hr10, hb.Hr11, hb.Hr12, hb.Hr13, hb.Hr14, hb.Hr15, hb.Hr16, hb.Hr17, hb.Hr18, hb.Hr19, hb.Hr20, hb.Hr21
 				, hb.Hr22, hb.Hr23, hb.Hr24 
 			FROM #tmp_second_table_renew tst
 			INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = tst.source_deal_header_id
 			INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tst.deal_detail_id
 					AND sdd.source_deal_header_id = sdh.source_deal_header_id					

 			INNER JOIN #hour_block_term_renew hb ON hb.term_date = tst.term_date 
 			WHERE hb.term_date BETWEEN @min_date AND @max_date
 		   ) hbt
 		   UNPIVOT(
 			   on_peak_off_peak FOR [hr] IN (Hr1, Hr2, Hr3, Hr4, Hr5, Hr6, 
 											  Hr7, Hr8, Hr9, Hr10, Hr11, 
 											  Hr12, Hr13, Hr14, Hr15, Hr16, 
 											  Hr17, Hr18, Hr19, Hr20, Hr21, 
 											  Hr22, Hr23, Hr24)
 		   ) AS unpivot_hour
 	--PRINT ('15')
    
	CREATE NONCLUSTERED INDEX IX_PT_TMP_THBT ON #tmp_hour_block_term_renew(hour, term_date) INCLUDE(block_type, block_define_id, on_peak_off_peak)
	
	IF OBJECT_ID('tempdb..#sdh_temp_renew') IS NOT NULL
		DROP TABLE #sdh_temp_renew 
	
	IF OBJECT_ID('tempdb..#sdd_temp_renew') IS NOT NULL
		DROP TABLE #sdd_temp_renew
		
	IF OBJECT_ID('tempdb..#spcd_renew') IS NOT NULL
		DROP TABLE #spcd_renew 
		
	SELECT sdh.source_deal_header_id
		, sdh.deal_id
		, MAX(sdh.internal_desk_id) internal_desk_id
		, MAX(sdh.profile_granularity) profile_granularity
		, MAX(sdh.block_define_id) block_define_id
		, MAX(sdh.block_type) block_type
		, MAX(template_id) template_id
		INTO #sdh_temp_renew
	FROM source_deal_header sdh 
	INNER JOIN #tmp_second_table_renew tst ON  
		1 = 1 
		--AND sdh.deal_id = tst.[deal_id] 
		AND sdh.source_deal_header_id = tst.source_deal_header_id
	GROUP BY sdh.source_deal_header_id, sdh.deal_id
	

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #sdh_temp_renew (source_deal_header_id) INCLUDE(block_type, block_define_id, template_id)

	SELECT sdd.source_deal_header_id, sdd.source_deal_detail_id, MAX(sdd.curve_id) curve_id
		INTO #sdd_temp_renew
	FROM source_deal_detail sdd 
	INNER JOIN #sdh_temp_renew sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
	GROUP BY sdd.source_deal_header_id, sdd.source_deal_detail_id
	
	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #sdd_temp_renew (source_deal_header_id, source_deal_detail_id) INCLUDE(curve_id)

	SELECT MAX(spcd.block_type) block_type, MAX(spcd.block_define_id) block_define_id, spcd.source_curve_def_id, sdd.source_deal_detail_id
		INTO #spcd_renew
	FROM source_price_curve_def spcd 
	INNER JOIN #sdd_temp_renew sdd ON sdd.curve_id = spcd.source_curve_def_id
	GROUP BY sdd.source_deal_detail_id, spcd.source_curve_def_id

	CREATE NONCLUSTERED INDEX IX_SOURCE_DEAL_HEADER_ID_TEMP_TOTAL_VOLUME ON #spcd_renew (source_curve_def_id) INCLUDE(block_define_id, block_type)

	IF OBJECT_ID('tempdb..#temp_source_deal_detail_hour_data_renew') IS NOT NULL
		DROP TABLE #temp_source_deal_detail_hour_data_renew 

	SELECT sdd.source_deal_detail_id,
 			tst.[term_date], --date in MMDDYYYY format
 			CASE WHEN @table_name = 'renewable_forecast_import_template' THEN
 				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 			ELSE tst.[hr] END [hr],
 			MAX(CAST(tst.volume AS NUMERIC(16,8))) volume, 
 			MAX(CAST(tst.price AS NUMERIC(16,8))) price,
			tst.is_dst,
 			MAX(IIF(sdh.internal_desk_id=17300,NULL,COALESCE(sdh.profile_granularity, sdht.profile_granularity, sdht.hourly_position_breakdown, 982))) granularity			
		INTO #temp_source_deal_detail_hour_data_renew
 	FROM #tmp_second_table_renew tst
 	INNER JOIN #sdh_temp_renew sdh ON  1 = 1 
		--AND sdh.deal_id = tst.[deal_id]
 		AND sdh.source_deal_header_id = tst.source_deal_header_id
 	INNER JOIN #sdd_temp_renew sdd ON  sdd.source_deal_detail_id = tst.deal_detail_id
 		AND sdd.source_deal_header_id = sdh.source_deal_header_id
 	INNER JOIN #spcd_renew spcd ON spcd.source_curve_def_id = sdd.curve_id
		AND sdd.source_deal_detail_id = spcd.source_deal_detail_id
	INNER JOIN source_deal_header_template sdht ON sdh.template_id = sdht.template_id
	INNER JOIN source_deal_detail_template sddt ON sdht.template_id = sddt.template_id
 	LEFT JOIN #tmp_hour_block_term_renew thbt 
 		ON thbt.hour = CASE WHEN @table_name = 'renewable_forecast_import_template' then LEFT(tst.hr, CHARINDEX(':', tst.hr)-1) + 1 ELSE tst.hr END
 		AND  thbt.term_date = tst.term_date 
 		AND thbt.block_type =  COALESCE(spcd.block_type, sdh.block_type, @baseload_block_type )
 		AND thbt.block_define_id = COALESCE(spcd.block_define_id,
 											sdh.block_define_id,
 											@baseload_block_define_id )
 	LEFT JOIN source_deal_detail_hour sddh ON  sddh.source_deal_detail_id = tst.deal_detail_id
 		AND sddh.hr = CASE WHEN @table_name = 'renewable_forecast_import_template' THEN
 				   				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 					  ELSE tst.[hr] END
		AND sddh.term_date = tst.term_date
	GROUP BY sdd.source_deal_detail_id,
 			tst.[term_date], CASE WHEN @table_name = 'renewable_forecast_import_template' THEN
 				RIGHT('0' + CAST(LEFT(tst.[hr], CHARINDEX(':', tst.[hr])-1) + 1 AS NVARCHAR(20)), 2) + ':' + RIGHT(tst.[hr],2)
 			ELSE tst.[hr] END, tst.is_dst

		

	-- merge insert an update	 
	MERGE source_deal_detail_hour AS sddh
	USING (SELECT source_deal_detail_id	
			, term_date	
			, hr	
			, volume	
			, price	
			, is_dst	
			, granularity			
		FROM #temp_source_deal_detail_hour_data_renew) AS tsddh
	ON sddh.source_deal_detail_id = tsddh.source_deal_detail_id
		AND sddh.term_date	= tsddh.term_date	
		AND sddh.[hr]		= tsddh.[hr]		
		AND sddh.is_dst		= tsddh.is_dst		 
	WHEN MATCHED THEN 
		UPDATE SET 
			 sddh.volume			= tsddh.volume			
			, sddh.price			= tsddh.price			
			, sddh.is_dst			= tsddh.is_dst			
			, sddh.granularity		= tsddh.granularity				
	WHEN NOT MATCHED THEN
		INSERT(source_deal_detail_id, term_date, hr, volume, price, is_dst, granularity)
		VALUES(tsddh.source_deal_detail_id, tsddh.term_date, tsddh.hr, tsddh.volume, tsddh.price, tsddh.is_dst, tsddh.granularity);
	      	  
     /*******************************************Update total monthly volume and price START********************************************************/
 	DECLARE @vol_frequency_renew  NCHAR(1),
 	        @deal_volume_renew    NUMERIC(38, 20),
 	        @price_renew         NUMERIC(38, 20)
 	
 	CREATE TABLE #tmp_deal_volume_renew(
 		average_vol  NUMERIC(38, 20),
 		sum_vol      NUMERIC(38, 20)
 	)
 	
 	SELECT @vol_frequency_renew = sdd.deal_volume_frequency
 	FROM   #tmp_second_table_renew tst
 	INNER JOIN source_deal_detail sdd ON sdd.source_deal_detail_id = tst.deal_detail_id
	INNER JOIN #sdd_temp_renew sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
	 
 	
 	UPDATE sdd
 	SET deal_volume = IIF(sum_sddh.internal_desk_id=17300, sdd.deal_volume, sum_sddh.deal_volume), sdd.deal_volume_frequency = sdd.deal_volume_frequency
 	FROM source_deal_detail sdd
	INNER JOIN #sdd_temp_renew sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
 	INNER JOIN (SELECT tst.deal_detail_id,(AVG(sddh.volume)) deal_volume, MAX(tst.internal_desk_id) internal_desk_id
 				FROM  (SELECT deal_detail_id, MAX(sdh.internal_desk_id) internal_desk_id
 	                    FROM   #tmp_second_table_renew tst1
						INNER JOIN #sdh_temp_renew st ON st.source_deal_header_id = tst1.source_deal_header_id
						INNER JOIN source_deal_header sdh ON tst1.source_deal_header_id = sdh.source_deal_header_id
						GROUP BY sdh.source_deal_header_id, deal_detail_id
 						) tst
 	                INNER JOIN source_deal_detail_hour sddh
 	                ON  tst.deal_detail_id = sddh.source_deal_detail_id
 				GROUP BY deal_detail_id
 			) sum_sddh
 		ON  sum_sddh.deal_detail_id = sdd.source_deal_detail_id
      
     --PRINT 'dealvolume'	
 	IF NOT EXISTS (SELECT 'x' FROM #tmp_second_table_renew WHERE  price IS NULL)
 	BEGIN
 	    UPDATE sdd
 	    SET   fixed_price = IIF(sum_sddh.internal_desk_id=17300,sdd.fixed_price,sum_sddh.fixed_price)
 	    FROM  source_deal_detail sdd
		INNER JOIN #sdd_temp_renew sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
 	    INNER JOIN (SELECT deal_detail_id, MAX(sdh.internal_desk_id) internal_desk_id, (SUM(volume)) deal_volume
						, SUM(volume * price) / ISNULL(NULLIF(SUM(volume), 0), 1) [fixed_price]
 					FROM   #tmp_second_table_renew tst1
					INNER JOIN #sdh_temp_renew st ON st.source_deal_header_id = tst1.source_deal_header_id
					INNER JOIN source_deal_header sdh ON tst1.source_deal_header_id=sdh.source_deal_header_id
 	                GROUP BY deal_detail_id
 					) sum_sddh
 			ON sum_sddh.deal_detail_id = sdd.source_deal_detail_id
 	END

	------------------------------Update Actual Volume, schedule_volume
	UPDATE sdd 
	SET sdd.actual_volume = a.actual_volume,
		sdd.schedule_volume = a.schedule_volume		
	FROM source_deal_detail sdd 
	INNER JOIN #sdd_temp_renew sub_sdd ON sub_sdd.source_deal_detail_id = sdd.source_deal_detail_id
	INNER JOIN (
		SELECT AVG(sddh.actual_volume) actual_volume,  AVG(sddh.schedule_volume) schedule_volume, sub_sdd.source_deal_detail_id source_deal_detail_id
		FROM source_deal_detail_hour sddh
		INNER JOIN #sdd_temp_renew sub_sdd ON sub_sdd.source_deal_detail_id = sddh.source_deal_detail_id
 		GROUP BY sub_sdd.source_deal_detail_id
	) a
	ON a.source_deal_detail_id = sdd.source_deal_detail_id 
		AND sdd.source_deal_detail_id = sub_sdd.source_deal_detail_id
 			

 	EXEC spa_print 'Calculating Total Volume...'
 	
 	--DECLARE @report_position_process_id NVARCHAR(500)
	Declare @report_position_process_id_renew  NVARCHAR(500)
 	
 	SET @report_position_process_id_renew = dbo.FNAGetNewID()
 	SET @report_position_deals = dbo.FNAProcessTableName('report_position', @user_login_id, @report_position_process_id_renew)
 	EXEC ('CREATE TABLE ' + @report_position_deals + '(source_deal_header_id INT, action NCHAR(1) COLLATE DATABASE_DEFAULT)')	 	
 	
 	CREATE TABLE #tmp_location_profile_renew (
 			  location_id INT NULL,
 			  profile_id INT NULL,
 			  profile_type INT,                                       
 			  external_id NVARCHAR(50) COLLATE DATABASE_DEFAULT
 	)
 
 	INSERT INTO #tmp_location_profile_renew (
 	    location_id,
 	    profile_id,
 	    profile_type,
 	    external_id
 	)
 	SELECT sml.source_minor_location_id,
 	       ISNULL(fp.profile_id, fp1.profile_id) profile_id,
 	       ISNULL(fp.profile_type, fp1.profile_type) profile_type,
 	       ISNULL(fp.external_id, fp1.external_id) external_id
 	FROM   source_minor_location sml(NOLOCK)
 	       LEFT JOIN [forecast_profile] fp(NOLOCK) ON  fp.profile_id = sml.profile_id AND ISNULL(fp.available, 0) = 1
 	       LEFT JOIN [forecast_profile] fp1(NOLOCK) ON  fp1.profile_id = sml.proxy_profile_id AND ISNULL(fp1.available, 0) = 1
 	       INNER JOIN #tmp_import_profiles_renew ip ON  ip.profile_id = ISNULL(fp.profile_id, fp1.profile_id)
 	WHERE  ISNULL(fp.profile_id, fp1.profile_id) IS NOT NULL --AND ISNULL(fp.profile_id, fp1.profile_id) = @profile_id
 		
 		--SELECT * FROM #tmp_location_profile_renew
 	EXEC('INSERT INTO ' + @report_position_deals + '(source_deal_header_id, action)
 		  SELECT DISTINCT sdh.source_deal_header_id, ''u''
 		  FROM source_deal_detail sdd
 		  INNER JOIN #tmp_location_profile_renew tmp ON  sdd.location_id = tmp.location_id and sdd.profile_id is null
		  INNER JOIN source_deal_header sdh ON sdh.source_deal_header_id = sdd.source_deal_header_id
				AND sdh.internal_desk_id=17301
		  UNION 
		  SELECT DISTINCT source_deal_header_id, ''u''
 		  FROM source_deal_detail sdd
 		  INNER JOIN #tmp_import_profiles_renew tmp ON tmp.profile_id=sdd.profile_id
	')


 	IF @@rowcount > 0
	BEGIN
 		EXEC dbo.spa_update_deal_total_volume NULL, @report_position_process_id_renew, 12
	END
END

IF @table_name = 'ixp_shipper_code_mapping'
BEGIN

	EXEC('
		UPDATE a
		SET effective_date = dd.sql_date_string
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd 
		ON a.effective_date = dd.user_date
	')

	EXEC ('DELETE ' + @field_compare_table) 

	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_counterparty'', ''counterparty_id'', ''counterparty'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_minor_location'', ''Location_Name'', ''location'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_counterparty'', ''counterparty_id'', ''internal_counterparty_id'')')

	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES (''source_counterparty'', ''counterparty'', ''b.counterparty_id = a.counterparty'', ''e''),
		(''source_minor_location'', ''location'', ''b.location_id = a.location'', ''e''),
		(''source_counterparty'', ''internal_counterparty_id'', ''b.counterparty_id = a.internal_counterparty_id AND b.int_ext_flag=''''i'''''', ''w'')'
		)
	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	--validation for invalid shipper_code1_is_default
    EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
        SELECT a.temp_id,
                10002,
                ''
                {
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.shipper_code1_is_default +''"
                }
                '',
                a.import_file_name
        FROM ' + @import_temp_table_name + ' a
        CROSS APPLY ( SELECT source_column_name
                    FROM #source_file_column_table
                    WHERE ixp_columns_name = ''shipper_code1_is_default''
        ) scm
        WHERE a.shipper_code1_is_default IS NOT NULL	
			AND a.shipper_code1_is_default NOT IN (''y'', ''n'', ''yes'', ''no'')
     ')
	 
	 --validation for invalid is_default
    EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
        SELECT a.temp_id,
                10002,
                ''
                {
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.is_default +''"
                }
                '',
                a.import_file_name
        FROM ' + @import_temp_table_name + ' a
        CROSS APPLY ( SELECT source_column_name
                    FROM #source_file_column_table
                    WHERE ixp_columns_name = ''is_default''
        ) scm
        WHERE a.is_default IS NOT NULL	
			AND a.is_default NOT IN (''y'', ''n'', ''yes'', ''no'')
     ')

	--validation for invalid is_active
    EXEC('
		INSERT INTO #error_status (temp_id, error_number, template_values, import_file_name)
        SELECT a.temp_id,
                10002,
                ''
                {
					"column_name": "'' + scm.source_column_name + ''",
					"column_value": "'' + a.is_active +''"
                }
                '',
                a.import_file_name
        FROM ' + @import_temp_table_name + ' a
        CROSS APPLY ( SELECT source_column_name
                    FROM #source_file_column_table
                    WHERE ixp_columns_name = ''is_active''
        ) scm
        WHERE a.is_active IS NOT NULL	
			AND a.is_active NOT IN (''y'', ''n'', ''yes'', ''no'')
     ')

	EXEC('  
        DELETE ' + @import_temp_table_name + '
        FROM #error_status es
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON  es.temp_id = a.temp_id
        LEFT JOIN message_log_template mlt 
			ON mlt.message_number = es.error_number
        WHERE ISNULL(mlt.message_status, es.message_status) = ''Error''
	') 

	DROP TABLE IF EXISTS #a
	CREATE TABLE #a(
		effective_date DATE
		, counterparty INT
		, [location] INT
		, shipper_code1 NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, shipper_code NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, shipper_code1_is_default NCHAR(1)  COLLATE DATABASE_DEFAULT
		, is_default NCHAR(1) COLLATE DATABASE_DEFAULT
		, is_active NCHAR(1) COLLATE DATABASE_DEFAULT
		, external_id NVARCHAR(100) COLLATE DATABASE_DEFAULT
		, internal_counterparty_id INT
	)

	EXEC('
		INSERT into #a
		SELECT a.effective_date
			, sc.source_counterparty_id
			, sml.source_minor_location_id
			, a.shipper_code1
			, a.shipper_code
			, CASE 
				WHEN a.shipper_code1_is_default = ''yes'' THEN ''y''
				WHEN a.shipper_code1_is_default = ''no'' THEN ''n''
				ELSE a.shipper_code1_is_default
			END shipper_code1_is_default
			, CASE 
				WHEN a.is_default = ''yes'' THEN ''y''
				WHEN a.is_default = ''no'' THEN ''n''
				ELSE a.is_default
			END is_default
			, CASE 
				WHEN a.is_active = ''yes'' THEN ''y''
				WHEN a.is_active = ''no'' THEN ''n''
				ELSE a.is_active
			END is_active
			, a.external_id
			, sci.source_counterparty_id
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty
		LEFT JOIN source_counterparty sci
			ON sci.counterparty_id = a.internal_counterparty_id
		INNER JOIN source_minor_location sml
			ON sml.location_id = a.location
	')

	INSERT INTO shipper_code_mapping (counterparty_id)
	SELECT DISTINCT a.counterparty
	FROM #a a
	LEFT JOIN shipper_code_mapping scm
		ON a.counterparty = scm.counterparty_id
	WHERE scm.shipper_code_id IS NULL

	--Update Existing
	UPDATE scmd
	SET
		shipper_code1 = a.shipper_code1
		, shipper_code = a.shipper_code
		, shipper_code1_is_default = a.shipper_code1_is_default
		, is_default = a.is_default
		, is_active = a.is_active
		, external_id = a.external_id
		, internal_counterparty = a.internal_counterparty_id
	FROM #a a
	INNER JOIN shipper_code_mapping scm
			ON a.counterparty = scm.counterparty_id
	INNER JOIN shipper_code_mapping_detail scmd
		ON scmd.location_id = a.location
			AND scmd.effective_date = a.effective_date
			AND scmd.shipper_code_id = scm.shipper_code_id
			AND scmd.shipper_code1 = a.shipper_code1
			AND scmd.shipper_code = a.shipper_code

	--Insert new
	INSERT INTO shipper_code_mapping_detail (
		shipper_code_id
		, location_id
		, effective_date
		, shipper_code1
		, shipper_code
		, shipper_code1_is_default
		, is_default
		, is_active
		, external_id
		, internal_counterparty
	)
	SELECT
		scm.shipper_code_id
		, a.location
		, a.effective_date
		, a.shipper_code1
		, a.shipper_code
		, ISNULL(a.shipper_code1_is_default, 'n')
		, ISNULL(a.is_default, 'n')
		, ISNULL(a.is_active, 'y')
		, a.external_id
		, a.internal_counterparty_id
	FROM #a a
	INNER JOIN shipper_code_mapping scm
		ON a.counterparty = scm.counterparty_id
	LEFT JOIN shipper_code_mapping_detail scmd
		ON scmd.shipper_code_id = scm.shipper_code_id
			AND scmd.location_id = a.location
			AND scmd.effective_date = a.effective_date
			AND scmd.shipper_code1 = a.shipper_code1
			AND scmd.shipper_code = a.shipper_code
	WHERE scmd.shipper_code_mapping_detail_id IS NULL

END


IF @table_name = 'ixp_shipper_code_deal_detail'
BEGIN
	EXEC('
		UPDATE a
		SET term_start = dd.sql_date_string
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd 
		ON a.term_start = dd.user_date
	')
	EXEC('
		UPDATE a
		SET term_end = dd.sql_date_string
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN #date_details dd 
		ON a.term_end = dd.user_date
	')

	EXEC ('DELETE ' + @field_compare_table) 

	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_counterparty'', ''counterparty_id'', ''counterparty'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''contract_group'', ''source_contract_id'', ''contract'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_minor_location'', ''Location_Name'', ''location'')')
	EXEC('INSERT INTO ' + @field_compare_table + ' VALUES (''source_deal_header'', ''deal_id'', ''deal_id'')')


	/** Collect data for look up table validation.
		referred_table: lookup table to match value against 
		referring_clm_name: ixp_column mapped with source column whose value needs to check. 
		filters: Joining condition for lookup tables. Alias 'a' is for temporary table or final process table, 'b' for lookup table 
		flag: Use 'w' for warning or 'e' for error case. Warning/Error for non existant optional/mandatory data.		
	**/
	EXEC('TRUNCATE TABLE ' + @look_up_tables)
 	EXEC('
		INSERT INTO ' + @look_up_tables + '(referred_table, referring_clm_name, filters, flag) 
		VALUES 
			(''source_counterparty'', ''counterparty'', ''b.counterparty_id = a.counterparty'', ''e''),
			(''contract_group'', ''contract'', ''b.source_contract_id = a.contract'', ''e''),
			(''source_minor_location'', ''location'', ''b.location_id = a.Location'', ''e''),
			(''source_deal_header'', ''deal_id'', ''b.deal_id = a.deal_id'', ''e'')
	')
	  
 	EXEC sp_validate_data_type @process_id, @field_compare_table, @import_temp_table_name, @table_name, @rules_id, 'a'

	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT DISTINCT b.temp_id,
			'''+ @process_id+''',
 			''Error'',
 			''Import Data'',
 			'''+ @table_name+''',
 			''Invalid Data'',
 			CONCAT('' '', scm.source_column_name, '': '', b.shipper_code1, '' is not defined for ('', b.location, '', '', b.counterparty, '', '', dbo.FNADateFormat(b.term_start), '')''),
 			''Check mapping.'',
 			b.import_file_name
		FROM ' + @import_temp_table_name + ' b
		CROSS APPLY (
			SELECT source_column_name
			FROM #source_file_column_table
			WHERE ixp_columns_name = ''shipper_code1''
		) scm
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = b.counterparty
		INNER JOIN shipper_code_mapping scmm
			ON scmm.counterparty_id = sc.source_counterparty_id
		INNER JOIN source_minor_location sml
			ON sml.location_id = b.location	
		LEFT JOIN shipper_code_mapping_detail scmd
			ON scmd.shipper_code_id = scmm.shipper_code_id
			AND scmd.location_id = sml.source_minor_location_id
			AND scmd.effective_date <= b.term_start
			AND scmd.shipper_code1 = b.shipper_code1
		WHERE scmd.shipper_code_mapping_detail_id IS NULL AND NULLIF(b.shipper_code1,'''') IS NOT NULL
	')

	-- Shipper code 2 mapping validation
	EXEC('INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step], [import_file_name])
		SELECT DISTINCT b.temp_id,
			'''+ @process_id+''',
 			''Error'',
 			''Import Data'',
 			'''+ @table_name+''',
 			''Invalid Data'',
 			CONCAT('' '', scm.source_column_name, '': '', b.shipper_code2, '' is not defined for ('', b.location, '', '', b.counterparty, '', '', dbo.FNADateFormat(b.term_start), '')''),
 			''Check mapping.'',
 			b.import_file_name
		FROM ' + @import_temp_table_name + ' b
		CROSS APPLY (
			SELECT source_column_name
			FROM #source_file_column_table
			WHERE ixp_columns_name = ''shipper_code2''
		) scm
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = b.counterparty
		INNER JOIN shipper_code_mapping scmm
			ON scmm.counterparty_id = sc.source_counterparty_id
		INNER JOIN source_minor_location sml
			ON sml.location_id = b.location	
		LEFT JOIN shipper_code_mapping_detail scmd
			ON scmd.shipper_code_id = scmm.shipper_code_id
			AND scmd.location_id = sml.source_minor_location_id
			AND scmd.effective_date <= b.term_start
			AND scmd.shipper_code = b.shipper_code2
		WHERE scmd.shipper_code_mapping_detail_id IS NULL AND NULLIF(b.shipper_code2,'''') IS NOT NULL
	')

	EXEC('
		DELETE a
        FROM #import_status ims
        INNER JOIN ' + @import_temp_table_name + ' a 
			ON  ims.temp_id = a.temp_id
        WHERE ims.error_code = ''Error''
	')
	
	CREATE TABLE #update_shipper_deal (
		source_deal_header_id INT
	)

	EXEC('
		UPDATE sdd  
		SET 
		shipper_code1 = ISNULL(scmd1_default.shipper_code_mapping_detail_id, scmd1_multi.shipper_code_mapping_detail_id),
		shipper_code2 = ISNULL(scmd2_default.shipper_code_mapping_detail_id, scmd2_multi.shipper_code_mapping_detail_id)
		OUTPUT deleted.source_deal_header_id 
		INTO #update_shipper_deal
		FROM ' + @import_temp_table_name + ' a
		INNER JOIN source_deal_header sdh
			ON sdh.deal_id = a.deal_id
		INNER JOIN source_deal_header_template sdht
			ON sdht.template_id = sdh.template_id
		INNER JOIN source_deal_detail sdd
			ON sdd.source_deal_header_id = sdh.source_deal_header_id
				AND DATEPART(YEAR, sdd.term_start) BETWEEN DATEPART(YEAR, a.term_start) AND DATEPART(YEAR, a.term_end)
				AND DATEPART(MONTH, sdd.term_start) BETWEEN DATEPART(MONTH, a.term_start) AND DATEPART(MONTH, a.term_end)				
				AND DATEPART(YEAR, sdd.term_end) BETWEEN DATEPART(YEAR, a.term_start) AND DATEPART(YEAR, a.term_end)
				AND DATEPART(MONTH, sdd.term_end) BETWEEN DATEPART(MONTH, a.term_start) AND DATEPART(MONTH, a.term_end)		
				AND IIF(a.buy_sell IS NOT NULL, sdd.buy_sell_flag, ''1'') = ISNULL(a.buy_sell, ''1'')
		INNER JOIN source_counterparty sc
			ON sc.counterparty_id = a.counterparty		
		LEFT JOIN transportation_contract_location tcl
			ON tcl.contract_id = sdh.contract_id
				AND tcl.rec_del = IIF(sdd.buy_sell_flag = ''s'', 1, 2) 
		INNER JOIN shipper_code_mapping scm
			ON scm.counterparty_id = sc.source_counterparty_id
		OUTER APPLY -- get default value for latest effective date lower than term start
		(
			SELECT scmd1_fil.shipper_code_mapping_detail_id, scmd1_fil.shipper_code1 FROM
			(SELECT * FROM
				(SELECT scmd1_def.shipper_code_mapping_detail_id , 
					scmd1_def.shipper_code1, 
					scmd1_def.effective_date,
					ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY scmd1_def.effective_date DESC) rn
						FROM shipper_code_mapping_detail scmd1_def
						WHERE scmd1_def.shipper_code1 = a.shipper_code1 
							AND scmd1_def.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
							AND scmd1_def.effective_date <= CAST(a.term_start AS DATE)
							AND scmd1_def.shipper_code_id = scm.shipper_code_id
							AND scmd1_def.is_active = ''y''	
				) a WHERE rn =1
			) b 
			INNER JOIN shipper_code_mapping_detail scmd1_fil ON scmd1_fil.shipper_code1 = b.shipper_code1 
				AND b.effective_date = scmd1_fil.effective_date  AND scmd1_fil.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id) 
				AND scmd1_fil.is_active = ''y'' AND scmd1_fil.shipper_code_id = scm.shipper_code_id
			AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''y''
		) scmd1_default
		OUTER APPLY -- get min shipper detail for latest effective date lower than term start
		( SELECT c.shipper_code_mapping_detail_id FROM 
			(SELECT * FROM
				(SELECT shipper_code_mapping_detail_id, effective_date, shipper_code1,ROW_NUMBER() OVER (PARTITION BY shipper_code1 ORDER BY effective_date DESC) rn
					FROM shipper_code_mapping_detail scmd1_inn_m
				WHERE scmd1_inn_m.shipper_code1 = a.shipper_code1 
					AND scmd1_inn_m.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id) 
					AND scmd1_inn_m.effective_date <= CAST(a.term_start AS DATE)
					AND scmd1_inn_m.shipper_code_id = scm.shipper_code_id
					AND ISNULL(NULLIF(scmd1_inn_m.shipper_code1_is_default, ''''), ''n'') = ''n''	
					AND scmd1_inn_m.is_active = ''y''	
				) a WHERE rn = 1 
			) b 
			CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd1_fil WHERE scmd1_fil.shipper_code1 = b.shipper_code1 
				AND b.effective_date = scmd1_fil.effective_date AND scmd1_fil.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
				AND scmd1_fil.shipper_code_id = scm.shipper_code_id AND scmd1_fil.is_active = ''y''	
				AND ISNULL(NULLIF(scmd1_fil.shipper_code1_is_default, ''''), ''n'') = ''n''	
				ORDER BY shipper_code_mapping_detail_id ASC
			) c
		) scmd1_multi  
		OUTER APPLY 
		( SELECT scmd2_fil.shipper_code_mapping_detail_id, scmd2_fil.shipper_code FROM
			(SELECT * FROM
				(SELECT scmd2_def.shipper_code_mapping_detail_id , 
					scmd2_def.shipper_code, 
					scmd2_def.effective_date,
					ROW_NUMBER() OVER (PARTITION BY scmd2_def.shipper_code ORDER BY scmd2_def.effective_date DESC) rn
				FROM shipper_code_mapping_detail scmd2_def
				WHERE scmd2_def.shipper_code = a.shipper_code2 
					AND scmd2_def.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
					AND scmd2_def.effective_date <= CAST(a.term_start AS DATE)
					AND scmd2_def.shipper_code_id = scm.shipper_code_id
					AND scmd2_def.is_active = ''y''	
				) a WHERE rn =1
			) b 
			INNER JOIN shipper_code_mapping_detail scmd2_fil ON scmd2_fil.shipper_code = b.shipper_code
				AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
				AND scmd2_fil.is_active = ''y'' AND scmd2_fil.shipper_code_id = scm.shipper_code_id
			AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''y''	
		) scmd2_default
		OUTER APPLY
		(SELECT c.shipper_code_mapping_detail_id FROM 
			(SELECT * FROM
				(SELECT shipper_code_mapping_detail_id, effective_date, scmd2_inn_m.shipper_code,ROW_NUMBER() OVER (PARTITION BY scmd2_inn_m.shipper_code ORDER BY scmd2_inn_m.effective_date DESC) rn
					FROM shipper_code_mapping_detail scmd2_inn_m
				WHERE scmd2_inn_m.shipper_code = a.shipper_code2 
					AND scmd2_inn_m.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
					AND scmd2_inn_m.effective_date <= CAST(a.term_start AS DATE)
					AND scmd2_inn_m.shipper_code_id = scm.shipper_code_id
					AND ISNULL(NULLIF(scmd2_inn_m.is_default, ''''), ''n'') = ''n''	
					AND scmd2_inn_m.is_active = ''y''	
				) a WHERE rn = 1 
			) b 
			CROSS APPLY (SELECT TOP 1 shipper_code_mapping_detail_id FROM shipper_code_mapping_detail scmd2_fil WHERE scmd2_fil.shipper_code = b.shipper_code
				AND b.effective_date = scmd2_fil.effective_date AND scmd2_fil.location_id = IIF(sdht.template_name = ''Transportation NG'', tcl.location_id, sdd.location_id)
				AND scmd2_fil.shipper_code_id = scm.shipper_code_id AND scmd2_fil.is_active = ''y''	AND ISNULL(NULLIF(scmd2_fil.is_default, ''''), ''n'') = ''n''
				ORDER BY shipper_code_mapping_detail_id ASC
			) c		
		) scmd2_multi
	')

	DECLARE @update_shipper_deal VARCHAR(MAX)

	SELECT @update_shipper_deal = ISNULL(@update_shipper_deal + ', ', '') + CAST(source_deal_header_id AS VARCHAR(10))
	FROM #update_shipper_deal

	EXEC spa_insert_update_audit 'u', @update_shipper_deal ,'Updated from import rule shipper_code_deal_detail.'



END


--Add new import logic above this line
IF @table_name IS NULL
BEGIN
 	EXEC (' INSERT INTO #temp_tot_count
 	        SELECT DISTINCT COUNT(*) AS totcount, '''+ @table_name+'''
 	        FROM   '+@import_temp_table_name)
 	
 	DECLARE @import_table INT
 	DECLARE @import_table_name NVARCHAR(200)
 	
 	DECLARE @ixp_import_query_builder_tables NVARCHAR(500)
 	DECLARE @ixp_import_query_builder_relation NVARCHAR(600)
 	DECLARE @ixp_custom_import_mapping NVARCHAR(500)
 	DECLARE @ixp_import_query_builder_import_tables NVARCHAR(600)
 	
 	SET @ixp_import_query_builder_tables = dbo.FNAProcessTableName('ixp_import_query_builder_tables', @user_login_id, @process_id)
 	SET @ixp_import_query_builder_relation = dbo.FNAProcessTableName('ixp_import_query_builder_relation', @user_login_id, @process_id)
 	SET @ixp_custom_import_mapping = dbo.FNAProcessTableName('ixp_custom_import_mapping', @user_login_id, @process_id) 
 	SET @ixp_import_query_builder_import_tables = dbo.FNAProcessTableName('ixp_import_query_builder_import_tables', @user_login_id, @process_id)
 	
 	IF OBJECT_ID('tempdb..#ixp_custom_import_mapping') IS NOT NULL
 		DROP TABLE #ixp_custom_import_mapping
 	IF OBJECT_ID('tempdb..#ixp_import_query_builder_relation') IS NOT NULL
 		DROP TABLE #ixp_import_query_builder_relation
 	IF OBJECT_ID('tempdb..#ixp_import_query_builder_import_tables') IS NOT NULL
 		DROP TABLE #ixp_import_query_builder_import_tables
 	IF OBJECT_ID('tempdb..#ixp_import_query_builder_tables') IS NOT NULL
 		DROP TABLE #ixp_import_query_builder_tables
 	
 	SELECT * INTO #ixp_custom_import_mapping FROM ixp_custom_import_mapping WHERE 1 = 2
 	SELECT * INTO #ixp_import_query_builder_relation FROM ixp_import_query_builder_relation WHERE 1 = 2	
 	SELECT * INTO #ixp_import_query_builder_import_tables FROM ixp_import_query_builder_import_tables WHERE 1 = 2
 	SELECT * INTO #ixp_import_query_builder_tables FROM ixp_import_query_builder_tables WHERE 1 = 2
 	
 	
 	SET @sql = 'SET IDENTITY_INSERT #ixp_custom_import_mapping ON
 				INSERT INTO #ixp_custom_import_mapping(ixp_custom_import_mapping_id, ixp_rules_id, dest_table_id, destination_column, source_table_id, source_column, filter, default_value)
 				SELECT ixp_custom_import_mapping_id, ixp_rules_id, dest_table_id, destination_column, source_table_id, source_column, filter, default_value
 				FROM ' + CASE WHEN @import_flag = 'q' THEN @ixp_custom_import_mapping ELSE 'ixp_custom_import_mapping' END + '
 				WHERE ixp_rules_id = ' + CAST(@rules_id AS NVARCHAR(20)) + '
 				SET IDENTITY_INSERT #ixp_custom_import_mapping OFF'
 	--PRINT(@sql)
 	EXEC(@sql)
 
 	SET @sql = 'SET IDENTITY_INSERT #ixp_import_query_builder_relation ON
 				INSERT INTO #ixp_import_query_builder_relation (ixp_import_query_builder_relation_id, ixp_rules_id, from_table_id, from_column, to_table_id, to_column)
 				SELECT ixp_import_query_builder_relation_id, ixp_rules_id, from_table_id, from_column, to_table_id, to_column 
 				FROM ' + CASE WHEN @import_flag = 'q' THEN @ixp_import_query_builder_relation ELSE 'ixp_import_query_builder_relation' END + '
 				WHERE ixp_rules_id = ' + CAST(@rules_id AS NVARCHAR(20)) + '
 				SET IDENTITY_INSERT #ixp_import_query_builder_relation OFF'
 	--PRINT(@sql)
 	EXEC(@sql)
 
 	SET @sql = 'SET IDENTITY_INSERT #ixp_import_query_builder_import_tables ON
 				INSERT INTO #ixp_import_query_builder_import_tables (ixp_import_query_builder_import_tables_id, ixp_rules_id, table_id, sequence_number)
 				SELECT ixp_import_query_builder_import_tables_id, ixp_rules_id, table_id, sequence_number
 				FROM ' + CASE WHEN @import_flag = 'q' THEN @ixp_import_query_builder_import_tables ELSE 'ixp_import_query_builder_import_tables' END + '
 				WHERE ixp_rules_id = ' + CAST(@rules_id AS NVARCHAR(20)) + '
 				SET IDENTITY_INSERT #ixp_import_query_builder_import_tables OFF'
 	--PRINT(@sql)
 	EXEC(@sql)
 
 	SET @sql = 'SET IDENTITY_INSERT #ixp_import_query_builder_tables ON
 				INSERT INTO #ixp_import_query_builder_tables (ixp_import_query_builder_tables_id, ixp_rules_id, tables_name, root_table_id, table_alias)
 				SELECT ixp_import_query_builder_tables_id, ixp_rules_id, tables_name, root_table_id, table_alias
 				FROM ' + CASE WHEN @import_flag = 'q' THEN @ixp_import_query_builder_tables ELSE 'ixp_import_query_builder_tables' END + '
 				WHERE ixp_rules_id = ' + CAST(@rules_id AS NVARCHAR(20)) + '
 				SET IDENTITY_INSERT #ixp_import_query_builder_tables OFF'
 	--PRINT(@sql)
 	EXEC(@sql)
 	
 	DECLARE import_tables CURSOR  
 	FOR
     SELECT ixp_import_query_builder_import_tables_id 
     FROM #ixp_import_query_builder_import_tables
     ORDER BY sequence_number DESC
     
 	OPEN import_tables
 	FETCH NEXT FROM import_tables INTO @import_table
 	WHILE @@FETCH_STATUS = 0
 	BEGIN
 		DECLARE @insert_statement NVARCHAR(MAX)
 		DECLARE @select_statement NVARCHAR(MAX)
 		DECLARE @update_statement NVARCHAR(MAX)
 		DECLARE @from_clause_import NVARCHAR(MAX)
 		DECLARE @unique_checking_update NVARCHAR(MAX)
 		DECLARE @unique_checking_insert NVARCHAR(MAX)
 		DECLARE @where_insert NVARCHAR(MAX)
 		DECLARE @rules_where_clause NVARCHAR(MAX)
 		
 		SELECT CCU.CONSTRAINT_NAME,
 		       CCU.COLUMN_NAME
 		INTO #unique_key_columns
 		FROM #ixp_custom_import_mapping icim
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN ixp_exportable_table iet ON iiqbit.table_id = iet.ixp_exportable_table_id
 		INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS TC ON TC.TABLE_NAME = iet.ixp_exportable_table_name
 		INNER JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE AS CCU
             ON  TC.CONSTRAINT_CATALOG = CCU.CONSTRAINT_CATALOG
             AND TC.CONSTRAINT_SCHEMA = CCU.CONSTRAINT_SCHEMA
             AND TC.CONSTRAINT_NAME = CCU.CONSTRAINT_NAME
 		WHERE  TC.CONSTRAINT_SCHEMA = 'dbo'
 		       AND TC.CONSTRAINT_TYPE = 'UNIQUE'
 		       AND iiqbit.ixp_import_query_builder_import_tables_id = @import_table
 		GROUP BY CCU.CONSTRAINT_NAME, CCU.COLUMN_NAME
 		
 		SELECT @insert_statement = COALESCE(@insert_statement + ', ', '') + '[' + icim.destination_column + ']',
 		       @select_statement = COALESCE(@select_statement + ', ', '') + ISNULL(NULLIF(iiqbt.table_alias, '') + '.[' +  NULLIF(icim.source_column,'') + ']', icim.default_value)
 		FROM   #ixp_custom_import_mapping icim
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN #ixp_import_query_builder_tables iiqbt ON iiqbt.ixp_import_query_builder_tables_id = icim.source_table_id
 		INNER JOIN ixp_exportable_table iet ON iiqbit.table_id = iet.ixp_exportable_table_id
 		WHERE ixp_import_query_builder_import_tables_id = @import_table
 		
 		-- avoiding update of unique columns
 		SELECT @update_statement = COALESCE(@update_statement + ', ', '') + '[' + icim.destination_column + '] = ' + ISNULL(NULLIF(iiqbt.table_alias, '') + '.[' +  NULLIF(icim.source_column,'') + ']', icim.default_value)
 		FROM   #ixp_custom_import_mapping icim
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN #ixp_import_query_builder_tables iiqbt ON iiqbt.ixp_import_query_builder_tables_id = icim.source_table_id
 		INNER JOIN ixp_exportable_table iet ON iiqbit.table_id = iet.ixp_exportable_table_id
 		WHERE ixp_import_query_builder_import_tables_id = @import_table AND icim.destination_column NOT IN (SELECT DISTINCT column_name FROM #unique_key_columns)
 		
 		SELECT @insert_statement = 'INSERT INTO ' + iet.ixp_exportable_table_name + '(' + @insert_statement + ') SELECT ' + @select_statement,
 			   @update_statement = 'UPDATE ' + iet.ixp_exportable_table_name + ' SET ' + @update_statement,
 			   @import_table_name = iet.ixp_exportable_table_name
 		FROM #ixp_custom_import_mapping icim
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN ixp_exportable_table iet ON iiqbit.table_id = iet.ixp_exportable_table_id
 		INNER JOIN #ixp_import_query_builder_tables iiqbt ON iiqbt.ixp_import_query_builder_tables_id = icim.source_table_id
 		WHERE ixp_import_query_builder_import_tables_id = @import_table AND iiqbt.root_table_id IS NULL
 		GROUP BY iet.ixp_exportable_table_name,iiqbt.table_alias
 		
 		SELECT @unique_checking_insert = COALESCE(' LEFT JOIN ' +  iet.ixp_exportable_table_name + ' ' + iet.ixp_exportable_table_name + ' ON ' + @unique_checking_insert + ' AND ', '') + iet.ixp_exportable_table_name  + '.' + icim.destination_column + '=' + iiqbt.table_alias + '.' + ISNULL(ukc.COLUMN_NAME, icim.destination_column),
 			   @unique_checking_update = COALESCE(' INNER JOIN ' +  iet.ixp_exportable_table_name + ' ' + iet.ixp_exportable_table_name + ' ON ' + @unique_checking_update + ' AND ', '') + iet.ixp_exportable_table_name  + '.' + icim.destination_column + '=' + iiqbt.table_alias + '.' + ISNULL(ukc.COLUMN_NAME, icim.destination_column)
 		FROM   #ixp_custom_import_mapping icim
 		INNER JOIN #unique_key_columns ukc ON  icim.destination_column = ukc.COLUMN_NAME
 		INNER JOIN #ixp_import_query_builder_tables iiqbt ON iiqbt.ixp_import_query_builder_tables_id = icim.source_table_id
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN ixp_exportable_table iet ON iet.ixp_exportable_table_id = iiqbit.table_id
 		WHERE iiqbit.ixp_import_query_builder_import_tables_id = @import_table
 		
 		
 		SELECT @where_insert  =  COALESCE(' WHERE ' + @where_insert + ' AND ' , '') + iet.ixp_exportable_table_name  + '.' + icim.destination_column + ' IS NULL '
 		FROM   #ixp_custom_import_mapping icim
 		INNER JOIN #unique_key_columns ukc ON  icim.destination_column = ukc.COLUMN_NAME
 		INNER JOIN #ixp_import_query_builder_import_tables iiqbit ON iiqbit.ixp_import_query_builder_import_tables_id = icim.dest_table_id
 		INNER JOIN ixp_exportable_table iet ON iet.ixp_exportable_table_id = iiqbit.table_id
 		WHERE iiqbit.ixp_import_query_builder_import_tables_id = @import_table
 		
 		SELECT @rules_where_clause = filter FROM #ixp_custom_import_mapping icim
 		
 		;WITH cte_import AS (
 			SELECT ixp_import_query_builder_tables_id,
 			       ixp_rules_id,
 			       it.ixp_tables_name,--@insert_process_table,
 			       table_alias
 			FROM  #ixp_import_query_builder_tables iiqbt
 			INNER JOIN ixp_tables it ON it.ixp_tables_description = iiqbt.tables_name
 			WHERE  root_table_id IS NULL
 		)
 		,cte_dataset_rel (data_source, source_id, [alias], from_alias, from_column, to_alias, to_column, relationship_level) 
 		AS 
 		( 
 		SELECT ixp_import_query_builder_tables_id, ixp_import_query_builder_tables_id source_id, table_alias [alias], table_alias [from_alias], CAST(NULL AS NVARCHAR(200)) from_column, CAST(NULL AS NVARCHAR(200)) to_alias, CAST(NULL AS NVARCHAR(200)) to_column, 0 relationship_level  FROM cte_import
 		UNION ALL
 		--connected dataset
 		SELECT 
 		ier.from_table_id, iiqbt_main.ixp_import_query_builder_tables_id, iiqbt_main.table_alias, iiqbt_from.table_alias from_alias, CAST(ier.from_column AS NVARCHAR(200)) from_column, CAST(cdr.from_alias as NVARCHAR(200)) to_alias, CAST(ier.to_column AS NVARCHAR(200)) to_column, (cdr.relationship_level + 1) relationship_level
 		FROM cte_dataset_rel cdr
 		INNER JOIN #ixp_import_query_builder_relation ier ON ier.to_table_id = cdr.data_source
 		INNER JOIN #ixp_import_query_builder_tables iiqbt_from ON ier.from_table_id = iiqbt_from.ixp_import_query_builder_tables_id
 		INNER JOIN #ixp_import_query_builder_tables iiqbt_main ON ier.from_table_id = iiqbt_main.ixp_import_query_builder_tables_id
 		)
 		
 		SELECT @from_clause_import = 
 			STUFF(
 			(
 				SELECT NCHAR(10) + (CASE WHEN MAX(relationship_level) = 0 THEN ' FROM ' ELSE ' LEFT JOIN ' END) 
 					+ ' ' + MAX(cte.[table_name]) + ' ' + QUOTENAME(MAX(cte.[alias]))			--datasource [alias]
 					+ ISNULL(' ON ' + MAX(join_cols), '') 		--join keys
 				FROM
 				(
 					SELECT data_source, source_id, ISNULL(REPLACE(it.ixp_tables_name, it.ixp_tables_name, @import_temp_table_name), iet.ixp_exportable_table_name) [table_name], [alias], from_alias, from_column, to_alias, to_column, MAX(relationship_level) relationship_level
 					FROM cte_dataset_rel cdr
 					INNER JOIN #ixp_import_query_builder_tables ieds ON cdr.data_source = ieds.ixp_import_query_builder_tables_id 
 					LEFT JOIN ixp_exportable_table iet ON ieds.tables_name = iet.ixp_exportable_table_description
 					LEFT JOIN ixp_tables it ON ieds.tables_name = it.ixp_tables_description 
 					GROUP BY data_source, source_id, iet.ixp_exportable_table_name,it.ixp_tables_name, [alias], from_alias, from_column, to_alias, to_column
 				) cte
 				INNER JOIN ixp_import_query_builder_tables ieds ON ieds.ixp_import_query_builder_tables_id = cte.source_id
 				OUTER APPLY (
 					 SELECT
 					   STUFF(
 						(  
 						   SELECT DISTINCT ' AND ' + CAST((from_alias + '.' + QUOTENAME(from_column) + ' = ' + to_alias +  '.' + QUOTENAME(to_column)) AS NVARCHAR(MAX))
 						   FROM cte_dataset_rel cdr_inner
 						   WHERE cdr_inner.data_source = cte.data_source
 						   FOR XML PATH(''), TYPE
 					   ).value('.[1]', 'NVARCHAR(MAX)'), 1, 5, '') join_cols
 				) join_key_set
 				GROUP BY data_source
 				ORDER BY MAX(relationship_level)
 				FOR XML PATH(''), TYPE
 			).value('.[1]', 'NVARCHAR(MAX)'), 1, 1, '')		
 			
 			
 			--PRINT '-------------UPDATE PART------------------'
 			--PRINT(@update_statement)
 			--PRINT(@from_clause_import)
 			--PRINT(@unique_checking_update)
 			
 			SET @sql = @update_statement + @from_clause_import + ISNULL(@unique_checking_update, '') + + ISNULL(' WHERE 1 = 1 AND ' + @rules_where_clause, '')	
 			EXEC(@sql)
 			--PRINT '-------------UPDATE PART------------------'
 			
 			--PRINT '-------------INSERT PART------------------'
 			--PRINT(@insert_statement)
 			--PRINT(@from_clause_import)
 			--PRINT(@unique_checking_insert)
 			--PRINT(@where_insert)
 			
 			SET @sql = @insert_statement +  @from_clause_import + ISNULL(@unique_checking_insert, '') + ISNULL(@where_insert, '') + ISNULL(' AND ' + @rules_where_clause, '')										
 			EXEC(@sql)
 			--PRINT '-------------INSERT PART------------------'
 			
 		FETCH NEXT FROM import_tables
 		INTO @import_table
 	END
 	CLOSE import_tables
 	DEALLOCATE import_tables
END
 
DECLARE @count_source INT
SELECT @count_source = MAX(totcount) FROM #temp_tot_count
 
CREATE TABLE #import_no(no_rec INT)
EXEC('INSERT INTO #import_no (no_rec) 
	  SELECT COUNT(total_count) FROM (
				SELECT COUNT(temp_id) total_count 
				FROM ' + @import_temp_table_name + '
				GROUP BY temp_id
				HAVING COUNT(temp_id) >= 1
	 ) a
 ') 
SELECT @count = NO_REC FROM #IMPORT_NO
 
DROP TABLE #IMPORT_NO
IF @count_source - ISNULL(@count,0) > 0 SET @error_code = 'e'
ELSE SET @error_code = ISNULL(@error_code, 's')



EXEC('
	INSERT INTO #import_status (temp_id, process_id, error_code, [module], [source], [type], [description], [next_step],[type_error], [import_file_name])
	SELECT es.temp_id, 
		''' + @process_id + ''', 
		ISNULL(elt.message_status, es.message_status), 
		''Import Data'', 
		''' + @table_name + ''' [source], 
		ISNULL(elt.message_type, es.message_type) [type], 
		IIF(es.[error_number] IS NULL, es.template_values, dbo.FNAReplaceEmailTemplateParams(elt.message, es.template_values)), 
		IIF(es.[error_number] IS NULL, es.recommendation, dbo.FNAReplaceEmailTemplateParams(elt.recommendation, es.template_values)),
		ISNULL(elt.message_status, es.message_status), 
		es.import_file_name
	FROM #error_status es
	LEFT JOIN message_log_template elt ON elt.message_number = es.[error_number]
')

IF EXISTS(SELECT 1 FROM #import_status WHERE error_code IN ('Warning')
			UNION 
		   SELECT 1 FROM source_system_data_import_status_detail WHERE process_id = @process_id and type_error IN ('Warning')
)
	SET @error_code = 'w'

/*TO DO: Data is already deleted from process table and inserted into source_system_data_import_status_detail and source_system_data_import_status table in sp_validate_data_type */
IF EXISTS (SELECT 1 FROM #import_status WHERE error_code IN ('Error') 
		   UNION 
		   SELECT 1 FROM source_system_data_import_status_detail WHERE process_id = @process_id and type_error IN ('Error')
)
	SET @error_code = 'e'

 
IF @count_source<>0
BEGIN
 	INSERT INTO source_system_data_import_status_detail (process_id, [source], [type], [description], type_error, import_file_name)
 	SELECT DISTINCT @process_id, iss.[source], iss.[type], ISNULL(tmp.major_row_values + ':','') + iss.[description], iss.error_code, iss.import_file_name 
	FROM #import_status iss
	LEFT JOIN #import_status_major_row_values tmp ON tmp.temp_id = iss.temp_id
 	
 	DECLARE @total_mtm         FLOAT,
 	        @total_deal_found  INT
 	        
 	DECLARE @Command NVARCHAR(3000)
 	DECLARE @combined_source_from_audit INT
 	DECLARE @combined_source_from_rules INT
 	
 	IF OBJECT_ID('tempdb..#temp_count_source_from_rules') IS NOT NULL
 		DROP TABLE #temp_count_source_from_rules 
 		
 	IF OBJECT_ID('tempdb..#temp_count_source_from_audit') IS NOT NULL
 		DROP TABLE #temp_count_source_from_audit 	
 	
 	CREATE TABLE #MTM_detail(total_mtm FLOAT)
 	
	IF @table_name IN('ixp_15mins_allocation_data_template', 'ixp_10mins_allocation_data_template', 'ixp_monthly_allocation_data_template', 'ixp_mv90_data_template') --'ixp_hourly_allocation_data_template',
 	BEGIN
 		DECLARE @total_count    INT,
 				@total_count_v  NVARCHAR(50)
 				
 		IF @drilldown_level = 1
 		BEGIN
 			IF @@ERROR <> 0
 			BEGIN
 				INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 				SELECT @process_id,
 					   'Error',
 					   'Import Data',
 					   @table_name,
 					   'Data Errors',
 					   'It is possible that the Data may be incorrect.',
 					   'Correct the error and reimport.',
 					   @rules_names					
 			END
 				
 			-- check for data. if no data exists then give error  
 			IF NOT EXISTS(SELECT DISTINCT meter_id FROM  #tmp_staging_table)
 			BEGIN
 				-- throw this error only when meter exists
 				IF NOT EXISTS(SELECT * FROM #tmp_missing_meter_id)
 				BEGIN
 					INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)
 					SELECT @process_id,
 						   'Error',
 						   'Import Data',
 						   @table_name,
 						   'Data Errors',
 						   'It is possible that the file format may be incorrect',
 						   'Correct the error and reimport.',
 						   @rules_names		
 				END		
 			END 
 			
 			SELECT @error_count = COUNT(*)
 			FROM   source_system_data_import_status
 			WHERE  process_id = @process_id
 				   AND code = 'Error'
 			 
 			INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name) 
 			SELECT @process_id,
 				   'Success',
 				   'Import Data',
 				   @table_name,
 				   'Results',
 				   'Import/Update Data completed without error for  Meter ID: ' + a.meter_id + ', Channel: ' +
 				   CAST(a.channel AS NVARCHAR) + ', Volume : ' + CAST(dbo.FNARemoveTrailingZero(SUM(CAST(CAST(a.[VALUE] AS FLOAT) AS NUMERIC(38, 20)))) AS NVARCHAR(50)),
 				   '',
 				   @rules_names
 			FROM [#tmp_staging_table] a
 			LEFT JOIN #tmp_missing_meter_id b ON b.meter_id = a.meter_id
 			WHERE b.meter_id IS NULL --AND a.is_dst = 0
 			GROUP BY a.channel, a.meter_id 
 
 			SET @error_code = 's'
 			
 			IF @error_count > 0
 				SET @error_code = 'e'
 
 			--IF @error_count > 0
 			--BEGIN				
 			--	INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation)
 			--	SELECT @process_id,
 			--		   'Error',
 			--		   'Import Data',
 			--		   CASE WHEN @table_name = 'ixp_15mins_allocation_data_template' THEN 'Import Allocation Data(15 Mins)' ELSE 'Import Allocation Data(Hourly)' END,
 			--		   'Results',
 			--		   'Import/Update Data completed with error(s).',
 			--		   'Correct error(s) and reimport.'        
 			--   SET @error_code = 'e'
 			--END 		
 		END
 		ELSE
 		BEGIN
 			IF @@ERROR <> 0
 			BEGIN
 				INSERT INTO source_system_data_import_status (
 					Process_id,
 					code,
 					MODULE,
 					source,
 					[TYPE],
 					[description],
 					recommendation,
 					rules_name
 				)
 				VALUES (
 					@process_id,
 					'Error',
 					'Import Data',
 					--'Import Allocation Data (15 Mins)',
 					@table_name,
 					'Data Errors',
 					'It is possible that the Data may be incorrect',
 					'Correct the error and reimport.',
 					@rules_names
 				)
 			END
 			
 			--Check for errors        
 			SELECT @error_count = COUNT(*)
 			FROM   source_system_data_import_status
 			WHERE  process_id = @process_id
 				   AND code = 'Error'    
 			
 			INSERT INTO source_system_data_import_status_detail (
 				process_id,
 				source,
 				[TYPE],
 				[description],
 				type_error
 			)	
 			SELECT DISTINCT 
 				@process_id,
 				@table_name,
 				'Data Error',
 				'Data Error for Meter Id ' + meter_id + ': ' + h_error,
 				h_error
 			FROM #tmp_staging_table
 			WHERE NULLIF(h_error, '') IS NOT NULL 
 			
 			INSERT INTO source_system_data_import_status_detail (
 				-- status_id -- this column value is auto-generated,
 				process_id,
 				source,
 				[TYPE],
 				[description],
 				type_error
 			)
 			SELECT DISTINCT 
 				@process_id,
 				@table_name,
 				'Data Error',
 				'Data Error for Meter Id ' + meter_id + ': ' + d_error,
 				d_error
 			FROM #tmp_staging_table
 			WHERE NULLIF(d_error, '') IS NOT NULL 
 			
 			INSERT INTO source_system_data_import_status ( [process_id], [code], [MODULE], [source], [TYPE], [description], recommendation, rules_name)
 			SELECT @process_id,
 				   'Success',
 				   'Import Data',
 				   @table_name,
 				   'Results',
 				   'Import/Update Data completed without error for  Meter ID: ' 
 				   + a.meter_id + ', Channel: ' +
 				   CAST(a.channel AS NVARCHAR) + ', Volume: ' + CAST(dbo.FNARemoveTrailingZero(SUM(CAST(CAST(a.[VALUE] AS FLOAT) AS NUMERIC(38, 20)))) AS NVARCHAR(50)),
 				   '',
 				   @rules_names
 			FROM [#tmp_staging_table] a
 			LEFT JOIN #tmp_missing_meter_id b ON b.meter_id = a.meter_id
 			WHERE b.meter_id IS NULL
 			GROUP BY a.channel, a.meter_id, a.h_filename 
 			SET @error_code = 's'
 			
 			IF @error_count > 0  
 			BEGIN
 				INSERT INTO source_system_data_import_status ( [process_id], [code], [MODULE], [source], [TYPE], [description], recommendation, rules_name)
 				SELECT @process_id,
 					   'Error',
 					   'Import Data',
 					   @table_name,
 					   'Results',
 					   'Import/Update Data completed with error(s).',
 					   'Correct error(s) and reimport.' ,
 					   @rules_names
 					        
 			   SET @error_code = 'e'
 			END 
 		END
 		SET @total_count = 0
 
 		SELECT @total_count = COUNT(*)
 		FROM  [#tmp_staging_table]
 		
 		SET @total_count_v = CAST(ISNULL(@total_count, 0) AS NVARCHAR)
 	END
 	ELSE
 	BEGIN
 		--SELECT * INTO #temp_errors_log FROM source_system_data_import_status_detail WHERE process_id = @process_id AND UPPER([type]) = 'Data Error' AND source = @table_name
 		
 		IF EXISTS(SELECT 1 FROM source_system_data_import_status_detail WHERE process_id = @process_id AND UPPER([type]) = 'Data Error' AND source = @table_name)
 			SET @error_code = 'e'
 			
 		IF @table_name <> 'ixp_pipeline_cut_data_template'
 		BEGIN
 			INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation,rules_name) 
 			SELECT	DISTINCT @process_id,
 				   CASE WHEN (tot.totcount -@count > 0) OR @error_code = 'e' THEN 'Error' WHEN @error_code = 'w' THEN 'Warning' ELSE 'Success' END,
 				   'Import Data',
 				   @table_name,
 				   CASE WHEN (tot.totcount -@count > 0) OR @error_code = 'e' THEN 'Data Error' ELSE 'Import Success' END,
 				   CAST(@count AS NVARCHAR) + ' Data imported Successfully out of ' + CAST(tot.totcount AS NVARCHAR) + ' rows.',
 				   CASE WHEN tot.totcount -@count > 0 THEN 'Please Check your data' ELSE 'N/A' END,
 				   @rules_names
 			FROM #temp_tot_count tot
 		END 		
 	END
 	
END
 
IF @schedule_run = 'n'
BEGIN
 	IF EXISTS(SELECT 1 FROM source_system_data_import_status WHERE process_id = @process_id AND [type] = 'Column Mismatch')
 	BEGIN
 		SET @error_code = 'e'
	END
	
 	IF @count_source=0 AND NOT EXISTS(SELECT 1 FROM source_system_data_import_status WHERE process_id = @process_id AND [type] IN ('Column Mismatch', 'Error'))
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name) 
 		SELECT @process_id,
 		       'Warning',
 		       'Import Data',
 		       @table_name,
 		       'Data Warning',
 		       'No data found in staging table.',
 		       'Please verify data.',
 		       @rules_names
 		
 		INSERT INTO source_system_data_import_status_detail (process_id, [source], [type], [description])
 		SELECT @process_id,
 		       @table_name,
 		       'Data Warning',
 		       'Staging Table is empty.'
 		SET @error_code = 'e'
 	END
 	
 	SELECT it.ixp_tables_name table_name
 	INTO #temp_count_source_from_rules
 	FROM ixp_export_tables iet
 	INNER JOIN ixp_tables it ON it.ixp_tables_id = ISNULL(iet.dependent_table_id, iet.table_id)	
 	WHERE iet.ixp_rules_id = @rules_id
 	GROUP BY it.ixp_tables_name
 	
 	SELECT ssdis.source table_name
 	INTO #temp_count_source_from_audit
 	FROM source_system_data_import_status ssdis
 	WHERE ssdis.Process_id = @process_id
 	GROUP BY ssdis.source
 	
 	SELECT @combined_source_from_rules = COUNT(table_name) FROM #temp_count_source_from_rules
 	SELECT @combined_source_from_audit = COUNT(table_name) FROM #temp_count_source_from_audit
 	--PRINT 'first_val'
 	--PRINT @combined_source_from_rules
 	--PRINT 'second_value'
 	--PRINT @combined_source_from_audit
 	
	/* Move Logic for FTP Import  */
	DECLARE @msg NVARCHAR(MAX)
	
 	IF (ISNULL(@combined_source_from_audit, 1) = ISNULL(@combined_source_from_rules, 2)) OR @file_transfer_endpoint_id IS NOT NULL
 	BEGIN
 		CREATE TABLE #error_files (files_name NVARCHAR(2000) COLLATE DATABASE_DEFAULT)
 		CREATE TABLE #success_files (files_name NVARCHAR(2000) COLLATE DATABASE_DEFAULT)
 		
 		INSERT INTO #error_files
 		SELECT DISTINCT import_file_name FROM #import_status WHERE import_file_name IS NOT NULL
		UNION 
 		SELECT import_file_name FROM source_system_data_import_status_detail 
		WHERE process_id = @process_id AND import_file_name IS NOT NULL
 				
		IF @count_source=0 OR EXISTS(SELECT 1 FROM source_system_data_import_status WHERE process_id = @process_id AND [type] IN ('Column Mismatch', 'Error'))
 		BEGIN
			INSERT INTO #error_files
 			SELECT DISTINCT import_file_name 
			FROM  import_process_info 
			WHERE process_id = @process_id 
				AND NULLIF(import_file_name,'') IS NOT NULL
 		END

 		SET @sql = 'INSERT INTO #success_files
 					SELECT DISTINCT import_file_name
 					FROM ' + @import_temp_table_name + ' temp_process
 					LEFT JOIN #error_files ef ON ef.files_name =  temp_process.import_file_name
 					WHERE ef.files_name IS NULL AND temp_process.import_file_name IS NOT NULL
 					'
 		EXEC(@sql)
 		
 		IF EXISTS(SELECT 1 FROM #error_files)
 		BEGIN
 			DECLARE @error_file NVARCHAR(3000)
 			DECLARE error_file_cursor CURSOR FOR 
 			SELECT files_name FROM #error_files
 			OPEN error_file_cursor
 			FETCH NEXT FROM error_file_cursor INTO @error_file
 			WHILE @@FETCH_STATUS = 0
 			BEGIN
				if @file_transfer_endpoint_id IS NOT NULL
				BEGIN
					SET @error_file = REPLACE(RIGHT(@error_file,  CHARINDEX('\',REVERSE(@error_file),1)),'\','')
					EXEC spa_move_ftp_file_to_folder @file_transfer_endpoint_id = @file_transfer_endpoint_id , @source_file = @error_file, @remote_working_directory = @ftp_remote_directory, @target_remote_directory= 'Error', @result=@msg OUTPUT 
				END
				ELSE
				BEGIN
					--Added to skip move to folder logic if its tempnote path.
					IF NOT EXISTS(SELECT 1 from connection_string WHERE @error_file  LIKE '%' + document_path + '%')
					BEGIN
 						SET @move_to = LEFT(@error_file, LEN(@error_file) - CHARINDEX('\',reverse(@error_file),1) + 1) + '\Error\'
 						EXEC spa_move_file_to_folder @error_file, @move_to, @status OUTPUT
					END
				END
 				FETCH NEXT FROM error_file_cursor INTO @error_file
 			END
 			CLOSE error_file_cursor
 			DEALLOCATE error_file_cursor
 		END
 		
 		IF EXISTS(SELECT 1 FROM #success_files)
 		BEGIN
 			
 			DECLARE @sucess_file NVARCHAR(3000)
 			DECLARE sucess_file_cursor CURSOR FOR 
 			SELECT files_name FROM #success_files
 			OPEN sucess_file_cursor
 			FETCH NEXT FROM sucess_file_cursor INTO @sucess_file
 			WHILE @@FETCH_STATUS = 0
 			BEGIN
 				
				if @file_transfer_endpoint_id IS NOT NULL
				BEGIN
					SET @sucess_file = REPLACE(RIGHT(@sucess_file,  CHARINDEX('\',REVERSE(@sucess_file),1)),'\','')
					EXEC spa_move_ftp_file_to_folder @file_transfer_endpoint_id = @file_transfer_endpoint_id , @source_file = @sucess_file, @remote_working_directory = @ftp_remote_directory, @target_remote_directory= 'Processed', @result=@msg OUTPUT
				END
				ELSE
				BEGIN
					--Added to skip move to folder logic if its tempnote path.
					IF NOT EXISTS(SELECT 1 from connection_string WHERE @sucess_file  LIKE '%' + document_path + '%')
					BEGIN
 						SET @move_to =  LEFT(@sucess_file, LEN(@sucess_file) - CHARINDEX('\',reverse(@sucess_file),1) + 1) + '\Processed\'
 						EXEC spa_move_file_to_folder @sucess_file, @move_to, @status OUTPUT
					END
				END
 				
 				FETCH NEXT FROM sucess_file_cursor INTO @sucess_file
 			END
 			CLOSE sucess_file_cursor
 			DEALLOCATE sucess_file_cursor
 		END
 	END	
 	
 	DECLARE @previous_error_code NCHAR(1)
 	SELECT @previous_error_code = idfa.[status]
 	FROM import_data_files_audit idfa
 	WHERE idfa.process_id = @process_id AND idfa.[status] = 'e'
 	
 	UPDATE import_data_files_audit
 	SET [status] = ISNULL(@previous_error_code, @error_code),
 	    elapsed_time = DATEDIFF(ss, create_ts, GETDATE())
 	WHERE  process_id = @process_id
 
 	DECLARE @combined_rules_names NVARCHAR(MAX)
 	SELECT @combined_rules_names = COALESCE(@combined_rules_names + ' ', '') + '<li>' + +  replace(idfa.dir_path, 'Rules:', '') + '</li>'
 	FROM import_data_files_audit idfa
 	WHERE process_id = @process_id
 
 	DECLARE @elasped_time NVARCHAR(100), @user NVARCHAR(100) 
 	SELECT @elasped_time = CONVERT(NCHAR(8),DATEADD(second,MAX(elapsed_time), 0), 108) FROM import_data_files_audit WHERE  process_id = @process_id
 	
	-- common message
	DECLARE @message_board_desc NVARCHAR(2000)
	SELECT @message_board_desc = '<br /> Rules Executed:<ul style="padding:0px 0px 0px 10px;margin:0px 0px 0px 10px;list-style-type:square;">' + @combined_rules_names + '</ul>'
 	+ CASE WHEN @table_name = 'ixp_pipeline_cut_data_template' THEN @file_desc + '</li>' ELSE '</li>' END 
 	+ '<li style="border:none"> Elapsed Time: ' + @elasped_time + '.</li>'
 	+ CASE WHEN (ISNULL(@previous_error_code, @error_code) = 'e') THEN '<li style="border:none"><font color="red">(Error(s) Found).</font></li></ul></a>' WHEN (ISNULL(@previous_error_code, @error_code) = 'w') THEN '<li style="border:none"><font color="orange">(Warning(s)).</font></li></ul></a>' ELSE '</ul></a>' END

 	IF @run_in_debug_mode = 'n'
 	BEGIN
		DECLARE @rule_name NVARCHAR(100)
		SELECT @rule_name = ixp_rules_name FROM ixp_rules where ixp_rules_id= @rules_id

		IF @rule_name = 'Nomination Import'
		BEGIN
			SELECT @url = './dev/spa_html.php?__user_name__=' + @user_login_id + '&spa=exec spa_get_import_process_status ''' + @process_id + ''','''+@user_login_id+''''
 		
 			SELECT @desc = dbo.FNATrmHyperlink('i', 10164400,'View and Edit Nomination',1,1,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT)
						+	'<a target="_blank" href="' + @url + '"><ul style="padding:0px;margin:0px;list-style-type:none;">' 
 						   + '<li style="border:none">Shipper has submitted nomination on:' + dbo.FNAUserDateFormat(GETDATE(), @user_login_id) + @message_board_desc
 		END
		ELSE
		BEGIN
			SELECT @url = './dev/spa_html.php?__user_name__=' + @user_login_id + '&spa=exec spa_get_import_process_status ''' + @process_id + ''','''+@user_login_id+''''
 		
 			SELECT @desc = '<a target="_blank" href="' + @url + '"><ul style="padding:0px;margin:0px;list-style-type:none;">' 
 						   + '<li style="border:none">Import process completed for as of date:' + dbo.FNAUserDateFormat(GETDATE(), @user_login_id) + @message_board_desc
 		END 
 		IF ISNULL(@exec_mode,0) <> 1
		BEGIN
 			EXEC spa_message_board 'u', @user_login_id, NULL, 'ImportData', @desc, '', '', @error_code, @job_name, NULL, @process_id, '', '', '', 'y'
			IF @error_code = 'e'
			BEGIN	
			IF NOT EXISTS( SELECT error_message_id from ixp_import_data_source iids 
						   INNER JOIN workflow_event_user_role	weur ON weur.event_message_id = iids.error_message_id 
						   WHERE rules_id = @rules_id)
				BEGIN				
				EXEC spa_NotificationUserByRole 2, @process_id, 'ImportData', @desc , @error_code, @job_name, 0,1	 				
 	END
 			END
			
		END
END
END
ELSE
BEGIN
 	IF @count_source=0
 	BEGIN
 		INSERT INTO source_system_data_import_status(process_id, code, [module], [source], [type], [description], recommendation, rules_name)  
 		SELECT @process_id,
 		       'Warning',
 		       'Import Data',
 		       @table_name,
 		       'Data Warning',
 		       'No data found.',
 		       'Possible causes: Time Bucket is not Forward Month/Staging table is empty',
 		       @rules_names
 		
 		INSERT INTO source_system_data_import_status_detail (process_id, [source], [type], [description]) 
 		SELECT @process_id,
 		       @table_name,
 		       'Data Warning',
 		       'Possible cause: Time Bucket is not Forward Month/Staging table is empty'
 	END
 
 	DELETE source_system_data_import_status_detail
 	FROM   source_system_data_import_status_detail s
 	INNER JOIN import_data_files_audit a ON  s.process_id = a.process_id
 	WHERE  a.create_ts < DATEADD(MONTH, -6, GETDATE())	
 		
 	DELETE source_system_data_import_status
 	FROM   source_system_data_import_status s
 	INNER JOIN import_data_files_audit a ON  s.process_id = a.process_id
 	WHERE  a.create_ts < DATEADD(MONTH, -6, GETDATE())	
 	
 	DELETE import_data_files_audit
 	WHERE  create_ts < DATEADD(MONTH, -6, GETDATE())		
 	
END
 
IF @import_from IS NOT NULL
BEGIN
 	UPDATE source_system_data_import_status_detail
 	SET    [TYPE] = @import_from
 	WHERE  process_id = @process_id
 	AND ([TYPE] = 'Data Error' OR [TYPE] = 'Data Warning')
 	       
 	UPDATE source_system_data_import_status
 	SET    [MODULE] = @import_from
 	WHERE  process_id = @process_id AND [MODULE] LIKE 'Import%'
 	
 	UPDATE source_system_data_import_status_vol_detail
 	SET    [TYPE] = @import_from
 	WHERE  process_id = @process_id AND ([TYPE] = 'Data Error' OR [TYPE] = 'Data Warning')
 	
 	UPDATE source_system_data_import_status_vol
 	SET    [MODULE] = @import_from
 	WHERE  process_id = @process_id AND [MODULE] LIKE 'Import%'
END
 
 
IF @generic_mapping_flag IS NOT NULL AND @rules_id IS NOT NULL
BEGIN
 	--SELECT 1
 	--PRINT('after-trigger')
 	DECLARE @after_trigger NVARCHAR(MAX)
 	
 	IF @generic_mapping_flag = 'a'
 	BEGIN
 		SELECT @after_trigger  = ir.after_insert_trigger FROM ixp_rules ir WHERE ir.ixp_rules_id = @rules_id	
 		
 	END
 	ELSE
 	BEGIN
 		DECLARE @ixp_rules NVARCHAR(300)
 		DECLARE @trigger_output INT
 		SET @ixp_rules = dbo.FNAProcessTableName('ixp_rules', @user_login_id, @process_id)
 		
 		CREATE TABLE #temp_rules (after_insert_trigger NVARCHAR(MAX) COLLATE DATABASE_DEFAULT)
 		SET @sql = 'INSERT INTO #temp_rules(after_insert_trigger) SELECT after_insert_trigger FROM ' + @ixp_rules + ' WHERE ixp_rules_id = ' + CAST(@rules_id AS NVARCHAR(10))
 		EXEC(@sql)
 		
 		SELECT @after_trigger = ir.after_insert_trigger
 		FROM   #temp_rules ir
 	END
 	
 	IF @after_trigger IS NOT NULL
 	BEGIN
 		SET @after_trigger = REPLACE(@after_trigger, '[temp_process_table]', @import_temp_table_name)
 		SET @after_trigger  = REPLACE(@after_trigger, '&add;', '+')
 		SET @trigger_output = NULL
 		EXEC spa_import_trigger 'a', @after_trigger, @process_id, @trigger_output OUTPUT
 		--PRINT @after_trigger
 		--PRINT @process_id
 	END
END


 
	/*	
	UPDATE ixp_import_data_interface_staging table with 's' for successfully imported data.
	Source file data was inserted in ixp_import_data_interface_staging into staging table and allow user to re import data without uploading source file for import failed data.
		This feature is not ready to release. Data grows fast in this table frequently. So unless this feature is well tested it is disabled in release version.

		Even though it is ready to release we need to workout for generic mapping. So for now it it disabled in case of generic mapping.
	*/
	DECLARE @disable_re_import_feature BIT = 0
	IF @disable_re_import_feature = 1 AND @table_name NOT IN ('ixp_generic_mapping')
	BEGIN
		IF OBJECT_ID('tempdb..#tables1') IS NOT NULL
			DROP TABLE #tables1 

			SELECT DISTINCT dest_table_id
			,t.ixp_tables_name
		INTO #tables1
		FROM ixp_import_data_mapping iidm
		INNER JOIN ixp_tables t ON t.ixp_tables_id = iidm.dest_table_id
		WHERE ixp_rules_id = @rules_id
		 
					IF OBJECT_ID('tempdb..#number_of_columns') IS NOT NULL 
					DROP TABLE #number_of_columns
						SELECT source_column_name
							,iidm.dest_table_id
							,dest_column
							,ixp_rules_id
							,seq
							,is_major
							,c.ixp_columns_name
							,'column_'+CAST(row_number() OVER(Order by seq) as NVARCHAR) staging_table_column_name
							,COALESCE(c.datatype,c.column_datatype) datatype 
						INTO #number_of_columns
						FROM ixp_import_data_mapping iidm 
						INNER JOIN #tables1 t on t.dest_table_id = iidm.dest_table_id
						INNER JOIN ixp_columns c on iidm.dest_column = c.ixp_columns_id
						WHERE ixp_rules_id = @rules_id AND t.ixp_tables_name = @table_name
						ORDER BY seq
 


						DECLARE @update_query1 NVARCHAR(MAX)
						DECLARE @join_query NVARCHAR(MAX)
						DECLARE @column_name NVARCHAR(500),@staging_column_name NVARCHAR(500)
						DECLARE @datatype NVARCHAR(500)
						DECLARE @where NVARCHAR(500)
						SET @where =' WHERE iidis.ixp_rule_id = ' +ISNULL(CAST(@rules_id as NVARCHAR),'')
						SET @update_query1 = ' UPDATE iidis SET iidis.import_status = ''s'''
						SET @update_query1 = @update_query1 + ' FROM ixp_import_data_interface_staging  iidis INNER JOIN '
						SET @update_query1 = @update_query1 + @import_temp_table_name + ' a ON '
						SET @join_query  = ''
						
						DECLARE create_join CURSOR FOR     
									SELECT ixp_columns_name,staging_table_column_name,datatype FROM #number_of_columns WHERE is_major = 1 and NULLIF(source_column_name,'') IS NOT NULL	ORDER BY seq
  
							OPEN create_join    
  
							FETCH NEXT FROM create_join     
							INTO @column_name,@staging_column_name,@datatype
  
							WHILE @@FETCH_STATUS = 0    
							BEGIN    
									if(@join_query!='')
									SET @join_query =@join_query +' AND '

									--Expected date format of @column_name is yyyy-mm-dd, but older versions may have user date format. TRY_CAST gracefully handles sql date format.
									SET	@join_query = @join_query + CASE WHEN @datatype = '[datetime]' THEN 'TRY_CAST(a.' + @column_name + ' AS DATE)'	
										ELSE 'CAST(a.'+ @column_name + ' AS  NVARCHAR(600))'  END 
										+ ' = ' + CASE WHEN @datatype = '[datetime]' THEN 'dbo.FNAClientToSqlDate(iidis.' + @staging_column_name + ')' --Expected date format of @staging_column_name is user date format
											ELSE 'CAST(iidis.'+@staging_column_name + ' AS  NVARCHAR(600))'  END

								FETCH NEXT FROM create_join     
							INTO @column_name,@staging_column_name,@datatype
   
							END     
							CLOSE create_join;    
							DEALLOCATE create_join;    
						
				 
					IF NULLIF(@join_query,'') IS NOT NULL 
						BEGIN 
							EXEC(@update_query1 + ' ' + @join_query + ' ' + @where)
						END
		
		DELETE FROM ixp_import_data_interface_staging where NULLIF(import_status,'')='s'
	END
 ---ixp_import_data_interface_staging updating Section END ----------------

IF @run_in_debug_mode = 'y'
BEGIN
 	
 	DECLARE list_user CURSOR  
 	FOR
 	    SELECT application_users.user_login_id
 	    FROM   dbo.application_role_user
 	    INNER JOIN dbo.application_security_role ON  dbo.application_role_user.role_id = dbo.application_security_role.role_id
 	    INNER JOIN dbo.application_users ON  dbo.application_role_user.user_login_id = dbo.application_users.user_login_id
 	    WHERE  (dbo.application_users.user_active = 'y') AND (dbo.application_security_role.role_type_value_id = 2)
		AND application_users.user_login_id<>@user_login_id
 	    GROUP BY dbo.application_users.user_login_id, dbo.application_users.user_emal_add
		UNION ALL 
		SELECT @user_login_id
 	
 	OPEN list_user
 	FETCH NEXT FROM list_user INTO @user
 	WHILE @@FETCH_STATUS = 0
 	BEGIN
 		
 		SELECT @url = './dev/spa_html.php?__user_name__=' + @user + '&spa=exec spa_get_import_process_status ''' + @process_id + ''','''+@user+''''
 	
 		SELECT @desc = '<a target="_blank" href="' + @url + '"><ul style="padding:0px;margin:0px;list-style-type:none;">' 
 						   + '<li style="border:none">Import process completed for as of date:' + dbo.FNAUserDateFormat(GETDATE(), @user) + @message_board_desc 
 	    EXEC spa_message_board 'i', @user,  NULL, 'ImportData', @desc, '', '', @error_code,  @job_name, NULL, @process_id, '', '', '', 'y'
 	    
 	    FETCH NEXT FROM list_user INTO @user
 	END
 	CLOSE list_user
 	DEALLOCATE list_user
 	
 	IF OBJECT_ID('tempdb..#temp_return_values') IS NOT NULL
 		DROP TABLE #temp_return_values
 					
 	SELECT DISTINCT
 			MAX(ssdis.code) [ErrorCode],
 			'Interface' [Module],
 			'Interface Import' [Area],
 			'Error' [Status],
 			ssdisd.[description] [Message],
 			'Please check your data.' [Recommendation]
 	INTO #temp_return_values 
 	FROM source_system_data_import_status ssdis
 	INNER JOIN source_system_data_import_status_detail ssdisd ON  ssdisd.process_id = ssdis.Process_id
 	WHERE ssdis.process_id = @process_id
 	GROUP BY ssdisd.[description]
 		
 	IF NOT EXISTS(SELECT 1 FROM #temp_return_values)
 	BEGIN
 		EXEC spa_ErrorHandler 0, 
 				'Import/Export FX', 
 				 @process_id, 
 				'Status', 
 				'Import process has been run and will complete shortly.', 
 				'Please Check/Refresh your message board.'
 	END
 	ELSE 
 	BEGIN
 		SELECT * FROM #temp_return_values
 	END
END
 
IF @table_name = 'ixp_source_deal_template'
BEGIN
	EXEC spa_register_event 20601, 20515, @alert_process_table, 1, @process_id3
END

IF EXISTS (SELECT 1 FROM module_events WHERE modules_id = 20634 AND event_id = 20515 AND is_active = 'y')
BEGIN
	DECLARE @generic_alert_process_table NVARCHAR(300)
		, @import_process_table_for_alert NVARCHAR(350)

	SET @generic_alert_process_table = dbo.FNAProcessTableName('alert_import', @process_id, '_ad')
	SET @import_process_table_for_alert = @import_temp_table_name + '_for_alert'

	EXEC ('DROP TABLE IF EXISTS ' + @import_process_table_for_alert)
	
	--Source data to process by post import workflow process.
	EXEC('SELECT * INTO ' + @import_process_table_for_alert + ' FROM ' + @import_temp_table_name)
 		
	--Generic alert process table referred by post import workflow process.
	EXEC ('DROP TABLE IF EXISTS ' + @generic_alert_process_table 
		+ ' CREATE TABLE ' + @generic_alert_process_table + ' (
 			status_id  INT,
			import_process_table NVARCHAR(150),
			import_table_name NVARCHAR(50)
 			)'
	)

	SET @sql = 'INSERT INTO ' + @generic_alert_process_table + ' (
 					status_id, import_process_table, import_table_name			
				)
 				SELECT status_id, ''' + @import_process_table_for_alert + ''', ''' + @table_name + '''
				FROM source_system_data_import_status WHERE process_id = ''' + @process_id + ''''
	--PRINT(@sql)
	EXEC(@sql)

	EXEC spa_register_event 20634, 20515, @generic_alert_process_table, 1, @process_id
END
IF @table_name IN ('ixp_wregis_inventory_import_template', 'ixp_wregis_sales_transfer_import_template', 'ixp_wregis_rps_import_template')
BEGIN
	EXEC spa_import_data @import_temp_table_name,'5487',@user_login_id,'n', @process_id, DEFAULT, DEFAULT, NULL
END

--IF @table_name = 'ixp_hourly_allocation_data_template'
-- 	EXEC spa_create_inventory_assignment_deals @temp_table_name = @import_temp_table_name

IF @table_name NOT IN ('ixp_wregires_inventory_import_template', 'ixp_wregis_sales_transfer_import_template', 'ixp_wregis_rps_import_template')
BEGIN
SET @sql = dbo.FNAProcessDeleteTableSql(@import_temp_table_name)
EXEC (@sql)
END

DECLARE @ixp_notification_status VARCHAR(1000), @ixp_notification_status_id INT, @ixp_notification_message_id INT

SELECT @ixp_notification_status =  code,
		@ixp_notification_status_id = status_id
FROM source_system_data_import_status
WHERE process_id = @process_id


IF @ixp_notification_status IN ('Success', 'Warning')
BEGIN
	/* - GET the saved message id in new table/column */
select @ixp_notification_message_id = message_id from ixp_import_data_source where rules_id = @rules_id
END
ELSE IF @ixp_notification_status = 'Error'
BEGIN
	/* - GET the saved message id in new table/column */
	select @ixp_notification_message_id = error_message_id from ixp_import_data_source where rules_id = @rules_id
END

IF @ixp_notification_message_id IS NOT NULL
BEGIN
	EXEC spa_run_alert_message @module_id = 20634,
				@source_id = @ixp_notification_status_id, 
				@event_message_id = @ixp_notification_message_id
END


SET @sql = dbo.FNAProcessDeleteTableSql(@field_compare_table)
EXEC (@sql)
DROP TABLE #import_status

DELETE [source_system_data_import_status_vol_detail]
WHERE  create_ts < DATEADD(MONTH, -6, GETDATE())

DELETE [source_system_data_import_status_vol]
WHERE  create_ts < DATEADD(MONTH, -6, GETDATE())


