// Generated by CoffeeScript 1.7.1
(function() {
	var $, makeGoogleChart;

	$ = jQuery;

	makeGoogleChart = function(chartType, oldChartType, extraOptions) {
		return function(pivotData, opts) {
			var isIE = /*@cc_on!@*/false || !!document.documentMode;

			if (isIE) chartType = oldChartType;

			$('.pvtAggregator').show();
			$('.pvtAttrDropdown').show();
			$('.agg-span').show();
			$('#toolbar').hide();
			var agg, colKey, colKeys, dataArray, dataTable, defaults, groupByTitle, h, hAxisTitle, headers, k, numCharsInHAxis, options, result, row, rowKey, rowKeys, title, v, vAxisTitle, wrapper, _i, _j, _len, _len1;
			defaults = {
				localeStrings: {
					vs: "vs",
					by: "by"
				}
			};
			opts = $.extend(defaults, opts);
			rowKeys = pivotData.getRowKeys();
			if (rowKeys.length === 0) {
				rowKeys.push([]);
			}
			colKeys = pivotData.getColKeys();
			if (colKeys.length === 0) {
				colKeys.push([]);
			}
			var agg_len = pivotData.getAggregatorLength();
			var aggs = pivotData.getAggs();

			headers = (function() {
				var attr_name = pivotData.getAggregatorAttr();
				var _i, _len, _results;
				_results = [];
				for (_i = 0, _len = rowKeys.length; _i < _len; _i++) {
					h = rowKeys[_i];
					for (_o = 0; _o < agg_len; _o++) {
						var val = '';
						if (typeof aggs[_o] !== "undefined")
							val = attr_name[_o];
						
						if (h.join("-") != '') {
							val = val + ' - ' + h.join("-");
						}
						_results.push(val);
					}
				}
				return _results;
			})();
			headers.unshift("");

			numCharsInHAxis = 0;
			dataArray = [headers];

			var attr_name = pivotData.getAggregatorAttr();
			
			for (_i = 0, _len = colKeys.length; _i < _len; _i++) {
				colKey = colKeys[_i];
				row = [colKey.join("-")];
				numCharsInHAxis += row[0].length;
				for (_j = 0, _len1 = rowKeys.length; _j < _len1; _j++) {
					rowKey = rowKeys[_j];
					agg = pivotData.getAggregator(rowKey, colKey);

					for (var ag_cnt = 0; ag_cnt < agg_len; ag_cnt++) {
						if (agg != null) {
							if (agg[ag_cnt]) {
								var attr_id = pivotData.getID(attr_name[ag_cnt], 'v');
								var name = attr_name[ag_cnt];

								val = agg[ag_cnt].value();

								if (val != null) {
									var fmt_val = format_val(attr_id, val, name);
									fmt_val = Number(fmt_val);
									
									row.push(fmt_val)
								} else {
									row.push(null);
								}
							}
						} else {
							row.push(null);
						}

					}
				}
				dataArray.push(row);
			}

			// console.log(attr_name);
			// console.log(JSON.stringify(dataArray[0], null, 2));

			var series_type = [];

			if (chartType == 'ComboChart' && dataArray[0].length > 0) {				
				var gt = pivotData.getGraphType();
				var series_type_text = '';

				for (_k = 0, _len2 = dataArray[0].length; _k < _len2; _k++) {
					var att_name = dataArray[0][_k].toLowerCase();

					if (att_name == '') continue;
					else {
						for (_l = 0, _len3 = attr_name.length; _l < _len3; _l++) {
							var att_name2 = attr_name[_l].toLowerCase();

							if (att_name.indexOf(att_name2) == 0) {
								if (series_type_text != '') series_type_text += ',';
								var index = _k - 1;
								series_type_text += '"' + index + '":{"type":"' + gt[_l] + '"}';
							}
						}
					}
				}

				series_type = JSON.parse('{' + series_type_text + '}');
			}


			title = vAxisTitle = pivotData.aggregatorName + (pivotData.valAttrs.length ? "(" + (pivotData.valAttrs.join(", ")) + ")" : "");
			hAxisTitle = pivotData.colAttrs.join("-");
			if (hAxisTitle !== "") {
				title += " " + opts.localeStrings.vs + " " + hAxisTitle;
			}
			groupByTitle = pivotData.rowAttrs.join("-");
			if (groupByTitle !== "") {
				title += " " + opts.localeStrings.by + " " + groupByTitle;
			}

			if (($('.hidden-x-axis').val() != '' && $('.hidden-x-axis').val() != 'undefined') || get_xaxis_label() != '') {
				hAxisTitle = $('.hidden-x-axis').val() || get_xaxis_label();
			}
			if (($('.hidden-y-axis').val() != '' && $('.hidden-y-axis').val() != 'undefined') || get_yaxis_label() != '')  {
				vAxisTitle = $('.hidden-y-axis').val() || get_yaxis_label();
			}
			
			vAxisTitle = (typeof vAxisTitle === 'undefined' || vAxisTitle == 'undefined') ? '' : vAxisTitle;
			hAxisTitle = (typeof hAxisTitle === 'undefined' || hAxisTitle == 'undefined') ? '' : hAxisTitle;
			
			options = {
				width: $(window).width()/1.4,
				height: $(window).height() / 1.4,				
				hAxis: {
					title: hAxisTitle,
					slantedText: numCharsInHAxis > 50
				},
				vAxis: {
					title: vAxisTitle
				}
			};	

			if ($('.hidden-refresh-btn').text() != '' || get_report_name() != '') {
				title = $('.hidden-refresh-btn').text() || get_report_name();
			}

			if (isIE || (chartType == 'PieChart' || chartType == 'ColumnChart' || chartType == 'AreaChart' || chartType == 'ComboChart')) {				
				options.title = title 
			} else {
				options.chart = {
		          title: title
		        }
				
		        options.axes = {
		          y: {
		            0: {label: vAxisTitle}
		          },
		          x:{0:{label: hAxisTitle}}
		        }
			}

			if (dataArray[0].length === 2 && dataArray[0][1] === "") {
				options.legend = {
					position: "none"
				};
			} 

			for (k in extraOptions) {
				v = extraOptions[k];
				options[k] = v;
			}

			if (chartType == 'ComboChart') {
				options.series = series_type;
			}

			//console.log(options);
			
			dataTable = google.visualization.arrayToDataTable(dataArray);
			result = $("<div style='width: 150%; height: 90%;'>");
			wrapper = new google.visualization.ChartWrapper({
				dataTable: dataTable,
				chartType: chartType,
				options: options
			});

			wrapper.draw(result[0]);

			$('svg', $(result)).css({
				overflow:'visible'
			})
			
			/*
			result.bind("dblclick", function() {
			  var editor;
			  editor = new google.visualization.ChartEditor();
			  google.visualization.events.addListener(editor, 'ok', function() {
			    return editor.getChartWrapper().draw(result[0]);
			  });
			  return editor.openDialog(wrapper);
			});
			*/
			return result;
		};
	};

	$.pivotUtilities.gchart_renderers = {		
		"Area": makeGoogleChart("AreaChart", "AreaChart", {
			isStacked: true
		}),
		"Bar": makeGoogleChart("Bar", "BarChart",{
			bars: 'horizontal'
		}),
		"Column": makeGoogleChart("Bar", "ColumnChart"),
		"Combo": makeGoogleChart("ComboChart", "ComboChart", {
			seriesType: 'line'
		}),
		"Donut": makeGoogleChart("PieChart", "PieChart", {
			pieHole: 0.4,
		}),
		"Gauge": makeGoogleChart("Gauge", "Gauge", {
			redFrom: 90,
			redTo: 100,
			yellowFrom: 75,
			yellowTo: 90,
			minorTicks: 10
		}),
		"Line": makeGoogleChart("Line", "LineChart",{
			curveType: 'function'
		}),		
		"Pie": makeGoogleChart("PieChart", "PieChart"),
		"Pie 3D": makeGoogleChart("PieChart", "PieChart", {
			is3D: true
		}),
		"Scatter": makeGoogleChart("Scatter", "Scatter"),
		"Stacked Column": makeGoogleChart("ColumnChart", "ColumnChart", {
			isStacked: true
		})		
	};
}).call(this);